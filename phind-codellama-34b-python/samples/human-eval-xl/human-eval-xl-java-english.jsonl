{"task_id": "java/0", "language": "java", "completion": "int balance = 0;\n        for (int i : operations){\n            balance += i;\n            if (balance < 0) return true;\n        }\n        return false;\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "int sum = 0;\n        int product = 1;\n        \n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int n = (int) number;\n                sum += n;\n                product *= n;\n            } else {\n                throw new IllegalArgumentException(\"List must contain only integers\");\n            }\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> result = sumProduct(Arrays.asList(1, 2, 3, 4));\n        System.out.println(\"Sum: \" + result.get(0) + \", Product: \" + result.get(1));\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n\npublic class Test {\n    public static void main (String[] args) throws java.lang.Exception{\n        String a = \"010\";\n        String b = \"110\";\n        System.out.println(StringXor.stringXor(a, b));  // Output: 100\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "if (strings.isEmpty()) {\n            return null;\n        }\n\n        String longest = \"\";\n        for (String string : strings) {\n            if (string.length() > longest.length()) {\n                longest = string;\n            }\n        }\n\n        return longest;\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "while (b != 0){\n            int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(GreatestCommonDivisor.greatestCommonDivisor(3, 5));\n        System.out.println(GreatestCommonDivisor.greatestCommonDivisor(25, 15));\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "// Create an array of strings for comparison\n        final String[] numsArray = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\n        // Split the input string into an array\n        String[] numbersArray = numbers.split(\" \");\n\n        // Sort the array using a custom comparator that compares based on the index of each element in numsArray\n        Arrays.sort(numbersArray, new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return Integer.compare(ArrayUtils.indexOf(numsArray, o1), ArrayUtils.indexOf(numsArray, o2));\n            }\n        });\n\n        // Join the sorted array back into a string separated by spaces and return it\n        return String.join(\" \", numbersArray);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortNumbers(\"three one five\"));  // Returns 'one three five'\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        return numbers.stream().map(n -> (n - min) / (max - min)).collect(Collectors.toList());\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                // Convert to uppercase\n                result.append(Character.toUpperCase(c));\n            } else {\n                // Convert to lowercase\n                result.append(Character.toLowerCase(c));\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main (String[] args) throws java.lang.Exception{\n        String str = \"Hello\";\n        System.out.println(flipCase(str));\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "List<Object> positiveNums = new ArrayList<>();\n        for (Object num : l) {\n            if ((Integer)num > 0) {\n                positiveNums.add(num);\n            }\n        }\n        return positiveNums;\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(\"is_prime(6) = \" + isPrime(6));   // False\n        System.out.println(\"is_prime(101) = \" + isPrime(101));  // True\n        System.out.println(\"is_prime(11) = \" + isPrime(11));  // True\n        System.out.println(\"is_prime(13441) = \" + isPrime(13441)); // True\n        System.out.println(\"is_prime(61) = \" + isPrime(61)); // True\n        System.out.println(\"is_prime(4) = \" + isPrime(4));  // False\n        System.out.println(\"is_prime(1) = \" + isPrime(1));  // False\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n    \n    public static void main (String[] args) throws java.lang.Exception {\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"unique elements in a list: \" + unique(list));\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "ArrayList<Integer> primes = new ArrayList<>();\n        ArrayList<Integer> fibs = new ArrayList<>();\n        int i = 2;\n        while (primes.size() < n) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n            i++;\n        }\n        fibs.add(0, 0);\n        fibs.add(1, 1);\n        while (fibs.size() < n) {\n            int next = fibs.get(fibs.size() - 1) + fibs.get(fibs.size() - 2);\n            fibs.add(next);\n        }\n        for (int j = 0; j < n; j++) {\n            if (primes.get(j) == fibs.get(j)) {\n                return primes.get(j);\n            }\n        }\n        return -1;\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "if (l.size() < 3) return false; // less than 3 elements, no triplets possible\n        \n        Collections.sort(l);\n\n        for (int i = 0; i < l.size(); i++) {\n            int a = l.get(i);\n            int left = -1, right = l.size() - 1;\n\n            while (left < right) {\n                if (a + l.get(left) + l.get(right) == 0) return true;\n                \n                if (a + l.get(left) + l.get(right) > 0) right--; // decrease the sum, try to make it zero or negative\n                else left++; // increase the sum, try to make it positive or zero\n            }\n        }\n        \n        return false; // no triplets found that sum to zero\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "Set<Integer> set = new HashSet<>();\n        for (int i: l) {\n            if (set.contains(-i)) {\n                return true;\n            } else {\n                set.add(i);\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        \n        int[] fib = new int[n+1];\n        fib[2] = 2;\n        for(int i=4;i<=n;++i){\n            fib[i] = fib[i-1]+fib[i-2]+fib[i-3]+fib[i-4];\n        }\n        \n        return fib[n];\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            // If the list has an even number of elements, return the average of the two middle ones\n            double mid1 = l.get((int)(size/2)-1);\n            double mid2 = l.get(size/2);\n            return (mid1+mid2)/2;\n        } else {\n            // If the list has an odd number of elements, return the middle one\n            return l.get((size-1)/2);\n        }\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "int start = 0;\n        int end = text.length() - 1;\n\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\")); // Expected: True\n        System.out.println(isPalindrome(\"aba\")); // Expected: True\n        System.out.println(isPalindrome(\"aaaaa\")); // Expected: True\n        System.out.println(isPalindrome(\"zbcd\")); // Expected: False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (Integer i : l){\n            if(i >= t) return false;\n        }\n        return true;\n    }\n\n}"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n    }\n}\n\nclass Subtract {\n    /**\n     * Subtract two numbers x and y\n     * >>> subtract(5, 3)\n     * 2\n     * >>> subtract(7, 2)\n     * 5\n     *\n     */\n    public static int subtract(int x, int y) {\n        return x - y;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        while ((line = br.readLine()) != null) {\n            String[] words = line.split(\" \");\n            if (words[0].equals(\"add\")) {\n                System.out.println(Add.add(Integer.parseInt(words[1]), Integer.parseInt(words[2])));\n            } else if (words[0].equals(\"subtract\")) {\n                System.out.println(Subtract.subtract(Integer.parseInt(words[1]), Integer.parseInt(words[2])));\n            }\n        }\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n\n        return Arrays.equals(c0, c1);\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 1) return n;\n        else return fib(n-1) + fib(n-2);\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "Set<Object> set = new HashSet<>();\n        for (Object item : l1) {\n            if (l2.contains(item)) {\n                set.add(item);\n            }\n        }\n\n        return new ArrayList<>(set);\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "while (n % 2 == 0) {\n            n /= 2;\n        }\n        // n must be odd at this point, thus a skip of 2 can be used\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n        return n > 1 ? n : 2; // if n is a prime number and n > 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "return (n*(n+1))/2;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Sum from 1 to 30 is: \" + SumToN.sumToN(30));\n        System.out.println(\"Sum from 1 to 100 is: \" + SumToN.sumToN(100));\n        System.out.println(\"Sum from 1 to 5 is: \" + SumToN.sumToN(5));\n        System.out.println(\"Sum from 1 to 10 is: \" + SumToN.sumToN(10));\n        System.out.println(\"Sum from 1 to 1 is: \" + SumToN.sumToN(1));\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i=0; i<xs.size()-1; i++) {\n            result.add((i+1)*xs.get(i+1));\n        }\n        return result;\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "if (n <= 0) return 0;\n        else if (n == 1) return 0;\n        else if (n == 2) return 1;\n        else {\n            int[] mem = new int[n+1];\n            Arrays.fill(mem, -1);\n            mem[0] = 0;\n            mem[1] = 0;\n            mem[2] = 1;\n\n            for (int i = 3; i <= n; i++) {\n                mem[i] = mem[i-1] + mem[i-2] + mem[i-3];\n            }\n            \n            return mem[n];\n        }\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "String vowels = \"aeiouAEIOU\";\n        char[] chars = s.toCharArray();\n        int count = 0;\n        \n        for (char c : chars) {\n            if (vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        \n        // check 'y' only when it is at the end of word\n        if (s.length() > 0 && s.charAt(s.length()-1) == 'y') {\n            count++;\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\"));   // 2\n        System.out.println(vowelsCount(\"ACEDY\"));   // 3\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "Map<Integer, Integer> count = new HashMap<>();\n        for (int num : lst) {\n            count.put(num, count.getOrDefault(num, 0) + 1);\n        }\n\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n\n        return max;\n    }\n    \n    public static void main(String[] args){\n        List<Integer> list1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        List<Integer> list2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        List<Integer> list3 = Arrays.asList(5, 5, 4, 4, 4);\n        \n        System.out.println(\"search([4, 1, 2, 2, 3, 1]) == \" + search(list1));\n        System.out.println(\"search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == \" + search(list2));\n        System.out.println(\"search([5, 5, 4, 4, 4]) == \" + search(list3));\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "if (a + b > c && a + c > b && b + c > a) {\n            double s = (double)(a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            \n            // Round the result to 2 decimal places using BigDecimal\n            BigDecimal roundedArea = new BigDecimal(Double.toString(area));\n            roundedArea = roundedArea.setScale(2, RoundingMode.HALF_UP);\n            \n            return roundedArea;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "if (q == null || q.size() == 0) return false;\n        \n        // Check if the list is a palindromic list\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!Objects.equals(q.get(i), q.get(q.size() - 1 - i))) return false;\n        }\n        \n        // Check if the sum of its elements is less than or equal to w\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "if (a < 2) return false; // a should be at least 2\n\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0) { // If a is divisible by i then divide it\n                if (i <= 1) return false; // i should be greater than 1\n                if (isPrime(i)) a /= i;\n                else break;\n            }\n        }\n\n        return a == 1;\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) return false; // If a is divisible by i then it's not a prime number\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "public class Main{\n  public static void main(String[] args){\n    System.out.println(decimalToBinary(15));     // prints db1111db\n    System.out.println(decimalToBinary(32));     // prints db100000db\n  }\n\n  public static String decimalToBinary(int decimal){\n    return \"db\"+Integer.toBinaryString(decimal)+\"db\";\n  }\n}"}
{"task_id": "java/33", "language": "java", "completion": "if (s.length() < 3) {\n            return false;\n        } else {\n            for (int i = 0; i <= s.length() - 3; i++) {\n                char c1 = s.charAt(i);\n                char c2 = s.charAt(i+1);\n                char c3 = s.charAt(i+2);\n                \n                if (c1 == c2 || c1 == c3 || c2 == c3) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "List<String> letterGrades = new ArrayList<>();\n        \n        for (double g : grades) {\n            if (g == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (g > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (g > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (g > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (g > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (g > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (g > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (g > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (g > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (g > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (g > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (g > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        System.out.println(numericalLetterGrade(grades));\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\")); // True\n        System.out.println(primeLength(\"abcdcba\")); // True\n        System.out.println(primeLength(\"kittens\")); // True\n        System.out.println(primeLength(\"orange\")); // False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "// Convert the integer to a string and reverse it\n        String reversed = new StringBuilder(Integer.toString(n)).reverse().toString();\n        \n        int sum = 0;\n        for (char digit : reversed.toCharArray()) {\n            // Subtract '0' from each character to get the actual numeric value of the digit\n            sum += Character.getNumericValue(digit);\n        }\n        \n        // Convert the sum to binary, reverse it and return as a string\n        String binary = new StringBuilder(Integer.toBinaryString(sum)).reverse().toString();\n        \n        return binary;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(solve(1000));  // prints \"1\"\n        System.out.println(solve(150));   // prints \"110\"\n        System.out.println(solve(147));   // prints \"1100\"\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "ArrayList<Tuple> result = new ArrayList<>();\n        \n        for (int i=0; i<lst.size(); ++i){\n            List<Integer> row = (ArrayList<Integer>) lst.get(i);\n            \n            for (int j=row.size()-1; j>=0; --j) {\n                if (row.get(j).equals(x)) {\n                    result.add(new Tuple(i, j));\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    static class Tuple implements Comparable<Tuple>{\n        int first;\n        int second;\n        \n        Tuple(int a, int b){\n            this.first = a;\n            this.second = b;\n        }\n        \n        public int compareTo(Tuple o) {\n            if (this.first != o.first) {\n                return this.first - o.first;\n            } else {\n                return o.second - this.second;  // descending order\n            }\n        }\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "if (lst.size() < 2) return null;\n        \n        int first = Integer.MAX_VALUE;\n        int second = Integer.MAX_VALUE;\n        \n        for (Object i : lst) {\n            int num = (Integer)i;\n            if(num <= first){\n                second = first;\n                first = num;\n            }else if(num < second){\n                second = num;\n            }\n        }\n        return (second == Integer.MAX_VALUE)? null : second;\n    }\n    \n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"nextSmallest([1, 2, 3, 4, 5]) == \" + nextSmallest(list1)); // should print: 2\n        \n        List<Object> list2 = Arrays.asList(5, 1, 4, 3, 2);\n        System.out.println(\"nextSmallest([5, 1, 4, 3, 2]) == \" + nextSmallest(list2)); // should print: 2\n        \n        List<Object> list3 = new ArrayList<>();\n        System.out.println(\"nextSmallest([]) == \" + nextSmallest(list3)); // should print: null\n\n        List<Object> list4 = Arrays.asList(1, 1);\n        System.out.println(\"nextSmallest([1, 1]) == \" + nextSmallest(list4)); // should print: null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "String[] sentences = s.split(\"[.!?]\");\n        int boredomCount = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isBored(\"Hello world\")); // 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); //1\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "// Write your code here\n        // Initialize maximum prime number and sum of digits.\n        int maxPrime = Integer.MIN_VALUE;\n        int sumDigits = 0;\n\n        // Traverse through the list.\n        for (int num : lst) {\n            // Check if a number is prime number or not.\n            if (isPrime(num)) {\n                // If it's a prime number, check if it's greater than maxPrime.\n                if (num > maxPrime) {\n                    maxPrime = num;  // Update maxPrime.\n\n                    // Compute the sum of digits for this prime number.\n                    while(num != 0){\n                        sumDigits += num % 10;\n                        num /= 10;\n                    }\n                }\n            }\n        }\n\n        return sumDigits;  // Return the sum of digits.\n    }\n\n    // Function to check if a number is prime or not.\n    public static boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        \n        for (int i = 2; i < Math.sqrt(n); i++)\n            if (n % i == 0)\n                return false;\n                    \n        return true;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "if (!(dict instanceof Map)) {\n            throw new IllegalArgumentException(\"Invalid input, please enter a Dictionary.\");\n        }\n        \n        @SuppressWarnings(\"unchecked\")\n        Map<String, String> map = (Map<String, String>) dict;\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (String key : map.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            if (!key.equals(key.toLowerCase())) {\n                allLowerCase = false;\n            }\n\n            if (!key.equals(key.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n        \n        return allLowerCase || allUpperCase;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // True\n        System.out.println(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // False\n        System.out.println(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // False\n        System.out.println(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // False\n        System.out.println(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); // True\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "Here's a simple way to solve this problem:\n\n1. Convert the string to a double using Double.parseDouble method.\n2. Subtract the floor of the number from the number itself. This will give you the fractional part. If it is greater than 0.5 and the number is positive, we need to round up. If it's negative and less than -0.5, then round down.\n3. Use Math.round() function which rounds a floating point value to the nearest integer.\n4. Cast the result to int as Math.round() returns a long data type.\n\nHere is how you might implement this in Python:"}
{"task_id": "java/43", "language": "java", "completion": "List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int stones;\n            if (n % 2 == 0) {\n                stones = n + 2 * i;\n            } else {\n                stones = n + 2 * i - 1;\n            }\n            pile.add(stones);\n        }\n        return pile;\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "// You can split the string with commas or spaces using regular expressions:\n        return Arrays.asList(s.split(\"[, ]\"));\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "// write your code here\n        if (x > y) return -1;\n        if (y % 2 == 0) return y;\n        else return y - 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"The biggest even number in the range [12, 15] is: \" + chooseNum(12, 15));\n        System.out.println(\"The biggest even number in the range [13, 12] is: \" + chooseNum(13, 12));\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "if (n > m) {\n            return -1;\n        } else {\n            // Calculate the average of numbers from n to m and round it to nearest integer.\n            double avg = Math.round((m + n) / 2.0);\n            \n            // Convert the rounded average into binary and return as a string prefixed with \"0b\".\n            String binaryAvg = Integer.toBinaryString(avg);\n            \n            return \"0b\" + binaryAvg;\n        }\n    }\n\n    public static void main(String args[]) {\n        System.out.println(roundedAvg(1, 5));\n        System.out.println(roundedAvg(7, 5));\n        System.out.println(roundedAvg(10, 20));\n        System.out.println(roundedAvg(20, 33));\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "int countEven = 0, countOdd = 0;\n        for (int i=1; i<=n; i++){\n            if (isPalindrome(i)){\n                if (i%2 == 0){\n                    countEven++;\n                } else {\n                    countOdd++;\n                }\n            }\n        }\n        return Arrays.asList(countEven, countOdd);\n    }\n\n    private static boolean isPalindrome(int x) {\n        if (x < 0) return false;\n        int reversed = 0, original = x;\n        while (x > 0){\n            int digit = x % 10;\n            reversed = reversed * 10 + digit;\n            x /= 10;\n        }\n        return original == reversed;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "if (arr == null || arr.size() <= 1) return true;\n        \n        int n = arr.size();\n        Integer[] nums = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = (Integer)arr.get(i);\n        }\n        \n        // check if the array is already sorted in non-decreasing order\n        for (int i = 1; i < n; i++) {\n            if (nums[i - 1] > nums[i]) {\n                return false;\n            }\n        }\n        \n        // check if we can obtain the sorted array by shifting to the right\n        int count = 0, rotations = 0;\n        for (int i = n - 2; i >= 0; i--) {\n            if (nums[i] > nums[i + 1]) {\n                count++;\n                rotations = i + 1;\n            }\n        }\n        \n        if (count == 0) return true;\n        else if (count == 1 && (n - rotations <= rotations || n - rotations % 2 == 0)) {\n            // if we have only one mismatch and it is located at the correct position\n            // or if we can rotate the array to the right twice\n            return true;\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // should return True\n        System.out.println(moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // should return False\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "boolean[] count = new boolean[10];\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                count[(int) Math.floor(Math.log(num / 10.0) + 1)] = true;\n            }\n        }\n        for (int num : lst2) {\n            if (!count[(int) Math.floor(Math.log(num / 10.0) + 1)]) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "Set<Character> set = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!set.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n        \n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        List<Object> list = new ArrayList<>();\n        list.add(0, result);\n        list.add(1, isPalindrome);\n        return list;\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        List<Object> result = reverseDelete(\"abcde\", \"ae\");\n        System.out.println(result); // Output: [bcd, false]\n        result = reverseDelete(\"abcdef\", \"b\");\n        System.out.println(result); // Output: [acdef, false]\n        result = reverseDelete(\"abcdedcba\", \"ab\");\n        System.out.println(result); // Output: [cdedc, true]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "int count = 0;\n        for (List<Integer> row : grid) {\n            int numWellsFilled = 0;\n            while (numWellsFilled < row.size()) {\n                if (row.get(numWellsFilled) == 1) {\n                    // Find the end of this filled well segment\n                    int j = numWellsFilled + 1;\n                    while (j < row.size() && row.get(j) == 1) {\n                        j++;\n                    }\n                    \n                    // Lower bucket as many times as possible\n                    int k = numWellsFilled;\n                    while (k < j) {\n                        count++;\n                        k += capacity;\n                    }\n                    numWellsFilled = j;\n                } else {\n                    numWellsFilled++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "String[] words = s.split(\" \");\n        List<Object> result = new ArrayList<>();\n        \n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || \n                    c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || \n                    c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || \n                    c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n                        count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "// A priority queue to store pairs of number and their indices\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);\n\n        for (int i=0; i<arr.size(); ++i) {\n            int num = arr.get(i);\n            pq.add(new int[]{num, i});\n            \n            // Make sure the size of priority queue is always k\n            while (pq.size() > k) {\n                pq.remove();\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        \n        while (!pq.isEmpty()) {\n            int[] pair = pq.remove();\n            result.add(pair[0]);\n        }\n        \n        return result;\n    }\n\n    public static void main (String[] args) { \n        System.out.println(maximum(Arrays.asList(-3, -4, 5), 3)); // [-4, -3, 5]\n        System.out.println(maximum(Arrays.asList(4, -4, 4), 2)); // [4, 4]\n        System.out.println(maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1)); // [2]\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            int num = arr.get(i);\n            while (num > 99) {\n                num /= 10; // Remove the last digit if it's more than two digits\n            }\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) return \"NO\";\n\n        int intersectionLength = end - start + 1;\n\n        if (isPrimeNumber(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrimeNumber(int n) {\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "// Create an array to store the resultant sequence\n        List<Number> triSeq = new ArrayList<>();\n        \n        // Add the base case number\n        triSeq.add((double)3);\n\n        for (int i=1; i<=n; ++i){\n            // Calculate the next Tribonacci number\n            if(i % 2 == 0){\n                triSeq.add((double)(1 + i / 2));\n            }else{\n                double currentTri = (double)triSeq.get(i - 1) + (double)triSeq.get(i - 2) + (double)triSeq.get(i);\n                triSeq.add(currentTri);\n            }\n        }\n        \n        // Return the Tribonacci sequence list\n        return triSeq;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "int prod = 1; // Product of odd digits\n        boolean hasOddDigits = false; // Whether there are any odd digits at all\n        while (n > 0) {\n            int digit = n % 10; // Last digit\n            if (digit % 2 != 0) {\n                prod *= digit; // Multiply with product of odd digits so far\n                hasOddDigits = true;\n            }\n            n /= 10; // Remove last digit\n        }\n        return hasOddDigits ? prod : 0;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[' && !stack.isEmpty() && stack.peek() == '[') {\n                return true;\n            } else {\n                stack.push(c);\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "int sum = 0;\n        for (Number num : lst) {\n            // Round each number to the upper ceiling using Math.ceil function and then square it\n            double ceilValue = Math.ceil(num.doubleValue());\n            sum += (int)Math.pow(ceilValue, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "if (txt == null || txt.length() == 0) return false;\n        while (Character.isLetter(txt.charAt(txt.length() - 1)) == false && txt.length() > 1) {\n            txt = txt.substring(0, txt.length() - 2);\n        }\n        if (txt.length() < 1 || Character.isLetter(txt.charAt(txt.length() - 1))) return true;\n        else return false;\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "for (int i=0;i < arr.size()-1;i++)\n            if (arr.get(i+1).compareTo(arr.get(i)) < 0){\n                return i+1;\n            }\n        return -1;\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "int smallestPositive = Integer.MAX_VALUE;\n        int largestNegative = Integer.MIN_VALUE;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int number = (Integer) obj;\n                if (number > 0 && number < smallestPositive) {\n                    smallestPositive = number;\n                }\n                else if (number < 0 && number > largestNegative) {\n                    largestNegative = number;\n                }\n            }\n        }\n\n        if(smallestPositive == Integer.MAX_VALUE){\n            smallestPositive = null;\n        }\n        \n        if(largestNegative == Integer.MIN_VALUE){\n            largestNegative = null;\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n    \n}"}
{"task_id": "java/64", "language": "java", "completion": "long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    /**\n     * Compute the factorial of a number using an iterative approach.\n     * @param num the number to compute the factorial of\n     * @return the factorial of num\n     */\n    public static long factorial(int num) {\n        long result = 1;\n        for (int i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(SpecialFactorial.specialFactorial(4)); // 288\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "// Split the input string into an array of words\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        \n        for (String word : words) {\n            int len = word.length();\n            \n            // Check if length is a prime number \n            if (len == 2 || len == 3 || len == 5 || len == 7) {\n                // If it's a prime, add the word to our result string\n                result += \" \" + word;\n            }\n        }\n        \n        return result.trim();  // Remove leading and trailing spaces from final answer\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\"));  // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\"));  // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "// split the strings to get the numerators and denominators\n        String[] xSplit = x.split(\"/\");\n        String[] nSplit = n.split(\"/\");\n\n        // convert the strings to integers\n        int num1 = Integer.parseInt(xSplit[0]);\n        int den1 = Integer.parseInt(xSplit[1]);\n        int num2 = Integer.parseInt(nSplit[0]);\n        int den2 = Integer.parseInt(nSplit[1]);\n\n        // calculate the result of the multiplication\n        int resNum = num1 * num2;\n        int resDen = den1 * den2;\n\n        // check if the result is a whole number\n        return (resNum % resDen == 0);\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "if (nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Map<Integer, List<Object>> map = new TreeMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sumOfDigits = getSumOfDigits((int)nums.get(i));\n            if (!map.containsKey(sumOfDigits)) {\n                map.put(sumOfDigits, new ArrayList<>());\n            }\n            map.get(sumOfDigits).add(nums.get(i));\n        }\n        \n        List<Object> result = new ArrayList<>();\n        for (Map.Entry<Integer, List<Object>> entry : map.entrySet()) {\n            result.addAll(entry.getValue());\n        }\n        \n        return result;\n    }\n    \n    public static int getSumOfDigits(int num) {\n        int sum = 0;\n        if (num < 0) {\n            num = -num;\n        }\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "int count = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                int n = Math.abs((int) num); // Convert to positive number\n                \n                // Check if the number is greater than 10\n                if (n > 10) {\n                    // Check if first and last digits are odd\n                    int first_digit = n / 10; \n                    int last_digit = n % 10; \n                    \n                    if ((first_digit % 2 == 1) && (last_digit % 2 == 1)) {\n                        count++; // Increment the counter\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "// Write your code here\n        if (n < 3) {\n            return 0;\n        }\n        \n        int[] arr = new int[n];\n        for (int i=1; i<=n; i++) {\n            arr[i-1] = i*i - i + 1;\n        }\n        \n        int count = 0;\n        for(int i=0; i<n; i++) {\n            if (arr[i] % 3 == 0) {\n                count += (i+2); // (i, i+1, i+2)\n            } else {\n                int mod = arr[i] % 3;\n                \n                for(int j=i+1; j<n; j++) {\n                    if ((arr[j] + mod) % 3 == 0) {\n                        count += (j+1); // (i, j, j+1)\n                    }\n                }\n            }\n        }\n        \n        return count / 3; // as each triple was counted 3 times\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "// Define the order of planets by their proximity to the sun\n        String[] planets = new String[]{\n            \"Mercury\", \n            \"Venus\", \n            \"Earth\", \n            \"Mars\", \n            \"Jupiter\", \n            \"Saturn\", \n            \"Uranus\", \n            \"Neptune\"};\n        \n        List<Object> result = new ArrayList<>();\n        \n        // Check if planet1 and planet2 are correct planet names\n        boolean isPlanet1Valid = Arrays.asList(planets).contains(planet1);\n        boolean isPlanet2Valid = Arrays.asList(planets).contains(planet2);\n        \n        if (!isPlanet1Valid || !isPlanet2Valid) {\n            return result;\n        }\n        \n        // Find the index of planet1 and planet2 in the planets array\n        int idxPlanet1 = Arrays.asList(planets).indexOf(planet1);\n        int idxPlanet2 = Arrays.asList(planets).indexOf(planet2);\n        \n        // Return the list of planets located between the orbit of planet1 and the orbit of planet2\n        if (idxPlanet1 < idxPlanet2) {\n            for (int i=idxPlanet1+1; i<idxPlanet2; i++) {\n                result.add(planets[i]);\n            }\n        } else {\n            for (int i=idxPlanet2+1; i<idxPlanet1; i++) {\n                result.add(planets[i]);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Function to check whether a number is prime or not\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "if (lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n\n        for (Object obj : lst) {\n            if (!(obj instanceof Integer)) {\n                continue;\n            }\n            \n            int num = (Integer)obj;\n\n            if (num < 0) {\n                continue;\n            }\n\n            if (num % 2 != 0) {\n                sum += num * num;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 3, 2, 0);\n        List<Object> list2 = Arrays.asList(-1, -2, 0);\n        List<Object> list3 = Arrays.asList(9, -2);\n        List<Object> list4 = Arrays.asList(0);\n        \n        System.out.println(doubleTheDifference(list1)); // Output: 10\n        System.out.println(doubleTheDifference(list2)); // Output: 0\n        System.out.println(doubleTheDifference(list3)); // Output: 81\n        System.out.println(doubleTheDifference(list4)); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "double maxStrength = Double.MIN_VALUE;\n        String bestExtension = null;\n        \n        for (String extension: extensions){\n            int upperCaseCount = 0, lowerCaseCount = 0;\n            \n            for(char c : extension.toCharArray()){\n                if(Character.isUpperCase(c))\n                    upperCaseCount++;\n                else if(Character.isLowerCase(c))\n                    lowerCaseCount++;\n            }\n        \n            double strength = upperCaseCount - lowerCaseCount;\n            \n            if(strength > maxStrength){\n                bestExtension = extension;\n                maxStrength = strength;\n            }\n        }\n        \n        return className + \".\" + bestExtension;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "// if the length of string b is greater than string a then return false\n        if (b.length() > a.length()) {\n            return false;\n        }\n\n        for (int i = 0; i < b.length(); ++i) {\n            String rotatedB = b.substring(i) + b.substring(0, i);\n\n            if (a.contains(rotatedB)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args){\n        System.out.println(cycpatternCheck(\"abcd\",\"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\",\"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\",\"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\",\"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\",\"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\",\"simen\")); // True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "HashMap<Integer, String> map = new HashMap<>();\n        map.put(1000, \"m\");\n        map.put(900, \"cm\");\n        map.put(500, \"d\");\n        map.put(400, \"cd\");\n        map.put(100, \"c\");\n        map.put(90, \"xc\");\n        map.put(50, \"l\");\n        map.put(40, \"xl\");\n        map.put(10, \"x\");\n        map.put(9, \"ix\");\n        map.put(5, \"v\");\n        map.put(4, \"iv\");\n        map.put(1, \"i\");\n        \n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            while (number >= entry.getKey()) {\n                number -= entry.getKey();\n                result.append(entry.getValue());\n            }\n        }\n        return result.toString().toLowerCase();\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        boolean containsLetter = false;\n        \n        for (int i = 0; i < s.length(); ++i) {\n            char c = s.charAt(i);\n            \n            if (Character.isAlphabetic(c)) {\n                sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                \n                containsLetter = true;\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (!containsLetter) {\n            sb.reverse();\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "if (text.isEmpty()) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashText = no.toString(16);  \n            \n            // Pad with leading zeros\n            while (hashText.length() < 32) {\n                hashText = \"0\" + hashText;\n            }\n            \n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "// If a and b are the same, return empty list.\n        if (a == b) {\n            return new ArrayList<>();\n        }\n\n        // Initialize an empty list to store even digits.\n        List<Integer> even_digits = new ArrayList<>();\n\n        // Determine which integer is smaller.\n        int lower, upper;\n        if (a < b) {\n            lower = a;\n            upper = b;\n        } else {\n            lower = b;\n            upper = a;\n        }\n\n        // Iterate through all numbers between the two integers.\n        for (int i = lower; i <= upper; i++) {\n            int num = i;\n            while(num > 0) {\n                if ((num % 10) % 2 == 0) {\n                    even_digits.add(i);\n                    break;\n                }\n                num /= 10;\n            }\n        }\n\n        return even_digits;\n    }\n}"}

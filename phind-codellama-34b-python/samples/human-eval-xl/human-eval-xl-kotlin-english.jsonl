{"task_id": "kotlin/0", "language": "kotlin", "completion": "var balance = 0\n    operations.forEach { operation ->\n        if (operation is Int) {\n            balance += operation\n            if (balance < 0) return true\n        }\n    }\n    return false\n}\n\nfun main() {\n    print(belowZero([1, 2, 3])) // False\n    print(belowZero([1, 2, -4, 5])) // True\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "var sum = 0\n    var product = 1\n    for (num in numbers) {\n        if (num is Int){\n            sum += num\n            product *= num\n        }\n    }\n    return listOf(sum, product)\n}\n\nfun main() {\n    println(sumProduct(listOf<Any>())) // returns: [0, 1]\n    println(sumProduct(listOf(1, 2, 3, 4))) // returns: [10, 24]\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "val maxLen = Math.max(a.length, b.length)\n    val aNew = a.padStart(maxLen,'0')\n    val bNew = b.padStart(maxLen,'0')\n    \n    var result = \"\"\n    for (i in 0 until maxLen) {\n        result += if(aNew[i] == bNew[i]) '0' else '1'\n    }\n    return result\n}\n\n// Test\nprintln(stringXor('010', '110')) // Output: '100'"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "if (strings.isEmpty()) return null\n    var maxLength = 0\n    var longestString: String? = null\n    for(string in strings) {\n        if(string is String) {\n            if (string.length > maxLength) {\n                maxLength = string.length\n                longestString = string\n            }\n        }\n    }\n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "if (b == 0){\n        return a\n    }\n    return greatestCommonDivisor(b, a % b)\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "val nums = numbers.split(\" \")\n    return nums.sorted().joinToString(\" \")\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "val min = numbers.min() ?: return listOf()\n    val max = numbers.max() ?: return listOf()\n    val range = max - min\n\n    return numbers.map{ (it-min)/range }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "var result = \"\"\n    for (c in string){\n        if (Character.isLowerCase(c)) \n            result += Character.toUpperCase(c)\n        else \n            result += Character.toLowerCase(c)\n    }\n    return result\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "val positiveNumbers = mutableListOf<Int>()\n\n    for (num in l) {\n        if (num is Int && num > 0) {\n            positiveNumbers.add(num)\n        }\n    }\n    \n    return positiveNumbers\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "if (n <= 1) return false // numbers less than or equal to 1 are not prime\n    if (n == 2) return true // number 2 is a prime number\n    if (n % 2 == 0) return false // all even numbers except for 2 are not prime\n    var i = 3\n    while(i * i <= n) {\n        if (n % i == 0) return false\n        i += 2\n    }\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "return l.distinct().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "var nth = 0\n    var i = 0\n    while (nth < n) {\n        val f = fibonacci(i)\n        if (f > 1 && isPrime(f)) {\n            nth++\n        }\n        i++\n    }\n    return fibonacci(i - 1)\n}\n\nfun fibonacci(n : Int) : Int {\n    if (n == 0) {\n        return 0\n    } else if (n == 1) {\n        return 1\n    } else {\n        var a = 0\n        var b = 1\n        for (i in 2..n) {\n            val c = a + b\n            a = b\n            b = c\n        }\n        return b\n    }\n}\n\nfun isPrime(num : Int) : Boolean {\n    if (num < 2) {\n        return false\n    }\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    for (i in 0 until sortedList.size - 2) {\n        val twoSum = -sortedList[i]\n        val (left, right) = sortedList.partition { it < twoSum }\n        if (twoSum in right && left.any { one -> twoSum - one in right }) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "val map = mutableMapOf<Int, Int>()\n\n    for (i in l) {\n        if (map.containsKey(-i)) {\n            return true\n        } else {\n            map[-i] = i\n        }\n    }\n    \n    return false\n}\n\nfun main() {\n    println(pairsSumToZero(listOf(1, 3, 5, 0))) // False\n    println(pairsSumToZero(listOf(1, 3, -2, 1))) // False\n    println(pairsSumToZero(listOf(1, 2, 3, 7))) // False\n    println(pairsSumToZero(listOf(2, 4, -5, 3, 5, 7))) // True\n    println(pairsSumToZero(listOf(1))) // False\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "if (n == 0) return 0\n    else if (n == 1) return 0\n    else if (n == 2) return 2\n    else if (n == 3) return 0\n    else{\n        var arr = arrayOf(0, 0, 2, 0)\n        for (i in 4..n){\n            val temp = arr[i -1] + arr[i -2] + arr[i -3] + arr[i -4]\n            arr += temp\n        }\n        return arr.last()\n    }\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    val size = sortedList.size\n    return when {\n        size % 2 == 0 -> (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0\n        else -> sortedList[size / 2]\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "var start = 0;\n    var end = text.length - 1;\n\n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n\n    return true;\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "val vowels = setOf('a', 'e', 'i', 'o', 'u','A','E','I','O','U')\n    return text.filterNot { it in vowels }\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "for (i in l){\n        if (i > t) return false\n    }\n    return true\n}\n\nfun main() {\n    println(belowThreshold([1, 2, 4, 10], 100)) // True\n    println(belowThreshold([1, 20, 4, 10], 5)) // False\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y\n}\n\nprintln(\"add(2, 3) = ${add(2, 3)}\")\nprintln(\"add(5, 7) = ${add(5, 7)}\")"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "if (s0.length != s1.length) return false  // If lengths don't match, they can't be the same\n    val c0 = s0.toCharArray().sorted() // Sort chars in first string\n    val c1 = s1.toCharArray().sorted() // Sort chars in second string\n    for (i in 0 until s0.length) {  // Compare sorted arrays\n        if (c0[i] != c1[i]) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "if (n <= 1) return n\n    var first = 0\n    var second = 1\n    for(i in 2..n){\n        val nextNumber = first + second\n        first = second\n        second = nextNumber\n    }\n    return second\n}\n\nfun main() {\n    println(\"fib(10) : \" + fib(10)) // Outputs: 55\n    println(\"fib(1) : \" + fib(1))   // Outputs: 1\n    println(\"fib(8) : \" + fib(8))   // Outputs: 21\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "val set1 = l1.toHashSet()\n    val set2 = l2.filterIsInstance<Int>().toHashSet()\n    return (set1 intersect set2).sorted()\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "var n = n\n    var factor = 2\n    while (n != 1) {\n        if (n % factor == 0) {\n            // If the number is divisible, divide it by the current factor\n            n /= factor\n            \n            // Increase factor only if we've found a prime number\n            while(n % factor == 0) {\n                n /= factor;\n            }\n        } else {\n            factor++\n        }\n    }\n    \n    return factor\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "var result = 0\n    for (i in 1..n) {\n        result += i\n    }\n    return result\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "val der = ArrayList<Any>()\n    for (i in 1..xs.size - 1) {\n        der.add(xs[i] * i)\n    }\n    return der\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "if (n <= 0) throw IllegalArgumentException(\"Input must be a positive integer\")\n    // Base cases\n    if (n == 1) return 0\n    if (n == 2) return 1\n\n    val fibfibs = IntArray(n+1)\n    fibfibs[2] = 1\n    \n    for (i in 3..n){\n        fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3]\n    }\n    \n    return fibfibs[n]\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "val vowels = \"aeiouAEIOU\"\n    var count = 0\n\n    for (char in s) {\n        if (vowels.contains(char)) {\n            count++\n        }\n    }\n\n    // Checks if the last character is 'y' or 'Y'. If yes, increments the count by one.\n    if (s.last() == 'y' || s.last() == 'Y') {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        if (!freq.containsKey(i)) {\n            freq[i] = 0\n        }\n        freq[i]++\n    }\n    \n    var maxVal = -1\n    val sortedKeys = freq.keys.sorted()\n    for (key in sortedKeys) {\n        if (freq[key] >= key && key > maxVal) {\n            maxVal = key\n        }\n    }\n    \n    return maxVal\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "if (a + b > c && a + c > b && b + c > a){\n        val s = (a + b + c).toFloat() / 2\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).roundToDecimalPlace(2).toString() + \"0\"\n    } else {\n        return -1\n    }\n}\nfun Float.roundToDecimalPlace(decimalPlaces: Int): Float {\n    val factor = Math.pow(10, decimalPlaces.toDouble()).toFloat()\n    return (this * factor).toInt().toFloat() / factor\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "// Check if list is a palindrome\n    fun isPalindromic(list: List<Int>) = list == list.reversed()\n    \n    // Check if the sum of elements in the list is less than or equal to max weight w\n    fun isUnderMaxWeight(list: List<Int>, maxWeight : Int) = list.sum() <= maxWeight\n    \n    return isPalindromic(q) && isUnderMaxWeight(q, w)\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "val primes = listOf(2, 3, 5, 7) // possible prime factors\n    var isDivisibleByPrimes = false\n    for (i in primes.indices){\n        if (a % primes[i] == 0) {\n            a /= primes[i]\n            while (a % primes[i] == 0) {\n                a /= primes[i]\n            }\n            isDivisibleByPrimes = true\n        }\n    }\n\n    return a == 1 && isDivisibleByPrimes\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "return \"db${Integer.toBinaryString(decimal)}db\"\n}\n\nfun main() {\n    println(\"${decimalToBinary(15)}\")   // returns db1111db\n    println(\"${decimalToBinary(32)}\")   // returns db100000db\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "if (s.length < 3) return false;\n\n    for(i in 0 until s.length - 2){\n        val subStr = s.substring(i, i + 3);\n        if (subStr[0] == subStr[1] || subStr[0] == subStr[2] || subStr[1] == subStr[2]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "val results = mutableListOf<String>()\n    grades.forEach { grade ->\n        when(grade){\n            is Double ->{\n                if(grade == 4.0) results.add(\"A+\")\n                else if(grade > 3.7) results.add(\"A\")\n                else if(grade > 3.3) results.add(\"A-\")\n                else if(grade > 3.0) results.add(\"B+\")\n                else if(grade > 2.7) results.add(\"B\")\n                else if(grade > 2.3) results.add(\"B-\")\n                else if(grade > 2.0) results.add(\"C+\")\n                else if(grade > 1.7) results.add(\"C\")\n                else if(grade > 1.3) results.add(\"C-\")\n                else if(grade > 1.0) results.add(\"D+\")\n                else if(grade > 0.7) results.add(\"D\")\n                else if(grade > 0.0) results.add(\"D-\")\n                else results.add(\"E\")\n            }\n            else -> throw IllegalArgumentException(\"Invalid input, expected Double got ${grade::class}\")\n        }\n    }\n    return results\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "val len = string.length\n    if (len <= 1) return false\n    \n    for (i in 2..len / 2) {\n        if (len % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "var sum = 0\n    while (n > 0){\n        val digit = n % 10\n        sum += digit\n        n /= 10\n    }\n    return Integer.toBinaryString(sum)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "val result = mutableListOf<Pair<Int, Int>>()\n\n    for ((i, list) in lst.withIndex()) {\n        if (list is List<*>) {\n            for ((j, element) in list.withIndex()) {\n                if (element == x) {\n                    result.add(Pair(i, j))\n                }\n            }\n        }\n    }\n\n    return result.sortedBy { it.first }.sortedWith(compareByDescending<Pair<Int, Int>> { it.second })\n}\n\nfun main() {\n    println(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)) // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    println(getRow([], 1)) // []\n    println(getRow([[], [1], [1, 2, 3]], 3)) // [(2, 2)]\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "val list = lst as List<Int>\n    \n    if (list.size < 2) return null\n\n    var minVal = Int.MAX_VALUE\n    var secondMinVal = Int.MAX_VALUE\n\n    for(i in 0 until list.size){\n        if(list[i] <= minVal){\n            minVal = list[i]\n        } else if(list[i] < secondMinVal && list[i] > minVal) {\n            secondMinVal = list[i]\n        }\n    }\n    \n    return if (secondMinVal == Int.MAX_VALUE) null else secondMinVal\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "val sentences = s.split(\"[.!?]\".toRegex()).dropLastWhile{ it.isEmpty() }.toTypedArray()\n    var boredCount = 0\n    for (sentence in sentences){\n        if(sentence.trim().startsWith(\"I\")) {\n            boredCount++\n        }\n    }\n    return boredCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "var maxPrime = 2\n    for (i in lst) {\n        if (isPrimeNumber(i)) {\n            if (maxPrime < i) {\n                maxPrime = i\n            }\n        }\n    }\n    return maxPrime.toString().map { it - '0'.toInt() }.sum()\n}\n\nfun isPrimeNumber(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2 || n == 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "if (dict.isEmpty()) return false\n    \n    val keys = dict.keys\n    var isLower = true\n    var isUpper = true\n\n    for (key in keys) {\n        if (key !is String) return false \n        \n        if (!key.toLowerCase().equals(key)) isLower = false\n        if (!key.toUpperCase().equals(key)) isUpper = false\n    }\n\n    return isLower || isUpper \n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "val num = value.toDouble()\n    var roundedNum : Double = 0.0\n    if (num >= 0){\n        // rounding away from zero means rounding up if number is equidistant with two numbers\n        roundedNum = Math.ceil(num)\n    } else{\n        // rounding away from zero means rounding down if number is equidistant with two numbers\n        roundedNum = Math.floor(num)\n    }\n    return roundedNum.toInt()\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "val stones = mutableListOf<Int>()\n    var stoneCount = n\n    for (i in 0 until n) {\n        stones.add(stoneCount)\n        if(stoneCount % 2 == 0)\n            stoneCount += 1\n        else\n            stoneCount += 2\n    }\n    return stones\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "return s.split(\", \", \")\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "// If x is even, and between x and y inclusive there's no larger even number, return x.\n    if (x % 2 == 0 && x >= y) return x\n\n    var maxEven = -1\n    for(i in x until y step 2){\n        // Find the largest even number between x and y inclusive\n        if(i % 2 == 0) {\n            maxEven = i\n        }\n    }\n    \n    return maxEven\n}\n\nfun main() {\n    println(\"choose_num(12, 15) = ${chooseNum(12, 15)}\") // should be 14\n    println(\"choose_num(13, 12) = ${chooseNum(13, 12)}\") // should be -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "if (n > m) return -1\n    val range = (n..m).toList()\n    val avg = range.sum().toFloat() / range.size\n    val roundedAverage = Math.round(avg)\n    return \"0b${roundedAverage.toString(2)}\"\n}\n\nfun main(){\n    println(roundedAvg(1, 5)) // Expected output: \"0b11\"\n    println(roundedAvg(7, 5)) // Expected output: -1\n    println(roundedAvg(10, 20)) // Expected output: \"0b1111\"\n    println(roundedAvg(20, 33)) // Expected output: \"0b11010\"\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "val list = mutableListOf<Int>()\n    for (i in 1..n){\n        if (i % 2 == 0){\n            var factorial = 1\n            for (j in 1..i){\n                factorial *= j\n            }\n            list.add(factorial)\n        } else {\n            var sum = 0\n            for (j in 1..i){\n                sum += j\n            }\n            list.add(sum)\n        }\n    }\n    return list\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "val evenCount = mutableSetOf<Int>()\n    val oddCount = mutableSetOf<Int>()\n    \n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) evenCount.add(i)\n            else oddCount.add(i)\n        }\n    }\n    \n    return listOf(evenCount.size, oddCount.size)\n}\n\nfun isPalindrome(n: Int): Boolean {\n    val reversed = StringBuilder(n).reverse().toString().toInt()\n    return n == reversed\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "if(arr.isEmpty()) return true\n    var maxIndex = arr.indexOfMax()\n    val sortedArr = arr.sortedArray()\n    for (i in 0 until arr.size) {\n        if (arr[i] == sortedArr[0]) {\n            val part1 = arr.subList(i, arr.size)\n            val part2 = arr.subList(0, i)\n            val temp = mutableListOf<Int>()\n            for (j in 0 until part1.size) {\n                temp.add(part1[j] as Int)\n            }\n            for (k in 0 until part2.size) {\n                temp.add(part2[k] as Int)\n            }\n            if (temp == sortedArr.toList()) return true\n        }\n    }\n    return false\n}\n\nfun main() {\n    println(moveOneBall(listOf<Any>(3, 4, 5, 1, 2))) //True\n    println(moveOneBall(listOf<Any>(3, 5, 4, 1, 2))) //False\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "var oddNumsInLst1 = lst1.count{ it % 2 != 0 }\n    if (oddNumsInLst1 == 0) return \"YES\"\n    val evenNumsInLst2 = lst2.count{ it % 2 == 0 }\n    if (evenNumsInLst2 < oddNumsInLst1) return \"NO\"\n    return \"YES\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "val removedChars = s.filter { it !in c }\n    return listOf(removedChars, isPalindrome(removedChars))\n}\n\nprivate fun isPalindrome(s: String): Boolean {\n    for (i in s.indices) if (s[i] != s[s.length - 1 - i]) return false\n    return true\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "val rows = grid.size\n    val cols = grid[0].size\n    \n    var result = 0\n    \n    for (i in 0 until rows) {\n        for (j in 0 until cols) {\n            if (grid[i][j] == 1) {\n                result += capacity\n            }\n        }\n    }\n    \n    return result\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "val words = s.split(\" \")\n    val consonants = \"bcdfghjklmnpqrstvwxyz\".toCharArray()\n    return words.filter{ it.count{ c -> c.lowercaseChar() in consonants } == n}\n}\n\nfun main() {\n    println(selectWords(\"Mary had a little lamb\", 4)) // [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3)) // [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2)) // []\n    println(selectWords(\"Hello world\", 4)) // [\"world\"]\n    println(selectWords(\"Uncle sam\", 3)) // [\"Uncle\"]\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "if (k == 0) return emptyList()\n    val list = arr.sortedDescending().take(k)\n    return list as List<Any>\n}\n\n//Testing the function with some test cases:\nfun main() {\n    println(\"maximum([-3, -4, 5], 3) = ${maximum(listOf(-3, -4, 5), 3)}\")   // Output: [-4, -3, 5]\n    println(\"maximum([4, -4, 4], 2) = ${maximum(listOf(4, -4, 4), 2)}\")     // Output: [4, 4]\n    println(\"maximum([-3, 2, 1, 2, -1, -2, 1], 1) = ${maximum(listOf(-3, 2, 1, 2, -1, -2, 1), 1)}\") // Output: [2]\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr : List<Int>, k : Int) : Int {\n    var sum = 0\n    for (i in 0 until minOf(k, arr.size)) {\n        if (arr[i] >= 10 && arr[i] <= 99) sum += arr[i]\n    }\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "// Determine the overlap\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n    \n    if (start > end) return \"NO\"\n    \n    // Calculate length of intersection and check for prime number\n    val length = end - start + 1\n    \n    if(length <= 1) return \"NO\"\n    if(length == 2) return \"YES\"\n    \n    var isPrime = true\n    for (i in 2..length/2) {\n        if (length % i == 0) {\n            isPrime = false\n            break\n        }\n    }\n    return if(isPrime) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "val sequence = mutableListOf<Int>()\n    sequence[0] = 1 //tri(1) always equals to 1.\n    sequence[1] = 3 //tri(2) always equals to 3.\n    for (i in 2..n){\n        if (i % 2 == 0) {\n            sequence.add(1 + i / 2)\n        } else {\n            sequence.add(sequence[sequence.lastIndex - 1] + sequence[sequence.lastIndex - 2] + sequence[(i+1).toInt()])\n        }\n    }\n    return sequence\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "var prod = 1\n    var hasOddDigit = false\n    for (i in n.toString()) {\n        if (i.toInt() % 2 != 0) {\n            prod *= i.toInt()\n            hasOddDigit = true\n        }\n    }\n    return if(hasOddDigit) prod else 0\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "var count = 0\n    for (char in string) {\n        if (char == '[') {\n            count++\n        } else if (char == ']' && count > 1) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "val list = lst.map{ Math.ceil(it.toString().toDouble()).toInt() } // Ceiling each element and converting to int\n    return list.map{ it*it }.sum()  // Squaring each number and finding their sum\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "val words = txt.split(' ')\n    val lastWord = words.last()\n    \n    return if (lastWord.isEmpty()) {\n        false // If the last word is empty, we consider it not a valid word and return false\n    } else { \n        val lastChar = lastWord[lastWord.length - 1]\n        \n        lastChar.isLetter() && !lastChar.isUppercase() // Checks if the last character of the last word is an alphabetical character not a part of a word\n    }\n}\n\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\"))  // False\n    println(checkIfLastCharIsALetter(\"apple pi e\"))  // True\n    println(checkIfLastCharIsALetter(\"apple pi e \"))  // False\n    println(checkIfLastCharIsALetter(\"\"))  // False  \n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "for (i in arr.size-2 downTo 0) {\n        if (arr[i] < arr[i + 1]) {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n    for(i in lst) {\n        if(i is Int) {\n            if(i < 0 && (largestNegative == null || i > largestNegative)) {\n                largestNegative = i\n            } else if(i > 0 && (smallestPositive == null || i < smallestPositive)) {\n                smallestPositive = i\n            }\n        }\n    }\n    return listOf(largestNegative, smallestPositive)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "var result = 1L\n    for (i in n downTo 1) {\n        result *= i.toLong()\n    }\n    return result.toInt()\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun isPrimeNumber(number: Int): Boolean {\n        if (number < 2) return false\n        for (i in 2..Math.sqrt(number.toDouble()).toInt()) {\n            if (number % i == 0) return false\n        }\n        return true\n    }\n\n    val words = sentence.split(' ')\n    val primeWords = mutableListOf<String>()\n\n    for (word in words) {\n        if (isPrimeNumber(word.length)) {\n            primeWords.add(word)\n        }\n    }\n    \n    return primeWords.joinToString(\" \")\n}\n\n//Test the function\nfun main() {\n    println(wordsInSentence(\"This is a test\")) // Output: \"is\"\n    println(wordsInSentence(\"lets go for swimming\")) // Output: \"go for\"\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "val xFraction = x.split(\"/\").map { it.toInt() }  // split the fraction into numerator and denominator\n    val nFraction = n.split(\"/\").map { it.toInt() }  // split the fraction into numerator and denominator\n    \n    val lcm = leastCommonMultiple(xFraction[1], nFraction[1])  // find the LCM of the denominators\n    var result : Boolean = false  // initialize our result\n\n    if (lcm == xFraction[1] * nFraction[1]) {  \n        val newNumerator = xFraction[0]*nFraction[0]*(lcm/xFraction[1])*(lcm/nFraction[1])  // calculate the new numerator\n        result = isWholeNumber(newNumerator)  // check if it's a whole number\n    }\n    return result\n}\n\nfun leastCommonMultiple(a: Int, b: Int): Int {\n    var max = if (a > b) a else b\n    while (true) {\n        if (max % a == 0 && max % b == 0) {\n            break\n        }\n        ++max\n    }\n    return max\n}\n\nfun isWholeNumber(n: Int): Boolean {\n    val d = n * 1.0\n    return (d - d.toInt()) == 0.0\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "// If the list is empty return an empty list.\n    if (nums.isEmpty()) {\n        return listOf()\n    }\n\n    // Create a map to hold the index of the numbers and their sum of digits.\n    val numMap = mutableMapOf<Int, Int>()\n    nums.forEachIndexed { index, num ->\n        if (num is Int) {\n            numMap[index] = num.toString().map { it - '0'.toInt() }.sum()\n        }\n    }\n\n    // Sort the map by values (sum of digits) and if there are duplicates, keep their original order.\n    val sortedNums = numMap.toList().sortedBy { it.second }.mapIndexed { index, pair ->\n        if (index == 0 || pair.second != numMap[numMap.keys.elementAt(index - 1)]) {\n            return@mapIndexed nums[pair.first]\n        } else {\n            return@mapIndexed nums[numMap.keys.elementAt(index - 1)]\n        }\n    }\n\n    return sortedNums\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "var count = 0\n    for (num in nums) {\n        if(num is Number){\n            val strNum = num.toString()\n            if(strNum[0].toIntOrNull() % 2 == 1 && strNum[strNum.length - 1].toIntOrNull() % 2 == 1 && strNum.toDouble() > 10){\n                count += 1\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "val arr = IntArray(n){it*it - it + 1}\n    var count = 0\n    for (i in 0 until n-2)\n        for (j in i+1 until n-1)\n            for (k in j+1 until n)\n                if ((arr[i] + arr[j] + arr[k]) % 3 == 0) count++\n    return count\n}\n\nfun main() {\n    println(getMaxTriples(5))  // Outputs: 1\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return if(planet1 in planets && planet2 in planets) {\n        val indexPlanet1 = planets.indexOf(planet1)\n        val indexPlanet2 = planets.indexOf(planet2)\n        \n        when {\n            indexPlanet1 < indexPlanet2 -> planets.slice(indexPlanet1+1..indexPlanet2-1)\n            else -> planets.slice(indexPlanet2+1..indexPlanet1-1).reversed()\n        }\n    } else {\n        listOf<Any>()\n    } \n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "if (isPrime(n)) {\n        return x\n    } else {\n        return y\n    }\n}\n\nfun isPrime(num: Int): Boolean{\n    if (num <= 1) {\n       return false;\n    }\n    for (i in 2..num / 2) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "var sum = 0\n    \n    for (i in lst) {\n        if (i is Int && i > 0 && i % 2 != 0) {\n            sum += Math.pow(i.toDouble(), 2).toInt()\n        }\n    }\n    \n    return sum\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "var maxStrength = -Double.MAX_VALUE\n    var strongestExt = \"\"\n    for (ext in extensions) {\n        val cap = ext.count { it.isUpperCase() }\n        val sm = ext.count { it.isLowerCase() }\n        val strength = cap - sm.toDouble()\n        if(strength > maxStrength){\n            strongestExt = ext\n            maxStrength = strength\n        }\n    }\n    return \"$className.$strongestExt\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "if(b.length > a.length){\n        return false\n    }\n    val rotations = Array<String>(b.length) {\"\"}\n    \n    for(i in 0 until b.length){\n        rotations[i] = b.substring(i) + b.substring(0, i)\n    }\n    \n    for(i in 0 until rotations.size){\n        if(a.contains(rotations[i])){\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "val digits = listOf('i', 'v', 'x', 'l', 'c', 'd', 'm')\n    var result = \"\"\n    var currentNum = number\n    for (i in 0..5 step 2){\n        while(currentNum >= 10 * Math.pow(10.0, i/2).toInt()){\n            currentNum -= 10 * Math.pow(10.0, i/2).toInt()\n            result += 'i' + digits[i]\n        }\n    }\n    return result\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "val sides = listOf(a, b, c).sorted()\n    return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2]\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "var result = \"\"\n    if (s.all { it !in 'A'..'Z' && it !in 'a'..'z' }) {\n        return s.reversed()\n    }\n    for (c in s) {\n        when (c) {\n            in 'A'..'Z' -> result += c.lowercaseChar()\n            in 'a'..'z' -> result += c.uppercaseChar()\n            else -> result += c\n        }\n    }\n    return result\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "if (text.isEmpty()) return null\n    val bytes = text.toByteArray()\n    val md = MessageDigest.getInstance(\"MD5\")\n    val digest = md.digest(bytes)\n    return BigInteger(1, digest).toString(16).padStart(32, '0')\n}\n\n// Testing the function\nfun main() {\n    println(stringToMd5(\"Hello world\")) // prints: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "val min = Math.min(a, b).toString().filter{it.isDigit()}.map{it.digitToInt()}\n    val max = Math.max(a, b).toString().filter{it.isDigit()}.map{it.digitToInt()}\n    var result: List<Any> = listOf()\n\n    // Iterate over range from min to max\n    for (i in min..max) {\n        // If the digit is even and not already added, add it to the list\n        if (i % 2 == 0 && !result.contains(i)) {\n            result = result + i\n        }\n    }\n    \n    return result;\n}"}

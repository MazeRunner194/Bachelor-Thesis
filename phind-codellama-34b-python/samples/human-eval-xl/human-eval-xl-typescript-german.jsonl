{"task_id": "typescript/0", "language": "typescript", "completion": "let balance = 0;\n    for(let operation of operations) {\n        balance += operation;\n        if(balance < 0) return true;\n    }\n    return false;\n}\nconsole.log(below_zero([1, 2, 3])) // Output: False\nconsole.log(below_zero([1, 2, -4, 5])) // Output: True"}
{"task_id": "typescript/1", "language": "typescript", "completion": "let sum = numbers.reduce((prev, curr) => prev + curr, 0);\n    let product = numbers.reduce((prev, curr) => prev * curr, 1);\n    return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "let result = '';\n\n    for(let i=0;i<a.length;i++) {\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n\n    return result;\n}"}
{"task_id": "typescript/3", "language": "typescript", "completion": "if(strings.length === 0) return null; // return null if array is empty\n    let maxLength = -1;\n    let longestString = '';\n    \n    strings.forEach((str) => {\n        if(str.length > maxLength){\n            maxLength = str.length;\n            longestString = str;\n        }\n    });\n    return longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "let divisor = 1;\n    \n    while (divisor > 0){\n        if ((a % divisor == 0) && (b % divisor == 0)){\n            return divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return divisor;\n}"}
{"task_id": "typescript/5", "language": "typescript", "completion": "let sortedNumbers = numbers.split(\" \")\n                          .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, ignorePunctuation: true }))\n                          .join(\" \");\n    return sortedNumbers;\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "// Find min and max of list.\n    let minVal = Math.min(...numbers);\n    let maxVal = Math.max(...numbers);\n    \n    // Calculate the range.\n    let range = maxVal - minVal;\n    \n    // Apply transformation to each number in the list.\n    return numbers.map(val => (val - minVal) / range);\n};\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "let result = '';\n    for (let i = 0; i < string0.length; i++) {\n        if (string0[i] === string0[i].toUpperCase()) {\n            result += string0[i].toLowerCase();\n        } else {\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "return l.filter(i => i > 0);\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "if (n <= 1) return false; // not prime if less than or equal to 1\n    if (n == 2 || n == 3) return true; // 2 and 3 are prime numbers\n    if (n % 2 == 0 || n % 3 == 0) return false; // not prime if divisible by 2 or 3\n  \n    let i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n        i += 6; // increment by 6 to check the next divisor in the form of (6k+1) or (6k-1)\n    }\n  \n    return true;\n}"}
{"task_id": "typescript/10", "language": "typescript", "completion": "return l.sort().filter((value, index, self) => {\n        return self.indexOf(value) === index;\n    });\n}\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));"}
{"task_id": "typescript/11", "language": "typescript", "completion": "let fib = [0, 1];\n    let cnt = 0;\n    let i = 2;\n    while (true) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n        if (fib[i] > Math.pow(10, 9)) break;\n        if (isPrime(fib[i])) cnt++;\n        if (cnt === n) return fib[i];\n        i++;\n    }\n    throw \"No suitable number found.\";\n};\n\nfunction isPrime(n: number): boolean {\n    for (let i = 2, sqrt = math.sqrt(n); i <= sqrt; i++)\n        if (n % i === 0) return false;\n    return n > 1;\n}"}
{"task_id": "typescript/12", "language": "typescript", "completion": "l.sort((a,b)=> a - b);\n  \n    for(let i =0;i<l.length-2;i++){\n        let a=l[i];\n        let start=i+1;\n        let end=l.length-1;\n\n        while (start < end){\n            let sum=a+l[start]+l[end];\n            if(sum===0) return true;\n            else if(sum<0) start++;\n            else end--;\n        }\n    }\n    return false;\n}"}
{"task_id": "typescript/13", "language": "typescript", "completion": "let map = {};\n    \n    for (let num of l) {\n        if (!map[num]) {\n            map[num] = true;\n        } else {\n            return true;\n        }\n        \n        if (map[-num]) {\n            return true;\n        } \n        \n        map[-num] = true;\n    }\n    \n    return false;\n}"}
{"task_id": "typescript/14", "language": "typescript", "completion": "// Erzeugen Sie ein Array mit den Startwerten der Fibonacci-Folge,\n    const arr = [0, 0, 2, 0];\n    \n    if(n <= 3){\n        return arr[n]\n    }else{\n        for(let i=4;i<=n;i++){\n            arr.push(arr[i-1]+arr[i-2]+arr[i-3]+arr[i-4]);\n        }\n    }\n    // Berechnen Sie das n-te Element der Fibonacci-Folge und return it\n    return arr[n];\n};\n\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "l.sort((a, b) => a - b);\n    let len = l.length;\n    if(len%2 == 0) //even\n        return ((l[len/2 - 1]) + (l[len/2])) / 2;\n    else \n        return l[(len - 1)/2];\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n\nconsole.log(is_palindrome('')); // True\nconsole.log(is_palindrome('aba')); // True\nconsole.log(is_palindrome('aaaaa')); // True\nconsole.log(is_palindrome('zbcd')); // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "return l.every(x => x < t);\n}\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // true\nconsole.log(below_threshold([1, 20, 4, 10], 5)); // false"}
{"task_id": "typescript/19", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "typescript/20", "language": "typescript", "completion": "let setS0 = new Set(s0);\n    let setS1 = new Set(s1);\n    \n    for(let char of setS0) {\n        if(!setS1.has(char)) return false;\n    }\n\n    for(let char of setS1) {\n        if(!setS0.has(char)) return false;\n    }\n\n    return true;\n}"}
{"task_id": "typescript/21", "language": "typescript", "completion": "if (n <= 0){\n        return 'Input must be a positive integer';\n    }\n    else if (n === 1){\n        return 1;\n    }\n    else if (n === 2){\n        return 1;\n    }\n    else{\n        let fib = [1, 1];\n        for(let i = 3; i <= n; i++){\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}\nconsole.log(fib(10)); // Output: 55\nconsole.log(fib(1));  // Output: 1\nconsole.log(fib(8));  // Output: 21\n// Test cases to validate the solution"}
{"task_id": "typescript/22", "language": "typescript", "completion": "let s1 = new Set(l1); // use set to remove any duplicates in the first list\n    let s2 = new Set(l2); // same for second list\n  \n    let intersection = [...s1].filter(value => s2.has(value)); // filter first list by values existing in the second set\n\n    return intersection.sort((a, b) => a - b); // sort the result in ascending order\n}\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "while (n % 2 === 0) n /= 2;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) n /= i;\n    }\n    return n > 1 ? n : 2;\n}"}
{"task_id": "typescript/24", "language": "typescript", "completion": "let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\nconsole.log(sum_to_n(30)); // Outputs: 465\nconsole.log(sum_to_n(100)); // Outputs: 5050\nconsole.log(sum_to_n(5)); // Outputs: 15\nconsole.log(sum_to_n(10)); // Outputs: 55\nconsole.log(sum_to_n(1)); // Outputs: 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "// Die Ableitung eines Polynoms ist ein Polynom der Grad-n - 1, wobei n die Grad des Originalpolynoms ist.\n    // Das hei\u00dft, wenn das Originalpolynom xs[0] + xs[1] * x + xs[2] * x^2 + .... ist, ist die Ableitung xs[1] + 2 * xs[2] * x + ... .\n    // Jeden Koeffizienten im abgeleiteten Polynom erh\u00e4lt man durch Multiplikation mit dem entsprechenden Exponenten.\n    return xs.slice(1).map((coeff, i) => (i + 1) * coeff);\n}\n\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "if(n === 0){\n        return 0;\n    }else if(n === 1){\n        return 0;\n    }else if(n === 2){\n        return 1;\n    } else{\n        let fibfibArray = [0, 0, 1];\n        for (let i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        return fibfibArray[n];\n    }\n};\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let i=0; i< s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n        else if (s[i] === 'y' && s[i+1] === undefined) { // wenn y am Ende des Wortes ist\n            count++;\n        } \n    }\n    \n    return count;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "//Erstellen Sie ein Objekt, in dem die Zahlen der Liste als Schl\u00fcssel und ihre H\u00e4ufigkeiten als Werte gespeichert sind.\n    let map: any = {};\n    for(let i=0;i<lst.length;i++){\n        if (map[lst[i]]){\n            map[lst[i]]++;\n        } else {\n            map[lst[i]] = 1;\n        }\n    }\n    //Sortieren Sie die Zahlen nach ihrem Wert absteigend.\n    let keys = Object.keys(map).sort((a, b) => Number(b) - Number(a));\n    for (let i=0;i<keys.length;i++){\n        if (Number(keys[i]) >= map[keys[i]]){\n            return Number(keys[i]);\n        }\n    }\n    //Wenn kein solcher Wert gefunden wurde, geben Sie -1 zur\u00fcck.\n    return -1;\n};\n//Testen Sie die Funktion mit den angegebenen Beispielen:\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c))) * 100) / 100;\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "let sum=0;\n    for(let i=0;i<q.length;i++)\n        sum+=q[i];\n    \n    if(sum>w) return false;\n    \n    let start=0, end=q.length-1;\n    while(start<end){\n        if(q[start]!=q[end]) return false;\n        start++;\n        end--;\n    }\n    return true;\n}"}
{"task_id": "typescript/31", "language": "typescript", "completion": "if (a < 1) return false;\n    let primeArray = [2, 3, 5];\n    for(let i = 0; i < primeArray.length; i++) {\n        while(a % primeArray[i] == 0) {\n            a /= primeArray[i];\n        }\n    }\n    return a === 1;\n};\n\nconsole.log(is_multiply_prime(30)); // true\nconsole.log(is_multiply_prime(27)); // true\nconsole.log(is_multiply_prime(20)); // false"}
{"task_id": "typescript/32", "language": "typescript", "completion": "let binaryString = String(decimal).split('').map((char) => parseInt(char, 10)).map((num) => num.toString(2)).join('');\n    return 'db' + binaryString + 'db';\n}"}
{"task_id": "typescript/33", "language": "typescript", "completion": "if(s.length < 3){\n        return false;\n    }\n    for(let i=0;i< s.length -2 ; i++){\n        if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "let letterGrades = [];\n    grades.forEach((grade) =>{\n        if(grade == 4.0){\n            letterGrades.push('A+');\n        }\n        else if(grade > 3.7){\n            letterGrades.push('A');\n        }\n        else if(grade > 3.3){\n            letterGrades.push('A-');\n        }\n        else if(grade > 3.0){\n            letterGrades.push('B+');\n        }\n        else if(grade > 2.7){\n            letterGrades.push('B');\n        }\n        else if(grade > 2.3){\n            letterGrades.push('B-');\n        }\n        else if(grade > 2.0){\n            letterGrades.push('C+');\n        }\n        else if(grade > 1.7){\n            letterGrades.push('C');\n        }\n        else if(grade > 1.3){\n            letterGrades.push('C-');\n        }\n        else if(grade > 1.0){\n            letterGrades.push('D+');\n        }\n        else if(grade > 0.7){\n            letterGrades.push('D');\n        }\n        else if(grade > 0.0){\n            letterGrades.push('D-');\n        }\n        else{\n            letterGrades.push('E');\n        }\n    });\n    return letterGrades;\n}\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));"}
{"task_id": "typescript/35", "language": "typescript", "completion": "let length = string0.length;\n    if(length < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "typescript/36", "language": "typescript", "completion": "let result:number=0;\n    while(N>0){\n        result+=N%10;\n        N=Math.floor(N/10);\n    }\n    return result.toString(2).padStart(8, '0'); // to get the binary representation of the sum in 8 bits\n};\nconsole.log(solve(150));"}
{"task_id": "typescript/37", "language": "typescript", "completion": "let result = [];\n    for(let i=0;i<lst.length;i++){\n        for(let j=0;j<lst[i].length;j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\nconsole.log(get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nconsole.log(get_row([], 1)); // []\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "if(lst.length < 2) { return null; }\n\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let secondSmallest = Number.MAX_SAFE_INTEGER;\n\n    for (let i = 0; i < lst.length; i++) {\n        if(lst[i] < smallest) {\n            secondSmallest = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest && lst[i] > smallest) {\n            secondSmallest = lst[i];\n        }\n    }\n\n    return secondSmallest == Number.MAX_SAFE_INTEGER ? null : secondSmallest;\n}"}
{"task_id": "typescript/39", "language": "typescript", "completion": "let count = 0;\n    let words = S.split(/[.!?]/); //Split the text into sentences using punctuation as separators\n    for(let word of words){\n        if(word.trim().startsWith('Ich')){ //Trim spaces from start and end of sentence, check if it starts with 'Ich'\n            count += 1;\n        }\n    }\n    return count;\n}\nconsole.log(is_bored(\"Hello world\")) //Expected output: 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")) //Expected output: 1"}
{"task_id": "typescript/40", "language": "typescript", "completion": "let maxPrime = -1;\n\n    for(let i=0;i<lst.length;i++){\n        if(isPrime(lst[i])){\n            if(lst[i] > maxPrime){\n                maxPrime = lst[i];\n            }\n        }\n    }\n    \n    if(maxPrime == -1) return 0;\n\n    let sumDigits = Array.from(String(maxPrime)).reduce((a, b) => Number(b) + a, 0);\n\n    return sumDigits;\n};\n\nfunction isPrime(num: number) {\n    if (num <= 1) return false;\n    else if (num == 2 || num == 3) return true;\n    else if (num % 2 == 0 || num % 3 == 0) return false;\n  \n    let i = 5;\n    while (i * i <= num) {\n      if (num % i == 0 || num % (i + 2) == 0) return false;\n      i += 6;\n    }\n  \n    return true;\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "if(dict.size === 0) {\n        return false;\n    }\n    \n    let allLowerCase: boolean = true;\n    let allUpperCase: boolean = true;\n\n    dict.forEach((value, key) => {\n        // Check if key is a string\n        if (typeof key !== 'string') {\n            allLowerCase = false;\n            allUpperCase = false;\n            return;\n        }\n\n        // Check if all keys are lower case or upper case\n        if(allLowerCase && !key.toLowerCase().localeCompare(key) === 0){\n            allUpperCase = false;\n        } else {\n            allLowerCase = false;\n        }\n\n        if(allUpperCase && !key.toUpperCase().localeCompare(key) === 0){\n            allLowerCase = false;\n        } else {\n            allUpperCase = false;\n        }\n    });\n\n    return allLowerCase || allUpperCase;\n}\n\nconsole.log(check_dict_case(new Map([[\"a\",\"apple\"], [\"b\",\"banana\"]]))); // True\nconsole.log(check_dict_case(new Map([[\"a\",\"apple\"], [\"A\",\"banana\"], [\"B\",\"banana\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"a\",\"apple\", 8:\"banana\", \"a\":\"apple\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"Name\",\"John\"], [\"Age\",\"36\"], [\"City\",\"Houston\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"STATE\",\"NC\"], [\"ZIP\",\"12345\"]]))); // True"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const floatValue = parseFloat(value);\n    if (floatValue < 0 && math.mod(floatValue, 1).toNumber() === 0.5){\n        return Math.floor(floatValue);\n    } else if (floatValue > 0 && math.mod(floatValue, 1).toNumber() === 0.5){\n        return Math.ceil(floatValue);\n    } else {\n        return math.round(floatValue);\n    }\n}"}
{"task_id": "typescript/43", "language": "typescript", "completion": "let levels:Array<number> = [];\n\n    for(let i=1; i <= n; i++){\n        if(i % 2 === 0){\n            levels.push(i + 1);\n        } else {\n            levels.push(i);\n        }\n    }\n    return levels;\n};\n\nconsole.log(make_a_pile(3));"}
{"task_id": "typescript/44", "language": "typescript", "completion": "return s.replace(/, /g, ',').split(',');\n}"}
{"task_id": "typescript/45", "language": "typescript", "completion": "if(y < x){\n        return -1;\n    }\n    \n    let maxEvenNumber = -1;\n  \n    for(let i=x; i <= y; i++){\n        if(i % 2 === 0 && i > maxEvenNumber){\n            maxEvenNumber = i;\n        }\n    }\n\n    return maxEvenNumber;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "if (n > m) return -1;\n\n    let sum = 0, count = m-n+1;\n    for(let i=n; i <= m; i++){\n        sum +=i;\n    }\n    let avg = Math.round(sum/count);\n\n    // convert to binary and return\n    return '0b' + avg.toString(2).padStart(8, '0');\n}"}
{"task_id": "typescript/47", "language": "typescript", "completion": "let res = [];\n    for (let i = 1; i <= n; ++i) {\n        if (i % 2 == 0)\n            res.push(Array.from({length: i}, (_, j) => j + 1).reduce((a, b) => a * b));\n        else\n            res.push(Array.from({length: i}, (_, j) => j + 1).reduce((a, b) => a + b));\n    }\n    return res;\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "let countEven = 0;\n    let countOdd = 0;\n    for(let i = 1; i <= n; i++) {\n        if(isPalindrome(i)){\n            if(i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n    return [countEven, countOdd];\n}\n\nconst isPalindrome = function(n: number) : boolean{\n    let reversedN = 0;\n    while (n > 0) {\n        const remainder = n % 10;\n        reversedN = reversedN * 10 + remainder;\n        n = Math.floor(n / 10);\n    }\n    return reversedN === n;\n}\n  \nconsole.log(even_odd_palindrome(3)); // [1,2]\nconsole.log(even_odd_palindrome(12)); // [4,6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "if(arr.length == 0) return true;\n    \n    let sorted = arr.sort((a,b) => a - b);\n\n    while (sorted[1] <= sorted[0]){\n        sorted.unshift(sorted.pop());\n    }\n\n    for (let i=0; i < sorted.length-1; i++){\n        if(sorted[i] > sorted[i+1]) return false;\n    }\n\n    return true;\n}"}
{"task_id": "typescript/50", "language": "typescript", "completion": "let oddsInLst1 = lst1.filter(n => n % 2 !== 0); // get the odd numbers from lst1\n    let evensInLst2 = lst2.filter(n => n % 2 === 0); // get the even numbers from lst2\n\n    if (oddsInLst1.length > evensInLst2.length) { // if there are more odds in lst1 than evens in lst2, it's not possible to exchange elements\n        return \"NO\";\n    } else { \n        for (let i = 0; i < oddsInLst1.length; i++) { // iterate over the odd numbers in lst1\n            if (!evensInLst2.includes(oddsInLst1[i])) { // if there's no corresponding even number in lst2, it's not possible to exchange elements\n                return \"NO\";\n            }\n        }\n    }\n\n    return \"YES\"; // if none of the conditions above were met, we can exchange elements\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])) // => \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])) // => \"NO\""}
{"task_id": "typescript/51", "language": "typescript", "completion": "let res = '';\n    for(let i=0;i<s.length;i++){\n        if(!c.includes(s[i])){\n            res += s[i];\n        }\n    }\n\n    let is_palindrome: boolean = (() => {\n        let reversed = res.split('').reverse().join('');\n        return reversed === res;\n    })();\n  \n    return [res, is_palindrome];\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "let countWells= 0;\n    for(let i=0; i< grid.length; i++){\n        for(let j =0; j<grid[i].length;j++){\n            if(grid[i][j] === 1){\n                countWells++;\n            }\n        }\n    }\n    return math.ceil(countWells/capacity);\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "if(s.trim() === \"\") return [];\n    \n    let words = s.split(' ');\n    let result = words.filter((word: string) => {\n        let count = word.match(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g)?.length;\n        return count === n;\n    });\n    \n    return result;\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "if(k == 0) return [];\n    let result = arr.sort((a,b) => b - a).slice(0, k);\n    return result;\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0; i<k; i++){\n        if((arr[i] / 10 < 1) || arr[i] % 10 == arr[i]){ // checks if the number has two or less digits\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "// Check if the intervals overlap\n    if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n    }\n\n    let start = Math.max(interval1[0], interval2[0]);\n    let end   = Math.min(interval1[1], interval2[1]);\n\n    const isPrime = (num: number) => {\n      if (num <= 1){ return false; }\n      for (let i = 2; i < num; i++){\n        if (num % i === 0){return false;}\n      }\n      return true;\n    };\n\n    // Return YES or NO depending on the length of intersection being a prime number\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "let result : Array<number> = [];\n    for (let i=0;i<=n;i++){\n        if(i==1){\n            result.push(3);\n        }else if(i%2==0){\n            result.push((1 + i / 2));\n        }else{\n            let prev1 = i>0?result[i-1]:0;\n            let prev2 = i>1?result[i-2]:0;\n            let prev3 = i>2?result[i+1]:0;\n            result.push(prev1 + prev2 + prev3);\n        }\n    }\n    return result;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "let strN = String(n);\n    let oddDigitsProduct = 1;\n    \n    for(let i=0; i<strN.length; i++) {\n        if((parseInt(strN[i]) % 2) != 0){\n            oddDigitsProduct *= parseInt(strN[i]);\n        }\n    }\n    \n    return oddDigitsProduct;\n}"}
{"task_id": "typescript/59", "language": "typescript", "completion": "let count = 0;\n    for(let char of string0){\n        if(char === '[' ) count++;\n        else if (char === ']') count--;\n    }\n  \n    if(count !== 0) return false; // unbalanced brackets\n  \n    let nested = false;\n    for(let i=1;i<string0.length-1;i++){\n      if(string0[i]==='[' && string0[i-1]!=']' && string0[i+1]===']'){\n        nested=true;\n        break;\n      }\n    }\n  \n    return nested;\n  };"}
{"task_id": "typescript/60", "language": "typescript", "completion": "let total = 0;\n    for(let num of lst) {\n        // Runden der Nummer auf die n\u00e4chste Ganzzahl\n        let roundedNum = Math.ceil(num);\n        // Quadrieren des gerundeten Werts und der Summe hinzuf\u00fcgen\n        total += Math.pow(roundedNum, 2);\n    }\n    \n    return total;\n}"}
{"task_id": "typescript/61", "language": "typescript", "completion": "if(txt.trim() === \"\"){\n        return false;\n    }\n    const lastChar = txt[txt.length -1];\n    const isLetter = lastChar.toLowerCase() >= 'a' && lastChar.toLowerCase() <= 'z';\n    const isSpaceBefore = txt[txt.length -2] === \" \";\n    \n    return isLetter && !isSpaceBefore;\n}\n\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // False"}
{"task_id": "typescript/62", "language": "typescript", "completion": "let last = arr[0];\n    for(let i = 1; i < arr.length; ++i) {\n        if(arr[i] <= last) {\n            return i-1;\n        } else {\n            last = arr[i];\n        }\n    }\n    return -1;\n}"}
{"task_id": "typescript/63", "language": "typescript", "completion": "let smallestPositive = Number.MAX_SAFE_INTEGER;\n    let largestNegative = Number.MIN_SAFE_INTEGER;\n\n    for(let i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            // If current number is smaller than the currently stored negative number, store that instead.\n            largestNegative = Math.max(largestNegative, lst[i]);\n        } else if (lst[i] > 0) {\n            // If current number is larger than the currently stored positive number, store that instead.\n            smallestPositive = Math.min(smallestPositive, lst[i]);\n        }\n    }\n\n    if(largestNegative == Number.MIN_SAFE_INTEGER) {\n        largestNegative = null;\n    }\n    \n    if(smallestPositive == Number.MAX_SAFE_INTEGER) {\n        smallestPositive = null;\n    }\n\n    return [largestNegative, smallestPositive];\n}"}
{"task_id": "typescript/64", "language": "typescript", "completion": "let result: number = 1;\n    for(let i = n; i > 0; i--){\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "typescript/65", "language": "typescript", "completion": "// Check if the sentence length is within the valid range.\n    if (sentence.length < 1 || sentence.length > 100) {\n        throw new Error('Invalid input. The length of the sentence must be between 1 and 100');\n    }\n  \n    // Check if the sentence contains only alphabets.\n    if (!/^[a-zA-Z\\s]*$/.test(sentence)) {\n        throw new Error('Invalid input. The sentence should contain only alphabets and spaces');\n    }\n  \n    const primes: number[] = [2, 3, 5, 7]; // Array of some prime numbers.\n    let result: string = '';\n    let words: string[] = sentence.split(' '); // Split the sentence into words.\n  \n    for (let word of words) {\n        if (primes.includes(word.length)) {  // If word's length is a prime number, include it in result.\n            result += `${word} `;\n        }\n    }\n  \n    return result.trim(); // Return the final result after removing trailing spaces.\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "let [xZaehler, xNenner] = x.split(\"/\").map(Number);\n    let [nZaehler, nNenner] = n.split(\"/\").map(Number);\n\n    // Die Reduktion von Bruchzahlen ist einfach: Multiplikation mit dem gemeinsamen Nenner und Division durch den gemeinsamen Z\u00e4hler \n    let commonDenominator = xNenner * nNenner;\n    let commonNumerator = xZaehler * nZaehler;\n\n    // Wenn der resultierende Bruch eine ganze Zahl ist, ist die Funktion True. Andernfalls False.\n    return (commonNumerator / commonDenominator) % 1 === 0;\n}"}
{"task_id": "typescript/67", "language": "typescript", "completion": "return nums.sort((a: number, b: number) => a.toString().split('').reduce((acc: number, cur: string) => acc + Math.abs(parseInt(cur)), 0) - b.toString().split('').reduce((acc: number, cur: string) => acc + Math.abs(parseInt(cur)), 0)\n    || a - b);\n}\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "let count = 0;\n    for(let num of nums) {\n        if (Math.abs(num) > 10){\n            const strNum = Math.abs(num).toString(); // Convert the number to string to find first and last digit.\n            const firstDigit = parseInt(strNum[0]); // Get the first digit of the number.\n            const lastDigit = parseInt(strNum[strNum.length - 1]); // Get the last digit of the number.\n            \n            // Check if both digits are odd and increment count if so.\n            if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "typescript/69", "language": "typescript", "completion": "let a = []; //Array with the integers\n    for(let i=0;i<n;i++){\n        a[i] = i*i - i +1;\n    }\n    \n    //Count the triples\n    let countTriple = 0;\n    for(let i=0;i<n-2;i++) {\n        for (let j = i+1; j < n-1; j++) {\n            for(let k = j + 1; k < n ;k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    countTriple++;\n                }\n            }\n        }\n    }\n    return countTriple;\n}"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n\n    return planets.slice(index1+1, index2);\n}"}
{"task_id": "typescript/71", "language": "typescript", "completion": "if(isPrimeNumber(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nfunction isPrimeNumber(n: number) : boolean {\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return false; \n    return n > 1;\n}\n\nconsole.log(x_or_y(7, 34, 12)); // Expected Output: 34\nconsole.log(x_or_y(15, 8, 5)); // Expected Output: 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "let sum = 0;\n    for(let i of lst) {\n        if (typeof i === 'number' && i > 0 && i % 2 !== 0){\n            sum += Math.pow(i, 2);\n        }\n    }\n    return sum;\n};\nconsole.log(double_the_difference([1, 3, 2, 0])); // 10\nconsole.log(double_the_difference([-1, -2, 0])); // 0\nconsole.log(double_the_difference([9, -2])); // 81\nconsole.log(double_the_difference([0])); // 0\nconsole.log(double_the_difference([])); // 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "let strongestExt = '';\n    let highestStrength = Number.MIN_SAFE_INTEGER;\n    for(let ext of extensions) {\n        const upperCaseCount = [...ext].filter(ch => ch === ch.toUpperCase()).length;\n        const lowerCaseCount = [...ext].filter(ch => ch === ch.toLowerCase()).length;\n        const strength = upperCaseCount - lowerCaseCount;\n        if (strength > highestStrength) {\n            highestStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}"}
{"task_id": "typescript/74", "language": "typescript", "completion": "if(b.length > a.length) return false;\n   for(let i=0; i<b.length; i++){\n       let rotatedB = b.substring(i) + b.substring(0, i);\n       if(a.includes(rotatedB)) return true;\n   }\n   return false;\n}"}
{"task_id": "typescript/75", "language": "typescript", "completion": "let number = number0;\n    const digits = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    const romans = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm'];\n    \n    let result = '';\n    for (let i = digits.length - 1; i >= 0 && number > 0; --i) {\n        while (number >= digits[i]) {\n            number -= digits[i];\n            result += romans[i];\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "typescript/76", "language": "typescript", "completion": "return ((Math.pow(a, 2) + Math.pow(b, 2)) === Math.pow(c, 2)) || ((Math.pow(b, 2) + Math.pow(c, 2)) === Math.pow(a, 2)) || ((Math.pow(a, 2) + Math.pow(c, 2)) === Math.pow(b, 2));\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "let hasAlphabets = false;\n    let result = \"\";\n\n    for(let i=0; i<s.length; i++) {\n        if(typeof s[i] === 'string' && s[i].toLowerCase() != s[i].toUpperCase()) {  //check if its alphabet character\n            hasAlphabets = true;\n            result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();   //if it's lowercase, make it upper and vice versa\n        } else {\n            result += s[i];  //else retain as it is\n        }\n    }\n\n    return hasAlphabets ? result : result.split(\"\").reverse().join(\"\");  //if string contains no alphabets, reverse the string\n}"}
{"task_id": "typescript/78", "language": "typescript", "completion": "if (!text) return null;\n    \n    let crypto = require('crypto');\n    let hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}"}
{"task_id": "typescript/79", "language": "typescript", "completion": "let smallerNumber = Math.min(a,b);\n    let largerNumber = Math.max(a,b);\n\n    let resultArray = [];\n\n    for(let i=smallerNumber; i<=largerNumber; i++){\n        if(i%2 === 0){\n            resultArray.push(i);\n        }\n    }\n    \n    return resultArray;\n};"}

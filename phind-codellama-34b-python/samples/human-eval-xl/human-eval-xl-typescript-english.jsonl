{"task_id": "typescript/0", "language": "typescript", "completion": "let balance = 0;\n    for(let op of operations) {\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "typescript/1", "language": "typescript", "completion": "let sum = 0;\n    let product = 1;\n\n    for(let i = 0; i < numbers.length; ++i){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}"}
{"task_id": "typescript/2", "language": "typescript", "completion": "let xor = '';\n\n    for(let i=0; i<a.length; i++){\n        xor += ((a[i] === '1' && b[i] === '1') || (a[i] === '0' && b[i] === '0')) ? '0' : '1';\n    }\n\n    return xor;\n}"}
{"task_id": "typescript/3", "language": "typescript", "completion": "if(strings.length === 0){\n        return undefined;\n    } else{\n        let longestString = strings[0];\n        for(let i=1;i < strings.length;i++){\n            if(strings[i].length > longestString.length){\n                longestString = strings[i];\n            }\n        }\n        return longestString;\n    }\n};\nconsole.log(longest([])); //undefined\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "typescript/4", "language": "typescript", "completion": "while (b) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}"}
{"task_id": "typescript/5", "language": "typescript", "completion": "let nums = numbers.split(\" \");\n    nums.sort((a, b) => a.localeCompare(b));\n    return nums.join(\" \");\n};"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const minVal = Math.min(...numbers);\n    const maxVal = Math.max(...numbers);\n    const range = maxVal - minVal;\n\n    return numbers.map(num => (num - minVal) / range);\n};\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "let str = '';\n    for(let i=0; i<string0.length;i++){\n        if(string0[i] === string0[i].toUpperCase()){\n            str += string0[i].toLowerCase();\n        }else{\n            str += string0[i].toUpperCase();\n        }\n    }\n    return str;\n} \n\nconsole.log(flip_case('Hello')); // Expected output: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "return l.filter(x => x > 0);\n}"}
{"task_id": "typescript/9", "language": "typescript", "completion": "if(n <= 1) return false;\n    if(n <= 3) return true;\n    \n    if(n % 2 == 0 || n % 3 == 0) return false;\n    \n    for(let i = 5; i * i <= n; i += 6){\n        if(n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    \n    return true;\n}"}
{"task_id": "typescript/10", "language": "typescript", "completion": "return Array.from(new Set(l)).sort((a, b) => a - b);\n}"}
{"task_id": "typescript/11", "language": "typescript", "completion": "let count = 0;\n    let fibN = 2;\n\n    while (count < n){\n        if (isPrimeNumber(fibN)){\n            count++;\n        }\n        fibN = nextFibonacciNumber(fibN);\n    }\n\n    return fibN-1;\n};\n\nconst isPrimeNumber = function(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return true;\n}\n\nconst nextFibonacciNumber = function(n: number): number {\n    return n + (n - 2 > 0 ? n - 2 : 1);\n};\n\nconsole.log(`The ${process.argv[2]}-th prime Fibonacci number is ${prime_fib(parseInt(process.argv[2]))}`);"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const len = l.length;\n    if(len < 3) return false;\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < len - 1; ++i) {\n        let j = i + 1;\n        let k = len - 1;\n        while (j < k) {\n            const sum = l[i] + l[j] + l[k];\n            if(sum == 0){\n                return true;\n            }else if(sum < 0){\n                j++;\n            }else{\n                k--;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "let map = {};\n    for(let num of l) {\n        if(map[num]) return true;\n        else map[-num] = true;\n    }\n    return false;\n};\n\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])) // false\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])) // false\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])) // false\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) // true\nconsole.log(pairs_sum_to_zero([1])) // false"}
{"task_id": "typescript/14", "language": "typescript", "completion": "let arr = [0, 0, 2, 0];\n\n    for (let i = 4; i <= n; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4];\n    }\n\n    return arr[n];\n}\n\nconsole.log(fib4(5));  // Output: 4\nconsole.log(fib4(6));  // Output: 8\nconsole.log(fib4(7));  // Output: 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const sortedL = l.sort(function(a, b) { return a - b; });\n    let midpoint = Math.floor(sortedL.length / 2);\n\n    if(sortedL.length % 2 === 0){\n        return (sortedL[midpoint-1] + sortedL[midpoint])/2;\n    } else {\n        return sortedL[midpoint];\n    }\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "return text === [...text].reverse().join('');\n}\nconsole.log(is_palindrome(''));        // True\nconsole.log(is_palindrome('aba'));      // True\nconsole.log(is_palindrome('aaaaa'));   // True\nconsole.log(is_palindrome('zbcd'));     // False\n\n/**\n * Explanation: \n * This function is called `is_palindrome` and it takes a string as an argument `text`. \n * It checks if the reversed version of the string (`[...text].reverse().join('')`) is equal to the original one (`text`).\n * If they are equal, the function returns true (meaning that the string is a palindrome), otherwise it returns false."}
{"task_id": "typescript/17", "language": "typescript", "completion": "return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "return l.every(n => n < t);\n}"}
{"task_id": "typescript/19", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "typescript/20", "language": "typescript", "completion": "if(s0.length !== s1.length) return false;\n    const charMap0 = new Map();\n    const charMap1 = new Map();\n\n    for(let i=0;i<s0.length;i++){\n        let char = s0[i];\n        if(!charMap0.has(char)){\n            charMap0.set(char, 0);\n        }\n        charMap0.set(char, charMap0.get(char) + 1);\n    }\n    \n    for(let i=0;i<s1.length;i++){\n        let char = s1[i];\n        if(!charMap1.has(char)){\n            charMap1.set(char, 0);\n        }\n        charMap1.set(char, charMap1.get(char) + 1);\n    }\n    \n    for (let [key, value] of charMap0.entries()) {\n        if (!charMap1.has(key) || charMap1.get(key)!==value) {\n            return false;\n        }\n    }\n    \n    return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "if(n <= 2) return 1;\n    let prev = 1, curr = 1;\n    for(let i = 3; i<=n; i++) {\n        [prev,curr] = [curr,prev+curr];\n    }\n    return curr;\n}"}
{"task_id": "typescript/22", "language": "typescript", "completion": "let result: Array<number> = [];\n    const set = new Set(l1);\n    \n    for (let element of l2) {\n        if (set.has(element)) {\n            result.push(element);\n            set.delete(element);\n        }\n    }\n  \n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "typescript/23", "language": "typescript", "completion": "let maxPrime = 2;\n    while (n % 2 == 0) { // check for factor of 2 \n        maxPrime = 2;\n        n /= 2;\n    }\n\n    let sqrtN = Math.sqrt(n);\n    for (let i = 3; i <= sqrtN; i += 2) {\n        while (n % i == 0) { // check for factor of i\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) maxPrime = n;\n    return maxPrime;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "let new_array = []\n    \n    for(let i=1; i< xs.length; i++){\n        new_array.push(i*xs[i])\n    }\n\n    return new_array\n}"}
{"task_id": "typescript/26", "language": "typescript", "completion": "let arr = [0,0,1];\n    for(let i=3; i<=n; i++){\n        arr[i] = arr[i-1]+arr[i-2]+arr[i-3];\n    }\n    return arr[n];\n} \nconsole.log(`>>> fibfib(1) ${fibfib(1)}`);\nconsole.log(`>>> fibfib(5) ${fibfib(5)}`);\nconsole.log(`>>> fibfib(8) ${fibfib(8)}`);"}
{"task_id": "typescript/27", "language": "typescript", "completion": "let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for(let i = 0; i < s.length; i++) {\n        if(vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    \n    // Check for 'y' at the end of the word\n    if (s[s.length - 1] === 'y') {\n        count++;\n    }\n    \n    return count;\n}\nconsole.log(vowels_count(\"abcde\"));\nconsole.log(vowels_count(\"ACEDY\"));"}
{"task_id": "typescript/28", "language": "typescript", "completion": "// Count frequency of each integer in the list.\n    const freqMap: Map<number, number> = new Map();\n    for(let num of lst) {\n        if (!freqMap.has(num)) {\n            freqMap.set(num, 1);\n        } else {\n            freqMap.set(num, freqMap.get(num)! + 1);\n        }\n    }\n\n    // Find the greatest integer greater than 0 that has frequency greater than or equal to itself.\n    let maxFreq = -1;\n    for (let [key, value] of freqMap) {\n        if (key > 0 && value >= key) {\n            maxFreq = Math.max(maxFreq, key);\n        }\n    }\n\n    return maxFreq === -1 ? -1 : maxFreq;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "// Check if array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n    \n    // Calculate the sum of the array's elements\n    const totalWeight = q.reduce((acc, val) => acc + val, 0);\n    \n    return isPalindrome && totalWeight <= w;\n}"}
{"task_id": "typescript/31", "language": "typescript", "completion": "if (a <= 1) return false;\n    let factors = [];\n    for(let i=2;i<=Math.sqrt(a);i++)\n    {\n        while(a % i==0)\n        {\n            if (!factors.includes(i)) {\n                factors.push(i);\n            }\n            a /= i;\n        }\n    }\n    if (a > 1) factors.push(a);\n    return factors.length === 3;\n}"}
{"task_id": "typescript/32", "language": "typescript", "completion": "return 'db' + Number(decimal).toString(2).padStart(8, '0') + 'db';\n};\n\nconsole.log(decimal_to_binary(15)); // \"db1111db\"\nconsole.log(decimal_to_binary(32)); // \"db100000db\""}
{"task_id": "typescript/33", "language": "typescript", "completion": "if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i <= s.length - 3; i++) {\n        if (s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(is_happy('a')); // False\nconsole.log(is_happy('aa')); // False\nconsole.log(is_happy('abcd')); // True\nconsole.log(is_happy('aabb')); // False\nconsole.log(is_happy('adb')); // True\nconsole.log(is_happy('xyy')); // False"}
{"task_id": "typescript/34", "language": "typescript", "completion": "let letter_grades: Array<string> = [];\n    grades.forEach(grade => {\n        if(grade == 4.0){\n            letter_grades.push('A+');\n        } else if (grade > 3.7) {\n            letter_grades.push('A');\n        } else if (grade > 3.3) {\n            letter_grades.push('A-');\n        } else if (grade > 3.0) {\n            letter_grades.push('B+');\n        } else if (grade > 2.7) {\n            letter_grades.push('B');\n        } else if (grade > 2.3) {\n            letter_grades.push('B-');\n        } else if (grade > 2.0) {\n            letter_grades.push('C+');\n        } else if (grade > 1.7) {\n            letter_grades.push('C');\n        } else if (grade > 1.3) {\n            letter_grades.push('C-');\n        } else if (grade > 1.0) {\n            letter_grades.push('D+');\n        } else if (grade > 0.7) {\n            letter_grades.push('D');\n        } else if (grade > 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    });\n    return letter_grades;\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const num = string0.length;\n    if(num < 2) return false;\n    \n    for(let i = 2; i <= Math.sqrt(num); i++) {\n        if(num % i === 0) {\n            return false;\n        }\n    }\n    \n    return true;\n};\n\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "typescript/36", "language": "typescript", "completion": "let sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\n\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150)); // \"6\"\nconsole.log(solve(147)); // \"12\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "let result: Array<Array<number>> = [];\n    \n    for(let i=0;i<lst.length;i++){\n        for(let j=0;j<lst[i].length;j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    \n    result.sort((a: Array<number>, b: Array<number>)=>{\n        return a[0] - b[0] || b[1] - a[1];\n    });\n    \n    return result;\n}"}
{"task_id": "typescript/38", "language": "typescript", "completion": "if(lst.length < 2) return None;\n    const sortedLst = lst.sort((a, b) => a - b);\n    for (let i=0; i<sortedLst.length-1; i++) {\n        if (sortedLst[i] !== sortedLst[i+1]) {\n            return sortedLst[i+1];\n        }\n    }\n    return None;\n}"}
{"task_id": "typescript/39", "language": "typescript", "completion": "let boredomCount = 0;\n    const sentences = S.split(/[.!?]/g); // splitting the text into sentences using regex .,!,? as separators\n    for (let i = 0; i < sentences.length; ++i) {\n        if (sentences[i].trim().startsWith(\"I\")) boredomCount++; // count boredom sentences\n    }\n    return boredomCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "// Find the largest prime value in array.\n    const isPrime = n => {\n        for(let i = 2; i <= Math.sqrt(n); ++i) {\n            if(n % i === 0) return false;\n        }\n        return n > 1;\n    };\n    \n    let largestPrime = lst.reduce((max, num) => isPrime(num) && num > max ? num : max, 0);\n    \n    // Sum the digits of largest prime value and return it.\n    if (largestPrime === 0) return 0;\n    \n    let sum = 0;\n    while(largestPrime){\n        sum += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime / 10);\n    }\n    \n    return sum;\n};\n\n// Test examples\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) // Output: 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) // Output: 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) // Output: 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) // Output: 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])) // Output: 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])) // Output: 7"}
{"task_id": "typescript/41", "language": "typescript", "completion": "if(Object.keys(dict).length === 0){\n        return false;\n    }\n    \n    let allLowerCase=true;\n    let allUpperCase=true;\n\n    for (let key in dict) {\n        if (typeof(key) !== 'string'){\n            return false;\n        }\n        \n        if (key.toUpperCase() !== key && key.toLowerCase() !== key) {\n            return false;\n        }\n        \n        allLowerCase = allLowerCase && key === key.toLowerCase();\n        allUpperCase = allUpperCase && key === key.toUpperCase();\n    }\n    \n    return allLowerCase || allUpperCase;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "let num = parseFloat(value);\n    \n    if (num >= 0 && num % 1 >= 0.5) {\n        num = Math.ceil(num);\n    } else if (num < 0 && num % -1 <= -0.5) {\n        num = Math.floor(num);\n    } else {\n        num = Math.round(num);\n    }\n    \n    return num;\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "let stonesPerLevel = new Array();\n    for(let i=1; i<=n; i++) {\n        if(n % 2 === 0){\n            stonesPerLevel.push(n + 2 * i - 1);\n        } else {\n            stonesPerLevel.push(n + 2 * i - 2);\n        }\n    }\n    return stonesPerLevel;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "return s.split(/[\\s,]+/);\n}"}
{"task_id": "typescript/45", "language": "typescript", "completion": "if(x > y){\n        return -1;\n    }\n\n    let maxEvenNum = -1;\n\n    for (let i=y; i>= x; i--){\n        if (i % 2 === 0){\n            maxEvenNum = i;\n            break;\n        }\n    }\n    \n    return maxEvenNum;\n}"}
{"task_id": "typescript/46", "language": "typescript", "completion": "if (n > m) {\n        return -1;\n    }\n    let avg = Math.round(((n + m) / 2));\n    return `0b${avg.toString(2)}`;\n}"}
{"task_id": "typescript/47", "language": "typescript", "completion": "let result = new Array(n);\n    for (let i = 0; i < n; ++i) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i + 1; ++j) {\n                factorial *= j;\n            }\n            result[i] = factorial;\n        } else {\n            let sum = 0;\n            for (let k = 1; k <= i + 1; ++k) {\n                sum += k;\n            }\n            result[i] = sum;\n        }\n    }\n    return result;\n}"}
{"task_id": "typescript/48", "language": "typescript", "completion": "let evenCount = 0, oddCount = 0;\n    for(let i=1; i<= n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return [evenCount, oddCount];\n};\n\nconst isPalindrome = function (n: number) : boolean {\n    let reversedN = 0;\n    while(n > 0) {\n        const remainder = n % 10;\n        reversedN = reversedN * 10 + remainder;\n        n = Math.floor(n / 10);\n    }\n    \n    return reversedN === parseInt(String(n));\n};\n\nconsole.log(even_odd_palindrome(3));  // [1, 2]\nconsole.log(even_odd_palindrome(12)); // [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "if(arr.length === 0) return true;\n    let maxVal = Math.max(...arr);\n    let maxIndex = arr.indexOf(maxVal);\n    let sortedArr = arr.slice(maxIndex).concat(arr.slice(0, maxIndex));\n    for (let i=1; i < arr.length; i++) {\n        if(sortedArr[i] >= sortedArr[i-1]) continue;\n        else return false;\n    }\n    return true;\n};\n\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False"}
{"task_id": "typescript/50", "language": "typescript", "completion": "let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0); // Get all the odd numbers in lst1\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0); // Get all the even numbers in lst2\n  \n    if (oddNumsInLst1.length > evenNumsInLst2.length) {\n      return \"NO\";\n    } else {\n      for (let i = 0; i < oddNumsInLst1.length; i++) {\n        let numToReplaceIndex = lst1.indexOf(oddNumsInLst1[i]); // Find the index of number to replace in lst1\n  \n        if (!evenNumsInLst2.some((num) => num === oddNumsInLst1[i])) {\n          return \"NO\";\n        } else {\n          lst1[numToReplaceIndex] = evenNumsInLst2.find(num => num === oddNumsInLst1[i]); // Replace the number in lst1 with the corresponding even number from lst2\n        }\n      }\n    }\n    return \"YES\";\n  };"}
{"task_id": "typescript/51", "language": "typescript", "completion": "let result = '';\n    for(let i=0;i<s.length;i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    return [result, result === [...result].reverse().join('')]; \n}\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // ['cdedc', true]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "let count = 0;\n    for(let i = 0; i < grid.length; i++) {\n        let well_level = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if (grid[i][j] == 1) {\n                well_level++;\n            }\n        }\n        count += Math.ceil(well_level / capacity);\n    }\n    return count;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "if(s === \"\"){\n        return [];\n    }\n\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let wordsArray = s.split(\" \");\n    let selectedWords: string[] = [];\n\n    for (let word of wordsArray){\n        let countConsonants = 0;\n        for(let letter of word) {\n            if(!vowels.includes(letter.toLowerCase())){\n                countConsonants++;\n            }\n        }\n        if(countConsonants === n) selectedWords.push(word);\n    }\n\n    return selectedWords;\n}"}
{"task_id": "typescript/54", "language": "typescript", "completion": "return arr.sort((a,b)=>b-a).slice(0,k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3)); //[-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); //[4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); //[2]"}
{"task_id": "typescript/55", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0; i < Math.min(k, arr.length); i++){\n        if(Math.abs(arr[i]) < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start > end){\n        return \"NO\";\n    }\n    \n    const intersectionLength = end - start + 1;\n    if(isPrime(intersectionLength)){\n        return \"YES\";\n    } else{\n        return \"NO\";\n    }\n};\n  \nfunction isPrime(num: number): boolean {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false; \n    return num > 1;\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "let arr = [1]; // Initialize with first element of sequence\n\n    for(let i=2; i<=n+1; i++) {\n        if (i % 2 === 0) { // If n is even\n            arr[i] = 3;\n        } else { // If n is odd\n            arr[i] = arr[i - 2] + arr[i - 1] + arr[(i + 1) < arr.length ? (i + 1):0];\n        }\n    }\n    \n    return arr;\n}"}
{"task_id": "typescript/58", "language": "typescript", "completion": "let product = 1;\n    let foundOddDigit = false;\n    for (let digit of String(n)) {\n        if (Number(digit) % 2 === 1) {\n            product *= Number(digit);\n            foundOddDigit = true;\n        }\n    }\n    return foundOddDigit ? product : 0;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "let stack : Array<string> = [];\n    for(let i = 0; i < string0.length; ++i){\n        if(string0[i] == '[' && stack.length > 0){\n            stack.push('[');\n        }else if(string0[i] == ']' && stack.length > 0){\n            stack.pop();\n        }else{\n            stack.push(string0[i]);\n        }\n    }\n    return stack.length === 1;\n};\n\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[[][]]'));\nconsole.log(is_nested('[[]][['));"}
{"task_id": "typescript/60", "language": "typescript", "completion": "let sumOfSquared = 0;\n\n    for(let i=0;i<lst.length;i++){\n        // round each element in the list to the upper int(Ceiling)\n        lst[i] = Math.ceil(lst[i]); \n\n        // sum of squares\n        sumOfSquared += Math.pow(lst[i],2);\n    }\n\n    return sumOfSquared;\n};\n\n// Test cases:\nconsole.log(sum_squares([1,2,3]))      // 14\nconsole.log(sum_squares([1,4,9]))      // 98\nconsole.log(sum_squares([1,3,5,7]))    // 84\nconsole.log(sum_squares([1.4,4.2,0]))   // 29\nconsole.log(sum_squares([-2.4,1,1]))   // 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "// Check if the last character is an alphabetical character\n    const lastChar = txt[txt.length - 1];\n    if (!/[a-z]/i.test(lastChar)) {\n        return false;\n    }\n\n    // Check if it's part of a word or not\n    const words = txt.split(\" \");\n    const lastWord = words[words.length - 1];\n    if (lastWord[lastWord.length - 1] === lastChar) {\n        return false;\n    }\n\n    // If both checks are passed, then return true\n    return true;\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "for(let i=1; i<arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "typescript/63", "language": "typescript", "completion": "let maxNegative = null;\n    let minPositive = null;\n    for(let i of lst){\n        if(i < 0) maxNegative = Math.max(maxNegative, i);\n        else if (i > 0) minPositive = Math.min(minPositive, i);\n    }\n    return [(maxNegative === null) ? 'None' : maxNegative, (minPositive === null) ? 'None' : minPositive];\n}\n\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); //Expected: [None, 1]\nconsole.log(largest_smallest_integers([])); //Expected: [None, None]\nconsole.log(largest_smallest_integers([0])); //Expected: [None, None]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "let result = 1;\n    for(let i=0;i<n;i++){\n        result*=(n-i);\n    }\n    return result;\n}\n\nconsole.log(special_factorial(4));"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrimeNumber = (num: number): boolean => {\n        if(num < 2) return false;\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n            if( num % i === 0 ) return false;\n        }\n        return true;\n    }\n\n    let words: string[] = sentence.split(' ');\n    let resultWords: string[] = [];\n    \n    for(let word of words) {\n        if (isPrimeNumber(word.length)) {\n            resultWords.push(word);\n        }\n    }\n    \n    return resultWords.join(' ');\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n    const [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n    \n    // Calculate the resulting numerator and denominator\n    const resultingNumerator = xNumerator * nNumerator;\n    const resultingDenominator = xDenominator * nDenominator;\n    \n    // Check if the result is a whole number\n    return (resultingNumerator % resultingDenominator === 0);\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "return nums.sort((a, b) => a - b).sort((a, b) => {\n        let x = String(Math.abs(a)).split('').map(Number).reduce((acc, val) => acc + val, 0);\n        let y = String(Math.abs(b)).split('').map(Number).reduce((acc, val) => acc + val, 0);\n        return x - y || a - b;\n    });\n};\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "return nums.filter(num => {\n        let strNum = Math.abs(num).toString(); // convert to string for easy manipulation\n        if (+strNum[0] % 2 === 1 && +strNum[strNum.length - 1] % 2 === 1) {\n            return num > 10;\n        }\n        return false;\n    }).length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "let a : number[] = [];\n    for(let i=1; i<=n; i++){\n        a.push((i*i)-i+1);\n    }\n    \n    let count = 0;\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planetsOrder: Array<string> = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index: number = -1;\n    let planet2Index: number = -1;\n    \n    for(let i=0;i<planetsOrder.length;i++){\n        if(planet1 === planetsOrder[i]){\n            planet1Index = i;\n        }\n        if(planet2 === planetsOrder[i]){\n            planet2Index = i;\n        }\n    }\n    \n    if(planet1Index===-1 || planet2Index == -1) {\n        return [];\n    }\n    \n    const startIndex: number = Math.min(planet1Index, planet2Index);\n    const endIndex: number = Math.max(planet1Index, planet2Index);\n    \n    return planetsOrder.slice(startIndex+1,endIndex);\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "let isPrime = true;\n    if (n <= 1) {\n        return y;\n    }\n    for (let i = 2; i < Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nconsole.log(x_or_y(7, 34, 12)); // Outputs: 34\nconsole.log(x_or_y(15, 8, 5)); // Outputs: 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0;i < lst.length; i++){\n        if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i],2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "typescript/73", "language": "typescript", "completion": "let maxStrength = -Infinity;\n    let strongestExtension = '';\n    \n    for(let ext of extensions) {\n        const upperCaseCount = [...ext].filter(c => c === c.toUpperCase()).length;\n        const lowerCaseCount = [...ext].filter(c => c === c.toLowerCase()).length;\n        \n        let strength = upperCaseCount - lowerCaseCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = ext;\n        }\n    }\n    \n    return `${class_name}.${strongestExtension}`;\n}\n\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']));"}
{"task_id": "typescript/74", "language": "typescript", "completion": "for(let i=0;i<b.length;i++) {\n        let rotation:string = b.slice(i)+b.slice(0,i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n};\nconsole.log(cycpattern_check(\"abcd\",\"abd\")); // False\nconsole.log(cycpattern_check(\"hello\",\"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\",\"psus\")); // False\nconsole.log(cycpattern_check(\"abab\",\"baa\")); // True\nconsole.log(cycpattern_check(\"efef\",\"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\",\"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "let result = \"\";\n    \n    // lookup table for all roman numerals\n    const nums = [1,4,5,9,10,40,50,90,100,400,500,900,1000];\n    const romans = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm'];\n    \n    for(let i=nums.length-1; number0>0 && i>=0; i--){\n        while(number0>=nums[i]){\n            result += romans[i];\n            number0 -= nums[i];\n        }\n    }\n    \n    return result;\n};\n\nconsole.log(int_to_mini_roman(19)); // 'xix'\nconsole.log(int_to_mini_roman(152)); // 'clii'\nconsole.log(int_to_mini_roman(426)); // 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n           Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n           Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}"}
{"task_id": "typescript/77", "language": "typescript", "completion": "let result = '';\n    for(let i = 0; i < s.length; i++) {\n        if (typeof s[i] === 'string' && s[i].toLowerCase() != s[i].toUpperCase()) {\n            if (s[i] === s[i].toLowerCase()) {\n                result += s[i].toUpperCase();\n            } else {\n                result += s[i].toLowerCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if (!result.match(/[a-zA-Z]/g)) {\n        return result.split('').reverse().join('');\n    }\n    return result;\n}"}
{"task_id": "typescript/78", "language": "typescript", "completion": "if(!text){\n        return undefined;\n    }\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\nconsole.log(string_to_md5(\"Hello world\"));"}
{"task_id": "typescript/79", "language": "typescript", "completion": "let result : Array<number> = [];\n\n    if (a > b){\n        let temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for(let i=a; i <= b; i++){\n        let numToString = String(i);\n        \n        for(let j=0;j<numToString.length;j++){\n            if(parseInt(numToString[j])%2 === 0){\n                result.push(parseInt(numToString[j]));\n            }\n        }\n    }\n    \n    result = Array.from(new Set(result)).sort((a, b) => a - b);\n\n    return result;\n}"}

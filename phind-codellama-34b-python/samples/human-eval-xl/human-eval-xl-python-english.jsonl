{"task_id": "python/0", "language": "python", "completion": "balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    \n    return False"}
{"task_id": "python/1", "language": "python", "completion": "s = sum(numbers)\n    p = 1\n    for i in numbers:\n        if i != 0:\n            p *= i\n    return s, p"}
{"task_id": "python/2", "language": "python", "completion": "assert len(a) == len(b), \"Strings a and b must be of same length.\"\n    xor = []\n    for i in range(len(a)):\n        xor.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(xor)\n\ndef string_and(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary AND on these inputs and return result also as a string.\n    >>> string_and('010', '110')\n    '010'\n    \"\"\"\n    assert len(a) == len(b), \"Strings a and b must be of same length.\"\n    _and = []\n    for i in range(len(a)):\n        _and.append(str(int(a[i]) & int(b[i])))\n    return ''.join(_and)\n\ndef string_or(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary OR on these inputs and return result also as a string.\n    >>> string_or('010', '110')\n    '110'\n    \"\"\"\n    assert len(a) == len(b), \"Strings a and b must be of same length.\"\n    _or = []\n    for i in range(len(a)):\n        _or.append(str(int(a[i]) | int(b[i])))\n    return ''.join(_or)\n\ndef string_not(a: str) -> str:\n    \"\"\" Input is a string a consisting only of 1s and 0s.\n    Perform unary NOT on this input and return result also as a string.\n    >>> string_not('010')\n    '101'\n    \"\"\"\n    not_a = []\n    for i in range(len(a)):\n        not_a.append(str(int(a[i]) ^ 1))\n    return ''.join(not_a)\n\ndef hamming_distance(a: str, b: str) -> int:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Calculate the Hamming distance between these inputs.\n    >>> hamming_distance('010', '110')\n    2\n    \"\"\"\n    assert len(a) == len(b), \"Strings a and b must be of same length.\"\n    return sum([int(a[i]) ^ int(b[i]) for i in range(len(a))])"}
{"task_id": "python/3", "language": "python", "completion": "if not strings:  # check if the list is empty\n        return None\n    max_str = max(strings, key=len)  # get the string with maximum length\n    return max_str"}
{"task_id": "python/4", "language": "python", "completion": "if a < 0:  # Ensure that a is non-negative.\n        a = -a\n    if b < 0:  # Ensure that b is non-negative.\n        b = -b\n\n    while b != 0:  # While b isn't 0, loop.\n        a, b = b, a % b  # a becomes b and b becomes remainder of a/b. Repeat until b=0.\n\n    return a  # Once the loop ends, a is the greatest common divisor of original a and b."}
{"task_id": "python/5", "language": "python", "completion": "numberals = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    \n    sorted_numbers = sorted([numberals[num] for num in numbers.split()], key=int)\n    \n    return ' '.join([list(numberals.keys())[i] for i in sorted_numbers])"}
{"task_id": "python/6", "language": "python", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    \n    rescaled_list = [(x - min_val) / (max_val - min_val) for x in numbers]\n    \n    return rescaled_list"}
{"task_id": "python/7", "language": "python", "completion": "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "python/8", "language": "python", "completion": "return [i for i in l if i > 0]"}
{"task_id": "python/9", "language": "python", "completion": "if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        elif n == 2 or n == 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= n:\n            if not n % i or not n % (i + 2):\n                return False\n            i += 6\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a+b\n        return b\n\n    cnt, num = 0, 2\n    while cnt < n:\n        if is_prime(num):\n            cnt += 1\n        num = fib(cnt + 2)\n\n    return num\n\nprint(prime_fib(1))\nprint(prime_fib(2))\nprint(prime_fib(3))\nprint(prime_fib(4))\nprint(prime_fib(5))"}
{"task_id": "python/12", "language": "python", "completion": "l.sort()\n\n    for i in range(len(l) - 1):\n        a = l[i]\n        start = i + 1\n        end = len(l) - 1\n\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c < 0:\n                start += 1\n            else: # a + b + c > 0\n                end -= 1\n    return False\n\nprint(triples_sum_to_zero([1, 3, 5, 0])) # False\nprint(triples_sum_to_zero([1, 3, -2, 1])) # True\nprint(triples_sum_to_zero([1, 2, 3, 7])) # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # True\nprint(triples_sum_to_zero([1])) # False"}
{"task_id": "python/13", "language": "python", "completion": "l = sorted(l)\n    n = len(l)\n\n    for i in range(n-1):\n        if -l[i] == l[n-1]:\n            return True\n        elif -l[i] > l[n-1]:\n            break\n            \n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    dp = [0]*(n+1)\n    dp[2] = 2\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    \n    return dp[n]"}
{"task_id": "python/15", "language": "python", "completion": "n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n % 2 == 1 else (s[(n-1)//2] + s[n//2]) / 2)\n\nprint(median([3, 1, 2, 4, 5]))   # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "text = text.lower().replace(\" \", \"\") # lowercase the string and remove spaces\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    return ''.join([c for c in text if c not in vowels])\n\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))"}
{"task_id": "python/18", "language": "python", "completion": "for i in l:\n        if i >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100)) # True\nprint(below_threshold([1, 20, 4, 10], 5))  # False"}
{"task_id": "python/19", "language": "python", "completion": "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x\n    >>> subtract(20, 3)\n    17\n    >>> subtract(5, 3)\n    2\n    \"\"\"\n    return x - y"}
{"task_id": "python/20", "language": "python", "completion": "s0 = sorted(s0)\n    s1 = sorted(s1)\n    \n    return s0 == s1"}
{"task_id": "python/21", "language": "python", "completion": "if n <= 0:\n        return \"Incorrect input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "python/22", "language": "python", "completion": "return sorted(set(l1) & set(l2))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))"}
{"task_id": "python/23", "language": "python", "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/24", "language": "python", "completion": "return (n * (n + 1)) // 2"}
{"task_id": "python/25", "language": "python", "completion": "return [(i+1)*xs[i+1] for i in range(len(xs)-1)]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 1\n    \n    arr = [0, 0, 1] + [0]*(n-2)\n    for i in range(3, n+1):\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\n        \n    return arr[-1]"}
{"task_id": "python/27", "language": "python", "completion": "count = 0\n    for letter in s:\n        if letter.lower() in 'aeiou':\n            count += 1\n    return count\n\nprint(vowels_count('abcde')) #2\nprint(vowels_count('ACEDY')) #3\nprint(vowels_count('Hello')) #2\nprint(vowels_count('world')) #1\nprint(vowels_count('PYTHON')) #2\nprint(vowels_count('JAVA'))   #1 \n\nFIX = \"\"\"\nThe function does not handle capitalized words correctly. It should be fixed by converting the input string to lowercase before checking if each letter is a vowel. This can be done with `s.lower()`.\n\"\"\"\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    for letter in s.lower(): # convert to lowercase before checking if it's a vowel\n        if letter in 'aeiou':\n            count += 1\n    return count\n\nprint(vowels_count('abcde')) #2\nprint(vowels_count('ACEDY')) #3\nprint(vowels_count('Hello')) #2\nprint(vowels_count('world')) #1\nprint(vowels_count('PYTHON')) #2\nprint(vowels_count('JAVA'))   #1 \nprint(vowels_count('Y'))      #1\n\nFIX = \"\"\"\nThe function also does not count the 'y' as a vowel if it is in the middle of the word. It should be fixed by checking if the letter is either 'y' or 'Y', and if it is, add one to the count only if the loop index equals the length of the string - 1 (the last character).\n\"\"\"\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    for i, letter in enumerate(s.lower()): # convert to lowercase before checking if it's a vowel\n        if letter in 'aeiou' or (letter == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n\nprint(vowels_count('abcde')) #2\nprint(vowels_count('ACEDY')) #3\nprint(vowels_count('Hello')) #2\nprint(vowels_count('world')) #1\nprint(vowels_count('PYTHON')) #2\nprint(vowels_count('JAVA'))   #1 \nprint(vowels_count('Y'))      #1\nprint(vowels_count('Happy'))  #2"}
{"task_id": "python/28", "language": "python", "completion": "from collections import Counter\n    counts = Counter(lst)\n    max_val = max(counts.keys())\n    for i in range(max_val, 0, -1): # from max_val down to 1\n        if i >= counts[i]:\n            return i\n    return -1\n    \nprint(search([4, 1, 2, 2, 3, 1])) # Expected: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Expected: 3\nprint(search([5, 5, 4, 4, 4])) # Expected: -1"}
{"task_id": "python/29", "language": "python", "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic (i.e., q == q[::-1])\n    if q != q[::-1]:\n        return False\n    \n    # If it's palindromic, check if sum of its elements is less than or equal to w\n    elif sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    factors = []\n    for i in range(2, int(a/2)+1):\n        while a % i==0 and is_prime(i):\n            factors.append(i)\n            a /= i\n            \n    return len(factors) == 3\n\nprint(is_multiply_prime(30)) # True"}
{"task_id": "python/32", "language": "python", "completion": "binary = bin(decimal)[2:]  # Convert the decimal number to a binary string\n    return 'db' + binary + 'db'"}
{"task_id": "python/33", "language": "python", "completion": "if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def convert(gpa):\n        if gpa == 4.0:\n            return \"A+\"\n        elif gpa > 3.7:\n            return \"A\"\n        elif gpa > 3.3:\n            return \"A-\"\n        elif gpa > 3.0:\n            return \"B+\"\n        elif gpa > 2.7:\n            return \"B\"\n        elif gpa > 2.3:\n            return \"B-\"\n        elif gpa > 2.0:\n            return \"C+\"\n        elif gpa > 1.7:\n            return \"C\"\n        elif gpa > 1.3:\n            return \"C-\"\n        elif gpa > 1.0:\n            return \"D+\"\n        elif gpa > 0.7:\n            return \"D\"\n        elif gpa > 0.0:\n            return \"D-\"\n        else:\n            return \"E\"\n\n    letter_grades = [convert(gpa) for gpa in grades]\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def check_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \ndef prime_length(string):\n    return check_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "# get the sum of digits\n    digits_sum = sum(int(d) for d in str(N))\n    \n    # convert to binary and remove '0b' from the start of the binary representation\n    binary_num = bin(digits_sum)[2:] \n    \n    return binary_num"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n                \n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return result"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    else:\n        unique_lst.sort()\n        return unique_lst[1]"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    sentences = S.split('. ')\n    boredom_count = 0\n    \n    for sentence in sentences:\n        if sentence and sentence[0] == 'I':\n            boredom_count += 1\n            \n    return boredom_count"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i:\n                i += 2\n            else:\n                return False\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num) and (max_prime is None or num > max_prime):\n            max_prime = num\n    \n    if max_prime is None:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "python/41", "language": "python", "completion": "if len(dict) == 0:\n        return False\n    \n    lower_count = sum(k.islower() for k in dict.keys())\n    upper_count = sum(k.isupper() for k in dict.keys())\n    \n    if (lower_count == len(dict)) or (upper_count == len(dict)):\n        return True\n    else:\n        return False"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        if value - int(value) < 0.5 or value - int(value) == 0.5 and int(value) % 2 == 1:\n            return int(value)\n        else:\n            return int(value) + 1\n    else:\n        if int(value) + 0.5 < abs(value):\n            return int(value) - 1\n        else:\n            return int(value)"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    stones = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            stones.append(2 * i - 1)\n        else:\n            stones.append(2 * i)\n    return stones"}
{"task_id": "python/44", "language": "python", "completion": "s = s.replace(\",\", \"\")\n    return s.split()"}
{"task_id": "python/45", "language": "python", "completion": "if x > y:\n        return -1\n    else:\n        # Start from the largest number in range [x, y]\n        num = y\n        while num >= x:\n            # Check if it's even and return it if found\n            if num % 2 == 0:\n                return num\n            num -= 1\n        # No even numbers in the range [x, y]\n        return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round((n + m) / 2)\n    binary_average = bin(average)[2:] # Converts to binary and removes the '0b' part.\n    \n    return \"0b\" + binary_average"}
{"task_id": "python/47", "language": "python", "completion": "def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(i + 1)))\n            \n    return result\n\nprint(f(5))"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    max_val = max(arr[0], arr[-1])\n    min_val = min(arr[0], arr[-1])\n    \n    for i in range(1, len(arr)):\n        if arr[i] < min_val or arr[i] > max_val:\n            return False\n        max_val = max(max_val, arr[i])\n        \n    return True"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_nums_in_lst2 = sum(i%2 for i in lst2)\n    total_even_needed = len([i for i in lst1 if i%2 != 0])\n    return \"YES\" if total_even_needed <= odd_nums_in_lst2 else \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n        \n    # Check if result string is a palindrome\n    is_palindrome = s == s[::-1]\n    \n    return (s, is_palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "ans = 0\n    for row in grid:\n        while '1' in str(row):\n            ans += capacity\n            row = [x - capacity if x >= capacity else 0 for x in row]\n    return ans"}
{"task_id": "python/53", "language": "python", "completion": "vowels = 'aeiou'\n    words = s.split()\n    selected_words = []\n    \n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in vowels and char.isalpha():\n                count += 1\n                \n        if count == n:\n            selected_words.append(word)\n            \n    return selected_words"}
{"task_id": "python/54", "language": "python", "completion": "arr.sort(reverse=True) # Sort the array in descending order\n\n    return sorted(arr[:k], reverse=False) # Return first 'k' elements from sorted list"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Extract first k elements and sum it up\n    partial = sum([x for x in arr[:k] if x < 100])\n\n    # Find remaining elements with at most two digits\n    others = [x for x in arr[k:] if x < 100]\n    \n    # If there is any such element, add to sum\n    if others:\n        partial += min(others)\n        \n    return partial"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    # Compute the intersection of the two intervals.\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:  # If there is no intersection\n        return \"NO\"\n    \n    length = end - start + 1  # Compute the length of intersection.\n\n    if length <= 1:  # If length is less than or equal to 1, it's not a prime number.\n        return \"NO\"\n\n    # Check if length is a prime number.\n    for i in range(2, int(length**0.5)+1):  \n        if length % i == 0:\n            return \"NO\"\n            \n    return \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + (i / 2))\n        else:\n            seq.append(seq[-1] + seq[-2] + seq[i+1]) # here, need to ensure the indexing is correct, i+1 may be out of bounds\n    return seq\n  \n# Test Cases\nprint(tri(3)) # Output: [1, 3, 2, 8]"}
{"task_id": "python/58", "language": "python", "completion": "prod = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            prod *= digit\n            has_odd = True\n        n //= 10\n    return prod if has_odd else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "python/60", "language": "python", "completion": "sum_squares = 0\n    for num in lst:\n        ceiling_num = math.ceil(abs(num))\n        if num < 0:\n            ceiling_num = -ceiling_num\n        squared = ceiling_num ** 2\n        sum_squares += squared\n    return sum_squares"}
{"task_id": "python/61", "language": "python", "completion": "# Check if string is empty and return False if so\n    if len(txt) == 0:\n        return False\n\n    # Get the last character of the string\n    last_char = txt[-1]\n\n    # If the last character is a letter but not part of a word, it should be separated by space from the rest of the string\n    # We check this by splitting the string into words using the split() function and checking if the last word \n    # in the resulting list is a single character that is a letter. If so, we return True; otherwise we return False.\n    \n    last_word = txt.split()[-1]\n    \n    return len(last_word) == 1 and last_word.isalpha()"}
{"task_id": "python/62", "language": "python", "completion": "for i in range(len(arr) - 1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "python/64", "language": "python", "completion": "result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n == 1 or (n % 2 == 0 and n > 2): \n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "python/66", "language": "python", "completion": "def gcd(a, b):\n    \"\"\"Calculate the Greatest Common Divisor of a and b.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the least common multiple of denominators\n    lcm_den = abs(x_den*n_den) // gcd(x_den, n_den) if x_den and n_den else 0\n\n    # Calculate product of numerators\n    prod_num = x_num * n_num\n    \n    return prod_num % lcm_den == 0"}
{"task_id": "python/67", "language": "python", "completion": "return sorted(nums, key=lambda x: (sum(int(n) for n in str(abs(x))), nums.index(x)))"}
{"task_id": "python/68", "language": "python", "completion": "def is_odd_digits(n):\n        return str(abs(n))[0] in '13579' and str(abs(n))[-1] in '13579'\n\n    result = [num for num in nums if num > 10 and is_odd_digits(num)]\n    return len(result)"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nprint(get_max_triples(5)) # Output: 1"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planet_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n                    \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n        \n    planet1_index = planet_order.index(planet1)\n    planet2_index = planet_order.index(planet2)\n\n    if planet1_index < planet2_index:\n        return tuple(planet_order[planet1_index+1:planet2_index])\n    else:\n        return tuple(planet_order[planet2_index+1:planet1_index])"}
{"task_id": "python/71", "language": "python", "completion": "def check_prime(n):\n        if n < 2:\n            return False\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    if check_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "total = 0\n    \n    for num in lst:\n        if num > 0 and isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n            \n    return total"}
{"task_id": "python/73", "language": "python", "completion": "def get_extension_strength(ext):\n        uppercase = sum(1 for c in ext if c.isupper())\n        lowercase = sum(1 for c in ext if c.islower())\n        return uppercase - lowercase\n    \n    strongest_ext = max(extensions, key=get_extension_strength)\n    return f'{class_name}.{strongest_ext}'"}
{"task_id": "python/74", "language": "python", "completion": "# Checking if length of b is greater than a, return False in that case\n    if len(b) > len(a): \n        return False\n        \n    # Generating all rotations of word 'b'\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Checking each rotation to see if it is a substring in word 'a'\n    for r in rotations:\n        if r in a:\n            return True\n    \n    # If none of the rotations found in 'a', returning False.\n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\") == False)\nprint(cycpattern_check(\"hello\",\"ell\") == True)\nprint(cycpattern_check(\"whassup\",\"psus\") == False)\nprint(cycpattern_check(\"abab\",\"baa\") == True)\nprint(cycpattern_check(\"efef\",\"eeff\") == False)\nprint(cycpattern_check(\"himenss\",\"simen\") == True)"}
{"task_id": "python/75", "language": "python", "completion": "if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000.\")\n\n    mapping = [\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ]\n\n    result = \"\"\n    for value, roman_numeral in mapping:\n        while number >= value:\n            result += roman_numeral\n            number -= value\n    return result"}
{"task_id": "python/76", "language": "python", "completion": "sides = sorted([a, b, c])\n    \n    # If the longest side (sides[2]) is the square root of the sum of squares of other two sides return True.\n    # In a right angle triangle, the square of the longest side will be equal to the sum of squares of other two sides.\n    return sides[2] == ((sides[0]**2) + (sides[1]**2))**0.5"}
{"task_id": "python/77", "language": "python", "completion": "result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            result += char.lower() if char.isupper() else char.upper()\n            has_letter = True\n        else:\n            result += char\n    return result[::-1] if not has_letter else result"}
{"task_id": "python/78", "language": "python", "completion": "if text == '':\n        return None\n    else:\n        import hashlib\n        md5_hash = hashlib.md5()   # Create a new md5 hash object \n        md5_hash.update(text)      # Update the md5 hash with the string\n        return md5_hash.hexdigest()  # Return the hexadecimal representation of the hash\nstring_to_md5('Hello world')"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    if a > b:\n        return sorted([i for i in range(b, a+1) if str(i).strip('0') == '' or int(str(i).strip('0')) % 2 == 0])\n    else:\n        return sorted([i for i in range(a, b+1) if str(i).strip('0') == '' or int(str(i).strip('0')) % 2 == 0])"}

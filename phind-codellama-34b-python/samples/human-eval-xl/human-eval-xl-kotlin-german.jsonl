{"task_id": "kotlin/0", "language": "kotlin", "completion": "var balance = 0\n    for (operation in operations) {\n        if (operation is Int) {\n            balance += operation\n            if (balance < 0) {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "val numbersAsIntegers = numbers.mapNotNull { it as? Int }\n    if (numbersAsIntegers.isEmpty()) return listOf(0, 1)\n    \n    var sum = 0\n    var product = 1\n    for (number in numbersAsIntegers) {\n        sum += number\n        product *= number\n    }\n    return listOf(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "val maxLength = Math.max(a.length, b.length)\n    var result = StringBuilder()\n    \n    for (i in 0 until maxLength) {\n        val x = if (i < a.length) a[i] - '0' else 0 // 1 if true, 0 otherwise\n        val y = if (i < b.length) b[i] - '0' else 0 // 1 if true, 0 otherwise\n        \n        result.append((x xor y).toInt().toString())\n    }\n    \n    return result.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "if (strings.isEmpty()) return null\n    var longestString = \"\"\n    strings.forEach{\n        if (it is String) {\n            if (it.length > longestString.length) longestString = it\n        } else {\n            throw IllegalArgumentException(\"List contains non-string elements\")\n        }\n    }\n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "var a = a\n    var b = b\n    while (b != 0){\n        val temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "val nums = numbers.split(\" \")\n    return when {\n        \"null\" in nums -> {\n            nums.sorted().joinToString(\" \")\n        }\n        else -> throw IllegalArgumentException(\"Invalid number string\")\n    }\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "val min = numbers.min() ?: return emptyList()\n    val max = numbers.max() ?: return emptyList()\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "val chars = string.map { \n        when {\n            it.isLowerCase() -> it.uppercase()\n            else -> it.lowercase()\n        }\n     }\n     return chars.joinToString(\"\")\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "return l.filter { it is Int && it > 0 }\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "if (n <= 1) { return false } // Einen und Zahlen unter 2 sind keine Primzahlen\n    if (n == 2) { return true } // Die Zahl 2 ist eine Primzahl\n    if (n % 2 == 0) { return false } // Alle Even-Zahlen au\u00dfer 2 sind keine Primzahlen\n    \n    var i = 3\n    while(i*i <= n){\n        if(n % i == 0) return false // Wenn die Nummer durch einen beliebigen Faktor ohne Rest dividiert werden kann, ist sie nicht prim.\n        i += 2\n    }\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "return l.distinct().sorted()\n}\n\nfun main(){\n    println(unique(listOf(5, 3, 5, 2, 3, 3, 9, 0, 123)))\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "var fib = 2 // starting with second Fibonacci number\n    var count = 0\n    while (true) {\n        if (isPrime(fib)) {\n            count++\n        }\n        if (count == n) {\n            return fib\n        }\n        val temp = fib\n        fib += temp // calculate next Fibonacci number\n    }\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) {\n        return false\n    }\n    if (n == 2) {\n        return true\n    }\n    if (n % 2 == 0) {\n        return false\n    }\n\n    var i = 3\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return false\n        }\n        i += 2\n    }\n\n    return true\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "val list = l.sorted()\n    for (i in 0 until list.size - 2) {\n        if (i > 0 && list[i] == list[i-1]) continue\n        var j = i+1\n        var k = list.size-1\n        while(j < k){\n            val sum = list[i] + list[j] + list[k]\n            if(sum == 0) return true\n            if(sum > 0) k -= 1\n            else j += 1\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "val numbers = l.distinct()\n    for (i in numbers) {\n        if (-i in numbers) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "val arr = IntArray(n+1){0} // Initialisieren des Arrays mit Gr\u00f6\u00dfe n + 1\n    if(n>3){\n        arr[2] = 2\n        for(i in 3..n){\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + (if(i>=4) arr[i-4] else 0)\n        }\n    }\n    return arr[n]\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    var median: Any\n    val size = sortedList.size\n    \n    if (size % 2 == 0) // even number of elements\n        median = (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.toDouble()\n    else\n        median = sortedList[size / 2]\n    \n    return median\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "val length = text.length\n    \n    for (i in 0..length / 2 - 1){\n        if (text[i] != text[length - i - 1]){\n            return false\n        }\n    }\n    \n    return true\n}\n\nfun main(){\n    println(isPalindrome(\"\")) //True\n    println(isPalindrome(\"aba\")) //True\n    println(isPalindrome(\"aaaaa\")) //True\n    println(isPalindrome(\"zbcd\")) //False\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "return text.replace(\"a\", \"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"u\",\"\")\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "for (i in l){\n        if (i > t){\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "val chars0 = mutableSetOf<Char>()\n    for (c in s0) {\n        chars0.add(c)\n    }\n    val chars1 = mutableSetOf<Char>()\n    for (c in s1) {\n        chars1.add(c)\n    }\n    return chars0 == chars1\n}\n\nfun main() {\n    println(sameChars('eabcdzzzz', 'dddzzzzzzzdddabc')) // True\n    println(sameChars('abcd', 'dddddddabc')) // True\n    println(sameChars('dddddddabc', 'abcd')) // True\n    println(sameChars('eabcd', 'dddddddabc')) // False\n    println(sameChars('abcd', 'dddddddabce')) // False\n    println(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')) // False\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "if (n <= 1) return n\n    var a = 0\n    var b = 1\n    for (i in 2..n){\n        val temp = a + b\n        a = b\n        b = temp\n    }\n    return b\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "val s1 = l1.toSet() // Convert list to set for uniqueness and faster lookup\n    val s2 = l2.filter { it is Int }.toSet() // Filter non-integer elements and convert list to set \n    return (s1 intersect s2).toList() // Use the intersect operation from Set class to get common elements\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "var num = n\n    var divisor = 2\n    while (num > 1){\n        if (num % divisor == 0){\n            num /= divisor\n            while (num % divisor == 0){\n                num /= divisor\n            }\n        }\n        divisor += 1\n    }\n    return divisor - 1\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}\n\nfun main() {\n    println(\">>> sum_to_n(30)\")\n    println(sumToN(30))\n    println(\">>> sum_to_n(100)\")\n    println(sumToN(100))\n    println(\">>> sum_to_n(5)\")\n    println(sumToN(5))\n    println(\">>> sum_to_n(10)\")\n    println(sumToN(10))\n    println(\">>> sum_to_n(1)\")\n    println(sumToN(1))\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    for (i in 1..xs.size - 1) {\n        result += xs[i]*i\n    }\n    return result\n}\n\n/**\n * Test Cases\n */\nfun main() {\n    println(derivative([3, 1, 2, 4, 5])) // [1, 4, 12, 20]\n    println(derivative([1, 2, 3])) // [2, 6]\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "var a = 0\n    var b = 0\n    var c = 1\n    when (n){\n        0 -> return 0\n        1 -> return 0\n        2 -> return 1\n        else -> {\n            for (i in 3..n) {\n                val temp = a + b + c\n                a = b\n                b = c\n                c = temp\n            }\n        }\n    }\n    return c\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "var count = 0\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    \n    for (char in s.toLowerCase()) {\n        if (char in vowels) {\n            count++\n        }\n    }\n    return count\n}\n\nfun main() {\n    println(vowelsCount(\"abcde\")) // Outputs 2\n    println(vowelsCount(\"ACEDY\")) // Outputs 3\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "val freq = lst.groupBy { it } .mapValues { it.value.size } // frequency of each number in list\n    var maxFreq = -1\n    for (i in 0 until lst.size) {\n        if(freq[lst[i]] ?: 0 >= lst[i] && lst[i] > maxFreq){ \n            maxFreq = lst[i] // only update when frequency is more or equals to number value and the number itself is greater than current maximum frequency\n        }\n    }\n    return maxFreq\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "// Validate if a, b and c form a valid triangle\n    val sides = listOf(a,b,c).sorted()\n    if (sides[0] + sides[1] <= sides[2]) return -1\n\n    // Calculate semi-perimeter\n    val s = (a + b + c) / 2.0\n\n    // Apply Heron's formula to calculate area\n    val area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    return String.format(\"%.2f\", area)\n}\n\nfun main() {\n    println(\"Area of triangle is: \" + triangle_area(3, 4, 5))\n    println(\"Area of triangle is: \" + triangle_area(1, 2, 10))\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "val sum = q.sum()\n    return q == q.reversed() && sum <= w\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "if (a > 100) return false // a must be less than 100\n    var primeFactors = mutableListOf<Int>()\n    for (i in 2..a/2) {\n        while (a % i == 0) {\n            primeFactors.add(i)\n            a /= i\n        }\n    }\n    return primeFactors.size == 3 // If it is the product of exactly three primes, return true\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "return \"db\"+Integer.toBinaryString(decimal)+\"db\"\n}\n\n// Test the function\nprintln(decimalToBinary(15))   # returns \"db1111db\"\nprintln(decimalToBinary(32))   # returns \"db100000db\""}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "if (s.length < 3) return false // Length must be at least 3 for string to be happy\n    \n    // Loop over the string with a sliding window of size 3\n    for (i in 0 until s.length - 2) {\n        val substring = s.substring(i, i + 3)\n        \n        if (substring[0] == substring[1] || substring[1] == substring[2] || substring[0] == substring[2]) {\n            return false // A repeated character was found in the substring\n        }\n    }\n    \n    return true // All substrings were happy\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "val result = mutableListOf<String>()\n    grades.forEach{ grade -> \n        when (grade){\n            is Double -> {\n                if(grade == 4.0) result.add(\"A+\")\n                else if (grade > 3.7) result.add(\"A\")\n                else if (grade > 3.3) result.add(\"A-\")\n                else if (grade > 3.0) result.add(\"B+\")\n                else if (grade > 2.7) result.add(\"B\")\n                else if (grade > 2.3) result.add(\"B-\")\n                else if (grade > 2.0) result.add(\"C+\")\n                else if (grade > 1.7) result.add(\"C\")\n                else if (grade > 1.3) result.add(\"C-\")\n                else if (grade > 1.0) result.add(\"D+\")\n                else if (grade > 0.7) result.add(\"D\")\n                else if (grade > 0.0) result.add(\"D-\")\n                else result.add(\"E\")\n            }\n            else -> {\n                println(\"Invalid input, only Double values allowed.\")\n                return@forEach\n            }\n        }\n    }\n    return result\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "val length = string.length\n    if (length <= 1) return false\n    for (i in 2..length / 2) {\n        if (length % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "var n = n\n    var sum = 0\n    while (n > 0) {\n        val digit = n % 10\n        sum += digit\n        n /= 10\n    }\n    \n    return Integer.toBinaryString(sum)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "val res = mutableListOf<Pair<Int, Int>>()\n    \n    for ((i, line) in lst.withIndex()) {\n        if (line is List<*>) {\n            for ((j, el) in line.withIndex()) {\n                if (el == x) {\n                    res.add(Pair(i, j))\n                }\n            }\n        } else {\n            throw IllegalArgumentException(\"The element at index $i is not a list.\")\n        }\n    }\n    \n    return res\n        .sortedBy{ it.first } // sort by row (0th item in pair)\n        .sortedByDescending{ it.second } // sort by column (1st item in pair) within each row\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "if (lst.isEmpty()) return null\n    val intList = lst.filterIsInstance<Int>()\n    if (intList.size < 2) return null\n    return intList.sorted().takeLast(2)[0]\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "val sentences = s.split('.', '?', '!') // Teilt den String in S\u00e4tze\n    var boringCount = 0 // Variable f\u00fcr die Anzahl der Langeweilen\n\n    for (sentence in sentences){\n        if(sentence.startsWith(\"Ich\")){\n            boringCount += 1\n        }\n    }\n    return boringCount\n}\n\nfun main(){\n    println(isBored(\"Hello world\")) // 0\n    println(isBored(\"The sky is blue. The sun is shining. I love this weather\")) // 1\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "var maxPrime = -1\n    for (num in lst) {\n        if (isPrime(num)) {\n            maxPrime = Math.max(maxPrime, num)\n        }\n    }\n    if (maxPrime == -1) return 0\n    var sumOfDigits = 0\n    while (maxPrime > 0) {\n        val digit = maxPrime % 10\n        sumOfDigits += digit\n        maxPrime /= 10\n    }\n    return sumOfDigits\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) {\n        return false\n    }\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "// Check if dict is empty and return false if so\n    if (dict.isEmpty()) return false\n\n    var allLower = true\n    var allUpper = true\n\n    for (key in dict.keys) {\n        if (key is String) {\n            if (key != key.toLowerCase()) allLower = false\n            if (key != key.toUpperCase()) allUpper = false\n        } else {\n            return false\n        }\n    }\n    // Return true only if all keys are either lower case or upper case, otherwise return false\n    return allLower || allUpper\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "val num = value.toDouble()\n    \n    // Check if the number is equidistant from two integers\n    var intPart = 0.0\n    if (num >= 0 && num - Math.floor(num) == 0.5) {\n        intPart = Math.ceil(num)\n    } else if (num < 0 && num - Math.floor(num) == -0.5){\n        intPart = Math.floor(num)\n    } else {\n        // Rounding to the nearest integer\n        intPart = Math.round(num).toDouble()\n    }\n    \n    return intPart.toInt()\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "val pile = mutableListOf<Int>()\n    var currentNumber = n\n    \n    for (i in 0 until n) {\n        if(i % 2 == 0) {\n            // We are on an even index, the number should be even.\n            while(currentNumber % 2 != 0) {\n                currentNumber += 1\n            }\n        } else {\n            // We are on an odd index, the number should be odd.\n            while(currentNumber % 2 == 0) {\n                currentNumber += 1\n            }\n        }\n        \n        pile.add(currentNumber)\n    }\n    \n    return pile\n}\n\nfun main() {\n    println(makeAPile(3)) // [3, 5, 7]\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "return s.split(\",| \".toRegex()).filterNot(String::isEmpty).map{it.trim()}\n}\n\n/**\n * Testing the function with given examples:\n */\nprintln(words_string(\"Hi, my name is John\")) // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprintln(words_string(\"One, two, three, four, five, six\")) // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "// Die gr\u00f6\u00dfte gerade Zahl im Bereich [x,y] ist einfach die gr\u00f6\u00dfte Zahl in diesem Bereich abz\u00fcglich 1.\n    val maxEvenNum = if (y > x) y else x\n    \n    // \u00dcberpr\u00fcfen ob diese Zahl gerade ist. Wenn ja, zur\u00fcckgeben sonst -1.\n    return if (maxEvenNum % 2 == 0) maxEvenNum else -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "if (n > m) return -1\n    \n    val sum = (n..m).sum()\n    val avg = sum.toFloat() / (m - n + 1)\n    val roundedAvg = Math.round(avg)\n    \n    // Convert to binary and return as string\n    return \"0b${roundedAvg.toString(2)}\"\n}\n\n// Testing the function with given examples:\nprintln(\"Testing the function with the provided examples...\")\nassert(roundedAvg(1, 5) == \"0b11\")\nassert(roundedAvg(7, 5) == -1)\nassert(roundedAvg(10, 20) == \"0b1111\")\nassert(roundedAvg(20, 33) == \"0b11010\")"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "return (1..n).mapIndexed{i, _ -> if(i % 2 == 0) i else (1..i).sum()}\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "var evenCount = 0\n    var oddCount = 0\n\n    for (i in 1..n) {\n        val isPalindrome = i.toString().reversed() == i.toString()\n\n        if(isPalindrome) {\n            if(i % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}\n\nfun main() {\n    println(evenOddPalindrome(3)) // [1, 2]\n    println(evenOddPalindrome(12)) // [4, 6]\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "if (arr.isEmpty()) return true;\n    var max = arr[0];\n    for (i in 1 until arr.size) {\n        if (arr[i] <= max) {\n            max = arr[i];\n        } else {\n            break;\n        }\n    }\n    if (i == arr.size - 1 && arr[0] >= arr[i]) return true;\n    if (i == arr.size - 2 && (arr[0] < arr[i + 1] || arr[i] <= arr[0])) return true;\n    return false;\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "val oddInLst1 = lst1.filter { it % 2 != 0 } // get the odd numbers in lst1\n    if (oddInLst1.isEmpty()) return \"YES\" // no need to exchange if there is no odd number in lst1\n    \n    val evenInLst2 = lst2.filter { it % 2 == 0 } // get the even numbers in lst2\n    if(evenInLst2.size < oddInLst1.size) return \"NO\" // not enough even numbers to exchange\n    \n    return \"YES\" // it's possible to make all numbers in lst1 even by exchanging\n}\n\nfun main() {\n    println(exchange(listOf(1, 2, 3, 4), listOf(1, 2, 3, 4))) // expected: \"YES\"\n    println(exchange(listOf(1, 2, 3, 4), listOf(1, 5, 3, 4))) // expected: \"NO\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "// L\u00f6sche alle Zeichen in s, die einem Zeichen in c entsprechen.\n    val newStr = s.filter { it !in c }.joinToString(\"\")\n\n    // \u00dcberpr\u00fcfe ob die resultierende Zeichenkette ein Palindrom ist.\n    var isPalindrome = false\n    if (newStr == newStr.reversed()) {\n        isPalindrome = true\n    }\n\n    return listOf(newStr, isPalindrome)\n}\n\n// Test Cases \nprintln(reverseDelete(\"abcde\", \"ae\")) // Expected Output: ['bcd', False]\nprintln(reverseDelete(\"abcdef\", \"b\")) // Expected Output: ['acdef', False]\nprintln(reverseDelete(\"abcdedcba\", \"ab\")) // Expected Output: ['cdedc', True]"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "var result = 0\n    for (i in grid.indices) {\n        for (j in grid[i].indices) {\n            if (grid[i][j] == 1) {\n                result += capacity\n            }\n        }\n    }\n    return result\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "val words = s.split(' ') // Split the string into words\n    return words.filter{ it.count { char -> char in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' } == n }\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "// Verwenden Sie die in-built sort Funktion in Kotlin, um das Array zu sortieren und dann die letzten k Elemente zur\u00fcckzugeben.\n    if (k <= 0 || arr.isEmpty()) return emptyList()\n    if (k >= arr.size) return arr.sortedDescending().toMutableList()\n    return arr.sortedDescending().take(k).toMutableList()\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "var sum = 0\n    for (i in 0 until Math.min(k, arr.size)) {\n        if ((arr[i] / 10) < 10) sum += arr[i]\n    }\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "val maxStart = Math.max(interval1[0], interval2[0])\n    val minEnd   = Math.min(interval1[1], interval2[1])\n\n    if (maxStart > minEnd) return \"NO\"\n    \n    var intersectionLength = minEnd - maxStart + 1\n\n    if(isPrime(intersectionLength)) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..n/2) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    var a = 0; var b = 3; var c = 1\n    for (i in 1..n+1) {\n        if (i % 2 == 0) {\n            result.add(a + b + c)\n            val temp = b\n            b = c\n            c = temp + i\n            a = temp\n        } else {\n            result.add(1 + i / 2)\n            a = b; b = c; c = 1 + (i - 1) / 2\n        }\n    }\n    return result\n}\n\nfun main() {\n    print(tri(3)) // Output: [1, 3, 2, 8]\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "var product = 1\n    var hasOddDigit = false\n    \n    for (char in n.toString()) {\n        val digit = char.digitToInt()\n        \n        if (digit % 2 != 0) {\n            product *= digit\n            hasOddDigit = true\n        }\n    }\n    \n    return if(hasOddDigit) product else 0\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "var stack = Stack<Char>()\n    \n    for (c in string){\n        when(c){\n            '[' -> stack.push(c)\n            ']' -> if (stack.isEmpty()) return false else stack.pop()\n        }\n    }\n    // If there are any left overs, this isn't a valid sequence of brackets\n    return stack.isEmpty()\n}\n\nclass Stack<T> {\n    private val elements = mutableListOf<T>()\n\n    fun push(item: T) {\n        elements.add(0, item)\n    }\n\n    fun pop(): T? = if (elements.isNotEmpty()) elements.removeAt(0) else null\n\n    fun peek(): T? = elements.firstOrNull()\n\n    fun isEmpty(): Boolean = elements.isEmpty()\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "var result = 0\n    for (i in lst) {\n        if (i is Number) {\n            val ceilingValue = Math.ceil(i.toDouble()).toInt()\n            result += ceilingValue * ceilingValue\n        } else {\n            throw IllegalArgumentException(\"List contains non-number element\")\n        }\n    }\n    return result\n}\n\nfun main() {\n    println(sumSquares(listOf(1.4, 4.2, 0))) // should print 29\n    println(sumSquares(listOf(1, 3, 5, 7))) // should print 84\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "if (txt.isEmpty()){\n        return false\n    }\n    val trimmedTxt = txt.trimEnd() // Trim whitespace from end of the string\n    var lastCharacter = trimmedTxt[trimmedTxt.lastIndex] \n    return lastCharacter.isLetterOrDigit() && !txt.contains(\"$lastCharacter \")\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "for (i in arr.indices) {\n        if (i == 0 || i == arr.size - 1) continue\n        if (arr[i] < arr[i - 1]) {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "var maxNegative: Int? = null\n    var minPositive: Int? = null\n\n    for (item in lst) {\n        if (item is Int) {\n            if (item < 0 && (maxNegative == null || item > maxNegative)) {\n                maxNegative = item\n            } else if (item > 0 && (minPositive == null || item < minPositive)) {\n                minPositive = item\n            }\n        }\n    }\n\n    return listOf(maxNegative, minPositive)\n}\n\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // Output: [null, 1]\n    println(largestSmallestIntegers(emptyList<Any>())) // Output: [null, null]\n    println(largestSmallestIntegers(listOf(0))) // Output: [null, null]\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "var result = 1\n    for (i in n downTo 1) {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    if (n == 0 || n == 1) return 1\n    else return n * factorial(n - 1)\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "val primeLengthWords = mutableListOf<String>()\n    val words = sentence.split(\" \")\n    \n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..n/2) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n    \n    words.forEach { word ->\n        if(isPrime(word.length)) primeLengthWords.add(word)\n    }\n    \n    return primeLengthWords.joinToString(\" \")\n}\n\nfun main(){\n    println(wordsInSentence(\"This is a test\")) // Output: \"is\"\n    println(wordsInSentence(\"lets go for swimming\")) // Output: \"go for\"\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "val xParts = x.split(\"/\").map{it.toInt()}\n    val nParts = n.split(\"/\").map{it.toInt()}\n    \n    val xZaehler = xParts[0]\n    val xNenner = xParts[1]\n    val nZaehler = nParts[0]\n    val nNenner = nParts[1]\n    \n    val neuerZaehler = xZaehler * nZaehler\n    val neuerNenner = xNenner * nNenner\n    \n    return (neuerZaehler % neuerNenner) == 0\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "if(nums.isEmpty()) return nums;\n    \n    return nums.sortedWith(compareBy<Any>({ sumOfDigits(it as Int) } ).thenBy{nums.indexOf(it)});\n}\n\nprivate fun sumOfDigits(n: Int): Int {\n    val isNegative = n < 0;\n    var num = if (isNegative) -1 * n else n; // Make it positive for easy calculation of digits\n    var sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return if(isNegative) -sum else sum; // Revert back to negative if it was initially negative.\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "return nums.count{ \n        it is Int && abs(it) > 10 && ((abs(it).toString().first().toInt() % 2 == 1) && (abs(it).toString().last().toInt() % 2 == 1))\n    }\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "val a = Array<Int>(n){0} //Initialize array of size n with zeros\n    for(i in 1..n){\n        a[i-1] = i*i - i + 1 //Fill the array according to the condition\n    }\n    var count = 0\n    for(i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) count++ //Increment the count only if the sum is multiple of 3\n            }\n        }\n    }\n    return count //Return the count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return if(planet1 in planets && planet2 in planets) {\n        planets.filter { it != planet1 && it != planet2 }\n            .filter { planets.indexOf(it) > planets.indexOf(planet1) && planets.indexOf(it) < planets.indexOf(planet2) }\n    } else {\n        listOf()\n    }\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "if (isPrime(n)) {\n        return x\n    } else {\n        return y\n    }\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..n/2) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "var sum = 0\n    for (i in lst) {\n        if(i is Int && i > 0 && i % 2 != 0){\n            sum += Math.pow(i.toDouble(), 2).toInt()\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "var maxStrength = -Double.MAX_VALUE\n    var strongestExtensionName = \"\"\n    \n    for (extension in extensions) {\n        val capitalLettersCount = extension.count { it.isUpperCase() }\n        val smallLettersCount = extension.length - capitalLettersCount\n        \n        val strength = capitalLettersCount - smallLettersCount.toDouble()\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtensionName = extension\n        }\n    }\n    \n    return \"$className.$strongestExtensionName\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "if (b.isEmpty()) return true\n    for (i in 0 until b.length){\n        if (a.contains(b.substring(i until minOf(b.length, i+b.length)))){\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "var result = \"\"\n    val romanDigits = arrayOf('i','v','x','l','c','d','m')\n    var i = 0\n    while (number > 0) {\n        val value = when(number){\n            in 1..9 -> 1\n            in 10..39 -> 10\n            in 40..79 -> 50\n            in 80..159 -> 100\n            else -> 500\n        }\n        number -= value\n        result += StringBuilder().append(romanDigits[i]).toString()\n        if (value > 5 && number <= (value - 10)) {\n            number += value - 10\n            result = result.dropLast(2).plus(\"$romanDigits[i + 1]\")\n        } else if (value == 500 && number >= 800) {\n            number -= 800\n            result += StringBuilder().append(romanDigits[i+1]).toString()\n        }\n        i++\n    }\n    return result.toLowerCase()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "var result = \"\"\n    for (i in s.indices){\n        val c = s[i]\n        if (Character.isLetter(c)) {\n            result += if (Character.isLowerCase(c)) Character.toUpperCase(c) else Character.toLowerCase(c)\n        } else {\n            result += c\n        }\n    }\n    return if (!result.any{it.isLetter()}) result.reversed() else result\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "if (text.isEmpty()) return null;\n    val md = MessageDigest.getInstance(\"MD5\")\n    md.update(text.toByteArray())\n    val bytes =  md.digest()\n    val result = StringBuilder(bytes.size*2)\n\n    for (b in bytes) {\n        result.append(String.format(\"%02x\", b))\n    }\n    return result.toString().toLowerCase();\n}\n\nfun main() {\n    println(\"string_to_md5('Hello world') = '${stringToMd5(\"Hello world\")}'\")\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "var start = Math.min(a,b)\n    var end = Math.max(a,b)\n    var result = mutableListOf<Int>()\n    \n    for (i in start..end){\n        if(i % 2 == 0){\n            result.add(i)\n        }\n    }\n    return result.sorted()\n}"}

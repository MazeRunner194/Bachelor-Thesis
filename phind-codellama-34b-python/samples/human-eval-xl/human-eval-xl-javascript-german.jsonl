{"task_id": "javascript/0", "language": "javascript", "completion": "let balance = 0;\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) return true;\n    }\n    return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "let sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n    let product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);\n    return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "if (strings.length === 0) {\n        return null;\n    } else {\n        let maxLength = -1;\n        let maxString = '';\n        \n        for(let i=0;i<strings.length;i++){\n            if(strings[i].length > maxLength){\n                maxLength = strings[i].length;\n                maxString = strings[i];\n            }\n        }\n        return maxString;\n    }\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "if (b == 0) return a;\n    return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "const dictionary = {\n    null: \"0\",\n    eins: \"1\",\n    zwei: \"2\",\n    drei: \"3\",\n    vier: \"4\",\n    f\u00fcnf: \"5\",\n    sechs: \"6\",\n    sieben: \"7\",\n    acht: \"8\",\n    neun: \"9\"\n  };\n\n  return numbers.split(' ').sort().map(word => dictionary[word]).join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map((num) => (num - min) / range);\n}\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toLowerCase()) {\n            // ist ein Kleinbuchstabe, also um in Gro\u00dfbuchstaben zu tun\n            result += string[i].toUpperCase();\n        } else {\n            // ist ein Gro\u00dfbuchstabe, also um in Kleinbuchstaben zu tun\n            result += string[i].toLowerCase();\n        }\n    }\n    return result;\n}\nconsole.log(flipCase('Hello'));  // outputs: 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "return l.filter(num => num > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "if (n <= 1 || (n % 2 === 0 && n > 2)) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconsole.log(isPrime(6)); // False\nconsole.log(isPrime(101)); // True\nconsole.log(isPrime(11)); // True\nconsole.log(isPrime(13441)); // True\nconsole.log(isPrime(61)); // True\nconsole.log(isPrime(4)); // False\nconsole.log(isPrime(1)); // False"}
{"task_id": "javascript/10", "language": "javascript", "completion": "let result = [];\n    for (let item of l) {\n        if (!result.includes(item)) {\n            result.push(item);\n        }\n    }\n    return result;\n}\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));"}
{"task_id": "javascript/11", "language": "javascript", "completion": "let fib = [0, 1];\n    let i = 2;\n\n    while (true) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n        if (isPrime(fib[i])) {\n            n--;\n            if (n === 0) {\n                return fib[i];\n            }\n        }\n        i++;\n    }\n}\n\nfunction isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "let n = l.length;\n    if (n < 3) return false;\n\n    l.sort((a, b) => a - b);\n\n    for (let i = 0; i <= n - 3; i++) {\n        // If the first number itself is 0 then it means we have found three elements that sum to 0\n        if(l[i] === 0){\n            return true;\n        }\n\n        let j = i + 1, k = n - 1;\n        while (j < k) {\n            let sum = l[i] + l[j] + l[k];\n            if (sum > 0) {\n                k--; // reduce the high end of the range\n            } else if (sum < 0) {\n                j++; // increase the low end of the range\n            } else {\n                return true; // found a triple that sum to zero\n            }\n        }\n    }\n\n    return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "let dictionary = {};\n\n    for (let num of l) {\n        if (dictionary[num] === undefined) {\n            dictionary[num] = 1;\n        } else {\n            dictionary[num]++;\n        }\n    }\n\n    for (let num in dictionary) {\n        if (dictionary.hasOwnProperty(num)) {\n            let complement = (-parseInt(num));\n            if (dictionary[complement] !== undefined) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // False\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "if (n < 2) return n;\n\n    let result = [0, 0, 2];\n    \n    for (let i = 3; i <= n; ++i) {\n        result[i] = result[i-1] + result[i-2] + result[i-3];\n    }\n\n    return result[n];\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "l.sort((a, b) => a - b);\n    let len = l.length;\n    if (len % 2 === 0) { // even number of elements\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else { // odd number of elements\n        return l[(len - 1) / 2];\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "let reversedText = text.split(\"\").reverse().join(\"\");\n  return text === reversedText;\n}\n\nconsole.log(isPalindrome(\"\"));         // True\nconsole.log(isPalindrome(\"aba\"));       // True\nconsole.log(isPalindrome(\"aaaaa\"));     // True\nconsole.log(isPalindrome(\"zbcd\"));      // False"}
{"task_id": "javascript/17", "language": "javascript", "completion": "let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let newText = '';\n    \n    for (let i = 0; i < text.length; i++) {\n        if (!vowels.includes(text[i])) {\n            newText += text[i];\n        }\n    }\n    \n    return newText;\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "let set0 = new Set([...s0]);\n  let set1 = new Set([...s1]);\n  \n  if (set0.size !== set1.size) {\n    return false;\n  }\n  \n  for(let char of set0) {\n      if (!set1.has(char)) {\n          return false;\n      }\n  }\n  \n  return true;\n}\n\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "if (n === 0) return 0;\n    else if (n === 1) return 1;\n    else return fib(n - 1) + fib(n - 2);\n}\n\nconsole.log(fib(10)); // Output: 55\nconsole.log(fib(1)); // Output: 1\nconsole.log(fib(8)); // Output: 21"}
{"task_id": "javascript/22", "language": "javascript", "completion": "// Konvertiere die Listen in Sets, um Duplikate zu entfernen.\n    var set1 = new Set(l1);\n    var set2 = new Set(l2);\n\n    // Verwende Array.from und Set.filter, um eine sortierte Liste der gemeinsamen Elemente zu erhalten.\n    return Array.from(new Set([...set1].filter(value => set2.has(value))));\n}\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "javascript/23", "language": "javascript", "completion": "var i = 2;\n\n    while (i < n) {\n        if (n % i === 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n\n    return n;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "// Wir beginnen mit einer leeren Liste der Ableitungen.\n    let result = [];\n\n    // F\u00fcr jede Koeffizienten bis auf die erste (wir m\u00fcssen die Ableitung der konstanten Funktion = 0 betrachten)...\n    for(let i=1; i<xs.length; i++) {\n        // ... addieren wir den Produkt von der Koeffizient und der Exponentennummer zum Ergebnis hinzu.\n        result.push(i * xs[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    let a = 0, b = 0, c = 1;\n\n    for(let i=3; i<=n; i++){\n        [a, b, c] = [b, c, a+b+c];\n    }\n    return c;\n}\n\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n      // If the character is a y and it's at the end of the string, also count it as a vowel.\n        if (s[i] === 'y' && i === s.length - 1) {\n          count++;\n        }\n    }\n  \n    return count;\n}\n\nconsole.log(vowelsCount(\"abcde\")); // Output: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Output: 3"}
{"task_id": "javascript/28", "language": "javascript", "completion": "// Generiere ein Objekt, das die H\u00e4ufigkeit jeder Zahl in der Liste speichert.\n    let freq = {};\n    for (let num of lst) {\n        if (!freq[num]) {\n            freq[num] = 0;\n        }\n        freq[num]++;\n    }\n\n    // Suche nach der gr\u00f6\u00dften Zahl, deren H\u00e4ufigkeit gr\u00f6\u00dfer oder gleich ist als die Zahl selbst.\n    let maxNum = -1;\n    for (let num of lst) {\n        if (freq[num] >= num && num > maxNum) {\n            maxNum = num;\n        }\n    }\n\n    // Wenn keine solche Zahl gefunden wurde, gib -1 zur\u00fcck.\n    return maxNum === -1 ? -1 : maxNum;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "// Check if the given sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate semi-perimeter\n    let s = (a + b + c) / 2;\n\n    // Use Heron's formula to calculate area of the triangle\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    return Number(area.toFixed(2));\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "let sum = q.reduce((a, b) => a + b, 0);\n    if (sum > w) return false;\n    let reversedQ = [...q].reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reversedQ[i]) return false;\n    }\n    return true;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "if (a < 2) return false; // keine Primzahl und kein Produkt von Primzahlen\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n        while (a % i == 0 && a > 1) {\n            if (!factors.includes(i)) factors.push(i); // nur Primzahlen speichern\n            a /= i;\n        }\n    }\n    if (a > 1 && !factors.includes(a)) factors.push(a); // Rest als Primzahl speichern, wenn vorhanden\n    return factors.length === 3;\n}\nconsole.log(isMultiplyPrime(30));"}
{"task_id": "javascript/32", "language": "javascript", "completion": "let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\nconsole.log(decimalToBinary(15));  // returns \"db1111db\"\nconsole.log(decimalToBinary(32));  // returns \"db100000db\""}
{"task_id": "javascript/33", "language": "javascript", "completion": "if (s.length < 3) return false;\n\n    for (let i = 0; i < s.length - 2; ++i) {\n        let subString = s.slice(i, i + 3);\n        if (new Set(subString).size !== 3) return false;\n    }\n\n    return true;\n}\n\nconsole.log(isHappy('a')); // False\nconsole.log(isHappy('aa')); // False\nconsole.log(isHappy('abcd')); // True\nconsole.log(isHappy('aabb')); // False\nconsole.log(isHappy('adb')); // True\nconsole.log(isHappy('xyy')); // False"}
{"task_id": "javascript/34", "language": "javascript", "completion": "let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] == 4.0)\n            letterGrades.push('A+');\n        else if (grades[i] > 3.7)\n            letterGrades.push('A');\n        else if (grades[i] > 3.3)\n            letterGrades.push('A-');\n        else if (grades[i] > 3.0)\n            letterGrades.push('B+');\n        else if (grades[i] > 2.7)\n            letterGrades.push('B');\n        else if (grades[i] > 2.3)\n            letterGrades.push('B-');\n        else if (grades[i] > 2.0)\n            letterGrades.push('C+');\n        else if (grades[i] > 1.7)\n            letterGrades.push('C');\n        else if (grades[i] > 1.3)\n            letterGrades.push('C-');\n        else if (grades[i] > 1.0)\n            letterGrades.push('D+');\n        else if (grades[i] > 0.7)\n            letterGrades.push('D');\n        else if (grades[i] > 0.0)\n            letterGrades.push('D-');\n        else\n            letterGrades.push('E');\n    }\n    return letterGrades;\n}\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));"}
{"task_id": "javascript/35", "language": "javascript", "completion": "let len = string.length;\n    if (len < 2) return false; // L\u00e4nge ist nicht gr\u00f6\u00dfer als 1\n    for (let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if (len % i === 0) return false; // L\u00e4nge ist keine Primzahl\n    return true; // L\u00e4nge ist eine Primzahl\n}\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));"}
{"task_id": "javascript/36", "language": "javascript", "completion": "var sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum.toString(2).padStart(4, '0');\n}\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150)); // \"110\"\nconsole.log(solve(147)); // \"1100\""}
{"task_id": "javascript/37", "language": "javascript", "completion": "let res = [];\n    for (let i=0; i<lst.length; i++) {\n        for (let j=0; j<lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                res.push([i, j]);\n            }\n        }\n    }\n    return res.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(getRow([], 1)); // []\n\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // [(2, 2)]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "if (!lst || lst.length < 2) return null;\n    let smallest = Number.POSITIVE_INFINITY;\n    let secondSmallest = Number.POSITIVE_INFINITY;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <= smallest) {\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest == Number.POSITIVE_INFINITY ? null : secondSmallest;\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "var words = s.split(/[.!?]/g); // split the string into sentences using \".\", \"?\" and \"!\" as delimiters\n    var count = 0;\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].trim().startsWith('I')) { // remove leading/trailing whitespaces and check if the sentence starts with 'I'\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "let maxPrimeNum = -1;\n    for (let num of lst) {\n        if (num > 1) {\n            while (num % 2 == 0) {\n                num /= 2;\n            }\n            for (let i = 3; i * i <= num; i += 2) {\n                while (num % i == 0) {\n                    num /= i;\n                }\n            }\n        }\n        if (num > 1) {\n            maxPrimeNum = Math.max(maxPrimeNum, num);\n        } else if (num === 2) {\n            maxPrimeNum = Math.max(maxPrimeNum, num);\n        }\n    }\n    return Array.from(String(maxPrimeNum)).map(Number).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])) // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])) // 7"}
{"task_id": "javascript/41", "language": "javascript", "completion": "if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allLower = true;\n    let allUpper = true;\n\n    for (let key in dict) {\n        if (typeof key !== \"string\") {\n            return false;\n        }\n        \n        if (key !== key.toLowerCase()) {\n            allLower = false;\n        }\n\n        if (key !== key.toUpperCase()) {\n            allUpper = false;\n        }\n    }\n\n    return allLower || allUpper;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "let num = parseFloat(value);\n    if (num >= 0 && num % 1 >= 0.5) {\n        // Round up to nearest integer if number is positive and away from zero\n        return Math.ceil(num);\n    } else if (num < 0 && num % 1 <= 0.5) {\n        // Round down to nearest integer if number is negative and closer to zero\n        return Math.floor(num);\n    } else {\n        // If the number is exactly halfway between two integers, round away from zero\n        return num < 0 ? Math.ceil(num) : Math.floor(num);\n    }\n}\n\nconsole.log(closestInteger(\"10\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-14.5\"));\nconsole.log(closestInteger(\"14.5\"));"}
{"task_id": "javascript/43", "language": "javascript", "completion": "let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (n % 2 == 0) {\n            result.push(n + 2*i - 1);\n        } else {\n            result.push(n + 2*i);\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "// Regex Pattern to find words separated by comma or space.\n    let pattern = /\\w+|\"([^\"]*)\"/g;\n    return s.match(pattern);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "if (y < x) return -1; // Fall y < x: es gibt keine gerade Zahl im Bereich [x, y]\n\n    let maxEven = -1;\n    for (let i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            maxEven = i; // Speichern der aktuell gr\u00f6\u00dften gerade Zahl im Bereich [x, y]\n        }\n    }\n    \n    return maxEven;\n}\n\nconsole.log(chooseNum(12, 15)); // 14\nconsole.log(chooseNum(13, 12)); // -1"}
{"task_id": "javascript/46", "language": "javascript", "completion": "if (n > m) {\n        return -1;\n    }\n    \n    let sum = 0;\n    for (let i=n; i<=m; i++) {\n        sum += i;\n    }\n    \n    let avg = Math.round(sum / (m-n+1));\n\n    return \"0b\" + avg.toString(2);\n}\n\nconsole.log(roundedAvg(1, 5)); // 0b11\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // 0b1111\nconsole.log(roundedAvg(20, 33)); // 0b11010"}
{"task_id": "javascript/47", "language": "javascript", "completion": "let result = [];\n    for(let i=0;i<n;i++){\n        if(i%2==0){\n            let factorial=1;\n            for(let j=1;j<=i+1;j++){\n                factorial*=j;\n            }\n            result.push(factorial);\n        }else{\n            let sum=0;\n            for(let k=1;k<=i+1;k++){\n                sum+=k;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\nconsole.log(f(5));"}
{"task_id": "javascript/48", "language": "javascript", "completion": "let countEven = 0, countOdd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n    return [countEven, countOdd];\n}\n\nfunction isPalindrome(n) {\n    let rev = parseInt(String(n).split(\"\").reverse().join(\"\"));\n    return n === rev;\n}\n\nconsole.log(evenOddPalindrome(3));  // [1, 2]\nconsole.log(evenOddPalindrome(12)); // [4, 6]"}
{"task_id": "javascript/49", "language": "javascript", "completion": "if (!arr.length) return true; // Leeres Array ist immer sortiert\n    let max = Math.max(...arr); // Maximalwert im Array\n    let index = arr.indexOf(max); // Index des Maximalwerts\n    for (let i = 0; i < index; i++) { // Durchsuche das Teilarray bis zum Index des Maximalwerts\n        if (arr[i] > arr[i + 1]) return false; // Wenn Element i gr\u00f6\u00dfer als Element i+1 ist, kann das Array nicht sortiert werden\n    }\n    return true; // Wenn kein Problem gefunden wurde, dann ist die Sortierung durch eine oder mehrere Rechtsschiebeoperationen m\u00f6glich\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "let oddLst1 = lst1.filter(x => x % 2 !== 0);\n    let evenLst2 = lst2.filter(x => x % 2 === 0);\n  \n    if (evenLst2.length >= oddLst1.length) {\n        return 'YES';\n    } else {\n        return 'NO';\n    }\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "let str = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            str += s[i];\n        }\n    }\n\n    let isPalindrome = function(str) {\n        let reversedStr = str.split('').reverse().join('');\n        return str === reversedStr;\n    };\n\n    return [str, isPalindrome(str)];\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // ('bcd', false)\nconsole.log(reverseDelete(\"abcdef\", \"b\")); // ('acdef', false)\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // ('cdedc', true)"}
{"task_id": "javascript/52", "language": "javascript", "completion": "let totalWells = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                totalWells++;\n            }\n        }\n    }\n    return Math.ceil(totalWells / capacity);\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "if (s === '') return [];\n    \n    let words = s.split(' ');\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let selectedWords = [];\n\n    for (let word of words) {\n        let consonantsCount = 0;\n        for (let letter of word.toLowerCase()) {\n            if (!vowels.includes(letter)) consonantsCount++;\n        }\n        \n        if (consonantsCount === n) selectedWords.push(word);\n    }\n    \n    return selectedWords;\n}\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "let result = [];\n    for (let i=0; i<k; i++) {\n        result.push(Math.max(...arr));\n        arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "let sum = 0;\n    for(let i=0; i<k; i++) {\n        if(Math.abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "// Calculate the intersection of the intervals.\n    var start = Math.max(interval1[0], interval2[0]);\n    var end = Math.min(interval1[1], interval2[1]);\n  \n    if (start > end) {\n        // If there is no intersection, return \"NO\".\n        return \"NO\";\n    } else {\n        // Calculate the length of the intersection.\n        var intersectionLength = end - start + 1;\n    \n        // Check if the length is a prime number.\n        for (var i = 2; i <= Math.sqrt(intersectionLength); i++) {\n            if (intersectionLength % i === 0) {\n                return \"NO\";\n            }\n        }\n  \n        if (intersectionLength == 1) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n\nconsole.log(intersection((1, 2), (2, 3))); // Output: NO\nconsole.log(intersection((-1, 1), (0, 4))); // Output: NO\nconsole.log(intersection((-3, -1), (-5, 5))); // Output: YES"}
{"task_id": "javascript/57", "language": "javascript", "completion": "if (n === 0) return 0;\n    else if (n === 1) return 1;\n    else if (n === 2) return 2;\n    else if (n % 2 == 0) return 1 + n / 2;\n    else return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\nfunction generateTri(n) {\n    let result = [];\n    for (let i=0; i<=n; i++) {\n        result.push(tri(i));\n    }\n    return result;\n}\n\nconsole.log(generateTri(3)); // [1, 3, 2, 8]"}
{"task_id": "javascript/58", "language": "javascript", "completion": "let product = 1;\n    const strN = n.toString();\n    for (let i = 0; i < strN.length; i++) {\n        if (strN[i] % 2 !== 0) {\n            product *= parseInt(strN[i]);\n        }\n    }\n    return product;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (!stack.length) return false;\n            stack.pop();\n        }\n    }\n    return !stack.length;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "return lst.map(Math.ceil).reduce((a, b) => a + Math.pow(b, 2), 0);\n}\nconsole.log(sumSquares([1, 2, 3])); // Output: 14\nconsole.log(sumSquares([1, 4, 9])); // Output: 98\nconsole.log(sumSquares([1, 3, 5, 7])); // Output: 84\nconsole.log(sumSquares([1.4, 4.2, 0])); // Output: 29\nconsole.log(sumSquares([-2.4, 1, 1])); // Output: 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "let lastCharacter = txt.slice(-1);\n    if (!/[a-zA-Z]/.test(lastCharacter)) return false;\n    if (txt.endsWith(' ') || txt.endsWith('\\n')) return false;\n    return true;\n}\nconsole.log(checkIfLastCharIsALetter(\"apple pie\"));  // False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\"));  // True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \"));  // False\nconsole.log(checkIfLastCharIsALetter(\"\"));  // False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "let smallestPositive = null;\n    let largestNegative = null;\n  \n    for(let i=0; i<lst.length; i++) {\n        if (typeof lst[i] === 'number') {\n            if(lst[i] > 0) {\n                if(smallestPositive === null || lst[i] < smallestPositive) {\n                    smallestPositive = lst[i];\n                }\n            } else if(lst[i] < 0) {\n                if(largestNegative === null || lst[i] > largestNegative) {\n                    largestNegative = lst[i];\n                }\n            }\n        }\n    }\n  \n    return (largestNegative, smallestPositive);\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "let result = 1;\n    for (let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n\n// Helper function to calculate the factorial of a number\nfunction factorial(n) {\n    let result = 1;\n    for (let i = 2; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "const primeLengthWords = [];\n    // Checking if the length of a word is a prime number or not\n    function isPrime(n) {\n        for (let i = 2; i < n; i++)\n            if (n % i === 0) return false;\n        return n > 1;\n    }\n\n    // Splitting the sentence into words\n    const words = sentence.split(' ');\n\n    // Checking each word's length\n    for (let word of words) {\n        if (isPrime(word.length)) {\n            primeLengthWords.push(word);\n        }\n    }\n\n    return primeLengthWords.join(' ');\n}\n\nconsole.log(wordsInSentence(\"This is a test\")); // Output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "// Zerlege die Zeichenketten an den Schr\u00e4gstrichen und konvertiere die Teilst\u00fccke zu Ganzzahlen.\n    let [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n    let [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n\n    // Berechne das Ergebnis der Multiplikation von x und n.\n    let result = xNumerator * nNumerator / (xDenominator * nDenominator);\n\n    // \u00dcberpr\u00fcfe, ob das Ergebnis eine ganze Zahl ist.\n    return Number.isInteger(result);\n}\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "javascript/67", "language": "javascript", "completion": "return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n  \n        if (sumA === sumB) {\n            return a - b;\n        }\n  \n        return sumA - sumB;\n    });\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // == [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // == []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "let count = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        let absNum = Math.abs(nums[i]); // absolute Zahl erhalten\n        if (absNum > 10 && ((absNum % 10) % 2 === 1) && ((Math.floor(absNum / 10)) % 2 === 1)) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nconsole.log(specialfilter([15, -73, 14, -15])); // 1\nconsole.log(specialfilter([33, -2, -3, 45, 21, 109])); // 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "let a = new Array(n);\n    for(let i=0; i<n; i++) {\n        a[i] = i*i - i + 1;\n    }\n    \n    let countTriples = 0;\n    for(let i=0; i<n-2; i++) {\n        for(let j=i+1; j<n-1; j++) {\n            if((a[i]+a[j])%3==0) {\n                for(let k=j+1; k<n; k++) {\n                    if((a[i]+a[j]+a[k])%3 == 0){\n                        countTriples++;\n                    }\n                }\n            }\n        }\n    }\n    \n    return countTriples;\n}\nconsole.log(getMaxTriples(5)); // returns 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let posPlanet1 = -1;\n    let posPlanet2 = -1;\n\n    for (let i=0; i<planets.length; i++) {\n        if(planets[i] === planet1){\n            posPlanet1 = i;\n        } \n        else if(planets[i] === planet2){\n            posPlanet2 = i;\n        }\n    }\n    \n    if(posPlanet1===-1 || posPlanet2===-1) {\n        return ();\n    }\n    \n    let result = [];\n    for (let i=posPlanet1+1; i<posPlanet2; i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> (\"Saturn\", \"Uranus\")\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> (\"Venus\")\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "javascript/71", "language": "javascript", "completion": "if (isPrimeNumber(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n/**\n * Die Funktion 'isPrimeNumber' wird definiert und \u00fcberpr\u00fcft, ob die gegebene Zahl eine Primzahl ist.\n */\nfunction isPrimeNumber(num) {\n    if (num < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(xOrY(7, 34, 12)); // Output: 34\nconsole.log(xOrY(15, 8, 5)); // Output: 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (typeof lst[i] === \"number\" && lst[i] > 0 && lst[i] % 2 !== 0) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([9, -2])); // 81\nconsole.log(doubleTheDifference([0])); // 0\nconsole.log(doubleTheDifference([])); // 0"}
{"task_id": "javascript/73", "language": "javascript", "completion": "let strongest = extensions[0];\n    let maxStrength = getStrength(extensions[0]);\n  \n    for (let i = 1; i < extensions.length; i++) {\n        let currentStrength = getStrength(extensions[i]);\n        if (currentStrength > maxStrength) {\n            strongest = extensions[i];\n            maxStrength = currentStrength;\n        }\n    }\n  \n    return `${classname}.${strongest}`;\n}\n\nfunction getStrength(extension) {\n    let upperCaseCount = [...extension].filter(c => c === c.toUpperCase()).length;\n    let lowerCaseCount = [...extension].filter(c => c === c.toLowerCase()).length;\n  \n    return upperCaseCount - lowerCaseCount;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "let len = b.length;\n    for (let i = 0; i < len; i++) {\n        if (a.includes(b)) return true;\n        b = b[b.length - 1] + b.substring(0, b.length - 1);\n    }\n    return false;\n}\nconsole.log(cycpatternCheck(\"abcd\", \"abd\")); // => False\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); // => True\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); // => False\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); // => True\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); // => False\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); // => True"}
{"task_id": "javascript/75", "language": "javascript", "completion": "let map = [\n        ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix'],\n        ['', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc'],\n        ['', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm'],\n        ['', 'm', 'mm', 'mmm']\n    ];\n    let roman = '';\n    for (let i = 3; i >= 0; --i) {\n        while (number >= Math.pow(10, i)) {\n            number -= Math.pow(10, i);\n            roman += map[i][Math.floor(number / Math.pow(10, i - 1))];\n        }\n    }\n    return roman;\n}\n\nconsole.log(intToMiniRoman(19)); // xix\nconsole.log(intToMiniRoman(152)); // clii\nconsole.log(intToMiniRoman(426)); // cdxxvi"}
{"task_id": "javascript/76", "language": "javascript", "completion": "if (a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(rightAngleTriangle(3, 4, 5)); // True\nconsole.log(rightAngleTriangle(1, 2, 3)); // False"}
{"task_id": "javascript/77", "language": "javascript", "completion": "let newString = '';\n    let hasLetters = false;\n    for (let i = 0; i < s.length; i++) {\n        if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')){\n            hasLetters = true;\n            if(s[i] === s[i].toUpperCase()){\n                newString += s[i].toLowerCase();\n            }else{\n                newString += s[i].toUpperCase();\n            }\n        } else {\n            newString += s[i];\n        }\n    }\n    \n    if(!hasLetters){\n        return newString.split('').reverse().join('');\n    }else{\n        return newString;\n    }\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "if (!text || text.length === 0) {\n        return null;\n    }\n    let md5 = require('md5');\n    return md5(text);\n}\nconsole.log(stringToMd5('Hello world')); // outputs: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "javascript/79", "language": "javascript", "completion": "let result = [];\n    if (a > b) {\n        for (let i = a; i >= b; i--) {\n            if (i % 2 === 0) {\n                result.push(i);\n            }\n        }\n    } else {\n        for (let i = a; i <= b; i++) {\n            if (i % 2 === 0) {\n                result.push(i);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []"}

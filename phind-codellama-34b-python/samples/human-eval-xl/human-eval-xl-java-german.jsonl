{"task_id": "java/0", "language": "java", "completion": "int balance = 0;\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (Integer) operation;\n                if (balance < 0) return true;\n            } else if (operation instanceof List) {\n                balance += sum((List<Object>) operation);\n                if (balance < 0) return true;\n            }\n        }\n        return false;\n    }\n    \n    public static int sum(List<Object> list) {\n        int total = 0;\n        for (Object item : list) {\n            if (item instanceof Integer) {\n                total += (Integer) item;\n            } else if (item instanceof List) {\n                total += sum((List<Object>) item);\n            }\n        }\n        return total;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5))); // should print true\n        System.out.println(belowZero(Arrays.asList(1, 2, 3))); // should print false\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "int sum = 0;\n        int product = 1;\n        \n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int n = (int) number;\n                sum += n;\n                product *= n;\n            }\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers = new ArrayList<Object>();\n        System.out.println(\"Sum: \" + sumProduct(numbers).get(0) + \", Product: \" + sumProduct(numbers).get(1)); // 0, 1\n        \n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        System.out.println(\"Sum: \" + sumProduct(numbers).get(0) + \", Product: \" + sumProduct(numbers).get(1)); // 10, 24\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n        for (int i=0; i<a.length(); i++) {\n            int xorResult = Integer.parseInt(String.valueOf(a.charAt(i))) ^ \n                            Integer.parseInt(String.valueOf(b.charAt(i)));\n            result.append(xorResult);\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "if (strings.isEmpty()) return null;  // Wenn die Liste leer ist, wird null zur\u00fcckgegeben\n        \n        int maxLength = 0;                   // L\u00e4ngster gefundener String\n        String longestString = \"\";           // Variable f\u00fcr den l\u00e4ngsten gefunden String\n\n        for(Object string : strings){       // Schleife durch alle Strings in der Liste\n            if (((String)string).length() > maxLength){    // Wenn der aktuelle String l\u00e4nger ist als maxLenght\n                maxLength = ((String)string).length();     // Aktualisieren von maxLength\n                longestString = (String) string;           // Speichern des l\u00e4ngsten Strings\n            }\n        }\n        return longestString;             // R\u00fcckgabe des l\u00e4ngsten gefundenen Strings\n    } \n}"}
{"task_id": "java/4", "language": "java", "completion": "while (b != 0) {\n            int temp = b;\n            b = a % b; // % ist der Restoperator\n            a = temp;\n        }\n        return a;\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "// Split the string into an array of words\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to assign each word its corresponding number value\n        Map<String, Integer> wordToNumMap = new HashMap<>();\n        wordToNumMap.put(\"null\", 0);\n        wordToNumMap.put(\"eins\", 1);\n        wordToNumMap.put(\"zwei\", 2);\n        wordToNumMap.put(\"drei\", 3);\n        wordToNumMap.put(\"vier\", 4);\n        wordToNumMap.put(\"f\u00fcnf\", 5);\n        wordToNumMap.put(\"sechs\", 6);\n        wordToNumMap.put(\"sieben\", 7);\n        wordToNumMap.put(\"acht\", 8);\n        wordToNumMap.put(\"neun\", 9);\n        \n        // Convert each word into corresponding number, sort them and convert back to words\n        List<Integer> numList = new ArrayList<>();\n        for (String num : nums) {\n            if(wordToNumMap.containsKey(num)){\n                numList.add(wordToNumMap.get(num));\n            } else{\n                System.out.println(\"Invalid number: \" + num);\n            }\n        }\n        \n        Collections.sort(numList);\n        \n        // Convert back to words\n        List<String> sortedWords = new ArrayList<>();\n        for (Integer num : numList) {\n            for (Map.Entry<String, Integer> entry : wordToNumMap.entrySet()) {\n                if (entry.getValue().equals(num)) {\n                    sortedWords.add(entry.getKey());\n                    break;\n                }\n            }\n        }\n        \n        // Join the words into a string separated by space\n        return String.join(\" \", sortedWords);\n    }\n    \n}"}
{"task_id": "java/6", "language": "java", "completion": "// find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // calculate the range of the values (max - min)\n        double range = max - min;\n\n        for (int i = 0; i < numbers.size(); ++i) {\n            // subtract the minimum value from each number to make it zero-based\n            numbers.set(i, numbers.get(i) - min);\n            \n            // divide by the range to rescale to the unit interval [0, 1]\n            if (range != 0.0){\n                numbers.set(i, numbers.get(i) / range);\n            }\n        }\n        \n        return numbers;\n    }\n}\n\npublic class Main {\n     public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n         System.out.println(RescaleToUnit.rescaleToUnit(numbers));\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            \n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                // If the character is not a letter, add it as it is\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\"));\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "// Create new list to return\n        List<Object> positiveNums = new ArrayList<>();\n        \n        for (int i=0; i < l.size(); i++) {\n            if (l.get(i) instanceof Number && ((Number)l.get(i)).doubleValue() > 0) {\n                positiveNums.add(l.get(i));\n            }\n        }\n        \n        return positiveNums;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(getPositive(Arrays.asList(-1, 2, -4, 5, 6)));\n        System.out.println(getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "if (n <= 1) return false;\n        if (n == 2) return true;\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "Set<Integer> s = new HashSet<>(l);\n        return new ArrayList<>(s);\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "ArrayList<Integer> primes = new ArrayList<>();\n        primes.add(2);\n        ArrayList<Integer> fibs = new ArrayList<>();\n        fibs.add(0,2);\n        int count = 1;\n        while (count < n) {\n            int nextFib = fibs.get(fibs.size()-1) + fibs.get(fibs.size()-2);\n            if (isPrime(nextFib)) primes.add(nextFib);\n            fibs.add(nextFib);\n            while (primes.size() > n) primes.remove(0);\n            count = primes.size();\n        }\n        \n        return primes.get(n-1);\n    }\n    \n    public static boolean isPrime(int num){\n        if(num <= 1) return false;\n        if (num == 2 || num == 3) return true;\n        if(num % 2 == 0 || num % 3 == 0) return false;\n        int i = 5;\n        while(i * i <= num){\n            if(num % i == 0 || num % (i + 2) == 0)\n                return false;\n            i += 6;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "int n = l.size();\n        if (n < 3) return false; // If less than 3 elements, it is impossible to find three numbers adding up to zero\n        Arrays.sort(l);\n        for (int i = 0; i < n - 1; i++) {\n            int a = l.get(i);\n            int start = i + 1;\n            int end = n - 1;\n            while (start < end) {\n                if (a + l.get(start) + l.get(end) == 0) {\n                    return true;\n                } else if (a + l.get(start) + l.get(end) < 0) { // If sum is less than zero, increase start pointer\n                    start++;\n                } else { // If sum is greater than zero, decrease end pointer\n                    end--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "Set<Integer> seen = new HashSet<Integer>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            } else {\n                seen.add(num);\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "if (n == 0) return 0;\n        else if (n == 1) return 0;\n        else if (n == 2) return 2;\n        else if (n == 3) return 0;\n        \n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        \n        for (int i=4; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        \n        return fib[n];\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "// Sort the list in ascending order.\n        Collections.sort(l);\n        \n        // Determine the size of the list.\n        int size = l.size();\n        \n        // If the size of the list is odd, return the middle element.\n        if (size % 2 != 0) {\n            return (double) l.get(size / 2);\n        } else {\n            // If the size of the list is even, return the average of the two middle elements.\n            int mid1 = l.get((size - 1) / 2);\n            int mid2 = l.get(size / 2);\n            \n            return (double)(mid1 + mid2) / 2;\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(list)); // Output: 3.0\n        \n        list = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(list)); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "int n = text.length();\n        for (int i = 0; i < n/2; i++) {\n            if (text.charAt(i) != text.charAt(n-1-i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args){\n        System.out.println(isPalindrome(\"\"));\n        System.out.println(isPalindrome(\"aba\"));\n        System.out.println(isPalindrome(\"aaaaa\"));\n        System.out.println(isPalindrome(\"zbcd\"));\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            switch (Character.toLowerCase(c)) {\n                case 'a':\n                case 'e':\n                case 'i':\n                case 'o':\n                case 'u':\n                    continue;\n                default:\n                    sb.append(c);\n                    break;\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "return l.stream().allMatch(x -> x < t);\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "if (s0.length() != s1.length()) return false;\n        char[] charsS0 = new char[26];\n        char[] charsS1 = new char[26];\n        for (int i = 0; i < s0.length(); i++) {\n            charsS0[s0.charAt(i) - 'a']++;\n            charsS1[s1.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (charsS0[i] != charsS1[i]) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 1) return n;\n        else return fib(n-1) + fib(n-2);\n    }\n\n    /**\n     *\n     * Gib die Fibonacci-Zahlen von 0 bis n zur\u00fcck.\n     * >>> fibList(8)\n     * [0, 1, 1, 2, 3, 5, 8, 13, 21]\n     * >>> fibList(1)\n     * [0, 1]\n     * >>> fibList(4)\n     * [0, 1, 1, 2, 3, 5, 8]\n     *\n     */\n    public static List<Integer> fibList(int n) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            list.add(fib(i));\n        }\n        return list;\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "Set<Object> set = new HashSet<>(l1);\n        set.retainAll(l2);\n        \n        return new ArrayList<>(set);\n    }\n    \n    public static void main(String[] args){\n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Object> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        \n        System.out.println(\"Common elements are: \"+common(list1, list2));\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "// Gehe von hinten nach vorne\n        for (int i = (int)Math.sqrt(n); i > 1; i--) {\n            while (n % i == 0) {\n                if (isPrime(i)) return i;\n                n /= i;\n            }\n        }\n        // Wenn keine Primfaktoren gefunden wurden, ist die gr\u00f6\u00dfte Primzahl n selbst.\n        return n;\n    }\n    \n    /**\n     * \n     * Gib zur\u00fcck, ob eine gegebene Zahl i ein Primzahl ist.\n     * >>> is_prime(2)\n     * True\n     * >>> is_prime(4)\n     * False\n     *\n     */\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195)); // Output: 29\n        System.out.println(largestPrimeFactor(2048));   // Output: 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "int result = 0;\n        \n        for (int i = 1; i <= n; ++i) {\n            result += i;\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "LinkedList<Integer> result = new LinkedList<>();\n        for (int i=0; i<xs.size()-1; ++i){\n            result.add(xs.get(i+1)*(i+1));\n        }\n        return result;\n    }\n}\n\npublic class Main{\n     public static void main(String[] args) {\n         List<Integer> coefficients = new ArrayList<Integer>();\n         coefficients.add(3);\n         coefficients.add(1);\n         coefficients.add(2);\n         coefficients.add(4);\n         coefficients.add(5);\n         \n         System.out.println(\"Derivative of the polynomial is : \"+ Derivative.derivative(coefficients));\n     }\n}"}
{"task_id": "java/26", "language": "java", "completion": "if (n <= 0) return 0;\n        else if (n == 1) return 0;\n        else if (n == 2) return 1;\n        \n        int[] f = new int[n+1];\n        Arrays.fill(f, -1); // initialize array with -1\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2] + f[i-3];\n        }\n        \n        return f[n];\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // prints 0\n        System.out.println(fibfib(5)); // prints 4\n        System.out.println(fibfib(8)); // prints 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "int count = 0;\n        String lowerCaseS = s.toLowerCase();\n        for (char c : lowerCaseS.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if(lowerCaseS.endsWith(\"y\")){\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            if (!map.containsKey(i)) {\n                map.put(i, 1);\n            } else {\n                map.put(i, map.get(i)+1);\n            }\n        }\n        \n        int max = -1;\n        for (Integer key : map.keySet()) {\n            if (map.get(key) >= key && key > max) {\n                max = key;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "if (a + b > c && a + c > b && b + c > a) {\n            double s = (double)(a + b + c) / 2;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(TriangleArea.triangleArea(3, 4, 5)); //6.00\n        System.out.println(TriangleArea.triangleArea(1, 2, 10)); //-1.00\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "if (q == null || q.size() == 0) {\n            return false;\n        }\n\n        // check if it is a palindrome list\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                return false;\n            }\n        }\n        \n        // check if sum of elements in list is less or equal to max weight w\n        int total = q.stream().mapToInt(Integer::intValue).sum();\n        return total <= w;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> q1 = Arrays.asList(1, 2);\n        System.out.println(willItFly(q1, 5)); // \u279e False\n        \n        List<Integer> q2 = Arrays.asList(3, 2, 3);\n        System.out.println(willItFly(q2, 1)); // \u279e False\n        System.out.println(willItFly(q2, 9)); // \u279e True\n        \n        List<Integer> q3 = Arrays.asList(3);\n        System.out.println(willItFly(q3, 5)); // \u279e True\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"is_multiply_prime(30): \" + isMultiplyPrime(30)); // should print: True\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "// Hier ist eine Methode, die in Java geschrieben ist:\n\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));  // returns \"db1111db\"\n        System.out.println(decimalToBinary(32));  // returns \"db100000db\"\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            \n            if (a == b || a == c || b == c) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "List<String> results = new ArrayList<>();\n        \n        for (double grade : grades) {\n            if      (grade == 4.0) {results.add(\"A+\");}\n            else if (grade >  3.7) {results.add(\"A\"); }\n            else if (grade >  3.3) {results.add(\"A-\");}\n            else if (grade >  3.0) {results.add(\"B+\");}\n            else if (grade >  2.7) {results.add(\"B\"); }\n            else if (grade >  2.3) {results.add(\"B-\");}\n            else if (grade >  2.0) {results.add(\"C+\");}\n            else if (grade >  1.7) {results.add(\"C\"); }\n            else if (grade >  1.3) {results.add(\"C-\");}\n            else if (grade >  1.0) {results.add(\"D+\");}\n            else if (grade >  0.7) {results.add(\"D\"); }\n            else if (grade >  0.0) {results.add(\"D-\");}\n            else                    {results.add(\"E\"); }\n        }\n        \n        return results;\n    }\n    \n    public static void main(String[] args) {\n        List<Number> grades = new ArrayList<>();\n        grades.add(4.0);\n        grades.add(3.0);\n        grades.add(1.7);\n        grades.add(2.0);\n        grades.add(3.5);\n        \n        System.out.println(numericalLetterGrade(grades));\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "int n = string.length();\n        if (n < 2) return false; // String length of less than 2 cannot be a prime number\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false; // If n is divisible by any number in the range 2 to sqrt(n), then it's not a prime number\n        }\n        return true; // If no factors found, then n is a prime number.\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\"));      // True\n        System.out.println(primeLength(\"abcdcba\"));   // True\n        System.out.println(primeLength(\"kittens\"));    // True\n        System.out.println(primeLength(\"orange\"));     // False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "int sum = 0;\n        \n        while (n > 0){\n            sum += n % 10; //add the last digit to sum\n            n /= 10; // remove the last digit from N\n        }\n        \n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n        \n        for (int i=0; i<lst.size(); i++) {\n            if (!(lst.get(i) instanceof List)) continue;\n            \n            List<Integer> line = (List<Integer>) lst.get(i);\n            for (int j=0; j<line.size(); j++) {\n                if (line.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        return result.stream()\n                .sorted((a, b) -> a.get(0).compareTo(b.get(0)) != 0 ? a.get(0).compareTo(b.get(0)) : -a.get(1).compareTo(b.get(1)))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        int first = -1, second = Integer.MAX_VALUE;\n        for(int i=0;i<lst.size();i++){\n            if((Integer)lst.get(i)<second){\n                if(first!=-1 && (Integer)lst.get(i)>first){\n                    second = (Integer)lst.get(i);\n                }\n                else{\n                    first = second;\n                    second = (Integer)lst.get(i);\n                }\n            }\n        }\n        \n        if(second == Integer.MAX_VALUE){\n            return null;\n        }\n        \n        return second;\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "String[] sentences = s.split(\"[.!?]\");\n        int boredCount = 0;\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"Ich\")) {\n                boredCount++;\n            }\n        }\n        \n        return boredCount;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "// Implement this function\n        \n        // First, find the maximum prime number in the list.\n        int maxPrime = Integer.MIN_VALUE;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n        \n        // If no prime number is found, return 0.\n        if (maxPrime == Integer.MIN_VALUE) {\n            return 0;\n        }\n        \n        // Secondly, compute the sum of its digits.\n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "if (!(dict instanceof Map)) {\n            throw new IllegalArgumentException(\"Invalid input, not a dictionary\");\n        }\n        \n        Map<String, Object> map = (Map<String, Object>)dict;\n        \n        if (map.isEmpty()) {\n            return false;\n        }\n        \n        for(String key : map.keySet()){\n            \n            if (!key.equals(key.toLowerCase()) && !key.equals(key.toUpperCase())) {\n                return false;\n            }\n            \n            if (map.get(key) instanceof String){\n                String value = (String) map.get(key);\n                if(!value.equals(value.toLowerCase()) && !value.equals(value.toUpperCase())){\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "double number = Double.parseDouble(value);\n        int floorVal = (int)Math.floor(number);\n        int ceilVal = (int)Math.ceil(number);\n        \n        if (number - floorVal <= 0.5 || floorVal == 0 && number < 0) {\n            return floorVal;\n        } else if (ceilVal - number <= 0.5 || ceilVal == 0 && number > 0) {\n            return ceilVal;\n        } else {\n            return (int)(number<0 ? Math.floor(number) : Math.ceil(number));\n        }\n    }\n\n    public static void main(String[] args){\n        System.out.println(closestInteger(\"10\")); // Expected output: 10\n        System.out.println(closestInteger(\"15.3\")); // Expected output: 15\n        System.out.println(closestInteger(\"-14.5\")); // Expected output: -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "ArrayList<Integer> piles = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            if (n % 2 == 0) {\n                // even\n                piles.add((i + 1) * 2 - 1);\n            } else {\n                // odd\n                piles.add(i * 2 + 1);\n            }\n        }\n        \n        return piles;\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "String[] result = s.split(\"[ ,]\");\n        return Arrays.asList(result);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "if (y < x) {\n            return -1;\n        } else {\n            for (int i = y; i >= x; i--) {\n                if (i % 2 == 0) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "if (n > m) {\n            return -1;\n        } else {\n            double sum = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n            }\n            int avg = Math.round(sum / (m - n + 1));\n            return String.format(\"0b%s\", Integer.toBinaryString(avg));\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(RoundedAvg.roundedAvg(1, 5)); // \"0b11\"\n        System.out.println(RoundedAvg.roundedAvg(7, 5)); // -1\n        System.out.println(RoundedAvg.roundedAvg(10, 20)); // \"0b1111\"\n        System.out.println(RoundedAvg.roundedAvg(20, 33)); // \"0b11010\"\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) { // gerade Zahlen\n                int fact = 1;\n                \n                for (int j = 2; j <= i + 1; j++) {\n                    fact *= j;\n                }\n                \n                result.add(fact);\n            } else { // ungerade Zahlen\n                int sum = 0;\n                \n                for (int j = 1; j <= i + 1; j++) {\n                    sum += j;\n                }\n                \n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n    \n    private static boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0, right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            \n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "// Code here\n        int n = arr.size();\n\n        if (n <= 1) {\n            return true;\n        }\n\n        Integer last = (Integer)arr.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            Integer next = (Integer)arr.get(i);\n\n            if (next > last) {\n                return false;\n            } else {\n                last = next;\n            }\n        }\n\n        return true;\n    }\n}\n\n// Test the function\nList<Object> arr1 = Arrays.asList(3, 4, 5, 1, 2);\nSystem.out.println(MoveOneBall.moveOneBall(arr1)); // It should print: True\n\nList<Object> arr2 = Arrays.asList(3, 5, 4, 1, 2);\nSystem.out.println(MoveOneBall.moveOneBall(arr2)); // It should print: False"}
{"task_id": "java/50", "language": "java", "completion": "int count = 0;\n        for (int i : lst1){\n            if (i % 2 != 0){\n                boolean isFound = false;\n                for (int j : lst2){\n                    if(j % 2 == 0){\n                        count++;\n                        isFound = true;\n                        break;\n                    }\n                }\n                if (!isFound) return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(String.valueOf(ch))) {\n                sb.append(ch);\n            }\n        }\n        String str = sb.toString();\n        boolean isPalindrome = str.equals(new StringBuilder(str).reverse().toString());\n        return Arrays.asList(str, isPalindrome);\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "int totalWells = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) totalWells++;\n            }\n        }\n        \n        return totalWells/capacity + ((totalWells%capacity==0)?0:1);\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "if (s.isEmpty()) return new ArrayList<>();\n        \n        String[] words = s.split(\" \"); // Split string into words\n        List<String> selectedWords = new ArrayList<>();\n\n        for (String word : words) {\n            int consonantsCount = 0;\n            \n            for(char c : word.toCharArray()) {\n                if(Character.isLetter(c) && !\"aeiouAEIOU\".contains(\"\"+c)) {\n                    consonantsCount++; // Counting consonants in the word\n                }\n            }\n            \n            if(consonantsCount == n){ \n                selectedWords.add(word);  // Add to list if count matches\n            }\n        }\n        \n        return selectedWords;\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (int num: arr) {\n            queue.offer(num);\n            \n            if (queue.size() > k) {\n                queue.poll();\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        \n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        \n        Collections.reverse(result);\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "if (arr == null || arr.size() < k) {\n            throw new IllegalArgumentException();\n        }\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        while (sum > 99) {\n            int lastDigit = sum % 10;\n            int otherDigits = sum / 10;\n            sum = otherDigits + lastDigit;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n        \n        int length = end - start + 1;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "List<Number> result = new ArrayList<>();\n        \n        for (int i = 0; i <= n; i++) {\n            if (i == 0) {\n                result.add(1);\n            } else if (i % 2 == 0) {\n                result.add((int)(result.get(i - 1) + i / 2));\n            } else {\n                result.add((int)(result.get(i - 1) + result.get(i - 2) + (i - 1)));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "String num = Integer.toString(n);\n        int product = 1;\n        for (char c : num.toCharArray()) {\n            if ((c - '0') % 2 != 0) {\n                product *= (c - '0');\n            }\n        }\n        return product;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"digits(1) = \" + digits(1));   // 1\n        System.out.println(\"digits(4) = \" + digits(4));   // 0\n        System.out.println(\"digits(235) = \" + digits(235));// 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (!stack.empty() && stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        \n        return !stack.empty();\n    }\n\n    public static void main(String[] args) {\n      System.out.println(isNested(\"[[]]\")); // \u279e True\n      System.out.println(isNested(\"[]]]]]]][[[[[]\")); // \u279e False\n      System.out.println(isNested(\"[][]\")); // \u279e False\n      System.out.println(isNested(\"[]\")); // \u279e False\n      System.out.println(isNested(\"[[][]]\")); // \u279e True\n      System.out.println(isNested(\"[[]][[\")); // \u279e True\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "int sum = 0;\n        for (Number num : lst) {\n            double value = Math.ceil(num.doubleValue());\n            sum += (int)Math.pow(value, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "if (txt.isEmpty()) return false;\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        char lastChar = lastWord.charAt(lastWord.length() - 1);\n        \n        return Character.isAlphabetic(lastChar) && !Character.isLetterOrDigit(lastWord.charAt(lastWord.length() - 2));\n    }\n    \n    public static void main(String[] args) {\n      System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // False\n      System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // True\n      System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // False\n      System.out.println(checkIfLastCharIsALetter(\"\")); // False \n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "for (int i = 0; i < arr.size()-1; i++) {\n            if (arr.get(i+1) <= arr.get(i)) {\n                return i+1;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "Integer largestNegative = null;\n        Integer smallestPositive = null;\n        \n        for (Object x : lst) {\n            if (!(x instanceof Integer)) continue;\n            int val = (Integer) x;\n            \n            if (val < 0 && (largestNegative == null || val > largestNegative)) {\n                largestNegative = val;\n            } else if (val > 0 && (smallestPositive == null || val < smallestPositive)) {\n                smallestPositive = val;\n            }\n        }\n        \n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n    \n    public static void main(String[] args) {\n        List<Object> lst1 = new ArrayList<>();\n        lst1.add(2); lst1.add(4); lst1.add(1); lst1.add(3); lst1.add(5); lst1.add(7);\n        \n        List<Object> lst2 = new ArrayList<>();\n        \n        List<Object> lst3 = new ArrayList<>();\n        lst3.add(0);\n        \n        System.out.println(largestSmallestIntegers(lst1)); // outputs: [(a, b)]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "long result = 1;\n        \n        for (int i = n; i > 0; i--) {\n            // Calculate factorial of i and multiply it to the result\n            for (int j = 2; j <= i; j++) {\n                result *= j;\n            }\n            \n            if(i != 1){\n                result /= i; // Divide result by i, but not when i is 1\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main (String[] args) {\n        System.out.println(\"specialFactorial(4): \" + specialFactorial(4));\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "// Write your code here\n        String[] words = sentence.split(\" \");\n        ArrayList<String> result = new ArrayList<String>();\n\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                result.add(word);\n            }\n        }\n\n        return String.join(\" \", result);\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "// Splitting the strings on \"/\" to get the numerator and the denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int numX = Integer.parseInt(xParts[0]);\n        int denX = Integer.parseInt(xParts[1]);\n        int numN = Integer.parseInt(nParts[0]);\n        int denN = Integer.parseInt(nParts[1]);\n\n        // Multiplying the numerators and denominators\n        int finalNum = numX * numN;\n        int finalDen = denX * denN;\n\n        // Checking if the result is a whole number\n        if (finalNum % finalDen == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "return nums.stream()\n                .sorted((a, b) -> {\n                            int sumA = String.valueOf(a).chars().map(Character::getNumericValue).sum();\n                            int sumB = String.valueOf(b).chars().map(Character::getNumericValue).sum();\n                            return Integer.compare(sumA, sumB);\n                        }\n                )\n                .collect(Collectors.toList());\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        List<Object> nums = new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12));\n        System.out.println(\"Original list: \" + nums);\n        List<Object> sortedNums = OrderByPoints.orderByPoints(nums);\n        System.out.println(\"Sorted list: \" + sortedNums);\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "int count = 0;\n        for (Object i : nums){\n            int n = Integer.parseInt(i.toString());\n            if (n < -10 || n > 10) continue;\n            String strNum = Math.abs(n)+\"\";\n            if ((strNum.charAt(0) % 2 != 0) && (strNum.charAt(strNum.length()-1) % 2 != 0)){\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "if(n <= 0){\n            return 0;\n        }\n        else if(n == 1){\n            return 0;\n        }\n        \n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n      \n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n      \n        return count;\n      }\n}"}
{"task_id": "java/70", "language": "java", "completion": "List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        int indexPlanet1 = planets.indexOf(planet1);\n        int indexPlanet2 = planets.indexOf(planet2);\n\n        if (indexPlanet1 < indexPlanet2) {\n            return planets.subList(indexPlanet1 + 1, indexPlanet2);\n        } else {\n            return planets.subList(indexPlanet2 + 1, indexPlanet1);\n        }\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12)); // Outputs: 34\n        System.out.println(xOrY(15, 8, 5));  // Outputs: 5\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "int sum = 0;\n        for (Object o : lst) {\n            if (!(o instanceof Integer)) continue; // ignore non-integer numbers\n            int num = (Integer)o;\n            if (num < 0 || num % 2 == 0) continue; // ignore negative and even numbers\n            sum += Math.pow(num, 2); // add the square of number to sum\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(doubleTheDifference(new ArrayList<>(Arrays.asList(1, 3, 2, 0)))); // should print 10\n        System.out.println(doubleTheDifference(new ArrayList<>(Arrays.asList(-1, -2, 0)))); // should print 0\n        System.out.println(doubleTheDifference(new ArrayList<>(Arrays.asList(9, -2)))); // should print 81\n        System.out.println(doubleTheDifference(new ArrayList<>(Arrays.asList(0)))); // should print 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "int maxCAP = -1;\n        String strongestExt = \"\";\n        for (String ext : extensions){\n            int CAP = 0;\n            int SM = 0;\n            for (char c: ext.toCharArray()){\n                if(Character.isUpperCase(c))\n                    CAP++;\n                else if (Character.isLowerCase(c))\n                    SM++;\n            }\n            if(CAP - SM > maxCAP) {\n                maxCAP = CAP - SM;\n                strongestExt = ext;\n            }\n        }\n        return className + \".\" + strongestExt;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "// Check if string b is rotation of string a\n        return (a.length() == b.length()) && (isSubstring(b, a) || isSubstring(a, b));\n    }\n\n    public static boolean isSubstring(String a, String b) {\n        return a.indexOf(b) != -1;\n    }\n}\npublic class Main{\n  public static void main (String[] args){\n     CycpatternCheck cc = new CycpatternCheck();\n      System.out.println(cc.cycpattern_check(\"abcd\",\"abd\")); //=> False\n      System.out.println(cc.cycpattern_check(\"hello\",\"ell\")); //=> True\n      System.out.println(cc.cycpattern_check(\"whassup\",\"psus\")); //=> False\n      System.out.println(cc.cycpattern_check(\"abab\",\"baa\")); //=> True\n      System.out.println(cc.cycpattern_check(\"efef\",\"eeff\")); //=> False\n      System.out.println(cc.cycpattern_check(\"himenss\",\"simen\")); //=> True\n  }  \n}"}
{"task_id": "java/75", "language": "java", "completion": "if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number should be between 1 and 1000\");\n        }\n        \n        String[] roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] decimal = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        \n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < decimal.length; ++i) {\n            while (number >= decimal[i]) {\n                number -= decimal[i];\n                res.append(roman[i]);\n            }\n        }\n        \n        return res.toString();\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2) ||\n               Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2) ||\n               Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            if (Character.isAlphabetic(c)) {\n                hasLetter = true;\n                \n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (!hasLetter) {\n            return sb.reverse().toString();\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "if (text.isEmpty()) {\n            return null;\n        } else {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                byte[] hash = md.digest(text.getBytes());\n                StringBuffer sb = new StringBuffer();\n                for (byte b : hash) {\n                    sb.append(String.format(\"%02x\", b));\n                }\n                return sb.toString();\n            } catch (NoSuchAlgorithmException e) {\n                e.printStackTrace();\n                return null; // This line will never be reached because 'MD5' is always supported.\n            }\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}

{"task_id": "python/0", "language": "python", "completion": "# Start with zero balance\n    current_balance = 0\n\n    # Go through all operations\n    for op in operations:\n        # Update the current balance\n        current_balance += op\n\n        # If at any point the balance is below zero, return True\n        if current_balance < 0:\n            return True\n\n    # If we went through all operations and never had a negative balance, return False\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "if len(numbers) == 0:\n        return 0, 1\n    else:\n        # initial values\n        my_sum = 0\n        my_product = 1\n\n        for num in numbers:\n            my_sum += num\n            my_product *= num\n        \n        return my_sum, my_product\n\nprint(sum_product([]) == (0, 1))\nprint(sum_product([1, 2, 3, 4]) == (10, 24))"}
{"task_id": "python/2", "language": "python", "completion": "return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n\n\ndef main():\n    a = input(\"Bitte geben Sie die erste Zeichenkette ein: \")\n    b = input(\"Bitte geben Sie die zweite Zeichenkette ein: \")\n    print(string_xor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "python/3", "language": "python", "completion": "if not strings:  # Pr\u00fcfe ob die Liste leer ist.\n        return None\n    else:\n        longest_string = max(strings, key=len)\n        return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "while(b):\n        a, b = b, a % b\n    return a"}
{"task_id": "python/5", "language": "python", "completion": "number_dict = {\n        \"null\": 0,\n        \"eins\": 1,\n        \"zwei\": 2,\n        \"drei\": 3,\n        \"vier\": 4,\n        \"f\u00fcnf\": 5,\n        \"sechs\": 6,\n        \"sieben\": 7,\n        \"acht\": 8,\n        \"neun\": 9,\n    }\n    numbers_list = numbers.split(\" \")\n    numbers_sorted = sorted(numbers_list, key=number_dict.get)\n    return \" \".join(numbers_sorted)\n\n\nprint(sort_numbers('three one five'))"}
{"task_id": "python/6", "language": "python", "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # Die lineare Transformation y = (x-a)/(b-a) wandelt den Bereich [a,b] in [0,1] um. \n    # Dabei m\u00fcssen alle Zahlen aus der Liste durch das Gitter (b-a) geteilt werden.\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/7", "language": "python", "completion": "result = ''\n    for character in string:\n        if character.isupper():\n            result += character.lower()\n        else:\n            result += character.upper()\n            \n    return result"}
{"task_id": "python/8", "language": "python", "completion": "result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n    \nprint(get_positive([-1, 2, -4, 5, 6])) # [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) # [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "python/9", "language": "python", "completion": "if n < 2:  # keine Primzahlen, die kleiner sind als 2\n        return False\n    for i in range(2, int(n**0.5)+1):  \n        # reicht nur bis sqrt(n), da alle gr\u00f6\u00dferen Teiler ja durch einen kleineren Teiler zusammen mit ihm erzeugt werden.\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(6))     # False\nprint(is_prime(101))   # True\nprint(is_prime(11))    # True\nprint(is_prime(13441)) # False, hat Teiler 29 und 457.\nprint(is_prime(61))    # True\nprint(is_prime(4))     # False\nprint(is_prime(1))     # False"}
{"task_id": "python/10", "language": "python", "completion": "return sorted(set(l))\n\ndef unique_without_sets(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck (ohne die Verwendung von `set`).\"\"\"\n    unique_list = []\n    \n    for item in l:\n        if item not in unique_list:\n            unique_list.append(item)\n            \n    return sorted(unique_list)\n\n# Tests\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) # [0, 2, 3, 5, 9, 123]\nprint(unique_without_sets([5, 3, 5, 2, 3, 3, 9, 0, 123])) # [0, 2, 3, 5, 9, 123]"}
{"task_id": "python/11", "language": "python", "completion": "i = 0\n    j = 1\n    count = 0\n    while True:\n        fib = i + j\n        i, j = j, fib\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n            \ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime gibt True zur\u00fcck, wenn n eine Primzahl ist. Sonst False.\n    \n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "python/12", "language": "python", "completion": "l = sorted(l) # sort the list\n    \n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]: # skip duplicates\n            continue\n            \n        j = i + 1\n        k = len(l) - 1\n        \n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n                \n    return False\n\n# Test Cases\nprint(triples_sum_to_zero([1, 3, 5, 0])) # Should print: False\nprint(triples_sum_to_zero([1, 3, -2, 1])) # Should print: True\nprint(triples_sum_to_zero([1, 2, 3, 7])) # Should print: False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # Should print: True\nprint(triples_sum_to_zero([1])) # Should print: False"}
{"task_id": "python/13", "language": "python", "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "if n < 2: return 0\n    elif n == 2: return 2\n    elif n == 3: return 0\n\n    fib = [0]*n\n    fib[2] = 2\n    for i in range(4, n+1):\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n    return fib[n]"}
{"task_id": "python/15", "language": "python", "completion": "n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n%2 == 1 else (s[n//2 - 1] + s[n//2]) / 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/16", "language": "python", "completion": "text = text.replace(\" \", \"\")  # Leerzeichen werden ignoriert\n    length = len(text)\n    for i in range(length // 2):\n        if text[i] != text[-1 - i]:  # Python-Indexierung ist um 1 zu gro\u00df\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/17", "language": "python", "completion": "vowels = \"aeiouAEIOU\"\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text"}
{"task_id": "python/18", "language": "python", "completion": "for n in l:\n        if n >= t:\n            return False\n    return True"}
{"task_id": "python/19", "language": "python", "completion": "return x + y\n\nprint(add(2, 3)) # 5\nprint(add(5, 7)) # 12"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))\nprint(same_chars('abcd', 'dddddddabc'))\nprint(same_chars('dddddddabc', 'abcd'))\nprint(same_chars('eabcd', 'dddddddabc'))\nprint(same_chars('abcd', 'dddddddabce'))\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))"}
{"task_id": "python/21", "language": "python", "completion": "# Initialisierung der ersten beiden Fibonacci-Zahlen\n    a, b = 0, 1\n\n    # Rekursive Implementierung des Fibonacci-Algorithmus\n    for _ in range(n):\n        a, b = b, a + b\n    \n    return a"}
{"task_id": "python/22", "language": "python", "completion": "return sorted(list(set(l1) & set(l2)))"}
{"task_id": "python/23", "language": "python", "completion": "while n % 2 == 0:\n        max_prime = 2\n        n >>= 1   # halve the number and continue if even\n    # start from 3 to sqrt(n) incrementing by 2 each time\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            max_prime = i\n            n /= i   # remove the factor and continue if still divisible\n    if n > 2: max_prime = n\n    return int(max_prime)"}
{"task_id": "python/24", "language": "python", "completion": "return (n * (n + 1)) // 2"}
{"task_id": "python/25", "language": "python", "completion": "# L\u00f6sung:\n    return [(i+1)*xs[i+1] for i in range(len(xs)-1)]"}
{"task_id": "python/26", "language": "python", "completion": "# Initialisiere die Base F\u00e4lle der Rekursion\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    # Definieren des Arrays, um zu speichern, was bisher berechnet wurde\n    fibfib_array = [0]*n\n    fibfib_array[2] = 1\n    # Berechnen der Zahlenfolge\n    for i in range(3, n+1):\n        fibfib_array[i] = fibfib_array[i-1] + fibfib_array[i-2] + fibfib_array[i-3]\n    return fibfib_array[n]\n\n# Tests:\nprint(fibfib(1)) # 0\nprint(fibfib(5)) # 4\nprint(fibfib(8)) # 24"}
{"task_id": "python/27", "language": "python", "completion": "count = 0\n    s = s.lower()\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    # special case for 'y'\n    if s[-1] == 'y':\n        count += 1\n    return count\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"bcrptz\") == 0\n    assert vowels_count(\"\") == 0"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    from collections import Counter\n    \n    counter = Counter(lst)  # Count the frequency of each number in the list\n    max_freq = max(counter.values())  # Find the maximum frequency\n    \n    # Get a sorted list of unique numbers in the list\n    sorted_unique_nums = sorted([num for num, freq in counter.items() if freq == max_freq])\n\n    # Return the first number from sorted_unique_nums that is greater than 0, or -1 if no such number exists\n    return next((num for num in sorted_unique_nums if num > 0), -1)"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "python/31", "language": "python", "completion": "primes = [2, 3, 5, 7]  # Liste der Primzahlen bis 100\n\n    factors = []  # Faktoren von a\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a /= prime\n\n    return len(factors) == 3 and all(x in primes for x in factors)"}
{"task_id": "python/32", "language": "python", "completion": "binary = bin(decimal)[2:]  # use python built-in function 'bin' to convert decimal to binary\n    return 'db'+binary+'db'"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        \n        if n == 2:\n            return True\n        \n        if n % 2 == 0:\n            return False\n        \n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            \n            i += 2\n        \n        return True\n    \n    return is_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "return bin(sum([int(i) for i in str(N)]))[2:]"}
{"task_id": "python/37", "language": "python", "completion": "result = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index, num in enumerate(row):\n            if num == x:\n                result.append((row_index, col_index))\n                \n    # Sorting the coordinates first by rows in ascending order and then by columns in descending order\n    result.sort()\n    \n    return result"}
{"task_id": "python/38", "language": "python", "completion": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "python/39", "language": "python", "completion": "# Zerlege den Text in eine Liste von S\u00e4tzen \n    sentences = S.split('.') + S.split('?') + S.split('!')\n\n    # Finde die Anzahl der Langeweilen (S\u00e4tze, die mit \"Ich\" beginnen)\n    boredom_count = sum(1 for sentence in sentences if sentence.lstrip().startswith(\"Ich\"))\n\n    return boredom_count"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0: return False\n        i += w\n        w = 6 - w\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nmax_prime = max((x for x in lst if is_prime(x)), default=0)\nreturn sum_of_digits(max_prime) if is_prime(max_prime) else 0"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lower = 0\n    upper = 0\n    \n    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                lower += 1\n            elif key.isupper():\n                upper += 1\n            else:\n                return False\n                \n    return lower == len(dict) or upper == len(dict)"}
{"task_id": "python/42", "language": "python", "completion": "number = float(value)\n    if number > 0:\n        # Round towards infinity\n        return int(number + 0.5)\n    else:\n        # Round away from zero\n        return int(number - 0.5)"}
{"task_id": "python/43", "language": "python", "completion": "result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(n+i*2)\n        else:\n            result.append(n+i*2-1)\n    return result"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n  if ',' in s:\n      return s.split(',')\n  else:\n      return s.split(' ')\n\nprint(words_string(\"Hi, my name is John\")) # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One two three four five six\")) # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "if x>y:\n        return -1\n\n    max_even=max([i for i in range(x, y+1) if i%2==0])\n\n    if max_even is None:\n        return -1\n    else: \n        return max_even"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        bin_str = bin(avg).replace(\"0b\", \"\")\n        return bin_str"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    factorial_sum = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            fact = 1\n            for j in range(1,i+1):\n                fact *= j\n            factorial_sum.append(fact)\n        else:\n            sum_i = sum([k for k in range(1,i+1)])\n            factorial_sum.append(sum_i)\n    return factorial_sum"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes.\n    even_count = 0\n    odd_count = 0\n    # Generate all numbers upto n.\n    for num in range(1, n+1):\n        # If the number is a palindrome.\n        if str(num) == str(num)[::-1]:\n            # Increment even count if the number is even.\n            if num % 2 == 0:\n                even_count += 1\n            # Increment odd count otherwise.\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    sortedArr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i] > sortedArr[(i+1)%len(arr)]:\n            return False\n            \n    return True"}
{"task_id": "python/50", "language": "python", "completion": "odd_nums_lst1 = [i for i in lst1 if i%2 !=0]\n    even_nums_lst2 = [i for i in lst2 if i%2 == 0]\n    \n    #checking if number of odd numbers in lst1 can be replaced by even numbers from lst2\n    if len(odd_nums_lst1) <= len(even_nums_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "for char in c:\n        s = s.replace(char, '')  # delete all occurrences of characters from c in s\n    \n    rev_s = s[::-1]  # reverse string s\n    \n    palindrome = True if s == rev_s else False  # check if the string is a palindrome\n    \n    return (s, palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "if not grid: return 0\n    \n    m, n = len(grid), len(grid[0])\n    total_pumps = math.floor(capacity) * (m + n - 2) + min(capacity, sum(grid[0]) % capacity)\n    \n    for i in range(1, m):\n        total_pumps += min(capacity, sum([grid[i][j] for j in range(n)]))\n        \n    return total_pumps"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    words = s.split()  # split the string into a list of words\n    vowels = 'aeiou'  # define the characters that are not consonants\n    result = []  # initialize an empty list to store our result\n\n    for word in words:  # iterate over each word in the list\n        # count the number of consonants in the word\n        count = sum(1 for char in word.lower() if char not in vowels)\n        \n        if count == n:  # if the word has exactly n consonants,\n            result.append(word)  # add it to our result list\n\n    return result  # return our result list"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n\n# Test Cases:\nprint(maximum([-3, -4, 5], 3))  # [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))  # [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # [2]"}
{"task_id": "python/55", "language": "python", "completion": "return sum(arr[:k])"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if intervals overlap\n    if start > end:\n        return \"NO\"\n    \n    intersection_length = end - start + 1\n\n    # Function to check if a number is prime or not\n    def isPrime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n%2 == 0 or n%3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n%i == 0 or n%(i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Check if intersection length is a prime number\n    if isPrime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    arr = [0]*(n+2)\n    arr[1] = 3\n    for i in range (2 , n + 1):\n        if i % 2 == 0:\n            arr[i] = 1 + i//2\n        else:\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1]\n    return arr[:n+1]\nprint(tri(3)) # [1, 3, 2, 8]"}
{"task_id": "python/58", "language": "python", "completion": "def is_odd_digit(n):\n    return n % 2 != 0\n\ndef product_of_odd_digits(n):\n    digits_lst = list(str(n))\n    digits_lst = [int(d) for d in digits_lst]\n    odd_digits = filter(is_odd_digit, digits_lst)\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []  # Stack to keep track of brackets\n\n    for bracket in string:\n        if bracket == '[':  # Push opening brackets into the stack\n            stack.append(bracket)\n        elif bracket == ']':  # Pop from the stack if we encounter a closing bracket\n            if not stack or stack[-1] != '[':  # If there's no opening bracket before it, return False\n                return False\n            stack.pop()  # Remove last element from the stack\n    if stack:  # If there are still elements in the stack, it means there's an opening bracket without a closing one\n        return True\n    else:  # Otherwise, it means there's no nested brackets\n        return False"}
{"task_id": "python/60", "language": "python", "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt or len(txt) == 0:\n        return False\n    \n    last_char = txt[-1]\n    previous_char = txt[-2] if len(txt) > 1 else ''\n\n    # Checks if the last character is an alphabet and if it's not part of a word\n    return last_char.isalpha() and previous_char == ' '"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "max_negative = None\n    min_positive = None\n    \n    for num in lst:\n        if type(num) != int:\n            continue\n            \n        # If number is positive and less than current minimum positive number or min_positive is None\n        elif num > 0 and (min_positive == None or num < min_positive):\n            min_positive = num\n        \n        # If number is negative and more than current maximum negative number or max_negative is None\n        elif num < 0 and (max_negative == None or num > max_negative):\n            max_negative = num\n            \n    return max_negative, min_positive\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) #== (None, 1)\nprint(largest_smallest_integers([])) #== (None, None)\nprint(largest_smallest_integers([0])) #== (None, None)"}
{"task_id": "python/64", "language": "python", "completion": "result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def isPrime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words and filter out the ones with length not being prime\n    words = [word for word in sentence.split() if isPrime(len(word))]\n    \n    # Join the filtered words back into a sentence separated by space\n    result = ' '.join(words)\n    \n    return result"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Split the strings and convert to integers.\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the resulting numerator and denominator.\n    res_num = x_num * n_num\n    res_den = x_den * n_den\n    \n    # Check if the result is a whole number.\n    return res_num % res_den == 0"}
{"task_id": "python/67", "language": "python", "completion": "return sorted(nums, key=lambda x: (sum(map(int,str(abs(x)))), nums.index(x)))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and int(str(abs(num))[0]) % 2 == 1 and int(str(abs(num))[-1]) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)] # Erstellen des Arrays 'a'\n    count = 0 # Initialisieren der Anzahl der Tripel\n    for i in range(n-2): # Schleife von i=0 bis n-3\n        for j in range(i+1, n-1): # Schleife von j=i+1 bis n-2\n            for k in range(j+1, n): # Schleife von k=j+1 bis n-1\n                if (a[i] + a[j] + a[k]) % 3 == 0: # Pr\u00fcfen ob der Summe ein Vielfaches von 3 entspricht\n                    count += 1 # Wenn Bedingung erf\u00fcllt, erh\u00f6hen wir die Anzahl der Tripel um 1\n    return count # Zur\u00fcckgeben der Gesamtanzahl an Triplen"}
{"task_id": "python/70", "language": "python", "completion": "def planet_order(planet1, planet2):\n    planets_in_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets_in_order or planet2 not in planets_in_order:\n        return ()\n    \n    index1 = planets_in_order.index(planet1)\n    index2 = planets_in_order.index(planet2)\n    \n    if index1 < index2:\n        return tuple(planets_in_order[index1+1:index2])\n    else:\n        return tuple(planets_in_order[index2+1:index1])"}
{"task_id": "python/71", "language": "python", "completion": "# Pr\u00fcfen Sie zun\u00e4chst, ob die gegebene Zahl n eine Primzahl ist.\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if i > 0 and i % 2 != 0)"}
{"task_id": "python/73", "language": "python", "completion": "def extension_strength(extension):\n        uppercase = sum(c.isupper() for c in extension)\n        lowercase = sum(c.islower() for c in extension)\n        return uppercase - lowercase\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "python/74", "language": "python", "completion": "def rotate(word):\n        return word[-1] + word[:-1]\n\n    # Check if b or any of its rotations is a substring in a.\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = rotate(b)\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\")) # => False\nprint(cycpattern_check(\"hello\",\"ell\")) # => True\nprint(cycpattern_check(\"whassup\",\"psus\")) # => False\nprint(cycpattern_check(\"abab\",\"baa\")) # => True\nprint(cycpattern_check(\"efef\",\"eeff\")) # => False\nprint(cycpattern_check(\"himenss\",\"simen\")) # => True"}
{"task_id": "python/75", "language": "python", "completion": "roman_dict = {\n        10: \"x\", 9: \"ix\", 8: \"vIII\", 7: \"viI\", 6: \"vi\", 5: \"v\", 4: \"iv\", 3: \"iii\",\n        2: \"ii\", 1: \"i\"\n    }\n    result = ''\n    for key in sorted(roman_dict.keys(), reverse=True):\n        while number >= key:\n            result += roman_dict[key]\n            number -= key\n            \n    return result"}
{"task_id": "python/76", "language": "python", "completion": "# Hier die L\u00f6sung in Python:\n    \n    # Sort the sides to make sure a is the longest side and c is the shortest side.\n    a, b, c = sorted([a, b, c])\n    \n    # A triangle is right angle if the square of the longest side (hypotenuse) equals the sum of squares of other two sides\n    return a**2 == b**2 + c**2"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = []\n    \n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    # Wenn der String keine Buchstaben enth\u00e4lt, kehre den String um.\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n        \n    return ''.join(result)"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":  # check if 'text' is an empty string\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# test the function with some inputs\nprint(string_to_md5('Hello world'))  # prints: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n  \nprint(generate_integers(2, 8)) # => [2, 4, 6, 8]\nprint(generate_integers(8, 2)) # => [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # => []"}

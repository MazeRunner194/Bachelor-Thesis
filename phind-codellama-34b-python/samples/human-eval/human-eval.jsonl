{"task_id": "HumanEval/0", "completion": "    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if count == 0:\n                start = i\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n    return result\n\n# Test cases\nprint(separate_paren_groups('( ) (( )) (( )( ))')) # ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "    return round(number - int(number), 2)"}
{"task_id": "HumanEval/3", "completion": "\n    current_balance = 0\n\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    differences = [abs(n - mean) for n in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    \n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n        \n    return result"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n            else:\n                raise ValueError(f\"Invalid character '{char}' in group {group}\")\n        if current_depth != 0:\n            raise ValueError(f\"Unmatched parentheses in group {group}\")\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    lst_sum = sum(numbers)\n    lst_prod = 1\n    \n    for num in numbers:\n        lst_prod *= num\n        \n    return lst_sum, lst_prod"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    output = []\n    \n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        output.append(max_so_far)\n        \n    return output"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    \n    # Find the longest palindromic suffix\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            break\n            \n    # The rest of string (prefix) should be appended reversed to the end \n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    # Convert the strings to integers, perform xor operation and convert back to string\n    xor = int(a, 2) ^ int(b, 2)\n    return bin(xor)[2:].zfill(len(b))\n\n\ndef find_next_sparse(arr: List[int]) -> int:\n    \"\"\" Input is an array of integers. The function should return the next value that is strictly greater than any\n    value in the array and is a perfect square.\n    >>> find_next_sparse([1, 3, 5, 7])\n    9\n    \"\"\"\n    # Find maximum value in array\n    max_val = max(arr)\n    \n    # Find next perfect square that is strictly greater than the maximum value in the array\n    next_square = -1\n    i = 2\n    while next_square <= max_val:\n        next_square = i * i\n        i += 1\n        \n    return next_square\n\ndef find_next_sparse(arr: List[int]) -> int:\n    \"\"\" Input is an array of integers. The function should return the next value that is strictly greater than any\n    value in the array and is a perfect square.\n    >>> find_next_sparse([1, 3, 5, 7])\n    9\n    \"\"\"\n    # Find maximum value in array\n    max_val = max(arr)\n    \n    # Find next perfect square that is strictly greater than the maximum value in the array\n    i = 2\n    while (i * i <= max_val):\n        i += 1\n        \n    return i * i"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_str = \"\"\n    for s in strings:\n        len_s = len(s)\n        if len_s > max_len:\n            max_len = len_s\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a\n\nprint(greatest_common_divisor(3, 5)) # Output: 1\nprint(greatest_common_divisor(25, 15)) # Output: 5"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n):\n    return \" \".join([str(i) for i in range(n+1)])"}
{"task_id": "HumanEval/16", "completion": "    # lower() function is used to convert all the uppercase letters in a string into lowercase letters. This will ensure that our code works case insensitively.\n    # set() function returns a set object, which is an unordered collection of distinct hashable objects. So by converting the string into a set, we automatically get rid of any duplicate characters.\n    # len() function returns the length of the given object.\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('xyzXYZ'))  # 3\nprint(count_distinct_characters('Jerry'))  # 4\nprint(count_distinct_characters('Hannah'))  # 3\nprint(count_distinct_characters('12344567890'))  # 10\n\nThis function works by first converting the string to lowercase (to ensure case-insensitivity), then it converts the string into a set. A set in Python is an unordered collection of unique elements, which means that any duplicate characters will automatically be removed. Finally, we count the number of elements left in the set using the len() function. The result is the number of distinct characters in the string."}
{"task_id": "HumanEval/17", "completion": "    music = music_string.split()\n    result = []\n    for note in music:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    times = 0\n    i = string.find(substring)\n    while i != -1:\n        times += 1\n        i = string.find(substring, i + 1)\n    return times"}
{"task_id": "HumanEval/19", "completion": "\n    value = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    \n    numbers = numbers.split()\n    numbers.sort(key=lambda x: value[x])\n    return ' '.join(numbers)\n\nprint(sort_numbers('three one five'))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest_pair = min(zip(numbers[:-1], numbers[1:]), key=lambda x: abs(x[0] - x[1]))\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    diff = max_val - min_val\n    \n    if diff == 0: # If all numbers are the same, return a list of ones\n        return [1]*len(numbers)\n    \n    return [(x-min_val)/diff for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if type(val) == int]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    # start from the middle of the range (n//2), and go down to 2\n    for i in reversed(range(2, int(n/2)+1)): \n        if n % i == 0: \n            return i \n    return None"}
{"task_id": "HumanEval/25", "completion": "    result = []\n    i = 2\n    while i * i <= n:\n        if (n % i) == 0:\n            while (n % i) == 0:\n                result.append(i)\n                n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n# Test the function with some input\nprint(remove_duplicates([1, 2, 3, 2, 4]))"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [n for n in l if n > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef primes_upto(n):\n    \"\"\"Return a list of all primes up to a given number n.\n    >>> primes_upto(2)\n    [2]\n    >>> primes_upto(3)\n    [2, 3]\n    >>> primes_upto(10)\n    [2, 3, 5, 7]\n    >>> primes_upto(29)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \"\"\"\n    result = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 1:\n        return None\n    else:\n        for x in [-i for i in range(len(xs))]:\n            if poly(xs, x) == 0:\n                return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "    thirds = sorted(el for i, el in enumerate(l) if i % 3 == 0)\n    return [thirds.pop(0) if i % 3 == 0 else el for i, el in enumerate(l)]"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n\nprint(fizz_buzz(50)) # Expected output : 0\nprint(fizz_buzz(78)) # Expected output : 2\nprint(fizz_buzz(79)) # Expected output : 3"}
{"task_id": "HumanEval/37", "completion": "    even_indices = list(range(0, len(l), 2)) # gets all even indices\n    even_values = sorted([l[i] for i in even_indices]) # sorts the values at those indicies\n    \n    new_list = [None]*len(l) # creates a new list of the same size as the original\n    j = 0 # keeps track of our position in the sorted even values\n    \n    for i in range(len(new_list)): # iterates over each index in the new list\n        if i % 2 == 0: # checks if it's an even index\n            new_list[i] = even_values[j] # puts the next sorted even value there\n            j += 1 # increments our position in the sorted even values\n        else: # it's an odd index\n            new_list[i] = l[i] # keeps the same value as before\n            \n    return new_list"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # shift elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] if len(group) == 3 else '') + group[0:-1] for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases:\ninput_str = 'hello, world!'\nencoded_str = encode_cyclic(input_str)\nprint(\"Encoded string:\", encoded_str)\ndecoded_str = decode_cyclic(encoded_str)\nprint(\"Decoded string:\", decoded_str)"}
{"task_id": "HumanEval/39", "completion": "\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(num**0.5)+1,2):\n            if num%i == 0:\n                return False\n        return True\n\ndef fibo_seq(n: int) -> list[int]:\n    seq = [0, 1]\n    while len(seq) < n+1:\n        seq.append(seq[-1] + seq[-2])\n    return seq[:-1]   # returns sequence of Fibonacci numbers up to the nth number\n\ndef prime_fib(n: int):\n    count = 0\n    fibo = fibo_seq(n*10)  # multiplies by 10 because it's estimated that the nth prime Fibonacci number is less than n*10 \n    for num in fibo:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n            \n# Test cases\nprint(prime_fib(1)) # Expected output : 2\nprint(prime_fib(2)) # Expected output : 3\nprint(prime_fib(3)) # Expected output : 5\nprint(prime_fib(4)) # Expected output : 13\nprint(prime_fib(5)) # Expected output : 89"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3: return False  # not enough elements to make a triple\n    l.sort()  # sort the list in ascending order\n    for i in range(len(l)):\n        if i > 0 and l[i] == l[i - 1]:  # skip duplicate numbers\n            continue\n        j = i + 1  # start from next index since we are using two pointers approach\n        k = len(l) - 1  # end index\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0: return True\n            elif total > 0:  # move the start pointer forward\n                k -= 1\n            else:  # move the end pointer backward\n                j += 1\n    return False  # no triple found that sums to zero"}
{"task_id": "HumanEval/41", "completion": "    return n ** 2"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n    \n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n\nprint(pairs_sum_to_zero([1, 3, 5, 0])) # Expected output: False\nprint(pairs_sum_to_zero([1, 3, -2, 1])) # Expected output: False\nprint(pairs_sum_to_zero([1, 2, 3, 7])) # Expected output: False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) # Expected output: True\nprint(pairs_sum_to_zero([1])) # Expected output: False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    \n    result = []\n    \n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n        \n    return ''.join(result[::-1])\n\nprint(change_base(8, 3))  # Outputs: 22\nprint(change_base(8, 2))  # Outputs: 1000\nprint(change_base(7, 2))  # Outputs: 111"}
{"task_id": "HumanEval/45", "completion": "    return (0.5) * a * h\n\nprint(triangle_area(5, 3))\n\ndef rectangle_area(l, w):\n    \"\"\"Given length and width return area for a rectangle.\n    >>> rectangle_area(5, 3)\n    15\n    \"\"\"\n    return l * w\n\nprint(rectangle_area(5, 3))\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(5)\n    78.54\n    \"\"\"\n    import math\n    return math.pi * r ** 2\n\nprint(circle_area(5))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[-1]"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    s = sorted(l)\n    return (sum(s[n//2-1:n//2+1])/2.0 if n % 2 == 0 else s[n//2])\n\ndef median_grouped(data, interval):\n    \"\"\"Return the 50th percentile (median) for grouped data.\"\"\"\n    import bisect, itertools\n    data = sorted(data)\n    l1 = len(data)\n    if l1 == 0:\n        return None\n    elif l1 == 1:\n        return data[0]\n    else:\n        groups = []\n        for i in range(0,l1-1):\n            if data[i+1] - data[i] < interval: continue\n            groups.append((data[i], data[i+1]))\n        l2 = len(groups)\n        \n        k = (50 / 100) * l2\n        f = math.floor(k)\n        c = math.ceil(k)\n        if f == c:\n            return groups[int(f)][1]\n        else:\n            part_lower = 100 * (k - f)\n            part_higher = 100 * (c - k)\n            lower_limit = ((groups[int(f)][1] * part_lower) / (part_lower + part_higher)) if part_lower != 0 else 0\n            upper_limit = ((groups[int(c)][0] * part_higher) / (part_lower + part_higher)) if part_higher != 0 else 0\n            return lower_limit + upper_limit\n        \n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "completion": "    text = text.replace(\" \", \"\")     # Remove spaces \n    text = text.lower()               # Convert to lowercase\n    return text == text[::-1]         # Compare to the reverse of the string"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    else:\n        res = 2\n        for _ in range(n-1):\n            res = (res**2) % p\n        return res % p"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\n# test case\nmessage = 'hello'\nencoded_message = encode_shift(message)\ndecoded_message = decode_shift(encoded_message)\nprint(f\"Original message: {message}\")\nprint(f\"Encoded message: {encoded_message}\")\nprint(f\"Decoded message: {decoded_message}\")"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    text = [char for char in text if char not in vowels]\n    return \"\".join(text)"}
{"task_id": "HumanEval/52", "completion": "    \n    for i in l:\n        if i >= t:\n            return False\n    return True\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n\nprint(fib(10)) #55\nprint(fib(8))  #21\nprint(fib(5))  #5"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:  # it's \">\"\n            if not stack:\n                return False  # No matching opening bracket\n            stack.pop()  # Remove the matching opening bracket\n    return len(stack) == 0  # Check if all brackets have been matched"}
{"task_id": "HumanEval/57", "completion": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2\n\n\ndef product_of_list(lst: list):\n    \"\"\"product_of_list is a function that multiplies all numbers in the given list.\n    >>> product_of_list([1, 2, 3, 4])\n    24\n    >>> product_of_list([5, 6, 7, 8])\n    2100\n    >>> product_of_list([9, 10, 11, 12])\n    1320\n    >>> product_of_list([13])\n    13\n    \"\"\"\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n\ndef is_prime(n: int) -> bool:\n    \"\"\"is_prime checks if a number is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(17)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        return True\n\ndef count_primes(start: int, end: int) -> int:\n    \"\"\"count_primes counts the number of prime numbers between start and end.\n    >>> count_primes(1, 20)\n    8\n    >>> count_primes(5, 20)\n    6\n    >>> count_primes(30, 40)\n    6\n    \"\"\"\n    return sum(is_prime(n) for n in range(start, end + 1))"}
{"task_id": "HumanEval/61", "completion": "    # Initialize counter to track the brackets\n    count = 0\n\n    # Iterate over each character in the string\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            if count == 0:\n                return False\n            else:\n                count -= 1\n    \n    # If there are any opening brackets left without a corresponding closing bracket, return False\n    if count != 0:\n        return False\n\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [(i+1)*x for i, x in enumerate(xs)][1:] # Shift all coefficients to right and remove first element (derivative of 0 is 0)"}
{"task_id": "HumanEval/63", "completion": "    # Base cases\n    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 1\n    \n    fibfib_seq = [0, 0, 1] + [0]*(n-3)\n    \n    for i in range(3, n+1):\n        fibfib_seq[i] = fibfib_seq[i-1] + fibfib_seq[i-2] + fibfib_seq[i-3]\n    \n    return fibfib_seq[-1]"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for c in s:\n        if c.lower() in 'aeiou':\n            count += 1\n    if s[-1] == 'y':\n        count -= 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)\n    len_x = len(str_x)\n\n    if shift >= len_x:\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum([ord(c) for c in s if c.isupper()])"}
{"task_id": "HumanEval/67", "completion": "    # extract numbers from string using regular expression\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    \n    # calculate the number of mango fruits using arithmetic operation\n    mango_fruits = n - sum(numbers)\n    \n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "    if not arr: return []\n    result = [float('inf'), -1]\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < result[0]:\n            result = [arr[i], i]\n    return result if result[1] >= 0 else []"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    count = Counter(lst)\n    result = max((k for k in lst if count[k] >= k), default=-1)\n    return result"}
{"task_id": "HumanEval/70", "completion": "    # Check if the list is empty or contains only one element.\n    # In both cases, just return the original list.\n    if len(lst) < 2:\n        return lst\n    \n    # Sort the list in ascending order to get the minimum and maximum values.\n    sorted_list = sorted(lst)\n    \n    # Create a result list to store the strange sorted elements.\n    result = []\n    \n    # While there are still elements left in the sorted list,\n    # get and append the minimum and maximum values to the result list.\n    while sorted_list:\n        result.append(sorted_list.pop(0))  # Get and append min value\n        if sorted_list:\n            result.append(sorted_list.pop(-1))  # Get and append max value\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "    \n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    \n    # If the list is a palindrome already, no changes are needed.\n    if arr == arr[::-1]:\n        return 0\n        \n    # Calculate the mismatches between the first and last elements in the list recursively.\n    mismatches = [i for i in range(n // 2) if arr[i] != arr[-i - 1]]\n    \n    # The number of changes is the length of the mismatches list.\n    return len(mismatches)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    len1 = sum([len(i) for i in lst1])\n    len2 = sum([len(i) for i in lst2])\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= n:\n            if not n % i:\n                return False\n            i += 6\n        return True\n\n    factors = []\n    for x in range(2, int(a ** 0.5)+1):\n        if a % x == 0 and is_prime(x) and is_prime(int(a / x)):\n            factors.append(x)\n            factors.append(int(a / x))\n    return len(factors) == 3 and all([is_prime(f) for f in factors])\n\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(50)) # False\nprint(is_multiply_prime(105)) # True\nprint(is_multiply_prime(42)) # True\nprint(is_multiply_prime(997)) # True\nprint(is_multiply_prime(843)) # False"}
{"task_id": "HumanEval/76", "completion": "\n    return n ** int(x**(1/n)) == x"}
{"task_id": "HumanEval/77", "completion": "    \n    c = int(round(a ** (1. / 3)))\n    \n    return c * c * c == a or (c - 1) * (c - 1) * (c - 1) == a or (c + 1) * (c + 1) * (c + 1) == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [('E' if gpa == 0 else\n             'D-' if gpa > 0 and gpa <= 0.7 else\n             'D' if gpa > 0.7 and gpa <= 1.0 else\n             'D+' if gpa > 1.0 and gpa <= 1.3 else\n             'C-' if gpa > 1.3 and gpa <= 1.7 else\n             'C' if gpa > 1.7 and gpa <= 2.0 else\n             'C+' if gpa > 2.0 and gpa <= 2.3 else\n             'B-' if gpa > 2.3 and gpa <= 2.7 else\n             'B' if gpa > 2.7 and gpa <= 3.0 else\n             'B+' if gpa > 3.0 and gpa <= 3.3 else\n             'A-' if gpa > 3.3 and gpa <= 3.7 else\n             'A' if gpa > 3.7 and gpa < 4.0 else\n             'A+' if gpa == 4.0 else \"Invalid GPA\") for gpa in grades]"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while (i * i <= n):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    # We can solve this problem by simple mathematical calculation.\n    # Since it's a positive number, it always starts with 1 and ends with 9.\n    # Except when n equals to 1, in which case the count is 1 because there's only one digit 1.\n    return 9 * (10 ** (n - 1)) if n > 1 else 1"}
{"task_id": "HumanEval/84", "completion": "    def to_binary(n):\n        return bin(n).replace(\"0b\", \"\")\n    \n    def sum_of_digits(N):\n        total = 0\n        while N > 0:\n            total += N % 10\n            N //= 10\n        return total\n    \n    return to_binary(sum_of_digits(N))"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    # Initializing a variable to keep track of the sum.\n    total = 0\n    \n    # Looping through the list at odd indices only and adding to the total if it's an even number.\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    \n    # Returning the sum.\n    return total"}
{"task_id": "HumanEval/86", "completion": "    # Splitting the string into a list of words and punctuation\n    word_list = s.split()\n    \n    new_word_list = []\n    \n    for i in range(len(word_list)):\n        if not word_list[i].isalpha():  # check if word is not alphabetic (means it's punctuation)\n            new_word_list.append(word_list[i])  # if it's punctuation, add as it is to the list\n        else:\n            word = ''.join(sorted(word_list[i]))  # sort characters in word based on ASCII value\n            new_word_list.append(word)  # add sorted word to the list\n    \n    return ' '.join(new_word_list)  # join words with spaces in between and return\n\n# Test cases\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    \n    for row_index, row in enumerate(lst):\n        for column_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, column_index))\n                \n    # sort by rows in ascending order and columns in descending order\n    return sorted(result, key=lambda x:(x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array: # If the list is empty.\n        return []\n    elif (array[0]+array[-1]) % 2 == 0: # If the sum of first and last elements in the array is even.\n        return sorted(array, reverse=True)\n    else: # If the sum of first and last elements in the array is odd.\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= \"y\" else -6\n            new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            result += new_char\n        else:\n            result += char\n            \n    return result"}
{"task_id": "HumanEval/90", "completion": "    \n    if len(lst) < 2:\n        return None\n    first = second = float('inf')\n    for n in lst:\n        if n < first:\n            second = first\n            first = n\n        elif n < second and n > first:\n            second = n\n    if second == float('inf'):\n        return None\n    else:\n        return second"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # split the text into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    \n    # count the number of boredoms\n    num_boredoms = sum(s.strip().startswith('I') for s in sentences)\n    \n    return num_boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and ((x == y + z) or (y == x + z) or (z == x + y)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    for char in message:\n        if char in vowels.keys():\n            encoded_message += vowels[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n    else:\n        return sum([int(i) for i in str(max_prime)])"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    lower_count = sum(key.islower() for key in dict)\n    upper_count = sum(key.isupper() for key in dict)\n    \n    return (lower_count == len(dict)) or (upper_count == len(dict))"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    primes = []\n    for x in range(n):\n        if is_prime(x):\n            primes.append(x)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # find the unit digit of a and b by taking modulo by 10\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    # multiply the two unit digits together\n    result = unit_digit_a * unit_digit_b\n    return result"}
{"task_id": "HumanEval/98", "completion": "    def is_vowel(c):\n        return c in 'AEIOU'\n\n    upper_vowels = [c for i, c in enumerate(s) if i % 2 == 0 and c.isupper() and is_vowel(c)]\n    return len(upper_vowels)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        if num - int(num) < 0.5 or (int(num)+1)-num < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if int(num) - num < 0.5 or abs((int(num)-1)-abs(num)):\n            return int(num)\n        else:\n            return int(num) - 1"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    current = n\n    for _ in range(n):\n        result.append(current)\n        current += 1 if current % 2 == 0 else 2\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.replace(\",\", \"\").split()"}
{"task_id": "HumanEval/102", "completion": "    # start by checking if x is bigger than y. If so, they are not in correct order. Return -1\n    if x > y:\n        return -1\n    \n    # initialize the biggest even number to None\n    max_even = None\n\n    # loop from x to y inclusively\n    for i in range(x, y + 1):\n        # check if this number is even and bigger than the current maximum\n        if i % 2 == 0 and (max_even is None or i > max_even):\n            max_even = i\n            \n    # return the biggest even number found. If no such number was found, it's still None, so return -1\n    return max_even if max_even is not None else -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        binary = bin(avg).replace(\"0b\", \"\")\n        return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for i in x:\n        if all(int(d) % 2 != 0 for d in str(i)):\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "\n    result = []\n    for num in sorted(arr, reverse=True):\n        if 0 < num < 10:\n            switcher = {\n                1: \"One\",\n                2: \"Two\",\n                3: \"Three\",\n                4: \"Four\",\n                5: \"Five\",\n                6: \"Six\",\n                7: \"Seven\",\n                8: \"Eight\",\n                9: \"Nine\"\n            }\n            result.append(switcher.get(num))\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_numbers = sum([j for j in range(1, i+1)])\n            result.append(sum_numbers)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    \n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(i) for i in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return True\n    \n    # Find the index of minimum value in the array\n    min_index = arr.index(min(arr))\n    \n    # If the minimum is at the end, no need to shift\n    if min_index == n - 1:\n        return True\n        \n    # Checking for the first occurrence of min value from the end towards beginning\n    for i in range(n-1, min_index-1, -1):\n        if arr[i] < arr[i-1]:\n            return False\n            \n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_nums = [n for n in lst1 if n % 2 != 0] # list of odd numbers in lst1\n    even_nums = [n for n in lst2 if n % 2 == 0] # list of even numbers in lst2\n    \n    # If the number of odd elements in lst1 is greater than the number of even elements in lst2, return \"NO\"\n    if len(odd_nums) > len(even_nums):\n        return \"NO\"\n      \n    # Otherwise, return \"YES\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    from collections import Counter\n    \n    count = dict(Counter(test.split()))\n\n    if not count: return {}\n    \n    max_value = max(count.values())\n    \n    result = {k: v for k, v in count.items() if v == max_value}\n\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # delete all characters in s that are equal to any character in c\n    res_str = ''.join([i for i in s if i not in c])\n    \n    # check if the result string is a palindrome\n    is_palindrome = res_str == res_str[::-1]\n    \n    return (res_str, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count_odd = sum(int(c) % 2 for c in s)\n        new_string = (\"the number of odd elements \" + str(count_odd) +\n                       \"n the str\" + str(count_odd) + \"ng \" + str(count_odd) +\n                       \" of the \" + str(count_odd) + \"nput.\")\n        result.append(new_string)\n    return result\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "    current_sum = max_sum = nums[0]\n    for i in range(1,len(nums)):\n        current_sum = min(current_sum + nums[i],nums[i])\n        max_sum = min(max_sum,current_sum)\n    return max_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))"}
{"task_id": "HumanEval/115", "completion": "    total_drops = 0\n    for row in grid:\n        # Count number of ones in the row and divide by bucket capacity to get full fills\n        drops, remainder = divmod(row.count(1), capacity)\n        \n        # If there is a remainder, we need to use one more bucket (since it's less than capacity)\n        if remainder > 0:\n            drops += 1\n        total_drops += drops\n    return total_drops"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Define custom sort function that first sorts by count of '1's in binary representation\n    # and then by the value itself if counts are equal.\n    def custom_sort(x):\n        return (bin(x).count('1'), x)\n\n    # Use built-in sort() with key as custom_sort function defined above.\n    arr.sort(key=custom_sort)\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    candidate_vowels = [c for c in reversed(word) if c in vowels]\n    return candidate_vowels[0] if candidate_vowels else ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Initialize count to 0, it will keep track of open parentheses.\n    count = 0\n    \n    # Iterate through each character in the first string\n    for char in lst[0]:\n        if char == '(':\n            # If the character is an open parenthesis, increment count\n            count += 1\n        else:\n            # If the character is a closed parenthesis, decrement count\n            count -= 1\n            \n    # At this point, count should be 0 if the string was good.\n    if count != 0:\n        return 'No'\n    \n    # Now check the second string in the same way.\n    count = 0\n    for char in lst[1]:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            \n    if count != 0:\n        return 'No'\n    \n    # If both strings are good, then it's possible to make a good string.\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "    # Use Python's built-in heapq library to maintain a min-heap of size k\n    import heapq\n    heap = []\n    for num in arr:\n        # Push the number into the min-heap\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            # Only push to the heap if it's not larger than the smallest element in the heap\n            if num > heap[0]:\n                heapq.heapreplace(heap, num)\n    # Convert the min-heap into a sorted list and return it\n    return sorted(heap, reverse=True)"}
{"task_id": "HumanEval/121", "completion": "    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # slice the first 'k' elements from arr\n    first_k = arr[:k] \n    # filter only two digit numbers or less than three digits\n    filtered = [i for i in first_k if len(str(abs(i))) <=2]\n    # return the sum of the filtered list\n    return sum(filtered)"}
{"task_id": "HumanEval/123", "completion": "    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n        collatz.append(n)\n    \n    # Find the odd numbers in the sequence and return them sorted.\n    return sorted([num for num in collatz if num % 2 == 1])"}
{"task_id": "HumanEval/124", "completion": "import re\nfrom datetime import datetime\n\ndef valid_date(date):\n    # Check if date string is empty\n    if not date.strip():\n        return False\n    \n    # Regex pattern to check if date is in correct format 'mm-dd-yyyy'\n    pattern = r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\"\n    match = re.fullmatch(pattern, date)\n    \n    if not match:\n        return False\n    \n    # Try to convert string to datetime object\n    try:\n        datetime_object = datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if (ord(c) - ord('a')) % 2 == 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 0 or len(lst) == 1: return True\n    \n    if lst[0] > lst[1]: return False\n    \n    for i in range(2, len(lst)):\n        if lst[i - 2] >= lst[i - 1] or lst[i - 1] > lst[i]:\n            return False\n            \n    return True\n\nprint(is_sorted([5])) # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5])) # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5])) # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # \u279e False"}
{"task_id": "HumanEval/127", "completion": "import math\n\ndef intersection(interval1, interval2):\n    # Check if intervals overlap\n    if max(interval1[0], interval2[0]) > min(interval1[1], interval2[1]):\n        return \"NO\"\n    \n    # Calculate length of intersection and check if it's prime\n    length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n    if length < 2:\n        return \"NO\"\n    if length == 2 or length == 3:\n        return \"YES\"\n    for i in range(2, math.isqrt(length) + 1): # Only need to check up to sqrt(n)\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n  # Initialize product of signs as 1 (for positive numbers)\n  product_of_signs = 1\n  \n  # If arr is empty, return None\n  if len(arr) == 0:\n    return None\n  \n  sum_magnitudes = 0\n  \n  for num in arr:\n    # For every negative number, multiply product of signs with -1\n    if num < 0:\n      product_of_signs *= -1\n      \n    # Add the magnitude (positive version) of the number to sum_magnitudes\n    sum_magnitudes += abs(num)\n  \n  # Return the result as product of signs multiplied by sum of magnitudes\n  return product_of_signs * sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "    \n    # Initialize priority queue with all cells on the grid, where each cell is a tuple of its value and coordinates.\n    # Prioritize by value in ascending order. If multiple cells have same value then prioritize by coordinates in \n    # ascending order.\n    from heapq import heappush, heappop\n    pq = []\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            heappush(pq, (grid[r][c], r, c))\n    \n    # Keep track of visited cells using a set.\n    visited = set()\n    \n    # Initialize min path with maximum value.\n    min_path = [float('inf')] * k\n\n    while pq:\n        val, r, c = heappop(pq)\n        \n        if (r, c) not in visited:\n            visited.add((r, c))\n            \n            # Check for all neighbors of current cell and update min path accordingly.\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = r + dr, c + dc\n                \n                if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] not in min_path:\n                    new_min_path = sorted([val] + [v for v in min_path if v != float('inf')])[:k]\n                    min_path = new_min_path + ([float('inf')] * (k - len(new_min_path)))\n\n    # Return the minimum path.\n    return sorted([val for val in min_path if val != float('inf')])"}
{"task_id": "HumanEval/130", "completion": "    # Initializing the base cases for the Tribonacci sequence.\n    if (n == 0):\n        return [3]\n    elif (n == 1):\n        return [3, 1]\n    elif (n == 2):\n        return [3, 1, 2]\n\n    # Initializing the list with base cases.\n    seq = [3, 1, 2]\n\n    # Generating the Tribonacci sequence for n > 2.\n    for i in range(3, n + 1):\n        if (i % 2 == 0):\n            seq.append(seq[i - 1] + 1)\n        else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq"}
{"task_id": "HumanEval/131", "completion": "\n    # convert n to a string, then loop through each character (which are the digits)\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    \n    # multiply all odd digits together\n    product = 1 if len(odd_digits) > 0 else 0\n    for digit in odd_digits:\n        product *= digit\n        \n    return product\n\n# Test cases\nprint(digits(1))   # 1\nprint(digits(4))   # 0\nprint(digits(235)) # 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    counter = 0\n    for char in string:\n        if char == '[':\n            counter += 1\n        elif char == ']':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter != 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(math.ceil(i)**2 for i in lst)\n```python\nimport math\n\n# testing our function with the provided examples:\nprint(sum_squares([1,2,3])) # prints 14\nprint(sum_squares([1,4,9])) # prints 98\nprint(sum_squares([1,3,5,7])) # prints 84\nprint(sum_squares([1.4,4.2,0])) # prints 29\nprint(sum_squares([-2.4,1,1])) # prints 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    \n    last_char = txt[-1]\n    \n    # Check if the last character is a letter\n    if not last_char.isalpha():\n        return False\n\n    # Check if the last character is part of word\n    if len(txt) > 1 and txt[-2] != ' ':\n        return False\n\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # find elements that are not greater than or equal to the element immediately preceding it.\n    indices = [i for i in range(len(arr) - 1, 0, -1) if arr[i] < arr[i-1]]\n    \n    # return the largest index, or -1 if no such index exists\n    return max(indices) if indices else -1"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    \n    for i in lst:\n        if type(i) != int or i == 0:\n            continue\n            \n        elif i < 0 and (neg is None or i > neg):\n            neg = i\n            \n        elif i > 0 and (pos is None or i < pos):\n            pos = i\n    \n    return (neg, pos)"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        return None\n    else:\n        if a == b:\n            return None\n        elif isinstance(a, str):\n            a = float(a.replace(\",\",\".\"))\n            b = float(b.replace(\",\",\".\"))\n            return max(a, b)\n        else:\n            return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "    if n < 0:\n        return False\n    \n    if (n % 2 != 0):\n        return False\n        \n    total = 0\n    count = 4\n    \n    while count > 0 and n >= 2:\n        total += 2\n        n -= 2\n        count -= 1\n        \n    if n == 0 and count == 0:\n        return True\n        \n    return False"}
{"task_id": "HumanEval/139", "completion": "    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"'n' must be a positive integer.\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of an integer.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n        \nprint(special_factorial(4))"}
{"task_id": "HumanEval/140", "completion": "    \n    # Split the string into words and join them with underscore.\n    text = '_'.join(text.split())\n    \n    # Replace all - with spaces, then split by spaces and join with -.\n    text = '-'.join(text.split('-'))\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "    \ndef file_name_check(file_name):\n    import re\n\n    match = re.match(r\"[a-zA-Z][a-zA-Z0-9]{,2}\\.(txt|exe|dll)\", file_name)\n    if match:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\nprint(file_name_check(\"Test3.exe\"))  # => 'Yes'\nprint(file_name_check(\"A1b2.txt\"))   # => 'Yes'\nprint(file_name_check(\".test.txt\"))    # => 'No'\nprint(file_name_check(\"test.docx\"))     # => 'No'"}
{"task_id": "HumanEval/142", "completion": "    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] *= 3\n        elif i % 4 == 0:\n            lst[i] *= 4\n            \n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if (n % i) == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    result = []\n    \n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n            \n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    \n    result = x_fraction * n_fraction\n    \n    if result.denominator == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return [x[0] for x in sorted((n, sum(int(d) for d in str(abs(n)))) for n in nums)]"}
{"task_id": "HumanEval/146", "completion": "    \n    count = 0\n    \n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n+1)]\n    count = 0\n    \n    # Iterate over all possible triplets (a[i], a[j], a[k]) where i < j < k.\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # Check if the sum is a multiple of 3.\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planet_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n                    \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n        \n    planet1_index = planet_order.index(planet1)\n    planet2_index = planet_order.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planet_order[planet1_index+1:planet2_index])\n    else:\n        return tuple(planet_order[planet2_index+1:planet1_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Delete the strings that have odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort by length and alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"task_id": "HumanEval/150", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    return x if is_prime(n) else y\n  \nprint(x_or_y(7, 34, 12)) # returns: 34\nprint(x_or_y(15, 8, 5)) # returns: 5"}
{"task_id": "HumanEval/151", "completion": "    # initialize sum to 0\n    sum = 0\n    \n    # iterate through the list\n    for num in lst:\n        # check if number is positive integer and odd\n        if num > 0 and type(num) == int and num % 2 != 0:\n            # square the number and add to sum\n            sum += num**2\n    \n    return sum"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for g, a in zip(game, guess):\n        result.append(abs(g - a))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    caps = [sum(1 for c in ext if c.isupper()) for ext in extensions]\n    sm = [sum(1 for c in ext if c.islower()) for ext in extensions]\n    strengths = [c - s for c, s in zip(caps, sm)]\n    max_strength = max(strengths)\n    idx = strengths.index(max_strength)\n    return '.'.join([class_name, extensions[idx]])"}
{"task_id": "HumanEval/154", "completion": "    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    return any(rotation in a for rotation in rotations)"}
{"task_id": "HumanEval/155", "completion": "    num = abs(num) # We convert the number into positive to count the digits\n    str_num = str(num) # Convert integer into string to iterate through each digit\n    evens = sum(1 for s in str_num if int(s) % 2 == 0)\n    odds = sum(1 for s in str_num if int(s) % 2 != 0)\n    return (evens, odds)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number == 0:\n        return \"\"\n    \n    values = [1,4,5,9,10,40,50,90,100,400,500,900,1000]\n    symbols = [\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"m\"]\n    \n    i = len(values) - 2\n    \n    while number <= values[i]:\n        i -= 1\n        \n    return symbols[i] + int_to_mini_roman(number - values[i])\n\nprint(int_to_mini_roman(19)) # xix\nprint(int_to_mini_roman(152)) # clii\nprint(int_to_mini_roman(426)) # cdxxvi"}
{"task_id": "HumanEval/157", "completion": "    # sort the sides\n    sides = sorted([a, b, c])\n    \n    # a^2 + b^2 = c^2 is the property of right angle triangle\n    return (sides[0]**2 + sides[1]**2) == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    words.sort() # sort in lexicographical order\n    return max(words, key=lambda x: len(set(x))) # pick the one with max unique characters\n\nprint(find_max([\"name\", \"of\", \"string\"])) # \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"])) # \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])) # \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, numbers):\n  # Create a mapping of operator to its respective function in Python\n  operators_map = {\n      '+': lambda x, y: x + y,\n      '-': lambda x, y: x - y,\n      '*': lambda x, y: x * y,\n      '//': lambda x, y: x // y,\n      '**': lambda x, y: x ** y\n  }\n\n  # Create an empty result variable to store the result of operations\n  result = numbers[0]\n  \n  # Start from index 1 and iterate through all elements in operators list\n  for i in range(len(operators)):\n      operator_fn = operators_map[operators[i]]\n      # Apply the operator function on current result and the next number\n      result = operator_fn(result, numbers[i+1])\n      \n  return result"}
{"task_id": "HumanEval/161", "completion": "    \n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n            \n    if not has_letter:\n        return result[::-1]\n    \n    return result"}
{"task_id": "HumanEval/162", "completion": " import hashlib\n\ndef string_to_md5(text):\n  if text==\"\":\n        return None\n    else:\n        import hashlib\n        md5hash = hashlib.md5()\n        md5hash.update(text)\n        return md5hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    def get_digits(n):\n        return [int(d) for d in str(n)]\n\n    result = []\n    if a < b:\n        n = a\n        while n <= b:\n            digits = get_digits(n)\n            if all(d % 2 == 0 for d in digits):\n                result.append(int(''.join(str(d) for d in sorted(digits))))\n            n += 1\n    else:\n        n = a\n        while n >= b:\n            digits = get_digits(n)\n            if all(d % 2 == 0 for d in digits):\n                result.append(int(''.join(str(d) for d in sorted(digits))))\n            n -= 1\n    return sorted(result)"}

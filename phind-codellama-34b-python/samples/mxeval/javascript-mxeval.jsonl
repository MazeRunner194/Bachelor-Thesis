{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "for (let i = 0; i < numbers.length - 1; ++i) {\n        for (let j = i + 1; j < numbers.length; ++j) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconsole.log(hasCloseElements([1.0, 2.0, 3.0], 0.5)); // False\nconsole.log(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // True"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "var result = [];\n    parenstring = parenstring.replace(/\\s+/g, ''); // remove spaces\n    var level = 0;\n    var startIndex = -1;\n    for (var i = 0; i < parenstring.length; i++) {\n        if (parenstring[i] === '(') {\n            if (level == 0) { // start new group\n                startIndex = i;\n            }\n            level++;\n        } else if (parenstring[i] === ')') {\n            level--;\n            if (level == 0) { // end of a group\n                result.push(parenstring.substring(startIndex, i + 1));\n            }\n        }\n    }\n    return result;\n}\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "return Math.abs(number - Math.floor(number));\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "let balance = 0;\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "let mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  \n    let absoluteDifferences = numbers.map(number => Math.abs(number - mean));\n  \n    return absoluteDifferences.reduce((acc, val) => acc + val, 0) / numbers.length;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "if (numbers.length === 0) return numbers;\n    \n    let result = [numbers[0]];\n  \n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimeter, numbers[i]);\n    }\n  \n    return result;\n}\n\nconsole.log(intersperse([], 4));\nconsole.log(intersperse([1, 2, 3], 4));"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "let result = [];\n    for (let str of parenstring.split(\" \")) {\n        let maxDepth = 0;\n        let currentDepth = 0;\n        for (let char of str) {\n            if (char === '(') {\n                currentDepth++;\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } else if (char === ')') {\n                currentDepth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "let result = [];\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    for (let num of numbers) {\n        if (num > maxSoFar) {\n            maxSoFar = num;\n        }\n        result.push(maxSoFar);\n    }\n    return result;\n}\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2])); // [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "if (string.length === 0) return '';\n  \n    let i = string.length - 1;\n    while (i >= 0 && string[i] !== string[0]) {\n        i--;\n    }\n  \n    const palindromicSuffix = string.slice(i);\n    const nonPalindromicPrefix = string.slice(0, i + 1).split('').reverse().join('');\n  \n    return string + nonPalindromicPrefix;\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "if (strings.length === 0) return \"none\";\n    let maxLength = -1;\n    let longestString = \"\";\n    for (let string of strings) {\n        if (string.length > maxLength) {\n            maxLength = string.length;\n            longestString = string;\n        }\n    }\n    return longestString;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "if (b === 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "let result = [];\n    for (let i = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "let set = new Set();\n    for (let char of string.toLowerCase()) {\n        if (!set.has(char)) {\n            set.add(char);\n        }\n    }\n    return set.size;\n}\n\nconsole.log(countDistinctCharacters('xyzXYZ')); // 3\nconsole.log(countDistinctCharacters('Jerry')); // 4"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "const notes = musicstring.split(' ');\n    let result = [];\n    for (let note of notes) {\n        if (note === 'o') {\n            result.push(4);\n        } else if (note === 'o|') {\n            result.push(2);\n        } else if (note === '.|') {\n            result.push(1);\n        }\n    }\n    return result;\n}\nconsole.log(parseMusic('o o| .| o| o| .| .| .| .| o o'));"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === substring[0]) {\n            const substr = string.slice(i, i + substring.length);\n            if (substr === substring) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(howManyTimes('', 'a')); // 0\nconsole.log(howManyTimes('aaa', 'a')); // 3\nconsole.log(howManyTimes('aaaa', 'aa')); // 3"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "// Define dictionary for number ordering.\n  const order = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  \n  // Split input string into array of numbers.\n  let arr = numbers.split(' ');\n\n  // Sort array based on dictionary order.\n  return arr.sort((a, b) => order[a] - order[b]).join(' ');\n}\nconsole.log(sortNumbers('three one five'));"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "let minDifference = Infinity;\n  let closestPair = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n\n    if (difference < minDifference) {\n      minDifference = difference;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return closestPair.sort((a, b) => a - b);\n}\n\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // [2.0, 2.0]"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "// Find the smallest and largest numbers in the list.\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    // Calculate the range of possible values.\n    let range = max - min;\n\n    // Rescale each number to its new value, which is its distance from the minimum divided by the range.\n    return numbers.map(num => (num - min) / range);\n}\n\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0]));"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "return values.filter(value => typeof value === 'number' && Number.isInteger(value));\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "for (let i = Math.floor(Math.sqrt(n)); i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "let factors = [];\n    let divisor = 2;\n\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n\n    return factors;\n}\n\nconsole.log(factorize(8)); // [2, 2, 2]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(70)); // [2, 5, 7]"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "let uniqueNumbers = [];\n    \n    for (let i of numbers) {\n        if (!uniqueNumbers.includes(i)) {\n            uniqueNumbers.push(i);\n        }\n    }\n    \n    return uniqueNumbers;\n}\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4])); // [1, 2, 3, 4]"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "return string.split('').map((char) => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n}\n\nconsole.log(flipCase('Hello'));"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "return strings.join(\"\");\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "return l.filter((e) => e > 0);\n}\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "if (n < 2) return false; // 0 and 1 are not prime numbers\n  \n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n      if (n % i === 0) return false;\n    }\n  \n    return true;\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "let indices = [];\n    let valuesAtIndices = [];\n\n    for (let i = 0; i < l.length; i++) {\n        if ((i + 1) % 3 === 0) {\n            indices.push(i);\n            valuesAtIndices.push(l[i]);\n        }\n    }\n\n    // Sort the values\n    valuesAtIndices.sort((a, b) => a - b);\n\n    let result = [...l];\n\n    for (let i = 0; i < indices.length; i++) {\n        result[indices[i]] = valuesAtIndices[i];\n    }\n\n    return result;\n}\n\nconsole.log(sortThird([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "return Array.from(new Set(l)).sort((a, b) => a - b);\n}\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(maxElement([1, 2, 3])) // 3\nconsole.log(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) // 123"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "let count = 0;\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && String(i).includes('7')) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nconsole.log(fizzBuzz(50)); // 0\nconsole.log(fizzBuzz(78)); // 2\nconsole.log(fizzBuzz(79)); // 3"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "// filter out the even indexed elements and sort them\n    let evens = l.filter((val, index) => index % 2 == 0).sort((a, b) => a - b);\n    // create result array by alternating between sorted/unsorted values\n    let res = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            res.push(evens.shift());\n        } else {\n            res.push(l[i]);\n        }\n    }\n    return res;\n}\n\nconsole.log(sortEven([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortEven([5, 6, 3, 4])); // [3, 6, 5, 4]"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "let fib = [2, 3];\n    let i = 3;\n    let num = 0;\n    while (primeCount(num) < n) {\n        num = fib[i-1] + fib[i-2];\n        fib.push(num);\n        i++;\n    }\n    return num;\n}\n\nfunction primeCount(n) {\n    let count = 0;\n    for (let i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nfunction isPrime(num) {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 2; i++) {\n        let j = i + 1;\n        let k = l.length - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] === 0) return true;\n            else if (l[i] + l[j] + l[k] > 0) k--;\n            else j++;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "return n*n;\n}\n\nconsole.log(carRaceCollision(2)); // 4"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "return l.map(x => x + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "let dict = {};\n    for (let num of l) {\n        if (!dict[num]) {\n            dict[num] = 0;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])) // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])) // True\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])) // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) // True\nconsole.log(pairs_sum_to_zero([1])) // False"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "if (x === 0) return \"0\";\n    let result = \"\";\n    while (x > 0) {\n        let remainder = x % base;\n        result = remainder.toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "// calculate the area using formula = 0.5*base*height\n    var area = 0.5 * a * h;\n    return area;\n}\n\nconsole.log(triangle_area(5,3));"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "if (n === 0) {\n        return 0;\n    }\n\n    let arr = [0, 0, 2, 0];\n\n    for (let i = 4; i <= n; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4];\n    }\n\n    return arr[n];\n}"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "l.sort(function(a, b){return a - b;});\n    \n    var half = Math.floor(l.length/2);\n\n    if(l.length % 2 == 0) {\n        return (l[half-1] + l[half]) / 2;\n    } else {\n        return l[half];\n    }\n}"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "const reversed = text.split(\"\").reverse().join(\"\");\n    return text === reversed;\n}\n\nconsole.log(isPalindrome(''));       // True\nconsole.log(isPalindrome('aba'));     // True\nconsole.log(isPalindrome('aaaaa'));   // True\nconsole.log(isPalindrome('zbcd'));    // False"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "let res = 1; // Initialize result\n  \n    // Update x if not divisible by p\n    for (let i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n  \n    return res;\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "return l.every(n => n < t);\n}"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "return x + y;\n}\n\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "// Create character count objects for both strings\n  const counts0 = {};\n  const counts1 = {};\n  \n  for (let i = 0; i < s0.length; i++) {\n    if (!counts0[s0[i]]) {\n      counts0[s0[i]] = 0;\n    }\n    counts0[s0[i]]++;\n  }\n  \n  for (let j = 0; j < s1.length; j++) {\n    if (!counts1[s1[j]]) {\n      counts1[s1[j]] = 0;\n    }\n    counts1[s1[j]]++;\n  }\n  \n  // Compare the two count objects\n  for (let key in counts0) {\n    if (!counts1[key] || counts1[key] !== counts0[key]) {\n      return false;\n    }\n  }\n  \n  return true;\n}"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "This function is recursive and uses memoization to avoid recomputing the same Fibonacci numbers multiple times. However, the time complexity of this function is exponential in the number of iterations n (specifically O(2^n)) because each function call branches into two new calls. This makes it unsuitable for large inputs.\n\nA more efficient approach would be to use a loop instead:"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "let stack = [];\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      // Push the opening bracket to the stack.\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      // Check for corresponding closing bracket in the stack.\n      if (stack.length > 0 && stack[stack.length - 1] == \"<\") {\n        stack.pop(); // If found, remove from stack.\n      } else {\n        return false; // If not found, brackets are unbalanced.\n      }\n    }\n  }\n\n  // Check for any leftover opening brackets in the stack.\n  if (stack.length === 0) {\n    return true; // Balanced if no leftovers.\n  } else {\n    return false; // Unbalanced if leftovers.\n  }\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "if (l.length <= 2) {\n        return true;\n    }\n    const diff = l[1] - l[0];\n    for (let i = 2; i < l.length; i++) {\n        if ((l[i] - l[i - 1]) !== diff) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "let set = new Set();\n\n    for (let i of l1) {\n        if (l2.includes(i)) {\n            set.add(i);\n        }\n    }\n\n    return Array.from(set).sort((a, b) => a - b);\n}\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "// Start checking from the largest number possible for prime factors.\n    let i = Math.floor(Math.sqrt(n));\n\n    while (i > 1) {\n        if (n % i === 0 && isPrime(i)) {\n            return i;\n        }\n        i--;\n    }\n\n    // If no prime factors found then the number itself is prime.\n    return n;\n}\n\nfunction isPrime(num) {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n}\n\nconsole.log(largestPrimeFactor(13195)); // Output: 29\nconsole.log(largestPrimeFactor(2048)); // Output: 2"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "let total = 0;\n    for (let i = 1; i <= n; i++) {\n        total += i;\n    }\n    return total;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else {\n            if (stack.length == 0) return false;\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(correctBracketing(\"(\")); // False\nconsole.log(correctBracketing(\"()\")); // True\nconsole.log(correctBracketing(\"(()())\")); // True\nconsole.log(correctBracketing(\")(()\")); // False"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "// Calculate the derivative by multiplying each coefficient by its corresponding power of x and reducing the power by 1.\n    return xs.slice(1).map((coefficient, index) => coefficient * (index + 1));\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    let a = 0;\n    let b = 0;\n    let c = 1;\n\n    for(let i=3; i<=n; i++) {\n        let temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n\n    return c;\n}\n\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i].toLowerCase()) != -1) {\n            count++;\n        }\n    }\n    \n    if (s[s.length-1] == 'y') {\n        count++;\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "let digits = x.toString().split('');\n    if (shift > digits.length) return digits.reverse().join('');\n    else {\n        return [...digits.slice(shift), ...digits.slice(0, shift)].join('');\n    }\n}\n\nconsole.log(circularShift(12, 1)); // \"21\"\nconsole.log(circularShift(12, 2)); // \"12\""}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\nconsole.log(digitsum(\"\")); // 0\nconsole.log(digitsum(\"abAB\")); // 131\nconsole.log(digitsum(\"abcCd\")); // 67\nconsole.log(digitsum(\"helloE\")); // 69\nconsole.log(digitsum(\"woArBld\")); // 131\nconsole.log(digitsum(\"aAaaaXa\")); // 153"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "let arr = s.split(' ');\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[3]);\n  \n    return n - apples - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); // 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); // 19"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "if (arr.length === 0) return []; // If array is empty, return [].\n  \n    let smallestEvenValue = Number.MAX_SAFE_INTEGER;\n    let indexOfSmallestEvenValue = -1;\n  \n    for(let i=0; i<arr.length; i++) {\n      if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue) { // Checking for even and lesser values\n        smallestEvenValue = arr[i];\n        indexOfSmallestEvenValue = i;\n      }\n    }\n  \n    if (indexOfSmallestEvenValue === -1) return []; // If there is no even value, return [].\n  \n    return [smallestEvenValue, indexOfSmallestEvenValue];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "let freq = {};\n\n    // Count frequencies of all integers in the list.\n    lst.forEach(x => {\n        if (freq[x] === undefined) {\n            freq[x] = 1;\n        } else {\n            freq[x] += 1;\n        }\n    });\n  \n    // Find out the greatest integer which frequency is greater or equal to itself.\n    for (let i = lst.length - 1; i >= 0; i--) {\n        if (freq[lst[i]] >= lst[i]) {\n            return lst[i];\n        }\n    }\n  \n    // If no such integer found, then return -1.\n    return -1;\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "if (lst.length === 0) return lst;\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result = [];\n    while (lst.length > 0) {\n        // remove from list min and max values\n        let indexMin = lst.indexOf(min);\n        if (indexMin != -1) lst.splice(indexMin, 1);\n        else min = Number.MAX_SAFE_INTEGER;\n\n        let indexMax = lst.indexOf(max);\n        if (indexMax != -1) lst.splice(indexMax, 1);\n        else max = Number.MIN_SAFE_INTEGER;\n        \n        // add values to result array\n        result.push(min);\n        if (lst.length > 0) result.push(max);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    } else {\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "// Check if q is a palindrome\n    const isPalindrome = (arr) => {\n        let reversedArr = arr.reverse();\n        return JSON.stringify(arr) === JSON.stringify(reversedArr);\n    };\n\n    // Check if sum of elements in q is less than or equal to w\n    const isWithinWeightLimit = (arr, limit) => {\n        let total = arr.reduce((a, b) => a + b, 0);\n        return total <= limit;\n    };\n\n    // Return true if both conditions are met\n    return isPalindrome(q) && isWithinWeightLimit(q, w);\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "let count = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n// Test cases:\nconsole.log(smallestChange([1,2,3,5,4,7,9,6])); // Output: 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // Output: 1\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // Output: 0"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "let count1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    let count2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n\n    if (count1 <= count2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "if (a <= 1 || a > 100) return false;\n    \n    const primes = [2, 3, 5, 7];\n    let factors = [];\n    \n    for (let i = 0; i < primes.length; i++) {\n        while (a % primes[i] === 0) {\n            a /= primes[i];\n            factors.push(primes[i]);\n        }\n        \n        if (factors.length > 3) return false;\n    }\n    \n    return factors.length == 3;\n}\n\nconsole.log(isMultiplyPrime(30)); // true\nconsole.log(isMultiplyPrime(56)); // false"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "if (n < 0 || x < 0) return false; // negative numbers are not valid\n    while (x > 1) {\n        if (x % n !== 0) return false; // if x is not divisible by n, it's not a simple power\n        x /= n;\n    }\n    return true;\n}\nconsole.log(isSimplePower(1, 4)); // => true\nconsole.log(isSimplePower(2, 2)); // => true\nconsole.log(isSimplePower(8, 2)); // => true\nconsole.log(isSimplePower(3, 2)); // => false\nconsole.log(isSimplePower(3, 1)); // => false\nconsole.log(isSimplePower(5, 3)); // => false"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "let root = Math.round(Math.pow(a, (1 / 3)));\n    return root * root * root === a;\n}\n\nconsole.log(iscube(1)); // True\nconsole.log(iscube(2)); // False\nconsole.log(iscube(-1)); // True\nconsole.log(iscube(64)); // True\nconsole.log(iscube(0)); // True\nconsole.log(iscube(180)); // False"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "let primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for (let digit of num) {\n        if (primeHexDigits.includes(digit)) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "let binary = (decimal).toString(2);\n    return `db${binary}db`;\n}\nconsole.log(decimalToBinary(15));  // Outputs: db1111db\nconsole.log(decimalToBinary(32));  // Outputs: db100000db"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "if (s.length < 3) {\n        return false;\n    }\n    \n    for (let i = 0; i <= s.length - 3; i++) {\n        const set = new Set([...s.slice(i, i + 3)]);\n        if (set.size !== 3) {\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "let letterGrades = [];\n    \n    for (let i=0; i < grades.length; i++){\n        if (grades[i] == 4.0) {\n            letterGrades.push('A+');\n        } else if(grades[i] > 3.7) {\n            letterGrades.push('A');\n        } else if(grades[i] > 3.3){\n            letterGrades.push('A-');\n        } else if(grades[i] > 3.0){\n            letterGrades.push('B+');\n        } else if(grades[i] > 2.7){\n            letterGrades.push('B');\n        } else if(grades[i] > 2.3){\n            letterGrades.push('B-');\n        } else if(grades[i] > 2.0){\n            letterGrades.push('C+');\n        } else if(grades[i] > 1.7){\n            letterGrades.push('C');\n        } else if(grades[i] > 1.3){\n            letterGrades.push('C-');\n        } else if(grades[i] > 1.0){\n            letterGrades.push('D+');\n        } else if(grades[i] > 0.7){\n            letterGrades.push('D');\n        } else if(grades[i] > 0.3){\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n    \n    return letterGrades;\n}"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "let len = string.length;\n\n    if (len <= 1) return false;\n    \n    for (let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++) {\n        if (!(len % i)) return false;\n    }\n\n    return true;\n}\n\nconsole.log(primeLength('Hello')); // True\nconsole.log(primeLength('abcdcba')); // True\nconsole.log(primeLength('kittens')); // True\nconsole.log(primeLength('orange')); // False"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "if (n <= 0 || !Number.isInteger(n)) {\n        return \"Invalid Input\";\n    }\n\n    let count = 0;\n    for (let i = Math.pow(10, n - 1); i < Math.pow(10, n); i++) {\n        if (i % 10 == 1 || i / Math.pow(10,n-1)==1){\n            count += 1;\n        }\n    }\n\n    return count;\n}\n\nconsole.log(startsOneEnds(2)); //4 because 10-19 and 21-30 have at least one number starting or ending with 1\nconsole.log(startsOneEnds(3)); //18 because 100-199, 201-299, 310-400, 510-600, 710-800, 910-1000 have at least one number starting or ending with 1"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum.toString(2).padStart(8, '0');\n}\nconsole.log(solve(1000)); // output: \"1\"\nconsole.log(solve(150));  // output: \"110\"\nconsole.log(solve(147));  // output: \"1100\""}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7])); // Output: 2"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "let words = s.split(\" \");\n    return words.map((word) => word.split(\"\").sort().join(\"\")).join(\" \");\n}\nconsole.log(antiShuffle('Hi')); // 'Hi'\nconsole.log(antiShuffle('hello')); // 'ehllo'\nconsole.log(antiShuffle('Hello World!!!')); // 'Hello !!!Wdlor'"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "// Create an empty array to store the coordinates.\n    let coordinates = [];\n\n    // Loop over the nested list (matrix).\n    for (let i = 0; i < lst.length; i++) {\n        // Check each element of the row.\n        for (let j = 0; j < lst[i].length; j++) {\n            // If the current element is equal to x, add the coordinate (row, column) in tuple form to the array.\n            if (lst[i][j] == x) coordinates.push([i, j]);\n        }\n    }\n\n    // Sort the coordinates by rows in ascending order and columns in descending order using a custom sort function.\n    coordinates.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n\n    // Return the sorted array of coordinates.\n    return coordinates;\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "if (array.length === 0 || array.length === 1) return array;\n  \n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n      return array.sort((a, b) => b - a);\n    } else {\n      return array.sort((a, b) => a - b);\n    }\n}"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let asciiVal = s.charCodeAt(i);\n        if (asciiVal >= 65 && asciiVal <= 90) {\n            // Uppercase letters\n            result += String.fromCharCode(((asciiVal - 65 + 4) % 26) + 65);\n        } else if (asciiVal >= 97 && asciiVal <= 122) {\n            // Lowercase letters\n            result += String.fromCharCode(((asciiVal - 97 + 4) % 26) + 97);\n        } else {\n            // Non-alphabet characters\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(encrypt('hi')); // Output: 'lm'\nconsole.log(encrypt('asdfghjkl')); // Output: 'ewhjklnop'\nconsole.log(encrypt('gf')); // Output: 'kj'\nconsole.log(encrypt('et')); // Output: 'ix'"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "if (lst.length < 2) {\n        return undefined;\n    }\n    \n    let smallest = Number.MAX_SAFE_INTEGER;\n    let secondSmallest = Number.MAX_SAFE_INTEGER;\n  \n    for (let i = 0; i < lst.length; i++) {\n        if(lst[i] < smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i] < secondSmallest && lst[i] > smallest){\n            secondSmallest = lst[i];\n        }\n    }\n  \n    return secondSmallest === Number.MAX_SAFE_INTEGER ? undefined : secondSmallest;\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "const sentences = s.match(/[A-Za-z\\.\\?\\'!]+/g);\n  let count = 0;\n  \n  if (sentences) {\n    for (let i=0; i < sentences.length; i++) {\n      if (sentences[i].startsWith(\"I\")) {\n        count++;\n      }\n    }\n  }\n  \n  return count;\n}\n\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "// Check if all inputs are integers\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    // Check if one of the numbers equals to sum of other two\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    }\n  }\n  \n  return false;\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "let result = '';\n\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] >= 'A' && message[i] <= 'Z') {\n            // Swap case of all letters\n            if (message[i] >= 'A' && message[i] <= 'Y') {\n                result += String.fromCharCode(message[i].charCodeAt(0) ^ 32);\n            } else {\n                result += message[i];\n            }\n        } else if (message[i] >= 'a' && message[i] <= 'z') {\n            // Swap case of all letters\n            if (message[i] >= 'a' && message[i] <= 'y') {\n                result += String.fromCharCode(message[i].charCodeAt(0) ^ 32);\n            } else {\n                result += message[i];\n            }\n        }\n    }\n\n    return result;\n}\nconsole.log(encode('test')); // 'TGST'\nconsole.log(encode('This is a message')); // 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "let maxPrime = -Infinity;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrimeNumber(lst[i]) && lst[i] > maxPrime) {\n            maxPrime = lst[i];\n        }\n    }\n\n    let sumOfDigits = 0;\n    while (maxPrime) {\n        sumOfDigits += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n    }\n\n    return sumOfDigits;\n}\n\nfunction isPrimeNumber(n) {\n    if (n <= 1) return false;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n\n    let sqrtN = Math.floor(Math.sqrt(n));\n    for (let i = 3; i <= sqrtN; i += 2) {\n        if (n % i === 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let allLower = true;\n  let allUpper = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key.toLowerCase() !== key) {\n      allLower = false;\n    }\n    if (key.toUpperCase() !== key) {\n      allUpper = false;\n    }\n  }\n  return allLower || allUpper;\n}\n\nconsole.log(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // True\nconsole.log(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // False\nconsole.log(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // False\nconsole.log(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // False\nconsole.log(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); // True"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "let primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\nfunction isPrime(num) {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n}\n\nconsole.log(countUpTo(5)); // [2,3]\nconsole.log(countUpTo(11)); // [2,3,5,7]\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(20)); // [2,3,5,7,11,13,17,19]\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(18)); // [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "let unitDigitA = a % 10;\n    let unitDigitB = b % 10;\n\n    return unitDigitA * unitDigitB;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    \n    for (let i = 0; i < s.length; i += 2) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "// Check if value is a number or string representation of a number\n    if (typeof value !== \"number\" && typeof value !== \"string\") {\n        throw new TypeError(`Expected argument to be a number or string, got ${typeof value}`);\n    }\n  \n    const num = Number(value);\n  \n    // Check if the given value is a valid number\n    if (isNaN(num)) {\n        throw new Error(\"Invalid number\");\n    }\n  \n    return Math.round(num);\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "let result = [];\n    for(let i=0; i<n; i++) {\n        if (n%2 === 0){\n            result.push(n);\n            n += 1;\n        } else{\n            result.push(n);\n            n += 2;\n        }\n    }\n    return result;\n}\nconsole.log(makeAPile(3)); // [3, 5, 7]"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "return s.split(/[\\s,]+/);\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "// if x is larger than y, then swap them\n    if (x > y) [x, y] = [y, x];\n  \n    // check the range from largest to smallest \n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) return i;\n    }\n  \n    // no even number found in the range\n    return -1;\n}\n\nconsole.log(chooseNum(12, 15)); // outputs: 14\nconsole.log(chooseNum(13, 12)); // outputs: -1"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "if (n > m) {\n        return -1;\n    } else {\n        const avg = Math.round((m + n) / 2);\n        return `0b${avg.toString(2)}`;\n    }\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "let result = [];\n    \n    for (let num of x) {\n        if (!/[02468]$/.test(num)) {\n            // No even digit found in the number.\n            result.push(num);\n        }\n    }\n    \n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "let result = [];\n    const numToWord = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    const sortedArr = arr.sort((a, b) => a - b);\n    const reversedArr = sortedArr.reverse();\n    for (let i of reversedArr) {\n        if (i >= 1 && i <= 9) {\n            result.push(numToWord[i]);\n        }\n    }\n    return result;\n}\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(byLength([])); // []\nconsole.log(byLength([1, -1 , 55])); // ['One']"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "let result = [];\n    \n    for(let i=0; i<n; i++){\n        if(i%2 === 0){\n            let fact = 1;\n            for (let j = 1; j <= i+1; j++) {\n                fact *= j;\n            }\n            result.push(fact);\n        } else {\n            let sum = 0;\n            for(let k=1; k<=i+1;k++){\n                sum += k;\n            }\n            result.push(sum);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "let evenCount = 0, oddCount = 0;\n    for(let i=1; i<=n;i++){\n        if(isPalindrome(i)){\n            (i%2==0)?evenCount++:oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nfunction isPalindrome(n){\n    let rev = parseInt(String(n).split('').reverse().join(''));\n    return n === rev;\n}\n\nconsole.log(evenOddPalindrome(3)); // Output: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Output: [4, 6]"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "let positiveCount = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 || (arr[i] < 0 && arr[i].toString().substring(1, arr[i].toString().length).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0) > 0)) {\n            positiveCount++;\n        }\n    }\n\n    return positiveCount;\n}\n\nconsole.log(countNums([])); // expected: 0\nconsole.log(countNums([-1, 11, -11])); // expected: 1\nconsole.log(countNums([1, 1, 2])); // expected: 3"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "if (arr.length === 0) return true;\n\n    let max_value = Math.max(...arr);\n    let max_index = arr.indexOf(max_value);\n\n    if (max_index === arr.length - 1 || max_index === arr.length - 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // True\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // False"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "// Count odd numbers in lst1 and even numbers in lst2\n    let countOddLst1 = lst1.filter(num => num % 2 != 0).length;\n    let countEvenLst2 = lst2.filter(num => num % 2 == 0).length;\n\n    // If there are more odd numbers in lst1 than even numbers in lst2, return 'NO'\n    if (countOddLst1 > countEvenLst2) {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])) // => \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])) // => \"NO\""}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "let count = {};\n    let maxCount = 0;\n    let result = {};\n    \n    // Count frequency of each character\n    for (let char of test.split(\" \")) {\n        if (count[char]) {\n            count[char]++;\n        } else {\n            count[char] = 1;\n        }\n        \n        maxCount = Math.max(maxCount, count[char]);\n    }\n    \n    // Select only those characters that have the same frequency as maximum\n    for (let char in count) {\n        if (count[char] === maxCount) {\n            result[char] = maxCount;\n        }\n    }\n    \n    return result;\n}\n\nconsole.log(histogram('a b c')); // {'a': 1, 'b': 1, 'c': 1}\nconsole.log(histogram('a b b a')); // {'a': 2, 'b': 2}\nconsole.log(histogram('a b c a b')); // {'a': 2, 'b': 2}\nconsole.log(histogram('b b b b a')); // {'b': 4}\nconsole.log(histogram('')); // {}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "let str = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            str += char;\n        }\n    }\n    const reversedStr = str.split('').reverse().join('');\n    return [str, str === reversedStr];\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\")); // ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // ['cdedc', true]"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "return lst.map((str, index) => {\n        let count = 0;\n        for (let char of str) {\n            if (char % 2 === 1) count++;\n        }\n        return `the number of odd elements ${count}n the str${count}ng ${index + 1} of the ${count}nput.`;\n    });\n}"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "if (nums.length === 0) return 'Input array is empty';\n    let min_sum = nums[0];\n    for(let i = 1; i < nums.length; i++) {\n        nums[i] += Math.min(nums[i-1], 0); // accumulate the minimum sum till this position\n        min_sum = Math.min(min_sum, nums[i]);\n    }\n    return min_sum;\n}\n\nconsole.log(minsubarraysum([2, 3, 4, 1, 2, 4]));\nconsole.log(minsubarraysum([-1, -2, -3]));"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "let total = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            total += grid[i][j];\n        }\n    }\n    return Math.ceil(total / capacity);\n}\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length; //count ones in the binary representation of a\n        let y = b.toString(2).replace(/0/g, '').length; //count ones in the binary representation of b\n        return x - y || a - b; //return diff between count of ones or if they are same return diff between numbers itself\n    });\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "if (s === '') return []; // If the string is empty, returns an empty list.\n    let words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n        let consonants = 0;\n        for(let char of word){\n            if(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'].includes(char.toLowerCase())){\n                consonants++;\n            }\n        }\n        if (consonants === n) result.push(word);\n    }\n    return result;\n}\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let reversedWord = word.split(\"\").reverse();\n    \n    for (let i = 0; i < reversedWord.length - 2; i++) {\n        if(vowels.includes(reversedWord[i]) && !vowels.includes(reversedWord[i+1]) && !vowels.includes(reversedWord[i+2])){\n            return reversedWord[i];\n        }\n    }\n    \n    return \"\";  // Return empty string if no vowel is found between two consonants from the right side\n}\n\nconsole.log(getClosestVowel(\"yogurt\"));  // Expected output: \"u\"\nconsole.log(getClosestVowel(\"FULL\"));  // Expected output: \"U\"\nconsole.log(getClosestVowel(\"quick\"));  // Expected output: \"\"\nconsole.log(getClosestVowel(\"ab\"));  // Expected output: \"\""}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "let str1 = lst[0];\n    let str2 = lst[1];\n\n    // Count number of open and closed parentheses in both strings.\n    let totalOpen = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] === \"(\") {\n            totalOpen++;\n        } else {\n            totalOpen--;\n        }\n    }\n\n    let totalClose = 0;\n    for (let j = 0; j < str2.length; j++) {\n        if (str2[j] === \")\") {\n            totalClose++;\n        } else {\n            totalClose--;\n        }\n    }\n\n    // If total number of open and close parentheses is not equal, return 'No'.\n    if (totalOpen !== totalClose) {\n        return \"No\";\n    }\n\n    // If total number of open and close parentheses are both 0 or positive, return 'Yes'.\n    return \"Yes\";\n}\n\nconsole.log(matchParens(['()(', ')'])); // 'Yes'\nconsole.log(matchParens([')', ')'])); // 'No'"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.length >= k) break;\n        insertIntoSortedList(result, arr[i], k);\n    }\n    return result;\n}\n\nfunction insertIntoSortedList(list, value, maxSize) {\n    if (list.length == 0) {\n        list.push(value);\n        return;\n    }\n    let low = 0, high = list.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((high + low) / 2);\n        if (list[mid] < value) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    if (list.length >= maxSize && list[low] <= list[list.length - 1]) return;\n    list.splice(low, 0, value);\n}\n\nconsole.log(maximum([-3, -4, 5], 3)); //[-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); //[4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); //[2]"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "let sum = 0;\n    for (let i=0;i<lst.length;i+=2){\n        if(lst[i] % 2 === 1) sum += lst[i];\n    }\n    return sum;\n}\nconsole.log(solution([5, 8, 7, 1])); // Output: 12\nconsole.log(solution([3, 3, 3, 3, 3])); // Output: 9\nconsole.log(solution([30, 13, 24, 321])); // Output: 0"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "let result = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            result += arr[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "let result = [];\n    while (n != 1) {\n        if (n % 2 !== 0) {\n            result.push(n);\n        }\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(getOddCollatz(5)); // [1, 5]"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "// Check if date is not empty and in correct format\n    const regex = /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([12][0-9]{3})$/;\n    if (!date || !regex.test(date)) {\n        return false;\n    }\n\n    // Split date into month, day and year\n    const [month, day, year] = date.split('-').map(Number);\n\n    // Check number of days in a month\n    if (month === 2) {\n        if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\n            // Leap year\n            if (day < 1 || day > 29) return false;\n        } else {\n            if (day < 1 || day > 28) return false;\n        }\n    } else if ([4, 6, 9, 11].includes(month)) {\n        // April, June, September and November have 30 days\n        if (day < 1 || day > 30) return false;\n    } else if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {\n        // January, March, May, July, August, October and December have 31 days\n        if (day < 1 || day > 31) return false;\n    } else {\n        return false;\n    }\n\n    return true;\n}\n\nconsole.log(validDate('03-11-2000')); // True\nconsole.log(validDate('15-01-2012')); // False\nconsole.log(validDate('04-0-2040')); // False\nconsole.log(validDate('06-04-2020')); // True\nconsole.log(validDate('06/04/2020')); // False"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "if (txt.includes(\" \")) return txt.split(\" \");\n    else if (txt.includes(\",\")) return txt.split(\",\");\n    else {\n        let res = [...txt].filter(c => c >= 'a' && c <= 'z').map(c => ord(c));\n        return res.filter((value, index) => index % 2 !== 0).length;\n    }\n}\nfunction ord(char){\n    return char.charCodeAt(0) - 'a'.charCodeAt(0);\n}\nconsole.log(splitWords(\"Hello world!\")) // \u279e [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"Hello,world!\")) // \u279e [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"abcdef\")) // == 3"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "if (new Set(lst).size !== lst.length) return false; // check for duplicate numbers\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] >= lst[i + 1]) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n  \n    const intersectionLength = end - start + 1;\n  \n    for(let i = 2; i <= Math.sqrt(intersectionLength); i++) {\n        if(intersectionLength % i === 0) return \"NO\"\n    }\n    return \"YES\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "if (arr.length === 0) {\n        return \"none\";\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; ++i) {\n        let num = Math.abs(arr[i]); // get magnitude of number\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        }\n        sum += num;\n    }\n    return prod * sum;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "let n = grid.length;\n    let queue = [[[grid[0][0], 0, 0], 0]]; // [cell_value, x, y], steps\n    let visited = new Set();\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    \n    while (queue.length) {\n        let current = queue.shift();\n        \n        if (current[1] === n - 1 && current[2] === n - 1 && current[0][1] == k) {\n            return current[0].slice(0, k);\n        }\n        \n        for (let dir of directions) {\n            let x = current[1] + dir[0];\n            let y = current[2] + dir[1];\n            \n            if (x >= 0 && x < n && y >= 0 && y < n && !visited.has(current[0][0]) && k > 0) {\n                visited.add(grid[x][y]);\n                \n                queue.push([[grid[x][y], ...current[0]], current[1] + 1]);\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "if (n < 0) return [];\n    var res = [1];\n    if (n >= 1) res.push(3);\n    for(var i = 2; i <= n; i++) {\n        if(i % 2 === 0){\n            res.push(1 + i / 2);\n        } else {\n            res.push(res[res.length - 1] + res[res.length - 2] + res[res.length - 3] * 2);\n        }\n    }\n    return res;\n}"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "let prod = 1;\n    let flag = false;\n    for (let digit of String(n)) {\n        if (digit % 2 != 0) {\n            prod *= Number(digit);\n            flag = true;\n        }\n    }\n    return flag ? prod : 0;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "var stack = [];\n    for (var i = 0; i < string.length; i++) {\n        if (string[i] == '[') {\n            stack.push('[');\n        } else if (stack.length > 0 && stack[stack.length - 1] == '[' && string[i] == ']') {\n            stack.pop();\n            continue;\n        } else {\n            return false;\n        }\n    }\n    \n    return stack.length == 0;\n}"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "return lst.map(Math.ceil).reduce((accumulator, currentValue) => accumulator + Math.pow(currentValue, 2), 0);\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "// If the text is empty, return false.\n    if (txt === '') {\n        return false;\n    }\n\n    // Get the last character of the text.\n    const lastCharacter = txt[txt.length - 1];\n\n    // Check if the last character is an alphabetical letter that is not a part of a word.\n    if (lastCharacter.match(/([a-z]|[A-Z])/)) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "let idx = arr.length - 2;\n    \n    while (idx >= 0 && arr[idx] < arr[idx + 1]) {\n        --idx;\n    }\n    \n    return idx == -1 ? -1 : idx + 1;\n}\n\nconsole.log(canArrange([1,2,4,3,5])) // 3\nconsole.log(canArrange([1,2,3])) // -1\nconsole.log(canArrange([5,4,3,2,1])) // -1\nconsole.log(canArrange([1,2,3,4,5])) // -1"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "let negatives = lst.filter(n => n < 0);\n    let positives = lst.filter(n => n > 0);\n  \n    let a = negatives.length ? Math.max(...negatives) : null;\n    let b = positives.length ? Math.min(...positives) : null;\n\n    return (a, b);\n}\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) // Expected: (null, 1)\nconsole.log(largestSmallestIntegers([])) // Expected: (null, null)\nconsole.log(largestSmallestIntegers([0])) // Expected: (null, null)"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "let res = \"\";\n    if (typeof a === typeof b) {\n        if (typeof a == \"number\") {\n            if (a > b) {\n                res = a;\n            } else if (a < b) {\n                res = b;\n            } else {\n                return \"none\";\n            }\n        } else if (typeof a == \"string\") {\n            let pointA = parseFloat(a.replace(\",\", \".\"));\n            let pointB = parseFloat(b.replace(\",\", \".\"));\n            if (pointA > pointB) {\n                res = a;\n            } else if (pointA < pointB) {\n                res = b;\n            } else {\n                return \"none\";\n            }\n        }\n    } else {\n        return \"Error: Variables are of different types.\";\n    }\n    return res;\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "if (n % 2 !== 0 || n < 8) return false;\n  return true;\n}"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "let result = 1;\n    for (let i = n; i > 0; --i) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconsole.log(specialFactorial(4));"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "const regex = / {2,}/g;\n  return text.replace(/ /g, '_').replace(regex, '-');\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "let match = /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n    return match.test(filename)?'Yes':'No';\n}\nconsole.log(fileNameCheck(\"example.txt\"));  // => 'Yes'\nconsole.log(fileNameCheck(\"1example.dll\")); // => 'No'\nconsole.log(fileNameCheck(\".hello\"));       // => 'No'\nconsole.log(fileNameCheck(\"HelloWorld.xls\"));// => 'No'\nconsole.log(fileNameCheck(\"A123.txt\"));     // => 'Yes'"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "const isPrime = (num) => num > 1 && !(num % 2 || num % 3 || num % 5);\n\n    return sentence.split(' ')\n        .filter((word, i) => isPrime(i + 1))\n        .join(' ');\n}\n\nconsole.log(wordsInSentence(\"This is a test\")); // Output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "let [xNum, xDen] = x.split('/').map(Number);\n    let [nNum, nDen] = n.split('/').map(Number);\n\n    // Calculate the resulting numerator and denominator\n    let resNum = xNum * nNum;\n    let resDen = xDen * nDen;\n\n    return (resNum / resDen) % 1 === 0;\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "// Calculate the sum of digits for each number in the list.\n    let numDigitsSum = nums.map((num, index) => ({\n        originalIndex: index,\n        digitsSum: String(Math.abs(num)).split('').reduce((sum, digit) => sum + parseInt(digit), 0)\n    }));\n  \n    // Sort the list of numbers by their sum of digits.\n    numDigitsSum.sort((a, b) => {\n        if (a.digitsSum === b.digitsSum) {\n            return a.originalIndex - b.originalIndex;\n        }\n        return a.digitsSum - b.digitsSum;\n    });\n  \n    // Get the sorted list of original numbers according to their indexes in numDigitsSum array.\n    return numDigitsSum.map(({originalIndex}) => nums[originalIndex]);\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "let count = 0;\n    \n    for (let num of nums) {\n        if (num > 10 && ((Math.abs(num) % 10) == 1 || (Math.abs(num) % 10) == 3 || (Math.abs(num) % 10) == 5 || (Math.abs(num) % 10) == 7 || (Math.abs(num) % 10) == 9)) {\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "const a = new Array(n);\n    let count = 0;\n  \n    for(let i=0; i<n; i++) {\n        a[i] = (i + 1) * (i + 1) - i + 1;\n    }\n  \n    for(let i=0; i<n-2; i++) {\n        for(let j=i+1; j<n-1; j++) {\n            for(let k=j+1; k<n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 === 0) count++;\n            }\n        }\n    }\n  \n    return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "const planets = [\n        'Mercury', 'Venus', 'Earth', 'Mars', \n        'Jupiter', 'Saturn', 'Uranus', 'Neptune'\n    ];\n    \n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return ();\n    }\n    \n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    if (index1 < index2) {\n        return planets.slice(index1 + 1, index2);\n    } else {\n        return planets.slice(index2 + 1, index1);\n    }\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "let result = lst.filter(str => str.length % 2 === 0);\n    result.sort((a, b) => a.length - b.length || a < b ? -1 : 1);\n    return result;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconsole.log(xOrY(7, 34, 12)); // 34\nconsole.log(xOrY(15, 8, 5)); // 5"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "let sum = 0;\n    for (let num of lst) {\n        if (num > 0 && num % 2 !== 0) {\n            sum += Math.pow(num, 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "return game.map((value, index) => Math.abs(value - guess[index]));\n}\n\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])); // outputs: [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])); // outputs: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "let maxStrength = -Infinity;\n    let maxExt = '';\n    for (let ext of extensions) {\n        let upperCase = [...ext].filter(c => c === c.toUpperCase()).length;\n        let lowerCase = [...ext].filter(c => c === c.toLowerCase()).length;\n        let strength = upperCase - lowerCase;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            maxExt = ext;\n        }\n    }\n    return `${classname}.${maxExt}`;\n}\n\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: \"my_class.AA\"\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: \"Slices.SErviNGSliCes\""}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "if (b.length > a.length) return false;\n    for (let i = 0; i < b.length; i++) {\n        const rotatedB = b.slice(i) + b.slice(0, i);\n        if (a.includes(rotatedB)) return true;\n    }\n    return false;\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\")); // => False\nconsole.log(cycpatternCheck(\"hello\",\"ell\")); // => True\nconsole.log(cycpatternCheck(\"whassup\",\"psus\")); // => False\nconsole.log(cycpatternCheck(\"abab\",\"baa\")); // => True\nconsole.log(cycpatternCheck(\"efef\",\"eeff\")); // => False\nconsole.log(cycpatternCheck(\"himenss\",\"simen\")); // => True"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "let str = Math.abs(num).toString();\n    let evens = str.split('').filter(x => x % 2 == 0).length;\n    let odds = str.split('').filter(x => x % 2 != 0).length;\n    return (evens, odds);\n}\nconsole.log(evenOddCount(-12));\nconsole.log(evenOddCount(123));"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "const digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  const romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\n  let result = '';\n\n  for (let i = 0; number > 0; i++) {\n    while (number >= digits[i]) {\n      number -= digits[i];\n      result += romans[i];\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "//sort the sides to make sure that a^2 + b^2 = c^2 where c is the longest side.\n    const sides = [a, b, c].sort((a,b) => a - b);\n    \n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(rightAngleTriangle(3, 4, 5)); // true\nconsole.log(rightAngleTriangle(1, 2, 3)); // false"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "let maxUniqueChars = -1;\n    let maxWord = '';\n  \n    for (let word of words) {\n        const uniqueChars = new Set([...word]); // creates a set with unique characters from the word\n        if (uniqueChars.size > maxUniqueChars) {\n            maxUniqueChars = uniqueChars.size;\n            maxWord = word;\n        } else if (uniqueChars.size === maxUniqueChars) {\n            maxWord = maxWord < word ? maxWord : word; // lexicographical comparison\n        }\n    }\n  \n    return maxWord;\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));  // string\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));  // enam\nconsole.log(findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]));   // aaaaaaa"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "if (remaining >= need) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "// First create a string representation of the algebraic expression.\n    let exp = operand[0];\n    for (let i=0; i<operator.length; i++) {\n        exp += operator[i] + operand[i+1];\n    }\n    \n    // Then use JavaScript's built-in eval function to evaluate the expression. \n    return eval(exp);\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];\nconsole.log(doAlgebra(operator, operand)); // prints: 9"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if ('a' <= s[i] && s[i] <= 'z') {\n            result += s[i].toUpperCase();\n        } else if('A' <= s[i] && s[i] <= 'Z'){\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    \n    return result.length > 0 ? result : s.split('').reverse().join('');\n}\n\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "if (text === '') {\n        return \"none\";\n    } else {\n        const crypto = require('crypto');\n        const hash = crypto.createHash('md5').update(text).digest(\"hex\");\n        return hash;\n    }\n}\nconsole.log(stringToMd5('Hello world'));"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "if (a > b) {\n        let temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    let result = [];\n    for (let i = a; i <= b; i++) {\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    \n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []"}

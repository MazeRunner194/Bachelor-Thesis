{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "for(let i = 0; i < numbers.length; ++i){\n        for(let j = i+1; j < numbers.length; ++j){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "paren_string = paren_string.replace(/ /g, ''); // Remove all white spaces\n    let result = [];\n    let count = 0;\n    let tempString = \"\";\n    for(let i=0;i<paren_string.length;i++) {\n        if(paren_string[i]=='(') {\n            if(count===0) { // Start of new group\n                tempString=\"\";\n            }\n            tempString+=paren_string[i];\n            count++;\n        } else if(paren_string[i]==')') {\n            tempString+=paren_string[i];\n            count--;\n            if(count===0) { // End of current group\n                result.push(tempString);\n            }\n        }\n    }\n    return result;\n} \n// Test the function\nconsole.log(separate_paren_groups('( ) (( )) (( )( ))'));"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "return Math.abs(Math.floor(number0)- number0);\n}"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "let balance = 0;\n\n    for(let op of operations){\n        balance += op;\n\n        if(balance < 0) return true;\n    }\n\n    return false;\n}\n\nconsole.log(below_zero([1, 2, 3])) // False\nconsole.log(below_zero([1, 2, -4, 5])) // True"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean = numbers.reduce((a,b) => a + b, 0) / numbers.length;\n  \n    return numbers.map(n => Math.abs(n - mean)).reduce((a,b) => a + b, 0) / numbers.length;\n}"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "let result = [];\n    for(let i=0;i<numbers.length;i++){\n        if(i!==0){\n            result.push(delimeter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parenGroups = paren_string.split(' ');\n    let levelsOfNesting: number[] = [];\n\n    for(let group of parenGroups){\n        let maxDepth = 0;\n        let currentDepth = 0;\n        \n        for(let char of group){\n            if (char == \"(\") {\n                currentDepth++;\n                \n                // Keep track of the maximum depth\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } \n            else if (char == \")\"){\n                currentDepth--;\n            }\n        }\n        \n        levelsOfNesting.push(maxDepth);\n    }\n    \n    return levelsOfNesting;\n};"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "let sum = 0;\n    let product = 1;\n    for(let num of numbers){\n        sum += num;\n        product *= num;\n    }\n    return [sum, product];\n}"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "if(numbers.length == 0) {\n        return [];\n    }\n    let result: Array<number> = new Array<number>();\n    let maxVal = numbers[0];\n    result.push(maxVal);\n    \n    for (let i=1;i < numbers.length; i++) {\n        if (numbers[i] > maxVal) {\n            maxVal = numbers[i];\n        }\n        result.push(maxVal);\n    }\n    return result;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "let reversedString = '';\n    if(string0.length == 1) return string0 + string0; // If the string only has one character, return that character repeated twice.\n    else if(string0.length == 2) return string0; // If the string only has two characters, return it as is.\n    for (let i = string0.length - 1; i > 0; --i){\n        const substr = string0.substring(i);\n        if (substr === string0.substring(0, string0.length - i).split('').reverse().join('')) {\n            reversedString = string0.substring(0, string0.length - i).split('').reverse().join('');\n            break;\n        }\n    }\n    return string0 + reversedString;\n};"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "let res = '';\n    for(let i = 0; i < a.length; i++) {\n        if(a[i] !== b[i]) res += '1';\n        else res += '0';\n    }\n    return res;\n};\n\nconsole.log(string_xor('010', '110')); // expected output: \"100\""}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "if(strings.length === 0){\n        return undefined;\n    } else {\n        let maxLength = -1;\n        let longestString;\n\n        for(let i=0 ; i < strings.length; i++){\n            if(strings[i].length > maxLength){\n                maxLength = strings[i].length;\n                longestString = strings[i];\n            }\n        }\n        return longestString;\n    }\n}\n\nconsole.log(longest([])); // undefined\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n   return a;\n};"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "let result = [];\n    for(let i=1;i<=string0.length;i++){\n        result.push(string0.substr(0,i));\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "let sequence = '';\n    for (let i=0; i<=n; i++) {\n        sequence += `${i} `;\n    }\n    return sequence.trim();\n};\nconsole.log(string_sequence(5));"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "return new Set(string0.toLowerCase()).size;\n};"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const musicNotes = music_string.split(' ');\n    let beatsPerNote: number[] = [];\n    for(let i=0;i<musicNotes.length;i++) {\n        if(musicNotes[i] === 'o'){\n            beatsPerNote.push(4);\n        } else if (musicNotes[i] === 'o|') {\n            beatsPerNote.push(2);\n        } else if (musicNotes[i] === '.|') {\n            beatsPerNote.push(1);\n        }\n    }\n    return beatsPerNote;\n}"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "let times = 0;\n    \n    for(let i=0;i<string0.length;i++) {\n        if (string0[i] == substring[0]) {\n            let substr = string0.substring(i, i + substring.length);\n            if (substr === substring) times++;\n        }\n    }\n    \n    return times;\n}\n\nconsole.log(how_many_times('', 'a'));  // outputs: 0\nconsole.log(how_many_times('aaa', 'a'));  // outputs: 3\nconsole.log(how_many_times('aaaa', 'aa'));  // outputs: 3"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const nums = numbers.split(\" \");\n    const order = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n    \n    return nums.sort((a, b) => order.indexOf(a) - order.indexOf(b)).join(\" \");\n};"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "numbers.sort((a, b) => a - b); // Sort the array in ascending order\n    let smallestDiff = Infinity;\n    let result = [];\n    for(let i=0; i < numbers.length-1; i++){\n        if (numbers[i+1] - numbers[i] < smallestDiff) {\n            smallestDiff = numbers[i+1] - numbers[i];\n            result = [numbers[i], numbers[i+1]]; // update the closest pair\n        } \n    }\n    return result;\n};\n\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]));\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]));"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "let minVal = Math.min(...numbers);\n    let maxVal = Math.max(...numbers);\n    let range = maxVal - minVal;\n\n    return numbers.map(num => (num - minVal) / range);\n}\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])) // [0, 0.25, 0.5, 0.75, 1]"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "let integers : number[] = [];\n    for(let value of values){\n        if(typeof value === \"number\" && Number.isInteger(value)){\n            integers.push(value);\n        }\n    }\n    return integers;\n}\n\nconsole.log(filter_integers(['a', 3.14, 5])); // [5]\nconsole.log(filter_integers([1, 2, 3, 'abc', {}, []])); // [1, 2, 3]"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "return string0.length;\n}"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "for(let i = Math.floor(Math.sqrt(n)); i > 0; i--) {\n        if(n % i == 0){\n            return n/i;\n        }\n    }\n};"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "let factors = [];\n    for(let i=2;i<=Math.sqrt(n);i++)\n    {\n        while(n%i==0)\n        {\n            if(factors.indexOf(i) == -1){\n                factors.push(i);\n            }\n             n/=i;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(8)); // [2, 2, 2]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(70)); // [2, 5, 7]"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "let result: Array<number> = [];\n    for(let i=0; i < numbers.length;i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "let string1 = '';\n    \n    for(let i=0;i<string0.length;i++){\n        if(string0[i] === string0[i].toUpperCase()){\n            string1 += string0[i].toLowerCase();\n        }else{\n            string1 += string0[i].toUpperCase();\n        }\n    }\n    \n    return string1;\n}\n\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "return strings.join('');\n}"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "return l.filter(num => num > 0)\n}"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n  \n    let sqrtN = Math.sqrt(n);\n  \n    for (let i = 2; i <= sqrtN; i++) {\n      if (n % i === 0) return false;\n    }\n  \n    return true;\n};\n\nconsole.log(is_prime(6)); // False\nconsole.log(is_prime(101)); // True\nconsole.log(is_prime(11)); // True\nconsole.log(is_prime(13441)); // True\nconsole.log(is_prime(61)); // True\nconsole.log(is_prime(4)); // False\nconsole.log(is_prime(1)); // False"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "let thirdIndexes = l.map((_, index) => (index + 1) % 3 === 0 ? index : null).filter(x => x !== null);\n    thirdIndexes.sort((a, b) => l[a] - l[b]);\n    for (let i of thirdIndexes) {\n        let temp = l[i];\n        for (let j = i; j < l.length - 1; j++) {\n            l[j] = l[j + 1];\n        }\n        l[l.length - 1] = temp;\n    }\n    return l;\n}\nconsole.log(sort_third([1, 2, 3])); // [1, 2, 3]\nconsole.log(sort_third([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 5, 8, 9]"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "return l.sort((a, b) => a - b).filter((item, index, array) => array.indexOf(item) === index);\n}\n\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "return Math.max(...l);\n}"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "let count = 0;\n    for (let i=1; i<n; i++){\n        if((i % 11 == 0 || i % 13 == 0)){ //if the number is divisible by 11 or 13\n            while(i>0){\n                let digit = Math.abs(i % 10);\n                if(digit == 7) {count++}\n                i = Math.floor(i/10);\n            }\n        }\n    }\n    return count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "// Push all even index values into an array and sort it\n    const even_index_vals = l.filter((_, idx) => idx % 2 == 0).sort(function(a, b){return a - b});\n\n    // Create a copy of the original list for mutation\n    let new_list = [...l];\n\n    // Replace all even index values with sorted version\n    for (let i = 0; i < l.length; i += 2) {\n        new_list[i] = even_index_vals.shift();\n    }\n    \n    return new_list;\n};"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "let fibArr = [2, 3];\n    for (let i = 0; i < n - 2; ++i) {\n        fibArr.push(fibArr[i + 1] + fibArr[i]);\n    }\n    return fibArr[n - 1];\n}\n\nconsole.log(prime_fib(1)); // Output: 2\nconsole.log(prime_fib(2)); // Output: 3\nconsole.log(prime_fib(3)); // Output: 5\nconsole.log(prime_fib(4)); // Output: 13\nconsole.log(prime_fib(5)); // Output: 89"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "if(l.length < 3){\n        return false;\n    }\n    \n    l.sort((a, b) => a - b);\n  \n    for (let i = 0; i < l.length - 2; ++i) {\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            if(l[i] + l[j] === -l[k]){\n                return true;\n            }else if(l[i] + l[j] < -l[k]){\n                j += 1;\n            }else{\n                k -= 1;\n            }\n        }\n    }\n  \n    return false;\n}\n\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "return n*n;\n}\n\nconsole.log(car_race_collision(10)); // outputs 100\n\nThis is because if you pair each car going left to right with a car going right to left, they will collide exactly once (assuming the cars are infinitely sturdy and strong as described). Since there are n cars on both sides, total collisions would be n*n."}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "return l.map(x => x + 1);\n}"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const seenNums = new Set();\n    for (let num of l) {\n        if(seenNums.has(-num)) {\n            return true;\n        } else {\n            seenNums.add(num);\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "if(base < 2 || base > 9) throw new Error(\"Base numbers should be less than 10.\");\n    let result = \"\";\n    while(x>0){\n        result = (x%base).toString() + result;\n        x = Math.floor(x/base);\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "return (0.5) * a * h;\n};\nconsole.log(triangle_area(5,3));"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "if (n === 0) return 0;\n    else if (n === 1) return 0;\n    else if (n === 2) return 2;\n    else if (n === 3) return 0;\n  \n    let fib = [0, 0, 2, 0]; // Initialize the array with base cases\n  \n    for(let i=4; i<=n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n} \n\nconsole.log(fib4(5)); //Output: 4\nconsole.log(fib4(6)); //Output: 8\nconsole.log(fib4(7)); //Output: 14"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "l.sort((a, b) => a - b);\n    const len = l.length;\n\n    if(len % 2 === 0) {\n        return (l[len/2-1] + l[len/2]) / 2;\n    } else {\n        return l[(len-1)/2];\n    }\n}\n\nconsole.log(median([3, 1, 2, 4, 5])) // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])) // Output: 15.0"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "let res = 1; // Initialize result\n    \n    // If n is negative take the positive value\n    if(n < 0) {\n        n = Math.abs(n);\n    }\n\n    // Keep doubling while there are at least two bits left in the binary representation of n.\n    while(n > 1){\n        // If n is odd, add p to result\n        if(n % 2 == 1){\n            res = (res * 2) % p;\n            n--;\n        }\n\n        // If n is even, double the value.\n        else{\n            n /= 2;\n            res = (res * 4) % p;\n        }\n    }\n\n    return res;\n}"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "return text.replace(/[aeiouAEIOU]/g, \"\");\n}"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "for(let i=0;i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "if(s0.length !== s1.length) return false;\n\n    const cntS0 = Array.from(s0).reduce((acc, char) => {\n        acc[char] ? acc[char]++ : acc[char] = 1;\n        return acc;\n    }, {} as Record<string, number>);\n\n    const cntS1 = Array.from(s1).reduce((acc, char) => {\n        acc[char] ? acc[char]++ : acc[char] = 1;\n        return acc;\n    }, {} as Record<string, number>);\n    \n    for (const [key, value] of Object.entries(cntS0)) {\n      if (!(key in cntS1) || cntS1[key] !== value) {\n        return false;\n      }\n    }\n  \n    return true;\n};\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'));  // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'));  // False"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "if (n <= 0) {\n        return \"Please enter a positive integer.\";\n    } else if (n === 1) {\n        return 1;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        let f = 1;\n        let p = 1;\n        for(let i=3;i<=n;i++){\n            let temp = f;\n            f += p;\n            p = temp;\n        }\n        return f;\n    }\n};"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "let stack: Array<string> = [];\n    for(let i=0;i<brackets.length;i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "if(l.length < 2) return true; // if only one or no elements in list, it is considered monotonically increasing/decreasing\n    \n    let direction = l[1] - l[0];\n\n    for (let i = 2; i < l.length; i++) {\n        if ((l[i] - l[i-1]) * direction < 0) { // if direction changes, list is not monotonically increasing or decreasing\n            return false;\n        }\n        direction = (l[i] - l[i-1]);\n    }\n    return true;\n};"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "let set = new Set(l1.filter(num => l2.includes(num)));\n    return [...set].sort((a, b) => a - b);\n}\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "let maxPrime = 2;\n    while (n % 2 === 0) {\n        n >>= 1; // equivalent to n /= 2\n    }\n\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2 && n % 1 === 0) maxPrime = n;\n\n    return maxPrime;\n}"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "let stack: Array<string> = [];\n    \n    for(let i=0;i<brackets.length;i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    \n    if(stack.length !== 0){\n        return false;\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "let derv = [];\n    for(let i=1;i<xs.length;i++){\n        derv.push(i*xs[i]);\n    }\n    return derv;\n}"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "if (n === 0) return 0;\n    else if (n === 1) return 0;\n    else if (n === 2) return 1;\n  \n    let dp = new Array(n + 1).fill(0);\n    dp[2] = 1;\n  \n    for (let i = 3; i <= n; i++) {\n      dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n  \n    return dp[n];\n};"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "let count = 0;\n    const vowels = 'aeiou';\n    for(let char of s.toLowerCase()){\n        if(vowels.includes(char)){\n            count++;\n        }\n    }\n    // Check if last character is y\n    if (s[s.length - 1] === 'y') {\n        count++;\n    }\n    return count;\n}"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "let digits = String(x).split('');\n    \n    if (shift > digits.length) {\n        return digits.reverse().join('');\n    } else {\n        let result = [...digits.slice(shift), ...digits.slice(0, shift)];\n        return result.join('');\n    }\n};\n\nconsole.log(circular_shift(12, 1)); // Output: \"21\"\nconsole.log(circular_shift(12, 2)); // Output: \"12\""}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0 ;i< s.length ; i++){\n        if(s[i] == s[i].toUpperCase() && s[i] != s[i].toLowerCase())\n            sum += s[i].charCodeAt(0);\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const matches = s.match(/\\d+/g); // use regular expression to get all numbers in the string\n    if(!matches) return 0;\n    let totalApplesAndOranges = matches.map(Number).reduce((a, b) => a + b, 0);\n    return n - totalApplesAndOranges;\n}"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "if(arr.length === 0) return [];\n    let smallestEven = Number.MAX_VALUE;\n    let index = -1;\n    for(let i=0;i< arr.length;i++){\n        if(arr[i] % 2 === 0 && arr[i] <= smallestEven){\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    return smallestEven !== Number.MAX_VALUE ? [smallestEven, index]: [];\n}"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "let frequency = lst.reduce((acc, value) => {\n        if(value in acc){\n            acc[value]++;\n        }else{\n            acc[value] = 1;\n        }\n        return acc;\n    }, {});\n\n    let sortedKeys = Object.keys(frequency).sort((a, b) => b - a);\n    for (let key of sortedKeys){\n        if(frequency[key] >= parseInt(key)){\n            return parseInt(key);\n        }\n    }\n\n    return -1;\n}"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "if (!Array.isArray(lst)) return null;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while (lst.length) {\n        result.push(lst.shift()); // min\n        if (lst.length) {\n            result.push(lst.pop()); // max\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4]));\nconsole.log(strange_sort_list([5, 5, 5, 5]));\nconsole.log(strange_sort_list([]));"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "if(a+b > c && a+c > b && b+c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n    else return -1;\n}"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "// Check if array is a palindrome and sum of its elements is less or equal to max weight\n    return q.join('') === q.reverse().join('') && q.reduce((a, b) => a + b, 0) <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5)); // False\nconsole.log(will_it_fly([3, 2, 3], 1)); // False\nconsole.log(will_it_fly([3, 2, 3], 9)); // True\nconsole.log(will_it_fly([3], 5)); // True"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "let count = 0;\n    \n    // Compare array from start to middle\n    for(let i = 0; i < arr.length / 2; i++) {\n        if(arr[i] !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "let countLst1 = 0;\n    for(let str of lst1){\n        countLst1 += str.length;\n    }\n\n    let countLst2 = 0;\n    for(let str of lst2){\n        countLst2 += str.length;\n    }\n\n    if(countLst1 <= countLst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([], [])); // \u279e []\nconsole.log(total_match(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\nconsole.log(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\nconsole.log(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\nconsole.log(total_match(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "if(a < 1 || a > 100) return false;\n    const primes = [2, 3, 5, 7]; // prime numbers from 2 to 100\n    for(let i=0; i<primes.length; i++) {\n        if(a % primes[i] == 0) {\n            a /= primes[i];\n            while (a % primes[i] == 0 && a > 1) {\n                a /= primes[i];\n            }\n            if(a == 1){\n                return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "if(n === 0 && x !== 0){\n        return false;\n    } else if (n === 1 && x !== 1){\n        return false;\n    } else {\n        let result = Math.pow(n,Math.log(x)/Math.log(n));\n        if(result%1===0){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "let c = Math.round(Math.cbrt(Math.abs(a)));\n    return c*c*c === Math.abs(a);\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "let primes = [2,3,5,7,11,13];\n    let count=0;\n    for(let i of num){\n        if(primes.includes(parseInt(i,16))){\n            count++;\n        }\n    }\n    return count;\n};"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "let binary = '';\n    if (decimal > 0) {\n        while (decimal > 0) {\n            binary = (decimal % 2).toString() + binary;\n            decimal = Math.floor(decimal / 2);\n        }\n    } else {\n        binary = '0';\n    }\n    return `db${binary}db`;\n};\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));"}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "if(s.length < 3) return false;\n    for (let i=0;i<s.length-2;i++){\n        let subStr = s.substring(i,i+3);\n        if(new Set([...subStr]).size!==3) return false;\n    }\n    return true;\n};\nconsole.log(is_happy('a')); // false\nconsole.log(is_happy('aa')); // false\nconsole.log(is_happy('abcd')); // true\nconsole.log(is_happy('aabb')); // false\nconsole.log(is_happy('adb')); // true\nconsole.log(is_happy('xyy')); // false"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "let letterGrades: Array<string> = [];\n\n    for(let i=0;i< grades.length;i++){\n        if(grades[i] == 4.0) letterGrades.push('A+');\n        else if(grades[i] > 3.7) letterGrades.push('A');\n        else if(grades[i] > 3.3) letterGrades.push('A-');\n        else if(grades[i] > 3.0) letterGrades.push('B+');\n        else if(grades[i] > 2.7) letterGrades.push('B');\n        else if(grades[i] > 2.3) letterGrades.push('B-');\n        else if(grades[i] > 2.0) letterGrades.push('C+');\n        else if(grades[i] > 1.7) letterGrades.push('C');\n        else if(grades[i] > 1.3) letterGrades.push('C-');\n        else if(grades[i] > 1.0) letterGrades.push('D+');\n        else if(grades[i] > 0.7) letterGrades.push('D');\n        else if(grades[i] > 0.0) letterGrades.push('D-');\n        else letterGrades.push('E');\n    }\n    \n    return letterGrades;\n}"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "let len = string0.length;\n    \n    if(len < 2){\n        return false;\n    }\n\n    for(let i=2;i<=Math.sqrt(len);i++){\n        if(len % i === 0){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "// For 0 digits, there are no possible numbers. So, we return 0.\n    if(n === 0){\n        return 0;\n    }\n    // If n is 1, then there is only one number that starts or ends with 1, which is 1 itself.\n    else if (n === 1) {\n      return 1;\n    }\n    // The count of numbers of n-digit positive integers that start or end with 1 can be calculated as the sum of counts of n-digit numbers starting with 1 and ending with 1.\n    // A number starts with 1 if it has (n-1) digits after the first one, and ends with 1 if it has (n-1) digits before the last one.\n    else {\n      let count = Math.pow(9, n - 2);\n      return count * 2;\n    }\n};"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "let sumOfDigits = 0;\n    while(N){\n        sumOfDigits += N % 10;\n        N = Math.floor(N / 10);\n    }\n    \n    return sumOfDigits.toString(2).padStart(8, '0');\n};"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0; i< lst.length; i++) {\n        if(i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "return s.split(\" \")\n            .map(word => word.split(\"\")\n                              .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                              .join(\"\"))\n            .join(\" \");\n};"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "let result: Array<Array<number>> = [];\n    for(let i=0;i<lst.length;i++) {\n        for(let j=0;j<lst[i].length;j++){\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    \n    return result.sort((a: Array<number>, b: Array<number>): number => \n        a[0] - b[0] || b[1] - a[1]\n    );\n}\n\nconsole.log(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(get_row([], 1)); // []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // [(2, 2)]"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "if(array.length === 0) return array;\n    let firstElement = array[0];\n    let lastElement = array[array.length -1];\n    let sum = firstElement + lastElement;\n    \n    // Make a copy of the given array.\n    let newArray = [...array];\n  \n    if(sum % 2 === 0){\n        return newArray.sort((a, b) => {return b - a});\n    }else{\n        return newArray.sort((a, b) => a - b);\n    }\n}"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "let encryptedString = '';\n    \n    for(let i=0;i<s.length;i++){\n        if (s[i] >= 'A' && s[i] <= 'Z'){\n            // subtracting the ASCII value of A and adding 4 (to shift two positions)\n            encryptedString += String.fromCharCode(((s.charCodeAt(i) - 65 + 4 ) % 26) + 65);\n        } else if (s[i] >= 'a' && s[i] <= 'z'){\n            // subtracting the ASCII value of a and adding 4 (to shift two positions)\n            encryptedString += String.fromCharCode(((s.charCodeAt(i) - 97 + 4 ) % 26) + 97);\n        } else {\n            encryptedString += s[i];\n        }\n    }\n    \n    return encryptedString;\n};"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "if(lst.length < 2) return null;\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let secondSmallest = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < lst.length; i++) {\n        if(lst[i] < smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] > smallest && lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    return (secondSmallest == Number.MAX_SAFE_INTEGER)? null : secondSmallest; \n}\nconsole.log(next_smallest([1, 2, 3, 4, 5])) // Output: 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])) // Output: 2\nconsole.log(next_smallest([])) // Output: null\nconsole.log(next_smallest([1, 1])) // Output: null"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "let count = 0;\n    S.split(/[.!?]/).forEach((sentence) => {\n        if(sentence.trim().startsWith(\"I\")) count++;\n    });\n    return count;\n}"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n\n    return x === y + z || y === x + z || z === x + y;\n}"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "let result = '';\n    \n    for(let i=0; i<message.length; i++){\n        let charCode = message[i].charCodeAt(0);\n        \n        if(charCode >=65 && charCode <=90){\n            // Uppercase Letters\n            if(charCode >= 65 && charCode <=73){\n                result += String.fromCharCode(charCode + 2);\n            } else if(charCode === 74 || charCode === 78) {\n                result += String.fromCharCode(charCode - 14);\n            }else{\n                result += message[i];\n            }\n        }else if(charCode >=97 && charCode <=122){\n            // Lowercase Letters\n            if(charCode >= 97 && charCode <=105){\n                result += String.fromCharCode(charCode + 2);\n            } else if(charCode === 106 || charCode === 110) {\n                result += String.fromCharCode(charCode - 14);\n            }else{\n                result += message[i];\n            }\n        }else{\n            result += message[i];\n        }\n    }\n    \n    return result;\n}\n\nconsole.log(encode('test')); // Outputs: 'TGST'\nconsole.log(encode('This is a message')); // Outputs: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "let maxPrimeNumber = 2;\n    for(let num of lst){\n        if(num > 1 && isPrime(num)){\n            maxPrimeNumber = Math.max(maxPrimeNumber, num);\n        }\n    }\n    return sumOfDigits(maxPrimeNumber);\n};\n\nfunction isPrime(n: number) : boolean {\n    if (n < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction sumOfDigits(n: number):number{\n    let sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key of dict.keys()) {\n        if (typeof key !== 'string') return false;\n        \n        if (!key.toLowerCase().equals(key)) {\n            allLowerCase = false;\n        }\n      \n        if (!key.toUpperCase().equals(key)) {\n            allUpperCase = false;\n        }\n    }\n  \n    return allLowerCase || allUpperCase;\n}"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "let arr : Array<number> = [];\n    for(let i=2; i<n;i++){\n        if(isPrimeNumber(i))\n            arr.push(i);\n    }\n    return arr;\n}\nfunction isPrimeNumber(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "let unitA = Math.abs(a) % 10;\n    let unitB = Math.abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "let count = 0;\n    for(let i=0;i<s.length;i++){\n        if(i%2===0 && s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(count_upper('aBCdEf')); // 1\nconsole.log(count_upper('abcdefg')); // 0\nconsole.log(count_upper('dBBE')); // 1"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "let num = parseFloat(value);\n    if (Math.abs(num - Math.floor(num)) === Math.abs(num - Math.ceil(num))) {\n        return Math.sign(num) * Math.round(num); // round away from zero\n    } else {\n        return Math.round(num); // standard rounding\n    }\n}"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "let arr = new Array();\n    for(let i=0;i<n;i++){\n        if(n%2==0)\n            arr.push(n+2*i);\n        else\n            arr.push(n+(2*i));\n    }\n    return arr;\n}"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "return s.split(/[\\s,]+/); // It will split the string by spaces and commas\n}\nconsole.log(words_string(\"Hi, my name is John\")); // Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "if (y < x) return -1;\n\n    for (let i = y; i >= x; i--){\n        if(i % 2 === 0) return i;\n    }\n    \n    return -1;\n}"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "if (n > m){\n        return -1;\n    }\n    \n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n\n    const avg = Math.round(sum / (m - n + 1));\n    const binaryAvg = avg.toString(2).padStart(8, '0'); // convert to binary and pad with zeros if necessary\n\n    return `0b${binaryAvg}`;\n}\n\nconsole.log(rounded_avg(1, 5));   // \"0b11\"\nconsole.log(rounded_avg(7, 5));   // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const filteredArray = x.filter(num => {\n        let strNum = num.toString();\n        for (let i = 0; i < strNum.length; i++) {\n            if (parseInt(strNum[i]) % 2 === 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return filteredArray.sort((a, b) => a - b);\n};\n\nconsole.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(unique_digits([152, 323, 1422, 10])); // []"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "// Create an array of numbers between 1 and 9 inclusive.\n    const numNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let newArray: Array<number> = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        // Check if the number is between 1 and 9 inclusive.\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            newArray.push(arr[i]);\n        }\n    }\n  \n    // Sort the array in ascending order.\n    newArray.sort((a, b) => a - b);\n\n    // Reverse the array.\n    newArray.reverse();\n\n    let finalArray: Array<string> = [];\n\n    for (let i = 0; i < newArray.length; i++) {\n        // Replace each digit with its corresponding name.\n        finalArray.push(numNames[newArray[i] - 1]);\n    }\n  \n    return finalArray;\n};\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "let res:Array<number> = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) {\n            // calculate factorial of i\n            let fact = 1;\n            for(let j=1;j<=i+1;j++){\n                fact *= j;\n            }\n            res.push(fact);\n        } else {\n            // calculate sum from 1 to i\n            let sum = 0;\n            for (let j = 1; j <= i + 1; j++) {\n                sum += j;\n            }\n            res.push(sum);\n        }\n    }\n    return res;\n};"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "let evens : number = 0; //for counting even numbers\n    let odds : number = 0;  //for counting odd numbers\n\n    for(let i =1; i<=n;i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                evens++;\n            }else{\n                odds++;\n            }\n        }\n    }\n\n    return [evens, odds];\n};\n\nconst isPalindrome = function (n: number) : boolean {\n    let r = 0;\n    let tmp = n;\n    while(tmp > 0){\n        r = r * 10 + tmp % 10;\n        tmp = Math.floor(tmp / 10);\n    }\n    return r === n;\n};"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "let count = 0;\n    for(let num of arr) {\n        if(num < 0) num = -((num / Math.abs(num)).toFixed(2)); // Converting the negative number into positive and maintaining its signed digit as negative\n        \n        let sum_of_digits = String(num).split('').map(Number).reduce((a, b) => a + b, 0); // Calculating the sum of digits\n\n        if (sum_of_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(count_nums([]) == 0) // true\nconsole.log(count_nums([-1, 11, -11]) == 1) // true\nconsole.log(count_nums([1, 1, 2]) == 3) // true"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "if(arr.length === 0) { return true; }\n    let maxValueIndex = arr.indexOf(Math.max(...arr));\n    for(let i=0;i<maxValueIndex;i++) {\n        if (arr[i] > arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(move_one_ball([3, 4, 5, 1, 2])) //true\nconsole.log(move_one_ball([3, 5, 4, 1, 2])) //false"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    if(oddLst1.length === 0) return \"YES\"; // all numbers in lst1 are already even\n\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(evenLst2.length < oddLst1.length) return \"NO\"; // not enough evens in lst2 to cover odds in lst1\n\n    return \"YES\";\n};"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "const map = new Map();\n    if(test === '') return map;\n    let maxCount = 0;\n    let resultMap = new Map();\n    \n    test.split(' ').forEach((char) => {\n        if (map.has(char)) {\n            map.set(char, map.get(char) + 1);\n        } else {\n            map.set(char, 1);\n        }\n        \n        if(maxCount < map.get(char)){\n            maxCount = map.get(char);\n            resultMap = new Map();\n            resultMap.set(char, maxCount);\n        }else if(maxCount === map.get(char)){\n            resultMap.set(char, maxCount);\n        }\n    });\n    \n    return resultMap;\n}"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "// delete all characters in s that are equal to any character in c\n    let newS = s.split('').filter((char) => !c.includes(char)).join('');\n    // check if it's palindrome\n    const isPalindrome = (str: string): boolean => {\n        const len = str.length;\n        for (let i = 0; i < Math.floor(len / 2); i++) {\n            if (str[i] !== str[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    // return result as tuple\n    return [newS, isPalindrome(newS)];\n};"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "let result:Array<string> = [];\n    for(let i=0;i<lst.length;i++){\n        let count = 0;\n        for(let j=0;j<lst[i].length;j++){\n            if(parseInt(lst[i][j]) % 2 != 0) count++;\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "let min_sum = nums[0];\n    for(let i=1;i<nums.length;i++){\n        if(nums[i] < min_sum){\n            min_sum = nums[i];\n        }else{\n            break;\n        }\n    }\n    return min_sum;\n}"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "let totalWells = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++)\n            if(grid[i][j] == 1) totalWells++;\n    }\n    let result = math.ceil(totalWells/capacity);\n    return result;\n}"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "return arr.sort((a, b) => {\n        let countA = a.toString(2).replace(/0/g, '').length;\n        let countB = b.toString(2).replace(/0/g, '').length;\n        return countA - countB || a - b;\n    });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "if (s.length === 0) return [];\n    let words = s.split(' ');\n    let result = words.filter(word => {\n        let consonants = word.replace(/[aeiouAEIOU\\s]/g, '').length;\n        return consonants == n;\n    });\n    return result;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for (let i = word.length - 1; i >= 0; i--) {\n        if(vowels.includes(word[i]) && i !== word.length-1 && !vowels.includes(word[i+1])){\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n};\nconsole.log(get_closest_vowel(\"yogurt\")); //==> \"u\"\nconsole.log(get_closest_vowel(\"FULL\")); //==> \"U\"\nconsole.log(get_closest_vowel(\"quick\")); //==> \"\"\nconsole.log(get_closest_vowel(\"ab\")); //==> \"\""}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "let count = 0;\n    for(let i=0; i < lst.length;i++){\n        for(let j=0;j < lst[i].length;j++){\n            if(lst[i][j] == '(') count++;\n            else count--;\n            if(count < 0) return 'No';\n        }\n    }\n    return (count === 0)?'Yes':'No';\n}"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "return arr.sort((a, b) => b - a).slice(0, k);\n};\n\nconsole.log(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "let sum=0;\n    for(let i=0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) { // two digits numbers\n            sum += arr[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(add_elements([111,21,3,4000,5,6,7,8,9], 4));"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "let collatzSequence = [n];\n\n    while(n !== 1){\n        if(n % 2 === 0){\n            n /= 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        \n        collatzSequence.push(n);\n    }\n    \n    return collatzSequence.filter(num => num % 2 !== 0).sort((a, b) => a - b);\n};\n\nconsole.log(get_odd_collatz(5)); // returns [1, 5]"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "if (!date || date.length !== 10) return false; // rule 1 and 4\n  \n    const [month, day, year] = date.split('-').map(Number);\n  \n    if (month < 1 || month > 12) return false; // rule 3\n  \n    if ((day < 1 || day > 31) && (day < 1 || day > 30) && (day < 1 || day > 29)) return false; // rule 2\n  \n    return true;\n}"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "if(txt.includes(' ')) return txt.split(' ');\n    else if(txt.includes(',')) return txt.split(',');\n    else {\n        let oddCount: number = 0;\n        for(let char of txt.toLowerCase()) {\n            if((char.charCodeAt() - 'a'.charCodeAt()) % 2 !== 0) oddCount++;\n        }\n        return oddCount;\n    }\n};"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "// Check if list has more than one duplicate number.\n    const counts = {};\n    for (let num of lst) {\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n    for (const count in counts) {\n        if(counts[count] > 1){\n            return false;\n        }\n    }\n\n    // Check if list is sorted in ascending order.\n    for(let i = 0; i < lst.length - 1; i++){\n        if (lst[i] >= lst[i + 1]) {\n            return false;\n        }\n    }\n\n    return true;\n};"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    const length = end - start + 1;\n    if (!isPrime(length)) {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }\n};\n\nfunction isPrime(num: number) : boolean {\n    if (num <= 1) {\n        return false;\n    }\n    if (num === 2) {\n        return true;\n    }\n    if (num % 2 === 0) {\n        return false;\n    }\n  \n    for(let i = 3, sqrt = Math.sqrt(num); i <= sqrt; i+=2){\n      if(num % i === 0)\n        return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "if(arr.length === 0) return None;\n    let productOfSigns = 1;\n    let sumOfMagnitudes = 0;\n    for(let i of arr){\n        if(i < 0) {\n            productOfSigns *= -1;\n            sumOfMagnitudes += -i;\n        } else if(i > 0) {\n            sumOfMagnitudes += i;\n        } else {\n            return 0;\n        }\n    }\n    return productOfSigns*sumOfMagnitudes;\n}"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "let n = grid.length;\n    let visited = {}; // visited cells\n    let path = []; // minimum path\n    \n    function dfs(x: number, y: number, currentPath: Array<number>) {\n        if (currentPath.length === k) {\n            if (JSON.stringify(currentPath.sort((a, b) => a - b)) < JSON.stringify(path.sort((a, b) => a - b))) {\n                path = [...currentPath];\n            }\n            return;\n        }\n        visited[`${x},${y}`] = true;\n        let dx = [-1, 0, 1, 0], dy = [0, 1, 0, -1]; // movement vectors\n        for (let i = 0; i < 4; ++i) {\n            let nx = x + dx[i], ny = y + dy[i];\n            if (!visited[`${nx},${ny}`] && nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                currentPath.push(grid[nx][ny]);\n                dfs(nx, ny, currentPath);\n                currentPath.pop(); // backtracking\n            }\n        }\n    }\n    \n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            dfs(i, j, []);\n        }\n    }\n    \n    return path;\n};\n\nconsole.log(minPath([[1,2,3],[4,5,6],[7,8,9]], 3)); // [1, 2, 1]\nconsole.log(minPath([[5,9,3],[4,1,6],[7,8,2]], 1)); // [1]"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "let arr:Array<number> = new Array(n + 1).fill(0);\n    arr[0] = 1;\n    if(n >= 2){\n        arr[2] = 3;\n    }\n    for (let i = 4; i <= n+1; i++){\n        if (i%2 === 0) {\n            arr[i] = 1 + i/2;\n        } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n    \n    return arr;\n}"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "let product = 1;\n    let hasOddDigit = false;\n    for(let digit of n.toString().split('')){\n        if(Number(digit) % 2 !== 0){\n            product *= Number(digit);\n            hasOddDigit = true;\n        }\n    }\n    return hasOddDigit ? product : 0;\n}\n// Test Cases\nconsole.log(digits(1));   // Expected: 1\nconsole.log(digits(4));   // Expected: 0\nconsole.log(digits(235));  // Expected: 15"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "let stack: string[] = [];\n    for(let char of string0){\n        if(char == '[' && stack.length === 0){\n            stack.push(char);\n            continue;\n        }\n        \n        if(char == '['){\n            stack.push(char);\n            continue;\n        }\n        \n        if(stack.length === 0) return false;\n        \n        //if the last bracket in the stack is opening, replace it with closing\n        if(stack[stack.length - 1] == '['){\n            stack[stack.length - 1] = ']';\n        }\n        //else remove the last closing bracket from stack\n        else {\n            stack.pop();\n        }\n    }\n    \n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]')); // True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // False\nconsole.log(is_nested('[][]')); // False\nconsole.log(is_nested('[[][]]')); // True\nconsole.log(is_nested('[[]][[')); // True\n\n/**\n * The function works by pushing opening brackets into the stack and replacing the \n * last bracket in the stack with a closing one if it's an opening one. In this way,\n * we make sure that there is at least one nested bracket. If any time, there are no \n * opening brackets in the stack and the next character is a closing bracket then it means\n * the string is not valid as there is no matching opening bracket for it so return false.\n * \n * At the end if the stack is empty that means we have a valid nested sequence of brackets\n * thus return true else false.\n */"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "let sum = 0;\n    for(let num of lst){\n        let ceilingNum = Math.ceil(num);\n        sum += Math.pow(ceilingNum,2);\n    }\n    return sum;\n}\n\nconsole.log(sum_squares([1,2,3])); // 14\nconsole.log(sum_squares([1,4,9])); // 98\nconsole.log(sum_squares([1,3,5,7])); // 84\nconsole.log(sum_squares([1.4,4.2,0])); // 29\nconsole.log(sum_squares([-2.4,1,1])); // 6"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "if(txt === \"\") return false;\n    \n    let trimmedTxt = txt.trim(); // Trim whitespace from both ends of the string\n    \n    let lastChar = trimmedTxt[trimmedTxt.length -1]; // Get the last character\n    \n    return (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z'); // Check if it's an alphabetical character\n}"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "let largestIndex = -1;\n    for (let i = 0; i < arr.length - 1; ++i) {\n        if(arr[i] >= arr[i+1]){\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n};"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "let largestNegative = null;\n    let smallestPositive = null;\n    \n    for(let num of lst){\n        if(num < 0 && (largestNegative === null || num > largestNegative)){\n            largestNegative = num;\n        } else if(num > 0 && (smallestPositive === null || num < smallestPositive)) {\n            smallestPositive = num;\n        }\n    }\n    \n    return [largestNegative, smallestPositive];\n}"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "// Convert strings to numbers if possible\n    let a_val : number;\n    let b_val : number;\n    \n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n        if(isNaN(a)){\n            return None;\n        }\n    } \n\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n        if(isNaN(b)){\n            return None;\n        }\n    } \n    \n    a_val = typeof a === 'number' ? a : parseFloat(a);\n    b_val = typeof b === 'number' ? b : parseFloat(b);\n\n    // Compare numbers and return larger value or None if they are equal\n    if(Math.abs(a_val - b_val) < Number.EPSILON){\n        return None;\n    } else {\n        return a_val > b_val ? a : b; \n    }\n}"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "if(n < 10){\n        return false;\n    }\n    let count = 0;\n    while(n > 0) {\n        if(n % 2 == 0) {\n            n = n - 2;\n            count++;\n        } else {\n            return false;\n        }\n        if(count >=4){\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(is_equal_to_sum_even(4)); // false\nconsole.log(is_equal_to_sum_even(6)); // false\nconsole.log(is_equal_to_sum_even(8)); // true"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "let result = 1;\n    for(let i=0;i<n+1;i++){\n        let fact = 1;\n        for(let j=i;j>0;j--){\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "let result = text.replace(/\\s+/g, '_');\n    return result.replace(/_+/g, '-');\n};\n\nconsole.log(fix_spaces(\"Example\")); // Example\nconsole.log(fix_spaces(\"Example 1\")); // Example_1\nconsole.log(fix_spaces(\" Example 2\")); // _Example_2\nconsole.log(fix_spaces(\" Example   3\")); // _Example-3"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "const parts = file_name.split('.')\n    if(parts.length !== 2){\n        return 'No'\n    }\n    const namePart = parts[0]\n    const extPart = parts[1]\n    \n    if(!/^[a-zA-Z]/.test(namePart) || !/\\d{1,3}$/.test(namePart)){\n        return 'No'\n    }\n    \n    if(!['txt', 'exe', 'dll'].includes(extPart)){\n        return 'No'\n    }\n    return 'Yes'\n}"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "return lst.reduce((sum, n) => sum + Math.pow(n,2),0);\n}\n  \nconsole.log(sum_squares([1,2,3]));"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "const isPrime = (n: number): boolean => {\n        if (n < 2) return false;\n        for(let i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i === 0) return false;\n        }\n        return true;\n    };\n    \n    const words: string[] = sentence.split(\" \");\n    let result: string[] = [];\n\n    for(let word of words) {\n        if (isPrime(word.length)) {\n            result.push(word);\n        }\n    }\n\n    return result.join(\" \")\n}"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "let [a, b] = x.split(\"/\").map(Number);\n    let [c, d] = n.split(\"/\").map(Number);\n  \n    return ((a * c) % (b * d)) === 0;\n}"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "// define a helper function to calculate the sum of digits for each number\n    const digitSum = (num: number) : number => {\n        let result = 0;\n        while(num != 0){\n            result += Math.abs(num % 10);\n            num = Math.floor(num / 10);\n        }\n        return result;\n    };\n    \n    // sort the numbers using Array.prototype.sort()\n    return nums.sort((a, b) => {\n        const digitSumA = digitSum(a);\n        const digitSumB = digitSum(b);\n        \n        if (digitSumA === digitSumB) {\n            // If the sum of digits is equal, maintain original order\n            return a - b; \n        } else {\n            // Otherwise, sort by ascending sum of digits\n            return digitSumA - digitSumB;\n        }\n    });\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "let count = 0;\n    for (let num of nums) {\n        if(num > 10){\n            const strNum = num.toString();\n            const firstDigit = parseInt(strNum[0]);\n            const lastDigit = parseInt(strNum[strNum.length - 1]);\n            if (firstDigit % 2 === 1 && lastDigit % 2 === 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "let a = new Array(n);\n    for (let i=0; i<n; ++i) {\n        a[i] = i*i - i + 1;\n    }\n    \n    let count = 0;\n    for (let i=0; i<n-2; ++i) {\n        for (let j=i+1; j<n-1; ++j) {\n            if ((a[i] + a[j]) % 3 === 0) {\n                for (let k=j+1; k<n; ++k) {\n                    if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n    }\n    \n    return count;\n};\n\n// Test the function with n = 5\nconsole.log(get_max_triples(5)); // Output: 1"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const planetsByDistanceFromSun = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planetsByDistanceFromSun.indexOf(planet1);\n    const planet2Index = planetsByDistanceFromSun.indexOf(planet2);\n\n    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n    }\n\n    if (planet1Index < planet2Index) {\n        return planetsByDistanceFromSun.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetsByDistanceFromSun.slice(planet2Index + 1, planet1Index);\n    }\n}"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "// Filter out strings with odd lengths\n    const filteredList = lst.filter(x => x.length % 2 === 0);\n  \n    // Sort the list first by alphabetical order and then by length of each word\n    return filteredList.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "if (n < 2) return y; // numbers less than 2 are not prime\n    \n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) return y; // If divisible by any number, it's not prime\n    }\n    return x; // Prime number\n};"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "let sum = 0;\n\n    for(let i of lst){\n        if(i > 0 && Number.isInteger(i) && i % 2 !== 0) sum += Math.pow(i, 2);\n    }\n\n    return sum;\n};\n\nconsole.log(double_the_difference([1, 3, 2, 0])) // 10\nconsole.log(double_the_difference([-1, -2, 0])) // 0\nconsole.log(double_the_difference([9, -2])) // 81\nconsole.log(double_the_difference([0])) // 0\nconsole.log(double_the_difference([])) // 0"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "return game.map((score, index) => Math.abs(score - guess[index]));\n};\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])) // Output: [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) // Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "let strongestExt = '';\n    let strongestStrength = -Infinity;\n\n    for(let ext of extensions){\n        const upperCaseLetters = [...ext].filter(letter => letter === letter.toUpperCase()).length;\n        const lowerCaseLetters = [...ext].filter(letter => letter === letter.toLowerCase()).length;\n        const extensionStrength = upperCaseLetters - lowerCaseLetters;\n\n        if(extensionStrength > strongestStrength){\n            strongestExt = ext;\n            strongestStrength = extensionStrength;\n        }\n    }\n    \n    return `${class_name}.${strongestExt}`;\n};\n  \nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']));"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const lenA = a.length;\n    const lenB = b.length;\n  \n    if (lenA < lenB) return false;\n  \n    for(let i=0; i<lenB; i++) {\n        let j: number;\n        for(j=0; j<lenA && i+j<lenB; j++) {\n            if(b[i+j] !== a[j]) break;\n        }\n        if (j === lenB) return true;  // Rotation found\n    }\n  \n    return false;  // No rotation found\n};\n\nconsole.log(cycpattern_check(\"abcd\",\"abd\")); //False\nconsole.log(cycpattern_check(\"hello\",\"ell\")); //True\nconsole.log(cycpattern_check(\"whassup\",\"psus\")); //False\nconsole.log(cycpattern_check(\"abab\",\"baa\")); //True\nconsole.log(cycpattern_check(\"efef\",\"eeff\")); //False\nconsole.log(cycpattern_check(\"himenss\",\"simen\")); //True"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "num = Math.abs(num); // Ensure the number is positive\n    let strNum = String(num);\n    let evens = 0, odds = 0;\n    \n    for (let i = 0; i < strNum.length; i++) {\n        if (Number(strNum[i]) % 2 == 0) {\n            evens++;\n        } else {\n            odds++;\n        }\n    }\n\n    return [evens, odds];\n};\n\nconsole.log(even_odd_count(-12)); // (1, 1)\nconsole.log(even_odd_count(123)); // (1, 2)"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "const values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    const roman = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm'];\n    \n    let number = number0;\n    let result = \"\";\n    \n    for(let i = 12; i >= 0; i--) {\n        while (number >= values[i]) {\n            number -= values[i];\n            result += roman[i];\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n           Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2) ||\n           Math.pow(c, 2) + Math.pow(a, 2) === Math.pow(b, 2);\n};"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "let maxCount = 0;\n    let maxWord = '';\n  \n    for (let word of words) {\n        const uniqueChars = new Set([...word]); // Set to remove duplicates\n        if(uniqueChars.size > maxCount){\n            maxCount = uniqueChars.size;\n            maxWord = word;\n        }else if(uniqueChars.size == maxCount){\n            maxWord = maxWord < word ? maxWord : word; // Compare lexicographically\n        }\n    }\n  \n    return maxWord;\n}"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "let number = Math.min(remaining, need);\n    return [number0 + number, remaining - number];\n}"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "//Building the algebraic expression as a string using template literals\n    let equation = '';\n    for(let i=0;i<operand.length-1;i++){\n        equation += `${operand[i]}${operator[i]}`;\n    }\n    equation += operand[operand.length - 1];\n    \n    //Evaluating the algebraic expression and returning its result\n    return eval(equation);\n};\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "let result = \"\";\n    \n    for(let char of s){\n        if(/[a-zA-Z]/.test(char)){\n            if(char === char.toLowerCase()){\n                result += char.toUpperCase();\n            }else{\n                result += char.toLowerCase();\n            }\n        } else {\n            result += char;\n        }\n    }\n    \n    return s === \"\" ? result.split('').reverse().join('') : result;\n}"}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "if(text === ''){\n        return null;\n    }\n    \n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5').update(text).digest(\"hex\");\n    \n    return hash;\n}"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "let result = [];\n    const lowerBound = Math.min(a, b);\n    const upperBound = Math.max(a, b);\n  \n    for (let i=lowerBound; i<=upperBound; i++) {\n      const digits = Array.from(i.toString()).map(Number).filter(x => x % 2 === 0 && x !== 0);\n      if (digits.length > 0) result.push(...digits);\n    }\n  \n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(generate_integers(2, 8));\nconsole.log(generate_integers(8, 2));\nconsole.log(generate_integers(10, 14));"}

{"task_id": "HumanEval_java/0", "language": "java", "completion": "for (int i = 0; i < numbers.size() - 1; ++i) {\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        List<Double> test1 = new ArrayList<>();\n        test1.add(1.0);\n        test1.add(2.8);\n        test1.add(3.0);\n        test1.add(4.0);\n        test1.add(5.0);\n        test1.add(2.0);\n        System.out.println(hasCloseElements(test1, 0.3)); // True\n        \n        List<Double> test2 = new ArrayList<>();\n        test2.add(1.0);\n        test2.add(2.0);\n        test2.add(3.0);\n        System.out.println(hasCloseElements(test2, 0.5)); // False\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "String[] arr = parenString.split(\"\\\\s+\"); //Split string by space\n        StringBuilder sb = new StringBuilder();\n        List<String> result = new ArrayList<>();\n        \n        for(String s:arr){ \n            int diff = s.length() - (s.replace(\"(\", \"\").length() - s.replace(\")\", \"\").length()); //Calculate balance of the braces in each group\n            if(diff == 0){ //If balanced\n                result.add(s); //Add to result list\n                sb.setLength(0); //Empty string builder for next group\n            }else{\n                sb.append(s).append(\" \"); //If not balanced, add to string builder\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main (String[] args) { \n        System.out.println(separateParenGroups(\"( ) (( )) (( )( ))\")); //['()', '(())', '(()())']\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "return Math.abs(number - number.intValue());\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a positive floating point number:\");\n        double number = scanner.nextDouble();\n        \n        if (number < 0){\n            System.out.println(\"Please enter a positive number.\");\n            return;\n        }\n        \n        System.out.printf(\"%.1f\", truncateNumber(number));\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "double balance = 0;\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (Integer) operation;\n                if (balance < 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        // Calculate Mean\n        double mean = sum / numbers.size();\n        \n        // Calculate the Sum of Absolute Deviations from Mean\n        double sadm = 0;\n        for (double num : numbers) {\n            sadm += Math.abs(num - mean);\n        }\n        \n        // Return the Mean Absolute Deviation\n        return sadm / numbers.size();\n    }\n}\n\npublic class Main{\n    public static void main(String[] args){\n        List<Double> list = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(MeanAbsoluteDeviation.meanAbsoluteDeviation(list));\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "if (numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        List<Object> result = new ArrayList<>(numbers);\n        for (int i=0; i<numbers.size()-1; i++) {\n            result.add(i+1, delimeter);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersperse(Arrays.asList(1, 2, 3), 4)); // prints: [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "String[] groups = parenString.split(\" \");\n        List<Integer> depths = new ArrayList<>();\n        for (String group : groups) {\n            int maxDepth = 0, currentDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            depths.add(maxDepth);\n        }\n        return depths;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> depths = parseNestedParens(\"(()()) ((())) () ((())()())\");\n        System.out.println(depths);  // Output: [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "return strings.stream().filter(s -> ((String) s).contains(substring)).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        String substring = \"a\";\n        System.out.println(filterBySubstring(strings, substring)); // ['abc', 'bacd', 'array']\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "int sum = 0;\n        BigInteger product = BigInteger.ONE;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int num = (int) number;\n                sum += num;\n                product = product.multiply(BigInteger.valueOf(num));\n            } else {\n                throw new IllegalArgumentException(\"List should only contain Integers\");\n            }\n        }\n        return Arrays.asList(sum, product.intValue());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4);\n        System.out.println(sumProduct(numbers)); // Output: [10, 24]\n\n        numbers = new ArrayList<>();\n        System.out.println(sumProduct(numbers)); // Output: [0, 1]\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "ArrayList<Object> result = new ArrayList<Object>();\n        if (numbers.isEmpty()) return result;\n        \n        int max_so_far = (Integer)numbers.get(0);\n        result.add(max_so_far);\n        \n        for (int i = 1; i < numbers.size(); ++i) {\n            if ((Integer)numbers.get(i) > max_so_far) {\n                max_so_far = (Integer)numbers.get(i);\n            }\n            \n            result.add(max_so_far);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers = new ArrayList<Object>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(2);\n        \n        List<Object> result = rollingMax(numbers);\n        \n        for (int i = 0; i < result.size(); ++i) {\n            System.out.print(result.get(i) + \" \");\n        }\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "int length = string.length();\n        if (length == 0) return \"\";\n        int i = length - 1;\n        while (!string.substring(0, i).equals(new StringBuilder(string.substring(0, i)).reverse().toString())) {\n            i--;\n        }\n        String palindromeSuffix = string.substring(i);\n        String restString = string.substring(0, i);\n        return string + new StringBuilder(restString).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makePalindrome(\"\")); // ''\n        System.out.println(makePalindrome(\"cat\")); // 'catac'\n        System.out.println(makePalindrome(\"cata\")); // 'catac'\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            char x = a.charAt(i);\n            char y = b.charAt(i);\n            \n            if ((x == '1' && y == '0') || (x == '0' && y == '1')) {\n                sb.append('1');\n            } else {\n                sb.append('0');\n            }\n        }\n        \n        return sb.toString();\n    }\n}\n\n// Test the function:\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(StringXor.stringXor(\"010\", \"110\"));  // Should print \"100\"\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "if (strings.isEmpty()) {\n            return null;\n        }\n        String longest = strings.get(0).toString();\n        for (Object string : strings) {\n            if (string.toString().length() > longest.length()) {\n                longest = string.toString();\n            }\n        }\n        return longest;\n    }\n    \n    public static void main(String[] args){\n        List<String> list = new ArrayList<>();\n        list.add(\"a\");\n        list.add(\"bb\");\n        list.add(\"ccc\");\n        \n        System.out.println(longest(list)); // Output: ccc\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n\npublic class Main{\n    public static void main(String[] args){\n        System.out.println(GreatestCommonDivisor.greatestCommonDivisor(3, 5)); // 1\n        System.out.println(GreatestCommonDivisor.greatestCommonDivisor(25, 15)); // 5\n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "ArrayList<String> list = new ArrayList<String>();\n        for (int i = 0; i < string.length(); ++i) {\n            list.add(string.substring(0, i + 1));\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (int i=0; i <= n; i++) {\n            if (i != 0) {\n                sb.append(\" \");\n            }\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "Set<Character> characters = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            characters.add(string.charAt(i));\n        }\n        return characters.size();\n    }\n\n    public static void main(String args[]) {\n        System.out.println(countDistinctCharacters('xyzXYZ'));  // Output: 3\n        System.out.println(countDistinctCharacters('Jerry'));  // Output: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "String[] notes = musicString.split(\" \");\n        ArrayList<Integer> beats = new ArrayList<>();\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        List<Object> result = parseMusic(\"o o| .| o| o| .| .| .| .| o\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "int count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(howManyTimes(\"\", \"a\")); // Expected: 0\n        System.out.println(howManyTimes(\"aaa\", \"a\")); // Expected: 3\n        System.out.println(howManyTimes(\"aaaa\", \"aa\")); // Expected: 3\n    }\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "//Splitting the input string into an array of strings.\n        String[] numbersArray = numbers.split(\" \");\n\n        //Converting the strings to corresponding integers.\n        int[] numsInt = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            switch (numbersArray[i]) {\n                case \"zero\":\n                    numsInt[i] = 0;\n                    break;\n                case \"one\":\n                    numsInt[i] = 1;\n                    break;\n                case \"two\":\n                    numsInt[i] = 2;\n                    break;\n                case \"three\":\n                    numsInt[i] = 3;\n                    break;\n                case \"four\":\n                    numsInt[i] = 4;\n                    break;\n                case \"five\":\n                    numsInt[i] = 5;\n                    break;\n                case \"six\":\n                    numsInt[i] = 6;\n                    break;\n                case \"seven\":\n                    numsInt[i] = 7;\n                    break;\n                case \"eight\":\n                    numsInt[i] = 8;\n                    break;\n                case \"nine\":\n                    numsInt[i] = 9;\n                    break;\n            }\n        }\n\n        //Sorting the integer array.\n        Arrays.sort(numsInt);\n\n        //Converting sorted integers back to corresponding strings and joining them into a single string with space in between.\n        for (int i = 0; i < numsInt.length; i++) {\n            switch (numsInt[i]) {\n                case 0:\n                    numbersArray[i] = \"zero\";\n                    break;\n                case 1:\n                    numbersArray[i] = \"one\";\n                    break;\n                case 2:\n                    numbersArray[i] = \"two\";\n                    break;\n                case 3:\n                    numbersArray[i] = \"three\";\n                    break;\n                case 4:\n                    numbersArray[i] = \"four\";\n                    break;\n                case 5:\n                    numbersArray[i] = \"five\";\n                    break;\n                case 6:\n                    numbersArray[i] = \"six\";\n                    break;\n                case 7:\n                    numbersArray[i] = \"seven\";\n                    break;\n                case 8:\n                    numbersArray[i] = \"eight\";\n                    break;\n                case 9:\n                    numbersArray[i] = \"nine\";\n                    break;\n            }\n        }\n\n        return String.join(\" \", numbersArray);\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "Double minDiff = null;\n        List<Double> closestPair = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size()-1; i++) {\n            for (int j = i+1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                \n                if (minDiff == null || diff < minDiff) {\n                    minDiff = diff;\n                    closestPair.clear();\n                    closestPair.add(Math.min(numbers.get(i), numbers.get(j)));\n                    closestPair.add(Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n        \n        return closestPair;\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list should have at least two elements\");\n        }\n        \n        Double minVal = Collections.min(numbers);\n        Double maxVal = Collections.max(numbers);\n        double diff = maxVal - minVal;\n        \n        return numbers.stream()\n                  .map(i -> (i - minVal) / diff)\n                  .collect(Collectors.toList());\n    }\n    \n    public static void main(String[] args) {\n        List<Double> test = new ArrayList<>();\n        test.add(1.0);\n        test.add(2.0);\n        test.add(3.0);\n        test.add(4.0);\n        test.add(5.0);\n        \n        System.out.println(rescaleToUnit(test));\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "// Create a new ArrayList to store the filtered integers.\n        ArrayList<Integer> result = new ArrayList<>();\n\n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                // If this object is an instance of Integer, add it to our result list.\n                result.add((Integer) obj);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "return string.length();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Length of empty string: \" + strlen(\"\")); // output should be 0\n        System.out.println(\"Length of 'abc': \" + strlen(\"abc\")); // output should be 3\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "// Start from half of the number and go down by one\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args){\n        System.out.println(largestDivisor(15)); // Output: 5\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "List<Integer> factors = new ArrayList<>();\n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n\n        if (n > 2) {\n            factors.add(n);\n        }\n\n        return factors;\n    }\n}\n\npublic class Main{\n    public static void main(String[] args){\n       Scanner sc = new Scanner(System.in);\n       int num = sc.nextInt();\n       List<Integer> factors = Factorize.factorize(num);\n       System.out.println(factors);\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "Set<Object> set = new LinkedHashSet<>();\n        for (Object number : numbers) {\n            if (!set.contains(number)) {\n                set.add(number);\n            }\n        }\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(\"Original list: \" + numbers);\n        System.out.println(\"After removing duplicates: \" + removeDuplicates(numbers));\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        String testStr = \"Hello\";\n        System.out.println(\"'\" + flipCase(testStr) + \"'\");\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (Object obj : strings) {\n            sb.append(obj);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        List<Object> stringList1 = Arrays.asList(\"\", \"b\", \"c\");\n        System.out.println(concatenate(stringList1)); //Output: 'bc'\n\n        List<Object> stringList2 = new ArrayList<>();\n        System.out.println(concatenate(stringList2)); // Output: ''\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "ArrayList<Object> result = new ArrayList<>();\n        for (Object string : strings){\n            if (string instanceof String && ((String) string).startsWith(prefix))\n                result.add(string);\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "List<Object> positiveNumbers = new ArrayList<>();\n\n        for (Object num : l) {\n            if ((Integer)num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        \n        return positiveNumbers;\n    }\n    \n    public static void main(String[] args) {\n\tList<Object> l = new ArrayList<>();\n\tl.add(-1);\n\tl.add(2);\n\tl.add(-4);\n\tl.add(5);\n\tl.add(6);\n\tSystem.out.println(getPositive(l)); // [2, 5, 6]\n\n\tList<Object> l2 = new ArrayList<>();\n\tl2.add(5);\n\tl2.add(3);\n\tl2.add(-5);\n\tl2.add(2);\n\tl2.add(-3);\n\tl2.add(3);\n\tl2.add(9);\n\tl2.add(0);\n\tl2.add(123);\n\tl2.add(1);\n\tl2.add(-10);\n\tSystem.out.println(getPositive(l2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    \n    public static void main(String[] args){\n        System.out.println(isPrime(6)); // False\n        System.out.println(isPrime(101)); // True\n        System.out.println(isPrime(11)); // True\n        System.out.println(isPrime(13441)); // True\n        System.out.println(isPrime(61)); // True\n        System.out.println(isPrime(4)); // False\n        System.out.println(isPrime(1)); // False\n    }\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "// Create a new list containing only the elements that are on indices divisible by three.\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n\n        // Sort the list of elements at indices divisible by three.\n        Collections.sort(thirds);\n\n        // Create a new list that will contain our final result.\n        List<Integer> sortedL = new ArrayList<>();\n\n        // Add values from the original list and the sorted third-indexed values to the new list, alternating between them.\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sortedL.add(thirds.get(j)); // Get value from sorted third-indexed values.\n                j++; // Move on to next value in sorted third-indexed values list.\n            } else {\n                sortedL.add(l.get(i)); // Get value from original list.\n            }\n        }\n        \n        return sortedL;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        System.out.println(\"Original List: \" + l);\n        System.out.println(\"Sorted List: \" + sortThird(l));\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "Set<Integer> s = new HashSet<>(l);\n        return new ArrayList<>(s);\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "return Collections.max(l);\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "int count = 0;\n        for (int i = 1; i < n; ++i) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numberStr = Integer.toString(i);\n                char[] arr = numberStr.toCharArray();\n                for (char c : arr) {\n                    if (c == '7') {\n                        ++count;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fizzBuzz(50)); // 0\n        System.out.println(fizzBuzz(78)); // 2\n        System.out.println(fizzBuzz(79)); // 3\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        \n        Collections.sort(evenIndices);\n        \n        List<Integer> result = new ArrayList<>();\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndices.get(j));\n                j++;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> l = Arrays.asList(5, 6, 3, 4);\n        System.out.println(sortEven(l)); // Output: [3, 6, 5, 4]\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "ArrayList<Integer> primes = new ArrayList<>();\n        for (int i = 2; true; i++) {\n            if (isPrimeNumber(i)) {\n                primes.add(i);\n            }\n            if (primes.size() == n) return primes.get(n-1);\n        }\n    }\n    \n    public static boolean isPrimeNumber(int num) {\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n    \n    public static int fib(int n) {\n        if (n <= 1) return n;\n        else return fib(n-1) + fib(n-2);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(primeFib(1)); // 2\n        System.out.println(primeFib(2)); // 3\n        System.out.println(primeFib(3)); // 5\n        System.out.println(primeFib(4)); // 13\n        System.out.println(primeFib(5)); // 89\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "if (l.size() < 3) return false; // at least three elements are needed\n        Collections.sort(l);\n        for (int i = 0; i < l.size(); i++) {\n            int a = l.get(i);\n            int start = i + 1;\n            int end = l.size() - 1;\n            while (start < end) {\n                if (a + l.get(start) + l.get(end) == 0) return true;\n                else if (a + l.get(start) + l.get(end) > 0) end--;\n                else start++;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "// if there are no cars coming from either direction, no collision can occur\n        if (n <= 0) return 0;\n\n        // All cars moving left to right will collide with all cars moving right to left.\n        // Therefore the number of collisions is simply n*n.\n        return n * n;\n    }\n    \n    public static void main(String[] args) {\n        int numCars = 3;\n        System.out.println(\"Number of Collisions: \" + carRaceCollision(numCars));\n    }\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "for (int i = 0; i < l.size(); i++) {\n            Integer x = (Integer) l.get(i);\n            l.set(i, x + 1);\n        }\n        return l;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(incrList(new ArrayList<>(Arrays.asList(1, 2, 3))));\n        System.out.println(incrList(new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))));\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "Set<Integer> seen = new HashSet<>();\n\n        for (int i : l) {\n            if (seen.contains(-i)) {\n                return true;\n            } else {\n                seen.add(i);\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "return Integer.toString(x, base);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(changeBase(8, 3)); // '22'\n        System.out.println(changeBase(8, 2)); // '1000'\n        System.out.println(changeBase(7, 2)); // '111'\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "//Calculate the area of the triangle\n        double area = (double) a * h / 2;\n        \n        return area;\n    }\n\n    public static void main(String[] args) {\n      Scanner scanner = new Scanner(System.in);  \n      System.out.println(\"Enter length of the side:\");  \n      int a = scanner.nextInt();  // Length of side\n      \n      System.out.println(\"Enter height of the triangle:\");  \n      int h = scanner.nextInt();  // Height of the triangle\n     \n      System.out.println(\"Area of the triangle is: \" + triangleArea(a,h));\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "// Initialization.\n        int[] arr = new int[n+1];\n        arr[2] = 2;\n        \n        // Build the array from bottom up.\n        for (int i=3; i<=n; ++i) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n        \n        return arr[n];\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "if (l == null || l.size() <= 0) {\n            return null;\n        }\n        \n        Collections.sort(l);\n        int n = l.size();\n        double median;\n        if (n % 2 == 1) { // Odd number of elements\n            median = l.get(n / 2);\n        } else { // Even number of elements\n            median = ((double)l.get((n - 1) / 2) + (double)l.get(n / 2)) / 2;\n        }\n        \n        return median;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>(Arrays.asList(-10, 4, 6, 1000, 10, 20));\n        \n        System.out.println(\"Median is: \" + median(list));\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "int i = 0, j = text.length() - 1;\n\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\"));\n        System.out.println(isPalindrome(\"aba\"));\n        System.out.println(isPalindrome(\"aaaaa\"));\n        System.out.println(isPalindrome(\"zbcd\"));\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "int result = 2;\n        for (int i=0; i<n; i++) {\n            if ((result*2)%p == 0) {\n                result = 0;\n            } else {\n                result = (result * 2) % p;\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(modp(3, 5)); // expected: 3\n        System.out.println(modp(1101, 101)); // expected: 2\n        System.out.println(modp(0, 101)); // expected: 1\n        System.out.println(modp(3, 11)); // expected: 8\n        System.out.println(modp(100, 101)); // expected: 1\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "for (int i : l) {\n            if (i >= t) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "return x + y;\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "// Create count arrays for both strings\n        int[] count = new int[256];\n        for (char c : s0.toCharArray()) {\n            count[c]++;\n        }\n        for (char c : s1.toCharArray()) {\n            count[c]--;\n        }\n        // Check if any count is non-zero\n        for (int i = 0; i < count.length; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push('>');\n            } else {\n                // If there's nothing in the stack, we have an extra closing bracket\n                if (stack.isEmpty()) return false;\n                \n                // Check that this is the right kind of closing bracket \n                char lastOpenBracket = stack.pop();\n                if (lastOpenBracket != bracket) {\n                    return false;\n                }\n            }\n        }\n        \n        // If there's anything left in the stack, that means we have a missing closing bracket \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"<\"));  // False\n        System.out.println(correctBracketing(\"<>\")); // True\n        System.out.println(correctBracketing(\"<<><>>\")); // True\n        System.out.println(correctBracketing(\"><<>\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "if (l.size() < 2) return true; // An empty list or a one-element list is also monotonically increasing/decreasing.\n        \n        Integer prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i=1; i<l.size(); ++i) {\n            int curr = l.get(i);\n            \n            if (curr > prev) {\n                decreasing = false;\n            } \n            else if (curr < prev) {\n                increasing = false;\n            }\n            \n            if not (increasing or decreasing):\n                return False\n        \n            prev = curr;\n        }\n        \n        return True\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> list3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(monotonic(list1)); // True\n        System.out.println(monotonic(list2)); // False\n        System.out.println(monotonic(list3)); // True\n    }\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "// Create a set from the first list. This will automatically remove any duplicate elements.\n        Set<Integer> set = new HashSet<>(l1);\n        \n        // Filter out any elements in the second list that aren't also in the first list.\n        List<Object> commonList = l2.stream()\n                                .filter(set::contains)\n                                .collect(Collectors.toList());\n\n        // Sort the resulting list, and return it.\n        Collections.sort(commonList);\n        return commonList;\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "while (n % 2 == 0) {\n            // Divide by 2 until not possible anymore\n            n /= 2;\n        }\n\n        for (int i = 3; i * i <= n; i += 2) {\n            // Check if divisible, divide and try next number\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n\n        return n > 1 ? n : 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195)); // Output: 29\n        System.out.println(largestPrimeFactor(2048));   // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "return ((n*(n + 1))/2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Sum of 30 is: \" + sumToN(30));\n        System.out.println(\"Sum of 100 is: \" + sumToN(100));\n        System.out.println(\"Sum of 5 is: \" + sumToN(5));\n        System.out.println(\"Sum of 10 is: \" + sumToN(10));\n        System.out.println(\"Sum of 1 is: \" + sumToN(1));\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "Stack<Character> stack = new Stack<>();\n        \n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')'){\n                if (stack.isEmpty()){\n                    return false;\n                }else{\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"(\")); // False\n        System.out.println(correctBracketing(\"()\")); // True\n        System.out.println(correctBracketing(\"(()())\")); // True\n        System.out.println(correctBracketing(\")(()\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); //[1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3))); //[2, 6]\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "if (n <= 1) return 0;\n        if (n == 2) return 1;\n        \n        int[] arr = new int[n+1];\n        \n        for(int i=3; i<=n;i++) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n        \n        return arr[n];\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "int count = 0;\n        String lowerCase = s.toLowerCase();\n\n        for (int i = 0; i < lowerCase.length(); i++) {\n            char c = lowerCase.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n\n        // check if the last character is 'y'\n        if (lowerCase.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n\n        return count;\n    }\n}\n\nclass Test{\n    public static void main(String[] args){\n        System.out.println(VowelsCount.vowelsCount(\"abcde\")); //2\n        System.out.println(VowelsCount.vowelsCount(\"ACEDY\")); //3\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "// convert the integer to a string\n        String str = Integer.toString(x);\n        // compute the number of digits in the string\n        int numDigits = str.length();\n        // handle the case where shift is greater than the number of digits\n        if (shift >= numDigits) {\n            return new StringBuilder(str).reverse().toString();\n        } else {\n            // substring from the shift position to the end, then append the substring from 0 to shift-1\n            String result = str.substring(shift) + str.substring(0, shift);\n            return result;\n        }\n    }\n}\n\npublic class Main{\n    public static void main(String[] args) {\n\t    // testing the function with some examples\n\t    System.out.println(CircularShift.circularShift(12, 1)); // \"21\"\n\t    System.out.println(CircularShift.circularShift(12, 2)); // \"12\"\n\t    System.out.println(CircularShift.circularShift(12345, 3)); // \"456123\"\n\t    System.out.println(CircularShift.circularShift(98765, 4)); // \"98765\"\n\t}\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"digitSum(\\\"\\\") = \" + digitsum(\"\")); // => 0\n        System.out.println(\"digitSum(\\\"abAB\\\") = \" + digitsum(\"abAB\")); // => 131\n        System.out.println(\"digitSum(\\\"abcCd\\\") = \" + digitsum(\"abcCd\")); // => 67\n        System.out.println(\"digitSum(\\\"helloE\\\") = \" + digitsum(\"helloE\")); // => 69\n        System.out.println(\"digitSum(\\\"woArBld\\\") = \" + digitsum(\"woArBld\")); // => 131\n        System.out.println(\"digitSum(\\\"aAaaaXa\\\") = \" + digitsum(\"aAaaaXa\")); // => 153\n    }\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "String[] splitStr = s.split(\" \");\n        int apples = Integer.parseInt(splitStr[0]);\n        int oranges = Integer.parseInt(splitStr[3]);\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "// Initialize smallest even value and its index to null\n        Integer smallestEvenVal = null;\n        Integer smallestIndex = null;\n        \n        for (int i=0; i<arr.size(); i++) {\n            Integer currentNum = (Integer) arr.get(i);\n            \n            // If current number is even and smaller than the smallest even value found so far\n            if (currentNum % 2 == 0 && (smallestEvenVal == null || currentNum < smallestEvenVal)) {\n                smallestEvenVal = currentNum;\n                smallestIndex = i;\n            }\n        }\n        \n        // If no even number is found, return an empty list\n        if (smallestEvenVal == null) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(smallestEvenVal, smallestIndex);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            if (!freq.containsKey(num)) {\n                freq.put(num, 1);\n            } else {\n                freq.put(num, freq.get(num) + 1);\n            }\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            if (entry.getKey() > 0 && entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n        return max;\n    }\n}\n\npublic class Solution{\n\tpublic static void main(String[] args){\n        List<Integer> lst1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        List<Integer> lst2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        List<Integer> lst3 = Arrays.asList(5, 5, 4, 4, 4);\n\t\tSystem.out.println(\"Result: \" + Search.search(lst1)); // Output: 2\n\t\tSystem.out.println(\"Result: \" + Search.search(lst2)); // Output: 3\n\t\tSystem.out.println(\"Result: \" + Search.search(lst3)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "// Implementation goes here.\n        \n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "if (a + b > c && a + c > b && b + c > a) { // checks if three sides can form a valid triangle\n            double s = (a + b + c) / 2; // semi-perimeter of the triangle\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c)); // formula for area of a triangle\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // expected: 6.00\n        System.out.println(triangleArea(1, 2, 10)); // expected: -1\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n\n        int start = 0;\n        int end = q.size() - 1;\n\n        while (start < end) {\n            if (!q.get(start).equals(q.get(end))) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "int n = arr.size();\n        int changes = 0;\n\n        for (int i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - 1 - i)) {\n                changes++;\n            }\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(5);\n        arr.add(4);\n        arr.add(7);\n        arr.add(9);\n        arr.add(6);\n\n        System.out.println(smallestChange(arr));  // Expected output: 4\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "int lst1Chars = lst1.stream().mapToInt(s -> s.toString().length()).sum();\n        int lst2Chars = lst2.stream().mapToInt(s -> s.toString().length()).sum();\n        \n        if (lst1Chars <= lst2Chars) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(totalMatch(new ArrayList<>(), new ArrayList<>())); // []\n        System.out.println(totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "if (a < 2) return false; // Negative numbers and 1 are not primes.\n        for(int i=2;i<=Math.sqrt(a);i++) {\n            while(a % i == 0) {\n                if(isPrime(i)) a /= i; \n                else return false; // If we encounter a non-prime factor, it's not the multiplication of 3 primes.\n            }\n        }\n        return (a > 1)?false:true; // If there are more than 3 unique factors, it's not the multiplication of 3 primes.\n    }\n    \n    public static Boolean isPrime(int n) {\n        if (n < 2) return false;\n        for(int i=2;i<=Math.sqrt(n);i++) {\n            if(n % i == 0) return false; // Number has a divisor other than 1 and itself, so it's not prime.\n        }\n        return true; // Number passed all possible divisors. It's a prime number.\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "double result = Math.log(x)/Math.log(n);\n        if (result == Math.floor(result)) return true;\n        else return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1, 4)); // => true\n        System.out.println(isSimplePower(2, 2)); // => true\n        System.out.println(isSimplePower(8, 2)); // => true\n        System.out.println(isSimplePower(3, 2)); // => false\n        System.out.println(isSimplePower(3, 1)); // => false\n        System.out.println(isSimplePower(5, 3)); // => false\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "int cube_root = (int) Math.round(Math.pow(a, 1. / 3.));\n        return cube_root * cube_root * cube_root == a;\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "String strNum = (String) num; // Convert to string\n        Set<Character> primes = new HashSet<>();\n        primes.add('2');\n        primes.add('3');\n        primes.add('5');\n        primes.add('7');\n        primes.add('B');\n        primes.add('D');\n        \n        int count = 0; // Initialize count of prime digits\n        for(char c : strNum.toCharArray()){ // Convert string to char array and iterate over it\n            if(primes.contains(c)){\n                count++; // Increment count if the character is a prime number\n            }\n        }\n        \n        return count; // Return the final count\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "// convert the decimal number to binary and remove the '0b' from the string representation\n        String binary = Integer.toBinaryString(decimal);\n\n        // add the 'db' prefix and suffix to the binary string\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));  // prints \"db1111db\"\n        System.out.println(decimalToBinary(32));  // prints \"db100000db\"\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i+1);\n            char c3 = s.charAt(i+2);\n\n            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "List<String> letterGrades = new ArrayList<>();\n        \n        for (Number g : grades){\n            if (g.doubleValue() == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (g.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (g.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (g.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (g.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (g.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (g.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (g.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (g.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (g.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (g.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (g.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "int len = string.length();\n        \n        if (len <= 1) return false; // Prime numbers are greater than 1\n\n        for(int i=2; i<len/2+1; i++)\n        {\n            if(len % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\");\n        }\n\n        // In a n-digit number, there are 10^n possible numbers.\n        // We need to subtract the count of n-digit numbers that start or end with 0.\n        int powerOfTen = (int)Math.pow(10, n);\n\n        // The count of n-digit numbers starting with 0 is 9*10^(n-1).\n        int startsWithZeroCount = 9 * (int)Math.pow(10, n - 1);\n\n        // The count of n-digit numbers ending with 0 is also 9*10^(n-1), because there are 9 possible digits except 0.\n        int endsWithZeroCount = startsWithZeroCount;\n\n        // Subtract the counts from powerOfTen.\n        return powerOfTen - startsWithZeroCount - endsWithZeroCount;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 1; i <= 3; ++i) {\n            System.out.println(\"Count of \" + i + \"-digit numbers starting or ending with 1: \" + startsOneEnds(i));\n        }\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 31; i >= 0; --i) {\n            if ((sum & (1 << i)) != 0) {\n                sb.append('1');\n            } else {\n                sb.append('0');\n            }\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "return lst.stream().filter((e, i) -> i % 2 != 0 && e % 2 == 0).mapToInt(Integer::intValue).sum();\n    }\n}\n\npublic class Main{\n    public static void main(String[] args){\n        List<Integer> lst = Arrays.asList(4, 2, 6, 7);\n        System.out.println(Add.add(lst));\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "// Split the input string into words using space as delimiter.\n        String[] words = s.split(\" \");\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] characters = word.toCharArray();\n            \n            Arrays.sort(characters); // Sort the characters in the word.\n            \n            String sortedWord = new String(characters);\n            \n            result.append(sortedWord + \" \"); // Append the sorted word to the result string.\n        }\n        \n        return result.toString().trim(); // Remove trailing space and return the result.\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(antiShuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(antiShuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(antiShuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "ArrayList<Tuple> result = new ArrayList<>();\n        for (int row = 0; row < lst.size(); ++row) {\n            List<Integer> currentRow = (List<Integer>) lst.get(row);\n            for (int col = 0; col < currentRow.size(); ++col) {\n                if (currentRow.get(col).equals(x)) {\n                    result.add(new Tuple(row, col));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Tuple>() {\n            public int compare(Tuple a, Tuple b) {\n                if (a.x != b.x) {\n                    return a.x - b.x;\n                } else {\n                    // For rows that are same, sort columns in descending order.\n                    return b.y - a.y;\n                }\n            }\n        });\n        return result;\n    }\n\n    public static class Tuple implements Comparable<Tuple> {\n        int x;\n        int y;\n\n        public Tuple(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public int compareTo(Tuple other) {\n            if (this.x != other.x) {\n                return this.x - other.x;\n            } else {\n                // For rows that are same, sort columns in descending order.\n                return other.y - this.y;\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "if (array.size() == 0 || array.size() == 1) {\n            return array;\n        }\n\n        int first = (int) array.get(0);\n        int last = (int) array.get(array.size() - 1);\n\n        List<Object> sortedArray = new ArrayList<>(array);\n\n        if ((first + last) % 2 == 0) {\n            // descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // ascending order\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (Character.isLowerCase(ch)) {\n                    result.append((char) ('a' + (ch - 'a' + 4) % 26));\n                } else {\n                    result.append((char) ('A' + (ch - 'A' + 4) % 26));\n                }\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a string: \");\n        String s = scanner.nextLine();\n        System.out.println(\"Encrypted string is: \" + Encrypt.encrypt(s));\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "if (lst.size() < 2) return null;\n        \n        // Initialize the smallest and second smallest to the first element of list\n        int small = (int) lst.get(0);\n        int sec_small = Integer.MAX_VALUE;\n\n        for (int i = 1; i < lst.size(); i++) {\n            int num = (int) lst.get(i);\n\n            // Update the smallest if current element is smaller than smallest\n            if (num < small) {\n                sec_small = small;\n                small = num;\n            } else if (num > small && num < sec_small){\n                //Update second smallest only if it's greater than smallest but lesser than next number. \n                sec_small = num;\n            }\n        }\n        \n        // If there is no second smallest element\n        if(sec_small == Integer.MAX_VALUE) return null;\n        else return sec_small;\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "// Initialize the count of boredoms to be 0\n        int count = 0;\n\n        // Split the input string into sentences using a regular expression\n        String[] sentences = s.split(\"[.!?]\");\n\n        // Iterate over each sentence\n        for (String sentence : sentences) {\n            // Trim white spaces from the start and end of the sentence\n            sentence = sentence.trim();\n\n            // If the sentence is not empty and it starts with \"I\", increment the count\n            if (!sentence.isEmpty() && sentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n\n        // Return the count of boredoms\n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isBored(\"Hello world\"));  // prints: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\"));  // prints: 1\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "int a = x.intValue();\n        int b = y.intValue();\n        int c = z.intValue();\n\n        return (a + b == c || a + c == b || b + c == a);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(anyInt(5, 2, 7)); // True\n        System.out.println(anyInt(3, 2, 2)); // False\n        System.out.println(anyInt(3, -2, 1)); // True\n        System.out.println(anyInt(3.6, -2.2, 2)); // False\n    }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n        \n        for (int i=0; i<message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isAlphabetic(c)) {\n                if (Character.toLowerCase(c) == 'a') result.append('C'); \n                else if (Character.toLowerCase(c) == 'e') result.append('G'); \n                else if (Character.toLowerCase(c) == 'i') result.append('K'); \n                else if (Character.toLowerCase(c) == 'o') result.append('Q'); \n                else if (Character.toLowerCase(c) == 'u') result.append('W'); \n                else {\n                    char upperC = Character.toUpperCase(c);\n                    result.append(upperC);\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "// This is a Java solution for your problem. We find the largest prime number in the list and then calculate the sum of its digits. If there are no primes, we return -1. \n\n        int maxPrime = Integer.MIN_VALUE;\n\n        for (Integer i : lst) {\n            if (i > 1 && isPrime(i)) {\n                maxPrime = Math.max(maxPrime, i);\n            }\n        }\n        \n        // If there are no primes in the list\n        if (maxPrime == Integer.MIN_VALUE) return -1;\n\n        int sum = 0;\n\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sum;\n    }\n\n    // Check if number is prime\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "// Check if dict is an instance of Map (Java's equivalent to Python's dictionary).\n        if (!(dict instanceof Map)) {\n            throw new IllegalArgumentException(\"Input should be a map.\");\n        }\n\n        Map<String, String> castDict = (Map<String, String>) dict;\n        boolean lowerCaseFound = false;\n        boolean upperCaseFound = false;\n        \n        for(String key: castDict.keySet()) {\n            if (Character.isLowerCase(key.charAt(0))) lowerCaseFound = true;\n            else if (Character.isUpperCase(key.charAt(0))) upperCaseFound = true;\n            else return false; // If the key is not all lower case or all upper case, return false.\n        }\n        \n        return !(lowerCaseFound && upperCaseFound); // Return true if either lowerCaseFound or upperCaseFound is true, but not both. \n    }\n    \n    public static void main(String[] args) {\n        System.out.println(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); \n        System.out.println(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); \n        System.out.println(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}));  \n        System.out.println(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); \n        System.out.println(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); \n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.*;\n\npublic class CountUpTo {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "// Get the unit digit from each number\n        int lastDigitA = Math.abs(a % 10);\n        int lastDigitB = Math.abs(b % 10);\n\n        // Multiply them and return the result\n        return lastDigitA * lastDigitB;\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static boolean isVowel(char c) {\n        char upper = Character.toUpperCase(c);\n        return upper == 'A' || upper == 'E' || upper == 'I' || upper == 'O' || upper == 'U';\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countUpper(\"aBCdEf\")); // 1\n        System.out.println(countUpper(\"abcdefg\")); // 0\n        System.out.println(countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) Math.ceil(num);\n        } else {\n            return (int) Math.floor(num);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(ClosestInteger.closestInteger(\"10\")); // 10\n        System.out.println(ClosestInteger.closestInteger(\"15.3\")); // 15\n        System.out.println(ClosestInteger.closestInteger(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % 2 == 0) {\n                result.add((i * 2) - 1);\n            } else {\n                result.add(i * 2);\n            }\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MakeAPile.makeAPile(3)); // Expected [3, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "// split the string into an array of words by either spaces or commas\n        String[] words = s.split(\"[, ]\");\n        return Arrays.asList(words);\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "// Initialize the biggest even number as -1.\n        int maxEven = -1;\n\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                maxEven = i;\n            }\n        }\n\n        return maxEven;\n    }\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "if (n > m) {\n            return -1;\n        }\n        \n        long total = 0;\n        for(int i=n;i<=m;i++){\n            total += i;\n        }\n        \n        // calculate the average and round it to the nearest integer.\n        long avg = Math.round((double)total / (m-n+1));\n        \n        // convert the rounded average to binary and return as a String.\n        return \"0b\" + Integer.toBinaryString(Math.toIntExact(avg));\n    }\n    \n    public static void main(String args[]){\n        System.out.println(roundedAvg(1, 5)); // should print \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // should print -1\n        System.out.println(roundedAvg(10, 20)); // should print \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // should print \"0b11010\"\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private static boolean hasEvenDigit(int number) {\n        while (number > 0) {\n            if ((number % 10) % 2 == 0) {\n                return true;\n            }\n            number /= 10;\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "List<Integer> nums = new ArrayList<>();\n        for (Object o : arr) {\n            if (o instanceof Integer && ((Integer) o).intValue() >= 1 && ((Integer) o).intValue() <= 9) {\n                nums.add(((Integer) o).intValue());\n            }\n        }\n        Collections.sort(nums, Comparator.reverseOrder());\n        List<String> res = new ArrayList<>();\n        for (Integer i : nums) {\n            switch (i) {\n                case 1:\n                    res.add(\"One\");\n                    break;\n                case 2:\n                    res.add(\"Two\");\n                    break;\n                case 3:\n                    res.add(\"Three\");\n                    break;\n                case 4:\n                    res.add(\"Four\");\n                    break;\n                case 5:\n                    res.add(\"Five\");\n                    break;\n                case 6:\n                    res.add(\"Six\");\n                    break;\n                case 7:\n                    res.add(\"Seven\");\n                    break;\n                case 8:\n                    res.add(\"Eight\");\n                    break;\n                case 9:\n                    res.add(\"Nine\");\n                    break;\n            }\n        }\n        return res;\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        \n        for (int i=0;i<n;i++){\n            if (i % 2 == 0){\n                int factorial = 1;\n                \n                for (int j = 1; j <= i+1; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i+1; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> result = f(5);\n        for (Integer i : result) {\n            System.out.print(i + \" \");\n        }\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(i)) {\n                list.add(i);\n            }\n        }\n        \n        int evenCount = 0, oddCount = 0;\n        for (Integer num : list) {\n            if ((num & 1) == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        return Arrays.asList(evenCount, oddCount);\n    }\n    \n    private static boolean isPalindrome(int n) {\n        int reversed = 0;\n        int temp = n;\n        while (temp > 0) {\n            int remainder = temp % 10;\n            reversed = reversed * 10 + remainder;\n            temp /= 10;\n        }\n        \n        return reversed == n;\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "int count = 0;\n\n        for (Object num : arr) {\n            if (!(num instanceof Integer)) continue; // Skip non-integer elements\n            int n = Math.abs((Integer) num); // Get absolute value of number\n            while (n > 0) {\n                if (n % 10 > 0) {\n                    count++;\n                    break;\n                }\n                n /= 10;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "if (arr.size() == 0) return true;\n        \n        int n = arr.size();\n        // Find the rotation index\n        for(int i=1; i<n; i++) {\n            if((Integer)arr.get(i-1) > (Integer)arr.get(i)) {\n                break;\n            }\n            if(i == n - 1) return true; // If no rotation is needed\n        }\n        \n        int rotateIndex = i; // The index where we need to rotate\n        // Check if the subarray [0, rotateIndex-1] and [rotateIndex, n-1] are sorted in non decreasing order \n        for(int j=0; j<rotateIndex; j++) {\n            if((Integer)arr.get(j) > (Integer)arr.get(j+1)) return false;\n        }\n        \n        for(int k = rotateIndex; k < n - 1; k++) {\n            if((Integer)arr.get(k) > (Integer)arr.get(k+1)) return false;\n        }\n\n        // Check if the array is sorted in non-decreasing order by performing rotation operation\n        return ((Integer)arr.get(rotateIndex - 1) <= (Integer)arr.get(n - 1));\n    }\n}\n\n// Test Cases for this function\n// move_one_ball([3, 4, 5, 1, 2])==>True\n// move_one_ball([3, 5, 4, 1, 2])==>False\n// move_one_ball([])==>True"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "int oddCount = 0;\n        \n        for(int num : lst1){\n            if(num % 2 != 0)\n                oddCount++;\n        }\n        \n        int evenCount = 0;\n        \n        for(int num:lst2){\n            if(num % 2 == 0)\n                evenCount++;\n                \n            if(evenCount >= oddCount)\n                return \"YES\";\n        }\n    \n        return \"NO\";\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "String[] str = test.split(\" \");\n        Map<String, Integer> map = new HashMap<>();\n        int max = 0;\n        for (String s : str) {\n            if (!s.equals(\"\")) {\n                if (!map.containsKey(s)) {\n                    map.put(s, 1);\n                } else {\n                    map.put(s, map.get(s) + 1);\n                }\n                max = Math.max(max, map.get(s));\n            }\n        }\n\n        Map<String, Integer> resultMap = new HashMap<>();\n        for (String s : map.keySet()) {\n            if (map.get(s).equals(max)) {\n                resultMap.put(s, max);\n            }\n        }\n\n        return resultMap;\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "// Remove all characters in s that are equal to any character in c\n        for (char ch : c.toCharArray()) {\n            s = s.replaceAll(Character.toString(ch), \"\");\n        }\n\n        boolean isPalindrome = false;\n        // Check if the result string is palindrome\n        if (s.equals(new StringBuilder(s).reverse().toString())) {\n            isPalindrome = true;\n        }\n\n        return Arrays.asList(s, isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        List<Object> result = reverseDelete(\"abcdedcba\", \"ab\");\n        System.out.println(result.get(0) + \", isPalindrome: \" + result.get(1));  // Outputs: cdedc, isPalindrome: true\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "List<String> result = new ArrayList<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            StringBuilder str = new StringBuilder(\"the number of odd elements \");\n\n            // Count the number of odd digits in each string\n            for (char c : lst.get(i).toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n\n            str.append(count).append(\"n the str\").append(count).append(\"ng \").append(count).append(\" of the \").append(count).append(\"nput.\");\n            result.add(str.toString());\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "int n = nums.size();\n        if (n == 0) return 0;\n        long ans = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int i = 0; i < n; i++) {\n            currentSum += (long)nums.get(i);\n            ans = Math.min(ans, currentSum);\n            if (currentSum > 0) currentSum = 0;\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }\n\n    public static void main(String[] args){\n        List<Object> nums1 = Arrays.asList(-2, -3, 4, -1, -2, 1, 5, -3);\n        List<Object> nums2 = Arrays.asList(1, 2, 3);\n        System.out.println(minsubarraysum(nums1)); // should return -6\n        System.out.println(minsubarraysum(nums2)); // should return 1\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "int rows = grid.size();\n        int cols = grid.get(0).size();\n        \n        int total_water = 0;\n        for (int i=0; i<rows; ++i) {\n            for (int j=0; j<cols; ++j) {\n                total_water += grid.get(i).get(j);\n            }\n        }\n        \n        int maxFill = total_water/capacity;\n        return maxFill;\n    }\n    \n    public static void main(String[] args) {\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0,0,1,0));\n        grid1.add(Arrays.asList(0,1,0,0));\n        grid1.add(Arrays.asList(1,1,1,1));\n        \n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0,0,1,1));\n        grid2.add(Arrays.asList(0,0,0,0));\n        grid2.add(Arrays.asList(1,1,1,1));\n        grid2.add(Arrays.asList(0,1,1,1));\n        \n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0,0,0));\n        grid3.add(Arrays.asList(0,0,0));\n        \n        System.out.println(maxFill(grid1, 1)); // Output: 6\n        System.out.println(maxFill(grid2, 2)); // Output: 5\n        System.out.println(maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "return arr.stream()\n                    .sorted((x, y) -> {\n                        int countX = Integer.bitCount(Integer.parseInt(String.valueOf(x)));\n                        int countY = Integer.bitCount(Integer.parseInt(String.valueOf(y)));\n                        \n                        if (countX == countY) return x.compareTo(y);\n                        else return countX - countY;\n                    })\n                    .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Object> test = new ArrayList<>();\n        test.add(1);\n        test.add(5);\n        test.add(2);\n        test.add(3);\n        test.add(4);\n        System.out.println(sortArray(test)); // [1, 2, 3, 4, 5]\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "String[] words = s.split(\" \");\n        List<Object> result = new ArrayList<>();\n        \n        for (String word : words){\n            int count = 0;\n            for (char c : word.toCharArray()){\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n                    count++;\n                }\n            }\n            \n            if (count == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "String vowels = \"AEIOUaeiou\";\n        char[] chars = word.toCharArray();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            if (vowels.indexOf(chars[i]) != -1 && i > 0) {\n                if (vowels.indexOf(chars[i-1]) == -1) return String.valueOf(chars[i]);\n            }\n        }\n        return \"\";\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "int open = 0, close = 0;\n        for (int i = 0; i < lst.get(0).length(); i++) {\n            char c = lst.get(0).charAt(i);\n            if (c == '(') {\n                open++;\n            } else {\n                close++;\n            }\n        }\n        for (int i = 0; i < lst.get(1).length(); i++) {\n            char c = lst.get(1).charAt(i);\n            if (c == '(') {\n                open--;\n            } else {\n                close--;\n            }\n        }\n        return (open == 0 && close == 0) ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "// Write your code here\n         List<Integer> result = new ArrayList<>();\n         for (int i=0;i<k;i++)\n             result.add(Collections.max(arr));\n         return result;\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "// Write your code here\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            String num = arr.get(i).toString();\n            if (num.length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n        int k = 4;\n        System.out.println(addElements(arr, k));  // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "List<Integer> list = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                list.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        list.add(1);\n        Collections.sort(list);\n        return list;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(GetOddCollatz.getOddCollatz(5)); // [1, 5]\n        System.out.println(GetOddCollatz.getOddCollatz(10)); // [1, 5, 21]\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "// split the string by '-'\n        String[] splitDate = date.split(\"-\");\n        \n        if (splitDate.length != 3) {\n            return false;\n        }\n        \n        int month, day, year;\n        \n        try {\n            month = Integer.parseInt(splitDate[0]);\n            day = Integer.parseInt(splitDate[1]);\n            year = Integer.parseInt(splitDate[2]);\n            \n            if (month < 1 || month > 12) return false;\n            \n            switch (month){\n                case 2:\n                    return (day >= 1 && day <= ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0 ? 29 : 28));\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    return (day >= 1 && day <= 30);\n                default:\n                    return (day >= 1 && day <= 31);\n            }\n        } catch(NumberFormatException e) {\n            return false;\n        }\n        \n        // if no exception is thrown, return true\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if ((c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "int count = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if ((Integer)lst.get(i) < (Integer)lst.get(i-1)) {\n                return false;\n            } else if ((Integer)lst.get(i) == (Integer)lst.get(i-1)){\n                count++;\n                if (count > 1){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "int start = Math.max(interval1.get(0), interval2.get(0));\n        int end   = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) \n            return \"NO\";\n        \n        int length = end - start + 1;\n        \n        // Check if the length is a prime number\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) return \"NO\";\n        }\n        \n        if (length == 1 || length == 0) return \"YES\";\n        else return \"NO\";\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(intersection(new ArrayList<>(Arrays.asList(1,2)), new ArrayList<>(Arrays.asList(2,3)))); // Expected: NO\n        System.out.println(intersection(new ArrayList<>(Arrays.asList(-1,1)), new ArrayList<>(Arrays.asList(0,4)))); // Expected: NO\n        System.out.println(intersection(new ArrayList<>(Arrays.asList(-3,-1)), new ArrayList<>(Arrays.asList(-5,5)))); // Expected: YES\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "if (arr.size() == 0) return null; // Return null for empty list\n        int prod = 1, sum = 0;\n        for (Object num : arr) {\n            int n = (Integer) num;\n            prod *= (n < 0 ? -1 : 1); // Multiply by the sign of number\n            sum += Math.abs(n); // Add absolute value to sum\n        }\n        return prod * sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(prodSigns(new ArrayList<>())); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "final int N = grid.size();\n        List<List<Integer>> paths = new ArrayList<>();\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < N; ++j) {\n                findPaths(grid, k - 1, new int[]{i, j}, paths);\n            }\n        }\n        return minPath(paths, k);\n    }\n\n    public static void findPaths(List<List<Integer>> grid, int left, int[] currentPos, List<List<Integer>> paths) {\n        final int N = grid.size();\n        if (left == 0) {\n            paths.add(new ArrayList<>(Arrays.asList(grid.get(currentPos[0]).get(currentPos[1]))));\n            return;\n        }\n        for (int[] move : new int[][]{ {-1, 0}, {1, 0}, {0, -1}, {0, 1} }) {\n            int i = currentPos[0] + move[0];\n            int j = currentPos[1] + move[1];\n            if (i >= 0 && j >= 0 && i < N && j < N) {\n                List<Integer> path = new ArrayList<>();\n                path.add(grid.get(currentPos[0]).get(currentPos[1]));\n                findPaths(grid, left - 1, new int[]{i, j}, paths);\n            }\n        }\n    }\n\n    public static List<Integer> minPath(List<List<Integer>> paths, int k) {\n        return paths.stream().sorted((a, b) -> {\n                    for (int i = 0; i < Math.min(a.size(), b.size()); ++i) {\n                        if (a.get(i) != b.get(i)) return a.get(i) - b.get(i);\n                    }\n                    return a.size() - b.size();\n                }).findFirst().orElseGet(() -> new ArrayList<>());\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "List<Number> list = new ArrayList<>();\n        int[] array = new int[n+2];\n        array[1] = 3;\n        for(int i=2;i<=n+1;i++){\n            if(i%2==0){\n                array[i]=array[1]+i/2;\n            }else{\n                array[i]=array[i-1]+array[i-2]+array[(i+1)];\n            }\n        }\n\n        for(int i=1;i<array.length;i++){\n            list.add(array[i]);\n        }\n       return list; \n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "// Converting int to string array.\n        String[] strArray = Integer.toString(n).split(\"\");\n        \n        int product = 0;\n        boolean isEvenDigitPresent = false;\n        for (String s : strArray) {\n            // Convert the digit to integer and check if it's even or odd.\n            int num = Integer.parseInt(s);\n            \n            // If it's odd, multiply with the product calculated so far.\n            if (num % 2 != 0) {\n                product *= num;\n            } else if (num == 0){\n                 isEvenDigitPresent = true;\n            }\n        }\n        \n        // If there are only even digits, return zero. Otherwise, return the product.\n        return (isEvenDigitPresent) ? product : 0;\n    }\n    \n    public static void main(String[] args){\n       System.out.println(digits(1));\n       System.out.println(digits(4));\n       System.out.println(digits(235));\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "int openBraces = 0;\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                openBraces++;\n            } else {\n                openBraces--;\n                \n                // Early return if there are more closing braces than opening ones\n                if (openBraces < 0) {\n                    return false;\n                }\n            }\n        }\n        \n        // If the number of opening and closing braces is equal, it means that all brackets are at least nested within themselves\n        return openBraces > 0;\n    }\n    \n    public static void main(String args[]) {\n        System.out.println(isNested(\"[[]]\"));       //True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); //False\n        System.out.println(isNested(\"[][]\"));      //False\n        System.out.println(isNested(\"[]\"));       //False\n        System.out.println(isNested(\"[[][]]\"));    //True\n        System.out.println(isNested(\"[[]][[\"));     //True\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "int result = 0;\n        \n        for (Number num : lst) {\n            result += Math.ceil(num.doubleValue()) * Math.ceil(num.doubleValue());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Number> list1 = Arrays.asList(1.4, 4.2, 0);\n        System.out.println(sumSquares(list1)); // Output: 29\n        \n        List<Number> list2 = Arrays.asList(-2.4, 1, 1);\n        System.out.println(sumSquares(list2)); // Output: 6\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "if (txt == null || txt.length() == 0){\n            return false;\n        }\n        \n        // Check last character is an alphabetical character and it's not a part of word\n        return Character.isLetter(txt.charAt(txt.length() - 1)) && !Character.isLetter(txt.charAt(txt.length() - 2));\n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "if (arr.size() == 0) return -1;\n\n        int maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            // If current element is less than previous one, update max index\n            if ((Integer) arr.get(i) < (Integer) arr.get(i - 1)) {\n                maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "int largestNegative = Integer.MIN_VALUE; // Initialize largest negative number to minimum value of integer.\n        int smallestPositive = Integer.MAX_VALUE; // Initialize smallest positive number to maximum value of integer.\n\n        for (Object num : lst) {\n            if (!(num instanceof Integer)) continue;\n            int val = (Integer)num;\n            if (val < 0 && val > largestNegative) largestNegative = val;\n            else if (val > 0 && val < smallestPositive) smallestPositive = val;\n        }\n\n        return Arrays.asList(largestNegative == Integer.MIN_VALUE ? null : largestNegative, smallestPositive == Integer.MAX_VALUE ? null : smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        List<Object> list = new ArrayList<>();\n        list.add(2);\n        list.add(4);\n        list.add(1);\n        list.add(3);\n        list.add(5);\n        list.add(7);\n        System.out.println(largestSmallestIntegers(list)); // Should return [None, 1]\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "try {\n            if (a instanceof Double || b instanceof Double) {\n                return Math.max((Double) a, (Double) b);\n            } else if (a instanceof String || b instanceof String) {\n                double[] values = new double[2];\n                int i = 0;\n                for (Object x : new Object[]{a, b}) {\n                    String str = (String) ((x instanceof Double) ? String.valueOf(((Double) x).intValue()) : x);\n                    str = str.replace(\",\", \".\");\n                    values[i] = Double.parseDouble(str);\n                    i++;\n                }\n                return Math.max(values[0], values[1]);\n            } else {\n                return Math.max((Integer) a, (Integer) b);\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "if (n <= 3) return false; // Not enough even numbers to add up to this number.\n        if (n % 2 != 0) return false; // This number isn't even, so can't be made by exactly 4 evens.\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "if (n < 1) {\n            throw new IllegalArgumentException(\"The input must be a positive integer\");\n        }\n        \n        long result = 1;\n        for (int i = n; i > 0; --i) {\n            result *= factorial(i);\n        }\n        \n        return result;\n    }\n    \n    private static long factorial(int n) {\n        if (n < 2) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 4;\n        System.out.println(\"The special factorial of \" + n + \" is: \" + specialFactorial(n));\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "String[] words = text.split(\"\\\\s+\");\n        StringBuilder result = new StringBuilder();\n\n        for (int i=0; i<words.length; i++) {\n            if (i != 0) { // Not the first word\n                int spaceLength = words[i-1].length() - words[i].length();\n                \n                if (spaceLength > 2) {\n                    result.append(\"-\");\n                } else {\n                    result.append(\"_\");\n                }\n            }\n            \n            result.append(words[i]);\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(fixSpaces(\"Example\")); // Example\n        System.out.println(fixSpaces(\"Example 1\")); // Example_1\n        System.out.println(fixSpaces(\" Example 2\")); // _Example_2\n        System.out.println(fixSpaces(\" Example   3\")); // _Example-3\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "// The regex pattern that matches the conditions specified in the problem\n        String pattern = \"^[a-zA-Z][a-zA-Z0-9]*\\\\.(txt|exe|dll)$\";\n\n        if (fileName.matches(pattern)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) { // index is a multiple of 3\n                Integer num = (Integer)lst.get(i);\n                sum += Math.pow(num, 2); // square the number\n            } else if (i % 4 == 0) { // index is a multiple of 4 and not 3\n                Integer num = (Integer)lst.get(i);\n                sum += Math.pow(num, 3); // cube the number\n            } else {\n                sum += (Integer)lst.get(i); // keep the number unchanged\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "//split the sentence into individual words\n        String[] words = sentence.split(\" \");\n        List<String> primeWordsList = new ArrayList<>();\n        \n        for (String word: words){ \n            int length = word.length();\n            \n            if(isPrimeNumber(length)){\n                // if the length of the word is a prime number, add it to the list\n                primeWordsList.add(word);\n            }\n        }\n        \n        // join all words in the list into a string using space as separator and return it\n        return String.join(\" \", primeWordsList);\n    }\n    \n    public static boolean isPrimeNumber(int n) {\n        if (n <= 1) return false;\n        \n        for (int i = 2; i < Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) return false;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "//Splitting the fractions into their numerators and denominators\n        String[] fractionX = x.split(\"/\");\n        String[] fractionN = n.split(\"/\");\n\n        //Converting the strings to integers\n        int numX = Integer.parseInt(fractionX[0]);\n        int denX = Integer.parseInt(fractionX[1]);\n        int numN = Integer.parseInt(fractionN[0]);\n        int denN = Integer.parseInt(fractionN[1]);\n\n        //Calculating the resulting fraction\n        int finalNum = numX * numN;\n        int finalDen = denX * denN;\n\n        //Checking if the result is a whole number\n        if (finalNum % finalDen == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "int[] sums = new int[nums.size()];\n        for (int i = 0; i < nums.size(); ++i) {\n            int num = (Integer) nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            sums[i] = sum;\n        }\n        \n        Integer[] indices = new Integer[sums.length];\n        for (int i = 0; i < sums.length; ++i) {\n            indices[i] = i;\n        }\n        \n        mergeSort(sums, indices);\n        \n        List<Object> result = new ArrayList<>();\n        for (int index : indices) {\n            result.add(nums.get((Integer)index));\n        }\n        \n        return result;\n    }\n    \n    private static void mergeSort(int[] sums, Integer[] indices) {\n        int n = sums.length;\n        if (n <= 1) {\n            return;\n        }\n        \n        int mid = n / 2;\n        int[] leftSums = Arrays.copyOfRange(sums, 0, mid);\n        Integer[] leftIndices = Arrays.copyOfRange(indices, 0, mid);\n        int[] rightSums = Arrays.copyOfRange(sums, mid, n);\n        Integer[] rightIndices = Arrays.copyOfRange(indices, mid, n);\n        \n        mergeSort(leftSums, leftIndices);\n        mergeSort(rightSums, rightIndices);\n        \n        int i = 0, j = 0, k = 0;\n        while (i < mid && j < n - mid) {\n            if (leftSums[i] <= rightSums[j]) {\n                sums[k] = leftSums[i];\n                indices[k] = leftIndices[i];\n                ++i;\n            } else {\n                sums[k] = rightSums[j];\n                indices[k] = rightIndices[j];\n                ++j;\n            }\n            ++k;\n        }\n        \n        while (i < mid) {\n            sums[k] = leftSums[i];\n            indices[k] = leftIndices[i];\n            ++i;\n            ++k;\n        }\n        \n        while (j < n - mid) {\n            sums[k] = rightSums[j];\n            indices[k] = rightIndices[j];\n            ++j;\n            ++k;\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(orderByPoints(Arrays.asList(1, 11, -1, -11, -12)));\n        System.out.println(orderByPoints(new ArrayList<>()));\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "int count = 0;\n\n        for (Object num : nums) {\n            // Convert number to string and check if it starts with an odd digit.\n            String strNum = num.toString();\n            char firstDigit = strNum.charAt(0);\n\n            if (firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9') {\n                // Check if the number is greater than 10.\n                int numInt = Integer.parseInt(strNum);\n                \n                if (numInt > 10) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums = new ArrayList<>();\n        nums.add(15);\n        nums.add(-73);\n        nums.add(14);\n        nums.add(-15);\n        \n        System.out.println(specialfilter(nums));  // Output: 1\n\n        nums.clear();\n        nums.add(33);\n        nums.add(-2);\n        nums.add(-3);\n        nums.add(45);\n        nums.add(21);\n        nums.add(109);\n        \n        System.out.println(specialfilter(nums));  // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "if(n <= 0){\n            return 0;\n        }\n\n        // Create the array based on the given formula\n        int[] a = new int[n];\n        for(int i=0;i<n;i++){\n            a[i] = (i * i) - i + 1;\n        }\n\n        // Count the number of triples where sum is a multiple of 3\n        int count = 0;\n        for(int i=0;i<n-2;i++){\n            for(int j=i+1;j<n-1;j++){\n                for(int k=j+1;k<n;k++){\n                    if((a[i] + a[j] + a[k]) % 3 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n    \n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(\"Number of triplets: \" + getMaxTriples(n));\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int idxP1 = -1;\n        int idxP2 = -1;\n        \n        for (int i = 0; i < planets.length; i++) {\n            if (planet1.equals(planets[i])) {\n                idxP1 = i;\n            }\n            if (planet2.equals(planets[i])) {\n                idxP2 = i;\n            }\n        }\n        \n        // If planet names are incorrect, return empty list.\n        if (idxP1 == -1 || idxP2 == -1) {\n            return new ArrayList<>();\n        }\n        \n        List<Object> result = new ArrayList<>();\n        \n        // Swap the indices if they were given in reverse order.\n        if (idxP1 > idxP2) {\n            int temp = idxP1;\n            idxP1 = idxP2;\n            idxP2 = temp;\n        }\n        \n        for (int i = idxP1 + 1; i < idxP2; i++) {\n            result.add(planets[i]);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0){\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String a, String b) {\n              if(a.length() != b.length()) {\n                 return a.length() - b.length();\n             }\n             return a.compareTo(b);\n         }});\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "if (isPrimeNumber(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // method to check prime number\n    private static boolean isPrimeNumber(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (!(lst.get(i) instanceof Integer)) continue;\n            int num = (Integer) lst.get(i);\n            if (num < 0 || num % 2 == 0) continue;\n            sum += num * num;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "int max = Integer.MIN_VALUE;\n        String res = \"\";\n        for (String ext : extensions) {\n            int cap = 0, sm = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c))\n                    cap++;\n                else if (Character.isLowerCase(c))\n                    sm++;\n            }\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                res = ext;\n            }\n        }\n        return className + \".\" + res;\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i <= b.length(); i++) {\n            String rot = b.substring(i) + b.substring(0, i);\n            if (a.contains(rot)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "int countEven = 0;\n        int countOdd = 0;\n        \n        // check if the number is positive or negative and remove the sign\n        boolean neg = false;\n        if (num < 0) {\n            num *= -1;\n            neg = true;\n        }\n        \n        while(num > 0){\n            int digit = num % 10; // get the last digit\n            \n            // check if it's an odd or even number\n            if (digit % 2 == 0) countEven++;\n            else countOdd++;\n            \n            num /= 10; // remove the last digit\n        }\n        \n        return Arrays.asList(countEven, countOdd);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12)); // Expected: [1, 1]\n        System.out.println(evenOddCount(123)); // Expected: [1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "if (number <= 0 || number > 1000) {\n            throw new IllegalArgumentException(\"Invalid input, please enter a positive integer between 1 and 1000.\");\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        for (int i = 0; number > 0; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                sb.append(symbols[i]);\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n            return true;\n        } else if (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)) {\n            return true;\n        } else if (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) {\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(RightAngleTriangle.rightAngleTriangle(3, 4, 5)); // should print True\n        System.out.println(RightAngleTriangle.rightAngleTriangle(1, 2, 3)); // should print False\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "if (words.isEmpty()) {\n            return \"\";\n        }\n        \n        String maxUniqueWord = words.get(0);\n        \n        for (int i = 1; i < words.size(); i++) {\n            String word = words.get(i);\n            \n            if (uniqueCharsCount(word) > uniqueCharsCount(maxUniqueWord)) {\n                maxUniqueWord = word;\n            } else if (uniqueCharsCount(word) == uniqueCharsCount(maxUniqueWord)) {\n                maxUniqueWord = lexicographicalOrder(maxUniqueWord, word);\n            }\n        }\n        \n        return maxUniqueWord;\n    }\n    \n    private static int uniqueCharsCount(String str) {\n        Set<Character> chars = new HashSet<>();\n        \n        for (char c : str.toCharArray()) {\n            chars.add(c);\n        }\n        \n        return chars.size();\n    }\n    \n    private static String lexicographicalOrder(String str1, String str2) {\n        return str1.compareTo(str2) < 0 ? str1 : str2;\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "public class Eat {\n    public static List<Integer> eat(int number, int need, int remaining) {\n        // Calculate total eaten carrots after meals\n        int total = number + Math.min(need, remaining);\n\n        // Calculate the left over carrots after meals\n        int leftOver = Math.max(0, remaining - need);\n\n        return Arrays.asList(total, leftOver);\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < operand.size(); ++i) {\n            if (i == 0 || operator.get(i - 1).equals(\"+\")) {\n                stack.push(operand.get(i));\n            } else if (operator.get(i - 1).equals(\"-\")) {\n                stack.push(-operand.get(i));\n            } else if (operator.get(i - 1).equals(\"*\") || operator.get(i - 1).equals(\"//\")\n                    || operator.get(i - 1).equals(\"**\")) {\n                int operand2 = stack.pop();\n                int operand1 = stack.pop();\n                switch (operator.get(i - 1)) {\n                    case \"*\":\n                        stack.push(operand1 * operand2);\n                        break;\n                    case \"//\":\n                        stack.push(operand1 / operand2);\n                        break;\n                    case \"**\":\n                        stack.push((int) Math.pow(operand1, operand2));\n                        break;\n                }\n            } else {\n                throw new RuntimeException(\"Unsupported operator: \" + operator.get(i - 1));\n            }\n        }\n        return stack.pop();\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "StringBuilder str = new StringBuilder();\n        boolean hasLetter=false;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            \n            if (Character.isAlphabetic(ch)) {\n                str.append(Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch));\n                hasLetter=true;\n            } else {\n                str.append(ch);\n            }\n        }\n        \n        if (!hasLetter){\n            return new StringBuilder(str).reverse().toString();\n        }\n        \n        return str.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\"));  // \"4321\"\n        System.out.println(solve(\"ab\"));  // \"AB\"\n        System.out.println(solve(\"#a@C\"));  // \"#A@c\"\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "if (text.isEmpty()) return null;\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashText = no.toString(16); // convert to hexadecimal\n\n            while (hashText.length() < 32) {\n                hashText = \"0\" + hashText;\n            }\n\n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            int number = i;\n            while(number != 0){\n                if ((number % 10) % 2 == 0) {\n                    result.add(i);\n                    break;\n                }\n                number /= 10;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2,8)); //[2,4,6,8]\n        System.out.println(generateIntegers(8,2)); //[2,4,6,8]\n        System.out.println(generateIntegers(10,14)); //[]\n    }\n}"}

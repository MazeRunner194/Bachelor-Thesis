{"task_id": "python/0", "language": "python", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/0", "language": "python", "completion": "balance = 0\n    for i in range(len(operations)):\n        balance += operations[i]\n        if balance < 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(below_zero([1, 2, -4, 5]))"}
{"task_id": "python/1", "language": "python", "completion": "summ=0\n    product=1\n    for i in range(len(numbers)):\n        summ+=numbers[i]\n        product*=numbers[i]\n    return(summ, product)\n\n\n\ndef sum_product_with_sum(numbers: List[int], sum_expected: int) -> bool:\n    \"\"\"\n    >>> sum_product_with_sum([], 1)\n    False\n    >>> sum_product_with_sum([1, 2, 3], 6)\n    False\n    >>> sum_product_with_sum([1, 2, 3], 11)\n    False\n    >>> sum_product_with_sum([1, 2, 3], 4)\n    False\n    >>> sum_product_with_sum([1, 2, 3], 7)\n    True\n    \"\"\"\n    summ=0\n    product=1\n    for i in range(len(numbers)):\n        summ+=numbers[i]\n        product*=numbers[i]\n    if summ==sum_expected and product==sum_expected:\n        return True\n    return False\n\ndef sum_product_with_product(numbers: List[int], product_expected: int) -> bool:\n    \"\"\"\n    >>> sum_product_with_product([], 1)\n    False\n    >>> sum_product_with_product([1, 2, 3], 6)\n    False\n    >>> sum_product_with_product([1, 2, 3], 11)\n    False\n    >>> sum_product_with_product([1, 2, 3], 4)\n    False\n    >>> sum_product_with_product([1, 2, 3], 7)\n    False\n    \"\"\"\n    summ=0\n    product=1\n    for i in range(len(numbers)):\n        summ+=numbers[i]\n        product*=numbers[i]\n    if summ==product_expected and product==product_expected:\n        return True\n    return False\n\ndef sum_product_with_sum_and_product(numbers: List[int], sum_expected: int, product_expected: int) -> bool:\n    \"\"\"\n    >>> sum_product_with_sum_and_product([], 1, 1)\n    False\n    >>> sum_product_with_sum_and_product([1, 2, 3], 6, 12)\n    False\n    >>> sum_product_with_sum_and_product([1, 2, 3], 11, 10)\n    False\n    >>> sum_product_with_sum_and_product([1, 2, 3], 4, 12)\n    False\n    >>> sum_product_with_sum_and_product([1, 2, 3], 7, 11)\n    True\n    \"\"\"\n    summ=0\n    product=1\n    for i in range(len(numbers)):\n        summ+=numbers[i]\n        product*=numbers[i]\n    if summ==sum_expected and product==product_expected:\n        return"}
{"task_id": "python/1", "language": "python", "completion": "return (sum(numbers), reduce(mul, numbers, 1))\n\n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return (sum(numbers), reduce(mul, numbers, 1))\n\n\ndef sum_product_3(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return (sum(numbers), reduce(mul, numbers, 1))\n\n\ndef sum_product_4(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return (sum(numbers), reduce(mul, numbers, 1))\n\ndef sum_product_5(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return (sum(numbers), reduce(mul, numbers, 1))"}

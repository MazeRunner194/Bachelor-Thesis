{"task_id": "python/0", "language": "python", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt"}
{"task_id": "python/0", "language": "python", "completion": "# Write your code below this line\n    \n    \n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/1", "language": "python", "completion": "return sum(numbers), product(numbers)\n\n\ndef product(numbers: List[int]) -> int:\n    \"\"\"\n    F\u00fcr eine gegebene Liste von ganzen Zahlen soll das Produkt dieser Zahlen zur\u00fcckgegeben werden.\n    Eine leere Liste soll gleich 1 sein.\n    \n    >>> product([])\n    1\n    >>> product([1, 2, 3, 4])\n    24\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product"}
{"task_id": "python/1", "language": "python", "completion": "return (sum(numbers), product(numbers))\n\n\ndef sum_product_optimized(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\nEine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n    \n    >>> sum_product_optimized([])\n    (0, 1)\n    >>> sum_product_optimized([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    product = 1\n    sum = 0\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\n\ndef sum_squares(numbers: List[int]) -> int:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll die Summe der Quadratzahlen in der Liste zur\u00fcckgegeben werden.\nEine leere Summe soll gleich 0 sein.\n    \n    >>> sum_squares([])\n    0\n    >>> sum_squares([1, 2, 3, 4])\n    30\n    \"\"\"\n    return sum(n**2 for n in numbers)\n\ndef product(numbers: List[int]) -> int:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll das Produkt aller Zahlen in der Liste zur\u00fcckgegeben werden.\nEine leere Produkt soll gleich 1 sein.\n    \n    >>> product([])\n    1\n    >>> product([1, 2, 3, 4])\n    24\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\n\ndef sum_squares_optimized(numbers: List[int]) -> int:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll die Summe der Quadratzahlen in der Liste zur\u00fcckgegeben werden.\nEine leere Summe soll gleich 0 sein.\n    \n    >>> sum_squares_optimized([])\n    0\n    >>> sum_squares_optimized([1, 2, 3, 4])\n    30\n    \"\"\"\n    return sum(n**2 for n in numbers)\n\n\ndef product_optimized(numbers:"}
{"task_id": "python/2", "language": "python", "completion": "# Verwende zip, um die Zeichen von a und b in einem Tupel zu erzeugen\n    zipped = zip(a, b)\n    \n    # Verwende map, um jedes Zeichen im Tupel mit einer Funktion zu bearbeiten und eine Liste zu erstellen\n    result = map(lambda x: bin(int(x[0], 2) ^ int(x[1], 2))[2:].zfill(len(a)), zipped)\n    \n    # Wandelt jedes Element in der Liste in eine Zeichenkette um und f\u00fcgt sie zu einem Ergebnis hinzu\n    return ''.join(result)\n\n\ndef string_xor_list(s: List[str]) -> str:\n    \"\"\" Eine Zeichenkette s enth\u00e4lt n Zeichenketten, die aus Zeichenketten aus 1en und 0en bestehen.\nDie Zeichenketten s werden in einer Liste s als Zeichenketten gespeichert.\n    \n    >>> string_xor_list(['010', '110', '101', '001'])\n    '1100111'\n    \"\"\"\n    \n    # Definiere eine leere Zeichenkette result\n    result = \"\"\n    \n    # Iteriere durch jedes Zeichen im ersten Zeichenkette der Liste s\n    for i in s[0]:\n        # Iteriere durch jedes Zeichen im zweiten Zeichenkette der Liste s\n        for j in s[1]:\n            # F\u00fchre eine bin\u00e4re XOR-Operation aus und f\u00fcge das Ergebnis zur Zeichenkette result hinzu\n            result += bin(int(i, 2) ^ int(j, 2))[2:].zfill(1)\n    \n    return result\n\n\ndef string_xor_recursive(s: str) -> str:\n    \"\"\" Ein Zeichenkette s enth\u00e4lt n Zeichenketten, die aus Zeichenketten aus 1en und 0en bestehen.\nDie Zeichenketten s werden in einer Liste s als Zeichenketten gespeichert.\n    \n    >>> string_xor_recursive('10111011')\n    '10111011'\n    \"\"\"\n    \n    # F\u00fchre eine bin\u00e4re XOR-Operation auf der ersten Zeichenkette aus und f\u00fcge das Ergebnis zur Zeichenkette result hinzu\n    result = bin(int(s[0], 2) ^ int(s[1], 2))[2:].zfill(len(s[0]))\n    \n    # Wenn die L\u00e4nge der Zeichenkette noch gr\u00f6\u00dfer als eins ist, f\u00fcge das Ergebnis zu einer neuen Zeichenkette zur Zeichenkette result hinzu und h\u00e4nge sie zur Zeichenkette s an\n    if len(s) > 1:\n        result += string_xor_recursive(s[1:])\n    \n    return result"}
{"task_id": "python/2", "language": "python", "completion": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n\n\ndef generate_random_number(length: int) -> str:\n    \"\"\"Generiert ein zuf\u00e4lliges Zeichenkette mit einer L\u00e4nge von length, die nur aus 1en und 0en besteht.\n\n    >>> len(generate_random_number(1))\n    1\n    >>> len(generate_random_number(10))\n    10\n    \"\"\"\n    return ''.join(str(randint(0, 1)) for _ in range(length))\n\n\ndef find_solution(num_a: int, num_b: int) -> str:\n    \"\"\" Findet die L\u00f6sung zur Addition von num_a und num_b, die zu einer zuf\u00e4lligen Zeichenkette zssichert.\n\n    >>> find_solution(1, 1)\n    '1'\n    \"\"\"\n    return string_xor(generate_random_number(num_a), generate_random_number(num_b))\n\n\ndef solve_problem(solution: str) -> str:\n    \"\"\" Berechnet aus der Zeichenkette solution die L\u00f6sung zur Addition von num_a und num_b.\n\n    >>> solve_problem('1')\n    '1'\n    \"\"\"\n    return solution\n\n\ndef main():\n    \"\"\" Die L\u00f6sung wird ausgegeben.\n    \"\"\"\n    solution = solve_problem(find_solution(1, 1))\n    print(solution)\n    \n\nif __name__ == '__main__':\n    main()"}
{"task_id": "python/3", "language": "python", "completion": "return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/3", "language": "python", "completion": "if not strings:\n        return None\n    max_length = strings[0]\n    for s in strings:\n        if len(s) > len(max_length):\n            max_length = s\n    return max_length\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/4", "language": "python", "completion": "while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Gib den kleinsten gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    60\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef encrypt(plain_text: str, n: int) -> str:\n    \"\"\" Verschl\u00fcsselung des Textes plain_text.\n    \n    >>> encrypt(\"Hallo\", 3)\n    \"Jbnv\"\n    \"\"\"\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    for ch in plain_text:\n        ch = ch.upper()\n        if ch in alphabet:\n            i = alphabet.index(ch)\n            ch = alphabet[(i + n) % len(alphabet)]\n        result += ch\n    return result\n\n\ndef decrypt(encrypted_text: str, n: int) -> str:\n    \"\"\" Entschl\u00fcsselung des Textes encrypted_text.\n    \n    >>> decrypt(\"Jbnv\", 3)\n    \"HALLO\"\n    \"\"\"\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    for ch in encrypted_text:\n        ch = ch.upper()\n        if ch in alphabet:\n            i = alphabet.index(ch)\n            ch = alphabet[(i - n) % len(alphabet)]\n        result += ch\n    return result\n\n\ndef decrypt_with_key(encrypted_text: str, n: int) -> tuple[int, str]:\n    \"\"\" Entschl\u00fcsselung des Textes encrypted_text.\n    \n    >>> decrypt_with_key(\"Jbnv\", 3)\n    (3, \"HALLO\")\n    \"\"\"\n    for i in range(len(encrypted_text)):\n        decrypted_text = decrypt(encrypted_text, i)\n        decrypted_text_without_spaces = decrypted_text.replace(\" \", \"\")\n        if decrypted_text_without_spaces == decrypted_text:\n            return i, decrypted_text\n\n\ndef encrypt_file(file_name: str, n: int) -> None:\n    \"\"\" Verschl\u00fcsselung des Textes aus dem Datei-Name file_name.\n    \n    >>> encrypt_file(\"text.txt\", 3)\n    \"\"\"\n    with open(file_name, \"r\") as file:\n        encrypted_text = encrypt(file.read(), n)\n    with open(file_name, \"w\") as file:\n        file.write(encrypted_text)\n\n\ndef decrypt_file(file_name: str, n: int) -> None:\n    \"\"\" Entschl\u00fcsselung des Textes aus dem Datei-Name file_name.\n    \n    >>> decrypt_file(\"text.txt\", 3)\n    \"\"\"\n    with open(file_name, \"r\") as file:\n        encrypted_text = file.read()\n    with open(file_name, \"w\") as file:\n        decrypted_text = decrypt(encrypted_text, n)\n        file.write(decrypted_text)\n\n\ndef decrypt_file_with_key(file_name: str, n: int) -> tuple[int, str]:\n    \"\"\" Entschl\u00fcsselung des Textes aus dem Datei-Name file_name.\n    \n    >>> decrypt_file_with_key(\"text.txt\", 3)\n    (3, \"HALLO\")\n    \"\"\"\n    with open(file_name, \"r\") as file:\n        encrypted_text = file.read()\n    return decrypt_with_key(encrypted_text, n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    import os\n\n    doctest.testmod()\n    print(os.getcwd())\n\n    print(encrypt(\"Hallo\", 3))\n    print(decrypt(\"Jbnv\", 3))\n    print(decrypt_with_key(\"Jbnv\", 3))\n    print(encrypt_file(\"text.txt\", 3))\n    print(decrypt_file(\"text.txt\", 3))\n    print(decrypt_file_with_key(\"text.txt\", 3))"}
{"task_id": "python/4", "language": "python", "completion": "for i in range(min(a, b), 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i\n    assert False, f\"Keine Teiler von {a} und {b}\"\n    \n    \ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> least_common_multiple(3, 5)\n    15\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while a != 0:\n        a, b = b % a, a\n    return b\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    return a * b // gcd(a, b)\n    \n\ndef lcm_iterative(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while True:\n        if a % b == 0:\n            return a\n        a += a - b\n\n\ndef lcm_recursive(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    return lcm_recursive(a, b - a) if b > a else lcm_recursive(b, a - b)\n\n\ndef lcm_recursive_iterative(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    return lcm_recursive_iterative(b, a - b) if a > b else lcm_recursive_iterative(a, b - a)\n\n\ndef lcm_recursive_iterative_2(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while True:\n        if a % b == 0:\n            return b\n        a, b = b, a - b\n\n\ndef lcm_recursive_iterative_3(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while a != 0:\n        a, b = b % a, a\n    return b\n\n\ndef lcm_recursive_iterative_4(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_recursive_iterative_5(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while a != 0:\n        if b % a == 0:\n            return b\n        b, a = a, b - a\n    return b\n\n\ndef lcm_recursive_iterative_6(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while b != 0:\n        if a % b == 0:\n            return a\n        a, b = a - b, b\n    return a\n\n\ndef lcm_recursive_iterative_7(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while a != 0:\n        a, b = b % a, a\n    return b\n\n\ndef lcm_recursive_iterative_8(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while b != 0:\n        if a % b == 0:\n            return a\n        a, b = b, a - b\n    return a\n\n\ndef lcm_recursive_iterative_9(a: int, b: int) -> int:\n    \"\"\" Gib das kleinste gemeinsame Vielfache von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    while b != 0:\n        if a %"}
{"task_id": "python/5", "language": "python", "completion": "# TODO: Implementieren Sie die Funktion\n    \n    numbers = numbers.split()\n    sorted_numbers = ''\n    \n    for number in numbers:\n        if number == 'null':\n            sorted_numbers += '0'\n        elif number == 'eins':\n            sorted_numbers += '1'\n        elif number == 'zwei':\n            sorted_numbers += '2'\n        elif number == 'drei':\n            sorted_numbers += '3'\n        elif number == 'vier':\n            sorted_numbers += '4'\n        elif number == 'f\u00fcnf':\n            sorted_numbers += '5'\n        elif number == 'sechs':\n            sorted_numbers += '6'\n        elif number == 'sieben':\n            sorted_numbers += '7'\n        elif number == 'acht':\n            sorted_numbers += '8'\n        elif number == 'neun':\n            sorted_numbers += '9'\n    \n    return sorted_numbers\n\n\n\ndef sort_numbers_v2(numbers: str) -> str:\n    \"\"\" Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n    G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n    Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n    \n    >>> sort_numbers_v2('three one five')\n    'one three five'\n    \"\"\"\n    \n    # TODO: Implementieren Sie die Funktion\n    \n    numbers = numbers.split()\n    sorted_numbers = ''\n    \n    for number in numbers:\n        if number == 'eins':\n            sorted_numbers += '1'\n        elif number == 'zwei':\n            sorted_numbers += '2'\n        elif number == 'drei':\n            sorted_numbers += '3'\n        elif number == 'vier':\n            sorted_numbers += '4'\n        elif number == 'f\u00fcnf':\n            sorted_numbers += '5'\n        elif number == 'sechs':\n            sorted_numbers += '6'\n        elif number == 'sieben':\n            sorted_numbers += '7'\n        elif number == 'acht':\n            sorted_numbers += '8'\n        elif number == 'neun':\n            sorted_numbers += '9'\n    \n    return sorted_numbers\n\n\n\ndef sort_numbers_v3(numbers: str) -> str:\n    \"\"\" Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n    G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n    Gib den String mit den Zahlen sortiert von klein nach gr\ufffd"}
{"task_id": "python/5", "language": "python", "completion": "# TODO: implementieren Sie hier Ihre Lernausgabe\n    \n\nimport doctest\ndoctest.testmod()"}
{"task_id": "python/6", "language": "python", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return normalized_numbers\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return normalized_numbers\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return normalized_numbers\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return normalized_numbers\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return normalized_numbers\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return normalized_numbers\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr"}
{"task_id": "python/6", "language": "python", "completion": "smallest = min(numbers)\n    biggest = max(numbers)\n    transformed_numbers = [(number - smallest) / (biggest - smallest) for number in numbers]\n    return transformed_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "python/7", "language": "python", "completion": "return \"\".join(char.swapcase() if char.isalpha() else char for char in string)\n\ndef word_search(search_string: str, words: list) -> list:\n    \"\"\" Findet alle W\u00f6rter in einer Liste, die im gegebenen String vorkommen.\n    \n    >>> word_search('Hello', ['Hello', 'World', 'Foo', 'Bar'])\n    ['Hello', 'Foo', 'Bar']\n    \"\"\"\n    return [word for word in words if search_string in word.lower()]\n\ndef get_first_letter_words(words: list) -> list:\n    \"\"\" Findet alle W\u00f6rter, die mit dem selben Buchstaben beginnen wie ein anderer.\n    \n    >>> get_first_letter_words(['Foo', 'Bar', 'Baz'])\n    ['Foo', 'Bar']\n    \"\"\"\n    first_letter_word = [word for word in words if word.startswith(words[0][0])]\n    return first_letter_word\n\ndef is_vowel(char: str) -> bool:\n    \"\"\" Gibt True zur\u00fcck, wenn ein Zeichen ein Vokal ist, sonst False.\n    \n    >>> is_vowel('a')\n    True\n    \"\"\"\n    return char.lower() in 'aeiou'\n\ndef get_vowel_words(words: list) -> list:\n    \"\"\" Findet alle W\u00f6rter, die mit einem Vokal starten.\n    \n    >>> get_vowel_words(['Foo', 'Bar', 'Baz'])\n    ['Foo', 'Bar']\n    \"\"\"\n    vowel_words = [word for word in words if is_vowel(word[0])]\n    return vowel_words\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Gibt True zur\u00fcck, wenn ein Wort ein Palindrom ist, sonst False.\n    \n    >>> is_palindrome('foo')\n    False\n    \"\"\"\n    reversed_string = string[::-1]\n    return string.lower() == reversed_string.lower()\n\ndef word_frequency(words: list) -> dict:\n    \"\"\" Gibt die H\u00e4ufigkeit jedes Wortes in einer Liste zur\u00fcck.\n    \n    >>> word_frequency(['foo', 'foo', 'bar', 'baz', 'baz', 'qux'])\n    {'foo': 2, 'bar': 1, 'baz': 2, 'qux': 1}\n    \"\"\"\n    word_frequency = {}\n    for word in words:\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    return word_frequency\n\ndef get_first_letters_histogram(words: list) -> dict:\n    \"\"\" Gibt ein Histogram (Dictionary) zur\u00fcck, das die Anzahl der W\u00f6rter pro Buchstaben enth\u00e4lt.\n    \n    >>> get_first_letters_histogram(['foo', 'bar', 'baz'])\n    {'f': 1, 'o': 2, 'b': 1, 'a': 1, 'z': 1}\n    \"\"\"\n    histogram = {}\n    for word in words:\n        first_letter = word[0]\n        if first_letter in histogram:\n            histogram[first_letter] += 1\n        else:\n            histogram[first_letter] = 1\n    return histogram\n\ndef get_histogram(words: list) -> dict:\n    \"\"\" Gibt ein Histogram (Dictionary) zur\u00fcck, das die Anzahl der W\u00f6rter pro Buchstaben enth\u00e4lt.\n    \n    >>> get_histogram(['foo', 'bar', 'baz'])\n    {'f': 1, 'o': 2, 'b': 1, 'a': 1, 'z': 1}\n    \"\"\"\n    histogram = {}\n    for word in words:\n        fo"}
{"task_id": "python/7", "language": "python", "completion": "lowercase_chars = [char for char in string if char.islower()]\n    uppercase_chars = [char for char in string if char.isupper()]\n    \n    lowercase_chars.sort(reverse=True)\n    uppercase_chars.sort(reverse=True)\n    \n    result = \"\"\n    \n    for lowercase_char, uppercase_char in zip(lowercase_chars, uppercase_chars):\n        result += uppercase_char + lowercase_char\n        \n    return result\n\ndef remove_punctuation(string: str) -> str:\n    \"\"\" F\u00fcr einen gegebenen String, entferne alle Ponctuation aus.\n    \n    >>> remove_punctuation('Hello, World!')\n    'Hello World'\n    \"\"\"\n    \n    punctuation_chars = [char for char in string if char in ',.!?']\n    \n    punctuation_chars.sort(reverse=True)\n    \n    result = \"\"\n    \n    for char in string:\n        if char not in punctuation_chars:\n            result += char\n            \n    return result\n\ndef word_count(string: str) -> dict:\n    \"\"\" F\u00fcr einen gegebenen String, zeige die H\u00e4ufigkeit jedes Wortes im String aus.\n    \n    >>> word_count('Ich habe heute einen Tag.')\n    {'Ich': 1, 'habe': 1, 'heute': 1, 'einen': 1, 'Tag': 1}\n    \"\"\"\n    \n    words = string.split()\n    \n    word_count = {}\n    \n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n        \n    return word_count\n\ndef letter_count(string: str) -> dict:\n    \"\"\" F\u00fcr einen gegebenen String, zeige die H\u00e4ufigkeit jeder Buchstabe im String aus.\n    \n    >>> letter_count('Hallo')\n    {'H': 1, 'a': 1, 'l': 2, 'o': 1}\n    \"\"\"\n    \n    letter_count = {}\n    \n    for letter in string:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n        \n    return letter_count\n\ndef reverse(string: str) -> str:\n    \"\"\" F\u00fcr einen gegebenen String, rueckwaerts ausgeben.\n    \n    >>> reverse('Hallo')\n    'olleH'\n    \"\"\"\n    \n    return string[::-1]\n\ndef palindrome(string: str) -> bool:\n    \"\"\" F\u00fcr einen gegebenen String, pruefe, ob es sich um ein Palindrom handelt.\n    \n    >>> palindrome('anna')\n    True\n    \"\"\"\n    \n    return string == string[::-1]\n\ndef first_letter_to_upper(string: str) -> str:\n    \"\"\" F\u00fcr einen gegebenen String, gib die ersten Buchstaben des Strings in Gro\u00dfbuchstaben um.\n    \n    >>> first_letter_to_upper('hello')\n    'Hello'\n    \"\"\"\n    \n    return \"\".join(char.upper() if i == 0 else char for i, char in enumerat"}
{"task_id": "python/8", "language": "python", "completion": "for i in range(len(l)):\n        if l[i] >= 0:\n            l.remove(l[i])\n            l.append(l[i])\n    return l"}
{"task_id": "python/9", "language": "python", "completion": "if n <= 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef get_prime_numbers(n):\n    \"\"\"Gib eine Liste mit allen Primzahlen bis n zur\u00fcck,\n    >>> get_prime_numbers(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    >>> get_prime_numbers(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    result = []\n    for i in range(1, n):\n        if is_prime(i):\n            result.append(i)\n    return result\n    \ndef main():\n    print(get_prime_numbers(500))\n    \nif __name__"}
{"task_id": "python/10", "language": "python", "completion": "l = sorted(l)\n    i = 0\n    while i < len(l) - 1:\n        if l[i] == l[i + 1]:\n            l.remove(l[i])\n        else:\n            i += 1\n    return l\n\n\ndef unique_recursive(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursive([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if result is None:\n        result = []\n    if l == []:\n        return result\n    else:\n        if l[0] not in result:\n            result.append(l[0])\n        return unique_recursive(l[1:], result)\n\n\ndef unique_generator(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_generator([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l = sorted(l)\n    i = 0\n    while i < len(l) - 1:\n        if l[i] == l[i + 1]:\n            l.remove(l[i])\n        else:\n            i += 1\n    yield from l\n\n\ndef unique_generator_recursive(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_generator_recursive([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if result is None:\n        result = []\n    if l == []:\n        return result\n    else:\n        if l[0] not in result:\n            result.append(l[0])\n        return unique_generator_recursive(l[1:], result)\n\n\ndef unique_recursion(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursion([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []:\n        return result\n    elif l[0] not in result:\n        result.append(l[0])\n    return unique_recursion(l[1:], result)\n\n\ndef unique_recursion_inplace(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursion_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []:\n        return result\n    elif l[0] not in result:\n        result.append(l[0])\n    return unique_recursion_inplace(l[1:], result)\n\n\ndef unique_recursion_inplace(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursion_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []:\n        return result\n    elif l[0] not in result:\n        result.append(l[0])\n    return unique_recursion_inplace(l[1:], result)\n\n\ndef unique_recursion_inplace(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursion_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []:\n        return result\n    elif l[0] not in result:\n        result.append(l[0])\n    return unique_recursion_inplace(l[1:], result)\n\n\ndef unique_recursion_inplace(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursion_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []:\n        return result\n    elif l[0] not in result:\n        result.append(l[0])\n    return unique_recursion_inplace(l[1:], result)\n\n\ndef unique_recursion_inplace(l: list, result: list = None):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique_recursion_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []"}
{"task_id": "python/10", "language": "python", "completion": "return sorted(set(l))\n\nprint(unique("}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n        \"\"\"\n        is_prime \u00fcberpr\u00fcft, ob ein gegebenes Zahl ein Primzahl ist.\n        \n        >>> is_prime(1)\n        False\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        True\n        \"\"\"\n        \n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_fibonacci(n):\n        \"\"\"\n        is_fibonacci \u00fcberpr\u00fcft, ob ein gegebenes Zahl eine Fibonacci-Zahl ist.\n        \n        >>> is_fibonacci(1)\n        False\n        >>> is_fibonacci(2)\n        False\n        >>> is_fibonacci(3)\n        False\n        >>> is_fibonacci(4)\n        True\n        >>> is_fibonacci(5)\n        True\n        \"\"\"\n        \n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return b == n\n    \n    fib_primes = [2, 3, 5, 13]  # Startwerte f\u00fcr die ersten vier Fibonacci-Zahlen und ihre Primzahlen\n    \n    if n < len(fib_primes):\n        return fib_primes[n-1]\n    \n    while True:\n        if is_prime(fib_primes[-1] + fib_primes[-2]) and is_fibonacci(fib_primes[-1] + fib_primes[-2]):\n            return fib_primes[-1]\n        fib_primes.append(fib_primes[-1] + fib_primes[-2])\n    \n    return None\n\nprint(prime_fib(1))\nprint(prime_fib(2))\nprint(prime_fib(3))\nprint(prime_fib(4))\nprint(prime_fib(5))\nprint(prime_fib(6))\nprint(prime_fib(7))\nprint(prime_fib(8))\nprint(prime_fib(9))\nprint(prime_fib(10))"}
{"task_id": "python/11", "language": "python", "completion": "if n < 1:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 1 sein\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return prime_fib(n - 1)\n    if n % 2 == 1:\n        return prime_fib(n - 2)\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef prime_factor(n: int):\n    \"\"\"\n    prime_factor gibt die Primfactoren einer positive Zahl zur\u00fcck.\n    \n    >>> prime_factor(3)\n    [3]\n    >>> prime_factor(6)\n    [2, 3]\n    >>> prime_factor(13)\n    [13]\n    \"\"\"\n    \n    if n < 0:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 0 sein\")\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [2] + prime_factor(n // 2)\n    if n % 2 == 1:\n        return prime_factor(n - 1) + prime_factor(n - 2)\n    return prime_factor(n - 1) + prime_factor(n - 2)\n\n\ndef fib_sum(n: int):\n    \"\"\"\n    fib_sum berechnet die Summe der ersten n Fibonacci-Zahlen.\n    \n    >>> fib_sum(1)\n    2\n    >>> fib_sum(2)\n    3\n    >>> fib_sum(3)\n    4\n    >>> fib_sum(4)\n    7\n    \"\"\"\n    \n    if n < 1:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 1 sein\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return fib_sum(n - 1)\n    if n % 2 == 1:\n        return fib_sum(n - 2)\n    return fib_sum(n - 1) + fib_sum(n - 2)\n\n\ndef prime_fib_sum(n: int):\n    \"\"\"\n    prime_fib_sum berechnet die Summe der ersten n Primzahlen sowie der n-ten Fibonacci-Zahl.\n    \n    >>> prime_fib_sum(1)\n    2\n    >>> prime_fib_sum(2)\n    3\n    >>> prime_fib_sum(3)\n    5\n    \"\"\"\n    \n    if n < 1:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 1 sein\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return prime_fib_sum(n - 1)\n    if n % 2 == 1:\n        return prime_fib_sum(n - 2)\n    return prime_fib_sum(n - 1) + prime_fib_sum(n - 2) + fib_sum(n - 1)\n\n\ndef fib_and_primes(n: int):\n    \"\"\"\n    fib_and_primes berechnet die Summe der ersten n Fibonacci-Zahlen sowie die Primfactoren einer positiven Zahl.\n    \n    >>> fib_and_primes(1)\n    2\n    >>> fib_and_primes(2)\n    3\n    >>> fib_and_primes(3)\n    4\n    >>> fib_and_primes(4)\n    7\n    \"\"\"\n    \n    if n < 1:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 1 sein\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return fib_and_primes(n - 1)\n    if n % 2 == 1:\n        return fib_and_primes(n - 2)\n    return fib_and_primes(n - 1) + fib_and_primes(n - 2) + prime_fib_sum(n - 1)\n\n\ndef fib_and_primes_sum(n: int):\n    \"\"\"\n    fib_and_primes_sum berechnet die Summe der ersten n Fibonacci-Zahlen sowie die Summe der Primfactoren einer positiven Zahl.\n    \n    >>> fib_and_primes_sum(1)\n    2\n    >>> fib_and_primes_sum(2)\n    3\n    >>> fib_and_primes_sum(3)\n    4\n    >>> fib_and_primes_sum(4)\n    7\n    \"\"\"\n    \n    if n < 1:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 1 sein\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return fib_and_primes_sum(n - 1)\n    if n % 2 == 1:\n        return fib_and_primes_sum(n - 2)\n    return fib_and_primes_sum(n - 1) + fib_and_primes_sum(n - 2) + prime_fib_sum(n - 1) + fib_sum(n - 1)\n\n\ndef fib_and_primes_sum_with_loop(n: int):\n    \"\"\"\n    fib_and_primes_sum_with_loop berechnet die Summe der ersten n Fibonacci-Zahlen sowie die Summe der Primfactoren einer positiven Zahl.\n    \n    >>> fib_and_primes_sum_with_loop(1)\n    2\n    >>> fib_and_primes_sum_with_loop(2)\n    3\n    >>> fib_and_primes_sum_with_loop(3)\n    4\n    >>> fib_and_primes_sum_with_loop(4)\n    7\n    \"\"\"\n    \n    if n < 1:\n        raise ValueError(\"n muss gr\u00f6\u00dfer gleich 1 sein\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return fib_and_primes_sum_with_loop(n - 1)\n    if n % 2 == 1:\n        return fib_and_primes_sum_with_loop(n - 2)\n    i = 2\n    fib_sum = 3\n    fib_sum_primes = 2\n    while i < n:\n        if i % 2 == 0:\n            fib_sum_primes += fib_sum(i - 1)\n            fib_sum"}
{"task_id": "python/12", "language": "python", "completion": "l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\ndef triples_sum_to_zero_with_sets(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n    \n    >>> triples_sum_to_zero_with_sets([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_with_sets([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_with_sets([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_with_sets([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_with_sets([1])\n    False\n    \"\"\"\n    \n    if len(l) < 3:\n        return False\n    \n    seen = set()\n    for i, num1 in enumerate(l):\n        for j, num2 in enumerate(l[i+1:]):\n            num3 = - (num1 + num2)\n            if num3 in seen:\n                return True\n            seen.add(num2)\n    return False\n\n\ndef triples_sum_to_zero_with_dictionaries(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\nEs gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    >>> triples_sum_to_zero_with_dictionaries([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_with_dictionaries([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_with_dictionaries([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_with_dictionaries([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_with_dictionaries([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    count_seen = {}\n    for num in l:\n        if num in count_seen:\n            count_seen[num] += 1\n        else:\n            count_seen[num] = 1\n    \n    for i, num1 in enumerate(l):\n        for j, num2 in enumerate(l[i+1:]):\n            num3 = - (num1 + num2)\n            if num3 in count_seen:\n                return True\n            count_seen[num2] -= 1\n            if count_seen[num2] == 0:\n                del count_seen[num2]\n    \n    return False\n\n\ndef triples_sum_to_zero_with_sets_and_dictionaries(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\nEs gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    >>> triples_sum_to_zero_with_sets_and_dictionaries([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_with_sets_and_dictionaries([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_with_sets_and_dictionaries([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_with_sets_and_dictionaries([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_with_sets_and_dictionaries([1])\n    False\n    \"\"\"\n    \n    if len(l) < 3:\n        return False\n    \n    seen = set()\n    count_seen = {}\n    for num in l:\n        if num in count_seen:\n            count_seen[num] += 1\n        else:\n            count_seen[num] = 1\n    \n    for i, num1 in enumerate(l):\n        for j, num2 in enumerate(l[i+1:]):\n            num3"}
{"task_id": "python/12", "language": "python", "completion": "# Mit hilfe von Set() wird jeder Wert nur einmal ausgegeben\n    values = set(l)\n    # Mit hilfe von enumerate() wird jeder Wert mit jedem anderen Wert verglichen\n    for i, val in enumerate(l):\n        for j, val2 in enumerate(l[i + 1:]):\n            # Mit hilfe von enumerate() wird jeder Wert mit jedem anderen Wert verglichen,\n            # das dann mit hilfe von sorted() sortiert wird.\n            for val3, i, j, val4 in enumerate(sorted(l[j + 1:])):\n                if -val - val2 - val4 in values:\n                    return True\n    return False\ndef triples_sum_to_zero2(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n    Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    \n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    values = set()\n    for i, val in enumerate(l):\n        for j, val2 in enumerate(l[i + 1:]):\n            if -val - val2 in values:\n                return True\n            values.add(val + val2)\n    return False\n\ndef triples_sum_to_zero3(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n    Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    \n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, val in enumerate(l):\n        for j, val2 in enumerate(l[i + 1:]):\n            if -val - val2 in l[j + 1:]:\n                return True\n    return False\ndef triples_sum_to_zero4(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n    Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    \n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i, val in enumerate(l):\n        for j, val2 in enumerate(l[i + 1:]):\n            if -val - val2 in l[j + 1:]:\n                return True\n    return False\ndef triples_sum_to_zero5(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\nEs gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    \n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i, val in enumerate(l):\n        for j, val2"}
{"task_id": "python/13", "language": "python", "completion": "seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n\ndef is_sorted(l):\n    \"\"\"\n    is_sorted nimmt eine Liste von Zahlen als Eingabe und gibt True zur\u00fcck, wenn sie in aufsteigender Reihenfolge steht, andernfalls False zur\u00fcck.\n    \n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([3, 2, 1])\n    False\n    >>> is_sorted([1, 1, 2, 2])\n    True\n    >>> is_sorted([2, 1, 1, 2])\n    False\n    >>> is_sorted([])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n\ndef triplets_that_sum_to_zero(l):\n    \"\"\"\n    triplets_that_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe und gibt eine Liste von Tupeln mit den indexen von drei unterschiedlichen Zahlen, die sich zu Null addieren, andernfalls eine leere Liste zur\u00fcck.\n    \n    >>> triplets_that_sum_to_zero([1, -1, 0, 0, 2])\n    [(0, 1, 2), (1, 2, 3)]\n    >>> triplets_that_sum_to_zero([1, -1, 0, 0, 1, 1])\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_zero([1, -1, 0, 0, 1, 1, 2])\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_zero([1, -1, 0, 0, 1, 1, 2, 3])\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_zero([1, 1, 1, 1, 1])\n    []\n    \"\"\"\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    pairs.append((i, j, k))\n    return pairs\n\ndef triplets_that_sum_to(l, target):\n    \"\"\"\n    triplets_that_sum_to nimmt eine Liste von ganzen Zahlen l sowie eine ganze Zahl target als Eingabe und gibt eine Liste von Tupeln mit den indexen von drei unterschiedlichen Zahlen, die sich zu target addieren, andernfalls eine leere Liste zur\u00fcck.\n    \n    >>> triplets_that_sum_to([1, -1, 0, 0, 2], 0)\n    [(0, 1, 2), (1, 2, 3)]\n    >>> triplets_that_sum_to([1, -1, 0, 0, 1, 1], 0)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to([1, -1, 0, 0, 1, 1, 2], 0)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to([1, -1, 0, 0, 1, 1, 2, 3], 0)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to([1, 1, 1, 1, 1], 3)\n    []\n    \"\"\"\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == target:\n                    pairs.append((i, j, k))\n    return pairs\n\ndef triplets_that_sum_to_smallest(l, n):\n    \"\"\"\n    triplets_that_sum_to_smallest nimmt eine Liste von ganzen Zahlen l sowie eine positive ganze Zahl n als Eingabe und gibt eine Liste von Tupeln mit den indexen von drei unterschiedlichen Zahlen, die sich zu n addieren, andernfalls eine leere Liste zur\u00fcck.\n    \n    >>> triplets_that_sum_to_smallest([1, -1, 0, 0, 2], 2)\n    [(0, 1, 2), (1, 2, 3)]\n    >>> triplets_that_sum_to_smallest([1, -1, 0, 0, 1, 1], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest([1, -1, 0, 0, 1, 1, 2], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest([1, -1, 0, 0, 1, 1, 2, 3], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest([1, 1, 1, 1, 1], 3)\n    []\n    \"\"\"\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    pairs.append((i, j, k))\n    return pairs\n\ndef triplets_that_sum_to_smallest_diff(l, n):\n    \"\"\"\n    triplets_that_sum_to_smallest_diff nimmt eine Liste von ganzen Zahlen l sowie eine positive ganze Zahl n als Eingabe und gibt eine Liste von Tupeln mit den indexen von drei unterschiedlichen Zahlen, die sich zu n addieren, andernfalls eine leere Liste zur\u00fcck.\n    \n    >>> triplets_that_sum_to_smallest_diff([1, -1, 0, 0, 2], 2)\n    [(0, 1, 2), (1, 2, 3)]\n    >>> triplets_that_sum_to_smallest_diff([1, -1, 0, 0, 1, 1], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest_diff([1, -1, 0, 0, 1, 1, 2], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest_diff([1, -1, 0, 0, 1, 1, 2, 3], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest_diff([1, 1, 1, 1, 1], 3)\n    [(1, 2, 3)]\n    \"\"\"\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    pairs.append((i, j, k))\n    smallest_diff = None\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            diff = abs(pairs[i][0] + pairs[j][0] - n)\n            if smallest_diff is None or diff < smallest_diff[0]:\n                smallest_diff = (diff, pairs[i], pairs[j])\n    return smallest_diff\n\ndef triplets_that_sum_to_smallest_diff_n(l, n):\n    \"\"\"\n    triplets_that_sum_to_smallest_diff_n nimmt eine Liste von ganzen Zahlen l sowie eine positive ganze Zahl n als Eingabe und gibt eine Liste von Tupeln mit den indexen von drei unterschiedlichen Zahlen, die sich zu n addieren, andernfalls eine leere Liste zur\u00fcck.\n    \n    >>> triplets_that_sum_to_smallest_diff_n([1, -1, 0, 0, 2], 2)\n    [(0, 1, 2), (1, 2, 3)]\n    >>> triplets_that_sum_to_smallest_diff_n([1, -1, 0, 0, 1, 1], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest_diff_n([1, -1, 0, 0, 1, 1, 2], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest_diff_n([1, -1, 0, 0, 1, 1, 2, 3], 2)\n    [(0, 1, 2), (1, 2, 3), (1, 3, 4)]\n    >>> triplets_that_sum_to_smallest_diff_n([1, 1, 1, 1, 1], 3)\n    [(1, 2, 3)]\n    \"\"\"\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    pairs.append((i, j, k))\n    smallest_diff = None\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            diff = abs(pairs[i][0] + pairs[j][0] - n)\n            if smallest_diff is None or diff < smallest_diff[0]:\n                smallest_diff = (diff, pairs[i], pairs[j])\n    return (smallest_diff[1"}
{"task_id": "python/13", "language": "python", "completion": "for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n    \n\ndef word_search(doc_list, keyword):\n    \"\"\"\n    word_search nimmt eine Liste von Zeichenketten und eine Zeichenkette als Eingabe.\nEs gibt True zur\u00fcck, wenn die Zeichenkette in der Liste vorkommt, andernfalls False zur\u00fcckgegeben wird.\n    \n    >>> doc_list = [\"The Learn Python Challenge Casino.\", \"They're having the bestcasino game\", \"You need to back up, or you'll get lost\", \"Casinoville\"]\n    >>> word_search(doc_list, \"casino\")\n    True\n    >>> word_search(doc_list, \"you\")\n    True\n    >>> word_search(doc_list, \"They're having\")\n    False\n    >>> word_search(doc_list, \"have\")\n    False\n    \"\"\"\n    for sentence in doc_list:\n        if keyword in sentence.split(\" \"):\n            return True\n    return False\n    \ndef word_search(doc_list, keyword):\n    \"\"\"\n    word_search nimmt eine Liste von Zeichenketten und eine Zeichenkette als Eingabe.\nEs gibt True zur\u00fcck, wenn die Zeichenkette in der Liste vorkommt, andernfalls False zur\u00fcckgegeben wird.\n    \n    >>> doc_list = [\"The Learn Python Challenge Casino.\", \"They're having the bestcasino game\", \"You need to back up, or you'll get lost\", \"Casinoville\"]\n    >>> word_search(doc_list, \"casino\")\n    True\n    >>> word_search(doc_list, \"you\")\n    True\n    >>> word_search(doc_list, \"They're having\")\n    False\n    >>> word_search(doc_list, \"have\")\n    False\n    \"\"\"\n    indices = []\n    for i, sentence in enumerate(doc_list):\n        tokens = sentence.split()\n        if keyword in tokens:\n            indices.append(i)\n    return indices\n    \ndef word_search(doc_list, keyword):\n    \"\"\"\n    word_search nimmt eine Liste von Zeichenketten und eine Zeichenkette als Eingabe.\nEs gibt True zur\u00fcck, wenn die Zeichenkette in der Liste vorkommt, andernfalls False zur\u00fcckgegeben wird.\n    \n    >>> doc_list = [\"The Learn Python Challenge Casino.\", \"They're having the bestcasino game\", \"You need to back up, or you'll get lost\", \"Casinoville\"]\n    >>> word_search(doc_list, \"casino\")\n    True\n    >>> word_search(doc_list, \"you\")\n    True\n    >>> word_search(doc_list, \"They're having\")\n    False\n    >>> word_search(doc_list, \"have\")\n    False\n    \"\"\"\n    indices = []\n    for i, sentence in enumerate(doc_list):\n        tokens = sentence.split()\n        if keyword in tokens:\n            indices.append(i)\n    return indices\n    \ndef word_search(doc_list, keyword):\n    \"\"\"\n    word_search nimmt eine Liste von Zeichenketten und eine Zeichenkette als Eingabe.\nEs gibt True zur\u00fcck, wenn die Zeichenkette in der Liste vorkommt, andernfalls False zur\u00fcckgegeben wird.\n    \n    >>> doc_list = [\"The Learn Python Challenge Casino.\", \"They're having the bestcasino game\", \"You need to back up, or you'll get lost\", \"Casinoville\"]\n    >>> word_search(doc_list, \"casino\")\n    True\n    >>> word_search(doc_list, \"you\")\n    True\n    >>> word_search(doc_list, \"They're having\")\n    False\n    >>> word_search(doc_list, \"have\")\n    False\n    \"\"\"\n    indices = []\n    for i, sentence in enumerate(doc_list):\n        tokens = sentence.split()\n        if keyword in tokens:\n            indices.append(i)\n    return indices\n    \ndef word_search(doc_list, keyword):\n    \"\"\"\n    word_search nimmt eine Liste von Zeichenketten und eine Zeichenkette als Eingabe.\nEs gibt True zur\u00fcck, wenn die Zeichenkette in der Liste vorkommt, andernfalls False zur\u00fcckgegeben wird.\n    \n    >>> doc_list = [\"The Learn Python Challenge Casino.\", \"They're having the bestcasino game\","}
{"task_id": "python/14", "language": "python", "completion": "def fib4_rec(n: int, counter: int):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 2\n        if n == 3:\n            return 0\n        return fib4_rec(n-1, counter+1) + fib4_rec(n-2, counter+1) + fib4_rec(n-3, counter+1) + fib4_rec(n-4, counter+1)\n    return fib4_rec(n, 0)\n    pass\n\ndef fib4_iter(n: int):\n    \"\"\"Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fib4-Zahlenfolge iterativ zu berechnen. Verwenden Sie keine Rekursion.\n    >>> fib4_iter(5)\n    4\n    >>> fib4_iter(6)\n    8\n    >>> fib4_iter(7)\n    14\n    \"\"\"\n    fib_list = [0, 0, 2, 0]\n    if n == 0:\n        return fib_list[0]\n    if n == 1:\n        return fib_list[1]\n    if n == 2:\n        return fib_list[2]\n    if n == 3:\n        return fib_list[3]\n    for i in range(4, n+1):\n        fib_list[3] = fib_list[0] + fib_list[1] + fib_list[2] + fib_list[3]\n        fib_list[0] = fib_list[1]\n        fib_list[1] = fib_list[2]\n        fib_list[2] = fib_list[3]\n    return fib_list[3]\n    pass\n\ndef fib5(n: int):\n    \"\"\"Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fib5-Zahlenfolge iterativ zu berechnen. Verwenden Sie keine Rekursion.\n    \n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    fib_list = [0, 0, 2, 0, 0]\n    if n == 0:\n        return fib_list[0]\n    if n == 1:\n        return fib_list[1]\n    if n == 2:\n        return fib_list[2]\n    if n == 3:\n        return fib_list[3]\n    for i in range(4, n+1):\n        fib_list[4] = fib_list[0] + fib_list[1] + fib_list[2] + fib_list[3] + fib_list[4]\n        fib_list[0] = fib_list[1]\n        fib_list[1] = fib_list[2]\n        fib_list[2] = fib_list[3]\n        fib_list[3] = fib_list[4]\n    return fib_list[4]\n    pass\n\ndef fib6(n: int):\n    \"\"\"Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fib6-Zahlenfolge iterativ zu berechnen. Verwenden Sie keine Rekursion.\n    \n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    8\n    >>> fib6(7)\n    14\n    \"\"\"\n    fib_list = [0, 0, 2, 0, 0, 0]\n    if n == 0:\n        return fib_list[0]\n    if n == 1:\n        return fib_list[1]\n    if n == 2:\n        return fib_list[2]\n    if n == 3:\n        return fib_list[3]\n    for i in range(4, n+1):\n        fib_list[5] = fib_list[0] + fib_list[1] + fib_list[2] + fib_list[3] + fib_list[4] + fib_list[5]\n        fib_list[0] = fib_list[1]\n        fib_list[1] = fib_list[2]\n        fib_list[2] = fib_list[3]\n        fib_list[3] = fib_list[4]\n        fib_list[4]"}
{"task_id": "python/14", "language": "python", "completion": "# BEGIN\n    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 2\n    elif n==3:\n        return 0\n    elif n==4:\n        return 2\n    else:\n        return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n    # END\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    \n    for n in range(1, 8):\n        print(f\"fib4({n}): {fib4(n)}\")"}
{"task_id": "python/15", "language": "python", "completion": "l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[(len(l) - 1) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef has_duplicates(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    \n    for element in l:\n        if l.count(element) > 1:\n            return True\n    return False\n    \ndef has_duplicates2(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates2([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates2([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates3(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates3([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates3([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates4(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates4([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates4([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    l.sort()\n    for i, elem in enumerate(l):\n        if i == 0 or i == len(l) - 1 or elem != l[i + 1]:\n            continue\n        return True\n    return False\n    \ndef has_duplicates5(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates5([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates5([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates6(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates6([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates6([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates7(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates7([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates7([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates8(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates8([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates8([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates9(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates9([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates9([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates10(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates10([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates10([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates11(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates11([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates11([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l)) != len(l)\n\ndef has_duplicates12(l: list):\n    \"\"\"Gibt True zur\u00fcck, wenn die Liste l Elemente enth\u00e4lt, die\n    duplicates sind.\n    \n    >>> has_duplicates12([3, 1, 2, 4, 5])\n    False\n    >>> has_duplicates12([1, 2, 2, 3, 4])\n    True\n    \"\"\"\n    return len(set(l))"}
{"task_id": "python/15", "language": "python", "completion": "if l == []:\n        return None\n    \n    # l in sortiert werden\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n                \n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Gib den Mittelwert der Elemente in der Liste l zur\u00fcck.\n    \n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    >>> mean([1, 3, 5, 7, 9])\n    5.0\n    \"\"\"\n    if l == []:\n        return None\n    return sum(l) / len(l)\n\n\ndef median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l == []:\n        return None\n    \n    # l in sortiert werden\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n                \n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Gib den Mittelwert der Elemente in der Liste l zur\u00fcck.\n    \n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    >>> mean([1, 3, 5, 7, 9])\n    5.0\n    \"\"\"\n    if l == []:\n        return None\n    return sum(l) / len(l)\n\n\ndef median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l == []:\n        return None\n    \n    # l in sortiert werden\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n                \n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Gib den Mittelwert der Elemente in der Liste l zur\u00fcck.\n    \n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    >>> mean([1, 3, 5, 7, 9])\n    5.0\n    \"\"\"\n    if l == []:\n        return None\n    return sum(l) / len(l)\n\n\ndef median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l == []:\n        return None\n    \n    # l in sortiert werden\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n                \n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Gib den Mittelwert der Elemente in der Liste l zur\u00fcck.\n    \n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    >>> mean([1, 3, 5, 7, 9])\n    5.0\n    \"\"\"\n    if l == []:\n        return None\n    return sum(l) / len(l)\n\n\ndef median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l == []:\n        return None\n    \n    # l in sortiert werden\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n                \n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Gib den Mittelwert der Elemente in der Liste l zur\u00fcck.\n    \n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    >>> mean([1, 3, 5, 7, 9])\n    5.0\n    \"\"\"\n    if l == []:\n        return None\n    return sum(l) / len(l)\n\n\ndef median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l == []:\n        return None\n    \n    # l in sortiert werden\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n                \n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Gib den Mittelwert der Elemente in der Liste l zur\u00fcck.\n    \n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    >>> mean([1, 3, 5, 7, 9])\n    5.0\n    \"\"\"\n    if l =="}
{"task_id": "python/16", "language": "python", "completion": "# Remove whitespace and punctuation\n    text = ''.join(c for c in text if c.isalnum())\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Remove whitespace and punctuation\n    text = ''.join(c for c in text if c.isalnum())\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Remove whitespace and punctuation\n    text = ''.join(c for c in text if c.isalnum())\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Remove whitespace and punctuation\n    text = ''.join(c for c in text if c.isalnum())\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Remove whitespace and punctuation\n    text = ''.join(c for c in text if c.isalnum())\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Remove whitespace and punctuation\n    text = ''.join(c for c in text if c.isalnum())\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr"}
{"task_id": "python/16", "language": "python", "completion": "...\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Diese Funktion \u00fcberpr\u00fcft, ob der gegebene Text ein Palindrom ist.\n    \n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    ...\n\n\ndef is_palindrome_v3(text: str):\n    \"\"\"\n    Diese Funktion \u00fcberpr\u00fcft, ob der gegebene Text ein Palindrom ist.\n    \n    >>> is_palindrome_v3('')\n    True\n    >>> is_palindrome_v3('aba')\n    True\n    >>> is_palindrome_v3('aaaaa')\n    True\n    >>> is_palindrome_v3('zbcd')\n    False\n    \"\"\"\n    ...\n\n\ndef test_is_palindrome():\n    \"\"\"\n    Diese Funktion \u00fcberpr\u00fcft, ob die Funktion mit den angegebenen Werten korrektt funktioniert.\n    \"\"\"\n    assert is_palindrome('')\n    assert is_palindrome('aba')\n    assert is_palindrome('aaaaa')\n    assert not is_palindrome('zbcd')\n\n    print('ok')\n\n\ndef test_is_palindrome_v2():\n    \"\"\"\n    Diese Funktion \u00fcberpr\u00fcft, ob die Funktion mit den angegebenen Werten korrektt funktioniert.\n    \"\"\"\n    assert is_palindrome_v2('')\n    assert is_palindrome_v2('aba')\n    assert is_palindrome_v2('aaaaa')\n    assert not is_palindrome_v2('zbcd')\n\n    print('ok')\n\n\ndef test_is_palindrome_v3():\n    \"\"\"\n    Diese Funktion \u00fcberpr\u00fcft, ob die Funktion mit den angegebenen Werten korrektt funktioniert.\n    \"\"\"\n    assert is_palindrome_v3('')\n    assert is_palindrome_v3('aba')\n    assert is_palindrome_v3('aaaaa')\n    assert not is_palindrome_v3('zbcd')\n\n    print('ok')\n\n\ndef test_all():\n    \"\"\"\n    Diese Funktion \u00fcberpr\u00fcft, ob alle Unit Tests funktionieren.\n    \"\"\"\n    test_is_palindrome()\n    test_is_palindrome_v2()\n    test_is_palindrome_v3()\n\n\nif __name__ == '__main__':\n    test_all()\n\n    while True:\n        text = input('Gib einen Text ein: ')\n        result = is_palindrome_v3(text)\n        print('Das ist ein Palindrom: {}'.format(result))"}
{"task_id": "python/17", "language": "python", "completion": "return ''.join(c for c in text if c.lower() not in 'aeiou')\n\n\ndef pig_latin(text):\n    \"\"\"\n    pig_latin ist eine Funktion, die einen String entgegennimmt und einen String in Pig Latin zur\u00fcckgibt.\n    \n    >>> pig_latin('')\n    ''\n    >>> pig_latin('abcdef')\n    'efabc'\n    >>> pig_latin('abcdef\\nghijklm')\n    'efabc\\nghijklm'\n    >>> pig_latin('aaaaa')\n    'aaaaa'\n    >>> pig_latin('aaBAA')\n    'aaBAA'\n    >>> pig_latin('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(w + 'ay' if w.lower() not in 'aeiou' else w[1:] + w[0] + 'ay' for w in text.split())\n\n\ndef pig_latin_string(text):\n    \"\"\"\n    pig_latin ist eine Funktion, die einen String entgegennimmt und einen String in Pig Latin zur\u00fcckgibt.\n    \n    >>> pig_latin_string('')\n    ''\n    >>> pig_latin_string('abcdef')\n    'efabc'\n    >>> pig_latin_string('abcdef\\nghijklm')\n    'efabc\\nghijklm'\n    >>> pig_latin_string('aaaaa')\n    'aaaaa'\n    >>> pig_latin_string('aaBAA')\n    'aaBAA'\n    >>> pig_latin_string('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(pig_latin(w).split())\n\n\ndef pig_latin_string_improved(text):\n    \"\"\"\n    pig_latin ist eine Funktion, die einen String entgegennimmt und einen String in Pig Latin zur\u00fcckgibt.\n    \n    >>> pig_latin_string_improved('')\n    ''\n    >>> pig_latin_string_improved('abcdef')\n    'efabc'\n    >>> pig_latin_string_improved('abcdef\\nghijklm')\n    'efabc\\nghijklm'\n    >>> pig_latin_string_improved('aaaaa')\n    'aaaaa'\n    >>> pig_latin_string_improved('aaBAA')\n    'aaBAA'\n    >>> pig_latin_string_improved('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(pig_latin(w) if w.lower() in 'aeiou' else pig_latin(w) for w in text.split())\n\n\ndef pig_latin_string_improved(text):\n    \"\"\"\n    pig_latin ist eine Funktion, die einen String entgegennimmt und einen String in Pig Latin zur\u00fcckgibt.\n    \n    >>> pig_latin_string_improved('')\n    ''\n    >>> pig_latin_string_improved('abcdef')\n    'efabc'\n    >>> pig_latin_string_improved('abcdef\\nghijklm')\n    'efabc\\nghijklm'\n    >>> pig_latin_string_improved('aaaaa')\n    'aaaaa'\n    >>> pig_latin_string_improved('aaBAA')\n    'aaBAA'\n    >>> pig_latin_string_improved('zbcd')\n    'zbcd'\n    \"\"\"\n    pig_latin = lambda w: w[1:] + w[0] + 'ay' if w.lower() in 'aeiou' else w + 'ay'\n    return ''.join(pig_latin(w) if w.lower() in 'aeiou' else pig_latin(w) for w in text.split())\n\n\ndef pig_latin_string_improved(text):\n    \"\"\"\n    pig_latin ist eine Funktion, die einen String entgegennimmt und einen String in Pig Latin zur\u00fcckgibt.\n    \n    >>> pig_latin_string_improved('')\n    ''\n    >>> pig_latin_string_improved('abcdef')\n    'efabc'\n    >>> pig_latin_string_improved('abcdef\\nghijklm')\n    'efabc\\nghijklm'\n    >>> pig_latin_string_improved('aaaaa')\n    'aaaaa'\n    >>> pig_latin_string_improved('aaBAA')\n    'aaBAA'\n    >>> pig_latin_string_improved('zbcd')\n    'zbcd'\n    \"\"\"\n    pig_latin = lambda w: w[1:] + w[0] + 'ay' if w.lower() in 'aeiou' else w + 'ay'\n    return ''.join(pig_latin(w) if w.lower() in 'aeiou' else pig_latin(w) for w in text.split())\n\n\ndef pig_latin_string_improved(text):\n    \"\"\"\n    pig_latin ist eine Funktion, die einen String entgegennimmt und einen String in Pig Latin zur\u00fcckgibt.\n    \n    >>> pig_latin_string_improved('')\n    ''\n    >>> pig_latin_string_improved('abcdef')\n    'efabc'\n    >>> pig_latin_string_improved('abcdef\\nghijklm')\n    'efabc\\nghijklm'\n    >>> pig_latin_string_improved('aaaaa')\n    'aaaaa'\n    >>> pig_latin_string_improved('aaBAA')\n    'aaBAA'\n    >>> pig_latin_string_improved('zbcd')\n    'zbcd'\n    \"\"\"\n    pig_latin = lambda w: w[1:] + w[0] + 'ay' if w.lower() in 'aeiou' else w + 'ay'\n    return '"}
{"task_id": "python/17", "language": "python", "completion": "result = ''\n    for c in text:\n        if c in 'aeiouAEIOU':\n            continue\n        result = result + c\n    return result\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(remove_vowels('abcdef'))\n    print(remove_vowels('aaaaa'))\n    print(remove_vowels('aaBAA'))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('abcdef\\nghijklm'))\n    print(remove_vowels(''))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('zbcd'))\n\n  \n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    result = ''\n    for c in text:\n        if c in 'aeiouAEIOU':\n            continue\n        result = result + c\n    return result\n\n# Main Function\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(remove_vowels('abcdef'))\n    print(remove_vowels('aaaaa'))\n    print(remove_vowels('aaBAA'))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('abcdef\\nghijklm'))\n    print(remove_vowels(''))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('zbcd'))\n\n  \n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    result = ''\n    for c in text:\n        if c in 'aeiouAEIOU':\n            continue\n        result = result + c\n    return result\n\n# Main Function\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(remove_vowels('abcdef'))\n    print(remove_vowels('aaaaa'))\n    print(remove_vowels('aaBAA'))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('abcdef\\nghijklm'))\n    print(remove_vowels(''))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('zbcd'))\n\n  \n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    result = ''\n    for c in text:\n        if c in 'aeiouAEIOU':\n            continue\n        result = result + c\n    return result\n\n# Main Function\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(remove_vowels('abcdef'))\n    print(remove_vowels('aaaaa'))\n    print(remove_vowels('aaBAA'))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('abcdef\\nghijklm'))\n    print(remove_vowels(''))\n    print(remove_vowels('zbcd'))\n    print(remove_vowels('zbcd'))\n\n  \n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    result = ''\n    for c in text:\n        if c in 'aeiouAEIOU':\n            continue\n        result = result + c\n    return result\n\n# Main"}
{"task_id": "python/18", "language": "python", "completion": "for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold_2(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold_3(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(i < t for i in l)\n\ndef below_threshold_4(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(i < t for i in l)\n\ndef below_threshold_5(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t >= i for i in l)\n\ndef below_threshold_6(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_7(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_8(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_9(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_10(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_11(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_12(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_13(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_14(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i in l)\n\ndef below_threshold_15(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    return all(t > i for i"}
{"task_id": "python/18", "language": "python", "completion": "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef test_below_threshold():\n    assert below_threshold([], 100)\n    assert below_threshold([1, 2, 4, 10], 100)\n    assert not below_threshold([1, 20, 4, 10], 5)\n\ndef recursive_below_threshold(l: list, t: int, i: int = 0):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n\n    >>> recursive_below_threshold([], 100, 0)\n    True\n    >>> recursive_below_threshold([1, 2, 4, 10], 100, 0)\n    True\n    >>> recursive_below_threshold([1, 20, 4, 10], 5, 0)\n    False\n    \"\"\"\n    if i >= len(l):\n        return True\n    if l[i] >= t:\n        return False\n    return recursive_below_threshold(l, t, i + 1)\n\n\ndef test_recursive_below_threshold():\n    assert recursive_below_threshold([], 100, 0)\n    assert recursive_below_threshold([1, 2, 4, 10], 100, 0)\n    assert not recursive_below_threshold([1, 20, 4, 10], 5, 0)\n\ndef iterative_below_threshold(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n\n    >>> iterative_below_threshold([], 100)\n    True\n    >>> iterative_below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> iterative_below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef test_iterative_below_threshold():\n    assert iterative_below_threshold([], 100)\n    assert iterative_below_threshold([1, 2, 4, 10], 100)\n    assert not iterative_below_threshold([1, 20, 4, 10], 5)\n\ndef recursive_iterative_below_threshold(l: list, t: int, i: int = 0, r: bool = True):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n\n    >>> recursive_iterative_below_threshold([], 100, 0, True)\n    True\n    >>> recursive_iterative_below_threshold([1, 2, 4, 10], 100, 0, True)\n    True\n    >>> recursive_iterative_below_threshold([1, 20, 4, 10], 5, 0, True)\n    False\n    \"\"\"\n    if i >= len(l):\n        return r\n    if l[i] >= t:\n        return recursive_iterative_below_threshold(l, t, i + 1, False)\n    return recursive_iterative_below_threshold(l, t, i + 1, r)\n\n\ndef test_recursive_iterative_below_threshold():\n    assert recursive_iterative_below_threshold([], 100, 0, True)\n    assert recursive_iterative_below_threshold([1, 2, 4, 10], 100, 0, True)\n    assert not recursive_iterative_below_threshold([1, 20, 4, 10], 5, 0, True)\n\ndef iterative_recursive_below_threshold(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n\n    >>> iterative_recursive_below_threshold([], 100)\n    True\n    >>> iterative_recursive_below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> iterative_recursive_below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    i = 0\n    r = True\n    while i < len(l):\n        if l[i] >= t:\n            return False\n        i += 1\n    return True\n\n\ndef test_iterative_recursive_below_threshold():\n    assert iterative_recursive_below_threshold([], 100)\n    assert iterative_recursive_below_threshold([1, 2, 4, 10], 100)\n    assert not iterative_recursive_below_threshold([1, 20, 4, 10], 5)\n\ndef recursive_iterative_recursive_below_threshold(l: list, t: int, i: int = 0, r: bool ="}
{"task_id": "python/19", "language": "python", "completion": "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\" subtrahiert die zweite Zahl von der ersten aus x und y.\n    \n    >>> subtract(5, 3)\n    2\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\" Multipliziert die Zahlen x und y\n    \n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\" dividiert die erste Zahl durch zweite aus x und y.\n    \n    >>> divide(6, 3)\n    2\n    >>> divide(5, 7)\n    0\n    \"\"\"\n    return x // y\n\ndef gcd(a: int, b: int):\n    \"\"\" Gibt den gr\u00f6\u00dften gemeinsamen Teiler zweier ganzzahliger Zahlen aus a und b.\n    \n    >>> gcd(5, 10)\n    5\n    >>> gcd(21, 7)\n    7\n    \"\"\"\n    while b != 0:\n        t = b\n        b = a % b\n        a = t\n    return a\n\ndef lcm(a: int, b: int):\n    \"\"\" Gibt den kleinsten gemeinsamen Teiler zweier ganzzahliger Zahlen aus a und b.\n    \n    >>> lcm(12, 15)\n    60\n    >>> lcm(15, 20)\n    60\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef prime(n: int):\n    \"\"\" Gibt, ob n eine Primzahl ist.\n    \n    >>> prime(2)\n    True\n    >>> prime(4)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef fib(n: int):\n    \"\"\" Gibt die Fibonacci-Folge der L\u00e4nge n aus.\n    \n    >>> fib(1)\n    [1]\n    >>> fib(3)\n    [1, 1, 2]\n    >>> fib(4)\n    [1, 1, 2, 3]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    result = [1, 1]\n    for i in range(2, n):\n        result.append(result[i - 1] + result[i - 2])\n    return result\n\ndef factorial(n: int):\n    \"\"\" Gibt die Fakult\u00e4t von n aus.\n    \n    >>> factorial(3)\n    6\n    >>> factorial(6)\n    720\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef is_prime(n: int):\n    \"\"\" Gibt, ob n eine Primzahl ist.\n    \n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n: int):\n    \"\"\" Gibt die Summe der Ziffern von n aus.\n    \n    >>> sum_of_digits(1234)\n    10\n    >>> sum_of_digits(3456)\n    15\n    \"\"\"\n    result = 0\n    while n != 0:\n        result += n % 10\n        n //= 10\n    return result\n\ndef is_palindrome(n: int):\n    \"\"\" Gibt, ob n ein Palindrom ist.\n    \n    >>> is_palindrome(123454321)\n    True\n    >>> is_palindrome(5335)\n    True\n    >>> is_palindrome(3456)\n    False\n    \"\"\"\n    return n == sum_of_digits(n)\n\ndef is_armstrong(n: int):\n    \"\"\" Gibt, ob n eine Armstrongszahl ist.\n    \n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(100)\n    False\n    \"\"\"\n    return n == sum_of_digits(n) ** 3\n\ndef is_happy(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_happy(4)\n    False\n    >>> is_happy(89)\n    False\n    >>> is_happy(13)\n    False\n    >>> is_happy(10)\n    False\n    >>> is_happy(1)\n    True\n    \"\"\"\n    while n != 1 and n != 4:\n        n = sum_of_digits(n)\n    return n == 1\n\ndef is_happy_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_happy_number(11)\n    False\n    >>> is_happy_number(12)\n    False\n    >>> is_happy_number(13)\n    True\n    \"\"\"\n    return is_happy(n)\n\ndef is_armstrong_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_armstrong_number(10)\n    False\n    >>> is_armstrong_number(153)\n    True\n    \"\"\"\n    return is_armstrong(n)\n\ndef is_happy_number_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_happy_number_number(10)\n    False\n    >>> is_happy_number_number(12)\n    False\n    >>> is_happy_number_number(13)\n    False\n    >>> is_happy_number_number(14)\n    False\n    >>> is_happy_number_number(15)\n    True\n    \"\"\"\n    return is_happy_number(n)\n\ndef is_armstrong_number_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_armstrong_number_number(10)\n    False\n    >>> is_armstrong_number_number(153)\n    True\n    \"\"\"\n    return is_armstrong_number(n)\n\ndef is_happy_number_number_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_happy_number_number_number(10)\n    False\n    >>> is_happy_number_number_number(12)\n    False\n    >>> is_happy_number_number_number(13)\n    False\n    >>> is_happy_number_number_number(14)\n    False\n    >>> is_happy_number_number_number(15)\n    False\n    >>> is_happy_number_number_number(16)\n    False\n    >>> is_happy_number_number_number(17)\n    False\n    >>> is_happy_number_number_number(18)\n    False\n    >>> is_happy_number_number_number(19)\n    True\n    \"\"\"\n    return is_happy_number_number(n)\n\n\ndef is_armstrong_number_number_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_armstrong_number_number_number(10)\n    False\n    >>> is_armstrong_number_number_number(153)\n    True\n    \"\"\"\n    return is_armstrong_number_number(n)\n\ndef is_happy_number_number_number_number(n: int):\n    \"\"\" Gibt, ob n eine \u201eH-zahl\u201c ist.\n    \n    >>> is_happy_number_number_number_number(10)\n    False\n    >>> is_happy_number_number_number_number(12)\n    False\n    >>> is_happy_number_number_number_number(13)\n    False\n    >>> is_happy_number_number_number_number(14)\n    False\n    >>> is_happy_number_number_number_number(15)\n    False\n    >>> is_happy_number_number_number_number(16)\n    False\n    >>> is_happy_number_number_number_number(17)\n    False\n    >>> is_happy_number_number_number_number(18)\n    False\n    >>> is_happy_number_number_number_number(19)\n    T"}
{"task_id": "python/19", "language": "python", "completion": "return x + y\n\ndef div(x: int, y: int):\n    \"\"\"Diviere zwei Zahlen x und y.\n    \n    >>> div(10, 2)\n    5\n    >>> div(5, 7)\n    0\n    \"\"\"\n    return x / y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiplizieren zwei Zahlen x und y.\n    \n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtrahiere zwei Zahlen x und y.\n    \n    >>> sub(10, 2)\n    8\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo von zwei Zahlen x und y.\n    \n    >>> mod(10, 2)\n    0\n    >>> mod(5, 7)\n    5\n    \"\"\"\n    return x % y\n\ndef lcm(x: int, y: int):\n    \"\"\"Berechne den kleinsten gemeinsamen Teiler zweier Zahlen x und y.\n    \n    >>> lcm(10, 2)\n    20\n    >>> lcm(5, 7)\n    75\n    \"\"\"\n    return x * y // gcd(x, y)\n\ndef gcd(x: int, y: int):\n    \"\"\"Berechne den gr\u00f6\u00dften gemeinsamen Teiler zweier Zahlen x und y.\n    \n    >>> gcd(10, 2)\n    2\n    >>> gcd(5, 7)\n    1\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm_list(numbers: list[int]):\n    \"\"\"Berechne den kleinsten gemeinsamen Teiler aller Zahlen in einer Liste.\n    \n    >>> lcm_list([2, 3, 4])\n    12\n    >>> lcm_list([5, 7, 8])\n    240\n    \"\"\"\n    lcm = numbers[0]\n    for n in numbers[1:]:\n        lcm = lcm * n // gcd(lcm, n)\n    return lcm\n\ndef gcd_list(numbers: list[int]):\n    \"\"\"Berechne den gr\u00f6\u00dften gemeinsamen Teiler aller Zahlen in einer Liste.\n    \n    >>> gcd_list([2, 3, 4])\n    2\n    >>> gcd_list([5, 7, 8])\n    1\n    \"\"\"\n    lcm = numbers[0]\n    for n in numbers[1:]:\n        lcm = lcm * n // gcd(lcm, n)\n    return lcm\n\ndef lcm_list_recursive(numbers: list[int]):\n    \"\"\"Berechne den kleinsten gemeinsamen Teiler aller Zahlen in einer Liste.\n    \n    >>> lcm_list_recursive([2, 3, 4])\n    12\n    >>> lcm_list_recursive([5, 7, 8])\n    240\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    lcm = lcm_list_recursive(numbers[1:])\n    return lcm * numbers[0] // gcd(lcm, numbers[0])\n\ndef gcd_list_recursive(numbers: list[int]):\n    \"\"\"Berechne den gr\u00f6\u00dften gemeinsamen Teiler aller Zahlen in einer Liste.\n    \n    >>> gcd_list_recursive([2, 3, 4])\n    2\n    >>> gcd_list_recursive([5, 7, 8])\n    1\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    lcm = gcd_list_recursive(numbers[1:])\n    return lcm * numbers[0] // gcd(lcm, numbers[0])\n\ndef lcm_recursive(x: int, y: int):\n    \"\"\"Berechne den kleinsten gemeinsamen Teiler zweier Zahlen x und y.\n    \n    >>> lcm_recursive(10, 2)\n    20\n    >>> lcm_recursive(5, 7)\n    75\n    \"\"\"\n    return x * y // gcd_recursive(x, y)\n\ndef gcd_recursive(x: int, y: int):\n    \"\"\"Berechne den gr\u00f6\u00dften gemeinsamen Teiler zweier Zahlen x und y.\n    \n    >>> gcd_recursive(10, 2)\n    2\n    >>> gcd_recursive(5, 7)\n    1\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm_recursive_list(numbers: list[int]):\n    \"\"\"Berechne den kleinsten gemeinsamen Teiler aller Zahlen in einer Liste.\n    \n    >>> lcm_recursive_list([2, 3, 4])\n    12\n    >>> lcm_recursive_list([5, 7, 8])\n    240\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    lcm"}
{"task_id": "python/20", "language": "python", "completion": "for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    \n    return True\n\n\ndef same_chars2(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    \n    return s0 == s1\n\n\ndef same_chars3(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    \n    return True\n\n\ndef same_chars4(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    s0 = list(s0)\n    s1 = list(s1)\n    \n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    \n    return True\n\n\ndef same_chars5(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter streamed sind.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    \n    return True\n\n\ndef same_chars6(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter streamed sind.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    for c0, c1 in zip(s0, s1):\n        if c0 != c1:\n            return False\n    \n    return True\n\n\ndef same_chars7(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter streamed sind.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    F"}
{"task_id": "python/20", "language": "python", "completion": "pass\n\n\ndef sum_chars(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Zeichen im \u00fcbergebenen String.\n    \n    >>> sum_chars('abcd')\n    97\n    >>> sum_chars('dddddddabc')\n    67\n    >>> sum_chars('abcdzz')\n    97\n    \"\"\"\n    pass\n\n\ndef sum_of_sums(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String.\n    \n    >>> sum_of_sums('abcd')\n    14\n    >>> sum_of_sums('dddddddabc')\n    109\n    >>> sum_of_sums('abcdzz')\n    109\n    \"\"\"\n    pass\n\n\ndef sum_of_sums_with_pairs(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String und\n    verwenden Sie die zweite M\u00f6glichkeit von ``sum_of_sums``.\n\n    >>> sum_of_sums_with_pairs('abcd')\n    14\n    >>> sum_of_sums_with_pairs('dddddddabc')\n    109\n    >>> sum_of_sums_with_pairs('abcdzz')\n    109\n    \"\"\"\n    pass\n\n\ndef sum_of_sums_with_pairs_and_pairs(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String und\n    verwenden Sie die dritte M\u00f6glichkeit von ``sum_of_sums``.\n\n    >>> sum_of_sums_with_pairs_and_pairs('abcd')\n    14\n    >>> sum_of_sums_with_pairs_and_pairs('dddddddabc')\n    109\n    >>> sum_of_sums_with_pairs_and_pairs('abcdzz')\n    109\n    \"\"\"\n    pass\n\n\ndef sum_of_sums_with_pairs_and_pairs_and_pairs(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String und\n    verwenden Sie die vierte M\u00f6glichkeit von ``sum_of_sums``.\n\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs('abcd')\n    14\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs('dddddddabc')\n    109\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs('abcdzz')\n    109\n    \"\"\"\n    pass\n\n\ndef sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String und\n    verwenden Sie die quinta M\u00f6glichkeit von ``sum_of_sums``.\n\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs('abcd')\n    14\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs('dddddddabc')\n    109\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs('abcdzz')\n    109\n    \"\"\"\n    pass\n\n\ndef sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs_and_pairs(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String und\n    verwenden Sie die sixth M\u00f6glichkeit von ``sum_of_sums``.\n\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs_and_pairs('abcd')\n    14\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs_and_pairs('dddddddabc')\n    109\n    >>> sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs_and_pairs('abcdzz')\n    109\n    \"\"\"\n    pass\n\n\ndef sum_of_sums_with_pairs_and_pairs_and_pairs_and_pairs_and_pairs_and_pairs(s: str):\n    \"\"\"\n    Berechnen Sie die Summe der Summen der einzelnen Zeichen im \u00fcbergebenen String und\n    verwenden Sie die seventh ma"}
{"task_id": "python/21", "language": "python", "completion": "a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_recursive(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\n\n\ndef fib_loop(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_loop(10)\n    55\n    >>> fib_loop(1)\n    1\n    >>> fib_loop(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 1, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    return b\n\n\ndef fib_loop_2(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_loop_2(10)\n    55\n    >>> fib_loop_2(1)\n    1\n    >>> fib_loop_2(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 1, 1\n    for i in range(n - 2):\n        a, b = b, a + b\n    return b\n\n\ndef fib_memo(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    return fib_memo_impl(n, {})\n\n\ndef fib_memo_impl(n: int, cache: dict):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_memo_impl(10, {})\n    55\n    >>> fib_memo_impl(1, {})\n    1\n    >>> fib_memo_impl(8, {})\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    if n in cache:\n        return cache[n]\n    cache[n] = fib_memo_impl(n - 1, cache) + fib_memo_impl(n - 2, cache)\n    return cache[n]\n\n\ndef fib_memo_topdown(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_memo_topdown(10)\n    55\n    >>> fib_memo_topdown(1)\n    1\n    >>> fib_memo_topdown(8)\n    21\n    \"\"\"\n    return fib_memo_impl_topdown(n, {})\n\n\ndef fib_memo_impl_topdown(n: int, cache: dict):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_memo_impl_topdown(10, {})\n    55\n    >>> fib_memo_impl_topdown(1, {})\n    1\n    >>> fib_memo_impl_topdown(8, {})\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    if n not in cache:\n        cache[n] = fib_memo_impl_topdown(n - 1, cache) + fib_memo_impl_topdown(n - 2, cache)\n    return cache[n]\n\n\ndef fib_memo_botup(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_memo_botup(10)\n    55\n    >>> fib_memo_botup(1)\n    1\n    >>> fib_memo_botup(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    cache = {}\n    for i in range(2, n + 1):\n        cache[i] = cache[i - 1] + cache[i - 2]\n    return cache[n]\n\n\ndef fib_iter(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 1, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    return b\n\n\ndef fib_iter_topdown(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iter_topdown(10)\n    55\n    >>> fib_iter_topdown(1)\n    1\n    >>> fib_iter_topdown(8)\n    21\n    \"\"\"\n    def fib_iter_impl(n: int, a: int, b: int):\n        if n == 0:\n            return b\n        return fib_iter_impl(n - 1, b, a + b)\n    return fib_iter_impl(n - 1, 1, 1)\n\n\ndef fib_iter_botup(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iter_botup(10)\n    55\n    >>> fib_iter_botup(1)\n    1\n    >>> fib_iter_botup(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 1, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    return b\n\n\ndef fib_iter_botup_rev(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iter_botup_rev(10)\n    55\n    >>> fib_iter_botup_rev(1)\n    1\n    >>> fib_iter_botup_rev(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b, i = 1, 1, 2\n    while i < n:\n        a, b, i = b, a + b, i + 1\n    return b\n\n\ndef fib_iter_botup_rev_topdown(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iter_botup_rev_topdown(10)\n    55\n    >>> fib_iter_botup_rev_topdown(1)\n    1\n    >>> fib_iter_botup_rev_topdown(8)\n    21\n    \"\"\"\n    def fib_iter_botup_rev_impl(n: int, a: int, b: int, i: int):\n        if n == 0:\n            return b\n        return fib_iter_botup_rev_impl(n - 1, b, a + b, i + 1)\n    return fib_iter_botup_rev_impl(n - 1, 1, 1, 2)\n\n\ndef fib_iter_botup_rev_botup(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iter_botup_rev_botup(10)\n    55\n    >>> fib_iter_botup_rev_botup(1)\n    1\n    >>> fib_iter_botup_rev_botup(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b, i = 1, 1, 2\n    while i < n:\n        a, b, i = b, a"}
{"task_id": "python/22", "language": "python", "completion": "s1, s2 = set(l1), set(l2)\n    return sorted(s1 & s2)\n\n\ndef fib(n):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    \n    \"\"\"\n    return n-1\n\n\ndef fib_recursive(n):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(2)\n    1\n    >>> fib_recursive(3)\n    2\n    >>> fib_recursive(4)\n    3\n    >>> fib_recursive(5)\n    5\n    \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n    \n    \n    \ndef fib_recursive_memo(n, fib_dict = {0: 0, 1: 1}):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_recursive_memo(1)\n    1\n    >>> fib_recursive_memo(2)\n    1\n    >>> fib_recursive_memo(3)\n    2\n    >>> fib_recursive_memo(4)\n    3\n    >>> fib_recursive_memo(5)\n    5\n    \n    \"\"\"\n    if n not in fib_dict:\n        fib_dict[n] = fib_recursive_memo(n-1, fib_dict) + fib_recursive_memo(n-2, fib_dict)\n    return fib_dict[n]\n    \n    \n    \ndef fib_iterative(n):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(2)\n    1\n    >>> fib_iterative(3)\n    2\n    >>> fib_iterative(4)\n    3\n    >>> fib_iterative(5)\n    5\n    \n    \"\"\"\n    fib_0, fib_1 = 0, 1\n    for _ in range(n-1):\n        fib_0, fib_1 = fib_1, fib_0 + fib_1\n    return fib_1\n    \n    \n    \ndef fib_iterative_memo(n, fib_dict = {0: 0, 1: 1}):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iterative_memo(1)\n    1\n    >>> fib_iterative_memo(2)\n    1\n    >>> fib_iterative_memo(3)\n    2\n    >>> fib_iterative_memo(4)\n    3\n    >>> fib_iterative_memo(5)\n    5\n    \n    \"\"\"\n    if n not in fib_dict:\n        fib_dict[n] = fib_iterative_memo(n-1, fib_dict) + fib_iterative_memo(n-2, fib_dict)\n    return fib_dict[n]\n    \n    \n    \ndef fib_iterative_memo_v2(n, fib_dict = {0: 0, 1: 1}):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iterative_memo_v2(1)\n    1\n    >>> fib_iterative_memo_v2(2)\n    1\n    >>> fib_iterative_memo_v2(3)\n    2\n    >>> fib_iterative_memo_v2(4)\n    3\n    >>> fib_iterative_memo_v2(5)\n    5\n    \n    \"\"\"\n    fib_0, fib_1 = 0, 1\n    for _ in range(n-1):\n        fib_0, fib_1 = fib_1, fib_0 + fib_1\n        fib_dict[n] = fib_1\n    return fib_1\n    \n    \n    \ndef fib_iterative_memo_v3(n, fib_dict = {0: 0, 1: 1}):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iterative_memo_v3(1)\n    1\n    >>> fib_iterative_memo_v3(2)\n    1\n    >>> fib_iterative_memo_v3(3)\n    2\n    >>> fib_iterative_memo_v3(4)\n    3\n    >>> fib_iterative_memo_v3(5)\n    5\n    \n    \"\"\"\n    if n in fib_dict:\n        return fib_dict[n]\n    else:\n        fib_dict[n] = fib_iterative_memo_v3(n-1, fib_dict) + fib_iterative_memo_v3(n-2, fib_dict)\n        return fib_dict[n]\n\n    \n    \ndef fib_iterative_memo_v4(n, fib_dict = {0: 0, 1: 1}):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib_iterative_memo_v4(1)\n    1\n    >>> fib_iterative_memo_v4(2)\n    1\n    >>> fib_iterative_memo_v4(3)\n    2\n    >>> fib_iterative_memo_v4(4)\n    3\n    >>> fib_iterative_memo_v4(5)\n    5\n    \n    \"\"\"\n    if"}
{"task_id": "python/22", "language": "python", "completion": "return sorted(list(set(l1) & set(l2)))\n\n\ndef prime_sieve(n):\n    \"\"\"Gib alle Primzahlen unterhalb von n zur\u00fcck.\n    \n    >>> prime_sieve(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    >>> prime_sieve(12)\n    [2, 3, 5, 7]\n\n    \"\"\"\n    sieve = [True] * n\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, n):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return [i for i, b in enumerate(sieve) if b]\n\n\ndef is_prime(n):\n    \"\"\"Gib True zur\u00fcck, wenn n eine Primzahl ist, sonst False.\n    \n    >>> is_prime(13)\n    True\n    >>> is_prime(24)\n    False\n    \n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if i * i > n:\n            break\n        if n % i == 0:\n            return False\n    return True\n\n\ndef lcm(a, b):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler von a und b zur\u00fcck.\n    \n    >>> lcm(12, 8)\n    8\n    >>> lcm(21, 15)\n    15\n    \n    \"\"\"\n    gcd = a * b // gcd(a, b)\n    return gcd * a * b // gcd\n\n\ndef gcd(a, b):\n    \"\"\"Gib den gr\u00f6\u00dften gemeinsamen Teiler von a und b zur\u00fcck.\n    \n    >>> gcd(12, 8)\n    4\n    >>> gcd(21, 15)\n    3\n    >>> gcd(13, 17)\n    1\n    >>> gcd(1, 9)\n    1\n    >>> gcd(1, 0)\n    1\n    >>> gcd(0, 9)\n    9\n    >>> gcd(9, 0)\n    9\n    >>> gcd(0, 0)\n    Traceback (most recent call last):\n    ...\n    ValueError: gcd(0, 0)\n\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm_list(l):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Elemente in l zur\u00fcck.\n    \n    >>> lcm_list([1, 2, 3])\n    6\n    >>> lcm_list([1, 2, 3, 4])\n    12\n    >>> lcm_list([1, 2, 3, 4, 5])\n    60\n    \n    \"\"\"\n    lcm_rest = l[0]\n    for i in l[1:]:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_tuple(t):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Elemente in t zur\u00fcck.\n    \n    >>> lcm_tuple((1, 2, 3))\n    6\n    >>> lcm_tuple((1, 2, 3, 4))\n    12\n    >>> lcm_tuple((1, 2, 3, 4, 5))\n    60\n    \n    \"\"\"\n    lcm_rest = t[0]\n    for i in t[1:]:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_set(s):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Elemente in s zur\u00fcck.\n    \n    >>> lcm_set({1, 2, 3})\n    6\n    >>> lcm_set({1, 2, 3, 4})\n    12\n    >>> lcm_set({1, 2, 3, 4, 5})\n    60\n    \n    \"\"\"\n    lcm_rest = s.pop()\n    for i in s:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_dict(d):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Schl\u00fcssel und Werte in d zur\u00fcck.\n    \n    >>> lcm_dict({1: 2, 3: 4, 5: 6})\n    6\n    >>> lcm_dict({1: 2, 3: 4, 5: 6, 7: 8})\n    12\n    >>> lcm_dict({1: 2, 3: 4, 5: 6, 7: 8, 9: 10})\n    12\n    \n    \"\"\"\n    lcm_rest = next(iter(d.keys()))\n    for i in d.keys():\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_range(r):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Elemente in r zur\u00fcck.\n    \n    >>> lcm_range(range(1, 11))\n    6\n    >>> lcm_range(range(1, 13))\n    12\n    >>> lcm_range(range(1, 15))\n    15\n    \n    \"\"\"\n    lcm_rest = r.start\n    for i in r:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_str(s):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Zeichen zur\u00fcck.\n    \n    >>> lcm_str('abcde')\n    1\n    >>> lcm_str('abcdef')\n    1\n    \n    \"\"\"\n    lcm_rest = ord(s[0])\n    for i in s[1:]:\n        lcm_rest = lcm(lcm_rest, ord(i))\n    return lcm_rest\n\n\ndef lcm_bytes(b):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Bytes zur\u00fcck.\n    \n    >>> lcm_bytes(b'abcde')\n    1\n    >>> lcm_bytes(b'abcdef')\n    1\n    \n    \"\"\"\n    lcm_rest = b[0]\n    for i in b[1:]:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_frozenset(s):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Elemente in s zur\u00fcck.\n    \n    >>> lcm_frozenset({1, 2, 3, 4, 5, 6})\n    12\n    \n    \"\"\"\n    lcm_rest = frozenset(next(iter(s)))\n    for i in s:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_list_dict(l: list, d: dict):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Listen und Dictionaries zur\u00fcck.\n    \n    >>> lcm_list_dict([], {})\n    1\n    >>> lcm_list_dict([], {'key': 1})\n    1\n    >>> lcm_list_dict([1, 2, 3], {})\n    1\n    >>> lcm_list_dict([1, 2, 3], {'key': 1})\n    1\n    >>> lcm_list_dict([1, 2, 3], {'key': 1, 'key1': 2})\n    1\n    >>> lcm_list_dict([1, 2, 3], {'key': 2, 'key1': 3})\n    2\n    >>> lcm_list_dict([1, 2, 3, 4], {'key': 1, 'key1': 2, 'key2': 3, 'key3': 4})\n    1\n    \n    \"\"\"\n    lcm_rest = lcm(next(iter(d.keys())), l[0])\n    for i in l[1:]:\n        lcm_rest = lcm(lcm_rest, i)\n    for i in d.keys():\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_str_set(s, d):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Zeichen und Sets zur\u00fcck.\n    \n    >>> lcm_str_set('abc', set('def'))\n    1\n    >>> lcm_str_set('abc', set('defghi'))\n    1\n    \n    \"\"\"\n    lcm_rest = ord(s[0])\n    for i in s[1:]:\n        lcm_rest = lcm(lcm_rest, ord(i))\n    for i in d:\n        lcm_rest = lcm(lcm_rest, i)\n    return lcm_rest\n\n\ndef lcm_range_frozenset(r, s):\n    \"\"\"Gib den kleinsten gemeinsamen Teiler aller Ranges und frozensets zur\u00fcck.\n    \n    >>> lcm_range_frozenset(range(1, 10), {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n    1\n    >>> lcm_range_frozenset(range(1, 10), {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12})\n    1\n    \n    \"\"\"\n    lcm_rest = r.st"}
{"task_id": "python/23", "language": "python", "completion": "for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Gib True zur\u00fcck, wenn n eine Primzahl ist. Andernfalls gib False zur\u00fcck.\n    \n    >>> is_prime(13195)\n    False\n    >>> is_prime(2048)\n    False\n    >>> is_prime(10)\n    False\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n    \ndef largest_prime_factor_2(n: int) -> int:\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n    \n    >>> largest_prime_factor(13195)\n    29\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            n //= i\n            return i\n    return n\n\n\ndef test_largest_prime_factor():\n    \"\"\"Pr\u00fcfe, ob die Funktionen die oben aufgelisteten Bedingungen erf\u00fcllen.\n    \n    >>> largest_prime_factor(13195) == 29\n    True\n    \"\"\"\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(1) == 1\n    assert largest_prime_factor(2) == 1\n    assert largest_prime_factor(3) == 1\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(1) == 1\n    assert largest_prime_factor(2) == 1\n    assert largest_prime_factor(3) == 1\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(1) == 1\n    assert largest_prime_factor(2) == 1\n    assert largest_prime_factor(3) == 1\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(1) == 1\n    assert largest_prime_factor(2) == 1\n    assert largest_prime_factor(3) == 1\n\n\ndef test_largest_prime_factor_2():\n    \"\"\"Pr\u00fcfe, ob die Funktionen die oben aufgelisteten Bedingungen erf\u00fcllen.\n    \n    >>> largest_prime_factor(13195) == 29\n    True\n    \"\"\"\n    assert largest_prime_factor_2(13195) == 29\n    assert largest_prime_factor_2(2048) == 2\n    assert largest_prime_factor_2(10) == 2\n    assert largest_prime_factor_2(1) == 1\n    assert largest_prime_factor_2(2) == 1\n    assert largest_prime_factor_2(3) == 1\n    assert largest_prime_factor_2(13195) == 29\n    assert largest_prime_factor_2(13195) == 29\n    assert largest_prime_factor_2(2048) == 2\n    assert largest_prime_factor_2(10) == 2\n    assert largest_prime_factor_2(1) == 1\n    assert largest_prime_factor_2(2) == 1\n    assert largest_prime_factor_2(3) == 1\n    assert largest_prime_factor_2(13195) == 29\n    assert largest_prime_factor_2(13195) == 29\n    assert largest_prime_factor_2(2048) == 2\n    assert largest_prime_factor_2(10) == 2\n    assert largest_prime_factor_2(1) == 1\n    assert largest_prime_factor_2(2) == 1\n    assert largest_prime_factor_2(3) == 1\n\n\ndef test_is_prime():\n    \"\"\"Pr\u00fcfe, ob die Funktionen die oben aufgelisteten Bedingungen erf\u00fcllen.\n    \n    >>> is_prime(13195)\n    False\n    \"\"\"\n    assert is_prime(13195) == False\n    assert is_prime(2048) == False\n    assert is_prime(10)"}
{"task_id": "python/23", "language": "python", "completion": "if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n\n    if n % 3 == 0:\n        return largest_prime_factor(n // 3)\n\n    if n % 5 == 0:\n        return largest_prime_factor(n // 5)\n\n    if n % 7 == 0:\n        return largest_prime_factor(n // 7)\n\n    return n\n    \n\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n\n    if n % 3 == 0:\n        return largest_prime_factor(n // 3)\n\n    if n % 5 == 0:\n        return largest_prime_factor(n // 5)\n\n    if n % 7 == 0:\n        return largest_prime_factor(n // 7)\n\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "s: int = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n\n\ndef sum_to_n_recursive(n: int) -> int:\n    \"\"\"\n    Die Funktion sum_to_n_recursive berechnet die Summe der ersten n Zahlen, wobei n eine positive Ganzzahl ist.\n    \n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    return n + sum_to_n_recursive(n - 1)\n\n\ndef sum_to_n_iterative(n: int) -> int:\n    \"\"\"\n    Die Funktion sum_to_n_iterative berechnet die Summe der ersten n Zahlen, wobei n eine positive Ganzzahl ist.\n    \n    >>> sum_to_n_iterative(30)\n    465\n    >>> sum_to_n_iterative(100)\n    5050\n    >>> sum_to_n_iterative(5)\n    15\n    >>> sum_to_n_iterative(10)\n    55\n    >>> sum_to_n_iterative(1)\n    1\n    \"\"\"\n    s: int = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n\n\ndef sum_to_n_algebraic(n: int) -> int:\n    \"\"\"\n    Die Funktion sum_to_n_algebraic berechnet die Summe der ersten n Zahlen, wobei n eine positive Ganzzahl ist.\n    \n    >>> sum_to_n_algebraic(30)\n    465\n    >>> sum_to_n_algebraic(100)\n    5050\n    >>> sum_to_n_algebraic(5)\n    15\n    >>> sum_to_n_algebraic(10)\n    55\n    >>> sum_to_n_algebraic(1)\n    1\n    \"\"\"\n    return n * (1 + n) // 2\n\n\ndef sum_to_n_algebraic_recursive(n: int) -> int:\n    \"\"\"\n    Die Funktion sum_to_n_algebraic_recursive berechnet die Summe der ersten n Zahlen, wobei n eine positive Ganzzahl ist.\n    \n    >>> sum_to_n_algebraic_recursive(30)\n    465\n    >>> sum_to_n_algebraic_recursive(100)\n    5050\n    >>> sum_to_n_algebraic_recursive(5)\n    15\n    >>> sum_to_n_algebraic_recursive(10)\n    55\n    >>> sum_to_n_algebraic_recursive(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    return n + sum_to_n_algebraic_recursive(n - 1)\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    Die Funktion factorial berechnet den Fakult\u00e4t einer Ganzzahl n.\n    \n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    s: int = 1\n    for i in range(1, n + 1):\n        s *= i\n    return s\n\n\ndef factorial_recursive(n: int) -> int:\n    \"\"\"\n    Die Funktion factorial_recursive berechnet den Fakult\u00e4t einer Ganzzahl n.\n    \n    >>> factorial_recursive(3)\n    6\n    >>> factorial_recursive(5)\n    120\n    >>> factorial_recursive(10)\n    3628800\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * factorial_recursive(n - 1)\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    Die Funktion fibonacci berechnet die n-te Fibonacci-Zahl.\n    \n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef fibonacci_recursive(n: int) -> int:\n    \"\"\"\n    Die Funktion fibonacci_recursive berechnet die n-te Fibonacci-Zahl.\n    \n    >>> fibonacci_recursive(0)\n    0\n    >>> fibonacci_recursive(1)\n    1\n    >>> fibonacci_recursive(2)\n    1\n    >>> fibonacci_recursive(3)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\n\ndef fibonacci_algebraic(n: int) -> int:\n    \"\"\"\n    Die Funktion fibonacci_algebraic berechnet die n-te Fibonacci-Zahl.\n    \n    >>> fibonacci_algebraic(0)\n    0\n    >>> fibonacci_algebraic(1)\n    1\n    >>> fibonacci_algebraic(2)\n    1\n    >>> fibonacci_algebraic(3)\n    2\n    \"\"\"\n    if n"}
{"task_id": "python/25", "language": "python", "completion": "der = []\n    for i, coeff in enumerate(xs):\n        if i == 0:\n            continue\n        der.append(coeff * i)\n    return der\n\ndef newton_iteration(x):\n    \"\"\" x ist der Startwert f\u00fcr die Iteration.\n    Gib die n\u00e4chste Iteration des Newton-Verfahrens zur\u00fcck.\n    \"\"\"\n    return x - f(x) / f_prime(x)\n\ndef newton(f, f_prime, x0, tolerance, max_iterations):\n    \"\"\" Rekursives Verfahren zur Berechnung der Nullstelle von f(x) = 0\n    mit einer Iteration der Form\n    \n    x_{n+1} = x_n - f(x_n) / f'(x_n)\n    \n    mit dem Startwert x0 und Toleranz tolerance und maximalen Iterationen\n    max_iterations.\n    \"\"\"\n    \n    if abs(f(x0)) < tolerance or max_iterations == 0:\n        return x0\n    else:\n        return newton(f, f_prime, newton_iteration(x0), tolerance, max_iterations - 1)\n    \n    \ndef f(x):\n    \"\"\" Funktion f(x) zur Berechnung der Nullstelle.\n    \"\"\"\n    return x ** 2 - 2\n    \n\ndef f_prime(x):\n    \"\"\" Ableitung von f(x) zur Berechnung der Iteration.\n    \"\"\"\n    return 2 * x\n\ndef f_prime_newton(x):\n    \"\"\"Ableitung von f(x) f\u00fcr das Newton Verfahren.\n    \"\"\"\n    return newton_iteration(x)\n\ndef newton_iteration_newton(x):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = 1 und Toleranz tolerance = 10**(-12) und maximalen Iterationen\n    max_iterations = 100000.\n    \"\"\"\n    return newton(f, f_prime_newton, 1, 10**(-12), 100000)\n\n\ndef f_prime_newton(x):\n    \"\"\"Ableitung von f(x) f\u00fcr das Newton Verfahren.\n    \"\"\"\n    return newton_iteration_newton(x)\n\n\ndef newton_iteration_newton_bis(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = 1 und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, 1, tolerance, 100000)\n    \n    \ndef newton_iteration_newton_bis_newton(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = newton_iteration_newton(1) und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, newton_iteration_newton(1), tolerance, 100000)\n\n\n\ndef f_prime_newton_bis(x, tolerance):\n    \"\"\"Ableitung von f(x) f\u00fcr das Newton Verfahren.\n    \"\"\"\n    return newton_iteration_newton_bis(x, tolerance)\n\ndef newton_iteration_newton_bis_newton(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = newton_iteration_newton(1) und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, newton_iteration_newton(1), tolerance, 100000)\n\ndef newton_iteration_newton_bis_newton_bis(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = newton_iteration_newton(1) und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, newton_iteration_newton(1), tolerance, 100000)\n\n\ndef newton_iteration_newton_bis_newton_bis_newton(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = newton_iteration_newton(1) und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, newton_iteration_newton(1), tolerance, 100000)\n\n\ndef newton_iteration_newton_bis_newton_bis_newton_bis(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = newton_iteration_newton(1) und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, newton_iteration_newton(1), tolerance, 100000)\n\ndef newton_iteration_newton_bis_newton_bis_newton_bis_newton(x, tolerance):\n    \"\"\"Iteration des Newton-Verfahrens f\u00fcr die Funktion f(x) = x^2 - 2\n    mit x0 = newton_iteration_newton(1) und Toleranz tolerance.\n    \"\"\"\n    return newton(f, f_prime_newton, newton_iteration_newton(1), tolerance, 100000)\n\ndef newton_iteration_newton_bis_newton_bis_newton_bis_newton_bis(x, tolerance)"}
{"task_id": "python/25", "language": "python", "completion": "result = []\n    for i in range(len(xs) - 1):\n        result.append(xs[i+1] * (i+1))\n    return result\n    \n    \ndef derivative(xs: list):\n    \"\"\" xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i*(i-1) for i in range(1, len(xs))]\n\n\ndef taylor_approximation(xs: list, x0: int, n: int):\n    \"\"\"xs repr\u00e4sentieren die Koeffizienten eines Polynoms,\n    x0 repr\u00e4sentiert die Stelle, bei der polynomieller\n    Approximation an dieser Stelle berechnet werden soll.\n    Gib die Polynomkoeffizienten als Liste von Floats zur\u00fcck.\n    n repr\u00e4sentiert die Ordnung der Polynomapproximation.\n    \n    >>> taylor_approximation([1, 3, 2], -1, 2)\n    [1, -1.5, 0.3333333333333333]\n    >>> taylor_approximation([1, 3, 2], -1, 3)\n    [1, 0, 1, 0.5]\n    >>> taylor_approximation([1, 3, 2], 0, 2)\n    [1, 0, 1]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        result.append(xs[0] + xs[i] * (x0 - i))\n    return result\n\n    \ndef taylor_approximation(xs: list, x0: int, n: int):\n    \"\"\"xs repr\u00e4sentieren die Koeffizienten eines Polynoms,\n    x0 repr\u00e4sentiert die Stelle, bei der polynomieller\n    Approximation an dieser Stelle berechnet werden soll.\n    Gib die Polynomkoeffizienten als Liste von Floats zur\u00fcck.\n    n repr\u00e4sentiert die Ordnung der Polynomapproximation.\n    \n    >>> taylor_approximation([1, 3, 2], -1, 2)\n    [1, -1.5, 0.3333333333333333]\n    >>> taylor_approximation([1, 3, 2], -1, 3)\n    [1, 0, 1, 0.5]\n    >>> taylor_approximation([1, 3, 2], 0, 2)\n    [1, 0, 1]\n    \"\"\"\n    return [xs[0] + (x - x0)*(xs[1]*((x-x0)/xs[1]) if xs[1] != 0 else 0) for x in range(x0-n, x0+n+1)]\n\n    \ndef taylor_approximation(xs: list, x0: int, n: int):\n    \"\"\"xs repr\u00e4sentieren die Koeffizienten eines Polynoms,\n    x0 repr\u00e4sentiert die Stelle, bei der polynomieller\n    Approximation an dieser Stelle berechnet werden soll.\n    Gib die Polynomkoeffizienten als Liste von Floats zur\u00fcck.\n    n repr\u00e4sentiert die Ordnung der Polynomapproximation.\n    \n    >>> taylor_approximation([1, 3, 2], -1, 2)\n    [1, -1.5, 0.3333333333333333]\n    >>> taylor_approximation([1, 3, 2], -1, 3)\n    [1, 0, 1, 0.5]\n    >>> taylor_approximation([1, 3, 2], 0, 2)\n    [1, 0, 1]\n    \"\"\"\n    return [xs[0] + (x-x0)*(xs[i+1]*(x-x0)/xs[i] if xs[i] != 0 else 0) for i in range(1, n+1)]\n\n\ndef taylor_approximation(xs: list, x0: int, n: int):\n    \"\"\"xs repr\u00e4sentieren die Koeffizienten eines Polynoms,\n    x0 repr\u00e4sentiert die Stelle, bei der polynomieller\n    Approximation an dieser Stelle berechnet werden soll.\n    Gib die Polynomkoeffizienten als Liste von Floats zur\u00fcck.\n    n repr\u00e4sentiert die Ordnung der Polynomapproximation.\n    \n    >>> taylor_approximation([1, 3, 2], -1, 2)\n    [1, -1.5, 0.3333333333333333]\n    >>> taylor_approximation([1, 3, 2], -1, 3)\n    [1, 0, 1, 0.5]\n    >>> taylor_approximation([1, 3, 2], 0, 2)\n    [1, 0, 1]\n    \"\"\"\n    return [xs[0] + (x - x0) * sum(xs[i+1"}
{"task_id": "python/26", "language": "python", "completion": "...\n\ndef fib(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge von Zahlen, die in der Mathematik als\n    Fibonacci-Zahlenfolge bezeichnet wird, bei der jedes weitere Element der Folge gleich der Summe\n    der beiden vorhergehenden Elemente ist:\n    \n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(3) == 2\n    fib(4) == 3\n    fib(5) == 5\n    fib(6) == 8\n    fib(7) == 13\n    fib(8) == 21\n    fib(9) == 34\n    fib(10) == 55\n    fib(11) == 89\n    fib(12) == 144\n    fib(13) == 233\n    fib(14) == 377\n    fib(15) == 610\n    fib(16) == 987\n    fib(17) == 1597\n    fib(18) == 2584\n    fib(19) == 4181\n    fib(20) == 6765\n    \n    Bitte schreiben Sie eine Funktion, die die n-te Fibonacci-Zahl berechnet.\n    \n    >>> fib(0)\n    0\n    >>> fib(5)\n    5\n    >>> fib(12)\n    144\n    \"\"\"\n    ...\n\ndef fib_recursive(n: int, a: int = 0, b: int = 1):\n    \"\"\"Die FibRecursive-Funktion berechnet die n-te Fibonacci-Zahl iterativ rekursiv.\n    \n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(20)\n    6765\n    \"\"\"\n    ...\n\ndef fib_recursive_memo(n: int, a: int = 0, b: int = 1, m: dict[int, int] = {}):\n    \"\"\"Die FibRecursiveMemo-Funktion berechnet die n-te Fibonacci-Zahl rekursiv mit Memoization,\n    also Memoization-Caching.\n    \n    >>> fib_recursive_memo(1)\n    1\n    >>> fib_recursive_memo(10)\n    55\n    >>> fib_recursive_memo(20)\n    6765\n    \"\"\"\n    ...\n\ndef fib_recursive_memo_opt(n: int, a: int = 0, b: int = 1, m: dict[int, int] = {}):\n    \"\"\"Die FibRecursiveMemoOpt-Funktion berechnet die n-te Fibonacci-Zahl rekursiv mit Memoization,\n    Memoization-Caching und Memoization-Optimization.\n    \n    >>> fib_recursive_memo_opt(1)\n    1\n    >>> fib_recursive_memo_opt(10)\n    55\n    >>> fib_recursive_memo_opt(20)\n    6765\n    \"\"\"\n    ...\n\ndef fib_dynamic(n: int):\n    \"\"\"Die FibDynamic-Funktion berechnet die n-te Fibonacci-Zahl iterativ.\n    \n    >>> fib_dynamic(1)\n    1\n    >>> fib_dynamic(10)\n    55\n    >>> fib_dynamic(20)\n    6765\n    \"\"\"\n    ...\n\ndef fib_dynamic_opt(n: int):\n    \"\"\"Die FibDynamicOpt-Funktion berechnet die n-te Fibonacci-Zahl iterativ mit Memoization und Memoization-Optimization.\n    \n    >>> fib_dynamic_opt(1)\n    1\n    >>> fib_dynamic_opt(10)\n    55\n    >>> fib_dynamic_opt(20)\n    6765\n    \"\"\"\n    ...\n\ndef fib_dynamic_memo(n: int, a: int = 0, b: int = 1, m: dict[int, int] = {}):\n    \"\"\"Die FibDynamicMemo-Funktion berechnet die n-te Fibonacci-Zahl iterativ mit Memoization und Memoization-Caching.\n    \n    >>> fib_dynamic_memo(1)\n    1\n    >>> fib_dynamic_memo(10)\n    55\n    >>> fib_dynamic_memo(20)\n    6765\n    \"\"\"\n    ...\n\ndef fib_dynamic_memo_opt(n:"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib(n)\n\ndef fib(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib(1)\n    0\n    >>> fib(5)\n    5\n    \"\"\"\n    \n    def fib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    return fib(n)\n\ndef fib2(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib2(1)\n    0\n    >>> fib2(5)\n    5\n    \"\"\"\n    \n    def fib(n: int) -> int:\n        if n < 2:\n            return n\n        else:\n            return fib(n-1) + fib(n-2)\n    return fib(n)\n\ndef fib_iter(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib_iter(1)\n    0\n    >>> fib_iter(5)\n    5\n    \"\"\"\n    \n    def fib_iter(n: int) -> int:\n        fib = [0, 1]\n        for i in range(n):\n            fib.append(fib[i] + fib[i-1])\n        return fib[-1]\n    return fib_iter(n)\n\ndef fib_rekursiv(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib_rekursiv(1)\n    0\n    >>> fib_rekursiv(5)\n    5\n    \"\"\"\n    \n    def fib_rekursiv(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib_rekursiv(n-1) + fib_rekursiv(n-2)\n    return fib_rekursiv(n)\n\ndef fib_iter2(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib_iter2(1)\n    0\n    >>> fib_iter2(5)\n    5\n    \"\"\"\n    \n    def fib_iter2(n: int) -> int:\n        if n < 2:\n            return n\n        else:\n            a, b = 0, 1\n            for i in range(n):\n                a, b = b, a + b\n            return a\n    return fib_iter2(n)\n\n\ndef fib_memo(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib_memo(1)\n    0\n    >>> fib_memo(5)\n    5\n    \"\"\"\n    \n    def fib_memo(n: int) -> int:\n        if n < 2:\n            return n\n        else:\n            if n in memo:\n                return memo[n]\n            else:\n                memo[n] = fib_memo(n-1) + fib_memo(n-2)\n                return memo[n]\n    return fib_memo(n)\n\ndef fib_memo2(n: int):\n    \"\"\"Die Fibonacci-Folge ist eine Folge der Fibonacci-Zahlen, die wie folgt definiert ist:\n    fib(0) == 0\n    fib(1) == 1\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fibonacci-Folge effizient zu berechnen.\n    \n    >>> fib_memo2(1)\n    0\n    >>> fib_memo2(5)\n    5\n    \"\"\"\n    \n    def fib_memo2(n:"}
{"task_id": "python/27", "language": "python", "completion": "return vowels.count(s)\n\ndef vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    return sum(s.count(vowel) for vowel in vowels if vowel in s)\n\ndef vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    return \"\".join(s.count(vowel) for vowel in vowels if vowel in s)\n\ndef vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    return sum(vowel in s for vowel in vowels)\n\ndef vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    return sum(s.count(vowel) for vowel in vowels if vowel in s)\n\ndef vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebne"}
{"task_id": "python/27", "language": "python", "completion": "vowel_counter = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_counter += 1\n    return vowel_counter"}
{"task_id": "python/28", "language": "python", "completion": "# Your code here\n    \n    if lst == []:\n        return -1\n    \n    else:\n        new_list = []\n        \n        for item in lst:\n            if item > 0:\n                if item not in new_list:\n                    new_list.append(item)\n                    \n        if len(new_list) == 0:\n            return -1\n        \n        else:\n            highest_value = max(new_list)\n            highest_value_frequency = max(new_list.count(highest_value), 1)\n            highest_value_frequency_index = new_list.index(highest_value)\n            \n            return(highest_value, highest_value_frequency, highest_value_frequency_index)\n\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1"}
{"task_id": "python/28", "language": "python", "completion": "for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            lst[i] = lst[i] + lst[i-1]\n    \n    \n    highest_value = lst[0]\n    max_frequency = 0\n    \n    for i in range(1, len(lst)):\n        if lst[i] > highest_value and lst[i] > lst[i-1]:\n            highest_value = lst[i]\n            max_frequency = lst[i]\n            \n    return highest_value, max_frequency\n    \n\ndef search(lst):\n    '''\n    Sie erhalten eine nicht-leere Liste von positiven Ganzzahlen. Geben Sie die gr\u00f6\u00dfte Ganzzahl zur\u00fcck, die gr\u00f6\u00dfer als Null ist und eine H\u00e4ufigkeit hat, die gr\u00f6\u00dfer oder gleich dem Wert der Ganzzahl selbst ist. Die H\u00e4ufigkeit einer Ganzzahl ist die Anzahl der Male, die sie in der Liste vorkommt. Wenn kein solcher Wert existiert, geben Sie -1 zur\u00fcck. Beispiele:\n    \n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    max_value = -1\n    max_frequency = 0\n    \n    for i in range(len(lst)):\n        if lst[i] > lst[i-1]:\n            count = 1\n            for j in range(i+1, len(lst)):\n                if lst[i] == lst[j]:\n                    count += 1\n            if count > max_frequency:\n                max_frequency = count\n                max_value = lst[i]\n                \n    if max_value != -1:\n        return max_value, max_frequency\n    else:\n        return -1\n    \n\ndef search(lst):\n    '''\n    Sie erhalten eine nicht-leere Liste von positiven Ganzzahlen. Geben Sie die gr\u00f6\u00dfte Ganzzahl zur\u00fcck, die gr\u00f6\u00dfer als Null ist und eine H\u00e4ufigkeit hat, die gr\u00f6\u00dfer oder gleich dem Wert der Ganzzahl selbst ist. Die H\u00e4ufigkeit einer Ganzzahl ist die Anzahl der Male, die sie in der Liste vorkommt. Wenn kein solcher Wert existiert, geben Sie -1 zur\u00fcck. Beispiele:\n    \n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    lst_unique = []\n    lst_frequency = []\n    \n    for i in lst:\n        if i not in lst_unique:\n            lst_unique.append(i)\n            lst_frequency.append(1)\n        else:\n            index = lst_unique.index(i)\n            lst_frequency[index] += 1\n            \n    max_value = -1\n    max_frequency = 0\n    \n    for i in range(len(lst_unique)):\n        if lst_unique[i] > lst_unique[i-1]:\n            if lst_frequency[i] > max_frequency:\n                max_frequency = lst_frequency[i]\n                max_value = lst_unique[i]\n            \n    if max_value != -1:\n        return max_value, max_frequency\n    else:\n        return -1\n    \n    \ndef search(lst):\n    '''\n    Sie erhalten eine nicht-leere Liste von positiven Ganzzahlen. Geben Sie die gr\u00f6\u00dfte Ganzzahl zur\u00fcck, die gr\u00f6\u00dfer als Null ist und eine H\u00e4ufigkeit hat, die gr\u00f6\u00dfer oder gleich dem Wert der Ganzzahl selbst ist. Die H\u00e4ufigkeit einer Ganzzahl ist die Anzahl der Male, die sie in der Liste vorkommt. Wenn kein solcher Wert existiert, geben Sie -1 zur\u00fcck. Examp"}
{"task_id": "python/29", "language": "python", "completion": "area = 0\n    if a > (b + c) or b > (a + c) or c > (a + b):\n        return -1\n    elif a == b and b == c:\n        area = a * b / 2\n    elif a == c and c == b:\n        area = a * c / 2\n    elif b == c and c == a:\n        area = a * c / 2\n    else:\n        area = a * b / 2\n    return round(area, 2)\n  \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\n\ndef triangle_area_perimeter(a, b, c):\n    '''\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n    \n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    area = 0\n    perimeter = 0\n    if a > (b + c) or b > (a + c) or c > (a + b):\n        return -1\n    elif a == b and b == c:\n        area = a * b / 2\n    elif a == c and c == b:\n        area = a * c / 2\n    elif b == c and c == a:\n        area = a * c / 2\n    else:\n        area = a * b / 2\n        perimeter = a + b + c\n    return round(area, 2), perimeter\n\n\ndef triangle_area_perimeter(a, b, c):\n    '''\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n    \n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    area = 0\n    perimeter = 0\n    if a > (b + c) or b > (a + c) or c > (a + b):\n        return -1\n    elif a == b and b == c:\n        area = a * b / 2\n    elif a == c and c == b:\n        area = a * c / 2\n    elif b == c and c == a:\n        area = a * c / 2\n    else:\n        area = a * b / 2\n        perimeter = a + b + c\n    return round(area, 2), perimeter\n\ndef triangle_area_perimeter(a, b, c):\n    '''\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n    \n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    area = 0\n    perimeter = 0\n    if a > (b + c) or b > (a + c) or c > (a + b):\n        return -1\n    elif a == b and b == c:\n        area = a * b / 2\n    elif a == c and c == b:\n        area = a * c / 2\n    elif b == c and c == a:\n        area = a * c / 2\n    else:\n        area = a * b / 2\n        perimeter = a + b + c\n    return round(area, 2), perimeter\n\ndef triangle_area_perimeter(a, b, c):\n    '''\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n    \n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    area = 0\n    perimeter = 0\n    if a > (b + c) or b > (a + c) or c > (a + b):\n        return -1\n    elif a == b and b == c:\n        area = a * b / 2\n    elif a == c and c == b:\n        area"}
{"task_id": "python/29", "language": "python", "completion": "# TODO: Schreiben Sie Ihren Code hier\n    if a+b>c and a+c>b and b+c>a:\n        # calcul"}
{"task_id": "python/30", "language": "python", "completion": "sum_list = sum(q)\n    if (sum_list < w) and (len(q)%2 != 0):\n        return True\n    else:\n        return False\n        \nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))"}
{"task_id": "python/30", "language": "python", "completion": "if sum(q) <= w:\n        return True\n    else:\n        return False\n\ndef will_it_fly(q, w):\n    '''\n    Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n\n        Beispiel:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n\n        will_it_fly([3, 2, 3], 1) \u279e False\n    # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n\n        will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n\n        will_it_fly([3], 5) \u279e True\n    # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n    \n    '''\n    return sum(q) <= w\n    \n\n\ndef will_it_fly(q, w):\n    '''\n    Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n\n        Beispiel:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n\n        will_it_fly([3, 2, 3], 1) \u279e False\n    # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n\n        will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n\n        will_it_fly([3], 5) \u279e True\n    # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n    \n    '''\n    return sum(q) <= w\n\ndef will_it_fly(q, w):\n    '''\n    Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n\n        Beispiel:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n\n        will_it_fly([3, 2, 3], 1) \u279e False\n    # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n\n        will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n\n        will_it_fly([3], 5) \u279e True\n    # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n    \n    '''\n    return sum(q) <= w\n\ndef will_it_fly(q, w):\n    '''\n    Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n\n        Beispiel:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n\n        will_it_fly([3, 2, 3], 1) \u279e False\n    # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n\n        will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n\n        will_it_fly([3], 5) \u279e True\n    # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n    \n    '''\n    return sum(q) <= w\n\ndef will_it_fly(q, w):\n    '''\n    Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximalen"}
{"task_id": "python/31", "language": "python", "completion": "for i in range(3, a):\n        if a % i == 0:\n            return False\n    return True\n  \n  \ndef is_multiply_prime_recursive(a, i = 3):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100 and a > 1:\n        if a % i == 0:\n            return False\n        if i > a // 2:\n            return True\n        return is_multiply_prime_recursive(a, i+2)\n    else:\n        return False\n    \n    \ndef is_multiply_prime_recursive_v2(a, i = 3):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100 and a > 1:\n        if a % i == 0:\n            return False\n        if i > a // 2:\n            return True\n        return is_multiply_prime_recursive(a, i+2)\n    else:\n        return False\n    \n    \ndef is_multiply_prime_recursive_v3(a, i = 3, b = 1):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100 and a > 1:\n        if a % i == 0:\n            return False\n        if i > a // 2:\n            return True\n        return is_multiply_prime_recursive(a, i+2, b+i)\n    else:\n        return False\n  \n  \ndef is_multiply_prime_recursive_v4(a, i = 3, b = 1):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100 and a > 1:\n        if a % i == 0:\n            return False\n        if i > a // 2:\n            return True\n        return is_multiply_prime_recursive(a, i+2, b+i)\n    else:\n        return False\n    \n    \ndef is_multiply_prime_recursive_v5(a, i = 3, b = 1, c = 0):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100 and a > 1:\n        if a % i == 0:\n            return False\n        if i > a // 2:\n            return True\n        return is_multiply_prime_recursive(a, i+2, b+i, c+b+i)\n    else:\n        return False\n    \n    \ndef is_multiply_prime_recursive_v6(a, i = 3, b = 1, c = 0, d = 0):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100 and a > 1:\n        if a % i == 0:\n            return False\n        if i > a // 2:\n            return True\n        return is_multiply_prime_recursive(a, i+2, b+i, c+b+i, d+b+i+2)\n    else:\n        return False\n    \n    \ndef is_multiply_prime_recursive_v7(a, i = 3, b = 1, c = 0, d = 0, e = 0):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst."}
{"task_id": "python/31", "language": "python", "completion": "primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\n\ndef is_multiply_prime_v2(a):\n    \"\"\"Schreiben Sie eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    \"\"\"\n    primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\ndef is_multiply_prime_v3(a):\n    \"\"\"Schreiben Sie noch eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    is_multiply_prime_v3(30) == True\n    \"\"\"\n    primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\n\ndef is_multiply_prime_v4(a):\n    \"\"\"Schreiben Sie noch eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    is_multiply_prime_v3(30) == True\n    is_multiply_prime_v4(30) == True\n    \"\"\"\n    primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\n\ndef is_multiply_prime_v5(a):\n    \"\"\"Schreiben Sie noch eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    is_multiply_prime_v3(30) == True\n    is_multiply_prime_v4(30) == True\n    is_multiply_prime_v5(30) == True\n    \"\"\"\n    primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\ndef is_multiply_prime_v6(a):\n    \"\"\"Schreiben Sie noch eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    is_multiply_prime_v3(30) == True\n    is_multiply_prime_v4(30) == True\n    is_multiply_prime_v5(30) == True\n    is_multiply_prime_v6(30) == True\n    \"\"\"\n    primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\ndef is_multiply_prime_v7(a):\n    \"\"\"Schreiben Sie noch eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    is_multiply_prime_v3(30) == True\n    is_multiply_prime_v4(30) == True\n    is_multiply_prime_v5(30) == True\n    is_multiply_prime_v6(30) == True\n    is_multiply_prime_v7(30) == True\n    \"\"\"\n    primzahlen = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for primzahl in primzahlen:\n        if a % primzahl == 0:\n            if primzahl > 100:\n                return False\n    return True\n\ndef is_multiply_prime_v8(a):\n    \"\"\"Schreiben Sie noch eine weitere Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst.\n    \n    is_multiply_prime(30) == True\n    is_multiply_prime_v2(30) == True\n    is_multiply_prime_v3(30) == True\n    is_multiply_prime_v4(30) == True\n    is_multiply_prime_v5(30) == True\n    is_multiply_prime_v6(30) == True\n    is_multiply_prime_v7(30) == True\n    is_multiply_prime_v8(30) == True\n    \"\"\"\n    primzahlen"}
{"task_id": "python/32", "language": "python", "completion": "binaerzahl = []\n\n    # 2-er-Potenzen\n    potenz = 1\n    while potenz * 2 < decimal:\n        potenz *= 2\n\n    # Berechnung der Bin\u00e4rzahl\n    while potenz > 0:\n        if decimal >= potenz:\n            binaerzahl.append(\"1\")\n            decimal -= potenz\n        else:\n            binaerzahl.append(\"0\")\n        potenz //= 2\n\n    # Formatierung der Bin\u00e4rzahl\n    binaerzahl = ''.join(binaerzahl)\n    binaerzahl = 'db' + binaerzahl + 'db'\n\n    return binaerzahl\n    \ndef decimal_to_binary_recursive(decimal):\n    \"\"\"Sie erhalten eine Zahl in Dezimalform und Ihre Aufgabe besteht darin, sie in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if decimal == 0:\n        return \"db0db\"\n    else:\n        binaerzahl = decimal_to_binary_recursive(decimal // 2)\n        binaerzahl = str(decimal % 2) + binaerzahl\n        return binaerzahl\n    \n    binaerzahl = binaerzahl.replace('0', 'x').replace('1', '0').replace('x', '1').replace('db', '')\n\n    binaerzahl = binaerzahl.replace('db', '')\n\n    return binaerzahl\n\ndef decimal_to_binary_recursive(decimal):\n    binaerzahl = ''\n    while decimal > 0:\n        binaerzahl = str(decimal % 2) + binaerzahl\n        decimal //= 2\n    binaerzahl = binaerzahl.replace('0', 'x').replace('1', '0').replace('x', '1').replace('db', '')\n    binaerzahl = binaerzahl.replace('db', '')\n    return binaerzahl\n\ndef decimal_to_binary_recursive(decimal):\n    binaerzahl = ''\n    while decimal > 0:\n        binaerzahl = str(decimal % 2) + binaerzahl\n        decimal //= 2\n    binaerzahl = binaerzahl.replace('0', 'x').replace('1', '0').replace('x', '1').replace('db', '')\n    binaerzahl = binaerzahl.replace('db', '')\n    return binaerzahl\n\ndef decimal_to_binary_recursive(decimal):\n    binaerzahl = ''\n    while decimal > 0:\n        binaerzahl = str(decimal % 2) + binaerzahl\n        decimal //= 2\n    binaerzahl = binaerzahl.replace('0', 'x').replace('1', '0').replace('x', '1').replace('db', '')\n    binaerzahl = binaerzahl.replace('db', '')\n    return binaerzahl\n\ndef decimal_to_binary_recursive(decimal):\n    binaerzahl = ''\n    while decimal > 0:\n        binaerzahl = str(decimal % 2) + binaerzahl\n        decimal //= 2\n    binaerzahl = binaerzahl.replace('0', 'x').replace('1', '0').replace('x'"}
{"task_id": "python/32", "language": "python", "completion": "return \"db\" + str(bin(decimal)[2:]) + \"db\"\n\n\ndef binary_to_decimal(binary):\n    \"\"\"Sie erhalten einen String in Bin\u00e4rform und Ihre Aufgabe besteht darin, es in Dezimalsystem zu umwandeln. Die Funktion sollte die Dezimalsumme zur\u00fcckgeben.\n\n    Beispiel:\n    \n    binary_to_decimal(\"db1111db\")  # returns 15\n    binary_to_decimal(\"db100000db\")  # returns 32\n    \"\"\"\n    decimal = int(binary, 2)\n    return decimal\n\n\ndef hex_to_binary(hex):\n    \"\"\"Sie erhalten einen String in Hexadezimalform und Ihre Aufgabe besteht darin, es in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    hex_to_binary(\"A\")   # returns \"db1010db\"\n    hex_to_binary(\"1A2B3C\")   # returns \"db1101db1110db1111db\"\n    \"\"\"\n    binary = \"\"\n    for c in hex:\n        binary += bin(int(c, 16))[2:].zfill(4)\n    return \"db\" + binary + \"db\"\n\n\ndef binary_to_hex(binary):\n    \"\"\"Sie erhalten einen String in Bin\u00e4rform und Ihre Aufgabe besteht darin, es in Hexadezimalsystem umzuwandeln. Die Funktion sollte ein Zeichen wie \"A\" oder \"1A\" zur\u00fcckgeben.\n\n    Beispiele:\n    \n    binary_to_hex(\"db101db\")  # returns \"5\"\n    binary_to_hex(\"db1101db1110db1111db\")  # returns \"1A2B3C\"\n    \"\"\"\n    decimal = int(binary, 2)\n    return hex(decimal)[2:].zfill(2)\n\n\ndef octal_to_decimal(oct):\n    \"\"\"Sie erhalten einen String in Oktalform und Ihre Aufgabe besteht darin, es in das Dezimalsystem umzuwandeln. Die Funktion sollte die Dezimalsumme zur\u00fcckgeben.\n\n    Beispiel:\n    \n    octal_to_decimal(\"10\")  # returns 8\n    octal_to_decimal(\"123\")  # returns 83\n    \"\"\"\n    decimal = int(oct, 8)\n    return decimal\n\n\ndef decimal_to_octal(decimal):\n    \"\"\"Sie erhalten eine Zahl in Dezimalsystem und Ihre Aufgabe besteht darin, sie in das Oktalformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Oktalzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'oc' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    decimal_to_octal(15)   # returns \"oc177oc\"\n    decimal_to_octal(32)   # returns \"oc1000oc\"\n    \"\"\"\n    return \"oc\" + str(oct(decimal)[2:]) + \"oc\"\n\n\ndef octal_to_binary(oct):\n    \"\"\"Sie erhalten einen String in Oktalform und Ihre Aufgabe besteht darin, es in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    octal_to_binary(\"10\")   # returns \"db10db\"\n    octal_to_binary(\"123\")   # returns \"db1101db1110db\"\n    \"\"\"\n    binary = \"\"\n    for c in oct:\n        binary += bin(int(c, 8))[2:].zfill(3)\n    return \"db\" + binary + \"db\"\n\n\ndef binary_to_octal(binary):\n    \"\"\"Sie erhalten einen String in Bin\u00e4rform und Ihre Aufgabe besteht darin, es in das Oktalformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Oktalzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'oc' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    binary_to_octal(\"db110db1110db\")  # returns \"103\"\n    binary_to_octal(\"db1101db1110db1111db\")  # returns \"123\"\n    \"\"\"\n    decimal"}
{"task_id": "python/33", "language": "python", "completion": "# TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\ndef is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der StringsetPosztn erLargura de 3 e cu.\n\"\"\"\n    # TODO\n\n    return None\n\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_ha"}
{"task_id": "python/33", "language": "python", "completion": "# Write your code here...\n    \n    \n    \n    # Hint: Use list(s) to create a list of characters in a string.\n    list_of_chars = list(s)\n    \n    # Hint: Use list comprehension to create a list of groups of three characters in a list of characters.\n    list_of_groups_of_three = [list_of_chars[i:i+3] for i in range(len(list_of_chars)-2)]\n    \n    # Hint: Use set to create a set of unique characters in a list of groups of three.\n    set_of_unique_groups_of_three = set(list_of_groups_of_three)\n    \n    # Hint: Use len to get the length of a set.\n    length_of_set_of_unique_groups_of_three = len(set_of_unique_groups_of_three)\n    \n    # Hint: Use len to get the length of a list.\n    length_of_list_of_groups_of_three = len(list_of_groups_of_three)\n    \n    # Hint: If the length of a set is one less than the length of a list, then the string is unhappy.\n    if length_of_set_of_unique_groups_of_three == length_of_list_of_groups_of_three - 1:\n        return False\n    \n    # Hint: If the length of a set is one less than the length of a list, then the string is happy.\n    if length_of_set_of_unique_groups_of_three == length_of_list_of_groups_of_three:\n        return True\n    \n    # Hint: Return True if the string is happy, False if it is unhappy.\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "if grades[1] == 4.0:\n        return \"A+\"\n    elif grades[1] > 3.7:\n        return \"A\"\n    elif grades[1] > 3.3:\n        return \"A-\"\n    elif grades[1] > 3.0:\n        return \"B+\"\n    elif grades[1] > 2.7:\n        return \"B\"\n    elif grades[1] > 2.3:\n        return \"B-\"\n    elif grades[1] > 2.0:\n        return \"C+\"\n    elif grades[1] > 1.7:\n        return \"C\"\n    elif grades[1] > 1.3:\n        return \"C-\"\n    elif grades[1] > 1.0:\n        return \"D+\"\n    elif grades[1] > 0.7:\n        return \"D\"\n    elif grades[1] > 0.0:\n        return \"D-\"\n    else:\n        return \"E\"\n    \n    \n\n#grades = [4.0, 3, 1.7, 2, 3.5]\ngrades = [4.0, 4.0, 4.0, 4.0, 4.0]\nnumerical_letter_grade(grades)\n\n\ndef grade_equation(grades):\n    \"\"\"Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Buchstabennoten gem\u00e4\u00df der folgenden Tabelle ausgeben kann:\n\n                 GPA       |    Buchstaben Note\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n        Beispiel:\n    \n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if grades[1] == 4.0:\n        return \"A+\"\n    elif grades[1] > 3.7:\n        return \"A\"\n    elif grades[1] > 3.3:\n        return \"A-\"\n    elif grades[1] > 3.0:\n        return \"B+\"\n    elif grades[1] > 2.7:\n        return \"B\"\n    elif grades[1] > 2.3:\n        return \"B-\"\n    elif grades[1] > 2.0:\n        return \"C+\"\n    elif grades[1] > 1.7:\n        return \"C\"\n    elif grades[1] > 1.3:\n        return \"C-\"\n    elif grades[1] > 1.0:\n        return \"D+\"\n    elif grades[1] > 0.7:\n        return \"D\"\n    elif grades[1] > 0.0:\n        return \"D-\"\n    else:\n        return \"E\"\n    \n    \n    \ndef grade_equation(grades):\n    \"\"\"Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Bu"}
{"task_id": "python/35", "language": "python", "completion": "import math\n    def isPrime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(math.sqrt(num) + 1)):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if the string length is a prime number\n    return isPrime(len(string))\n\ndef prime_length(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n    Beispiele\n    \n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    import math\n    def isPrime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(math.sqrt(num) + 1)):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if the string length is a prime number\n    return isPrime(len(string))\n\ndef prime_length(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n    Beispiele\n    \n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    import math\n    def isPrime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(math.sqrt(num) + 1)):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if the string length is a prime number\n    return isPrime(len(string))\n\ndef prime_length(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n    Beispiele\n    \n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    import math\n    def isPrime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(math.sqrt(num) + 1)):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if the string length is a prime number\n    return isPrime(len(string))\n\ndef prime_length(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L"}
{"task_id": "python/35", "language": "python", "completion": "pass\n\n\ndef palindrome(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn er ein Palindrom ist, andernfalls False.\n    Beispiele\n\n    palindrome('civic') == True\n    palindrome('rotor') == True\n    palindrome('abcdcba') == True\n    palindrome('orange') == False\n    palindrome('kittens') == False\n    palindrome('1234321') == True\n    \"\"\"\n    pass\n\n\ndef longest_palindrome(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und den l\u00e4ngsten Palindrom zur\u00fcckgibt.\n    Beispiele\n\n    longest_palindrome('civic') == 'civic'\n    longest_palindrome('rotor') == 'rotor'\n    longest_palindrome('abcdcba') == 'abcdcba'\n    longest_palindrome('orange') == 'orange'\n    longest_palindrome('kittens') == 'kittens'\n    longest_palindrome('1234321') == '1234321'\n    longest_palindrome('123456789') == '123456789'\n    longest_palindrome('rotor_rotor') == 'rotor_rotor'\n    longest_palindrome('rotor_rotor_rotor') == 'rotor_rotor_rotor'\n    \"\"\"\n    pass\n\n\ndef prime_length_longest_palindrome(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings einen Primzahl ist und der l\u00e4ngste Palindrom dieses String ist.\n    Beispiele\n\n    prime_length_longest_palindrome('civic') == True\n    prime_length_longest_palindrome('rotor') == True\n    prime_length_longest_palindrome('abcdcba') == True\n    prime_length_longest_palindrome('orange') == False\n    prime_length_longest_palindrome('kittens') == False\n    prime_length_longest_palindrome('1234321') == True\n    prime_length_longest_palindrome('123456789') == False\n    prime_length_longest_palindrome('rotor_rotor') == True\n    prime_length_longest_palindrome('rotor_rotor_rotor') == True\n    \"\"\"\n    pass\n\n\ndef prime_length_longest_palindrome_with_index(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und die Position des l\u00e4ngsten Palindrom mit der L\u00e4nge zur\u00fcckgibt.\n    Beispiele\n\n    prime_length_longest_palindrome_with_index('civic') == (0, 'civic')\n    prime_length_longest_palindrome_with_index('rotor')"}
{"task_id": "python/36", "language": "python", "completion": "if N == 0:\n        return 0\n    else:\n        return N%2 + 10 * solve(int(N/2))\n    \n\n\ndef test_solve(N):\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    \n    bin_repr = bin(N)[2:]\n    summe_ziffern = int(bin_repr, 2)\n    print(summe_ziffern)\n    assert summe_ziffern == solve(N), f\"Falsch, die Summe der Ziffern von {N} ist {summe_ziffern} , aber die Funktion hat {solve(N)} zur\u00fcckgegeben\"\n    \n\ndef test_solve():\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    test_solve(1000)\n    test_solve(150)\n    test_solve(147)\n    test_solve(32)\n    test_solve(1)\n    test_solve(0)\n    print(\"Test OK\")\n\ntest_solve()\ntest_solve(1000)\ntest_solve(150)\ntest_solve(147)\ntest_solve(32)\ntest_solve(1)\ntest_solve(0)\nprint(\"Test OK\")\n\ndef test_solve(N):\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    \n    bin_repr = bin(N)[2:]\n    summe_ziffern = int(bin_repr, 2)\n    assert summe_ziffern == solve(N), f\"Falsch, die Summe der Ziffern von {N} ist {summe_ziffern} , aber die Funktion hat {solve(N)} zur\u00fcckgegeben\"\n    print(\"Test OK\")\n    \ndef test_solve():\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    test_solve(1000)\n    test_solve(150)\n    test_solve(147)\n    test_solve(32)\n    test_solve(1)\n    test_solve(0)\n    print(\"Test OK\")\n\ntest_solve()\ntest_solve(1000)\ntest_solve(150)\ntest_solve(147)\ntest_solve(32)\ntest_solve(1)\ntest_solve(0)\nprint(\"Test OK\")\n\ndef test_solve(N):\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    \n    bin_repr = bin(N)[2:]\n    summe_ziffern = int(bin_repr, 2)\n    assert summe_ziffern == solve(N), f\"Falsch, die Summe der Ziffern von {N} ist {summe_ziffern} , aber die Funktion hat {solve(N)} zur\u00fcckgegeben\"\n    print(\"Test OK\")\n    \ndef test_solve():\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    test_solve(1000)\n    test_solve(150)\n    test_solve(147)\n    test_solve(32)\n    test_solve(1)\n    test_solve(0)\n    print(\"Test OK\")\n\ntest_solve()\ntest_solve(1000)\ntest_solve(150)\ntest_solve(147)\ntest_solve(32)\ntest_solve(1)\ntest_solve(0)\nprint(\"Test OK\")\n\ndef test_solve(N):\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    \n    bin_repr = bin(N)[2:]\n    summe_ziffern = int(bin_repr, 2)\n    assert summe_ziffern == solve(N), f\"Falsch, die Summe der Ziffern von {N} ist {summe_ziffern} , aber die Funktion hat {solve(N)} zur\u00fcckgegeben\"\n    print(\"Test OK\")\n    \ndef test_solve():\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwarteten Wert \u00fcbereinstimmt.\n    Die Funktion \u00fcberpr\u00fcft die Bin\u00e4rzahl von N mit solve(N) und \u00fcberpr\u00fcft, ob die Summe der Ziffern mit der erwarteten Summe \u00fcbereinstimmt.\n\n    Variablen:\n        @N Ganzzahl\n            Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    \n    \"\"\"\n    test_solve(1000)\n    test_solve(150)\n    test_solve(147)\n    test_solve(32)\n    test_solve(1)\n    test_solve(0)\n    print(\"Test OK\")\n\ntest_solve()\ntest_solve(1000)\ntest_solve(150)\ntest_solve(147)\ntest_solve(32)\ntest_solve(1)\ntest_solve(0)\nprint(\"Test OK\")\n\ndef test_solve(N):\n    \"\"\"\n    Die Funktion solve_test \u00fcberpr\u00fcft, ob die berechnete Summe der Ziffern mit dem erwartete"}
{"task_id": "python/36", "language": "python", "completion": "# Variablen\n    x = 0\n    sum = 0\n    while x < N:\n        sum += x\n        x *= 2\n    return sum\n\n\ndef main():\n    \"\"\"Diese Funktion dient als Startpunkt f\u00fcr die Anwendung.\n        Die Funktion ruft die Funktion solve mit einer Zahl auf.\n        Die Zahl wird von der Konsole eingegeben, und wird anschlie\u00dfend mit der Funktion solve ausgelagert.\n    \"\"\"\n    N = int(input(\"Gib eine Zahl ein: \"))\n    print(solve(N))\n\n\nif __name__ == \"__main__\":\n    main()\n\n \ndef solve(N):\n    \"\"\"Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n\n        Beispiel\n        F\u00fcr N = 1000 ist die Summe der Ziffern 1, die Ausgabe sollte \"1\" sein.\n        F\u00fcr N = 150 ist die Summe der Ziffern 6, die Ausgabe sollte \"110\" sein.\n        F\u00fcr N = 147 ist die Summe der Ziffern 12, die Ausgabe sollte \"1100\" sein.\n    \n    Variablen:\n        @N Ganzzahl\n             Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    Ausgabe:\n         eine Zeichenkette mit der bin\u00e4ren Zahl.\n    \n    \"\"\"\n    # Variablen\n    x = 0\n    sum = 0\n    while x < N:\n        sum += x\n        x *= 2\n    return sum\n\n\ndef main():\n    \"\"\"Diese Funktion dient als Startpunkt f\u00fcr die Anwendung.\n        Die Funktion ruft die Funktion solve mit einer Zahl auf.\n        Die Zahl wird von der Konsole eingegeben, und wird anschlie\u00dfend mit der Funktion solve ausgelagert.\n    \"\"\"\n    N = int(input(\"Gib eine Zahl ein: \"))\n    print(solve(N))\n\n\nif __name__ == \"__main__\":\n    main()\n\n \ndef solve(N):\n    \"\"\"Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n\n        Beispiel\n        F\u00fcr N = 1000 ist die Summe der Ziffern 1, die Ausgabe sollte \"1\" sein.\n        F\u00fcr N = 150 ist die Summe der Ziffern 6, die Ausgabe sollte \"110\" sein.\n        F\u00fcr N = 147 ist die Summe der Ziffern 12, die Ausgabe sollte \"1100\" sein.\n    \n    Variablen:\n        @N Ganzzahl\n             Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    Ausgabe:\n         eine Zeichenkette mit der bin\u00e4ren Zahl.\n    \n    \"\"\"\n    # Variablen\n    x = 0\n    sum = 0\n    while x < N:\n        sum += x\n        x *= 2\n    return sum\n\n\ndef main():\n    \"\"\"Diese Funktion dient als Startpunkt f\u00fcr die Anwendung.\n        Die Funktion ruft die Funktion solve mit einer Zahl auf.\n        Die Zahl wird von der Konsole eingegeben, und wird anschlie\u00dfend mit der Funktion solve ausgelagert.\n    \"\"\"\n    N = int(input(\"Gib eine Zahl ein: \"))\n    print(solve(N))\n\n\nif __name__ == \"__main__\":\n    main()\n\n \ndef solve(N):\n    \"\"\"Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n\n        Beispiel\n        F\u00fcr N = 1000 ist die Summe der Ziffern 1, die Ausgabe sollte \"1\" sein.\n        F\u00fcr N = 150 ist die Summe der Ziffern 6, die Ausgabe sollte \"110\" sein.\n        F\u00fcr N = 147 ist die Summe der Ziffern 12, die Ausgabe sollte \"1100\" sein.\n    \n    Variablen:\n        @N Ganzzahl\n             Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n    Ausgabe:\n         eine Zeichenkette mit der bin\u00e4ren Zahl.\n    \n    \"\"\"\n    # Variablen\n    x = 0\n    sum = 0\n    while x < N:\n        sum"}
{"task_id": "python/37", "language": "python", "completion": "lst_2d = lst\n    lst_2d_2 = []\n    lst_2d_3 = []\n    lst_2d_4 = []\n    lst_2d_5 = []\n    lst_2d_6 = []\n    for lst in lst_2d:\n        for i in lst:\n            lst_2d_2.append(i)\n    for lst in lst_2d_2:\n        if lst == x:\n            lst_2d_3.append(lst_2d_2.index(lst))\n    lst_2d_3.sort()\n    for lst in lst_2d_3:\n        lst_2d_4.append(lst_2d_2[lst])\n    lst_2d_4.sort()\n    for lst in lst_2d_4:\n        if lst == x:\n            lst_2d_5.append((lst, lst_2d_3.index(lst)))\n    lst_2d_5.sort()\n    for lst in lst_2d_5:\n        lst_2d_6.append(lst[1])\n    lst_2d_6.sort(reverse=True)\n    for lst in lst_2d_6:\n        lst_2d_5.sort(key=lambda lst: lst[1] == lst)\n    return lst_2d_5\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))\ndef get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n\n    Beispiele:\n    \n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    lst_2d = lst\n    lst_2d_2 = []\n    lst_2d_3 = []\n    lst_2d_4 = []\n    lst_2d_5 = []\n    lst_2d_6 = []\n    for lst in lst_2d:\n        for i in lst:\n            lst_2d_2.append(i)\n    for lst in lst_2d_2:\n        if lst == x:\n            lst_2d_3.append(lst_2d_2.index(lst))\n    lst_2d_3.sort()\n    for lst in lst_2d_3:\n        lst_2d_4.append(lst_2d_2[lst])\n    lst_2d_4.sort()\n    for lst in lst_2d_4:\n        if lst == x:\n            lst_2d_5.append((lst, lst_2d_3.index(lst)))\n    lst_2d_5.sort()\n    for lst in lst_2d_5:\n        lst_2d_6.append(lst[1])\n    lst_2d_6.sort(reverse=True)\n    for lst in lst_2d_6:\n        lst_2d_5.sort(key=lambda lst: lst[1] == lst)\n    return lst_2d_5\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))\ndef get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n\n    Beispiele:\n    \n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    lst_2d = lst\n    lst_2d_2 = []\n    lst_2d_3 = []\n    lst_2d_4 = []\n    lst_2d_5 = []\n    lst_2d_6 = []\n    for lst in lst_2d:\n        for i in lst:\n            lst_2d_2.append(i)\n    for lst in lst_2d_2:\n        if lst == x:\n            lst_2d_3.append(lst_2d_2.index(lst))\n    lst_2d_3.sort()\n    for lst in lst_2d_3:\n        lst_2d_4.append(lst_2d_2[lst])\n    lst_2d_4.sort()\n    for lst in lst_2d_4:\n        if lst == x:\n            lst_2d_5.append((lst, lst_2d_3.index(lst)))\n    lst_2d_5.sort()\n    for lst in lst_2d_5:\n        lst_2d_6.append(lst[1])\n    lst_2d_6.sort(reverse=True)\n    for lst in lst_2d_6:\n        lst_2d_5.sort(key=lambda lst: lst[1] == lst)\n    return lst_2d_5\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))\ndef get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im d"}
{"task_id": "python/37", "language": "python", "completion": "res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return res\ndef test_get_row():\n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    res = [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row(lst, 1) == res\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ntest_get_row()\ndef get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n\n    Beispiele:\n    \n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return res\ndef test_get_row():\n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    res = [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row(lst, 1) == res\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ntest_get_row()\ndef get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n\n    Beispiele:\n    \n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return res\ndef test_get_row():\n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    res = [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row(lst, 1) == res\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ntest_get_row()\ndef get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) sta"}
{"task_id": "python/38", "language": "python", "completion": "if not lst:\n        return None\n    return lst[lst.index(min(lst))+1]\n    \ndef next_smallest_int(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_int([1, 2, 3, 4, 5]) == 2\n    next_smallest_int([5, 1, 4, 3, 2]) == 2\n    next_smallest_int([]) == None\n    next_smallest_int([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    return min(lst[lst.index(min(lst))+1], lst[lst.index(min(lst))])\n    \ndef next_smallest_str(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_str(['a', 'z', 'y', 'x', 'w']) == 'y'\n    next_smallest_str(['z', 'y', 'x', 'w', 'a']) == 'y'\n    next_smallest_str([]) == None\n    next_smallest_str(['a', 'a']) == None\n    \"\"\"\n    if not lst:\n        return None\n    return lst[lst.index(min(lst))+1]\n\ndef next_smallest_str(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_str(['a', 'z', 'y', 'x', 'w']) == 'y'\n    next_smallest_str(['z', 'y', 'x', 'w', 'a']) == 'y'\n    next_smallest_str([]) == None\n    next_smallest_str(['a', 'a']) == None\n    \"\"\"\n    if not lst:\n        return None\n    return lst[lst.index(min(lst))+1]\n    \ndef next_smallest_str(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_str(['a', 'z', 'y', 'x', 'w']) == 'y'\n    next_smallest_str(['z', 'y', 'x', 'w', 'a']) == 'y'\n    next_smallest_str([]) == None\n    next_smallest_str(['a', 'a']) == None\n    \"\"\"\n    if not lst:\n        return None\n    return lst[lst.index(min(lst))+1]\n    \ndef next_smallest_str(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_str(['a', 'z', 'y', 'x', 'w']) == 'y'\n    next_smallest_str(['z', 'y', 'x', 'w', 'a']) == 'y'\n    next_smallest_str([]) == None\n    next_smallest_str(['a', 'a']) == None\n    \"\"\"\n    if not lst:\n        return None\n    return lst[lst.index(min(lst))+1]\n    \ndef next_smallest_str(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_str(['a', 'z', 'y', 'x', 'w']) == 'y'\n    next_smallest_str(['z', 'y', 'x', 'w', 'a']) == 'y'\n    next_smallest_str([]) == None\n    next_smallest_str(['a', 'a']) == None\n    \"\"\"\n    if not lst:\n        return None\n    return lst[lst.index(min(lst))+1]\n    \ndef next_smallest_str(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest_str(['a', 'z', 'y', 'x', 'w']) == 'y'\n    next_smallest_str(['z', 'y', 'x', 'w', 'a']) == 'y'\n    next_smallest_str([]) == None\n    next_smallest_str(['a', 'a']) == N"}
{"task_id": "python/38", "language": "python", "completion": "smallest = None\n    smallest_two = None\n    for el in lst:\n        if smallest is None or el < smallest:\n            smallest = el\n        if smallest_two is None or smallest_two > el and el < smallest:\n            smallest_two = el\n    return smallest_two\n    \n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED.\\n\"\n \ndef next_smallest(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    smallest_two = None\n    for el in lst:\n        if smallest is None or el < smallest:\n            smallest = el\n        if smallest_two is None or smallest_two > el and el < smallest:\n            smallest_two = el\n    return smallest_two\n    \n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED.\\n\"\n        \ndef next_smallest(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    smallest_two = None\n    for el in lst:\n        if smallest is None or el < smallest:\n            smallest = el\n        if smallest_two is None or smallest_two > el and el < smallest:\n            smallest_two = el\n    return smallest_two\n    \n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED.\\n\"\n        \ndef next_smallest(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    smallest_two = None\n    for el in lst:\n        if smallest is None or el < smallest:\n            smallest = el\n        if smallest_two is None or smallest_two > el and el < s"}
{"task_id": "python/39", "language": "python", "completion": "count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"?\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"!\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    return count\n    \n    \n    \ndef is_bored2(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Lange complemented zu z\u00e4hlen. Eine complemented ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored2(\"Hello world\")\n    0\n    >>> is_bored2(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"?\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"!\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    return count-1\n\ndef is_bored3(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der complemented mit Leerzeichen zu z\u00e4hlen. Eine complemented ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored3(\"Hello world\")\n    0\n    >>> is_bored3(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"?\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"!\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    return count-2\n\ndef is_bored4(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der complemented mit Leerzeichen und Leerzeichen am Anfang zu z\u00e4hlen. Eine complemented ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored4(\"Hello world\")\n    0\n    >>> is_bored4(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"?\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"!\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    return count-3\n\ndef is_bored5(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der complemented mit Leerzeichen, Leerzeichen am Anfang und Leerzeichen am Ende zu z\u00e4hlen. Eine complemented ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored5(\"Hello world\")\n    0\n    >>> is_bored5(\"The sky is blue. The sun is shining. I love this weather\")\n    3\n    \"\"\"\n    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"?\"):\n        if i.startswith(\"Ich\"):\n            count += 1\n    for i in S.split(\"!\"):\n        if i.startswith(\"Ich\"):\n            count"}
{"task_id": "python/39", "language": "python", "completion": "words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"I\") and word.endswith(\".\"):\n            count += 1\n    return count\n    \ndef is_bored(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Lange crawls zu z\u00e4hlen. Eine lange crawl ist ein Satz, der mit dem Wort \"ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"Ich hab ich bedacht\")\n    1\n    >>> is_bored(\"Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht.\")\n    6\n    \"\"\"\n    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"Ich\") and word.endswith(\".\"):\n            count += 1\n    return count\n\ndef is_bored(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Lange crawls zu z\u00e4hlen. Eine lange crawl ist ein Satz, der mit dem Wort \"ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"Ich hab ich bedacht\")\n    1\n    >>> is_bored(\"Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht.\")\n    6\n    \"\"\"\n    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"Ich\") and word.endswith(\".\"):\n            count += 1\n    return count\n\ndef is_bored(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Lange crawls zu z\u00e4hlen. Eine lange crawl ist ein Satz, der mit dem Wort \"ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"Ich hab ich bedacht\")\n    1\n    >>> is_bored(\"Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht.\")\n    6\n    \"\"\"\n    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"Ich\") and word.endswith(\".\"):\n            count += 1\n    return count\n\ndef is_bored(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Lange crawls zu z\u00e4hlen. Eine lange crawl ist ein Satz, der mit dem Wort \"ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"Ich hab ich bedacht\")\n    1\n    >>> is_bored(\"Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht. Ich hab ich bedacht.\")\n    6\n    \"\"\"\n    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"Ich\") and word.endswith(\".\"):\n            count"}
{"task_id": "python/40", "language": "python", "completion": "for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\nlst = [0,8,1,2,1,7]\nlst=lst[1::]\nlst\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\nlst = [0,8,1,2,1,7]\nlst=lst[1::]\nlst\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\nlst = [0,8,1,2,1,7]\nlst=lst[1::]\nlst\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\nlst = [0,8,1,2,1,7]\nlst=lst[1::]\nlst\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in lst:\n        if i==0:\n            lst.remove(i)\n    lst=lst[1::]\n    max_prim=0\n    sum_prim=0\n    \n    while lst:\n        prim=1\n        for num in lst:\n            if num==0:\n                break\n            if num%lst[0]==0:\n                prim=prim*num\n            else:\n                prim=prim\n        lst=lst[1::]\n        if prim>max_prim:\n            max_prim=prim\n        else:\n            max_prim=max_prim\n        \n    \n    for i in str(max_prim):\n        sum_prim=sum_prim+int(i)\n    \n    return sum_prim\n\nlst=[0,8,1,2,1,7]\nskjkasdkd(lst)\n# %%\ndef skjkasdkd(lst):\n    \"\"\"Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    for i in"}
{"task_id": "python/41", "language": "python", "completion": "if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i) != str:\n            return False\n        if type(dict[i]) != str:\n            return False\n        if dict[i].isupper():\n            return False\n        if dict[i].islower():\n            return False\n    return True\n\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n    \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i) != str:\n            return False\n        if type(dict[i]) != str:\n            return False\n        if i.isupper():\n            return False\n        if i.islower():\n            return False\n    return True\n\n\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n    \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i) != str:\n            return False\n        if type(dict[i]) != str:\n            return False\n        if i.isupper():\n            return False\n        if i.islower():\n            return False\n    return True\n\ndef test_check_dict_case_3():\n    print(check_dict_case_3({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n    print(check_dict_case_3({}))\n\ndef main():\n    print(check_dict_case_3({}))\n    print(check_dict_case_3({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\nif __name__ == '__main__':\n    main()\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n    \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\""}
{"task_id": "python/41", "language": "python", "completion": "if len(dict) == 0:\n        return True\n    for k, v in dict.items():\n        if type(v) == str and k.isupper():\n            return False\n        elif type(v) == str and k.islower():\n            return False\n    return True\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n    \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    for k, v in dict.items():\n        if type(v) == str and k.isupper():\n            return False\n        elif type(v) == str and k.islower():\n            return False\n    return True\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n    \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    for k, v in dict.items():\n        if type(v) == str and k.isupper():\n            return False\n        elif type(v) == str and k.islower():\n            return False\n    return True\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n    \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\""}
{"task_id": "python/42", "language": "python", "completion": "# TODO: YOUR CODE HERE\n    return value\n\n\ndef test_closest_integer():\n    print(closest_integer(\"10\") == 10)\n    print(closest_integer(\"15.3\") == 15)\n    print(closest_integer(\"-14.5\") == -15)\n    print(closest_integer(\"-15.3\") == -15)\n\n\nif __name__ == '__main__':\n    test_closest_integer()\n#-----------------------------------------------------------------\ndef closest_integer(value):\n    '''\n    Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n\n        Beispiele\n    \n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: YOUR CODE HERE\n    return value\n\ndef test_closest_integer():\n    print(closest_integer(\"10\") == 10)\n    print(closest_integer(\"15.3\") == 15)\n    print(closest_integer(\"-14.5\") == -15)\n    print(closest_integer(\"-15.3\") == -15)\n\n\nif __name__ == '__main__':\n    test_closest_integer()\n#-----------------------------------------------------------------\ndef closest_integer(value):\n    '''\n    Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n\n        Beispiele\n    \n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: YOUR CODE HERE\n    return value\n\n\ndef test_closest_integer():\n    print(closest_integer(\"10\") == 10)\n    print(closest_integer(\"15.3\")"}
{"task_id": "python/42", "language": "python", "completion": "return int(value) if int(value) == float(value) else int(value) + int(value[-1]) - int(value)\n\n\ndef test_closest_integer():\n    assert closest_integer(\"10\") == 10\n    assert closest_integer(\"15.3\") == 15\n    assert closest_integer(\"-15.3\") == -15\n    assert closest_integer(\"10.1\") == 10\n    assert closest_integer(\"-10.1\") == -10\n    assert closest_integer(\"10.5\") == 11\n    assert closest_integer(\"-10.5\") == -11\n    assert closest_integer(\"10.01\") == 10\n    assert closest_integer(\"-10.01\") == -10\n    assert closest_integer(\"10.001\") == 11\n    assert closest_integer(\"-10.001\") == -11\n    assert closest_integer(\"10.0001\") == 11\n    assert closest_integer(\"-10.0001\") == -11\n    assert closest_integer(\"10.00001\") == 11\n    assert closest_integer(\"-10.00001\") == -11\n    assert closest_integer(\"10.000001\") == 11\n    assert closest_integer(\"-10.000001\") == -11\n    assert closest_integer(\"10.0000001\") == 11\n    assert closest_integer(\"-10.0000001\") == -11\n    assert closest_integer(\"10.00000001\") == 11\n    assert closest_integer(\"-10.00000001\") == -11\n    assert closest_integer(\"10.000000001\") == 11\n    assert closest_integer(\"-10.000000001\") == -11\n    assert closest_integer(\"10.0000000001\") == 11\n    assert closest_integer(\"-10.0000000001\") == -11\n    assert closest_integer(\"10.00000000001\") == 11\n    assert closest_integer(\"-10.00000000001\") == -11\n    assert closest_integer(\"10.000000000001\") == 11\n    assert closest_integer(\"-10.000000000001\") == -11\n    assert closest_integer(\"10.0000000000001\") == 11\n    assert closest_integer(\"-10.0000000000001\") == -11\n    assert closest_integer(\"10.00000000000001\") == 11\n    assert closest_integer(\"-10.00000000000001\") == -11\n    assert closest_integer(\"10.000000000000001\") == 11\n    assert closest_integer(\"-10.000000000000001\") == -11\n    assert closest_integer(\"10.0000000000000001\") == 11\n    assert closest_integer(\"-10.0000000000000001\") == -11\n    assert closest_integer(\"10.00000000000000001\") == 11\n    assert closest_integer(\"-10.00000000000000001\") == -11\n    assert closest_integer(\"10.000000000000000001\") == 11\n    assert closest_integer(\"-10.000000000000000001\") == -11\n    assert closest_integer(\"10.0000000000000000001\") == 11\n    assert closest_integer(\"-10.0000000000000000001\") == -11\n    assert closest_integer(\"10.00000000000000000001\") == 11\n    assert closest_integer(\"-10.00000000000000000001\") == -11\n    assert closest_integer(\"10.000000000000000000001\") == 11\n    assert closest_integer(\"-10.000000000000000000001\") == -11\n    assert closest_integer(\"10.0000000000000000000001\") == 11\n    assert closest_integer(\"-10.0000000000000000000001\") == -11\n    assert closest_integer(\"10.00000000000000000000001\") == 11\n    assert closest_integer(\"-10.00000000000000000000001\")"}
{"task_id": "python/43", "language": "python", "completion": "return [2*i+1 for i in range(n)]\n\ndef make_a_pile(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n    Die erste Ebene hat n Steine.\n    Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n    Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n    i die Anzahl der Steine in der Ebene (i+1) darstellt.\n\n        Beispiele:\n    \n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [2*i+1 for i in range(n)]\n\n\ndef make_a_pile(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n    Die erste Ebene hat n Steine.\n    Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n    Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n    i die Anzahl der Steine in der Ebene (i+1) darstellt.\n\n        Beispiele:\n    \n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [2*i+1 for i in range(n)]\n\n\ndef make_a_pile(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n    Die erste Ebene hat n Steine.\n    Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n    Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n    i die Anzahl der Steine in der Ebene (i+1) darstellt.\n\n        Beispiele:\n    \n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [2*i+1 for i in range(n)]\n\n\ndef make_a_pile(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n    Die erste Ebene hat n Steine.\n    Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n    Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n    i die Anzahl der Steine in der Ebene (i+1) darstellt.\n\n        Beispiele:\n    \n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [2*i+1 for i in range(n)]\n\ndef make_a_pile(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n    Die erste Ebene hat n Steine.\n    Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        - die n\u00e4chste gerade Zahl, wenn n"}
{"task_id": "python/44", "language": "python", "completion": "return s.split()\n    \n\ndef reverse_string(s):\n    \"\"\"\n    Sie erhalten einen String, der in beliebiger Reihenfolge steht, und Ihre Aufgabe ist es, den String in umgekehrter Reihenfolge zur\u00fcckzugeben.\n\n    Zum Beispiel:\n    \n    reverse_string(\"Hello\") == \"olleH\"\n    reverse_string(\"Howdy\") == \"ydwoH\"\n    reverse_string(\"Greetings!\") == \"!sgniteerG\"\n    \"\"\"\n    return s[::-1]\n    \ndef nth_char(s, n):\n    \"\"\"\n    Sie erhalten einen String und einen Ganzzahl, der im Bereich von 1 bis zur L\u00e4nge des Strings liegt. Sie m\u00fcssen den Zeichen, der an der angegebenen Position in dem String steht zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    nth_char(\"abcdef\", 3) == \"c\"\n    nth_char(\"abcdef\", 2) == \"b\"\n    nth_char(\"abcdef\", 1) == \"a\"\n    nth_char(\"abcdef\", 0) == \"a\"\n    nth_char(\"abcdef\", 7) == \"a\"\n    nth_char(\"abcdef\", 8) == \" \"\n    \"\"\"\n    return s[n-1]\n    \ndef nth_last_char(s, n):\n    \"\"\"\n    Sie erhalten einen String und eine Ganzzahl, die im Bereich von 1 bis zur L\u00e4nge des Strings liegt. Sie m\u00fcssen den Zeichen, der an der angegebenen Position vom Ende des Strings steht zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    nth_last_char(\"abcdef\", 1) == \"f\"\n    nth_last_char(\"abcdef\", 2) == \"e\"\n    nth_last_char(\"abcdef\", 3) == \"d\"\n    nth_last_char(\"abcdef\", 4) == \"c\"\n    nth_last_char(\"abcdef\", 5) == \"b\"\n    nth_last_char(\"abcdef\", 6) == \"a\"\n    nth_last_char(\"abcdef\", 7) == \" \"\n    nth_last_char(\"abcdef\", 8) == \" \"\n    \"\"\"\n    return s[-n]\n    \ndef nth_char_from_end(s, n):\n    \"\"\"\n    Sie erhalten einen String und eine Ganzzahl, die im Bereich von 1 bis zur L\u00e4nge des Strings liegt. Sie m\u00fcssen den Zeichen, der an der angegebenen Position vom Ende des Strings steht zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    nth_char_from_end(\"abcdef\", 1) == \"f\"\n    nth_char_from_end(\"abcdef\", 2) == \"e\"\n    nth_char_from_end(\"abcdef\", 3) == \"d\"\n    nth_char_from_end(\"abcdef\", 4) == \"c\"\n    nth_char_from_end(\"abcdef\", 5) == \"b\"\n    nth_char_from_end(\"abcdef\", 6) == \"a\"\n    nth_char_from_end(\"abcdef\", 7) == \" \"\n    nth_char_from_end(\"abcdef\", 8) == \" \"\n    \"\"\"\n    return s[-n]\n    \ndef nth_word(s, n):\n    \"\"\"\n    Sie erhalten einen String und eine Ganzzahl, die im Bereich von 1 bis zur L\u00e4nge des Strings liegt. Sie m\u00fcssen das Wort, das an der angegebenen Position steht zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    nth_word(\"Hey now, is it Tuesday yet?\", 4) == \"is\"\n    nth_word(\"Hey now, is it Tuesday yet?\", 5) == \"now\"\n    nth_word(\"Hey now, is it Tuesday yet?\", 10) == \" \"\n    nth_word(\"Hey now, is it Tuesday yet?\", 11) == \" \"\n    nth_word(\"Hey now, is it Tuesday yet?\", 1) == \"Hey\"\n    nth_word(\"Hey now, is it Tuesday yet?\", 2) == \"now\"\n    nth_word(\"Hey now, is it Tuesday yet?\", 3) == \"is\"\n    nth_word(\"Hey now, is it Tuesday yet?\", 8) == \"Tuesday\"\n    nth_word(\"Hey now, is it Tuesday yet?\", 9) == \"yet?\"\n    \"\"\"\n    return s.split()[n-1]\n    \ndef nth_char_in_word(s, n):\n    \"\"\"\n    Sie erhalten einen String und eine Ganzzahl, die im Bereich von 1 bis zur L\u00e4nge des Strings liegt. Sie m\u00fcssen den Zeichen, der an der angegebenen Position im Wort steht zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    nth_char_in_word(\"abcdef\", 1) == \"a\"\n    nth_char_in_word(\"abcdef\", 2) == \"b\"\n    nth_char_in_word(\"abcdef\", 3) == \"c\"\n    nth_char_in_word(\"abcdef\", 4) == \"d\"\n    nth_char_in_word(\"abcdef\", 5) == \"e\"\n    nth_char_in_word(\"abcdef\", 6) == \"f\"\n    nth_char_in_word(\"abcdef\", 7) == \" \"\n    nth_char_in_word(\"abcdef\", 8) == \" \"\n    nth_char_in_word(\"abcdef\", 9) =="}
{"task_id": "python/44", "language": "python", "completion": "# Write your code here\n    return s.split()\n    \n    \n    \ndef test_words_string():\n    \"\"\"\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"  \") == []\n    assert words_string(\"  12, 34, 56, 78, 90  \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"  12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"  12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    assert words_string(\"12, 34, 56, 78, 90,   \") == [\"12\", \"34\", \"56\", \"78\", \"90\"]\n    \n    print('All tests passed')\n\nif __name__ == '__main__':\n    test_words_string()\n    \n    \n    def sort_by_length(words):\n    \"\"\"\n    Sie erhalten eine Liste von W\u00f6rtern. Ihre Aufgabe ist, die W\u00f6rter mit der meisten Buchstaben in alphabetischer Reihenfolge zur\u00fcckzugeben.\n\n    Zum Beispiel:\n\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\"]) == [\"Longer\", \"Longer\", \"Longest\"]\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\"]\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\"]\n    \"\"\"\n    # Write your code here\n    return sorted(words, key=len)\n    \n    \n    \n    def test_sort_by_length():\n    \"\"\"\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\"]) == [\"Longer\", \"Longer\", \"Longest\"]\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\"]\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\"]\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\"]\n    sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\", \"Shortest\"]\n    \"\"\"\n    assert sort_by_length([\"Longer\", \"Longer\", \"Longest\"]) == [\"Longer\", \"Longer\", \"Longest\"]\n    assert sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\"]\n    assert sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\"]\n    assert sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\"]\n    assert sort_by_length([\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\", \"Shortest\"]) == [\"Longer\", \"Longer\", \"Longest\", \"Shortest\", \"Shortest\", \"Shortest\", \"Shortest\"]\n    print('All tests passed')\n\nif __name__"}
{"task_id": "python/45", "language": "python", "completion": "#Hier kommt dein Code hin!\n    if y % 2 == 1 or x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            if i % y == 0:\n                return i\n        return -1\n    \nprint(choose_num(12, 15))\nprint(choose_num(13, 12))\nprint(choose_num(1, 1000))\nprint(choose_num(10, 1000))\nprint(choose_num(100, 1000))\nprint(choose_num(1, 10000))\nprint(choose_num(1, 100000))\nprint(choose_num(1, 1000000))\nprint(choose_num(1, 10000000))\nprint(choose_num(1, 100000000))\nprint(choose_num(1, 1000000000))\nprint(choose_num(1, 10000000000))\nprint(choose_num(1, 100000000000))\nprint(choose_num(1, 1000000000000))\nprint(choose_num(1, 10000000000000))\nprint(choose_num(1, 100000000000000))\nprint(choose_num(1, 1000000000000000))\nprint(choose_num(1, 10000000000000000))\nprint(choose_num(1, 100000000000000000))\nprint(choose_num(1, 1000000000000000000))\nprint(choose_num(1, 10000000000000000000))\nprint(choose_num(1, 100000000000000000000))\nprint(choose_num(1, 1000000000000000000000))\nprint(choose_num(1, 10000000000000000000000))\nprint(choose_num(1, 100000000000000000000000))\nprint(choose_num(1, 1000000000000000000000000))\nprint(choose_num(1, 10000000000000000000000000))\nprint(choose_num(1, 100000000000000000000000000))\nprint(choose_num(1, 1000000000000000000000000000))\nprint(choose_num(1, 10000000000000000000000000000))\nprint(choose_num(1, 100000000000000000000000000000))\nprint(choose_num(1, 1000000000000000000000000000000))\nprint(choose_num(1, 10000000000000000000000000000000))\nprint(choose_num(1, 10000000000000000000000000000000"}
{"task_id": "python/46", "language": "python", "completion": "if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg\n\nprint(rounded_avg(1, 5))  # Output: -1\nprint(rounded_avg(7, 5))  # Output: \"0b11\"\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\"\n\n\ndef avg_bin(n, m):\n    \"\"\"Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n    \n    avg_bin(1, 5) => \"0b11\"\n    avg_bin(7, 5) => -1\n    avg_bin(10, 20) => \"0b1111\"\n    avg_bin(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg\n\nprint(avg_bin(1, 5))  # Output: -1\nprint(avg_bin(7, 5))  # Output: \"0b11\"\nprint(avg_bin(10, 20))  # Output: \"0b1111\"\nprint(avg_bin(20, 33))  # Output: \"0b11010\"\n\n\ndef avg_bin(n, m):\n    \"\"\"Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n    \n    avg_bin(1, 5) => \"0b11\"\n    avg_bin(7, 5) => -1\n    avg_bin(10, 20) => \"0b1111\"\n    avg_bin(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg\n\nprint(avg_bin(1, 5))  # Output: -1\nprint(avg_bin(7, 5))  # Output: \"0b11\"\nprint(avg_bin(10, 20))  # Output: \"0b1111\"\nprint(avg_bin(20, 33))  # Output: \"0b11010\"\n\n\n\ndef avg_bin(n, m):\n    \"\"\"Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n    \n    avg_bin(1, 5) => \"0b11\"\n    avg_bin(7, 5) => -1\n    avg_bin(10, 20) => \"0b1111\"\n    avg_bin(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg\n\nprint(avg_bin(1, 5))  # Output: -1\nprint(avg_bin(7, 5))  # Output: \"0b11\"\nprint(avg_bin(10, 20))  # Output: \"0b1111\"\nprint(avg_bin(20, 33))  # Output: \"0b11010\"\n\n\ndef avg_bin(n, m):\n    \"\"\"Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n    \n    avg_bin(1, 5) => \"0b11\"\n    avg_bin(7, 5) => -1\n    avg_bin(10, 20) => \"0b1111\"\n    avg_bin(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg"}
{"task_id": "python/46", "language": "python", "completion": "if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n        \n    avg = sum / (m - n + 1)\n    \n    return bin(int(avg))[2:]\n    \nprint(rounded_avg(1, 5))  \nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20)) \nprint(rounded_avg(20, 33)) \n\n\ndef sum_of_odds(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller ungeraden Ganzzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_odds(1) => 1\n    sum_of_odds(5) => 10\n    sum_of_odds(7) => 16\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n    \nprint(sum_of_odds(1))  \nprint(sum_of_odds(5)) \nprint(sum_of_odds(7)) \n\n\ndef sum_of_squares(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller Quadratzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_squares(1) => 1\n    sum_of_squares(5) => 55\n    sum_of_squares(7) => 94\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n    \nprint(sum_of_squares(1))  \nprint(sum_of_squares(5)) \nprint(sum_of_squares(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n    \nprint(sum_of_cubes(1)) \nprint(sum_of_cubes(5)) \nprint(sum_of_cubes(7)) \n\n\ndef sum_of_cubes(n):\n    \"\"\"Sie erhalten eine positive Ganzzahl n und wollen die Summe aller W\u00fcrfelzahlen von 1 bis n (einschlie\u00dflich) zur\u00fcckgeben.\n    \n    sum_of_cubes(1) => 1\n    sum_of_cubes(5) => 225\n    sum_of_cubes(7) => 343\n    \"\"\"\n    \n    sum = 0\n    for i in"}
{"task_id": "python/47", "language": "python", "completion": "for i in range(1, n+1):\n        if i%2 == 0:\n            result = 1\n            for j in range(1, i+1):\n                result *= j\n            return [result]\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return [result]\n    \ndef test_f():\n    assert f(1) == [1]\n    assert f(3) == [1, 2, 6]\n    assert f(5) == [1, 2, 6, 24, 15]\n    \ntest_f()\n\n\ndef g(n):\n    \"\"\" Implementieren Sie die Funktion g, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Produkt von i bis n ist, wenn i gerade ist, oder die Summe der Zahlen von i bis n, wenn i ungerade ist. i beginnt bei i und endet bei n. Die Produktinvers von i ist die Summe der Zahlen von n bis i (n + ... + i). Beispiel:\n    \n    g(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return [result]\n    \ndef test_g():\n    assert g(1) == [1]\n    assert g(3) == [1, 2, 6]\n    assert g(5) == [1, 2, 6, 24, 15]\n    \ntest_g()\n\n\ndef h(n):\n    \"\"\" Implementieren Sie die Funktion h, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Produkt von i bis n ist, wenn i gerade ist, oder die Summe der Zahlen von n bis i, wenn i ungerade ist. i beginnt bei 1 und endet bei n. Die Produktinvers von i ist die Summe der Zahlen von n bis i (n + ... + i). Beispiel:\n    \n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return [result]\n    \ndef test_h():\n    assert h(1) == [1]\n    assert h(3) == [1, 2, 6]\n    assert h(5) == [1, 2, 6, 24, 15]\n    \ntest_h()\n\n\ndef i(n):\n    \"\"\" Implementieren Sie die Funktion i, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Produkt von 1 bis i ist, wenn i gerade ist, oder die Summe der Zahlen von i bis n, wenn i ungerade ist. i beginnt bei 1 und endet bei n. Die Produktinvers von i ist die Summe der Zahlen von n bis i (n + ... + i). Beispiel:\n    \n    i(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return [result]\n    \ndef test_i():\n    assert i(1) == [1]\n    assert i(3) == [1, 2, 6]\n    assert i(5) == [1, 2, 6, 24, 15]\n    \ntest_i()\n\n\ndef j(n):\n    \"\"\" Implementieren Sie die Funktion j, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Produkt von i bis n ist, wenn i ungerade ist, oder die Summe der Zahlen von n bis i, wenn i gerade ist. i beginnt bei 1 und endet bei n. Die Produktinvers von i ist die Summe der Zahl"}
{"task_id": "python/48", "language": "python", "completion": "# Hier wird die Variable count_even und count_odd mit den Werten 0 initialisiert.\n    count_even = 0\n    count_odd = 0\n    \n    # Hier wird eine Schleife erstellt, die durch alle Zahlen von 1 bis n l\u00e4uft.\n    for i in range(1, n+1):\n        # Hier wird \u00fcberpr\u00fcft, ob die Zahl i eine gerade Palindrome ist.\n        if i % 2 == 0:\n            # Hier wird \u00fcberpr\u00fcft, ob die Zahl i eine gerade Palindrome ist.\n            if i == int(str(i)[::-1]):\n                # Hier wird \u00fcberpr\u00fcft, ob die Zahl i eine ungerade Palindrome ist.\n                if i % 2 != 0:\n                    # Hier wird \u00fcberpr\u00fcft, ob die Zahl i eine ungerade Palindrome ist.\n                    if i == int(str(i)[::-1]):\n                        # Wenn die Zahl i eine gerade Palindrome ist, wird die Variable count_even mit der aktuellen Anzahl der gerade Palindrome erh\u00f6ht.\n                        count_even += 1\n                        \n        # Hier wird \u00fcberpr\u00fcft, ob die Zahl i eine ungerade Palindrome ist.\n        if i % 2 != 0:\n            # Wenn die Zahl i eine ungerade Palindrome ist, wird die Variable count_odd mit der aktuellen Anzahl der ungeraden Palindrome erh\u00f6ht.\n            count_odd += 1\n            \n    # Hier wird ein Tupel mit den Werten count_even und count_odd zur\u00fcckgegeben.\n    return (count_even, count_odd)"}
{"task_id": "python/48", "language": "python", "completion": "import math\n    import re\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        str_i = str(i)\n        \n        if i % 2 == 0:\n            even_count += sum(int(digit) for digit in str_i) % 2 == 0\n        else:\n            odd_count += sum(int(digit) for digit in str_i) % 2 == 0\n            \n    return even_count, odd_count\n\ndef max_sum_of_subsets(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, gibt den Maximalen Wert des Teilensemble, das aus der Folge (1, ..., n) besteht.\n    \n        Beispiel 1:\n\n            Eingabe: 3\n        Ausgabe: 6\n        Erkl\u00e4rung: Die Teilensets, die aus der Folge (1, ..., 3) zusammensetzen sind: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}, {}. Das Maximum betr\u00e4gt 6.\n\n        Beispiel 2:\n\n            Eingabe: 10\n        Ausgabe: 14\n        Erkl\u00e4rung: Die Teilensets, die aus der Folge (1, ..., 10) zusammensetzen sind: {}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 10}, {3, 4}, {3, 5}, {3, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 5}, {4, 6}, {4, 7}, {4, 8}, {4, 9}, {4, 10}, {5, 6}, {5, 7}, {5, 8}, {5, 9}, {5, 10}, {6, 7}, {6, 8}, {6, 9}, {6, 10}, {7, 8}, {7, 9}, {7, 10}, {8, 9}, {8, 10}, {9, 10}, {}\n\n    \"\"\"\n    import itertools\n    \n    max_sum = 0\n    \n    for subset in itertools.combinations(range(1, n + 1), n):\n        sum_subset = sum(subset)\n        max_sum = max(max_sum, sum_subset)\n        \n    return max_sum\n\ndef is_valid_number(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, gibt eine boolesche Variable zur\u00fcck, die angibt, ob die Zahl n eine g\u00fcltige Zahl ist.\n\n        Beispiel 1:\n\n            Eingabe: 5\n        Ausgabe: True\n\n        Beispiel 2:\n\n            Eingabe: 10\n        Ausgabe: False\n\n        Hinweis:\n        1. 1 <= n <= 10^10\n        2. Die Zahl n kann auch negative sein, aber das Ergebnis ist immer eine positive ganze Zahl.\n    \n    \"\"\"\n    if n == 0:\n        return True\n    \n    if n % 2 == 1:\n        return False\n    \n    str_n = str(n)\n    \n    if len(str_n) % 2 == 1:\n        return False\n    \n    for i in range(0, len(str_n), 2):\n        if str_n[i] != str_n[i + 1]:\n            return False\n    \n    return True\n\ndef count_divisors(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, gibt eine ganze Zahl zur\u00fcck, die angibt, wie viele Teilensemblen die Zahl n haben.\n\n        Beispiel 1:\n\n            Eingabe: 3\n        Ausgabe: 5\n        Erkl\u00e4rung: Die Teilensets, die aus der Zahl 3 zusammensetzen sind: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}, {}. Die Teilensets, die aus der Zahl 3 zusammensetzen sind: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}, {}.\n\n        Beispiel 2:\n\n            Eingabe: 10\n        Ausgabe: 100\n        Erkl\u00e4rung: Die Teilensets, die aus der Zahl 10 zusammensetzen sind: {}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 10}, {3, 4}, {3, 5}, {3, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 5}, {4, 6}, {4, 7}, {4, 8}, {4, 9}, {4, 10}, {5, 6}, {5, 7}, {5, 8}, {5, 9}, {5, 10}, {6, 7}, {6, 8}, {6, 9}, {6, 10}, {7, 8}, {7, 9}, {7, 10}, {8, 9}, {8, 10}, {9, 10}, {}\n\n        Hinweis:\n        1. 1 <= n <= 10^6\n        2. Die Zahl n kann auch negative sein, aber das Ergebnis ist immer eine positive ganze Zahl.\n    \n    \"\"\"\n    import math\n    \n    divisors = [1]\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n    \n    divisors.sort()\n    return len(divisors)\n\ndef is_valid_string(s):\n    \"\"\"\n    Gegeben eine Zeichenkette s, gibt eine boolesche Variable zur\u00fcck, die angibt, ob die Zeichenkette g\u00fcltig ist.\n\n        Beispiel 1:\n\n            Eingabe: \"abc\"\n        Ausgabe: True\n\n        Beispiel 2:\n\n            Eingabe: \"aabbcc\"\n        Ausgabe: False\n\n        Hinweis:\n        1. Die Zeichenkette enth\u00e4lt nur die Zeichen 'a', 'b' und 'c'.\n        2. Die Zeichenkette kann auch leere Zeichenketten beinhalten, die g\u00fcltig sind.\n    \n    \"\"\"\n    if s == \"\":\n        return False\n    \n    if len(s)"}
{"task_id": "python/49", "language": "python", "completion": "\"\"\"\n    arr = arr[::-1]\n    arr.sort()\n    arr = arr[::-1]\n    return arr\n    \"\"\"\n    \n    if len(arr)==0:\n        return True\n    \n    for i in range(0, len(arr)-1):\n        if arr[i+1] < arr[i]:\n            return False\n    return True\n    \n    \n    \"\"\"\n    if len(arr)==0:\n        return True\n    \n    arr = sorted(arr)\n    \n    return arr==arr[::-1]\n    \n    \"\"\""}
{"task_id": "python/49", "language": "python", "completion": "if not arr:\n        return True\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n    \n    \n    \n    \ndef move_one_ball(arr):\n    \"\"\"Wir haben ein Array 'arr' mit N ganzen Zahlen arr[1], arr[2], ..., arr[N]. Die Zahlen im Array werden zuf\u00e4llig angeordnet sein. Deine Aufgabe besteht darin zu bestimmen, ob es m\u00f6glich ist, ein Array in nicht abnehmender Reihenfolge zu sortieren, indem du die folgende Operation auf das gegebene Array anwendest:\nDu darfst beliebig oft eine Rechtsschiebeoperation durchf\u00fchren.\nEine Rechtsschiebeoperation bedeutet, dass alle Elemente des Arrays um eine Position in Richtung rechts verschoben werden. Das letzte Element des Arrays wird an die Startposition im Array verschoben, d.h. an den Index 0.\n\n    Wenn es m\u00f6glich ist, das sortierte Array durch Ausf\u00fchren der oben genannten Operation zu erhalten, gib True zur\u00fcck, sonst gib False zur\u00fcck.\nWenn das gegebene Array leer ist, gib True zur\u00fcck.\n\n    Hinweis: Die gegebene Liste hatGuaranteed eindeutige Elemente.\n\n    Zum Beispiel:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\nErkl\u00e4rung: Durch Ausf\u00fchren von 2 Rechtsschiebeoperationen kann die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array erreicht werden.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nErkl\u00e4rung: Es ist nicht"}
{"task_id": "python/51", "language": "python", "completion": "\"\"\"\n    Erstliche L\u00f6sung:\n    def check(s,c):\n        s_2 = s.replace(c,\"\")\n        return s_2, s_2 == s_2[::-1]\n    \"\"\"\n    def check(s, c):\n        new_str = \"\"\n        for char in s:\n            if char != c:\n                new_str += char\n        return new_str, new_str == new_str[::-1]\n    return check(s, c)\ndef sum_of_numbers(a,b):\n    \"\"\"Aufgabe\n    Die Methode soll eine Funktion schreiben, die zwei Zahlen addiert und das Ergebnis zur\u00fcckgibt.\n    Die Methode soll eine Fehlermeldung ausgeben, wenn eine der beiden Zahlen keine Zahl ist.\n    \"\"\"\n    try:\n        sum_result = float(a) + float(b)\n        return sum_result\n    except ValueError:\n        print(\"Error: One of the numbers is not a number.\")\ndef list_of_words(string):\n    \"\"\"Aufgabe\n    Die Methode soll eine Zeichenkette lesen und eine Liste zur\u00fcckgeben,\n    die die W\u00f6rter ausgibt.\n    \"\"\"\n    return string.split()\ndef sum_of_elements(liste):\n    \"\"\"Aufgabe\n    Die Methode soll eine Liste von Zahlen lesen und die Summe der Elemente zur\u00fcckgeben.\n    \"\"\"\n    return sum(liste)\ndef multiply(liste):\n    \"\"\"Aufgabe\n    Die Methode soll eine Liste von Zahlen lesen und das Produkt der Elemente zur\u00fcckgeben.\n    \"\"\"\n    product = 1\n    for num in liste:\n        product *= num\n    return product\ndef factorial(number):\n    \"\"\"Aufgabe\n    Die Methode soll eine Zahl lesen und das Fakult\u00e4t der Zahl zur\u00fcckgeben.\n    \"\"\"\n    if number < 0:\n        return \"Error: The number must be a non-negative integer.\"\n    elif number == 0:\n        return 1\n    else:\n        return number * factorial(number - 1)\ndef fibonacci(number):\n    \"\"\"Aufgabe\n    Die Methode soll eine Zahl lesen und das n-te Fibonacci-Element zur\u00fcckgeben.\n    \"\"\"\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return fibonacci(number - 1) + fibonacci(number - 2)\ndef main():\n    \"\"\"\n    Diese Methode stellt alle Funktionen einzeln aufzurufen und \u00fcberpr\u00fcft, ob sie auch funktionieren.\n    \"\"\"\n    # Testfall 1: reverse_delete\n    s1, c1 = \"abcde\", \"ae\"\n    r1, r1_expected = reverse_delete(s1, c1)\n    r1_expected_true = r1_expected == \"bcd\"\n    print(r1, r1_expected_true)  # Ausgabe des Ergebnisses und der erwarteten Ausgabe\n    \n    \n    # Testfall 2: sum_of_numbers\n    a, b = \"1234\", 5\n    sum_result = sum_of_numbers(a, b)\n    print(sum_result)  # Ausgabe des Ergebnisses\n    \n    \n    # Testfall 3: list_of_words\n    string = \"Das ist ein Test\"\n    liste = list_of_words(string)\n    print(liste)  # Ausgabe des Ergebnisses\n    \n    \n    # Testfall 4: sum_of_elements\n    liste = [1, 2, 3, 4, 5]\n    sum_result = sum_of_elements(liste)\n    print(sum_result)  # Ausgabe des Ergebnisses\n    \n    \n    # Testfall 5: multiply\n    liste = [1, 2, 3, 4, 5]\n    product = multiply(liste)\n    print(product)  # Ausgabe des Ergebnisses\n    \n    \n    # Testfall 6: factorial\n    number = 5\n    fact = factorial(number)\n    print(fact)  # Ausgabe des Ergebnisses\n    \n    \n    # Testfall 7: fibonacci\n    number"}
{"task_id": "python/51", "language": "python", "completion": "s = s.lower()\n    c = c.lower()\n    while True:\n        if len(s)==0:\n            break\n        if s[0] == c:\n            s = s[1:]\n            c = ''\n            \n        else:\n            if s[0] not in c:\n                c += s[0]\n                s = s[1:]\n    return (s,s == s[::-1])\n\n# Testf\u00e4lle\n\ns = \"abcde\"\nc = \"ae\"\nresult, check = reverse_delete(s, c)\nassert result == \"bcd\" and check == False, f\"Fehler bei Testfall {s} und {c}.\"\n\ns = \"abcdef\"\nc = \"b\"\nresult, check = reverse_delete(s, c)\nassert result == \"acdef\" and check == False, f\"Fehler bei Testfall {s} und {c}.\"\n\ns = \"abcdedcba\"\nc = \"ab\"\nresult, check = reverse_delete(s, c)\nassert result == \"cdedc\" and check == True, f\"Fehler bei Testfall {s} und {c}.\"\n\ns = \"abb\"\nc = \"ab\"\nresult, check = reverse_delete(s, c)\nassert result == \"bb\" and check == False, f\"Fehler bei Testfall {s} und {c}.\"\n\ns = \"abcde\"\nc = \"abcdef\"\nresult, check = reverse_delete(s, c)\nassert result == \"\" and check == False, f\"Fehler bei Testfall {s} und {c}.\"\n\nprint(\"Alles gut!\")\ndef sum_of_divisors(n):\n    \"\"\"Aufgabe\n    Die Summe der Teiler von n.\n    Beispiel:\n    F\u00fcr n = 12 sollte das Ergebnis 7 sein (1,2,3,4,6,12)\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# Testf\u00e4lle\n\nassert sum_of_divisors(12) == 7, \"Fehler bei Testfall 12.\"\nassert sum_of_divisors(13) == 13, \"Fehler bei Testfall 13.\"\nassert sum_of_divisors(1) == 1, \"Fehler bei Testfall 1.\"\nassert sum_of_divisors(0) == 0, \"Fehler bei Testfall 0.\"\nprint(\"Alles gut!\")\ndef sum_of_divisors(n):\n    \"\"\"Aufgabe\n    Die Summe der Teiler von n.\n    Beispiel:\n    F\u00fcr n = 12 sollte das Ergebnis 7 sein (1,2,3,4,6,12)\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# Testf\u00e4lle\n\nassert sum_of_divisors(12) == 7, \"Fehler bei Testfall 12.\"\nassert sum_of_divisors(13) == 13, \"Fehler bei Testfall 13.\"\nassert sum_of_divisors(1) == 1, \"Fehler bei Testfall 1.\"\nassert sum_of_divisors(0) == 0, \"Fehler bei Testfall 0.\"\nprint(\"Alles gut!\")\ndef sum_of_divisors(n):\n    \"\"\"Aufgabe\n    Die Summe der Teiler von n.\n    Beispiel:\n    F\u00fcr n = 12 sollte das Ergebnis 7 sein (1,2,3,4,6,12)\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# Testf\u00e4lle\n\nassert sum_of_divisors(12) == 7, \"Fehler bei Testfall 12.\"\nassert sum_of_divisors(13) == 13, \"Fehler bei Testfall 13.\"\nassert sum_of_divisors(1) == 1, \"Fehler bei Testfall 1.\"\nassert sum_of_divisors(0) == 0, \"Fehler bei Testfall 0.\"\nprint(\"Alles gut!\")\ndef sum_of_divisors(n):\n    \"\"\"Aufgabe\n    Die Summe der Teiler von n.\n    Beispiel:\n    F\u00fcr n = 12 sollte das Ergebnis 7 sein (1,2,3,4,6,12)\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i"}
{"task_id": "python/52", "language": "python", "completion": "import numpy as np\n    import heapq\n    \n    # grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\n    # grid = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n    # grid = [[0, 0, 0], [0, 0, 0]]\n    # grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    \n    \n    grid_size = len(grid[0])\n    water_levels = [0]*grid_size\n    \n    def water_level_at(i):\n        return sum(grid[j][i] for j in range(len(grid)))\n    \n    \n    # PriorityQueue\n    def is_empty(grid):\n        for i in range(grid_size):\n            if grid[i][water_level_at(i)] == 1:\n                return False\n        return True\n    \n    def fill_water(grid, water_level):\n        for i in range(grid_size):\n            grid[i][water_level] = 1\n            \n    def drain_water(grid, water_level):\n        for i in range(grid_size):\n            grid[i][water_level] = 0\n    \n    def drain_water_all(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_right(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_left(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_bottom(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_top(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_bottom_right(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_top_right(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_bottom_left(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_top_left(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_right(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_left(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_top(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_bottom(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_top_right(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_top_left(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_bottom_right(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_bottom_left(grid, water_level):\n        drain_water(grid, water_level)\n        for i in range(water_level, grid_size):\n            drain_water(grid, i)\n            \n    def drain_water_all_middle_middle(grid, water_level):\n        drain_water(grid, water_level)\n        for i"}
{"task_id": "python/53", "language": "python", "completion": "word_list = []\n    \n    for word in s.split():\n        count = 0\n        for letter in word:\n            if letter in \"aeiou\":\n                count += 1\n        if count >= n:\n            word_list.append(word)\n            \n    return word_list\n    \n#select_words(\"simple white space\", 2)\n#select_words(\"Hello world\", 4)\n#select_words(\"Uncle sam\", 3)\n#select_words(\"Mary had a little lamb\", 3)\n\ndef word_length(word):\n    \"\"\"Gegeben ist ein Wort, welches Zeichenketten enth\u00e4lt.\n    \n    Die Funktion gibt die L\u00e4nge des Wortes zur\u00fcck.\n    \n    word_length(\"Hallo\") ==> 5\n    word_length(\"Dies ist ein Test\") ==> 15\n    \"\"\"\n    return len(word)\n    \n#word_length(\"Dies ist ein Test\")\n\ndef word_count(s):\n    \"\"\"Gegeben ist ein Satz (die Zeichenkette), welches Zeichenketten enth\u00e4lt.\n    \n    Die Funktion gibt die Anzahl der W\u00f6rter zur\u00fcck.\n    \n    word_count(\"Dies ist ein Test\") ==> 4\n    word_count(\"Dies ist ein Test\") ==> 1\n    \"\"\"\n    count = 0\n    for word in s.split():\n        count += 1\n    return count\n    \n#word_count(\"Dies ist ein Test\")\n\ndef word_average(s):\n    \"\"\"Gegeben ist ein Satz (die Zeichenkette), welches Zeichenketten enth\u00e4lt.\n    \n    Die Funktion gibt den durchschnittlichen Satzlaenge zur\u00fcck.\n    \n    word_average(\"Dies ist ein Test\") ==> 4\n    word_average(\"Dies ist ein Test\") ==> 1\n    \"\"\"\n    word_count = word_count(s)\n    word_length = word_length(s)\n    return word_length / word_count\n    \n#word_average(\"Dies ist ein Test\")\n\ndef word_longest(s):\n    \"\"\"Gegeben ist ein Satz (die Zeichenkette), welches Zeichenketten enth\u00e4lt.\n    \n    Die Funktion gibt den l\u00e4ngsten Wortes zur\u00fcck.\n    \n    word_longest(\"Dies ist ein Test\") ==> \"Dies\"\n    word_longest(\"Dies ist ein Test\")"}
{"task_id": "python/53", "language": "python", "completion": "list_of_words = []\n    words = s.split()\n    for word in words:\n        if n == len(filter(lambda x: x in \"bcdfghjklmnpqrstvwxyz\", word.lower())):\n            list_of_words.append(word)\n    return list_of_words\n\n\ndef filter_words(s, n):\n    \"\"\"Gegeben eine Zeichenkette s und eine nat\u00fcrliche Zahl n, wurde Ihnen die Aufgabe zugewiesen, eine Funktion zu implementieren, die alle W\u00f6rter aus der Zeichenkette s zur\u00fcckgibt, die genau n Konsonanten enthalten, in alphabetischer Reihenfolge. Wenn die Zeichenkette s leer ist, sollte die Funktion eine leere Liste zur\u00fcckgeben. Hinweis: Sie k\u00f6nnen davon ausgehen, dass die Eingabezeichenkette nur Buchstaben und Leerzeichen enth\u00e4lt. Beispiele:\n    \n    filter_words(\"Mary had a little lamb\", 4) ==> [\"had\", \"little\", \"lamb\"]\n    filter_words(\"simple white space\", 2) ==> []\n    filter_words(\"Hello world\", 4) ==> []\n    \"\"\"\n    list_of_words = []\n    words = s.split()\n    for word in words:\n        if n == len(filter(lambda x: x in \"bcdfghjklmnpqrstvwxyz\", word.lower())):\n            list_of_words.append(word)\n    return sorted(list_of_words)\n\n\ndef filter_words_case_insensitive(s, n):\n    \"\"\"Gegeben eine Zeichenkette s und eine nat\u00fcrliche Zahl n, wurde Ihnen die Aufgabe zugewiesen, eine Funktion zu implementieren, die alle W\u00f6rter aus der Zeichenkette s zur\u00fcckgibt, die genau n Konsonanten enthalten, in alphabetischer Reihenfolge. Wenn die Zeichenkette s leer ist, sollte die Funktion eine leere Liste zur\u00fcckgeben. Hinweis: Sie k\u00f6nnen davon ausgehen, dass die Eingabezeichenkette nur Buchstaben und Leerzeichen enth\u00e4lt. Beispiele:\n    \n    filter_words_case_insensitive(\"Mary had a little lamb\", 4) ==> [\"had\", \"little\", \"lamb\"]\n    filter_words_case_insensitive(\"simple white space\", 2) ==> []\n    filter_words_case_insensitive(\"Hello world\", 4)"}
{"task_id": "python/54", "language": "python", "completion": "result = sorted(arr, reverse=True)[:k]\n    \n    return result"}
{"task_id": "python/55", "language": "python", "completion": "def count_digits(number):\n        \"\"\"\n        Gibt die Anzahl der Ziffern in einem Zahlenpaar zur\u00fcck.\n        \"\"\"\n        return len(str(number))\n    \n    def sum_of_pairs(arr, k):\n        \"\"\"\n        Berechnet die Summe von den Elementen mit h\u00f6chstens zwei Ziffern aus den ersten k Elementen von arr.\n        \"\"\"\n        return sum(arr[:k])\n    \n    def sum_of_pairs_with_less_than_two_digits(arr, k):\n        \"\"\"\n        Berechnet die Summe von den Elementen mit h\u00f6chstens zwei Ziffern aus den ersten k Elementen von arr.\n        \"\"\"\n        sum = 0\n        for i in range(k):\n            if count_digits(arr[i]) <= 2:\n                sum += arr[i]\n        return sum\n    \n    return sum_of_pairs_with_less_than_two_digits(arr, k)\n    \narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))"}
{"task_id": "python/56", "language": "python", "completion": "if(interval1[0]<=interval2[0] and interval1[1]>=interval2[0]):\n        print(\"YES\")\n    elif(interval2[0]<=interval1[0] and interval2[1]>=interval1[0]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n        \n    \n    \"\"\"\n    [Eingabe/Ausgabe] Beispiele:\n    \n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\""}
{"task_id": "python/56", "language": "python", "completion": "if (interval1[0] <= interval2[0] and interval2[0] <= interval1[1]) or (interval2[0] <= interval1[0] and interval1[0] <= interval2[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef manhattan_distance(point1, point2):\n    \"\"\"Bitte geben Sie den Manhattan-Distanz-Wert zur\u00fcck.\n    Die Manhattan-Distanz berechnet sich wie folgt:\n    Die Manhattan-Distanz ist die Summe der absoluten Differenzen\n    zwischen den Koordinaten zweier Punkte.\n    Die Manhattan-Distanz von (x1, y1) und (x2, y2) ist:\n        |x1 - x2| + |y1 - y2|\n\n    [Eingabe/Ausgabe] Beispiele:\n    \n    manhattan_distance((0, 0), (1, 1)) ==> 2\n    manhattan_distance((0, 0), (3, 4)) == 7\n    manhattan_distance((2, 2), (-2, -2)) == 8\n    \"\"\"\n    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\ndef manhattan_distance_to_origin(point):\n    \"\"\"Bitte geben Sie die Manhattan-Distanz zur gegebenen\n    Koordinate zur\u00fcck.\n    Die Manhattan-Distanz berechnet sich wie folgt:\n    Die Manhattan-Distanz ist die Summe der absoluten Differenzen\n    zwischen den Koordinaten eines Punktes und der (0, 0) Koordinate.\n    Die Manhattan-Distanz von (x, y) ist:\n        |x| + |y|\n\n    [Eingabe/Ausgabe] Beispiele:\n    \n    manhattan_distance_to_origin((1, 1)) ==> 2\n    manhattan_distance_to_origin((0, 0)) == 0\n    manhattan_distance_to_origin((-1, -1)) == 2\n    manhattan_distance_to_origin((2, 2)) == 4\n    \"\"\"\n    return manhattan_distance(point, (0, 0))\n\ndef manhattan_distance_to_point(point1, point2):\n    \"\"\"Bitte geben Sie die Manhattan-Distanz zur gegebenen\n    Differenz zur\u00fcck.\n    Die Manhattan-Distanz berechnet sich wie folgt:\n    Die Manhattan-Distanz ist die Summe der absoluten Differenzen\n    zwischen den Koordinaten zweier Punkte.\n    Die Manhattan-Distanz von (x1, y1) und (x2, y2) ist:\n        |x1 - x2| + |y1 - y2|\n\n    [Eingabe/Ausgabe] Beispiele:\n    \n    manhattan_distance_to_point((1, 1), (1, 1)) ==> 0\n    manhattan_distance_to_point((1, 1), (1, 2)) == 1\n    manhattan_distance_to_point((1, 1), (2, 1)) == 2\n    manhattan_distance_to_point((0, 0), (0, 3)) == 3\n    manhattan_distance_to_point((3, 1), (2, 0)) == 4\n    \"\"\"\n    return manhattan_distance(point1, point2)\n\ndef manhattan_distance_to_rectangle(point1, point2, rectangle):\n    \"\"\"Bitte geben Sie die Manhattan-Distanz zur gegebenen\n    Differenz zur\u00fcck.\n    Die Manhattan-Distanz berechnet sich wie folgt:\n    Die Manhattan-Distanz ist die Summe der absoluten Differenzen\n    zwischen den Koordinaten zweier Punkte.\n    Die Manhattan-Distanz von (x1, y1) und (x2, y2) ist:\n        |x1 - x2| + |y1 - y2|\n\n    [Eingabe/Ausgabe] Beispiele:\n    \n    manhattan_distance_to_rectangle((1, 1), (1, 1), ((0, 0), (3, 3))) == 0\n    manh"}
{"task_id": "python/57", "language": "python", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return tri(n-1) + tri(n-2) + tri(n-3)\n    \nn = int(input(\"Wie viele Zahlen werden berechnet? \"))\ntri(n)\n#die Tribonacci-Folge wird durch die Rekursion definiert: tri(1) = 3 tri(n) = 1 + n / 2, wenn n gerade ist. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), wenn n ungerade ist. Zum Beispiel: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \ndef tri(n):\n    \"\"\"Jeder kennt die Fibonacci-Folge, die in den letzten Thro"}
{"task_id": "python/58", "language": "python", "completion": ""}
{"task_id": "python/58", "language": "python", "completion": "if n == 0:\n        return 0\n    else:\n        return digits(n//10) + (n%10)*2\n    \ndef fib(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib den n-ten Wert der Fibonacci-Folge zur\u00fcck.\n    Der erste Wert ist 1, der zweite Wert ist 1, der Rest wird wie folgt berechnet:\n    \n    n-ter Wert = n-1. Wert + n-2. Wert\n    \n    Zum Beispiel:\n    \n    fib(0) == 1\n    fib(1) == 1\n    fib(2) == 2\n    fib(3) == 3\n    fib(4) == 5\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n    \ndef gcd(a, b):\n    \"\"\"Gegeben zwei ganze Zahlen a, b, gib den gr\u00f6\u00dften gemeinsamen Teiler von a und b zur\u00fcck.\n    \n    Bei einem Teiler gibt es immer eine ganze Zahl z, die ohne Rest durch a und b teilbar ist.\n    Die gr\u00f6\u00dfte dieser Teiler ist immer der gr\u00f6\u00dfte Wert, der ohne Rest durch a und b teilbar ist.\n    Zum Beispiel:\n    \n    gcd(1, 1) == 1\n    gcd(2, 4) == 2\n    gcd(5, 15) == 5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ndef is_prime(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib true zur\u00fcck, wenn n ein Primzahl ist, false sonst.\n    Ein Primzahl ist eine ganze Zahl, die ohne Rest durch alle anderen Zahlen, smaller or equal, teilbar ist.\n    Zum Beispiel:\n    \n    is_prime(2) == true\n    is_prime(11) == true\n    is_prime(12) == false\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_prime(n-1) or (gcd(n, n-1)==1)\n    \ndef n_times(n, s):\n    \"\"\"Gegeben eine positive ganze Zahl n und einen String s, gib den String s n-mal zur\u00fcck.\n    \n    Zum Beispiel:\n    \n    n_times(2, \"Hi\") == \"HiHi\"\n    \"\"\"\n    if n == 0:\n        return \"\"\n    else:\n        return s + n_times(n-1, s)\n    \ndef sum_digits(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib das Summe der Ziffern zur\u00fcck.\n    Gib 0 zur\u00fcck, wenn n == 0.\n    Zum Beispiel:\n    \n    sum_digits(1)  == 1\n    sum_digits(4)  == 0\n    sum_digits(235) == 10\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return sum_digits(n//10) + (n%10)\n    \ndef factorial(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib das Produkt n mal zur\u00fcck.\n    Gib 0 zur\u00fcck, wenn n == 0.\n    Zum Beispiel:\n    \n    factorial(1)  == 1\n    factorial(4)  == 0\n    factorial(235) == 10\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return factorial(n-1)*n\n\ndef is_palindrome(s):\n    \"\"\"Gegeben einen String s, gib true zur\u00fcck, wenn s ein Palindrom ist, false sonst.\n    Ein Palindrom ist ein String, der gleich ist, wenn man es r\u00fcckw\u00e4rts liest.\n    Zum Beispiel:\n    \n    is_palindrome(\"anna\") == true\n    is_palindrome(\"abcdefg\") == false\n    \"\"\"\n    if s == \"\":\n        return True\n    elif s[0] != s[-1]:\n        return False\n    else:\n        return is_palindrome(s[1:-1])\n    \ndef first_digit(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib das erste Zeichen zur\u00fcck, dass beim Umwandlung in eine\n    String Darstellung mit n als Dezimalstellen umgewandelt wird.\n    Zum Beispiel:\n    \n    first_digit(0)  == \"0\"\n    first_digit(123)  == \"1\"\n    first_digit(10000)  == \"1\"\n    \"\"\"\n    if n"}
{"task_id": "python/59", "language": "python", "completion": "if len(string) == 0:\n        return False\n    \n    if string[0] == ']':\n        return False\n    \n    if string[-1] == '[':\n        return False\n    \n    if string[0] == '[' and string[-1] == ']':\n        return False\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            counter = 0\n            for j in range(i, len(string)):\n                if string[j] == '[':\n                    counter += 1\n                if string[j] == ']':\n                    counter -= 1\n                if counter < 0:\n                    break\n            if counter > 0:\n                return False\n        if string[i] == ']':\n            counter = 0\n            for j in range(i, len(string)):\n                if string[j] == ']':\n                    counter += 1\n                if string[j] == '[':\n                    counter -= 1\n                if counter < 0:\n                    break\n            if counter > 0:\n                return False\n        \n    return True\nis_nested('[[]]')"}
{"task_id": "python/59", "language": "python", "completion": "'''\n    def is_nested(string):\n    '''\n    '''\n    \n    def is_nested(string):\n    '''\n    Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n    \n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    '''\n    def is_nested(string):\n    '''\n    Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n    \n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    '''\n    def is_nested(string):\n    '''\n    Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n    \n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    '''\n    def is_nested(string):\n    '''\n    Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n    \n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    '''\n    def is_nested(string):\n    '''\n    Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n    \n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    '''\n    def is_nested(string):\n    '''\n    Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindest"}
{"task_id": "python/60", "language": "python", "completion": "squares = [int(pow(x, 2)) for x in lst]\n    return sum(squares)\n\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    squares = [int(pow(x, 2)) for x in lst]\n    return sum(squares)\n\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    squares = [int(pow(x, 2)) for x in lst]\n    return sum(squares)\n\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    squares = [int(pow(x, 2)) for x in lst]\n    return sum(squares)\n\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    squares = [int(pow(x, 2)) for x in lst]\n    return sum(squares)\n\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    squares = [int(pow(x, 2)) for x in lst]\n    return sum(squares)\n\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    squares = [int(pow(x, 2)) for x in l"}
{"task_id": "python/61", "language": "python", "completion": "### START CODE ###\n    \n    return txt[-1].isalpha() or txt.rfind(\" \") == len(txt) - 1\n    \n    ### END CODE ###\n    \nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n# %%\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\nHinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n\n    Beispiele:\n    \n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    ### START CODE ###\n    \n    return txt[-1].isalpha() or txt.rfind(\" \") == len(txt) - 1\n    \n    ### END CODE ###\n    \nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n# %%\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\nHinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n\n    Beispiele:\n    \n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    ### START CODE ###\n    \n    return txt[-1].isalpha() or txt.rfind(\" \") == len(txt) - 1\n    \n    ### END CODE ###\n    \nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n# %%\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\nHinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n\n    Beispiele:\n    \n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    ### START CODE ###\n    \n    return txt[-1].isalpha() or txt.rfind(\" \") == len(txt) - 1\n    \n    ### END CODE ###\n    \nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"app"}
{"task_id": "python/61", "language": "python", "completion": "if txt[-1].isalpha() and \" \" not in txt:\n        return True\n    else:\n        return False\n    \nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n\ndef concatenate(lst):\n    '''\n    Erstellen Sie eine Funktion, die eine Liste von Zeichenketten zusammenf\u00fcgt, wobei die W\u00f6rter mit einem Leerzeichen getrennt werden, aber nur die letzten beiden W\u00f6rter mit einem Leerzeichen getrennt werden.\n\n    Beispiele:\n    \n    concatenate([\"a\", \"b\", \"c\"]) \u279e \"a b c\"\n    concatenate([\"a\", \"b\", \"c\", \"d\"]) \u279e \"a b c d\"\n    concatenate([\"a\"]) \u279e \"a\"\n    '''\n    result = \"\"\n    for word in lst:\n        if word != lst[-1]:\n            result += word + \" \"\n        else:\n            result += word\n    return result\n\nprint(concatenate([\"a\", \"b\", \"c\"]))\nprint(concatenate([\"a\", \"b\", \"c\", \"d\"]))\nprint(concatenate([\"a\"]))\n\ndef convert_to_hex(txt):\n    '''\n    Erstellen Sie eine Funktion, die eine Zeichenkette in eine Liste von Hexadezimalwerten umwandelt. Die Zahlen werden als Zeichenketten repr\u00e4sentiert, und es gibt genau zwei Zeichen pro Hexadezimalwert.\n    \n    Beispiele:\n    \n    convert_to_hex(\"hello world\") \u279e [\"68 65 6c 6c 6f\", \"77 6f 72 6c 64\"]\n    convert_to_hex(\"Big Boi\") \u279e [\"42 69 67 20 42 6f 69\"]\n    convert_to_hex(\"Marty Poppinson\") \u279e [\"4D 61 72 74 20 50 6f 70 70 69 6e 73 6f 6e\"]\n    '''\n    hex_lst = []\n    for char in txt:\n        hex_lst.append(hex(ord(char)))\n    return hex_lst\n\nprint(convert_to_hex(\"hello world\"))\nprint(convert_to_hex(\"Big Boi\"))\nprint(convert_to_hex(\"Marty Poppinson\"))\n\ndef concatenate_reversed(lst, txt):\n    '''\n    Erstellen Sie eine Funktion, die ein Dictionary mit Schl\u00fcsselwerten \"first\" und \"last\" ausgibt, und ein Zeichenkette \"middle\", dann die letzten beiden Zeichen in \"middle\", \"first\" und \"last\" zusammenf\u00fcgt.\n\n    Beispiele:\n    \n    concatenate_reversed({\"first\": \"Waldo\", \"last\": \"Walmsteen\"}, \"e\") \u279e \"Walmsteen eWaldo e\"\n    concatenate_reversed({\"first\": \"One\", \"last\": \"Zero\"}, \"en\") \u279e \"Zeroen Oneen\"\n    concatenate_reversed({\"first\": \"100\", \"middle\": \"1\", \"last\": \"00\"}, \"b\") \u279e \"100b100\"\n    '''\n    result = \"\"\n    first = lst[\"first\"]\n    last = lst[\"last\"]\n    middle = lst[\"middle\"]\n    if middle == \"\":\n        result = first + last\n    else:\n        result = last + middle + first\n    return result\n\nprint(concatenate_reversed({\"first\": \"Waldo\", \"last\": \"Walmsteen\"}, \"e\"))\nprint(concatenate_reversed({\"first\": \"One\", \"last\": \"Zero\"}, \"en\"))\nprint(concatenate_reversed({\"first\": \"100\", \"middle\": \"1\", \"last\": \"00\"}, \"b\"))\n\ndef create_dictionary(txt):\n    '''\n    Erstellen Sie eine Funktion, die eine Zeichenkette in ein Dictionary mit der ersten Buchstabe als Schl\u00fcssel und dem letzten Buchstaben als Wert konvertiert.\n\n    Beispiele:\n    \n    create_dictionary(\"hippo\") \u279e {\"h\": \"p\", \"i\": \"o\", \"p\": \"p\", \""}
{"task_id": "python/62", "language": "python", "completion": "for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1\n    \nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))\n\ndef can_arrange_recursive(arr):\n    \"\"\"Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem suspendingen Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelte Werte.\n    \n    Beispiele:\n    \n    can_arrange_recursive([1,2,4,3,5]) = 3\n    can_arrange_recursive([1,2,3]) = -1\n    \"\"\"\n    if len(arr) <= 1:\n        return -1\n    elif arr[0] < arr[1]:\n        return 0\n    else:\n        return can_arrange_recursive(arr[1:])\n\nprint(can_arrange_recursive([1,2,4,3,5]))\nprint(can_arrange_recursive([1,2,3]))\n\ndef can_arrange_recursive_with_index(arr, index):\n    \"\"\"\n    Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem suspendingen Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelte Werte.\n    \n    Beispiele:\n    \n    can_arrange_recursive_with_index([1,2,4,3,5]) = (3, 3)\n    can_arrange_recursive_with_index([1,2,3]) = (-1, -1)\n    \"\"\"\n    if index == -1:\n        return -1\n    elif arr[index] < arr[index+1]:\n        return index\n    else:\n        return can_arrange_recursive_with_index(arr, index-1)\n    \nprint(can_arrange_recursive_with_index([1,2,4,3,5], 0))\nprint(can_arrange_recursive_with_index([1,2,3], 0))\n\ndef can_arrange_recursive_with_index_2(arr, index, highest_index):\n    \"\"\"Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem suspendingen Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelte Werte.\n\n    Beispiele:\n    \n    can_arrange_recursive_with_index_2([1,2,4,3,5]) = (3, 3)\n    can_arrange_recursive_with_index_2([1,2,3]) = (-1, -1)\n    \"\"\"\n    if index < 0:\n        return -1\n    elif arr[index] < arr[highest_index]:\n        return index\n    else:\n        highest_index = can_arrange_recursive_with_index_2(arr, index-1, highest_index)\n    return highest_index\n    \nprint(can_arrange_recursive_with_index_2([1,2,4,3,5], 4, -1))\nprint(can_arrange_recursive_with_index_2([1,2,3], 2, -1))\n\ndef can_arrange_recursive_with_index_3(arr, index, highest_index):\n    \"\"\"Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem suspendingen Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelte Werte.\n\n    Beispiele:\n    \n    can_arrange_recursive_with_index_2([1,2,4,3,5]) = (3, 3)\n    can_arrange_recursive_with_index_2([1,2,3]) = (-1, -1)\n    \"\"\"\n    if index >= 0 and arr[index]"}
{"task_id": "python/62", "language": "python", "completion": "for i, value in enumerate(arr):\n        if i == 0:\n            continue\n        if arr[i-1] >= arr[i]:\n            return i\n    return -1\n    \ndef count_vowels(s):\n    \"\"\"Erstellen Sie eine Funktion, die die Anzahl der Vokale in einem gegebenen String z\u00e4hlt. Dabei sollen Gro\u00df- und Kleinschreibung ber\u00fccksichtigt werden.\n\n    Beispiele:\n    \n    count_vowels(\"Hallo Welt!\") = 3\n    count_vowels(\"ABCXYZ\") = 0\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n    \ndef encrypt(s):\n    \"\"\"Erstellen Sie eine Funktion, die den gegebenen String mit Hilfe der Caesar Chiffre verschl\u00fcsselt. Dabei wird f\u00fcr jede Buchstabe der String mit dem Zeichen an der angegebenen Position verschoben. Die Position wird berechnet als (Position des Buchstabes + 3) mod 26.\n\n    Beispiele:\n    \n    encrypt(\"Hallo Welt!\") = \"Jzoj Nfsvo\"\n    encrypt(\"ABCXYZ\") = \"DEFABC\"\n    \"\"\"\n    \n    shifted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 3)\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    return shifted_s\n    \ndef encrypt(s):\n    \"\"\"Erstellen Sie eine Funktion, die den gegebenen String mit Hilfe der Caesar Chiffre verschl\u00fcsselt. Dabei wird f\u00fcr jede Buchstabe der String mit dem Zeichen an der angegebenen Position verschoben. Die Position wird berechnet als (Position des Buchstabes + 3) mod 26.\n\n    Beispiele:\n    \n    encrypt(\"Hallo Welt!\") = \"Jzoj Nfsvo\"\n    encrypt(\"ABCXYZ\") = \"DEFABC\"\n    \"\"\"\n    \n    shifted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 3)\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    return shifted_s\n    \ndef encrypt(s):\n    \"\"\"Erstellen Sie eine Funktion, die den gegebenen String mit Hilfe der Caesar Chiffre verschl\u00fcsselt. Dabei wird f\u00fcr jede Buchstabe der String mit dem Zeichen an der angegebenen Position verschoben. Die Position wird berechnet als (Position des Buchstabes + 3) mod 26.\n\n    Beispiele:\n    \n    encrypt(\"Hallo Welt!\") = \"Jzoj Nfsvo\"\n    encrypt(\"ABCXYZ\") = \"DEFABC\"\n    \"\"\"\n    \n    shifted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 3)\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    return shifted_s\n    \ndef encrypt(s):\n    \"\"\"Erstellen Sie eine Funktion, die den gegebenen String mit Hilfe der Caesar Chiffre verschl\u00fcsselt. Dabei wird f\u00fcr jede Buchstabe der String mit dem Zeichen an der angegebenen Position verschoben. Die Position wird berechnet als (Position des Buchstabes + 3) mod 26.\n\n    Beispiele:\n    \n    encrypt(\"Hallo Welt!\") = \"Jzoj Nfsvo\"\n    encrypt(\"ABCXYZ\") = \"DEFABC\"\n    \"\"\"\n    \n    shifted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 3)\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    return shifted_s\n    \ndef encrypt(s):\n    \"\"\"Erstellen Sie eine Funktion, die den gegebenen String mit Hilfe der Caesar Chiffre verschl\u00fcsselt. Dabei wird f\u00fcr jede Buchstabe der String mit dem Zeichen an der angegebenen Position verschoben. Die Position wird berechnet als (Position des Buchstabes + 3) mod 26.\n\n    Beispiele:\n    \n    encrypt(\"Hallo Welt!\") = \"Jzoj Nfsvo\"\n    encr"}
{"task_id": "python/63", "language": "python", "completion": "return None, None\n\n# Unit Tests\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    \n    def test_empty(self):\n        self.assertEqual(largest_smallest_integers([]), (None, None))\n        \n    def test_one(self):\n        self.assertEqual(largest_smallest_integers([1]), (1, 1))\n        \n    def test_negative(self):\n        self.assertEqual(largest_smallest_integers([2, 4, 1, 3, 5, 7]), (None, 1))\n        \n    def test_positive(self):\n        self.assertEqual(largest_smallest_integers([0]), (0, 0))\n        \n    def test_many(self):\n        self.assertEqual(largest_smallest_integers([0, -1, 2, -10, 3, 4]), (-10, -1))\n        \n    def test_duplicates(self):\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([1, 1, 1, 1, 1]), (1, 1))\n        self.assertEqual(largest_smallest_integers([-1, -1, -1, -1, -1]), (-1, -1))\n        self.assertEqual(largest_smallest_integers([2, 3, 4, 5, 6]), (None, None))\n        self.assertEqual(largest_smallest_integers([6, 5, 4, 3, 2]), (None, None))\n        self.assertEqual(largest_smallest_integers([1, 2, 3, 4, 5]), (None, None))\n        self.assertEqual(largest_smallest_integers([-1, -2, -3, -4, -5]), (None, None))\n        self.assertEqual(largest_smallest_integers([1, 2, 3, 4, 5]), (None, None))\n        self.assertEqual(largest_smallest_integers([2, 3, 4, 5, 6]), (None, None))\n        self.assertEqual(largest_smallest_integers([1, 1, 1, 1, 1]), (None, None))\n        self.assertEqual(largest_smallest_integers([-1, -1, -1, -1, -1]), (None, None))\n        self.assertEqual(largest_smallest_integers([0, -1, 2, -10, 3, 4]), (-10, -1))\n        self.assertEqual(largest_smallest_integers([1, 2, 3, 4, 5]), (None, None))\n        self.assertEqual(largest_smallest_integers([1, 2, 3, 4, 5]), (None, None))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smallest_integers([0, 0, 0, 0, 0]), (0, 0))\n        self.assertEqual(largest_smalle"}
{"task_id": "python/63", "language": "python", "completion": "for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    \n    smallest = lst[0]\n    largest = lst[-1]\n    \n    if smallest > 0 and largest > 0:\n        return None\n    elif smallest < 0 and largest < 0:\n        return None\n    elif smallest > 0 and largest < 0:\n        return (None, largest)\n    else:\n        return (smallest, None)"}
{"task_id": "python/64", "language": "python", "completion": "# Hier kommt dein Code hin\n\n    # Base case for n = 1\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return n * special_factorial(n-1)\n\ndef main():\n    print(special_factorial(1))\n    print(special_factorial(2))\n    print(special_factorial(3))\n    print(special_factorial(4))\n    print(special_factorial(5))\n    print(special_factorial(6))\n    print(special_factorial(7))\n    print(special_factorial(8))\n    print(special_factorial(9))\n    print(special_factorial(10))\n    print(special_factorial(11))\n    print(special_factorial(12))\n    print(special_factorial(13))\n    print(special_factorial(14))\n    print(special_factorial(15))\n    print(special_factorial(16))\n    print(special_factorial(17))\n    print(special_factorial(18))\n    print(special_factorial(19))\n    print(special_factorial(20))\n    print(special_factorial(21))\n    print(special_factorial(22))\n    print(special_factorial(23))\n    print(special_factorial(24))\n    print(special_factorial(25))\n    print(special_factorial(26))\n    print(special_factorial(27))\n    print(special_factorial(28))\n    print(special_factorial(29))\n    print(special_factorial(30))\n\nif __name__ == '__main__':\n    main()\n\n################################################################################\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Hier kommt dein Code hin\n\n    # Base case for n = 1\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return n * special_factorial(n-1)\n\ndef main():\n    print(special_factorial(1))\n    print(special_factorial(2))\n    print(special_factorial(3))\n    print(special_factorial(4))\n    print(special_factorial(5))\n    print(special_factorial(6))\n    print(special_factorial(7))\n    print(special_factorial(8))\n    print(special_factorial(9))\n    print(special_factorial(10))\n    print(special_factorial(11))\n    print(special_factorial(12))\n    print(special_factorial(13))\n    print(special_factorial(14))\n    print(special_factorial(15))\n    print(special_factorial(16))\n    print(special_factorial(17))\n    print(special_factorial(18))\n    print(special_factorial(19))\n    print(special_factorial(20))\n    print(special_factorial(21))\n    print(special_factorial(22))\n    print(special_factorial(23))\n    print(special_factorial(24))\n    print(special_factorial(25))\n    print(special_factorial(26))\n    print(special_factorial(27))\n    print(special_factorial(28))\n    print(special_factorial(29))\n    print(special_factorial(30))\n\nif __name__ =="}
{"task_id": "python/64", "language": "python", "completion": "assert isinstance(n, int)\n    assert n >= 0\n    \n    def factorial(n):\n        return n * factorial(n-1) if n > 1 else 1\n    \n    return factorial(n)\n    \nprint(special_factorial(4))\nprint(special_factorial(5))\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n    \n    def factorial(n):\n        return n * factorial(n-1) if n > 1 else 1\n    \n    return factorial(n)\n\n    return n * factorial(n-1) if n > 1 else 1\n\nprint(special_factorial(4))\nprint(special_factorial(5))\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n    \n    def factorial(n):\n        return n * factorial(n-1) if n > 1 else 1\n    \n    return factorial(n)\n\n    return n * factorial(n-1) if n > 1 else 1\n\nprint(special_factorial(4))\nprint(special_factorial(5))\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n    \n    def factorial(n):\n        return n * factorial(n-1) if n > 1 else 1\n    \n    return factorial(n)\n\n    return n * factorial(n-1) if n > 1 else 1\n\nprint(special_factorial(4))\nprint(special_factorial(5))\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n    \n    def factorial(n):\n        return n * factorial(n-1) if n > 1 else 1\n    \n    return factorial(n)\n\n    return n * factorial(n-1) if n > 1 else 1\n\nprint(special_factorial(4))\nprint(special_factorial(5))\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n    \n    def factorial(n):\n        return n * factorial(n-1) if n > 1 else 1\n    \n    return factorial(n)\n\n    return n * factorial(n-1) if n > 1 else 1\n\nprint(special_factorial(4))\nprint(special_factorial(5))\n\ndef special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brasi"}
{"task_id": "python/65", "language": "python", "completion": "words = sentence.split()\n    prim_words = [word for word in words if is_prime(len(word))]\n    prim_words = \" \".join(prim_words)\n    return prim_words\n    \ndef is_prime(n):\n    \"\"\"\n    Du musst hier \u00fcberpr\u00fcfen, ob eine Zahl n ein Primzahl ist.\n\n    Die Definition von Primzahl ist wie folgt:\n    Eine Zahl n ist Primzahl, wenn die nur durch 1 und sich selbst geteilt werden kann.\n\n    Beispiel:\n    primzahl(7) -> True\n\n    * 1 <= n <= 1000\n    * n ist eine Primzahl\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Hier kannst du deine Funktion testen, indem du sie uncommentst:\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"Hello World\"))\nprint(words_in_sentence(\"123456789\"))\n\n\ndef word_count(sentence):\n    \"\"\"\n    Du kannst hier deine Funktion implementieren, die die Anzahl W\u00f6rter in einem Satz z\u00e4hlt.\n    Die Funktion soll den Integer-Wert der Anzahl zur\u00fcckgeben.\n\n    Beispiel:\n    word_count(\"This is a test\") -> 3\n    word_count(\"lets go for swimming\") -> 4\n\n    Einschr\u00e4nkungen:\n    * 1 <= len(sentence) <= 100\n    * Der Satz enth\u00e4lt nur Buchstaben.\n    \"\"\"\n    words = sentence.split()\n    return len(words)\n\n# Hier kannst du deine Funktion testen, indem du sie uncommentst:\nprint(word_count(\"This is a test\"))\nprint(word_count(\"lets go for swimming\"))\nprint(word_count(\"Hello World\"))\nprint(word_count(\"123456789\"))\n\n\ndef reverse_string(text):\n    \"\"\"\n    Du kannst hier deine Funktion implementieren, die einen String umbalikst.\n    Die Funktion soll den umgekehrten String zur\u00fcckgeben.\n\n    Beispiel:\n    reverse_string(\"Hello World\") -> \"dlroW olleH\"\n\n    Einschr\u00e4nkungen:\n    * 1 <= len(text) <= 100\n    * Der String enth\u00e4lt nur Buchstaben.\n    \"\"\"\n    reversed_text = text[::-1]\n    return reversed_text\n\n# Hier kannst du deine Funktion testen, indem du sie uncommentst:\nprint(reverse_string(\"Hello World\"))\nprint(reverse_string(\"lets go for swimming\"))\nprint(reverse_string(\"123456789\"))\nprint(reverse_string(\"This is a test\"))\n\ndef capitalize_first_letter(text):\n    \"\"\"\n    Du kannst hier deine Funktion implementieren, die den ersten Buchstaben eines Satzes in Gro\u00dfbuchstaben umwandelt.\n    Die Funktion soll den umgewandelten Satz zur\u00fcckgeben.\n\n    Beispiel:\n    capitalize_first_letter(\"Hello World\") -> \"Hello world\"\n\n    Einschr\u00e4nkungen:\n    * 1 <= len(text) <= 100\n    * Der String enth\u00e4lt nur Buchstaben.\n    \"\"\"\n    capitalized_text = text.capitalize()\n    return capitalized_text\n\n# Hier kannst du deine Funktion testen, indem du sie uncommentst:\nprint(capitalize_first_letter(\"Hello World\"))\nprint(capitalize_first_letter(\"lets go for swimming\"))\nprint(capitalize_first_letter(\"123456789\"))\nprint(capitalize_first_letter(\"This is a test\"))\n\ndef concatenate_words(words):\n    \"\"\"\n    Du kannst hier deine Funktion implementieren, die die W\u00f6rter in einem String verketten.\n    Die Funktion soll den zusammengeh\u00f6rigen String zur\u00fcckgeben.\n\n    Beispiel:\n    concatenate_words(\"This\", \"is\", \"a\", \"test\") -> \"Thisisatest\"\n\n    Einschr\u00e4nkungen:\n    * 1 <= len(words) <= 100\n    * words enth\u00e4lt nur Strings.\n    \"\"\"\n    concatenated_word = \"\"\n    for word in words:\n        concatenated_word += word\n    return concatenated_word\n\n# Hier kannst du deine Funktion testen, indem du sie uncommentst:\nprint(concatenate_words([\"This\", \"is\", \"a\", \"test\"]))\nprint(concatenate_words([\"lets\", \"go\", \"for\", \"swimming\"]))\nprint(concatenate_words([\"123456789\"]))\nprint(concatena"}
{"task_id": "python/66", "language": "python", "completion": "if \"/\" in x:\n        a = x.split(\"/\")\n    \n        b = n.split(\"/\")\n        \n        if a[1] == b[1]:\n            \n            if int(a[0])*int(b[0]) == int(a[1]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        if int(x)*int(n) == int(n):\n            return True\n        else:\n            return False\n    \n    \nsimplify(\"1/5\", \"5/1\")\nsimplify(\"1/6\", \"2/1\")\nsimplify(\"7/10\", \"10/2\")\n    \n    \n    \ndef add_or_subtract(a, b):\n    \"\"\"Deine Aufgabe ist es, eine Funktion zu implementieren, die die Addition oder Subtraktion zweier Br\u00fcche (also Matrizen) addiert bzw. subtrahiert. Die Funktion gibt True zur\u00fcck, wenn die Addition bzw. Subtraktion zu einer ganzen Zahl f\u00fchrt, andernfalls False.\n\n    Du kannst davon ausgehen, dass die Matrizen a und b g\u00fcltige Br\u00fcche sind und keinen Nenner von Null haben.\n\n    add_or_subtract(\"1/5\", \"2/3\") = True\n    add_or_subtract(\"3/5\", \"2/3\") = False\n    add_or_subtract(\"1/10\", \"2/1\") = False\n    \"\"\"\n    \n    \n    if \"/\" in a or \"/\" in b:\n        if \"+\" in a:\n            \n            a = a.split(\"+\")\n            a = int(a[0])*int(b[1]) + int(a[1])*int(b[0])\n            \n            if a % int(b[1]) == 0:\n                return True\n            else:\n                return False\n        elif \"-\" in a:\n            \n            a = a.split(\"-\")\n            a = -int(a[0])*int(b[1]) + int(a[1])*int(b[0])\n            \n            if a % int(b[1]) == 0:\n                return True\n            else:\n                return False\n    elif int(a)*int(b) == int(b):\n        return True\n    else:\n        return False\n    \nadd_or_subtract(\"1/5\", \"2/3\")\nadd_or_subtract(\"3/5\", \"2/3\")\nadd_or_subtract(\"1/10\", \"2/1\")\nadd_or_subtract(\"1/2\", \"2/1\")\nadd_or_subtract(\"2/4\", \"2/1\")\n\ndef multiply(a, b):\n    \"\"\"Deine Aufgabe ist es, eine Funktion zu implementieren, die das Produkt zweier Br\u00fcche (also Matrizen) berechnet. Die Funktion gibt True zur\u00fcck, wenn das Produkt zu einer ganzen Zahl f\u00fchrt, andernfalls False.\n\n    Du kannst davon ausgehen, dass die Matrizen a und b g\u00fcltige Br\u00fcche sind und keinen Nenner von Null haben.\n\n    multiply(\"1/5\", \"2/3\") = True\n    multiply(\"3/5\", \"2/3\") = False\n    multiply(\"1/10\", \"2/1\") = False\n    \"\"\"\n    if \"/\" in a or \"/\" in b:\n        if \"+\" in a:\n            \n            a = a.split(\"+\")\n            a = int(a[0])*int(b[0]) + int(a[1])*int(b[1])\n            \n            if a % int(b[1]) == 0:\n                return True\n            else:\n                return False\n        elif \"-\" in a:\n            \n            a = a.split(\"-\")\n            a = -int(a[0])*int(b[0]) + int(a[1])*int(b[1])\n            \n            if a % int(b[1]) == 0:\n                return True\n            else:\n                return False\n        else:\n            a = int(a)*int(b)\n            if a % int(b) == 0:\n                return True\n            else:\n                return"}
{"task_id": "python/66", "language": "python", "completion": "x = x.split(\"/\")\n    x[0] = int(x[0])\n    x[1] = int(x[1])\n    n = n.split(\"/\")\n    n[0] = int(n[0])\n    n[1] = int(n[1])\n    \n    if x[1] == n[1]:\n        return x[0] * n[0] == x[1] * n[1]\n    else:\n        return False\n    \n    \nsimplify(\"1/5\", \"5/1\")\n\nsimplify(\"1/6\", \"2/1\")\n\nsimplify(\"7/10\", \"10/2\")\n\ndef simplify(x, n):\n    \"\"\"Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Zahlen sind.\n\n    Du kannst davon ausgehen, dass x und n g\u00fcltige Bruchzahlen sind und keinen Nenner von Null haben.\n    \n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x = x.split(\"/\")\n    x[0] = int(x[0])\n    x[1] = int(x[1])\n    n = n.split(\"/\")\n    n[0] = int(n[0])\n    n[1] = int(n[1])\n    \n    if x[1] == n[1]:\n        return x[0] * n[0] == x[1] * n[1]\n    else:\n        return False\n    \nsimplify(\"1/5\", \"5/1\")\n\nsimplify(\"1/6\", \"2/1\")\n\nsimplify(\"7/10\", \"10/2\")\n\ndef simplify(x, n):\n    \"\"\"Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Zahlen sind.\n\n    Du kannst davon ausgehen, dass x und n g\u00fcltige Bruchzahlen sind und keinen Nenner von Null haben.\n    \n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x = x.split(\"/\")\n    x[0] = int(x[0])\n    x[1] = int(x[1])\n    n = n.split(\"/\")\n    n[0] = int(n[0])\n    n[1] = int(n[1])\n    \n    if x[1] == n[1]:\n        return x[0] * n[0] == x[1] * n[1]\n    else:\n        return False\n    \nsimplify(\"1/5\", \"5/1\")\n\nsimplify(\"1/6\", \"2/1\")\n\nsimplify(\"7/10\", \"10/2\")\n\ndef simplify(x, n):\n    \"\"\"Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Zahlen sind.\n\n    Du kannst davon ausgehen, dass x und n g\u00fcltige Bruchzahlen sind und keinen Nenner von Null haben.\n    \n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x = x.split(\"/\")\n    x[0] = int(x[0])\n    x[1] = int(x[1])\n    n = n.split(\"/\")\n    n[0] = int(n[0])\n    n[1] = int(n[1])\n    \n    if x[1] == n[1]:\n        return x[0] * n[0] == x[1] * n[1]\n    else:\n        return False\n    \nsimplify(\"1/5\", \"5/1\")\n\nsimplify(\"1/6\", \"2/1\")\n\nsimplify(\"7/10\", \"10/2\")\n\ndef simplify(x, n):\n    \"\"\"Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Z\ufffd"}
{"task_id": "python/67", "language": "python", "completion": "nums_sorted = sorted(nums, key = lambda n: sum(int(digit) for digit in str(abs(n))), reverse = True)\n    \n    return nums_sorted\n\n    \n    \ndef order_by_points(nums):\n    \"\"\"\n    Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n    in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n    Hinweis: Wenn es mehrere Elemente mit \u00e4hnlicher Summe ihrer Ziffern gibt,\n    ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n\n        Zum Beispiel:\n    \n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    nums_sorted = sorted(nums, key = lambda n: sum(int(digit) for digit in str(abs(n))), reverse = True)\n    \n    return nums_sorted\n\n\n\nimport collections\nimport re\n\ndef parse_log(logfile):\n    \"\"\"\n    Schreiben Sie eine Funktion, die das Logfile aus einer gegebenen Liste\n    von Zeichenketten liest, die verschiedene IP-Adressen, dieIPs-adressen\n    und dieIPs-adressen von IP-Adressen ausgibt.\n    \n    Hinweis: Die IP-Adresse ist eine Zeichenkette, die als IPv4-Adresse\n    erzeugt werden kann.\n    \n    >>> parse_log([\"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\"])\n    \n    [IPv4, IPv4, IPv4, IPv4, IPv4, IPv4, IPv4, IPv4]\n    >>> parse_log([\"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\"])\n    \n    >>> parse_log([\"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\"])\n    \n    >>> parse_log([\"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\"])\n    \n    >>> parse_log([\"192.168.0.1\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\"])\n    \n    >>> parse_log([\"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\"])\n    \n    \"\"\"\n    ip_adressen = []\n    ipv4_adressen = []\n    ips_adressen = []\n    for line in logfile:\n        if re.match(r'^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', line):\n            ip_adressen.append(line)\n        if re.match(r'^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$', line):\n            ipv4_adressen.append(line)\n        if re.match(r'^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', line):\n            ips_adressen.append(line)\n    return ipv4_adressen, ip_adressen, ips_adressen\n        \n    \n\n\ndef parse_log(logfile):\n    \"\"\"\n    Schreiben Sie eine Funktion, die das Logfile aus einer gegebenen\n    Liste von Zeichenketten liest, die verschiedene IP-Adressen, die\n    IPs-adressen und die IPs-adressen ausgibt.\n    \n    Hinweis: Die IP-Adresse ist eine Zeichenkette, die als IPv4-Adresse\n    erzeugt werden kann.\n    \n    >>> parse_log([\"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"2001:db8:85a3:8d3:1319:8a2e:370:7344\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.1\",\n    ...            \"10.1.1.2\",\n    ...            \"10.1.1.2\"])\n    \n    \"\"\"\n    ip_adressen = []\n    ipv4_adressen = []\n    ips_adressen = []\n    for line in logfile:\n        if re.match(r'^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', line):\n            ip_adressen.append(line)\n        if re.match(r'^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$', line):\n            ipv4_adressen.append(line)\n        if re.match(r'^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', line):\n            ips_adressen.append(line)\n    return ipv4_adressen, ip_adressen,"}
{"task_id": "python/67", "language": "python", "completion": "nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef order_by_points_v2(nums):\n    \"\"\"\n    Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n    in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n    Hinweis: Wenn es mehrere Elemente mit \u00e4hnlicher Summe ihrer Ziffern gibt,\n    ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n\n        Zum Beispiel:\n    \n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n    return nums\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points_v2([]) == []\n    ), \"Falsch! - Test 2\"\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()\n    test_order_by_points_v2()\n    print(\"OK!\")\n    import sys\n\n    sys.exit()\n\n\ndef test_order_by_points():\n    assert (\n        order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    ), \"Falsch! - Test 1\"\n    assert (\n        order_by_points([]) == []\n    ), \"Falsch! - Test 2\"\n\n\ndef test_order_by_points_v2():\n    assert (\n        order_by_points_v2([1, 11, -1, -11, -12])"}
{"task_id": "python/68", "language": "python", "completion": "return len(list(filter(lambda x: x>10 and x%2 and str(x)[0] != str(x)[-1], nums)))\n    \n\ndef specialFilter(nums):\n    \"\"\"Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n    \n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len(list(filter(lambda x: x>10 and x%2 and str(x)[0] != str(x)[-1], nums)))\n    \n\ndef specialFilter(nums):\n    \"\"\"Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n    \n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len(list(filter(lambda x: x>10 and x%2 and str(x)[0] != str(x)[-1], nums)))\n    \n\ndef specialFilter(nums):\n    \"\"\"Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n    \n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len(list(filter(lambda x: x>10 and x%2 and str(x)[0] != str(x)[-1], nums)))\n    \n\ndef specialFilter(nums):\n    \"\"\"Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n    \n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len(list(filter(lambda x: x>10 and x%2 and str(x)[0] != str(x)[-1], nums)))\n    \n\ndef specialFilter(nums):\n    \"\"\"Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n    \n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len(list(filter(lambda x: x>10 and x%2 and str(x)[0] != str(x)[-1], nums)))\n    \n\ndef specialFilter(nums):\n    \"\"\"Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n    \n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len(list(filter(lambda x: x>10 and x%2 and"}
{"task_id": "python/68", "language": "python", "completion": "counter = 0\n    for x in nums:\n        if (x > 10):\n            if (x % 2) != 0 and (nums[0] % 2) != 0 and (nums[-1] % 2) != 0:\n                counter += 1\n            \n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\n\ndef uniqueLetterString(s):\n    \"\"\"Schreiben Sie eine Funktion uniqueLetterString(s), die die Anzahl der Zeichen in s zur\u00fcckgibt, die nur einmal vorkommen. Zum Beispiel:\n    \n    uniqueLetterString(\"abcde\") => 5\n    uniqueLetterString(\"aabbc\") => 4\n    \"\"\"\n    \n    return len(set(s))\n\nprint(uniqueLetterString(\"abcde\"))\nprint(uniqueLetterString(\"aabbc\"))\n\n\n\ndef oddIndices(nums):\n    \"\"\"Schreiben Sie eine Funktion oddIndices(nums), die aus einem Array von ganzen Zahlen den Wert der Zahlen an den Index, an dem sie sich befinden zur\u00fcckgibt. Zum Beispiel:\n    \n    oddIndices([1, 1, 2, 3]) => 1\n    oddIndices([2, 3, 5, 7]) => 2\n    oddIndices([11, 1, 3, 2, 11, 5, 1, 2]) => 3\n    \"\"\"\n    \n    \n    \n    return nums[1::2]\n\nprint(oddIndices([1, 1, 2, 3]))\nprint(oddIndices([2, 3, 5, 7]))\nprint(oddIndices([11, 1, 3, 2, 11, 5, 1, 2]))\n\n\n\n\ndef isPalindrom(string):\n    \"\"\"Schreiben Sie eine Funktion isPalindrom(string), die True zur\u00fcckgibt, wenn eine Zeichenkette ein Palindrom ist. Zum Beispiel:\n    \n    isPalindrom(\"anna\") => True\n    isPalindrom(\"racecar\") => True\n    isPalindrom(\"abcba\") => True\n    \"\"\"\n    \n    return string == string[::-1]\n\nprint(isPalindrom(\"anna\"))\nprint(isPalindrom(\"racecar\"))\nprint(isPalindrom(\"abcba\"))\n\n\n\ndef isPalindrome(nums):\n    \"\"\"Schreiben Sie eine Funktion isPalindrome(nums), die True zur\u00fcckgibt, wenn ein Array von ganzen Zahlen ein Palindrom ist. Zum Beispiel:\n    \n    isPalindrome([1, 1, 2, 3]) => False\n    isPalindrome([2, 3, 5, 7]) => False\n    isPalindrome([33, 3, 3, 3, 33]) => True\n    \"\"\"\n    \n    return nums == nums[::-1]\n\nprint(isPalindrome([1, 1, 2, 3]))\nprint(isPalindrome([2, 3, 5, 7]))\nprint(isPalindrome([33, 3, 3, 3, 33]))\n\n\n\n\ndef isPermutation(a, b):\n    \"\"\"Schreiben Sie eine Funktion isPermutation(a, b), die True zur\u00fcckgibt, wenn a und b die gleichen Buchstaben enthalten, aber in jeder anderen Reihenfolge. Zum Beispiel:\n    \n    isPermutation(\"abc\", \"bac\") => True\n    isPermutation(\"abc\", \"cba\") => True\n    isPermutation(\"abc\", \"cab\") => True\n    \"\"\"\n    \n    return sorted(a) == sorted(b)\n\nprint(isPermutation(\"abc\", \"bac\"))\nprint(isPermutation(\"abc\", \"cba\"))\nprint(isPermutation(\"abc\", \"cab\"))\n\n\n\ndef hasSameCharacters(a, b):\n    \"\"\"Schreiben Sie eine Funktion hasSameCharacters(a, b), die True zur\u00fcckgibt, wenn die Zeichen in a gleich viele wie in b sind. Zum Beispiel:\n    \n    hasSameCharacters(\"abcd\", \"aabb\") => False\n    hasSameCharacters(\"abcd\", \"aabbcc\") => True\n    hasSameCharacters(\"abcd\", \"aabbccddd\") => False\n    \"\"\"\n    \n    return a.count(b) == a.count(a)\n\nprint(hasSameCharacters(\"abcd\", \"aabb\"))\nprint(hasSameCharacters(\"abcd\", \"aabbcc\"))\nprint(hasSameCharacters(\"abcd\", \"aabbccddd\"))\n\n\n\ndef removeDuplicates(nums):\n    \"\"\"Schreiben Sie eine Funktion removeDuplicates(nums), die jedes Element in nums nur einmal in der Reihenfolge ausgibt. Zum Beispiel:\n    \n    removeDuplicates([1, 1, 2, 3]) => [1, 2, 3]\n    removeDuplicates([1, 2, 2, 3, 4, 4, 5]) => [1, 2, 3, 4, 5]\n    \"\"\"\n    \n    \n    \n    return list(set(nums))\n\nprint(removeDuplicates([1, 1, 2, 3]))\nprint(removeDuplicates([1, 2, 2, 3, 4, 4, 5]))\n\n\n\n\ndef replaceChar(string, char):\n    \"\"\"Schreiben Sie eine Funktion replaceChar(string, char), die ein Zeichen mit einem anderen Zeichen ersetzt. Zum Beispiel:\n    \n    replaceChar(\"abc\", \"z\") => \"zab\"\n    replaceChar(\"abc\", \"c\") => \"ab\"\n    \"\"\"\n    \n    return string.replace(char, \"z\")\n\nprint(replaceChar(\"abc\", \"z\"))\nprint(replaceChar(\"abc\", \"c\"))\n\n\n\ndef rotateArray(nums, k):\n    \"\"\"Schreiben Sie eine Funktion rotateArray(nums, k), die die Elemente in nums um k verschieben. Zum Beispiel:\n    \n    rotateArray([1, 2, 3, 4, 5], 1) => [2, 3, 4, 5, 1]\n    rotateArray([1, 2, 3, 4, 5], 2) => [3, 4, 5, 1, 2]\n    \"\"\"\n    \n    \n    \n    return nums[k-1:] + nums[:k-1]\n\nprint(rotateArray([1, 2, 3, 4, 5], 1))\nprint(rotateArray([1, 2, 3, 4, 5], 2))\n\n\n\ndef rotate(nums, k):\n    \"\"\"Schreiben Sie eine Funktion rotate(nums, k), die die Elemente in nums um k verschieben. Zum Beispiel:\n    \n    rotate([1, 2, 3, 4, 5], 1) => [2, 3, 4, 5, 1]\n    rotate([1, 2, 3, 4, 5], 2) => [3, 4, 5, 1, 2]\n    rotate([1, 2, 3, 4, 5], 3) => [4, 5, 1, 2, 3]\n    \"\"\"\n    \n    \n    \n    return nums[-k:] + nums[:-k]\n\nprint(rotate([1, 2, 3, 4, 5], 1))\nprint(rotate([1, 2, 3,"}
{"task_id": "python/69", "language": "python", "completion": "# Ihr Code hier\n    \n    return len(a)\n\ndef test_get_max_triples():\n    \"\"\"\n    Gibt alle Testf\u00e4lle des get_max_triples-Tests zur\u00fcck.\n    \"\"\"\n    assert get_max_triples(1) == 1\n    assert get_max_triples(3) == 0\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 2\n    assert get_max_triples(12) == 4\n    assert get_max_triples(100) == 54\n    assert get_max_triples(1000) == 1412\n    assert get_max_triples(10000) == 40730\n    assert get_max_triples(100000) == 1192810\n    assert get_max_triples(1000000) == 31951410\n    assert get_max_triples(10000000) == 710094040\n    assert get_max_triples(100000000) == 1598321930\n    assert get_max_triples(1000000000) == 3196401280\n    assert get_max_triples(10000000000) == 6392802560\n    assert get_max_triples(100000000000) == 12785605120\n    assert get_max_triples(1000000000000) == 25571210240\n    assert get_max_triples(10000000000000) == 51142420480\n    assert get_max_triples(100000000000000) == 102284840960\n    assert get_max_triples(1000000000000000) == 204569681920\n    assert get_max_triples(10000000000000000) == 409139363840\n    assert get_max_triples(100000000000000000) == 818278727680\n    assert get_max_triples(1000000000000000000) == 1636557455360\n    assert get_max_triples(10000000000000000000) == 3273114910720\n    assert get_max_triples(100000000000000000000) == 6546229821440\n    assert get_max_triples(1000000000000000000000) == 13092459642880\n    assert get_max_triples(10000000000000000000000) == 26184919285760\n    assert get_max_triples(100000000000000000000000) == 52369838571520\n    assert get_max_triples(1000000000000000000000000) == 104739677143040\n    assert get_max_triples(10000000000000000000000000) == 209479354286080\n    assert get_max_triples(100000000000000000000000000) == 418958708572160\n    assert get_max_triples(1000000000000000000000000000) == 837917417144320\n    assert get_max_triples(10000000000000000000000000000) == 1675834834288640\n    assert get_max_triples(100000000000000000000000000000) == 3351669668577920\n    assert get_max_triples(100000000000000000000000000000) == 6703339337155840\n    assert get_max_triples(1000000000000000000000000000000) == 13406678667021760\n    assert get_max_triples(1000000000000000000000000000000) == 26813357334043520\n    assert get_max_triples(10000000000000000000000000000000) == 53626714668087040\n    assert get_max_triples(10000000000000000000000000000000"}
{"task_id": "python/69", "language": "python", "completion": "def is_multiple_of_3(x):\n        return x % 3 == 0\n    \n    def create_array(n):\n        return [i * i - i + 1 for i in range(1, n + 1)]\n    \n    def get_triples(a):\n        count = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                for k in range(j + 1, len(a)):\n                    if is_multiple_of_3(a[i] + a[j] + a[k]):\n                        count += 1\n        return count\n    \n    a = create_array(n)\n    return get_triples(a)"}
{"task_id": "python/70", "language": "python", "completion": "if planet1 not in solar_system or planet2 not in solar_system:\n        return tuple()\n    \n    planets = tuple(solar_system[planet1].keys()) + tuple(solar_system[planet2].keys())\n    return tuple(sorted(planets))\n\ndef bf_test():\n    '''\n    Bitte nicht ver\u00e4ndern:\n    '''\n    planet_pairs = [\n        (\"Jupiter\", \"Neptune\"),\n        (\"Earth\", \"Mercury\"),\n        (\"Mercury\", \"Uranus\"),\n        (\"Uranus\", \"Pluto\"),\n        (\"Mercury\", \"Pluto\"),\n        (\"Neptune\", \"Pluto\"),\n        (\"Mercury\", \"Earth\"),\n        (\"Mercury\", \"Venus\"),\n        (\"Venus\", \"Earth\")\n    ]\n    for planet1, planet2 in planet_pairs:\n        assert len(bf(planet1, planet2)) > 0, f\"bf('{planet1}', '{planet2}') gibt leeres Tupel zur\u00fcck, aber soll nicht leer sein\"\n        result = bf(planet1, planet2)\n        assert type(result) is tuple, f\"bf('{planet1}', '{planet2}') gibt '{type(result)}', aber es soll ein Tupel zur\u00fcckgegeben werden\"\n        assert len(result) == 4, f\"bf('{planet1}', '{planet2}') gibt '{len(result)}', aber es soll 4 Planeten zur\u00fcckgegeben werden\"\n        assert type(result[0]) is str, f\"bf('{planet1}', '{planet2}') gibt '{type(result[0])}', aber es soll ein String zur\u00fcckgegeben werden\"\n        assert result[0] in solar_system[planet1], f\"bf('{planet1}', '{planet2}') gibt '{result[0]}' zur\u00fcck, aber '{planet1}' muss in '{result[0]}' enthalten sein\"\n        assert result[0] in solar_system[planet2], f\"bf('{planet1}', '{planet2}') gibt '{result[0]}' zur\u00fcck, aber '{planet2}' muss in '{result[0]}' enthalten sein\"\n        for planet in result:\n            assert planet in solar_system, f\"bf('{planet1}', '{planet2}') gibt '{planet}' zur\u00fcck, aber es muss '{planet}' im Sonnensystem enthalten sein\"\n        assert planet1 in result and planet2 in result, f\"bf('{planet1}', '{planet2}') gibt '{result}' zur\u00fcck, aber es soll '{planet1}' und '{planet2}' enthalten sein\"\n        assert result[1:] == tuple(sorted(result[1:])), f\"bf('{planet1}', '{planet2}') gibt '{result}' zur\u00fcck, aber es soll die Umlaufbahn von '{planet1}' nach '{planet2}' sortiert sein\"\n        print(f\"bf('{planet1}', '{planet2}') ist korrekt\")\n\nsolar_system = {\n    \"Mercury\": {\n        \"Moon\": {},\n        \"Phobos\": {},\n        \"Deimos\": {}\n    },\n    \"Venus\": {\n        \"Ring\": {\n            \"Ceres\": {},\n            \"Pallas\": {},\n            \"Vesta\": {},\n            \"Hygiea\": {}\n        }\n    },\n    \"Earth\": {\n        \"Moon\": {\n            \"Phobos\": {},\n            \"Deimos\": {}\n        },\n        \"Moon\": {},\n        \"Phobos\": {},\n        \"Deimos\": {}\n    },\n    \"Mars\": {\n        \"Moon\": {\n            \"Phobos\": {},\n            \"Deimos\": {}\n        },\n        \"Phobos\": {},\n        \"Deimos\": {}\n    },\n    \"Jupiter\": {\n        \"Moon\": {\n            \"Io\": {},\n            \"Europa\": {},\n            \"Ganymede\": {},\n            \"Callisto\": {}\n        },\n        \"Moon\": {},\n        \"Io\": {},\n        \"Europa\": {},\n        \"Ganymede\": {},\n        \"Callisto\": {}\n    },\n    \"Saturn\": {\n        \"Moon\": {\n            \"Titan\": {},\n            \"Enceladus\": {},\n            \"Mimas\": {},\n            \"Tethys\": {}\n        },\n        \"Moon\":"}
{"task_id": "python/70", "language": "python", "completion": "# write your code here\n    planet1_orb = planets.index(planet1)\n    planet2_orb = planets.index(planet2)\n    planets_to_fly = []\n\n    for planet_orb in planets:\n        orb_index = planets.index(planet_orb)\n        if orb_index > planet1_orb and orb_index < planet2_orb:\n            planets_to_fly.append(planet_orb)\n    return tuple(planets_to_fly)\n    \n#---------------------------------------------------------------------------------------\n\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    '''\n    Es gibt acht Planeten in unserem Sonnensystem: Der Sonne am n\u00e4chsten ist Merkur, dann folgen Venus, die Erde, Mars, Jupiter, Saturn, Uranus und Neptun. Schreiben Sie eine Funktion, die zwei Planetennamen als Zeichenketten planet1 und planet2 annimmt. Die Funktion sollte ein Tupel zur\u00fcckgeben, das alle Planeten enth\u00e4lt, deren UmlaufDusty zwischen der Umlaufbahn von Planet1 und der Umlaufbahn von Planet2 liegen und nach N\u00e4he zur Sonne sortiert sind. Die Funktion sollte ein leeres Tupel zur\u00fcckgeben, wenn planet1 oder planet2 keine korrekten Planetennamen sind. Beispiele:\n    \n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # write your code here\n    planet1_orb = planets.index(planet1)\n    planet2_orb = planets.index(planet2)\n    planets_to_fly = []\n\n    for planet_orb in planets:\n        orb_index = planets.index(planet_orb)\n        if orb_index > planet1_orb and orb_index < planet2_orb:\n            planets_to_fly.append(planet_orb)\n    return tuple(planets_to_fly)\n    \ndef bf(planet1, planet2):\n    '''\n    Es gibt acht Planeten in unserem Sonnensystem: Der Sonne am n\u00e4chsten ist Merkur, dann folgen Venus, die Erde, Mars, Jupiter, Saturn, Uranus und Neptun. Schreiben Sie eine Funktion, die zwei Planetennamen als Zeichenketten planet1 und planet2 annimmt. Die Funktion"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n        \"\"\"Gibt genau dann true, wenn n eine Primzahl ist\"\"\"\n        return n > 1 and all(not(n % i == 0) for i in range(2, n))\n    \n    if is_prime(n):\n        return x\n    else:\n        return y\n    \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    def test_is_prime(n):\n        \"\"\"Gibt genau dann true, wenn n eine Primzahl ist\"\"\"\n        return n > 1 and all(not(n % i == 0) for i in range(2, n))\n    \n    assert all(test_is_prime(n) for n in [1, 2, 3, 5, 7, 11, 13, 17])\n    assert all(not test_is_prime(n) for n in [0, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18])\n    \n    import random\n    for _ in range(100):\n        n = random.randrange(1, 1000000000000000000)\n        assert x_or_y(n, 34, 12) == 34 or x_or_y(n, 8, 5) == 5, \"x_or_y hat nicht richtig geklappt!\"\n    \n    print(\"Alles ok!\")\n    \n    \ndef x_or_y(n, x, y):\n    \"\"\"Ein einfaches Programm, das den Wert von x zur\u00fcckgeben sollte, wenn n eine Primzahl ist, und den Wert von y zur\u00fcckgeben sollte, wenn nicht.\n\n    Beispiele:\n    \n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    def is_prime(n):\n        \"\"\"Gibt genau dann true, wenn n eine Primzahl ist\"\"\"\n        return n > 1 and all(not(n % i == 0) for i in range(2, n))\n    \n    if is_prime(n):\n        return x\n    else:\n        return y\n    \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    def test_is_prime(n):\n        \"\"\"Gibt genau dann true, wenn n eine Primzahl ist\"\"\"\n        return n > 1 and all(not(n % i == 0) for i in range(2, n))\n    \n    assert all(test_is_prime(n) for n in [1, 2, 3, 5, 7, 11, 13, 17])\n    assert all(not test_is_prime(n) for n in [0, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18])\n    \n    import random\n    for _ in range(100):\n        n = random.randrange(1, 1000000000000000000)\n        assert x_or_y(n, 34, 12) == 34 or x_or_y(n, 8, 5) == 5, \"x_or_y hat nicht richtig geklappt!\"\n    \n    print(\"Alles ok!\")"}
{"task_id": "python/72", "language": "python", "completion": "sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\n\n\ndef sum_of_digits(num):\n    '''\n    Gib die Summe aller Ziffern einer Zahl zur\u00fcck.\n    \n    sum_of_digits(234) == 9\n    sum_of_digits(1) == 1\n    sum_of_digits(0) == 0\n    sum_of_digits(1000) == 1\n    sum_of_digits(1111111111111111111111111111111"}
{"task_id": "python/72", "language": "python", "completion": "# Check if input list is empty\n    if not lst:\n        return 0\n\n    # Filter out negative, non-integer values and square them\n    squared_sum = sum(x**2 for x in lst if x > 0 and isinstance(x, int))\n\n    return squared_sum"}
{"task_id": "python/73", "language": "python", "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        if strength > strongest_strength:\n            strongest_extension = class_name + '.' + extension\n            strongest_strength = strength\n        elif strength == strongest_strength:\n            if class_name + '.' + extension in extensions:\n                strongest_extension = class_name + '.' + extension\n                strongest_strength = strength\n    return strongest_extension\nimport unittest\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        self.assertEqual(Strongest_Extension('my_class', ['AA', 'Be', 'CC']), 'my_class.AA')\n        self.assertEqual(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'd', '"}
{"task_id": "python/73", "language": "python", "completion": "# Write your code here\n    \n    # Create a dictionary to store the number of uppercase and lowercase letters for each extension\n    ext_stats = {}\n    \n    # Loop through each extension and update the dictionary\n    for extension in extensions:\n        upper_count = sum(1 for c in extension if c.isupper())\n        lower_count = sum(1 for c in extension if c.islower())\n        if extension in ext_stats:\n            ext_stats[extension] = (upper_count, lower_count)\n        else:\n            ext_stats[extension] = (upper_count, lower_count)\n    \n    # Find the strongest extension\n    strongest_extension = ''\n    strongest_strength = float('-inf')\n    for extension, stats in ext_stats.items():\n        strength = stats[0] - stats[1]\n        if strength > strongest_strength or (strength == strongest_strength and exte"}
{"task_id": "python/74", "language": "python", "completion": "return (b in a or (b+b) in a)\n    \n    \n    \n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or (b + b) in a\n\n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or (b + b) in a\n\n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or (b + b) in a\n\n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or (b + b) in a\n\n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or (b + b) in a\n\n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or (b + b) in a\n\n\ndef cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner"}
{"task_id": "python/74", "language": "python", "completion": "if b in a or b in a.replace(' ','') or b in a.replace('',' '):\n        return True\n    else:\n        return False\n    \n\ndef cycpattern_check_1(a , b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n    \n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    \n    if b in a or b in a.replace(' ','') or b in a.replace('',' '):\n        return True\n    else:\n        return False\n    \n\ndef cycpattern_check_2(a , b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n    \n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    \n    if b in a or b in a.replace(' ','') or b in a.replace('',' '):\n        return True\n    else:\n        return False\n    \n\ndef cycpattern_check_3(a , b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n    \n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    \n    if b in a or b in a.replace(' ','') or b in a.replace('',' '):\n        return True\n    else:\n        return False\n    \n    \ndef cycpattern_check_4(a , b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n    \n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    \n    if b in a or b in a.replace(' ','') or b in a.replace('',' '):\n        return True\n    else:\n        return Fals"}
{"task_id": "python/75", "language": "python", "completion": "roman_numerals = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    mini_roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n\n    if number < 1 or number > 1000:\n        raise ValueError(\"Die Zahl muss zwischen 1 und 1000 liegen.\")\n\n    result = \"\"\n    for arabic, roman in sorted(mini_roman_numerals.items(), reverse=True):\n        if number >= arabic:\n            result += roman\n            number -= arabic\n\n    return result.lower()\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed successfully.\")"}
{"task_id": "python/75", "language": "python", "completion": "# Wir beginnen mit einer leeren Zeichenkette, um die einzelnen Zeichen hinzuzuf\u00fcgen.\n    roman = ''\n\n    # Wir iterieren durch unsere Zahlen absteigend, um sie nach dem Gr\u00f6sster zu lesen.\n    for value, numeral in roman_numeral_pairs:\n        # Wir addieren jedes Mal, wenn die aktuelle Zahl gr\u00f6\u00dfer oder gleich dem aktuellen Wert ist.\n        while number >= value:\n            roman += numeral\n            number -= value\n\n    return roman.lower()\n\n# Diese Liste enth\u00e4lt die romasche Zahlen und ihre ndigequivalente Zeichen.\nroman_numeral_pairs = [\n    (1000, 'm'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cd'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i')\n]\n\nroman_numerals = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n}\n\ndef roman_to_int(roman):\n    \"\"\"\n    Gegebenen eine r\u00f6mische Numeral, erhalte ihre ndigequivalente Ganzzahl als Zahl und gib sie zur\u00fcck.\nEinschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n    \n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n    total = 0\n\n    # Wir iterieren durch unsere romasche Zahlen.\n    for i in range(len(roman)):\n        # Wir addieren das aktuelle romasche Zeichen zu total,\n        total += roman_numerals[roman[i]]\n        # Wenn das aktuelle romasche Zeichen gr\u00f6\u00dfer als das n\u00e4chste romasche Zeichen ist,\n        # subtrahieren wir das n\u00e4chste romasche Zeichen von total.\n        if i + 1 < len(roman) and roman_numerals[roman[i]] < roman_numerals[roman[i + 1]]:\n            total -= roman_numerals[roman[i]]\n    return total\n\n\ndef romauscher(romannumber: str) -> int:\n    \"\"\"\n    Gegebenen eine r\u00f6mische Numeral, erhalte ihre ndigequivalente Ganzzahl als Zahl und gib sie zur\u00fcck.\n    Einschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n\n    >>> romauscher('xix') == 19\n    >>> romauscher('clii') == 152\n    >>> romauscher('cdxxvi') == 426\n    \"\"\"\n    return roman_to_int(romannumber)\n\ndef romauscher2(romannumber: str) -> int:\n    \"\"\"\n    Gegebenen eine r\u00f6mische Numeral, erhalte ihre ndigequivalente Ganzzahl als Zahl und gib sie zur\u00fcck.\n    Einschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n\n    >>> romauscher2('xix') == 19\n    >>> romauscher2('clii') == 152\n    >>> romauscher2('cdxxvi') == 426\n    \"\"\"\n    total = 0\n    i = 0\n    while i < len(romannumber):\n        if i + 1 < len(romannumber):\n            if romannumber[i] == 'I':\n                if romannumber[i + 1] == 'V':\n                    total += 4\n                    i += 2\n                elif romannumber[i + 1] == 'X':\n                    total += 9\n                    i += 2\n                else:\n                    total += 1\n                    i += 1\n            elif romannumber[i] == 'X':\n                if romannumber[i + 1] == 'L':\n                    total += 40\n                    i += 2\n                elif romannumber[i + 1] == 'C':\n                    total += 90\n                    i += 2\n                else:\n                    total += 10\n                    i += 1\n            elif romannumber[i] == 'C':\n                if romannumber[i + 1] == 'D':\n                    total += 400\n                    i += 2\n                elif romannumber[i + 1] == 'M':\n                    total += 900\n                    i += 2\n                else:\n                    total += 100\n                    i += 1\n            elif romannumber[i]"}
{"task_id": "python/76", "language": "python", "completion": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "python/76", "language": "python", "completion": "if a**2+b**2 == c**2:\n        return True\n    else:\n        return False\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\ndef palindrome(word):\n    '''\n    Gib True zur\u00fcck, wenn ein Wort ohne Leerzeichen und Gro\u00df- und Kleinschreibung gleich ist wie das Wort backwards, also beim Schreiben von links nach rechts wieder. Zum Beispiel:\n\n    palindrome('racecar') == True\n    palindrome('abcde') == False\n    '''\n    if word == word[::-1]:\n        return True\n    else:\n        return False\nprint(palindrome('racecar'))\nprint(palindrome('abcde'))\n\ndef factorial(n):\n    '''\n    Gib die Fakult\u00e4t von n zur\u00fcck.\n\n    factorial(0) == 1\n    factorial(1) == 1\n    factorial(2) == 2\n    factorial(3) == 6\n    factorial(4) == 24\n    factorial(5) == 120\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\nprint(factorial(0))\nprint(factorial(1))\nprint(factorial(2))\nprint(factorial(3))\nprint(factorial(4))\nprint(factorial(5))\n\ndef sum_of_squares(numbers):\n    '''\n    Gib die Summe der Quadrate aller Zahlen zur\u00fcck.\n    sum_of_squares([1, 2, 3]) == 14\n    '''\n    sum = 0\n    for number in numbers:\n        sum += number**2\n    return sum\nprint(sum_of_squares([1, 2, 3]))\n\ndef sum_of_cubes(numbers):\n    '''\n    Gib die Summe der Kuben aller Zahlen zur\u00fcck.\n    sum_of_cubes([1, 2, 3]) == 14\n    '''\n    sum = 0\n    for number in numbers:\n        sum += number**3\n    return sum\nprint(sum_of_cubes([1, 2, 3]))\n\ndef mean(numbers):\n    '''\n    Gib den Mittelwert der Zahlen zur\u00fcck.\n    mean([1, 2, 3]) == 2\n    mean([1, 2, 3, 4, 5]) == 3\n    '''\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)\nprint(mean([1, 2, 3]))\nprint(mean([1, 2, 3, 4, 5]))\n\ndef median(numbers):\n    '''\n    Gib den Median der Zahlen zur\u00fcck.\n    median([1, 2, 3]) == 2\n    median([3, 1, 2]) == 2\n    median([1, 3, 2]) == 2\n    median([1, 3, 2, 4]) == 2.5\n    median([3, 1, 2, 4]) == 2.5\n    median([1, 3, 2, 4, 5]) == 3\n    median([3, 1, 2, 4, 5]) == 3\n    median([1, 3, 2, 4, 5]) == 3\n    median([1, 3, 2, 4, 5, 6]) == 3.5\n    '''\n    numbers.sort()\n    if len(numbers)%2==0:\n        return (numbers[int(len(numbers)/2)]+numbers[int(len(numbers)/2-1)])/2\n    else:\n        return numbers[int(len(numbers)/2)]\nprint(median([1, 2, 3]))\nprint(median([3, 1, 2]))\nprint(median([1, 3, 2]))\nprint(median([1, 3, 2, 4]))\nprint(median([3, 1, 2, 4]))\nprint(median([1, 3, 2, 4, 5]))\nprint(median([3, 1, 2, 4, 5]))\nprint(median([1, 3, 2, 4, 5]))\nprint(median([1, 3, 2, 4, 5, 6]))\nprint(median([3, 1, 2, 4, 5, 6]))\n\ndef mode(numbers):\n    '''\n    Gib den Modus der Zahlen zur\u00fcck.\n    mode([1, 2, 3]) == 1\n    mode([1, 2, 3, 3, 3, 4, 5, 5, 5]) == 3\n    '''\n    count = 0\n    mode = 0\n    for number in numbers:\n        if numbers.count(number)>count:\n            mode = number\n            count = numbers.count(number)\n    return mode\nprint(mode([1, 2, 3]))\nprint(mode([1, 2, 3, 3, 3, 4, 5, 5, 5]))\n\ndef mean(numbers):\n    '''\n    Gib den Mittelwert der Zahlen zur\u00fcck.\n    mean([1, 2, 3]) == 2\n    mean([1, 2, 3, 4, 5]) == 3\n    '''\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)\nprint(mean([1, 2, 3]))\nprint(mean([1, 2, 3, 4, 5]))\n\ndef median(numbers):\n    '''\n    Gib den Median der Zahlen zur\u00fcck.\n    median([1, 2, 3]) == 2\n    median([3, 1, 2]) == 2\n    median([1, 3, 2]) == 2\n    median([1, 3, 2, 4]) == 2.5\n    median([3, 1, 2, 4]) == 2.5\n    median([1, 3, 2, 4, 5]) == 3\n    median([3, 1, 2, 4, 5]) == 3\n    median([1, 3, 2, 4, 5]) == 3\n    median([1, 3, 2, 4, 5, 6]) == 3.5\n    '''\n    numbers.sort()\n    if len(numbers)%2==0:\n        return (numbers[int(len(numbers)/2)]+numbers[int(len(numbers)/2-1)])/2\n    else:\n        return numbers[int(len(numbers)/2)]\nprint(median([1, 2, 3]))\nprint(median([3, 1, 2]))\nprint(median([1,"}
{"task_id": "python/77", "language": "python", "completion": "pass\n\n\n# Tests\n\ndef test_solve():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve()\n\ndef test_solve_2():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_2()\n\ndef test_solve_3():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_3()\n\ndef test_solve_4():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_4()\n\ndef test_solve_5():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_5()\n\ndef test_solve_6():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_6()\n\ndef test_solve_7():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_7()\n\ndef test_solve_8():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_8()\n\ndef test_solve_9():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_9()\n\ndef test_solve_10():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_10()\n\ndef test_solve_11():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_11()\n\ndef test_solve_12():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_12()\n\ndef test_solve_13():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_13()\n\ndef test_solve_14():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_14()\n\ndef test_solve_15():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_15()\n\ndef test_solve_16():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_16()\n\ndef test_solve_17():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_17()\n\ndef test_solve_18():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_18()\n\ndef test_solve_19():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_19()\n\ndef test_solve_20():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_20()\n\ndef test_solve_21():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_21()\n\ndef test_solve_22():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_22()\n\ndef test_solve_23():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_23()\n\ndef test_solve_24():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_24()\n\ndef test_solve_25():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_25()\n\ndef test_solve_26():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_26()\n\ndef test_solve_27():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_27()\n\ndef test_solve_28():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_28()\n\ndef test_solve_29():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_29()\n\ndef test_solve_30():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_30()\n\ndef test_solve_31():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_31()\n\ndef test_solve_32():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_32()\n\ndef test_solve_33():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_33()\n\ndef test_solve_34():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print(\"Ok!\")\n    \ntest_solve_34()\n\ndef test_solve_35():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solv"}
{"task_id": "python/77", "language": "python", "completion": "l_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    l_low = \"abcdefghijklmnopqrstuvwxyz\"\n    l_up_rev = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    \n    for i in range(len(s)):\n        if s[i] in l_up_rev:\n            if s[i] in l_up:\n                s = s[:i] + s[i].lower() + s[i+1:]\n            if s[i] in l_low:\n                s = s[:i] + s[i].upper() + s[i+1:]\n    return s\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n# Aufgabe 2\ndef solve(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\n    Wenn das erste Zeichen des Strings ein Buchstabe ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Ziffern ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Sonderzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es um.\n    Wenn das erste Zeichen des Strings ein Leerzeichen ist, kehre es"}
{"task_id": "python/78", "language": "python", "completion": "if text == '':\n        return None\n    else:\n        import hashlib\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n\nimport hashlib\ndef md5_to_string(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt die zugeh\u00f6rige md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n\ndef string_to_sha1(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt seine sha1-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \n\n    >>> string_to_sha1('Hello world') == '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362996526e'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        import hashlib\n        return hashlib.sha1(text.encode('utf-8')).hexdigest()\n\ndef sha1_to_string(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt die zugeh\u00f6rige sha1-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \n\n    >>> sha1_to_string('2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362996526e') == 'Hello world'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.sha1(text.encode('utf-8')).hexdigest()"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\ndef test_string_to_md5():\n    import pytest\n    with pytest.raises(TypeError):\n        string_to_md5(None)\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert string_to_md5('') == 'd41d8cd98f00b204e9800998ecf8427e'\n    assert string_to_md5('Hello world') != '3e25960a79dbc69b674cd4ec67a72c62'\n\ndef md5_to_string(md5):\n    \"\"\"\n    Gegeben eine Zeichenkette 'md5', gibt die md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'md5' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62')\n    'Hello world'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(md5).hexdigest()\n\ndef test_md5_to_string():\n    import pytest\n    with pytest.raises(TypeError):\n        md5_to_string(None)\n    with pytest.raises(ValueError):\n        md5_to_string('3e25960a79dbc69b674cd4ec67a72c621')\n    assert md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    assert md5_to_string('d41d8cd98f00b204e9800998ecf8427e') == ''\n\ndef test_string_to_md5():\n    import pytest\n    with pytest.raises(TypeError):\n        string_to_md5(None)\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert string_to_md5('') == 'd41d8cd98f00b204e9800998ecf8427e'\n    assert string_to_md5('Hello world') != '3e25960a79dbc69b674cd4ec67a72c62'\n\ndef test_md5_to_string():\n    import pytest\n    with pytest.raises(TypeError):\n        md5_to_string(None)\n    with pytest.raises(ValueError):\n        md5_to_string('3e25960a79dbc69b674cd4ec67a72c621')\n    assert md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    assert md5_to_string('d41d8cd98f00b204e9800998ecf8427e') == ''\n\ndef test_string_to_md5_testvector():\n    import pytest\n    with pytest.raises(TypeError):\n        string_to_md5(None)\n    with pytest.raises(ValueError):\n        string_to_md5('3e25960a79dbc69b674cd4ec67a72c621')\n    assert string_to_md5('abc') == 'ba7816bf8f01cfea413447a9dc9425d3'\n    assert string_to_md5('message digest') == 'f7846f55cfde432eeccc694d91917c09'\n    assert string_to_md5('abcdefghijklmnopqrstuvwxyz') == 'c3fcd3d76192e4007dfb496ee8ceca45'\n    assert string_to_md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') == 'd174ab98d277d9f5a5611c2c9f419d9f'\n    assert string_to_md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890') == '57edf4a22be3c955ac49da2e2107b67a'\n\ndef test_md5_to_string_testvector():\n    import pytest\n    with pytest.raises(TypeError):\n        md5_to_string(None)\n    with pytest.raises(ValueError):\n        md5_to_string('3e25960a79dbc69b674cd4ec67a72c621')\n    assert md5_to_string('ba7816bf8f01cfea413447a9dc9425d3') == 'abc'\n    assert md5_to_string('f7846f55cfde432eeccc694d91917c09') == 'message digest'\n    assert md5_to_string('c3fcd3d76192e4007dfb496ee8ceca45') == 'abcdefghijklmnopqrstuvwxyz'\n    assert md5_to_string('d174ab98d277d9f5a5611c2c9f419d9f') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    assert md5_to_string('57edf4a22be3c955ac49da2e2107b67a') == '12345678901234567890123456789012345678901234567890123456789012345678901234567890'\n\ndef test_md5_to_string_testvector():\n    import pytest\n    with pytest.raises(TypeError):\n        md5_to_string(None)\n    with pytest.raises(ValueError):\n        md5_to_string('3e25960a79dbc69b674cd4ec67a72c621')\n    assert md5_to_string('ba7816bf8f01cfea413447a9d"}
{"task_id": "python/79", "language": "python", "completion": "lst = []\n    if a <= b:\n        for i in range (a,b+1):\n            if i % 2 == 0:\n                lst.append(i)\n    else:\n        for i in range (b, a+1):\n            if i % 2 == 0:\n                lst.append(i)\n    return lst\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))\nprint(generate_integers(4, 2))\nprint(generate_integers(3, 1))\nprint(generate_integers(1, 1))\nprint(generate_integers(1, 2))\nprint(generate_integers(2, 1))\nprint(generate_integers(5, 5))\nprint(generate_integers(5, 6))\nprint(generate_integers(6, 5))\nprint(generate_integers(1, 3))\nprint(generate_integers(3, 1))\nprint(generate_integers(2, 3))\nprint(generate_integers(3, 2))\nprint(generate_integers(1, 10))\nprint(generate_integers(10, 1))\nprint(generate_integers(1, 5))\nprint(generate_integers(5, 1))\nprint(generate_integers(1, 4))\nprint(generate_integers(4, 1))\nprint(generate_integers(1, 100))\nprint(generate_integers(100, 1))\nprint(generate_integers(1, 1000))\nprint(generate_integers(1000, 1))\nprint(generate_integers(1, 500))\nprint(generate_integers(500, 1))\nprint(generate_integers(1, 50000))\nprint(generate_integers(50000, 1))\nprint(generate_integers(1, 100000))\nprint(generate_integers(100000, 1))\nprint(generate_integers(1, 200000))\nprint(generate_integers(200000, 1))\nprint(generate_integers(1, 300000))\nprint(generate_integers(300000, 1))\nprint(generate_integers(1, 500000))\nprint(generate_integers(500000, 1))\nprint(generate_integers(1, 1000000))\nprint(generate_integers(1000000, 1))\nprint(generate_integers(1, 10000000))\nprint(generate_integers(10000000, 1))\nprint(generate_integers(1, 100000000))\nprint(generate_integers(100000000, 1))\nprint(generate_integers(1, 1000000000))\nprint(generate_integers(1000000000, 1))\nprint(generate_integers(1, 10000000000))\nprint(generate_integers(10000000000, 1))\nprint(generate_integers(1, 100000000000))\nprint(generate_integers(100000000000, 1))\nprint(generate_integers(1, 1000000000000))\nprint(generate_integers(1000000000000, 1))\nprint(generate_integers(1, 10000000000000))\nprint(generate_integers(10000000000000, 1))\nprint(generate_integers(1, 100000000000000))\nprint(generate_integers(100000000000000, 1))\nprint(generate_integers(1, 1000000000000000))\nprint(generate_integers(1000000000000000, 1))\nprint(generate_integers(1, 10000000000000000))\nprint(generate_integers(10000000000000000, 1))\nprint(generate_integers(1, 100000000000000000))\nprint(generate_integers(100000000000000000, 1))\nprint(generate_integers(1, 1000000000000000000))\nprint(generate_integers(1000000000000000000, 1))\nprint(generate_integers(1, 10000000000000000000))\nprint(generate_integers(10000000000000000000, 1))\nprint(generate_integers(1, 100000000000000000000))\nprint(generate_integers(100000000000000000000, 1))\nprint(generate_integers(1, 1000000000000000000000))\nprint(generate_integers(1000000000000000000000, 1))\nprint(generate_integers(1, 10000000000000000000000))\nprint(generate_integers(10000000000000000000000, 1))\nprint(generate_integers(1, 100000000000000000000000))\nprint(generate_integers(100000000000000000000000, 1))\nprint(generate_integers(1, 1000000000000000000000000))\nprint(generate_integers(1000000000000000000000000, 1))\nprint(generate_integers(1, 10000000000000000000000000))\nprint(generate_integers(10000000000000000000000000, 1))\nprint(generate_integers(1, 100000000000000000000000000))\nprint(generate_integers(100000000000000000000000000, 1))\nprint(generate_integers(1, 1000000000000000000000000000))\nprint(generate_integers(1000000000000000000000000000, 1))\nprint(generate_integers(1, 10000000000000000000000000000))\nprint(generate_integers(10000000000000000000000000000, 1))\nprint(generate_integers(1, 100000000000000000000000000000))\nprint(generate_integers(100000000000000000000000000000, 1))\nprint(generate_integers(1, 1000000000000000000000000000000))\nprint(generate_integers(1000000000000000000000000000000, 1))\nprint(generate_integers(1, 10000000000000000000000000000000))\nprint(generate_integers(10000000000000000000000000000000, 1))\nprint(generate_integers(1, 10000000000000000000000000000000"}
{"task_id": "python/79", "language": "python", "completion": "integers = [a + i for i in range(b - a + 1) if a + i % 2 == 0]\n    return integers\n    raise NotImplementedError\n\ndef generate_fibonacci(n):\n    \"\"\"\n    Gegeben ist eine positive ganze Zahl n. Gib die ersten n Fibonacci Zahlen zur\u00fcck.\n\n    Zum Beispiel:\n    \n    generate_fibonacci(1) => [1]\n    generate_fibonacci(2) => [1, 1]\n    generate_fibonacci(3) => [1, 1, 2]\n    generate_fibonacci(4) => [1, 1, 2, 3]\n    \"\"\"\n    fib_sequence = [1, 1]\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return fib_sequence\n    else:\n        for i in range(n - 2):\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence\n    raise NotImplementedError\n\ndef generate_primes(n):\n    \"\"\"\n    Gegeben ist eine positive ganze Zahl n. Gib alle Primzahlen zwischen 2 und n zur\u00fcck.\n\n    Zum Beispiel:\n    \n    generate_primes(2) => []\n    generate_primes(3) => [2]\n    generate_primes(4) => [2]\n    generate_primes(5) => [2, 3]\n    \"\"\"\n    if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, n + 1, 2):\n        if all(i % j != 0 for j in primes):\n            primes.append(i)\n    return primes\n    raise NotImplementedError\n\n\ndef generate_fizzbuzz(n):\n    \"\"\"\n    Gegeben ist eine positive ganze Zahl n. Gib f\u00fcr die Zahlen 1 bis n eine Zeichenfolge aus, die nach den Regeln von FizzBuzz berechnet wird.\n\n    Zum Beispiel:\n    \n    generate_fizzbuzz(1) => \"1\"\n    generate_fizzbuzz(2) => \"1, 2\"\n    generate_fizzbuzz(3) => \"1, 2, Fizz\"\n    generate_fizzbuzz(4) => \"1, 2, Fizz, 4\"\n    generate_fizzbuzz(5) => \"1, 2, Fizz, 4, Buzz\"\n    \"\"\"\n    fizzbuzz = []\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz.append(\"Buzz\")\n        else:\n            fizzbuzz.append(str(i))\n    return \", \".join(fizzbuzz)\n    raise NotImplementedError\n\ndef generate_fizzbuzz_range(n):\n    \"\"\"\n    Gegeben ist eine positive ganze Zahl n. Gib f\u00fcr die Zahlen von 1 bis n eine Zeichenfolge aus, die nach den Regeln von FizzBuzz berechnet wird.\n\n    Zum Beispiel:\n    \n    generate_fizzbuzz_range(1) => \"1\"\n    generate_fizzbuzz_range(2) => \"1, 2\"\n    generate_fizzbuzz_range(3) => \"1, 2, Fizz\"\n    generate_fizzbuzz_range(4) => \"1, 2, Fizz, 4\"\n    generate_fizzbuzz_range(5) => \"1, 2, Fizz, 4, Buzz\"\n    generate_fizzbuzz_range(10) => \"1, 2, Fizz, 4, Buzz, Fizz, 7, Fizz, 9, Buzz\"\n    \"\"\"\n    fizzbuzz_list = []\n    for i in range(1, n + 1):\n        fizzbuzz_str = \"\"\n        if i % 3 == 0:\n            fizzbuzz_str += \"Fizz\"\n        if i % 5 == 0:\n            fizzbuzz_str += \"Buzz\"\n        if fizzbuzz_str:\n            fizzbuzz_list.append(fizzbuzz_str)\n        else:\n            fizzbuzz_list.append(str(i))\n    return \", \".join(fizzbuzz_list)\n    raise NotImplementedError\n\ndef generate_fizzbuzz_range_improved(n):\n    \"\"\"\n    Gegeben ist eine positive ganze Zahl n. Gib f\u00fcr die Zahlen von 1 bis n eine Zeichenfolge aus, die nach den Regeln von FizzBuzz berechnet wird.\n\n    Zum Beispiel:\n    \n    generate_fizzbuzz_range_improved(1) => \"1\"\n    generate_fizzbuzz_range_improved(2) => \"1, 2\"\n    generate_fizzbuzz_range_improved(3) => \"1, 2, Fizz\"\n    generate_fizzbuzz_range_improved(4) => \"1, 2, Fizz, 4\"\n    generate_fizzbuzz_range_improved(5) => \"1, 2, Fizz, 4, Buzz\"\n    generate_fizzbuzz_range_improved(10) => \"1, 2, Fizz, 4, Buzz, Fizz, 7, Fizz, 9, Buzz\"\n    \"\"\"\n    fizzbuzz_list = []\n    for i in range(1, n + 1):\n        fizzbuzz_str"}

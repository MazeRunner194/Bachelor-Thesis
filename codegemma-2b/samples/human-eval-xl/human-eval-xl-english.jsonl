{"task_id": "python/0", "language": "python", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\"\"\"\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\"\"\"\n\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\"\"\"\n\n\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return Fals"}
{"task_id": "python/0", "language": "python", "completion": "pass"}
{"task_id": "python/1", "language": "python", "completion": "if numbers:\n        return (sum(numbers), product(numbers))\n    return (0, 1)\n\n\ndef product(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return a product of all the integers in a list.\n    Empty product should be equal to 1.\n    >>> product([])\n    1\n    >>> product([1, 2, 3, 4])\n    24\n    \"\"\"\n    if numbers:\n        return reduce(operator.mul, numbers, 1)\n    return 1\n\n\ndef sum_of_numbers(n: int) -> int:\n    \"\"\" Given a number n, return a sum of it's digits.\n    >>> sum_of_numbers(123)\n    6\n    >>> sum_of_numbers(11111)\n    5\n    >>> sum_of_numbers(0)\n    0\n    \"\"\"\n    return sum(map(int, str(n)))"}
{"task_id": "python/1", "language": "python", "completion": "if not numbers:\n        return (0, 1)\n\n    sum_value = sum(numbers)\n    product_value = 1\n    for value in numbers:\n        product_value *= value\n\n    return (sum_value, product_value)"}
{"task_id": "python/2", "language": "python", "completion": "res = \"\"\n    for x, y in zip(a, b):\n        if x == y:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res\n\n\ndef find_xor(arr: List[int]) -> int:\n    \"\"\" Given a list arr, find XOR of all elements and return the result.\n    >>> find_xor([1, 2, 3, 4])\n    5\n    >>> find_xor([1, 1, 2, 2, 3, 3, 4, 4])\n    0\n    \"\"\"\n    res = 0\n    for n in arr:\n        res ^= n\n    return res\n\n\ndef solve(arr: List[int]) -> int:\n    \"\"\" Given a list arr, find XOR of all elements and return the result.\n    >>> solve([1, 2, 3, 4])\n    5\n    >>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n    0\n    \"\"\"\n    return find_xor(arr) ^ find_xor(range(1, len(arr) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\"\"\"Given a list arr, find XOR of all elements and return the result.\n>>> solve([1, 2, 3, 4])\n5\n>>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n0\n\"\"\"\ndef solve(arr: List[int]) -> int:\n    \"\"\" Given a list arr, find XOR of all elements and return the result.\n    >>> solve([1, 2, 3, 4])\n    5\n    >>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n    0\n    \"\"\"\n    return find_xor(arr) ^ find_xor(range(1, len(arr) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\"\"\"Given a list arr, find XOR of all elements and return the result.\n>>> solve([1, 2, 3, 4])\n5\n>>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n0\n\"\"\"\ndef solve(arr: List[int]) -> int:\n    \"\"\" Given a list arr, find XOR of all elements and return the result.\n    >>> solve([1, 2, 3, 4])\n    5\n    >>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n    0\n    \"\"\"\n    return find_xor(arr) ^ find_xor(range(1, len(arr) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\"\"\"Given a list arr, find XOR of all elements and return the result.\n>>> solve([1, 2, 3, 4])\n5\n>>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n0\n\"\"\"\ndef solve(arr: List[int]) -> int:\n    \"\"\" Given a list arr, find XOR of all elements and return the result.\n    >>> solve([1, 2, 3, 4])\n    5\n    >>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n    0\n    \"\"\"\n    return find_xor(arr) ^ find_xor(range(1, len(arr) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\"\"\"Given a list arr, find XOR of all elements and return the result.\n>>> solve([1, 2, 3, 4])\n5\n>>> solve([1, 1, 2, 2, 3, 3, 4, 4])\n0\n\"\"\"\nde"}
{"task_id": "python/2", "language": "python", "completion": "result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n\ndef get_bit_xor(data: List[str]) -> str:\n    \"\"\" Input is a list of n binary strings of length n.\n    Return XOR of all binary strings modulo 2.\n    >>> get_bit_xor(['010', '110', '001', '100'])\n    '101'\n    \"\"\"\n    if len(data) == 0:\n        return ''\n    result = string_xor(data[0], data[1])\n    for i in range(2, len(data)):\n        result = string_xor(result, data[i])\n    return result\n\n\ndef xor_strings(strs: List[str]) -> str:\n    \"\"\" Input is a list of strings.\n    Return XOR of all strings modulo 2.\n    >>> xor_strings(['010', '110', '001', '100'])\n    '101'\n    \"\"\"\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return string_xor(strs[0], strs[1])\n    if len(strs) == 3:\n        return string_xor(string_xor(strs[0], strs[1]), strs[2])\n    return xor_strings(strs[:len(strs)//2]) + xor_strings(strs[len(strs)//2:])\n\n\ndef xor_file(filename_in: str, filename_out: str) -> None:\n    \"\"\" Input is a binary file filename_in and output is a binary file\n    filename_out. Perform XOR operation on all bytes modulo 2.\n    >>> xor_file('input.txt', 'output.txt')\n    \"\"\"\n    with open(filename_in, 'rb') as f_in:\n        with open(filename_out, 'wb') as f_out:\n            prev_byte = f_in.read(1)\n            while prev_byte:\n                curr_byte = f_in.read(1)\n                if curr_byte:\n                    f_out.write(bytes([xor_bytes(prev_byte, curr_byte)]))\n                prev_byte = curr_byte\n\n\ndef xor_bytes(b1: int, b2: int) -> int:\n    \"\"\" Input are two bytes b1 and b2.\n    Perform XOR operation on these two bytes modulo 2.\n    >>> xor_bytes(1, 0)\n    1\n    \"\"\"\n    return (b1 ^ b2) & 0xff\n\n\ndef main() -> None:\n    \"\"\" Input are n binary strings of length n. Output is XOR of all binary\n    strings modulo 2.\"\"\"\n    n = int(input())\n    strs = []\n    for _ in range(n):\n        strs.append(input())\n    print(xor_strings(strs))\n\n\nif __name__ == '__main__':\n    main()\n\"\"\"\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n\ndef get_bit_xor(data: List[str]) -> str:\n    \"\"\" Input is a list of n binary strings of length n.\n    Return XOR of all binary strings modulo 2.\n    >>> get_bit_xor(['010', '110', '001', '100'])\n    '101'\n    \"\"\"\n    if len(data) == 0:\n        return ''\n    result = string_xor(data[0], data[1])\n    for i in range(2, len(data)):\n        result = string_xor(result, data[i])\n    return result\n\n\ndef xor_strings(strs: List[str]) -> str:\n    \"\"\" Input is a list of strings.\n    Return XOR of all strings modulo 2.\n    >>> xor_strings(['010', '110', '001', '100'])\n    '101'\n    \"\"\"\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return string_xor(strs[0], strs[1])"}
{"task_id": "python/3", "language": "python", "completion": "if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings:\n        string_length = len(string)\n        if string_length > longest_length:\n            longest_length = string_length\n            longest_string = string\n    return longest_string\n\n\ndef main():\n    \"\"\" Main entry point of the application.\n    \"\"\"\n    print(longest([]))\n    print(longest(['a', 'b', 'c']))\n    print(longest(['a', 'bb', 'ccc']))\n\n\nif __name__ == '__main__':\n    main()\n# %%\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings:\n        string_length = len(string)\n        if string_length > longest_length:\n            longest_length = string_length\n            longest_string = string\n    return longest_string\n\n\ndef main():\n    \"\"\" Main entry point of the application.\n    \"\"\"\n    print(longest([]))\n    print(longest(['a', 'b', 'c']))\n    print(longest(['a', 'bb', 'ccc']))\n\n\nif __name__ == '__main__':\n    main()\n# %%\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = s"}
{"task_id": "python/3", "language": "python", "completion": "if strings is None or len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    longest_length = len(longest_string)\n    for string in strings:\n        string_length = len(string)\n        if string_length > longest_length:\n            longest_string = string\n            longest_length = string_length\n    return longest_string\n    pass\n\n\ndef merge_dicts(dicts: List[dict]) -> dict:\n    \"\"\" Out of list of dictionaries, return a dictionary with all the keys as well as values in\n    all dictionaries. For instance [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}] should return {'a': 1,\n    'b': 2, 'c': 4}. Empty dictionaries and lists should return an empty dictionary.\n    >>> merge_dicts([])\n\n    >>> merge_dicts([{'a': 1, 'b': 2}])\n    {'a': 1, 'b': 2}\n    \"\"\"\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result\n    pass\n\n\ndef transpose(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\" Transpose a matrix (swap its columns with its rows) and return the transposed matrix.\n    For instance, transpose([[1, 2, 3], [4, 5, 6]]) should return [[1, 4], [2, 5], [3, 6]].\n    Empty matrices (without any row or column) should return an empty matrix.\n    >>> transpose([])\n\n    >>> transpose([[1, 2, 3]])\n    [[1]]\n    \"\"\"\n    if matrix is None or len(matrix) == 0:\n        return []\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transpose_matrix = []\n    for i in range(cols):\n        row = []\n        for j in range(rows):\n            row.append(matrix[j][i])\n        transpose_matrix.append(row)\n    return transpose_matrix\n    pass\n\n\ndef transpose_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\" Transpose a matrix (swap its columns with its rows) and return the transposed matrix.\n    For instance, transpose([[1, 2, 3], [4, 5, 6]]) should return [[1, 4], [2, 5], [3, 6]].\n    Empty matrices (without any row or column) should return an empty matrix.\n    >>> transpose([])\n\n    >>> transpose([[1, 2, 3]])\n    [[1]]\n    \"\"\"\n    if matrix is None or len(matrix) == 0:\n        return []\n    rows = len(matrix)\n    cols"}
{"task_id": "python/4", "language": "python", "completion": "if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    125\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" Return the sum of divisors of an integer n\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(3)\n    4\n    \"\"\"\n    res = 1\n    for i in range(2, n):\n        if n % i == 0:\n            res += i\n    return res\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if an integer n is prime\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    \"\"\"\n    return sum_of_divisors(n) == 2\n\n\ndef prime_numbers(n: int) -> int:\n    \"\"\" Return the number of prime numbers in range(1, n)\n    >>> prime_numbers(1)\n    0\n    >>> prime_numbers(2)\n    1\n    >>> prime_numbers(3)\n    2\n    >>> prime_numbers(4)\n    2\n    >>> prime_numbers(5)\n    3\n    >>> prime_numbers(6)\n    3\n    >>> prime_numbers(7)\n    4\n    \"\"\"\n    res = 0\n    for i in range(1, n):\n        if is_prime(i):\n            res += 1\n    return res\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of an integer n\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    \"\"\"\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Return the nth Fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    \"\"\"\n    if n < 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of a and b\n    >>> gcd(1, 2)\n    1\n    >>> gcd(2, 3)\n    1\n    >>> gcd(3, 4)\n    1\n    >>> gcd(4, 5)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of a and b\n    >>> lcm(1, 2)\n    2\n    >>> lcm(2, 3)\n    6\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef is_power_of(a: int, b: int) -> bool:\n    \"\"\" Return True if a is a power of b\n    >>> is_power_of(1, 1)\n    True\n    >>> is_power_of(2, 2)\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if a % b != 0:\n        return False\n    return is_power_of(a // b, b)\n\n\ndef is_power_of_two(n: int) -> bool:\n    \"\"\" Return True if n is a power of 2\n    >>> is_power_of_two(1)\n    True\n    >>> is_power_of_two(2)\n    True\n    >>> is_power_of_two(3)\n    False\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_power_of_two(n // 2)\n    return False\n\n\ndef gcd_iter(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of a and b\n    >>> gcd_iter(1, 2)\n    1\n    >>> gcd_iter(2, 3)\n    1\n    >>> gcd_iter(3, 4)\n    1\n    >>> gcd_iter(4, 5)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef lcm_iter(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of a and b\n    >>> lcm_iter(1, 2)\n    2\n    >>> lcm_iter(2, 3)\n    6\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < b:\n        a, b = b, a\n    while a % b != 0:\n        a += b\n    return a\n\n\ndef is_power_of_two_iter(n: int) -> bool:\n    \"\"\" Return True if n is a power of 2\n    >>> is_power_of_two_iter(1)\n    True\n    >>> is_power_of_two_iter(2)\n    True\n    >>> is_power_of_two_iter(3)\n    False\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return"}
{"task_id": "python/4", "language": "python", "completion": "a, b = abs(a), abs(b)\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef lcm_of_list(a: list) -> int:\n    \"\"\" Return a least common multiple of a list of integers\n    >>> lcm_of_list([2, 3])\n    6\n    >>> lcm_of_list([2, 3, 4])\n    12\n    \"\"\"\n    result = a[0]\n    for i in a[1:]:\n        result = lcm(result, i)\n    return result\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return a factorial of a non-negative integer n\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    \"\"\"\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n\ndef factorial_of_list(n: list) -> list:\n    \"\"\" Return a factorial of a list of non-negative integers n\n    >>> factorial_of_list([3, 4, 5])\n    [6, 24, 120]\n    \"\"\"\n    result = []\n    for i in n:\n        result.append(factorial(i))\n    return result\n\n\ndef nth_fibonacci(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci(3)\n    2\n    >>> nth_fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n\ndef nth_fibonacci_list(n: list) -> list:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_list([3, 4, 5, 6])\n    [2, 3, 5, 8]\n    \"\"\"\n    result = []\n    for i in n:\n        result.append(nth_fibonacci(i))\n    return result\n\n\ndef nth_fibonacci_recursive(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_recursive(3)\n    2\n    >>> nth_fibonacci_recursive(4)\n    3\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return nth_fibonacci_recursive(n - 1) + nth_fibonacci_recursive(n - 2)\n\n\ndef nth_fibonacci_recursive_list(n: list) -> list:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_recursive_list([3, 4, 5, 6])\n    [2, 3, 5, 8]\n    \"\"\"\n    result = []\n    for i in n:\n        result.append(nth_fibonacci_recursive(i))\n    return result\n\n\ndef nth_fibonacci_list_recursive(n: list) -> list:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_list_recursive([3, 4, 5, 6])\n    [2, 3, 5, 8]\n    \"\"\"\n    def nth_fibonacci_recursive(n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return nth_fibonacci_recursive(n - 1) + nth_fibonacci_recursive(n - 2)\n    result = []\n    for i in n:\n        result.append(nth_fibonacci_recursive(i))\n    return result\n\n\ndef nth_fibonacci_loop(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_loop(3)\n    2\n    >>> nth_fibonacci_loop(4)\n    3\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n\ndef nth_fibonacci_loop_list(n: list) -> list:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_loop_list([3, 4, 5, 6])\n    [2, 3, 5, 8]\n    \"\"\"\n    result = []\n    if n[0] == 0:\n        return [0]\n    if n[0] == 1:\n        return [0, 1]\n    a, b = 0, 1\n    for i in range(2, n[0] + 1):\n        a, b = b, a + b\n        result.append(b)\n    return result\n\n\ndef nth_fibonacci_loop_recursive(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> nth_fibonacci_loop_recursive(3)\n    2\n    >>> nth_fibonacci_loop_recursive(4)\n    3\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return nth_fibonacci_loop_recursive(n - 1) + nth_fibonacci_loop_recursive(n"}
{"task_id": "python/5", "language": "python", "completion": "numbers_to_words = {\n        \"zero\": \"0\",\n        \"one\": \"1\",\n        \"two\": \"2\",\n        \"three\": \"3\",\n        \"four\": \"4\",\n        \"five\": \"5\",\n        \"six\": \"6\",\n        \"seven\": \"7\",\n        \"eight\": \"8\",\n        \"nine\": \"9\",\n    }\n    numbers = numbers.split()\n    words = []\n    for number in numbers:\n        words.append(numbers_to_words[number])\n    words = \" \".join(words)\n    return words"}
{"task_id": "python/5", "language": "python", "completion": "return ' '.join(sorted(numbers.split()))\n\n    pass"}
{"task_id": "python/6", "language": "python", "completion": "smallest, largest = min(numbers), max(numbers)\n    return [(x - smallest) / (largest - smallest) for x in numbers]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/6", "language": "python", "completion": "return (numbers - min(numbers)) / (max(numbers) - min(numbers))\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\nimport unittest\nclass Test_rescale_to_unit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])\n        self.assertEqual(rescale_to_unit([-2.0, -1.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0]), [0.0])\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0]), [0.0, 0.5, 1.0])"}
{"task_id": "python/7", "language": "python", "completion": "return string.swapcase()\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome.\n\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_even(number: int) -> bool:\n    \"\"\" Return True if the given number is even.\n\n    >>> is_even(4)\n    True\n    >>> is_even(5)\n    False\n    \"\"\"\n    return number % 2 == 0\n\n\ndef is_odd(number: int) -> bool:\n    \"\"\" Return True if the given number is odd.\n\n    >>> is_odd(4)\n    False\n    >>> is_odd(5)\n    True\n    \"\"\"\n    return number % 2 != 0\n\n\ndef largest(first: int, second: int, third: int) -> int:\n    \"\"\" Return the largest of the given numbers.\n\n    >>> largest(4, 1, 2)\n    2\n    \"\"\"\n    return max(first, second, third)\n\n\ndef is_valid_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\" Return True if the given sides form a valid triangle.\n\n    >>> is_valid_triangle(1, 1, 1)\n    False\n    >>> is_valid_triangle(3, 4, 5)\n    True\n    >>> is_valid_triangle(1, 1, 3)\n    False\n    \"\"\"\n    return (\n        (side1 + side2 > side3)\n        and (side1 + side3 > side2)\n        and (side2 + side3 > side1)\n    )\n\n\ndef sum_of_squares(first: int, second: int) -> int:\n    \"\"\" Return the sum of the squares of the given numbers.\n\n    >>> sum_of_squares(2, 3)\n    25\n    \"\"\"\n    return first ** 2 + second ** 2\n\n\ndef sum_of_cubes(first: int, second: int) -> int:\n    \"\"\" Return the sum of the cubes of the given numbers.\n\n    >>> sum_of_cubes(2, 3)\n    17\n    \"\"\"\n    return first ** 3 + second ** 3\n\n\ndef sum_of_positive_cub"}
{"task_id": "python/7", "language": "python", "completion": "string = string.swapcase()\n    return string\n\ndef factorial(num: int) -> int:\n    \"\"\" Calculates the factorial of an integer.\n    >>> factorial(5)\n    120\n    \"\"\"\n    factorial_num = 1\n    for num in range(1, num + 1):\n        factorial_num *= num\n    return factorial_num\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Reverses a given string.\n    >>> reverse_string('Hello')\n    'olleH'\n    \"\"\"\n    reversed_string = \"\"\n    for character in string:\n        reversed_string = character + reversed_string\n    return reversed_string\n\ndef reverse_string_recursive(string: str) -> str:\n    \"\"\" Reverses a given string.\n    >>> reverse_string_recursive('Hello')\n    'olleH'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    return string[-1] + reverse_string_recursive(string[:-1])\n\ndef fibonacci(num: int) -> int:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    first_number = 0\n    second_number = 1\n    for num in range(1, num):\n        first_number, second_number = second_number, first_number + second_number\n    return second_number\n\ndef fibonacci_recursive(num: int) -> int:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> fibonacci_recursive(10)\n    55\n    \"\"\"\n    if num == 1:\n        return 0\n    if num == 2:\n        return 1\n    return fibonacci_recursive(num - 1) + fibonacci_recursive(num - 2)\n\ndef fibonacci_sequence(num: int) -> str:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> fibonacci_sequence(10)\n    55\n    \"\"\"\n    first_number = 0\n    second_number = 1\n    for num in range(1, num):\n        first_number, second_number = second_number, first_number + second_number\n        print(second_number)\n\ndef fibonacci_sequence_recursive(num: int) -> int:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> fibonacci_sequence_recursive(10)\n    55\n    \"\"\"\n    if num == 1:\n        return 0\n    if num == 2:\n        return 1\n    return fibonacci_sequence_recursive(num - 1) + fibonacci_sequence_recursive(num - 2)\n\ndef factorial_recursive(num: int) -> int:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> factorial_recursive(10)\n    55\n    \"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num - 1)\n\ndef factorial_recursive(num: int) -> int:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> factorial_recursive(10)\n    55\n    \"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num - 1)\n\ndef factorial_recursive(num: int) -> int:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> factorial_recursive(10)\n    55\n    \"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num - 1)\n\ndef is_prime(num: int) -> bool:\n    \"\"\" Calculates the nth Fibonacci number.\n    >>> is_prime(10)\n    55\n    \"\"\"\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if"}
{"task_id": "python/8", "language": "python", "completion": "return [x for x in l if x > 0]\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 0, 123, -10]\n    >>> get_even([-1, 2, -4, 5, 6])\n    []\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n\ndef get_positives_and_evens(l: list):\n    \"\"\"Return (positives, evens) from the list of numbers.\n    >>> get_positives_and_evens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    ([5, 3, 2, 3, 9, 123, 1], [2, 0, 123, -10])\n    >>> get_positives_and_evens([-1, 2, -4, 5, 6])\n    ([], [])\n    \"\"\"\n    return get_positive(l), get_even(l)\n\ndef get_squares(l: list):\n    \"\"\"Return list of squares of numbers in the list.\n    >>> get_squares([-1, 2, -4, 5, 6])\n    [1, 4, 16, 25, 36]\n    >>> get_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 25, 4, 9, 25, 81, 0, 1441, 1, 100]\n    \"\"\"\n    return [x*x for x in l]\n\ndef get_squares_of_odds(l: list):\n    \"\"\"Return list of squares of odd numbers in the list.\n    >>> get_squares_of_odds([-1, 2, -4, 5, 6])\n    []\n    >>> get_squares_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 25, 16]\n    \"\"\"\n    return [x*x for x in l if x % 2 == 1]\n\ndef get_positive_squares(l: list):\n    \"\"\"Return list of squares of only positive numbers in the list.\n    >>> get_positive_squares([-1, 2, -4, 5, 6])\n    []\n    >>> get_positive_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 4, 36]\n    \"\"\"\n    return [x*x for x in l if x > 0]\n\ndef get_positive_squares_of_odds(l: list):\n    \"\"\"Return list of squares of odd numbers in the list.\n    >>> get_positive_squares_of_odds([-1, 2, -4, 5, 6])\n    []\n    >>> get_positive_squares_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 16]\n    \"\"\"\n    return [x*x for x in l if x % 2 == 1 and x > 0]\n\ndef get_primes(l: list):\n    \"\"\"Return only prime numbers in the list.\n    >>> get_primes([-1, 2, -4, 5, 6])\n    []\n    >>> get_primes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 3, 5, 11]\n    \"\"\"\n    return [x for x in l if all(x % y != 0 for y in range(2, x))]\n\ndef get_positives(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positives([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\ndef get_positives_and_evens(l: list):\n    \"\"\"Return (positives, evens) from the list of numbers.\n    >>> get_positives_and_evens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    ([5, 3, 2, 3, 9, 123, 1], [2, 0, 123, -10])\n    >>> get_positives_and_evens([-1, 2, -4, 5, 6])\n    ([], [])\n    \"\"\"\n    return get_positive(l), get_even(l)\n\ndef get_squares(l: list):\n    \"\"\"Return list of squares of numbers in the list.\n    >>> get_squares([-1, 2, -4, 5, 6])\n    [1, 4, 16, 25, 36]\n    >>> get_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 25, 4, 9, 25, 81, 0, 1441, 1, 100]\n    \"\"\"\n    return [x*x for x in l]\n\ndef get_squares_of_odds(l: list):\n    \"\"\"Return list of squares of odd numbers in the list.\n    >>> get_squares_of_odds([-1, 2, -4, 5, 6])\n    []\n    >>> get_squares_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 16]\n    \"\"\"\n    return [x*x for x in l if x % 2 == 1]\n\ndef get_positive_squares(l: list):\n    \"\"\"Return list of squares of only positive numbers in the list.\n    >>> get_positive_squares([-1, 2, -4, 5, 6])\n    []\n    >>> get_positive_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 4, 36]\n    \"\"\"\n    return [x*x for x in l if x > 0]\n\ndef get_positive_squares_of_odds(l: list):\n    \"\"\"Return list of squares of odd numbers in the list.\n    >>> get_positive_squares_of_odds([-1, 2, -4, 5, 6])\n    []\n    >>> get_positive_squares_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 16]\n    \"\"\"\n    return [x*x for x in l if x % 2 == 1 and x > 0]\n\ndef get_primes(l: list):\n    \"\"\"Return only prime numbers in the list.\n    >>> get_primes([-1, 2, -4, 5, 6])\n    []\n    >>> get_primes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 3, 5, 11]\n    \"\"\"\n    return [x for x in l if all(x % y"}
{"task_id": "python/9", "language": "python", "completion": "\"*** YOUR CODE HERE ***\"\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef divisors(n):\n    \"\"\"Return a list of all divisors of a positive integer n.\n    >>> divisors(1)\n    [1]\n    >>> divisors(3)\n    [1, 3]\n    >>> divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    >>> [x for x in divisors(28)]\n    [1, 2, 4, 7, 14, 28]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            lis.append(i)\n    return lis\n\n\ndef sum_of_divisors(n):\n    \"\"\"Return the sum of the divisors of a positive integer n.\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(3)\n    4\n    >>> sum_of_divisors(12)\n    28\n    >>> sum_of_divisors(28)\n    56\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = divisors(n)\n    sum_of_divisors = 0\n    for i in lis:\n        sum_of_divisors += i\n    return sum_of_divisors\n\ndef sum_of_squares(s):\n    \"\"\"Return the sum of the squares of elements in iterable S.\n\n    >>> sum_of_squares([1, 2, 3, 4])\n    30\n    >>> sum_of_squares(range(10))\n    385\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in s:\n        sum += i * i\n    return sum\n\n\ndef square(x):\n    return x * x\n\n\ndef cube(x):\n    return x * x * x\n\n\ndef sum_squares_are_odd(x):\n    \"\"\"Return whether the sum of square roots of a number is odd.\n\n    >>> sum_squares_are_odd(1)\n    False\n    >>> sum_squares_are_odd(10)\n    False\n    >>> sum_squares_are_odd(11)\n    True\n    >>> sum_squares_are_odd(12)\n    False\n    >>> sum_squares_are_odd(13)\n    True\n    >>> sum_squares_are_odd(2)\n    False\n    >>> sum_squares_are_odd(4)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if sum_of_squares(sum_of_divisors(x)) % 2 == 0:\n        return False\n    return True\n\ndef cube_and_sum_square(x):\n    \"\"\"Return the sum of the cubes of elements in iterable S.\n\n    >>> cube_and_sum_square([1, 2, 3, 4])\n    30\n    >>> cube_and_sum_square(range(10))\n    385\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = []\n    for i in x:\n        lis.append(cube(i))\n    return sum_squares(lis)\n\n\ndef cube_and_sum_square_even(x):\n    \"\"\"Return the sum of the cubes of elements in iterable S.\n\n    >>> cube_and_sum_square_even([1, 2, 3, 4])\n    30\n    >>> cube_and_sum_square_even(range(10))\n    385\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = []\n    for i in x:\n        lis.append(cube(i))\n    return sum_squares(lis)\n\n\ndef cube_and_sum_square_even_odd(x):\n    \"\"\"Return the sum of the cubes of elements in iterable S.\n\n    >>> cube_and_sum_square_even_odd([1, 2, 3, 4])\n    30\n    >>> cube_and_sum_square_even_odd(range(10))\n    385\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = []\n    for i in x:\n        lis.append(cube(i))\n    if sum_of_divisors(x) % 2 == 0:\n        return sum_squares(lis)\n    return False\n\n\ndef sum_squares_are_odd_or_even(x):\n    \"\"\"Return whether the sum of square roots of a number is odd or even.\n\n    >>> sum_squares_are_odd_or_even(1)\n    False\n    >>> sum_squares_are_odd_or_even(10)\n    False\n    >>> sum_squares_are_odd_or_even(11)\n    True\n    >>> sum_squares_are_odd_or_even(12)\n    False\n    >>> sum_squares_are_odd_or_even(13)\n    True\n    >>> sum_squares_are_odd_or_even(2)\n    False\n    >>> sum_squares_are_odd_or_even(4)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = []\n    for i in x:\n        lis.append(cube(i))\n    if sum_of_divisors(x) % 2 == 0:\n        return False\n    return True\n\n\ndef cube_and_sum_square_even_odd_or_even_or_odd(x):\n    \"\"\"Return the sum of the cubes of elements in iterable S.\n\n    >>> cube_and_sum_square_even_odd_or_even_or_odd([1, 2, 3, 4])\n    30\n    >>> cube_and_sum_square_even_odd_or_even_or_odd(range(10))\n    385\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis = []\n    for i in x:\n        lis.append(cube(i))\n    if sum_of_divisors(x) % 2 == 0:\n        return sum_squares(lis)\n    return False\n\n\ndef sum_squares_are_odd_or_even_or_odd(x):\n    \"\"\"Return whether the sum of square roots of a number is odd or even or odd.\n\n    >>> sum_squares_are_odd_or_even_or_odd(1)\n    False\n    >>> sum_squares_are_odd_or_even_or_odd(10)\n    False\n    >>> sum_squares_are_odd_or_even_or_odd(11)\n    True\n    >>> sum_squares_are_odd_or_even_or_odd(12)\n    False\n    >>> sum_squares_are_odd_or_even_or_odd(13)\n    True\n    >>> sum_squares_are_odd_or_even_or_odd(2)\n    False\n    >>> sum_squares_are_odd_or_even_or_odd(4)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lis"}
{"task_id": "python/10", "language": "python", "completion": "if len(l) == 0:\n        return l\n    l.sort()\n    if l[0] != l[1]:\n        l = [l[0]] + unique(l[1:])\n    return unique(l[1:])\n\n\ndef pascal_row(row_num: int):\n    \"\"\"Return nth pascal row as a list.\n    >>> pascal_row(2)\n    [1, 3, 3, 1]\n    >>> pascal_row(5)\n    [1, 5, 10, 10, 5, 1]\n    >>> pascal_row(10)\n    [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n    \"\"\"\n    if row_num == 1:\n        return [1]\n    if row_num == 2:\n        return pascal_row(1) + pascal_row(2)\n    if row_num == 3:\n        return pascal_row(2) + [1] + pascal_row(3)\n    return pascal_row(row_num - 1) + pascal_row(row_num)[:-1] + [1]\n\n\ndef pascal_triangle(row_num: int):\n    \"\"\"Print pascal triangle up to nth row\n    >>> pascal_triangle(1)\n    [1]\n    >>> pascal_triangle(2)\n    [1, 1, 1]\n    >>> pascal_triangle(3)\n    [1, 1, 2, 1]\n    >>> pascal_triangle(4)\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> pascal_triangle(5)\n    [1, 1, 2, 4, 6, 4, 2, 1]\n    >>> pascal_triangle(6)\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    if row_num == 1:\n        print(pascal_row(1))\n        return\n    pascal_triangle(row_num - 1)\n    print(pascal_row(row_num))\n\n\ndef pascal_triangle_list(row_num: int):\n    \"\"\"Return pascal triangle up to nth row as a list\n    >>> pascal_triangle_list(1)\n    [1]\n    >>> pascal_triangle_list(2)\n    [1, 1, 1]\n    >>> pascal_triangle_list(3)\n    [1, 1, 2, 1]\n    >>> pascal_triangle_list(4)\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> pascal_triangle_list(5)\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    if row_num == 1:\n        return pascal_row(1)\n    return pascal_row(row_num) + pascal_triangle_list(row_num - 1)\n\n\ndef pascal_triangle_list_generator(row_num: int):\n    \"\"\"Return pascal triangle up to nth row as a generator\n    >>> list(pascal_triangle_list_generator(1))\n    [1]\n    >>> list(pascal_triangle_list_generator(2))\n    [1, 1, 1]\n    >>> list(pascal_triangle_list_generator(3))\n    [1, 1, 2, 1]\n    >>> list(pascal_triangle_list_generator(4))\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> list(pascal_triangle_list_generator(5))\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    yield pascal_row(1)\n    yield pascal_row(2)\n    if row_num >= 3:\n        for i in pascal_triangle_list_generator(row_num - 1):\n            yield pascal_row(row_num) + pascal_row(row_num - 1)\n\n\ndef pascal_triangle_list_generator_v2(row_num: int):\n    \"\"\"Return pascal triangle up to nth row as a generator\n    >>> list(pascal_triangle_list_generator_v2(1))\n    [1]\n    >>> list(pascal_triangle_list_generator_v2(2))\n    [1, 1, 1]\n    >>> list(pascal_triangle_list_generator_v2(3))\n    [1, 1, 2, 1]\n    >>> list(pascal_triangle_list_generator_v2(4))\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> list(pascal_triangle_list_generator_v2(5))\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    for i in pascal_triangle_list_generator(row_num):\n        yield pascal_row(row_num)\n\n\ndef pascal_triangle_generator(row_num: int):\n    \"\"\"Return pascal triangle up to nth row as a generator\n    >>> list(pascal_triangle_generator(1))\n    [1]\n    >>> list(pascal_triangle_generator(2))\n    [1, 1, 1]\n    >>> list(pascal_triangle_generator(3))\n    [1, 1, 2, 1]\n    >>> list(pascal_triangle_generator(4))\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> list(pascal_triangle_generator(5))\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    yield pascal_row(1)\n    yield pascal_row(2)\n    if row_num >= 3:\n        for i in pascal_triangle_generator(row_num - 1):\n            yield pascal_row(row_num) + pascal_row(row_num - 1)\n\n\ndef pascal_triangle_generator_v2(row_num: int):\n    \"\"\"Return pascal triangle up to nth row as a generator\n    >>> list(pascal_triangle_generator_v2(1))\n    [1]\n    >>> list(pascal_triangle_generator_v2(2))\n    [1, 1, 1]\n    >>> list(pascal_triangle_generator_v2(3))\n    [1, 1, 2, 1]\n    >>> list(pascal_triangle_generator_v2(4))\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> list(pascal_triangle_generator_v2(5))\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    for i in pascal_triangle_generator(row_num):\n        yield pascal_row(row_num)\n\n\ndef pascal_triangle_generator_v3(row_num: int):\n    \"\"\"Return pascal triangle up to nth row as a generator\n    >>> list(pascal_triangle_generator_v3(1))\n    [1]\n    >>> list(pascal_triangle_generator_v3(2))\n    [1, 1, 1]\n    >>> list(pascal_triangle_generator_v3(3))\n    [1, 1, 2, 1]\n    >>> list(pascal_triangle_generator_v3(4))\n    [1, 1, 2, 3, 3, 2, 1]\n    >>> list(pascal_triangle_generator_v3(5))\n    [1, 1, 3, 6, 10, 12, 10, 6, 3, 1]\n    \"\"\"\n    for i in pascal_triangle_generator(row_num):\n        yield pascal_row(row_num)\n\n\ndef pascal_triangle_generator_v4(row_num:"}
{"task_id": "python/10", "language": "python", "completion": "unique = list(set(l))\n    unique.sort()\n    return unique\n\ndef unique_recursive(l: list, unique: list):\n    \"\"\"Recursively create unique list from l\"\"\"\n    if len(l) == 0:\n        return unique\n    elif l[0] in unique:\n        return unique_recursive(l[1:], unique)\n    else:\n        return unique_recursive(l[1:], unique + [l[0]])\n\ndef unique_recursive_pythonic(l: list, unique: list):\n    \"\"\"Recursively create unique list from l\"\"\"\n    return unique_recursive(l[1:], unique + [l[0]] if l[0] not in unique else unique)\n\ndef unique_with_counter(l: list, counter: dict):\n    \"\"\"Recursively create unique list from l\"\"\"\n    if len(l) == 0:\n        return unique\n    elif l[0] in counter:\n        return unique_with_counter(l[1:], counter)\n    else:\n        counter[l[0]] = 1\n        return unique_with_counter(l[1:], counter)\ndef unique_with_counter_pythonic(l: list, counter: dict):\n    \"\"\"Recursively create unique list from l\"\"\"\n    return unique_with_counter(l[1:], counter + {l[0]: 1} if l[0] not in counter else counter)\ndef unique_with_count(l: list, counter: dict):\n    \"\"\"Recursively create unique list from l\"\"\"\n    if len(l) == 0:\n        return unique\n    elif l[0] in counter:\n        return unique_with_count(l[1:], counter)\n    else:\n        counter[l[0]] = counter.get(l[0], 0) + 1\n        return unique_with_count(l[1:], counter)\n\ndef unique_with_count_pythonic(l: list, counter: dict):\n    \"\"\"Recursively create unique list from l\"\"\"\n    return unique_with_count(l[1:], counter + {l[0]: 1} if l[0] not in counter else counter)\n\n\ndef count(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    if len(l) == 0:\n        return 0\n    elif l[0] == value:\n        return 1 + count(l[1:], value)\n    else:\n        return count(l[1:], value)\n    \ndef count_recursive(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    if len(l) == 0:\n        return 0\n    elif l[0] == value:\n        return 1 + count(l[1:], value)\n    else:\n        return count(l[1:], value)\n    \ndef count_recursive_pythonic(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    return len(l) if len(l) == 0 or l[0] != value else 1 + count(l[1:], value)\n\ndef count_recursive_pythonic_while(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    return len(l) if len(l) == 0 or l[0] != value else 1 + count(l[1:], value) if l[0] == value else count(l[1:], value)\n\ndef count_recursive_pythonic_while_not(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    return len(l) if len(l) == 0 or l[0] != value else 1 + count(l[1:], value) if l[0] != value else count(l[1:], value)\n\ndef count_recursive_pythonic_while_not_while(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    return len(l) if len(l) == 0 or l[0] != value else 1 + count(l[1:], value) if (v := l[0]) == value else count(l[1:], value)\n\ndef count_recursive_pythonic_while_not_while_not(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    return len(l) if len(l) == 0 or l[0] != value else 1 + count(l[1:], value) if (v := l[0]) == value else count(l[1:], value) if v == value else count(l[1:], value)\n\ndef count_recursive_pythonic_while_not_while_not_while(l: list, value):\n    \"\"\"Recursively count occurence of value in l\"\"\"\n    return len(l) if len(l) == 0 or l[0] != value else 1 + count(l[1:], value) if (v := l[0]) == value else count(l[1:], value) if v == value else count(l[1:]"}
{"task_id": "python/11", "language": "python", "completion": "a, b, n, i = 0, 1, 1, 1\n    while i < n:\n        a, b, n, i = b, a + b, n + 1, i + 1\n    return a if i == n else None\n\ndef prime_fib_list(n: int):\n    \"\"\"\n    prime_fib_list returns list of first n Fibonacci numbers and prime numbers.\n    >>> prime_fib_list(0)\n    []\n    >>> prime_fib_list(1)\n    [2, 3]\n    >>> prime_fib_list(2)\n    [2, 3, 5]\n    >>> prime_fib_list(3)\n    [2, 3, 5, 13]\n    \"\"\"\n    primes = [2, 3]\n    fibs = [1, 1]\n    for i in range(2, n + 1):\n        fib = fibs[i - 1] + fibs[i - 2]\n        primes.append(fib)\n        primes.append(prime_fib(i))\n        fibs.append(fib)\n    return primes\n\ndef prime_fib_dict(n: int):\n    \"\"\"\n    prime_fib_dict returns dictionary with key: Fibonacci numbers value: primes.\n    >>> prime_fib_dict(0)\n    {}\n    >>> prime_fib_dict(1)\n    {1: 2}\n    >>> prime_fib_dict(2)\n    {1: 2, 2: 3}\n    >>> prime_fib_dict(3)\n    {1: 2, 2: 3, 3: 5}\n    \"\"\"\n    primes = {1: 2}\n    fibs = {1: 1, 2: 1}\n    for i in range(2, n + 1):\n        fib = fibs[i - 1] + fibs[i - 2]\n        primes[fib] = prime_fib(i)\n        fibs[fib] = fib\n    return primes\n\ndef prime_fib_tuple(n: int):\n    \"\"\"\n    prime_fib_tuple returns tuple with n-th Fibonacci number and prime number.\n    >>> prime_fib_tuple(0)\n    (0, 0)\n    >>> prime_fib_tuple(1)\n    (1, 2)\n    >>> prime_fib_tuple(2)\n    (1, 2)\n    >>> prime_fib_tuple(3)\n    (2, 3)\n    \"\"\"\n    fib, primes = 1, 2\n    if n >= 1:\n        fibs, primes = [1, 1], [2, primes]\n    if n >= 2:\n        for i in range(2, n + 1):\n            fib = fibs[i - 1] + fibs[i - 2]\n            primes = primes + [fib, prime_fib(i)]\n            fibs.append(fib)\n    return primes[n], fibs[n]\n\ndef fib_gen(n: int):\n    \"\"\"\n    fib_gen is generator that returns Fibonacci numbers.\n    >>> list(fib_gen(0))\n    []\n    >>> list(fib_gen(1))\n    [1]\n    >>> list(fib_gen(2))\n    [1, 1]\n    >>> list(fib_gen(3))\n    [1, 1, 2]\n    \"\"\"\n    a, b, n = 0, 1, 1\n    while n <="}
{"task_id": "python/12", "language": "python", "completion": "for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero_brute_force(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero_sort(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            k = bisect(l, -l[i]-l[j], j+1, len(l))\n            if k is not None and l[i]+l[j]+l[k] == 0:\n                return True\n    return False\n\ndef bisect(l, x, start, end):\n    while start < end:\n        mid = (start + end) // 2\n        if l[mid] < x:\n            start = mid + 1\n        else:\n            end = mid\n    return start if l[start] == x else None\n\ndef triples_sum_to_zero_sort_brute_force(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            k = bisect_brute_force(l, -l[i]-l[j], j+1, len(l))\n            if k is not None and l[i]+l[j]+l[k] == 0:\n                return True\n    return False\n\ndef bisect_brute_force(l, x, start, end):\n    while start < end:\n        mid = (start + end) // 2\n        if l[mid] < x:\n            start = mid + 1\n        else:\n            end = mid\n    return start if l[start] == x else None\n\ndef bisect_brute_force_sort(l, x, start, end):\n    while start < end:\n        mid = (start + end) // 2\n        if l[mid] < x:\n            start = mid + 1\n        else:\n            end = mid\n    return start if l[start] == x else None\n\ndef bisect_brute_force_sort_brute_force(l, x, start, end):\n    while start < end:\n        mid = (start + end) // 2\n        if l[mid] < x:\n            start = mid + 1\n        else:\n            end = mid\n    return start if l[start] == x else"}
{"task_id": "python/12", "language": "python", "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\ndef triplets_sum_to_zero(l: list):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    result.append((l[i], l[j], l[k]))\n    if len(result) >= 1:\n        return True\n    else:\n        return False\n\n\ndef triplets_sum_to_zero_efficient(l: list):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    result.append((l[i], l[j], l[k]))\n    if len(result) >= 1:\n        return True\n    else:\n        return False\n\n\ndef triplets_sum_to_zero_efficient_v2(l: list):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    result.append((l[i], l[j], l[k]))\n    if len(result) >= 1:\n        return True\n    else:\n        return False\n\n\ndef triplets_sum_to_zero_efficient_v3(l: list):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    result.append((l[i], l[j], l[k]))\n    if len(result) >= 1:\n        return True\n    else:\n        return False\n\n\ndef triplets_sum_to_zero_efficient_v4(l: list):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    result"}
{"task_id": "python/13", "language": "python", "completion": "return False\n    \n\n\ndef pairs_sum_to_zero_fast(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    return False\n    \n    \n    \n    \ndef triplets_sum_to_zero(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    return False\n    \n    \n    \n    \ndef triplets_sum_to_zero_fast(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    return False\n    \n    \n    \n    \ndef triplets_sum_to_zero_naive(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    return False\n    \n    \n    \n    \ndef triplets_sum_to_zero_fast(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    return F"}
{"task_id": "python/14", "language": "python", "completion": "\"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n\n\ndef is_palindrome(s):\n    \"\"\"\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12322)\n    False\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(None)\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if s is None:\n        return True\n    return str(s) == str(reversed(s))\n\ndef hailstone(n):\n    \"\"\"Print the hailstone sequence starting at n and return its\n    length.\n\n    >>> a = hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> a\n    7\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def hailstone_helper(n, length):\n        print(n)\n        if n == 1:\n            return length + 1\n        elif n % 2 == 0:\n            return hailstone_helper(n//2, length + 1)\n        else:\n            return hailstone_helper(3*n+1, length + 1)\n    return hailstone_helper(n, 0)\n\n\ndef gcd_iter(a, b):\n    \"\"\"Return the greatest common divisor of a and b.\n    \n    >>> gcd_iter(14, 15)\n    1\n    >>> gcd_iter(2, 15)\n    1\n    >>> gcd_iter(14, 16)\n    2\n    >>> gcd_iter(2, 16)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef gcd_rec(a, b):\n    \"\"\"Return the greatest common divisor of a and b.\n\n    >>> gcd_rec(14, 15)\n    1\n    >>> gcd_rec(2, 15)\n    1\n    >>> gcd_rec(14, 16)\n    2\n    >>> gcd_rec(2, 16)\n    2\n    >>> from construct_check import check\n    >>> # ban iteration and sets\n    >>> check("}
{"task_id": "python/14", "language": "python", "completion": "if n == 0 or n == 1:\n        return n\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_list.append((fib4_list[i - 1] + fib4_list[i - 2] + fib4_list[i - 3] + fib4_list[i - 4]) % 100000)\n    return fib4_list[n]\n\nprint(fib4(5))\nprint(fib4(6))\nprint(fib4(7))\n\ndef fib4_2(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4_2(5)\n    4\n    >>> fib4_2(6)\n    8\n    >>> fib4_2(7)\n    14\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_list[i % 4] = (fib4_list[(i - 1) % 4] + fib4_list[(i - 2) % 4] + fib4_list[(i - 3) % 4] + fib4_list[(i - 4) % 4]) % 100000\n    return fib4_list[n % 4]\n\nprint(fib4_2(5))\nprint(fib4_2(6))\nprint(fib4_2(7))\n\ndef fib4_3(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4_3(5)\n    4\n    >>> fib4_3(6)\n    8\n    >>> fib4_3(7)\n    14\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_list[(i + 1) % 4] = (fib4_list[(i - 1) % 4] + fib4_list[(i - 2) % 4] + fib4_list[(i - 3) % 4] + fib4_list[(i - 4) % 4]) % 100000\n    return fib4_list[(n + 1) % 4]\n\nprint(fib4_3(5))\nprint(fib4_3(6))\nprint(fib4_3(7))\n\ndef fib4_4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4_4(5)\n    4\n    >>> fib4_4(6)\n    8\n    >>> fib4_4(7)\n    14\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_list[i % 4] = (fib4_list[(i - 1) % 4] + fib4_list[(i - 2) % 4] + fib4_list[(i - 3) % 4] + fib4_list[(i - 4) % 4]) % 100000\n    for i in range(1, n + 1):\n        fib4_list[i % 4] = fib4_list[(i - 1) % 4] + fib4_list[(i - 2) % 4] + fib4_list[(i - 3) % 4] + fib4_list[(i - 4) % 4]\n    return fib4_list[n % 4]\n\nprint(fib4_4(5))\nprint(fib4_4(6))\nprint(fib4_4(7))\n\ndef fib4_5(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4_5(5)\n    4\n    >>> fib4_5(6)\n    8\n    >>> fib4_5(7)\n    14\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_list[(i + 1) % 4] = (fib4_list[(i - 1) % 4] + fib4_list[(i - 2) % 4] + fib4_list[(i - 3) % 4] + fib4_list[(i - 4) % 4]) % 100000\n    for i in range(1, n + 1):\n        fib4_list[i % 4] = fib4_list[(i - 1) % 4] + fib4_list[(i - 2) % 4] + fib4_list[(i - 3) % 4] + fib4_list[(i - 4) % 4]\n    return fib4_list[n % 4]\n\nprint(fib4_5(5))\nprint(fib4_5(6))\nprint(fib4_5(7))\n\nimport time\ndef fib4_timeit(func, n, iterations=100):\n    \"\"\"Benchmark the time it takes for the fib4 function to compute fib4(n).\n    >>> fib4_timeit(fib4_3, 100, 100)\n    0.02112380768299749\n    >>> fib4_timeit(fib4_4, 100, 100)\n    0.02061921932071832\n    \"\"\"\n    start = time.time()\n    for i in range(iterations):\n        func(n)\n    return time.time() - start\n\ndef fib_timeit(func, n, iterations=100):\n    \"\"\"Benchmark the time it takes for the fib function to compute fib(n).\n    >>> fib_timeit(fib, 100, 100)\n    0.00999694811315918\n    \"\"\"\n    start = time.time()\n    for i in range(iterations):\n        func(n)\n    return time.time() - start\n\ndef fib_recursive(n):\n    \"\"\"Compute fib(n).\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_recursive_cached(n, memo):\n    \"\"\"Compute fib(n) by memoization.\"\"\"\n    if memo[n] is not None:\n        return memo[n]\n    if n == 0:\n        memo[n] = 0\n    elif n == 1:\n        memo[n] = 1\n    else:\n        memo[n] = fib_recursive_cached(n-1, memo) + fib_recursive_cached(n-2, memo)\n    return memo[n]\n\ndef fib_recursive_cached_2(n, memo):\n    \"\"\"Compute fib(n) by memoization.\"\"\"\n    if n == 0:\n        memo[n] = 0\n    elif n == 1:\n        memo[n] = 1\n    else:\n        memo[n] = fib_recursive_cached_2(n-1, memo) + fib_recursive_cached_2(n-2, memo)\n    return memo[n]\n\ndef fib_recursive_bottom_up(n):\n    \"\"\"Compute fib(n) by bottom-up.\"\"\"\n    if n == 0 or n == 1:\n        return n\n    f = [None] * (n+1)\n    f[0] = 0\n    f[1] = 1\n    for i in range(2, n+1):\n        f[i] = f[i-1] + f[i-2]\n    return f[n]\n\ndef fib_iterative(n):\n    \"\"\"Compute fib(n) by iteration.\"\"\"\n    if n == 0 or n == 1:\n        return n\n    f_minus_2 = 0\n    f_minus_1 = 1\n    for i in range(2, n+1):\n        f = f_minus_1 + f_minus_2\n        f_minus_2 = f_minus_1\n        f_minus_1 = f\n    return f\n\ndef fib_iterative_cached(n, memo):\n    \"\"\"Compute fib(n) by memoization.\"\"\"\n    if n == 0 or n == 1:\n        return n\n    f_minus_2 = 0\n    f_minus_1 = 1\n    for i in range(2, n+1):\n        f = f_minus_1 + f_minus_2\n        f_minus_2"}
{"task_id": "python/15", "language": "python", "completion": "n = len(l)\n    if n % 2 == 1:\n        return sorted(l)[n//2]\n    return sum(sorted(l)[n//2-1:n//2+1])/2\n\ndef sum_of_squares(l: list):\n    \"\"\"Return sum of squares of elements in the list l.\n    >>> sum_of_squares([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x for x in l)\n\ndef sum_of_cubes(l: list):\n    \"\"\"Return sum of cubes of elements in the list l.\n    >>> sum_of_cubes([3, 1, 2])\n    17\n    \"\"\"\n    return sum(x*x*x for x in l)\n\ndef sum_of_cubes_odd(l: list):\n    \"\"\"Return sum of cubes of odd elements in the list l.\n    >>> sum_of_cubes_odd([3, 1, 2])\n    8\n    \"\"\"\n    return sum(x*x*x for x in l if x%2)\n\ndef sum_of_cubes_odd_or_even(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_or_even([3, 1, 2])\n    23\n    \"\"\"\n    return sum(x*x*x for x in l if x%2)\n    \ndef sum_of_cubes_odd_and_even(l: list):\n    \"\"\"Return sum of cubes of odd and even elements in the list l.\n    >>> sum_of_cubes_odd_and_even([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1)\n\ndef sum_of_cubes_odd_or_even_and_greater(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_or_even_and_greater([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>0)\n\ndef sum_of_cubes_odd_and_even_and_greater(l: list):\n    \"\"\"Return sum of cubes of odd and even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_and_greater([3, 1, 2])\n    23\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>0)\n\ndef sum_of_cubes_odd_or_even_and_greater(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_or_even_and_greater([3, 1, 2])\n    23\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>0)\n\ndef sum_of_cubes_odd_and_even_or_greater(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_or_greater([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 or x>0)\n\ndef sum_of_cubes_odd_and_even_and_greater_or_equal(l: list):\n    \"\"\"Return sum of cubes of odd and even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_and_greater_or_equal([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>=0)\n\ndef sum_of_cubes_odd_or_even_and_greater_or_equal(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_or_even_and_greater_or_equal([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>=0)\n\ndef sum_of_cubes_odd_and_even_or_greater_or_equal(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_or_greater_or_equal([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 or x>=0)\n\ndef sum_of_cubes_odd_and_even_and_greater_or_equal(l: list):\n    \"\"\"Return sum of cubes of odd and even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_and_greater_or_equal([3, 1, 2])\n    23\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>=0)\n\ndef sum_of_cubes_odd_and_even_or_greater_or_equal(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_or_greater_or_equal([3, 1, 2])\n    23\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 or x>=0)\n\ndef sum_of_cubes_odd_and_even_and_greater_or_equal_and_greater(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_and_greater_or_equal_and_greater([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>=0 and x>0)\n\ndef sum_of_cubes_odd_and_even_or_greater_or_equal_and_greater(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_or_greater_or_equal_and_greater([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 or x>=0 and x>0)\n\ndef sum_of_cubes_odd_and_even_and_greater_or_equal_and_greater_or_equal(l: list):\n    \"\"\"Return sum of cubes of odd or even elements in the list l.\n    >>> sum_of_cubes_odd_and_even_and_greater_or_equal_and_greater_or_equal([3, 1, 2])\n    13\n    \"\"\"\n    return sum(x*x*x for x in l if x%2==0 or x%2==1 and x>=0 and x>0 and x>"}
{"task_id": "python/16", "language": "python", "completion": "text = text.lower()\n    return text[::-1] == text\n\n\ndef is_prime(number: int):\n    \"\"\"\n    Checks if the given positive integer is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(1794141)\n    True\n    >>> is_prime(1794141 * 2)\n    False\n    \"\"\"\n    if number < 2:\n        return False\n\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n\n    return True\n\n\ndef prime_factors(number: int):\n    \"\"\"\n    Returns set of unique prime factors for the given positive integer\n    >>> prime_factors(1)\n    frozenset({})\n    >>> prime_factors(2)\n    frozenset({2})\n    >>> prime_factors(4)\n    frozenset({2})\n    >>> prime_factors(12)\n    frozenset({2, 3})\n    >>> prime_factors(612)\n    frozenset({2, 3, 7, 11, 19, 31})\n    \"\"\"\n    if number < 2:\n        return frozenset({})\n\n    factors = set()\n\n    i = 2\n    while i <= number:\n        if number % i == 0:\n            factors.add(i)\n            number //= i\n        else:\n            i += 1\n\n    return frozenset(factors)\n\n\ndef fibonacci(n: int):\n    \"\"\"\n    Returns n-th element of fibonacci sequence\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(7)\n    13\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    previous = 1\n    current = 1\n\n    for i in range(2, n + 1):\n        previous, current = current, previous + current\n\n    return current\n\n\ndef sum_of_digits(number: int):\n    \"\"\"\n    Returns sum of digits for the given integer\n    >>> sum_of_digits(10)\n    1\n    >>> sum_of_digits(42)\n    4\n    >>> sum_of_digits(123456789)\n    45\n    \"\"\"\n    return sum(int(digit) for digit in str(number))\n\n\ndef is_valid_ipv4_address(address: str):\n    \"\"\"\n    >>> is_valid_ipv4_address('')\n    False\n    >>> is_valid_ipv4_address('123.45.67.89')\n    False\n    >>> is_valid_ipv4_address('127.0.0.1')\n    True\n    \"\"\"\n    parts = address.split('.')\n\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        try:\n            value = int(part)\n\n            if not 0 <= value <= 255:\n                return False\n\n        except ValueError:\n            return False\n\n    return True\n\n\ndef is_valid_ipv6_address(address: str):\n    \"\"\"\n    >>> is_valid_ipv6_address('')\n    False\n    >>> is_valid_ipv6_address('123.45.67.89')\n    False\n    >>> is_valid_ipv6_address('127.0.0.1')\n    False\n    >>> is_valid_ipv6_address('::')\n    True\n    \"\"\"\n    if ':' not in address:\n        return False\n\n    parts = address.split(':')\n\n    if len(parts) != 8:\n        return False\n\n    for i in range(8):\n        try:\n            int(parts[i], 16)\n\n        except ValueError:\n            return False\n\n    return True\n\n\ndef is_valid_url(url: str):\n    \"\"\"\n    >>> is_valid_url('')\n    False\n    >>> is_valid_url('http://')\n    False\n    >>> is_valid_url('http://www.example.com')\n    True\n    \"\"\"\n    if not url.startswith('http://'):\n        return False\n\n    parts = url.split('.')\n\n    if len(parts)"}
{"task_id": "python/16", "language": "python", "completion": "for i in range(0, len(text)):\n        if text[i] != text[-1 - i]:\n            return False\n    return True\n\ndef fib(n: int):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1)+fib(n-2)\n\ndef fib2(n: int):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib2(0)\n    0\n    >>> fib2(1)\n    1\n    >>> fib2(2)\n    1\n    >>> fib2(3)\n    2\n    >>> fib2(4)\n    3\n    >>> fib2(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    prev, curr = 0, 1\n    for i in range(2, n+1):\n        summ = prev + curr\n        prev = curr\n        curr = summ\n    return curr\n\ndef fib_iter(n: int):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib_iter(0)\n    0\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(2)\n    1\n    >>> fib_iter(3)\n    2\n    >>> fib_iter(4)\n    3\n    >>> fib_iter(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    fib_0, fib_1, summ = 0, 1, 0\n    for i in range(2, n+1):\n        summ = fib_0 + fib_1\n        fib_0 = fib_1\n        fib_1 = summ\n    return summ\n\ndef fib_recursive(n: int):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib_recursive(0)\n    0\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(2)\n    1\n    >>> fib_recursive(3)\n    2\n    >>> fib_recursive(4)\n    3\n    >>> fib_recursive(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_matrix(n: int):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib_matrix(0)\n    0\n    >>> fib_matrix(1)\n    1\n    >>> fib_matrix(2)\n    1\n    >>> fib_matrix(3)\n    2\n    >>> fib_matrix(4)\n    3\n    >>> fib_matrix(10)\n    55\n    \"\"\"\n    return int(((1 + 5**0.5) / 4)**n + (1 - (1 + 5**0.5) / 4)**n)\n\ndef fib_recursive_memory(n: int, dict: dict):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib_recursive_memory(0, {})\n    0\n    >>> fib_recursive_memory(1, {})\n    1\n    >>> fib_recursive_memory(2, {})\n    1\n    >>> fib_recursive_memory(3, {})\n    2\n    >>> fib_recursive_memory(4, {})\n    3\n    >>> fib_recursive_memory(10, {})\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    try:\n        return dict[n]\n    except KeyError:\n        dict[n] = fib_recursive_memory(n-1, dict) + fib_recursive_memory(n-2, dict)\n        return dict[n]\n\ndef fib_matrix_memory(n: int, dict: dict):\n    \"\"\"\n    Calculates n-th Fibonacci number\n    >>> fib_matrix_memory(0, {})\n    0\n    >>> fib_matrix_memory(1, {})\n    1\n    >>> fib_matrix_memory(2, {})\n    1\n    >>> fib_matrix_memory(3,"}
{"task_id": "python/17", "language": "python", "completion": "if text == \"\":\n        return \"\"\n    else:\n        if text[0] in \"aeiouAEIOU\":\n            return remove_vowels(text[1:])\n        else:\n            return text[0] + remove_vowels(text[1:])\n\ndef is_palindrome(word):\n    \"\"\"\n    is_palindrome is a function that takes word and returns True if word is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abcdef')\n    False\n    >>> is_palindrome('madam')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('hannah')\n    True\n    \"\"\"\n    reversed_word = reverse(word)\n    return word == reversed_word\n\ndef reverse(word):\n    \"\"\"\n    reverse is a function that takes word and returns reverse of that word.\n    >>> reverse('')\n    ''\n    >>> reverse('abcdef\\nghijklm')\n    'mkljhi\\degfed'\n    >>> reverse('madam')\n    'madam'\n    \"\"\"\n    if word == \"\":\n        return \"\"\n    else:\n        return word[-1] + reverse(word[:-1])\n\n\ndef factorial(n):\n    \"\"\"\n    factorial is a function that takes n as input and returns factorial of n.\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(4)\n    24\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef gcd(a, b):\n    \"\"\"\n    gcd is a function that takes two positive integers a and b and returns their GCD\n    >>> gcd(10, 15)\n    5\n    >>> gcd(14, 7)\n    2\n    >>> gcd(3, 9)\n    3\n    >>> gcd(10, 2)\n    2\n    >>> gcd(1, 1)\n    1\n    >>> gcd(1, 10)\n    1\n    \"\"\"\n    if a == b:\n        return a\n    elif a > b:\n        return gcd(a-b, b)\n    else:\n        return gcd(a, b-a)\n\ndef fibonacci(n):\n    \"\"\"\n    fibonacci is a function that takes n as input and returns nth number in fibonacci series\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\ndef sum_of_digits(n):\n    \"\"\"\n    sum_of_digits is a function that takes n as input and returns sum of digits in n\n    >>> sum_of_digits(0)\n    0\n    >>> sum_of_digits(1)\n    1\n    >>> sum_of_digits(12)\n    3\n    >>> sum_of_digits(123)\n    6\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n\ndef sum_of_squares(n):\n    \"\"\"\n    sum_of_squares is a function that takes n as input and returns sum of squares of digits in n\n    >>> sum_of_squares(0)\n    0\n    >>> sum_of_squares(1)\n    1\n    >>> sum_of_squares(12)\n    5\n    >>> sum_of_squares(123)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) ** 2 + sum_of_squares(n // 10)\n\n\ndef is_power_of_2(n):\n    \"\"\"\n    is_power_of_2 is a function that takes n as input and returns True if n is a power of 2\n    >>> is_power_of_2(1)\n    True\n    >>> is_power_of_2(2)\n    True\n    >>> is_power_of_2(4)\n    True\n    >>> is_power_of_2(16)\n    True\n    >>> is_power_of_2(32)\n    True\n    >>> is_power_of_2(64)\n    True\n    >>> is_power_of_2(128)\n    True\n    >>> is_power_of_2(256)\n    True\n    >>> is_power_of_2(512)\n    True\n    \"\"\"\n    if n == 1:\n        return"}
{"task_id": "python/17", "language": "python", "completion": "new_text = ''\n    for char in text:\n        if not char in 'aeiou':\n            new_text += char\n    return new_text\n\ndef test_remove_vowels():\n    \"\"\"\n    >>> test_remove_vowels()\n    OK\n    \"\"\"\n    assert remove_vowels('') == ''\n    assert remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm'\n    assert remove_vowels('abcdef') == 'bcdf'\n    assert remove_vowels('aaaaa') == ''\n    assert remove_vowels('aaBAA') == 'B'\n    assert remove_vowels('zbcd') == 'zbcd'\n    \n    \n    \ndef pig_latin(word):\n    \"\"\"\n    pig_latin is a function that takes string and returns pig latin version of it.\n    >>> pig_latin('')\n    ''\n    >>> pig_latin('python')\n    'ythonpay'\n    >>> pig_latin('abcdef')\n    'abcdef'\n    >>> pig_latin('qwerty')\n    'qwerty'\n    >>> pig_latin('qwerty\\n')\n    'qwerty\\n'\n    \"\"\"\n    if word[0] in 'aeiou':\n        return word + 'way'\n    return word[1:] + word[0] + 'ay'\n\ndef test_pig_latin():\n    \"\"\"\n    >>> test_pig_latin()\n    OK\n    \"\"\"\n    assert pig_latin('') == ''\n    assert pig_latin('python') == 'ythonpay'\n    assert pig_latin('abcdef') == 'abcdef'\n    assert pig_latin('qwerty') == 'qwerty'\n    assert pig_latin('qwerty\\n') == 'qwerty\\n'\n    \n    \n    \ndef word_score(word):\n    \"\"\"\n    word_score is a function that takes string and returns its score.\n    >>> word_score('')\n    0\n    >>> word_score('qwerty')\n    0\n    >>> word_score('python')\n    1\n    >>> word_score('abcdef')\n    1\n    >>> word_score('qwerty\\n')\n    0\n    \"\"\"\n    if word == '':\n        return 0\n    return len(word)\n\ndef word_score2(word):\n    \"\"\"\n    word_score2 is a function that takes string and returns its score.\n    >>> word_score2('')\n    0\n    >>> word_score2('qwerty')\n    0\n    >>> word_score2('python')\n    1\n    >>> word_score2('abcdef')\n    1\n    >>> word_score2('qwerty\\n')\n    0\n    \"\"\"\n    score = 0\n    for char in word:\n        score += ord(char)\n    return score\n\ndef word_score3(word):\n    \"\"\"\n    word_score3 is a function that takes string and returns its score.\n    >>> word_score3('')\n    0\n    >>> word_score3('qwerty')\n    0\n    >>> word_score3('python')\n    1\n    >>> word_score3('abcdef')\n    1\n    >>> word_score3('qwerty\\n')\n    0\n    \"\"\"\n    score = 0\n    for char in word:\n        score += ord(char) - ord('a') + 1\n    return score\n\ndef word_score4(word):\n    \"\"\"\n    word_score4 is a function that takes string and returns its score.\n    >>> word_score4('')\n    0\n    >>> word_score4('qwerty')\n    0\n    >>> word_score4('python')\n    1\n    >>> word_score4('abcdef')\n    1\n    >>> word_score4('qwerty\\n')\n    0\n    \"\"\"\n    return sum(map(ord, word)) - sum(map(ord, 'qwerty'))\n\ndef word_score5(word):\n    \"\"\"\n    word_score5 is a function that takes string and returns its score.\n    >>> word_score5('')\n    0\n    >>> word_score5('qwerty')\n    0\n    >>> word_score5('python')\n    1\n    >>> word_score5('abcdef')\n    1\n    >>> word_score5('qwerty\\n')\n    0\n    \"\"\"\n    return sum(map(ord, word)"}
{"task_id": "python/18", "language": "python", "completion": "return all([n < t for n in l])\n\n\ndef is_even(n: int):\n    \"\"\"Return True if n is even.\n    >>> is_even(10)\n    True\n    >>> is_even(11)\n    False\n    \"\"\"\n    return n % 2 == 0\n\n\ndef is_odd(n: int):\n    \"\"\"Return True if n is odd.\n    >>> is_odd(10)\n    False\n    >>> is_odd(11)\n    True\n    \"\"\"\n    return n % 2 == 1\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome.\"\"\"\n    return s == s[::-1]\n\n\ndef has_duplicate(l: list):\n    \"\"\"Return True if any number in list l appears more than once.\"\"\"\n    return any(l.count(n) > 1 for n in l)\n\n\ndef sum_of_squares(l: list):\n    \"\"\"Return sum of squares for all items in list l.\"\"\"\n    return sum([n ** 2 for n in l])\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime.\"\"\"\n    return n > 1 and all(n % i != 0 for i in range(2, n))\n\n\ndef is_even_prime(n: int):\n    \"\"\"Return True if n is even and prime.\"\"\"\n    return is_prime(n) and n % 2 == 0\n\n\ndef sum_of_primes_below(n: int):\n    \"\"\"Return sum of all primes below n.\"\"\"\n    return sum(n for n in range(2, n) if is_prime(n))\n\n\ndef is_even_prime_below(n: int):\n    \"\"\"Return True if n is even and prime below n.\"\"\"\n    return is_even(n) and is_prime(n)\n\n\ndef sum_of_primes(n: int):\n    \"\"\"Return sum of all primes below n.\"\"\"\n    return sum(n for n in range(2, n) if is_prime(n))\n\n\ndef sum_of_odds(l: list):\n    \"\"\"Return sum of all odd numbers in list l.\"\"\"\n    return sum([n for n in l if n % 2 == 1])\n\n\ndef is_even_sum_greater(l: list):\n    \"\"\"Return True if sum of even numbers in list l is greater than\n    sum of odd numbers in list l.\n    >>> is_even_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_even_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 0]) > sum([n for n in l if n % 2 == 1])\n\n\ndef sum_of_odds_below(n: int):\n    \"\"\"Return sum of all odd numbers below n.\"\"\"\n    return sum([n for n in range(2, n) if n % 2 == 1])\n\n\ndef is_odd_sum_greater(l: list):\n    \"\"\"Return True if sum of odd numbers in list l is greater than\n    sum of even numbers in list l.\n    >>> is_odd_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_odd_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 1]) > sum([n for n in l if n % 2 == 0])\n\n\ndef sum_of_odds_below(n: int):\n    \"\"\"Return sum of all odd numbers below n.\"\"\"\n    return sum([n for n in range(2, n) if n % 2 == 1])\n\n\ndef is_odd_sum_greater(l: list):\n    \"\"\"Return True if sum of odd numbers in list l is greater than\n    sum of even numbers in list l.\n    >>> is_odd_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_odd_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 1]) > sum([n for n in l if n % 2 == 0])\n\n\ndef sum_of_odds_below(n: int):\n    \"\"\"Return sum of all odd numbers below n.\"\"\"\n    return sum([n for n in range(2, n) if n % 2 == 1])\n\n\ndef is_odd_sum_greater(l: list):\n    \"\"\"Return True if sum of odd numbers in list l is greater than\n    sum of even numbers in list l.\n    >>> is_odd_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_odd_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 1]) > sum([n for n in l if n % 2 == 0])\n\n\ndef sum_of_odds_below(n: int):\n    \"\"\"Return sum of all odd numbers below n.\"\"\"\n    return sum([n for n in range(2, n) if n % 2 == 1])\n\n\ndef is_odd_sum_greater(l: list):\n    \"\"\"Return True if sum of odd numbers in list l is greater than\n    sum of even numbers in list l.\n    >>> is_odd_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_odd_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 1]) > sum([n for n in l if n % 2 == 0])\n\n\ndef sum_of_odds_below(n: int):\n    \"\"\"Return sum of all odd numbers below n.\"\"\"\n    return sum([n for n in range(2, n) if n % 2 == 1])\n\n\ndef is_odd_sum_greater(l: list):\n    \"\"\"Return True if sum of odd numbers in list l is greater than\n    sum of even numbers in list l.\n    >>> is_odd_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_odd_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 1]) > sum([n for n in l if n % 2 == 0])\n\n\ndef sum_of_odds_below(n: int):\n    \"\"\"Return sum of all odd numbers below n.\"\"\"\n    return sum([n for n in range(2, n) if n % 2 == 1])\n\n\ndef is_odd_sum_greater(l: list):\n    \"\"\"Return True if sum of odd numbers in list l is greater than\n    sum of even numbers in list l.\n    >>> is_odd_sum_greater([1, 2, 3, 4, 5])\n    True\n    >>> is_odd_sum_greater([1, 3, 3, 4, 5])\n    False\n    \"\"\"\n    return sum([n for n in l if n % 2 == 1])"}
{"task_id": "python/18", "language": "python", "completion": "# your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # your code here\n    for i in l:\n        if i >= t:\n            return False\n    return True\n#---------------------------------------------------------------------------------------------------------------------\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all"}
{"task_id": "python/19", "language": "python", "completion": "return x + y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(3, 4)\n    12\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef square(x: int):\n    \"\"\"Square x\n    >>> square(4)\n    16\n    >>> square(3)\n    9\n    \"\"\"\n    return mul(x, x)\n\n\ndef abs(x: int):\n    \"\"\"Absolute value of x\n    >>> abs(5)\n    5\n    >>> abs(-5)\n    5\n    \"\"\"\n    if x < 0:\n        return -x\n    return x\n\n\ndef sqrt(x: int):\n    \"\"\"Square root of x\n    >>> sqrt(16)\n    4\n    >>> sqrt(36)\n    6\n    \"\"\"\n    assert x >= 0\n    return mul(x, x)\n\n\ndef pow(x: int, y: int):\n    \"\"\"x to the power of y\n    >>> pow(2, 3)\n    8\n    \"\"\"\n    assert x >= 0 and y >= 0\n    return x ** y\n\n\ndef pi():\n    \"\"\"Approximate the constant pi\"\"\"\n    return 3 + sqrt(5) / 2\n\n\ndef taylor_sin(x: int, n: int):\n    \"\"\"Approximate sin(x) for x in [-pi/2, pi/2] with a Taylor series of n terms\"\"\"\n    assert x >= -pi() / 2 and x <= pi() / 2\n    sum = 0\n    for i in range(n):\n        sum += pow(-1, i) * pow(x, 2 * i + 1) / factorial(2 * i + 1)\n    return sum\n\n\ndef factorial(n: int):\n    \"\"\"n!\"\"\"\n    assert n >= 0\n    mul = 1\n    for i in range(1, n + 1):\n        mul *= i\n    return mul\n\n\ndef taylor_cos(x: int, n: int):\n    \"\"\"Approximate cos(x) for x in [-pi/2, pi/2] with a Taylor series of n terms\"\"\"\n    assert x >= -pi() / 2 and x <= pi() / 2\n    sum = 0\n    for i in range(n):\n        sum += pow(-1, i) * pow(x, 2 * i) / factorial(2 * i)\n    return sum\n\n\ndef taylor_tan(x: int, n: int):\n    \"\"\"Approximate tan(x) for x in [-pi, pi] with a Taylor series of n terms\"\"\"\n    assert x >= -pi() and x <= pi()\n    sum = 0\n    for i in range(n):\n        sum += pow(-1, i) * pow(x, 2 * i + 1) / factorial(2 * i + 1)\n    return sum\n\n\ndef taylor_arcsin(x: int, n: int):\n    \"\"\"Approximate arcsin(x) for x in [-1, 1] with a Taylor series of n terms\"\"\"\n    assert x >= -1 and x <= 1\n    sum = 0\n    for i in range(n):\n        sum += pow(-1, i) * pow(x, 2 * i + 1) / factorial(2 * i + 1)\n    return sum\n\n\ndef taylor_arccos(x: int, n: int):\n    \"\"\"Approximate arccos(x) for x in [-1, 1] with a Taylor series of n terms\"\"\"\n    assert x >= -1 and x <= 1\n    return pi() / 2 - taylor_arcsin(x, n)\n\n\ndef taylor_arctan(x: int, n: int):\n    \"\"\"Approximate arctan(x) for x in [-1, 1] with a Taylor series of n terms\"\"\"\n    assert x >= -1 and x <= 1\n    return pi() / 4 - taylor_arccos(x, n) / 2\n\n\ndef taylor_sinh(x: int, n: int):\n    \"\"\"Approximate sinh(x) for x in [-pi, pi] with a Taylor series of n terms\"\"\"\n    assert x >= -pi() and x <= pi()\n    return taylor_arcsin(x, n) / 2\n\n\ndef taylor_cosh(x: int, n: int):\n    \"\"\"Approximate cosh(x) for x in [-pi, pi] with a Taylor series of n terms\"\"\"\n    assert x >= -pi() and x <= pi()\n    return taylor_arccos(x, n) / 2\n\n\ndef taylor_tanh(x: int, n: int):\n    \"\"\"Approximate tanh(x) for x in [-1, 1] with a Taylor series of n terms\"\"\"\n    assert x >= -1 and x <= 1\n    return taylor_arctan(x, n) / pi()\n\n\ndef taylor_logistic(x: int, n: int):\n    \"\"\"Approximate logistic(x) for x in [-2, 2] with a Taylor series of n terms\"\"\"\n    assert x >= -2 and x <= 2\n    return taylor_sinh(x, n) / taylor_cosh(x, n)\n\n\ndef taylor_erf(x: int, n: int):\n    \"\"\"Approximate erf(x) for x in [-inf, inf] with a Taylor series of n terms\"\"\"\n    assert x >= -inf and x <= inf\n    return taylor_logistic(x, n) / 2\n\n\ndef taylor_erfc(x: int, n: int):\n    \"\"\"Approximate erfc(x) for x in [0, inf] with a Taylor series of n terms\"\"\"\n    assert x >= 0 and x <= inf\n    return taylor_erf(x, n) / 2\n\n\ndef taylor_erfi(x: int, n: int):\n    \"\"\"Approximate erfi(x) for x in [-inf, inf] with a Taylor series of n terms\"\"\"\n    assert x >= -inf and x <= inf\n    return taylor_erf(x, n) / 2\n\n\ndef taylor_laplace(x: int, n: int):\n    \"\"\"Approximate laplace(x) for x in [-inf, inf] with a Taylor series of n terms\"\"\"\n    assert x >= -inf and x <= inf\n    return taylor_erfc(x, n) / 2\n\n\ndef taylor_cauchy(x: int, n: int):\n    \"\"\"Approximate cauchy(x) for x in [-inf, inf] with a Taylor series of n terms\"\"\"\n    assert x >= -inf and x"}
{"task_id": "python/19", "language": "python", "completion": "return x + y\n\n\ndef apply_twice(f, x):\n    \"\"\"Return f(x), where f can be either a function or a composition of\n    functions.\n\n    >>> apply_twice(square, 3)\n    81\n    >>> apply_twice(add, 5)\n    5 + 5\n    >>> apply_twice(add_one, 3)\n    5\n    >>> apply_twice(square, 2)\n    16\n    >>> apply_twice(square, 5)\n    25\n    >>> apply_twice(square, 6)\n    64\n    >>> apply_twice(add_two, 5)\n    11\n    \"\"\"\n    return f(f(x))\n\n\ndef square(x):\n    \"\"\"Return x squared\"\"\"\n    return x * x\n\n\ndef add_one(x):\n    \"\"\"Return x + 1\"\"\"\n    return x + 1\n\n\ndef add_two(x):\n    \"\"\"Return x + 2\"\"\"\n    return x + 2\n\n\ndef square_with_curry(n):\n    \"\"\"Return a function that takes one argument and returns the result of\n    n squared.\n\n    >>> square_with_curry(2)\n    lambda x: x ** 2\n    >>> f = square_with_curry(3)\n    >>> f\n    lambda x: x ** 3\n    >>> f(4)\n    81\n    >>> f(-2)\n    4\n    \"\"\"\n    return lambda x: x ** n\n\n\ndef compose1(f, g):\n    \"\"\"Return the composition function which given x, returns f(g(x)).\n\n    >>> add_one = lambda x: x + 1\n    >>> square = lambda x: x ** 2\n    >>> apply_twice(square, add_one)(3)\n    16\n    >>> from operator import add, mul, sub\n    >>> apply_twice(mul, add)(2, 3)\n    26\n    \"\"\"\n    return lambda x: f(g(x))\n\n\ndef composite_identity(f, g):\n    \"\"\"\n    Return True if f and g are identical, False otherwise.\n\n    >>> add_one = lambda x: x + 1\n    >>> square = lambda x: x ** 2\n    >>> b1 = composite_identity(square, add_one)\n    >>> b1(0)\n    True\n    >>> b1(4)\n    False\n    >>> b1(5)\n    False\n    \"\"\"\n    return lambda x: f(g(x)) == g(f(x))\n\n\ndef count_cond(condition):\n    \"\"\"\n    >>> count_factors = count_cond(lambda n: n % 5 == 0)\n    >>> count_factors(10)  # 5, 10\n    2\n    >>> count_factors(4)  # 5, 10\n    1\n    >>> count_factors(12)  # 5, 10, 12\n    3\n\n    >>> is_prime = lambda n: count_factors(n) == 2\n    >>> count_primes = count_cond(is_prime)\n    >>> count_primes(2)    # 2\n    1\n    >>> count_primes(3)    # 2, 3\n    2\n    >>> count_primes(4)    # 2, 3\n    2\n    >>> count_primes(5)    # 2, 3, 5\n    2\n    >>> count_primes(20)   # 2, 3, 5, 7, 11, 13, 17, 19\n    8\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_cond_func(n):\n        i = 1\n        count = 0\n        while i <= n:\n            if condition(i):\n                count += 1\n            i += 1\n        return count\n    return count_cond_func\n\n\ndef cycle(f1, f2, f3):\n    \"\"\"Returns a function that is itself a higher-order function.\n\n    >>> def add1(x):\n    ...     return x + 1\n    >>> def times2(x):\n    ...     return x * 2\n    >>> def add3(x):\n    ...     return x + 3\n    >>> my_cycle = cycle(add1, times2, add3)\n    >>> my_cycle(0)(10)\n    11\n    >>> my_cycle(1)(10)\n    12\n    >>> my_cycle(2)(10)\n    13\n    >>> my_cycle(3)(10)\n    16\n    >>> my_cycle(4)(10)\n    23\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def func(n):\n        def func2(x):\n            i = 1\n            while i <= n:\n                if i % 3 == 1:\n                    x = f1(x)\n                elif i % 3 == 2:\n                    x = f2(x)\n                else:\n                    x"}
{"task_id": "python/20", "language": "python", "completion": "return set(s0) == set(s1)\n\n\ndef max_char(s: str):\n    \"\"\"\n    Find the character that is repeated the maximum number of times in string s.\n    >>> max_char('aabbccccdddd')\n    'c'\n    >>> max_char('aabbccddddeee')\n    'e'\n    >>> max_char('aabbccdde')\n    ''\n    >>> max_char('aabbccddeee')\n    ''\n    >>> max_char('aabbccde')\n    ''\n    >>> max_char('aabbccdeee')\n    ''\n    \"\"\"\n    return ''\n\n\ndef first_vowel(s: str):\n    \"\"\"\n    Find the first vowel in string s. Return None if no vowels are present.\n    >>> first_vowel('abc')\n    >>> first_vowel('abca')\n    >>> first_vowel('abcabc')\n    >>> first_vowel('abcde')\n    >>> first_vowel('aeiou')\n    >>> first_vowel('abcdef')\n    >>> first_vowel('abcdeou')\n    >>> first_vowel('abcdeouio')\n    \"\"\"\n    return None\n\n\ndef last_vowel(s: str):\n    \"\"\"\n    Find the last vowel in string s. Return None if no vowels are present.\n    >>> last_vowel('abc')\n    >>> last_vowel('abca')\n    >>> last_vowel('abcabc')\n    >>> last_vowel('abcde')\n    >>> last_vowel('aeiou')\n    >>> last_vowel('abcdef')\n    >>> last_vowel('abcdeou')\n    >>> last_vowel('abcdeouio')\n    \"\"\"\n    return None\n\n\ndef count_vowels(s: str):\n    \"\"\"\n    Count how many vowels are in string s.\n    >>> count_vowels('abcde')\n    >>> count_vowels('aeiou')\n    >>> count_vowels('abcdef')\n    >>> count_vowels('abcdeou')\n    >>> count_vowels('abcdeouio')\n    \"\"\"\n    return 0\n\n\ndef count_consonants(s: str):\n    \"\"\"\n    Count how many consonants are in string s.\n    >>> count_consonants('abcde')\n    >>> count_consonants('aeiou')\n    >>> count_consonants('abcdef')\n    >>> count_consonants('abcdeou')\n    >>> count_consonants('abcdeouio')\n    \"\"\"\n    return 0\n\n\ndef has_repeated_vowel(s: str):\n    \"\"\"\n    Check if string s has two consecutive vowels.\n    >>> has_repeated_vowel('abcde')\n    False\n    >>> has_repeated_vowel('aeiou')\n    False\n    >>> has_repeated_vowel('abcdef')\n    False\n    >>> has_repeated_vowel('abcdeou')\n    True\n    >>> has_repeated_vowel('abcdeouio')\n    True\n    \"\"\"\n    return False\n\n\ndef has_repeated_consonant(s: str):\n    \"\"\"\n    Check if string s has two consecutive consonants.\n    >>> has_repeated_consonant('abcde')\n    False\n    >>> has_repeated_consonant('aeiou')\n    False\n    >>> has_repeated_consonant('abcdef')\n    False\n    >>> has_repeated_consonant('abcdeou')\n    False\n    >>> has_repeated_consonant('abcdeouio')\n    True\n    \"\"\"\n    return False\n\n\ndef has_repeated_pair(s: str):\n    \"\"\"\n    Check if string s has two consonants in a row that are the same.\n    >>> has_repeated_pair('abcde')\n    False\n    >>> has_repeated_pair('aeiou')\n    False\n    >>> has_repeated_pair('abcdef')\n    False\n    >>> has_repeated_pair('abcdeou')\n    False\n    >>> has_repeated_pair('abcdeouio')\n    True\n    \"\"\"\n    return False\n\n\ndef has_repeated_vowel_pair(s: str):\n    \"\"\"\n    Check if string s has two vowels in a row that are the same.\n    >>> has_repeated_vowel_pair('abcde')\n    False\n    >>> has_repeated_vowel_pair('aeiou')\n    False\n    >>> has_repeated_vowel_pair('abcdef'"}
{"task_id": "python/20", "language": "python", "completion": "s0_set = set(s0)\n    s1_set = set(s1)\n    if s0_set == s1_set:\n        return True\n    return False\n    \ndef longest_substring(s: str, k: int) -> str:\n    \"\"\"\n    Find the longest substring of s, which has at most k distinct characters.\n    >>> longest_substring('abcd', 3)\n    'abcd'\n    >>> longest_substring('aabbcc', 2)\n    'aabbcc'\n    >>> longest_substring('aabbcc', 1)\n    'bc'\n    >>> longest_substring('aabbcc', 0)\n    ''\n    \"\"\"\n    longest_substring = \"\"\n    longest_substring_len = 0\n    substring = \"\"\n    substring_len = 0\n    substring_set = set()\n    for c in s:\n        if c not in substring_set:\n            substring += c\n            substring_set.add(c)\n            substring_len += 1\n            if substring_len > longest_substring_len:\n                longest_substring = substring\n                longest_substring_len = substring_len\n        else:\n            substring_set.add(c)\n            substring_len += 1\n            longest_substring_len = substring_len\n            substring = c\n    return longest_substring\n    \ndef longest_substring_with_k_distinct_characters(s: str, k: int) -> str:\n    \"\"\"\n    Find the longest substring of s, which has at most k distinct characters.\n    >>> longest_substring_with_k_distinct_characters('abcd', 3)\n    'abcd'\n    >>> longest_substring_with_k_distinct_characters('aabbcc', 2)\n    'aabbcc'\n    >>> longest_substring_with_k_distinct_characters('aabbcc', 1)\n    'bc'\n    >>> longest_substring_with_k_distinct_characters('aabbcc', 0)\n    ''\n    >>> longest_substring_with_k_distinct_characters('aabbcc', 3)\n    'aabbcc'\n    \"\"\"\n    longest_substring = \"\"\n    longest_substring_len = 0\n    substring = \"\"\n    substring_len = 0\n    substring_set = set()\n    for c in s:\n        if c not in substring_set:\n            substring += c\n            substring_set.add(c)\n            substring_len += 1\n        else:\n            substring_set.add(c)\n            substring_len += 1\n        if substring_set.l"}
{"task_id": "python/21", "language": "python", "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 2) + fib(n - 1)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 1 or n == 2:\n        return 1\n    res = 1\n    prev_res = 1\n    for _ in range(n - 2):\n        res, prev_res = res + prev_res, res\n    return res\n\n\ndef fib_gen(n: int):\n    \"\"\"Generator of Fibonacci number.\n\n    >>> fib_gen(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    a, b = 1, 1\n    yield a\n    yield b\n    for _ in range(n - 2):\n        a, b = b, a + b\n        yield b\n\n\ndef fib_gen_iter(n: int):\n    \"\"\"Iterative Fibonacci number generator.\"\"\"\n    a, b = 1, 1\n    yield a\n    yield b\n    for _ in range(n - 2):\n        a, b = b, a + b\n        yield b\n\n\ndef fib_rec(n: int):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return 1\n    return fib_rec(n - 2) + fib_rec(n - 1)\n\n\ndef fib_recursive(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_recursive(n - 1, b, a + b)\n\n\ndef fib_iterative(n: int, a: int = 1, b: int = 1):\n    \"\"\"Iterative Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return b\n\n\ndef fib_recursive(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_recursive(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_recursive(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_recursive(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_recursive(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a: int = 1, b: int = 1):\n    \"\"\"Recursive Fibonacci number generator.\"\"\"\n    if n == 1 or n == 2:\n        return a\n    return fib_rec(n - 1, b, a + b)\n\n\ndef fib_rec(n: int, a:"}
{"task_id": "python/21", "language": "python", "completion": "if n < 1:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n    \nfrom time import perf_counter\nfrom typing import Callable\n\ndef time_it(fn: Callable, n: int):\n    start_time = perf_counter()\n    for i in range(n):\n        fib(n)\n    return perf_counter() - start_time\n    \ndef time_it_wrapper(fn: Callable, n: int):\n    def timed_fn(n):\n        fn(n)\n    return time_it(timed_fn, n)\n\nprint(time_it_wrapper(fib, 50))\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        fib_1, fib_2 = 1, 1\n        for i in range(2, n):\n            fib_1, fib_2 = fib_2, fib_1 + fib_2\n        return fib_2\n\nimport time\nprint(fib_iter(50))\n\ndef fib_memo(n: int, memo: dict = None):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n < 1:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    elif n in memo:\n        return memo[n]\n    else:\n        result = fib_memo(n - 1, memo) + fib_memo(n - 2, memo)\n        memo[n] = result\n        return result\n    \ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        fib_1, fib_2 = 1, 1\n        for i in range(2, n):\n            fib_1, fib_2 = fib_2, fib_1 + fib_2\n        return fib_2\n    \ndef fib_memo(n: int, memo: dict = None):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n < 1:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    elif n in memo:\n        return memo[n]\n    else:\n        result = fib_memo(n - 1, memo) + fib_memo(n - 2, memo)\n        memo[n] = result\n        return result\n    \ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n: int):\n    def timed_fn(n):\n        fib_iter(n)\n    return time_it(timed_fn, n)\n\nprint(fib_memo_wrapper(500))\nprint(fib_iter_wrapper(500))\n\n\ndef fib_memo_wrapper(n: int):\n    def timed_fn(n):\n        fib_memo(n)\n    return time_it(timed_fn, n)\n\ndef fib_iter_wrapper(n:"}
{"task_id": "python/22", "language": "python", "completion": "return sorted(set(l1) & set(l2))\n\n\ndef union(l1: list, l2: list):\n    \"\"\"Return sorted union of lists\n    >>> union([1, 3, 4, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 2, 3, 4, 5, 7, 9, 121, 34, 653]\n    >>> union([5, 3, 2, 8], [3, 2])\n    [2, 3, 5, 8]\n    \"\"\"\n    return sorted(set(l1) | set(l2))\n\n\ndef subtract(l1: list, l2: list):\n    \"\"\"Return sorted set-difference of lists\n    >>> subtract([1, 3, 4, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [3, 4, 2, 34, 653, 121]\n    >>> subtract([5, 3, 2, 8], [3, 2])\n    [2, 8, 5]\n    \"\"\"\n    return sorted(set(l1) - set(l2))\n\n\ndef intersect(l1: list, l2: list):\n    \"\"\"Return sorted set-intersection of lists.\n    >>> intersect([1, 3, 4, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> intersect([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n\ndef transpose(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    return [list(x) for x in zip(*matrix)]\n\n\ndef transpose_map(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_map([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_map([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    return list(map(lambda *x: [*x], *matrix))\n\n\ndef transpose_zip(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_zip([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_zip([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    return [*zip(*matrix)]\n\n\ndef transpose_nested(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_nested([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_nested([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    return [*map(lambda *x: [*x], *matrix)]\n\n\ndef transpose_recursive(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_recursive([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_recursive([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    if not matrix:\n        return matrix\n    return [*map(lambda *x: [*x], *matrix)] + transpose_recursive(\n        [*zip(*matrix[1:])]\n    )\n\n\ndef transpose_recursive_map(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_recursive_map([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_recursive_map([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    if not matrix:\n        return matrix\n    return [*map(lambda *x: [*x], *matrix)] + [*map(\n        lambda *x: [*x], *transpose_recursive_map(*[*zip(*matrix[1:])])\n    )]\n\n\ndef transpose_recursive_zip(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_recursive_zip([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_recursive_zip([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    if not matrix:\n        return matrix\n    return [*zip(*matrix)] + [*zip(*transpose_recursive_zip(*[*zip(*matrix[1:])]))]\n\n\ndef transpose_recursive_nested(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_recursive_nested([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_recursive_nested([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    if not matrix:\n        return matrix\n    return [*map(lambda *x: [*x], *matrix)] + [*map(\n        lambda *x: [*x], *transpose_recursive_nested(*[*zip(*matrix[1:])])\n    )]\n\n\ndef transpose_recursive_map_nested(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_recursive_map_nested([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_recursive_map_nested([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    if not matrix:\n        return matrix\n    return [*map(lambda *x: [*x], *matrix)] + [*map(\n        lambda *x: [*x], *transpose_recursive_map_nested(*[*zip(*matrix[1:])]]\n    )]\n\n\ndef transpose_recursive_zip_nested(matrix: list):\n    \"\"\"Return transposed matrix.\n    >>> transpose_recursive_zip_nested([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    >>> transpose_recursive_zip_nested([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    \"\"\"\n    if not matrix:\n        return matrix\n    return [*zip(*matrix)]"}
{"task_id": "python/22", "language": "python", "completion": "return list(set(l1).intersection(set(l2)))\n\n\ndef word_lengths(phrase):\n    \"\"\"Return the length of words in phrase.\n\n    >>> word_lengths(\"Welcome to Python!\")\n    [7, 2, 6]\n\n    \"\"\"\n    return list(map(len, phrase.split()))\n\n\ndef digits_to_num(digit):\n    \"\"\"Return the value of digit in base 10.\n    >>> digits_to_num(23553)\n    533\n    \"\"\"\n    return int(digit)\n\n\ndef power(base, exp):\n    \"\"\"Return base to exp power.\n    >>> power(3, 3)\n    27\n    \"\"\"\n    return base ** exp\n\n\ndef expo(base, exp):\n    \"\"\"Return base to exp power.\n    >>> expo(3, 3)\n    27\n    \"\"\"\n    return base ** exp\n\n\ndef gcd(a, b):\n    \"\"\"Return the greatest common divisor of a and b.\n\n    >>> gcd(3, 7)\n    1\n    >>> gcd(10, 20)\n    10\n    >>> gcd(14, 70)\n    14\n    >>> gcd(10, 11)\n    1\n    >>> gcd(1, 1)\n    1\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef square(n):\n    return n * n\n\n\ndef sum_n(n):\n    return sum(square(i) for i in range(1, n + 1))\n\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(8)\n    False\n    >>> is_prime(21)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef gcd_iter(a, b):\n    \"\"\"Return the greatest common divisor of a and b.\n\n    >>> gcd_iter(3, 7)\n    1\n    >>> gcd_iter(10, 20)\n    10\n    >>> gcd_iter(14, 70)\n    14\n    >>> gcd_iter(10, 11)\n    1\n    >>> gcd_iter(1, 1)\n    1\n    \"\"\"\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef fib_iter(n):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fib_iter(2)\n    1\n    >>> fib_iter(3)\n    2\n    >>> fib_iter(4)\n    3\n    >>> fib_iter(5)\n    5\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    fib1, fib2 = 1, 1\n    for i in range(2, n):\n        fib2, fib1 = fib1 + fib2, fib2\n    return fib2\n\n\ndef is_palindrome(phrase):\n    \"\"\"Return True if phrase is a palindrome (reads the same backwards and\n    forwards).\n\n    >>> is_palindrome('tacocat')\n    True\n    >>> is_palindrome('dovod')\n    True\n    >>> is_palindrome('rat')\n    False\n    \"\"\"\n    for i in range(0, int(len(phrase) / 2)):\n        if phrase[i] != phrase[-i - 1]:\n            return False\n    return True\n\n\ndef is_valid_time(time):\n    \"\"\"Determine whether a string is a valid time.\"\"\"\n    hour, minute = time.split(\":\")\n    if int(hour) > 24 or int(minute) > 60:\n        return False\n    return True\n\n\ndef time_to_int(time):\n    \"\"\"Convert a string time into seconds since midnight.\n    >>> time_to_int('12:34')\n    754\n    \"\"\"\n    h, m = time.split(\":\")\n    return int(h) * 60 + int(m)\n\n\ndef int_to_time(seconds):\n    \"\"\"Convert a number of seconds into a string time.\"\"\"\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    return f\"{hours}:{minutes}:{seconds}\"\n\n\ndef int_to_minutes(seconds):\n    \"\"\"Convert number of seconds to minutes.\n    >>> int_to_minutes(140)\n    2.1\n    \"\"\"\n    return seconds / 60\n\n\ndef minutes_to_int(minutes):\n    \"\"\"Convert a number of minutes into seconds.\"\"\"\n    return minutes * 60\n\n\ndef num_minutes(time):\n    \"\"\"Calculate the number of minutes in time.\n    >>> num_minutes(\"2:15\")\n    135\n    \"\"\"\n    return minutes_to_int(time_to_int(time))\n\n\ndef num_seconds(time):\n    \"\"\"Calculate the number of seconds in time.\n    >>> num_seconds(\"2:15\")\n    1350\n    \"\"\"\n    return num_minutes(time) * 60\n\n\ndef is_leap_year(year):\n    \"\"\"Return whether year is a leap year.\"\"\"\n    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)\n\n\ndef num_days(year, month):\n    \"\"\"Return the number of days in month for year.\"\"\"\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    else:\n        return 31\n\n\ndef days_in_month(year, month):\n    \"\"\"Return the number of days in month for year.\"\"\"\n    return num_days(year, month)\n\n\ndef next_day(year, month, day):\n    \"\"\"Return the year, month, day of the next day.\n\n    >>> next_day(2015, 12, 30)\n    (2015, 12, 31)\n    >>> next_day(2015, 12, 31)\n    (2016, 1, 1)\n    >>> next_day(2016, 2, 29)\n    (2016, 2, 30)\n    >>> next_day(2016, 2, 28)\n    (2016, 2, 29)\n    \"\"\"\n    if is_leap_year(year) and month == 2:\n        return year, month, day + 1\n    elif month == 12 and day == 31:\n        return year + 1, 1, 1\n    elif day + 1 > days_in_month(year, month):\n        retur"}
{"task_id": "python/23", "language": "python", "completion": "from math import sqrt\n    if n == 1:\n        return None\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        for i in range(3, int(sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return largest_prime_factor(n // i)\n        return n\n\n\ndef pascal_triangle(n: int):\n    \"\"\"Return pascal's triangle up to row n.\n    >>> pascal_triangle(0)\n    [[1]]\n    >>> pascal_triangle(1)\n    [[1], [1, 1]]\n    >>> pascal_triangle(2)\n    [[1], [1, 1], [1, 2, 1]]\n    >>> pascal_triangle(3)\n    [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n    >>> pascal_triangle(4)\n    [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    \"\"\"\n    row = [1]\n    result = []\n    if n == 0:\n        return [[1]]\n    elif n == 1:\n        return pascal_triangle(0) + [[1], [1, 1]]\n    elif n == 2:\n        return pascal_triangle(1) + [[1], [1, 1], [1, 2, 1]]\n    elif n == 3:\n        return pascal_triangle(2) + [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n    elif n == 4:\n        return pascal_triangle(3) + [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    else:\n        for i in range(n):\n            result.append(row)\n            row = [row[i] + row[i + 1] for i in range(len(row) - 1)]\n            row = [1] + row + [1]\n        return pascal_triangle(n - 1) + [row]\n\n\ndef pascal_row(n: int):\n    \"\"\"Return pascal's row n.\n    >>> pascal_row(0)\n    [1]\n    >>> pascal_row(1)\n    [1, 1]\n    >>> pascal_row(2)\n    [1, 2, 1]\n    >>> pascal_row(3)\n    [1, 3, 3, 1]\n    >>> pascal_row(4)\n    [1, 4, 6, 4, 1]\n    \"\"\"\n    row = [1]\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 2, 1]\n    elif n == 3:\n        return [1, 3, 3, 1]\n    elif n == 4:\n        return [1, 4, 6, 4, 1]\n    else:\n        for i in range(n):\n            row = [row[i] + row[i + 1] for i in range(len(row) - 1)]\n            row = [1] + row + [1]\n        return row\n\n\ndef pascal_triangle_generator(n: int):\n    \"\"\"Return pascal's triangle up to row n as generator.\"\"\"\n    if n == 0:\n        yield [1]\n    elif n == 1:\n        yield pascal_triangle_generator(0) + pascal_triangle_generator(0) + [[1], [1, 1]]\n    elif n == 2:\n        yield pascal_triangle_generator(1) + pascal_triangle_generator(1) + pascal_triangle_generator(1) + [[1], [1, 1], [1, 2, 1]]\n    elif n == 3:\n        yield pascal_triangle_generator(2) + pascal_triangle_generator(2) + pascal_triangle_generator(2) + pascal_triangle_generator(2) + [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n    elif n == 4:\n        yield pascal_triangle_generator(3) + pascal_triangle_generator(3) + pascal_triangle_generator(3) + pascal_triangle_generator(3) + pascal_triangle_generator(3) + [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    else:\n        yield pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1)\n        yield pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1)\n        yield pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1)\n        yield pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generator(n - 1) + pascal_triangle_generat"}
{"task_id": "python/23", "language": "python", "completion": "for i in range(2, n + 1):\n        if n % i == 0 and largest_prime_factor(n // i) == 1:\n            return i\n    return n\n    \n\ndef test_largest_prime_factor():\n    \"\"\"Test largest_prime_factor.\"\"\"\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(1) == 1\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(3) == 3\n    assert largest_prime_factor(4) == 2\n    assert largest_prime_factor(5) == 5\n    assert largest_prime_factor(6) == 3\n    assert largest_prime_factor(7) == 7\n    assert largest_prime_factor(8) == 2\n    assert largest_prime_factor(9) == 3\n    assert largest_prime_factor(10) == 5\n    assert largest_prime_factor(11) == 11\n    assert largest_prime_factor(12) == 3\n    assert largest_prime_factor(13) == 13\n    assert largest_prime_factor(14) == 2\n    assert largest_prime_factor(15) == 3\n    assert largest_prime_factor(16) == 2\n    assert largest_prime_factor(17) == 17\n    assert largest_prime_factor(18) == 2\n    assert largest_prime_factor(19) == 19\n    assert largest_prime_factor(20) == 2\n    assert largest_prime_factor(21) == 3\n    assert largest_prime_factor(22) == 11\n    assert largest_prime_factor(23) == 23\n    assert largest_prime_factor(24) == 2\n    assert largest_prime_factor(25) == 5\n    assert largest_prime_factor(26) == 11\n    assert largest_prime_factor(27) == 9\n    assert largest_prime_factor(28) == 2\n    assert largest_prime_factor(29) == 29\n    assert largest_prime_factor(30) == 3\n    assert largest_prime_factor(31) == 31\n    assert largest_prime_factor(32) == 2\n    assert largest_prime_factor(33) == 33\n    assert largest_prime_factor(34) == 2\n    assert largest_prime_factor(35) == 5\n    assert largest_prime_factor(36) == 3\n    assert largest_prime_factor(37) == 37\n    assert largest_prime_factor(38) == 2\n    assert largest_prime_factor(39) == 39\n    assert largest_prime_factor(40) == 2\n    assert largest_prime_factor(41) == 41\n    assert largest_prime_factor(42) == 2\n    assert largest_prime_factor(43) == 43\n    assert largest_prime_factor(44) == 2\n    assert largest_prime_factor(45) == 3\n    assert largest_prime_factor(46) == 2\n    assert largest_prime_factor(47) == 47\n    assert largest_prime_factor(48) == 2\n    assert largest_prime_factor(49) == 49\n    assert largest_prime_factor(50) == 5\n    assert largest_prime_factor(51) == 3\n    assert largest_prime_factor(52) == 2\n    assert largest_prime_factor(53) == 53\n    assert largest_prime_factor(54) == 3\n    assert largest_prime_factor(55) == 55\n    assert largest_prime_factor(56) == 2\n    assert largest_prime_factor(57) == 57\n    assert largest_prime_factor(58) == 2\n    assert largest_prime_factor(59) == 59\n    assert largest_prime_factor(60)"}
{"task_id": "python/24", "language": "python", "completion": "result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\n\ndef fibonacci(n: int):\n    \"\"\"fibonacci is a function that returns fibonacci numbers\n    >>> fibonacci(10)\n    55\n    >>> fibonacci(20)\n    6765\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    \"\"\"\n    assert n >= 1\n    a, b = 1, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a\n\n\ndef factorial(n: int):\n    \"\"\"factorial is a function that returns factorial number\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    \"\"\"\n    assert n >= 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n\ndef sum_to_n2(n: int):\n    \"\"\"sum_to_n2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n2(30)\n    465\n    >>> sum_to_n2(100)\n    5050\n    >>> sum_to_n2(5)\n    15\n    >>> sum_to_n2(10)\n    55\n    >>> sum_to_n2(1)\n    1\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += i + 1\n    return result\n\n\ndef sum_to_n2_2(n: int):\n    \"\"\"sum_to_n2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n2(30)\n    465\n    >>> sum_to_n2(100)\n    5050\n    >>> sum_to_n2(5)\n    15\n    >>> sum_to_n2(10)\n    55\n    >>> sum_to_n2(1)\n    1\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\n\ndef sum_to_n3(n: int):\n    \"\"\"sum_to_n3 is a function that sums numbers from 1 to n.\n    >>> sum_to_n3(30)\n    465\n    >>> sum_to_n3(100)\n    5050\n    >>> sum_to_n3(5)\n    15\n    >>> sum_to_n3(10)\n    55\n    >>> sum_to_n3(1)\n    1\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\n\ndef sum_to_n4(n: int):\n    \"\"\"sum_to_n4 is a function that sums numbers from 1 to n.\n    >>> sum_to_n4(30)\n    465\n    >>> sum_to_n4(100)\n    5050\n    >>> sum_to_n4(5)\n    15\n    >>> sum_to_n4(10)\n    55\n    >>> sum_to_n4(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n\n\ndef sum_to_n5(n: int):\n    \"\"\"sum_to_n5 is a function that sums numbers from 1 to n.\n    >>> sum_to_n5(30)\n    465\n    >>> sum_to_n5(100)\n    5050\n    >>> sum_to_n5(5)\n    15\n    >>> sum_to_n5(10)\n    55\n    >>> sum_to_n5(1)\n    1\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef sum_to_n6(n: int):\n    \"\"\"sum_to_n6 is a function that sums numbers from 1 to n.\n    >>> sum_to_n6(30)\n    465\n    >>> sum_to_n6(100)\n    5050\n    >>> sum_to_n6(5)\n    15\n    >>> sum_to_n6(10)\n    55\n    >>> sum_to_n6(1)\n    1\n    \"\"\"\n    return n * (n+1) * (2*n + 1) / 6\n\n\ndef sum_to_n7(n: int):\n    \"\"\"sum_to_n7 is a function that sums numbers from 1 to n.\n    >>> sum_to_n7(30)\n    465\n    >>> sum_to_n7(100)\n    5050\n    >>> sum_to_n7(5)\n    15\n    >>> sum_to_n7(10)\n    55\n    >>> sum_to_n7(1)\n    1\n    \"\"\"\n    return n * (n+1) / 2\n\n\ndef factorial2(n: int):\n    \"\"\"factorial2 is a function that returns factorial number\n    >>> factorial2(5)\n    120\n    >>> factorial2(10)\n    3628800\n    >>> factorial2(1)\n    1\n    >>> factorial2(2)\n    2\n    \"\"\"\n    result = 1\n    i = 1\n    while i <= n:\n        result *= i\n        i += 1\n    return result\n\n\ndef factorial3(n: int):\n    \"\"\"factorial3 is a function that returns factorial number\n    >>> factorial3(5)\n    120\n    >>> factorial3(10)\n    3628800\n    >>> factorial3(1)\n    1\n    >>> factorial3(2)\n    2\n    \"\"\"\n    result = 1\n    i = 1\n    while i <= n:\n        result *= i\n        i += 1\n    return result\n\n\ndef factorial4(n: int):\n    \"\"\"factorial4 is a function that returns factorial number\n    >>> factorial4(5)\n    120\n    >>> factorial4(10)\n    3628800\n    >>> factorial4(1)\n    1\n    >>> factorial4(2)\n    2\n    \"\"\"\n    result = 1\n    while n"}
{"task_id": "python/24", "language": "python", "completion": "if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)\n\n\ndef is_palindrome(s: str):\n    \"\"\"is_palindrome is a function that verifies if a string is a palindrome.\n    >>> is_palindrome(\"ana\")\n    True\n    >>> is_palindrome(\"ana\")\n    True\n    >>> is_palindrome(\"ana\")\n    True\n    \"\"\"\n    if len(s) < 2:\n        return True\n    elif s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])\n\n\ndef fib(n: int) -> int:\n    \"\"\"fib is a function that returns nth fibonacci number.\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(3)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fibonacci_series(n: int) -> int:\n    \"\"\"fibonacci_series is a function that returns nth fibonacci number.\n    >>> fibonacci_series(0)\n    0\n    >>> fibonacci_series(1)\n    1\n    >>> fibonacci_series(3)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fibonacci_series(n - 1) + fibonacci_series(n - 2)\n\n\ndef fibonacci_series_with_memo(n: int, memo: dict = {0: 0, 1: 1}):\n    \"\"\"fibonacci_series_with_memo is a function that returns nth fibonacci number.\n    >>> fibonacci_series_with_memo(0)\n    0\n    >>> fibonacci_series_with_memo(1)\n    1\n    >>> fibonacci_series_with_memo(3)\n    2\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    memo[n] = fibonacci_series_with_memo(n - 1, memo) + fibonacci_series_with_memo(\n        n - 2, memo\n    )\n    return memo[n]\n\n\ndef fibonacci_series_with_memo_and_generator(\n    n: int, memo: dict = {0: 0, 1: 1}, generator: bool = True\n):\n    \"\"\"fibonacci_series_with_memo_and_generator is a function that returns nth fibonacci number.\n    >>> fibonacci_series_with_memo_and_generator(0)\n    0\n    >>> fibonacci_series_with_memo_and_generator(1)\n    1\n    >>> fibonacci_series_with_memo_and_generator(3)\n    2\n    \"\"\"\n    if generator:\n        yield 0\n        yield 1\n    if n in memo:\n        return memo[n]\n    memo[n] = fibonacci_series_with_memo_and_generator(\n        n - 1, memo, generator\n    ) + fibonacci_series_with_memo_and_generator(\n        n - 2, memo, generator\n    )\n    return memo[n]\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"is_prime is a function that verifies if a number is prime.\n    >>> is_prime(3)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(50)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef is_prime_with_memo(n: int, memo: dict = {}) -> bool:\n    \"\"\"is_prime_with_memo is a function that verifies if a number is prime.\n    >>> is_prime_with_memo(3)\n    True\n    >>> is_prime_with_memo(13)\n    True\n    >>> is_prime_with_memo(50)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n in memo:\n        return memo[n]\n    i = 2\n    while i < n:\n        if n % i == 0:\n            memo[n] = False\n            return False\n        i += 1\n    memo[n] = True\n    return True\n\n\ndef is_prime_with_memo_and_generator(\n    n: int, memo: dict = {}, generator: bool = True\n) -> bool:\n    \"\"\"is_prime_with_memo_and_generator is a function that verifies if a number is prime.\n    >>> is_prime_with_memo_and_generator(3)\n    True\n    >>> is_prime_with_memo_and_generator(13)\n    True\n    >>> is_prime_with_memo_and_generator(50)\n    False\n    \"\"\"\n    if generator:\n        yield True\n    if n == 1:\n        return False\n    if n in memo:\n        return memo[n]\n    i = 2\n    while i < n:\n        if n % i == 0:\n            memo[n] = False\n            return False\n        i"}
{"task_id": "python/25", "language": "python", "completion": "deriv = []\n    for i in range(len(xs)):\n        deriv.append(i*xs[i])\n    return deriv\n\ndef integral(xs: list):\n    \"\"\" Derivate of xs as in derivative function.\n    >>> integral([1, 4, 12, 20])\n    [3, 1, 2, 4, 5]\n    >>> integral([2, 6])\n    [1, 2, 3]\n    \"\"\"\n    integr = []\n    for i in range(len(xs)):\n        integr.append(i*xs[i])\n    return integr\n\ndef newton(xs: list, xs0: float, tolerance=1e-3):\n    \"\"\" Newton method for approximating roots of xs.\n    >>> newton([3, 1, 2, 4, 5], 10)\n    -0.009412725805697463\n    \"\"\"\n    assert len(xs) > 0\n    x = xs0\n    dx = xs[1:]\n    for i in range(20):\n        x_new = x - f(x, xs) / f_derivative(x, xs)\n        if abs(x_new - x) < tolerance:\n            return x_new\n        x = x_new\n    raise RuntimeError('Too many iterations')\n\ndef f(x: float, xs: list):\n    \"\"\" Evaluates polynomial xs at x.\n    \"\"\"\n    assert len(xs) > 0\n    value = xs[0]\n    for i in range(1, len(xs)):\n        value += xs[i] * x**i\n    return value\n\ndef f_derivative(x: float, xs: list):\n    \"\"\" Evaluates derivative of polynomial xs at x.\n    \"\"\"\n    assert len(xs) > 0\n    value = xs[1]\n    for i in range(2, len(xs)):\n        value += i*xs[i] * x**(i-1)\n    return value\n\ndef f_integral(x: float, xs: list):\n    \"\"\" Evaluates integral of polynomial xs at x.\n    \"\"\"\n    assert len(xs) > 0\n    value = xs[0]\n    for i in range(1, len(xs)):\n        value += x**(i+1)/i + xs[i] * x**(i)\n    return value\n\ndef f_integral_derivative(x: float, xs: list):\n    \"\"\" Evaluates integral derivative of polynomial xs at x.\n    \"\"\"\n    assert len(xs) > 0\n    value = 1/x + 1/xs[1]\n    for i in range(2, len(xs)):\n        value += x**(i-1) * xs[i] / (i+1) + i * xs[i] * x**(i-1)\n    return value\n\ndef newton_polynomial(xs: list, xs0: float, tolerance=1e-3):\n    \"\"\" Approximate polynomial xs using newton polynomial approximation.\n    >>> newton_polynomial([3, 1, 2, 4, 5], 10)\n    [1.0000000000000002, -1.0000000000000002, 1.0000000000000002]\n    \"\"\"\n    assert len(xs) > 0\n    x = xs0\n    deriv = f_derivative(x, xs)\n    dx = f_derivative(x, xs)\n    for i in range(20):\n        x_new = x - dx / f(x, xs)\n        if abs(x_new - x) < tolerance:\n            return x_new\n        x = x_new\n        dx = f_derivative(x, xs)\n    raise RuntimeError('Too many iterations')\n\n\ndef newton_polynomial_derivative(xs: list, xs0: float, tolerance=1e-3):\n    \"\"\" Approximate polynomial xs using newton polynomial approximation.\n    >>> newton_polynomial([3, 1, 2, 4, 5], 10)\n    [1.0000000000000002, -1.0000000000000002, 1.0000000000000002]\n    \"\"\"\n    assert len(xs) > 0\n    x = xs0\n    deriv = xs\n    dx = xs\n    for i in range(20):\n        x_new = x - f(x, xs) / f_derivative(x, xs)\n        deriv_new = (deriv - f(x, xs) * dx) / (deriv - f(x, xs))\n        dx_new = (dx - f(x, xs) * deriv) / (dx - f(x, xs))\n        if abs(x_new - x) < tolerance:\n            return x_new\n        x = x_new\n        deriv = deriv_new\n        dx = dx_new\n    raise RuntimeError('Too many iterations')\n\n\ndef newton_polynomial_derivative_derivative(xs: list, xs0: float, tolerance=1e-3):\n    \"\"\" Approximate polynomial xs using newton polynomial approximation.\n    >>> newton_polynomial([3, 1, 2, 4, 5], 10)\n    [1.0000000000000002, -1.0000000000000002, 1.0000000000000002]\n    \"\"\"\n    assert len(xs) > 0\n    x = xs0\n    deriv = xs\n    dx = xs\n    for i in range(20):\n        x_new = x - f(x, xs) / f_derivative(x, xs)\n        deriv_new = (deriv - f(x, xs) * dx) / (deriv - f(x, xs))\n        dx_new ="}
{"task_id": "python/25", "language": "python", "completion": "derivative_coeffs = []\n    for i, coeff in enumerate(xs[1:]):\n        derivative_coeffs.append(coeff * (i + 1))\n    return derivative_coeffs\n\n\ndef simpson(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of f(x) from a to b by Simpson's rule.\n    \"\"\"\n    h = (b-a)/n\n    x = a\n    s = f(a)+f(b)\n    for i in range(1, n):\n        if i%2 == 0:\n            s += 2*f(x)\n        else:\n            s += 4*f(x)\n        x += h\n    return s*h/3\n\n\ndef simpson_integrate(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    s = simpson(f, a, b, n)\n    return s\n\n\ndef simpson_integrate_range(f, a, b):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b using Simpson's rule.\n    \"\"\"\n    # TODO: Implement this function\n\n\ndef simpson_integrate_range(f, a, b, n):\n    \"\"\"\n    Calculate an approximation of integral f(x) from a to b u"}
{"task_id": "python/26", "language": "python", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c = b, c, a+b+c\n        return c\n\n\ndef fibiter(n: int):\n    \"\"\"Same as fibfib but implemented with iterative instead of recursive.\n    >>> fibiter(1)\n    0\n    >>> fibiter(5)\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-3):\n            a, b, c"}
{"task_id": "python/26", "language": "python", "completion": "assert isinstance(n, int), \"n must be an integer\"\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1 or n == 2:\n        return n - 1\n    if n > 2:\n        return fibfib(n - 1) + fibfib(n - 2)\n\ndef fibbonacci(n: int):\n    \"\"\"The Fibbonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibbonacci(0) == 0\n    fibbonacci(1) == 1\n    fibbonacci(2) == 1\n    fibbonacci(n) == fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3).\n    Please write a function to efficiently compute the n-th element of the Fibbonacci number sequence.\n    >>> fibbonacci(1)\n    0\n    >>> fibbonacci(5)\n    5\n    >>> fibbonacci(8)\n    21\n    \"\"\"\n    assert isinstance(n, int), \"n must be an integer\"\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1 or n == 2:\n        return n - 1\n    if n > 2:\n        return fibbonacci(n - 1) + fibbonacci(n - 2)\n\ndef fib(n):\n    \"\"\"Write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n    >>> fib(1)\n    0\n    >>> fib(5)\n    5\n    >>> fib(8)\n    21\n    \"\"\"\n    assert isinstance(n, int), \"n must be an integer\"\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1 or n == 2:\n        return n - 1\n    if n > 2:\n        return fib(n - 1) + fib(n - 2)\n\ndef fibonacci(n: int):\n    \"\"\"Write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n    >>> fibonacci(1)\n    0\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(8)\n    21\n    \"\"\"\n    assert isinstance(n, int), \"n must be an integer\"\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1 or n == 2:\n        return n - 1\n    if n > 2:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef fib_recursive(n: int):\n    \"\"\"Write a function to efficiently compute the n-th element of the Fibbonacci number sequence.\n    >>> fib_recursive(1)\n    0\n    >>> fib_recursive(5)\n    5\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    assert isinstance(n, int), \"n must be an integer\"\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1 or n == 2:\n        return n - 1\n    if n > 2:\n        return fib_recursive(n - 1) + fib_recursive(n - 2)\n    \n\ndef fib_recursive_memo(n: int, fib_dict: dict):\n    \"\"\"Write a function to efficiently compute the n-th element of the Fibbonacci number sequence.\n    >>> fib_recursive_memo(1, {})\n    0\n    >>> fib_recursive_memo(5, {})\n    5\n    >>> fib_recursive_memo(8, {})\n    21\n    \"\"\"\n    assert isinstance(n, int), \"n must be an integer\"\n    assert n > 0, \"n must be greater than zero\"\n    if n"}
{"task_id": "python/27", "language": "python", "completion": "vowels_count = 0\n    for i in s:\n        if i in \"aeiou\":\n            vowels_count += 1\n    return vowels_count\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogrammingLove'\n    >>> concat_strings(\"python\")\n    'pythonLove'\n    \"\"\"\n    return \"\".join(args) + \"Love\"\n\"\"\"\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogrammingLove'\n    >>> concat_strings(\"python\")\n    'pythonLove'\n    \"\"\"\n    return \"\".join(args) + \"Love\"\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogrammingLove'\n    >>> concat_strings(\"python\")\n    'pythonLove'\n    \"\"\"\n    return \"\".join(args) + \"Love\"\n\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogrammingLove'\n    >>> concat_strings(\"python\")\n    'pythonLove'\n    \"\"\"\n    return \"\".join(args) + \"Love\"\n\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogrammingLove'\n    >>> concat_strings(\"python\")\n    'pythonLove'\n    \"\"\"\n    return \"\".join(args) + \"Love\"\n\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogrammingLove'\n    >>> concat_strings(\"python\")\n    'pythonLove'\n    \"\"\"\n    return \"\".join(args) + \"Love\"\n\n\"\"\"\n\ndef concat_strings(*args):\n    \"\"\"Write a function concat_strings which takes a variable number of\n    strings as input and returns a concatenated string with the string \"Love\"\n    added at the end.\n\n    Example:\n    >>> concat_strings(\"python\", \"programming\")\n    'pythonprogra"}
{"task_id": "python/27", "language": "python", "completion": "s = s.lower()\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    counter = 0\n    for letter in s:\n        if letter in vowels:\n            counter += 1\n    return counter\n\ndef vowels_count_adv(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum([1 for letter in s if letter in vowels])\n\ndef vowels_count_adv_2(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(letter in vowels for letter in s)\n\n\ndef vowels_count_adv_3(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return sum(1 for letter in s if letter in vowels)\n\n\ndef vowels_count_adv_4(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return len(set(s) & vowels)\n\ndef vowels_count_adv_5(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return sum(1 for letter in s if letter in vowels)\n\n\ndef vowels_count_adv_6(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return sum(letter in vowels for letter in s)\n\n\ndef vowels_count_adv_7(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return len(s - vowels)\n\n\ndef vowels_count_adv_8(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return len(set(s) - vowels)\n\n\ndef vowels_count_adv_9(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return len(set(s) - vowels)\n\n\ndef vowels_count_adv_10(s):\n    \"\"\"Implement vowels_count in a more efficient way.\n    Do not use any loops.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    return sum(letter in vowels for letter in s)"}
{"task_id": "python/28", "language": "python", "completion": "for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\nlst ="}
{"task_id": "python/28", "language": "python", "completion": "return max(lst, key=lst.count) if lst else -1\n\n\ndef search2(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself."}
{"task_id": "python/29", "language": "python", "completion": "if a + b > c and a + c > b and b + c > a:\n        return round(((a + b + c)/ 2 * (a + b + c - a) * (a + b + c - b) * (a + b + c - c)), 2)\n    else:\n        return -1\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        return round( (s * (s - a) * (s - b) * (s - c)) ** 0.5, 2 )\n    else:\n        return -1\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    s = (a + b + c)/2\n    if s < a and s < b and s < c:\n        if a + b > c and a + c > b and b + c > a:\n            return round( (s * (s - a) * (s - b) * (s - c)) ** 0.5, 2 )\n        else:\n            return -1\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    s = (a + b + c)/2\n    if s < a and s < b and s < c:\n        if a + b > c and a + c > b and b + c > a:\n            return round( (s * (s - a) * (s - b) * (s - c)) ** 0.5, 2 )\n        else:\n            return -1\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    s = (a + b + c)/2\n    if s < a and s < b and s < c:\n        if a + b > c and a + c > b and b + c > a:\n            return round( (s * (s - a) * (s - b) * (s - c)) ** 0.5, 2 )\n        else:\n            return -1\n    else:\n        return -1\n    \ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    s = (a + b + c)/2\n    if s < a"}
{"task_id": "python/29", "language": "python", "completion": "# TODO\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef get_longest_word(words):\n    '''\n    words (str) - a string of words\n    Returns the longest word in words. If multiple words are the longest, return the\n    first one.\n    '''\n    \n    # TODO\n    longest_word = ''\n    longest_word_length = 0\n    for word in words.split():\n        if len(word) > longest_word_length:\n            longest_word = word\n            longest_word_length = len(word)\n    return longest_word\n\ndef test_triangle_area(test_case):\n    '''\n    Test function for triangle_area\n    '''\n    a, b, c, expected = test_case\n    result = triangle_area(a, b, c)\n    print('Given: {}, {}, {}.'.format(a, b, c))\n    if result == expected:\n        print('Result: {} == {}'.format(result, expected))\n        print('Success!\\n')\n    else:\n        print('Result: {} != {}'.format(result, expected))\n\ndef test_get_longest_word(test_case):\n    '''\n    Test function for get_longest_word\n    '''\n    words, expected = test_case\n    result = get_longest_word(words)\n    print('Given: \\\"{}\\\"'.format(words))\n    if result == expected:\n        print('Result: \\\"{}\\\" == \\\"{}\\\"'.format(result, expected))\n        print('Success!\\n')\n    else:\n        print('Result: \\\"{}\\\" != \\\"{}\\\"'.format(result, expected))\n\n\nif __name__ == '__main__':\n    ## Test triangle_area\n    test_cases = [(3, 4, 5, 6.0), \n                  (1, 2, 10, -1),\n                  (1, 1, 1, -1), \n                  (1, 1, 2, -1), \n                  (3, 4, 5, 6.0), \n                  (3, 4, 5, 6.0), \n                  (1, 1, 1, 1), \n                  (1, 1, 2, -1), \n                  (1, 1, 3, 1), \n                  (1, 1, 4, 1), \n                  (1, 1, 5, -1), \n                  (1, 1, 6, 1), \n                  (1, 1, 7, -1), \n                  (1, 1, 8, 1), \n                  (1, 1, 9, -1), \n                  (1, 1, 10, 1), \n                  (1, 1, 11, -1), \n                  (1, 1, 12, 1), \n                  (1, 1, 13, -1), \n                  (1, 1, 14, 1), \n                  (1, 1, 15, 1), \n                  (1, 1, 16, -1), \n                  (1, 1, 17, 1), \n                  (1, 1, 18, -1), \n                  (1, 1, 19, 1), \n                  (1, 1, 20, 1), \n                  (1, 1, 21, 1), \n                  (1, 1, 22, 1), \n                  (1, 1, 23, 1), \n                  (1, 1, 24, 1), \n                  (1, 1, 25, 1), \n                  (1, 1, 26, 1), \n                  (1, 1, 27, -1), \n                  (1, 1, 28, 1), \n                  (1, 1, 29, -1), \n                  (1, 1, 30, 1), \n                  (1, 1, 31, -1), \n                  (1, 1, 32, 1), \n                  (1, 1, 33, -1), \n                  (1, 1, 34, 1), \n                  (1, 1, 35, 1), \n                  (1, 1, 36, -1), \n                  (1, 1, 37, 1), \n                  (1, 1, 38, -1), \n                  (1, 1, 39, 1), \n                  (1, 1, 40, 1), \n                  (1, 1, 41, -1), \n                  (1, 1, 42, 1), \n                  (1, 1, 43, -1), \n                  (1, 1, 44, 1), \n                  (1, 1, 45, 1), \n                  (1, 1, 46, -1), \n                  (1, 1, 47, 1), \n                  (1, 1, 48, -1), \n                  (1, 1, 49, 1), \n                  (1, 1, 50, 1), \n                  (1, 1, 51, -1), \n                  (1, 1, 52, 1), \n                  (1, 1, 53, -1), \n                  (1, 1, 54, 1), \n                  (1, 1, 55, 1), \n                  (1, 1, 56, -1), \n                  (1, 1, 57, 1), \n                  (1, 1, 58, -1), \n                  (1, 1, 59, 1), \n                  (1, 1, 60, 1), \n                  (1, 1, 61, -1), \n                  (1, 1, 62, 1), \n                  (1, 1, 63, -1), \n                  (1, 1, 64, 1), \n                  (1, 1, 65, 1), \n                  (1, 1, 66, -1), \n                  (1, 1, 67, 1), \n                  (1, 1, 68, -1), \n                  (1, 1, 69, 1), \n                  (1, 1, 70, 1), \n                  (1, 1, 71, -1), \n                  (1, 1, 72, 1), \n                  (1, 1, 73, -1), \n                  (1, 1, 74, 1), \n                  (1, 1, 75, 1), \n                  (1, 1, 76, -1), \n                  (1, 1, 77, 1), \n                  (1, 1, 78, -1), \n                  (1, 1, 79, 1), \n                  (1, 1, 80, 1), \n                  (1, 1, 81, -1), \n                  (1, 1, 82, 1), \n                  (1, 1, 83, -1), \n                  (1, 1, 84, 1), \n                  (1, 1, 85, 1), \n                  (1, 1, 86, -1), \n                  (1, 1, 87, 1), \n                  (1, 1, 88, -1), \n                  (1, 1, 89, 1), \n                  (1, 1, 90, 1), \n                  (1, 1, 91, -1), \n                  (1, 1, 92, 1), \n                  (1, 1, 93, -1), \n                  (1, 1, 94, 1), \n                  (1, 1, 95, 1), \n                  (1, 1, 96, -1), \n                  (1, 1, 97, 1), \n                  (1, 1, 98, -1),"}
{"task_id": "python/30", "language": "python", "completion": "sum = 0\n    for i in q:\n        sum += i\n    if sum > w or len(q)%2 == 1:\n        return False\n    return True\n\n# Write a function that takes a list of numbers or strings and returns a list with the items from the original list stored into sublists. Items of the same value should be in the same sublist.\ndef reorder_list(q):\n    '''\n    Write a function that takes a list of numbers or strings and returns a list with the items from the original list stored into sublists. Items of the same value should be in the same sublist.\n\n    Examples\n    reorder_list([1, 2, 1, 0]) \u279e [[1, 0], [1, 2]]\n\n    reorder_list([\"fish\", 2, 2, \"hi\", True]) \u279e [[2, 2], [\"hi\"], [True]]\n\n    reorder_list([]) \u279e []\n    '''\n    if q == []:\n        return []\n    newList = []\n    for i in q:\n        if q.count(i) > 1 and i not in newList:\n            newList.append([i]*q.count(i))\n        elif i not in newList:\n            newList.append([i])\n    return newList\n\n# Write a function that takes a string as an argument and returns a dictionary of each unique letter in the string, as the key, and the number of times it occurs as the value.\ndef letters(q):\n    '''\n    Write a function that takes a string as an argument and returns a dictionary of each unique letter in the string, as the key, and the number of times it occurs as the value.\n\n    Examples\n    letters(\"hellooo\") \u279e {\"h\": 1, \"e\": 1, \"l\": 3, \"o\": 3}\n\n    letters(\"Mississippi\") \u279e {\"M\": 1, \"i\": 4, \"s\": 4, \"p\": 2}\n\n    letters(\"\") \u279e {}\n    '''\n    dictionary = {}\n    for i in q:\n        if i not in dictionary:\n            dictionary[i] = q.count(i)\n    return dictionary\n\n# Given a list of numbers, create a function that returns a list where each index in the list represents the sum of all the indexes below it, including itself.\n\ndef sum_of_indexes(q):\n    '''\n    Given a list of numbers, create a function that returns a list where each index in the list represents the sum of all the indexes below it, including itself.\n\n    Examples\n    sum_of_indexes([0, 0, 0, 0, 0, 0]) \u279e [0, 0, 0, 0, 0, 0]\n\n    sum_of_indexes([1, 2, 3, 4, 5]) \u279e [1, 3, 6, 10, 15]\n\n    sum_of_indexes([5]) \u279e [5]\n    '''\n    newList = []\n    for i in range(len(q)):\n        sum = 0\n        for j in range(0,i+1):\n            sum += q[j]\n        newList.append(sum)\n    return newList\n\n# Given a list of names, return the name with the most letters (the name that has the maximum number of letters).\ndef find_longest(q):\n    '''\n    Given a list of names, return the name with the most letters (the name that has the maximum number of letters).\n\n    Examples\n    find_longest([\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"]) \u279e \"Ryan\"\n\n    find_longest([\"Saed\", \"Simon\", \"Tim\", \"John\", \"Kieran\", \"Mark\"]) \u279e \"Simon\"\n\n    find_longest([\"ugi\", \"john\", \"paul\", \"peter\", \"george\", \"peter\", \"paul\", \"john\", \"george\"]) \u279e \"peter\"\n    '''\n    newList = []\n    for i in q:\n        newList.append(len(i))\n    return q[newList.index(max(newList)"}
{"task_id": "python/30", "language": "python", "completion": "def is_palindromic(q):\n        \"\"\"Return True if q is palindromic.\"\"\"\n        return q == q[::-1]\n    def sum_list(q):\n        \"\"\"Return sum of list.\"\"\"\n        sum = 0\n        for i in range(len(q)):\n            sum += q[i]\n        return sum\n    if is_palindromic(q) and sum_list(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def prime_factor(num):\n        prime_factor_list = []\n        for i in range(2, num+1):\n            if num % i == 0:\n                num = int(num/i)\n                prime_factor_list.append(i)\n        return prime_factor_list\n    \n    def is_prime(num):\n        prime_factor_list = prime_factor(num)\n        return len(prime_factor_list) == 1 and prime_factor_list[0] == num\n    \n    prime_factor_list = prime_factor(a)\n    return len(prime_factor_list) == 3 and is_prime(prime_factor_list[0]) and is_prime(prime_factor_list[1]) and is_prime(prime_factor_list[2])\n    \n    \nprint(is_multiply_prime(30)) \nprint(is_multiply_prime(2)) \nprint(is_multiply_prime(15)) \nprint(is_multiply_prime(45)) \nprint(is_multiply_prime(10000)) \nprint(is_multiply_prime(200)) \nprint(is_multiply_prime(10)) \nprint(is_multiply_prime(3)) \nprint(is_multiply_prime(5)) \nprint(is_multiply_prime(7)) \nprint(is_multiply_prime(11)) \nprint(is_multiply_prime(13)) \nprint(is_multiply_prime(17)) \nprint(is_multiply_prime(19)) \nprint(is_multiply_prime(23)) \nprint(is_multiply_prime(29)) \nprint(is_multiply_prime(31)) \nprint(is_multiply_prime(37)) \nprint(is_multiply_prime(41)) \nprint(is_multiply_prime(43)) \nprint(is_multiply_prime(47)) \nprint(is_multiply_prime(53)) \nprint(is_multiply_prime(59)) \nprint(is_multiply_prime(61)) \nprint(is_multiply_prime(67)) \nprint(is_multiply_prime(71)) \nprint(is_multiply_prime(73)) \nprint(is_multiply_prime(79)) \nprint(is_multiply_prime(83)) \nprint(is_multiply_prime(89)) \nprint(is_multiply_prime(97)) \nprint(is_multiply_prime(101)) \nprint(is_multiply_prime(103)) \nprint(is_multiply_prime(107)) \nprint(is_multiply_prime(109)) \nprint(is_multiply_prime(113)) \nprint(is_multiply_prime(127)) \nprint(is_multiply_prime(131)) \nprint(is_multiply_prime(137)) \nprint(is_multiply_prime(139)) \nprint(is_multiply_prime(149)) \nprint(is_multiply_prime(151)) \nprint(is_multiply_prime(157)) \nprint(is_multiply_prime(163)) \nprint(is_multiply_prime(167)) \nprint(is_multiply_prime(173)) \nprint(is_multiply_prime(179)) \nprint(is_multiply_prime(181)) \nprint(is_multiply_prime(191)) \nprint(is_multiply_prime(197)) \nprint(is_multiply_prime(199)) \nprint(is_multiply_prime(211)) \nprint(is_multiply_prime(223)) \nprint(is_multiply_prime(227)) \nprint(is_multiply_prime(233)) \nprint(is_multiply_prime(239)) \nprint(is_multiply_prime(241)) \nprint(is_multiply_prime(251)) \nprint(is_multiply_prime(257)) \nprint(is_multiply_prime(263)) \nprint(is_multiply_prime(269)) \nprint(is_multiply_prime(271)) \nprint(is_multiply_prime(277)) \nprint(is_multiply_prime(281)) \nprint(is_multiply_prime(283)) \nprint(is_multiply_prime(293)) \nprint(is_multiply_prime(307)) \nprint(is_multiply_prime(311)) \nprint(is_multiply_prime(313)) \nprint(is_multiply_prime(317)) \nprint(is_multiply_prime(331)) \nprint(is_multiply_prime(337)) \nprint(is_multiply_prime(347)) \nprint(is_multiply_prime(349)) \nprint(is_multiply_prime(353)) \nprint(is_multiply_prime(359)) \nprint(is_multiply_prime(367)) \nprint(is_multiply_prime(373)) \nprint(is_multiply_prime(379)) \nprint(is_multiply_prime(383)) \nprint(is_multiply_prime(397)) \nprint(is_multiply_prime(399)) \nprint(is_multiply_prime(411)) \nprint(is_multiply_prime(427)) \nprint(is_multiply_prime(439)) \nprint(is_multiply_prime(449)) \nprint(is_multiply_prime(461)) \nprint(is_multiply_prime(463)) \nprint(is_multiply_prime(467)) \nprint(is_multiply_prime(479)) \nprint(is_multiply_prime(487)) \nprint(is_multiply_prime(491)) \nprint(is_multiply_prime(499)) \nprint(is_multiply_prime(503)) \nprint(is_multiply_prime(509)) \nprint(is_multiply_prime(521)) \nprint(is_multiply_prime(523)) \nprint(is_multiply_prime(541)) \nprint(is_multiply_prime(547)) \nprint(is_multiply_prime(557)) \nprint(is_multiply_prime(563)) \nprint(is_multiply_prime(569)) \nprint(is_multiply_prime(571)) \nprint(is_multiply_prime(577)) \nprint(is_multiply_prime(587)) \nprint(is_multiply_prime(593)) \nprint(is_multiply_prime(599)) \nprint(is_multiply_prime(601)) \nprint(is_multiply_prime(607)) \nprint(is_multiply_prime(613)) \nprint(is_multiply_prime(617)) \nprint(is_multiply_prime(619)) \nprint(is_multiply_prime(631)) \nprint(is_multiply_prime(641)) \nprint(is_multiply_prime(643)) \nprint(is_multiply_prime(647)) \nprint(is_multiply_prime(653)) \nprint(is_multiply_prime(659)) \nprint(is_multiply_prime(661)) \nprint(is_multiply_prime(673)) \nprint(is_multiply_prime(677)) \nprint(is_multiply_prime(683)) \nprint(is_multiply_prime(691)) \nprint(is_multiply_prime(701)) \nprint(is_multiply_prime(709)) \nprint(is_multiply_prime(719)) \nprint(is_multiply_prime(727)) \nprint(is_multiply_prime(733)) \nprint(is_multiply_prime(739)) \nprint(is_multiply_prime(743)) \nprint(is_multiply_prime(751)) \nprint(is_multiply_prime(757)) \nprint(is_multiply_prime(761)) \nprint(is_multiply_prime(769)) \nprint(is_multiply_prime(773)) \nprint(is_multiply_prime(787)) \nprint(is_multiply_prime(797)) \nprint(is_multiply_prime(809)) \nprint(is_multiply_prime(811)) \nprint(is_multiply_prime(821)) \nprint(is_multiply_prime(823)) \nprint(is_multiply_prime(827)) \nprint(is_multiply_prime(839)) \nprint(is_multiply_prime(85"}
{"task_id": "python/31", "language": "python", "completion": "if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \n    \n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \n    \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \n    \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \n    \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n    \n    \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a==0 or a==1 or a==2 or a==3:\n        return True\n    if a%2==0 or a%3==0 or a%5==0:\n        return False\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return"}
{"task_id": "python/32", "language": "python", "completion": "binary = bin(decimal)[2:]\n    binary_str = ''.join(binary)\n    return 'db' + binary_str + 'db'\n\n    \"\"\"\n    decimal = int(decimal)\n    binary = ''\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    binary_str = ''.join(binary)\n    return 'db' + binary_str + 'db'\n    \"\"\"\n\n\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\n\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    binary_str = ''.join(binary)\n    return 'db' + binary_str + 'db'\n\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\n\n\"\"\"\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_str = ''.join(binary)\n    return 'db' + binary_str + 'db'\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\n\n\"\"\"\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_str = ''.join(binary)\n    return 'db' + binary_str + 'db'\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\n\"\"\"\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_str = ''.join(binary)\n    return 'db' + binary_str + 'db'\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\n\"\"\"\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_str = ''.join(binary)\n    return 'db'"}
{"task_id": "python/32", "language": "python", "completion": "binary_list = []\n    while decimal > 0:\n        binary_list.append(str(decimal % 2))\n        decimal = decimal // 2\n    binary_list.reverse()\n    return \"db\" + \"\".join(binary_list) + \"db\"\n\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(32))\n\ndef decimal_to_binary_alternative(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_list = []\n    while decimal > 0:\n        binary_list.append(str(decimal % 2))\n        decimal = decimal // 2\n    binary_list.reverse()\n    return \"db\" + \"\".join(binary_list) + \"db\"\n\nprint(decimal_to_binary_alternative(15))\nprint(decimal_to_binary_alternative(32))\n\ndef decimal_to_binary_alternative_2(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_list = []\n    while decimal > 0:\n        binary_list.append(str(decimal % 2))\n        decimal = decimal // 2\n    binary_list.reverse()\n    return \"db\" + \"\".join(binary_list) + \"db\"\n\nprint(decimal_to_binary_alternative_2(15))\nprint(decimal_to_binary_alternative_2(32))\n\ndef decimal_to_binary_alternative_3(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_list = []\n    while decimal > 0:\n        binary_list.append(str(decimal % 2))\n        decimal = decimal // 2\n    binary_list.reverse()\n    return \"db\" + \"\".join(binary_list) + \"db\"\n\nprint(decimal_to_binary_alternative_3(15))\nprint(decimal_to_binary_alternative_3(32))\n\ndef decimal_to_binary_alternative_4(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_list = []\n    while decimal"}
{"task_id": "python/33", "language": "python", "completion": "if len(s) < 3:\n        return False\n    if len(set(s)) == 1:\n        return False\n    return True\n\ndef test_is_happy():\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False\n    assert is_happy('aabbcc') == False\n    assert is_happy('aabbccdd') == False\n    assert is_happy('aabbccde') == True\n    assert is_happy('aabbccd') == False\n    assert is_happy('aabbccda') == True\n    assert is_happy('aabbccdx') == False\n    assert is_happy('aabbccdeee') == True\n    assert is_happy('aabbccded') == True\n    assert is_happy('aabbccdedd') == False\n    assert is_happy('aabbccdedde') == True\n    assert is_happy('aabbccdeddee') == False\n    assert is_happy('aabbccdeddeee') == True\n    assert is_happy('aabbccdeddeeee') == True\n    assert is_happy('aabbccdeddeeeea') == False\n    assert is_happy('aabbccdeddeeeeaa') == True\n    assert is_happy('aabbccdeddeeeeaab') == True\n    assert is_happy('aabbccdeddeeeeaabc') == True\n    assert is_happy('aabbccdeddeeeeaabca') == True\n    assert is_happy('aabbccdeddeeeeaabcab') == False\n    assert is_happy('aabbccdeddeeeeaabcabc') == True\n    assert is_happy('aabbccdeddeeeeaabcabcde') == True\n    assert is_happy('aabbccdeddeeeeaabcabcded') == False\n    assert is_happy('aabbccdeddeeeeaabcabcdedd') == False\n    assert is_happy('aabbccdeddeeeeaabcabcdeddd') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddd') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdeddddd') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddd') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdeddddddda') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaa') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaaa') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaaaa') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaaaaa') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaaaaaa') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaaaaaaa') == True\n    assert is_happy('aabbccdeddeeeeaabcabcdedddddddaaaaaaaa"}
{"task_id": "python/33", "language": "python", "completion": "n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i]"}
{"task_id": "python/34", "language": "python", "completion": "grade_equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    return [grade_equation.get(grade, 'E') for grade in grades]\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  \n# Output: ['A+', 'B', 'C-', 'C', 'A-']\n\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    grade_equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    return [grade_equation.get(grade, 'E') for grade in grades]\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0"}
{"task_id": "python/34", "language": "python", "completion": "grades_letter=[]\n    for i in grades:\n        if i>=4 and i<5.0:\n            grades_letter.append('A+"}
{"task_id": "python/35", "language": "python", "completion": "count = 0 \n    for i in range(1, len(string) + 1):\n        if (string == string[::-1]):\n            count += 1 \n            \n    if (count == 1):\n        return True\n    else: \n        return False\n    \n    \ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    count = 0 \n    for i in range(1, len(string) + 1):\n        if (string == string[::-1]):\n            count += 1 \n            \n    if (count == 1):\n        return True\n    else: \n        return False\n    \ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    count = 0 \n    for i in range(1, len(string) + 1):\n        if (string == string[::-1]):\n            count += 1 \n            \n    if (count == 1):\n        return True\n    else: \n        return False\n    \ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    count = 0 \n    for i in range(1, len(string) + 1):\n        if (string == string[::-1]):\n            count += 1 \n            \n    if (count == 1):\n        return True\n    else: \n        return False\n    \ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    count = 0 \n    for i in range(1, len(string) + 1):\n        if (string == string[::-1]):\n            count += 1 \n            \n    if (count == 1):\n        return True\n    else: \n        return False\n    \ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    count = 0 \n    for i in range(1, len(string) + 1):\n        if (string == s"}
{"task_id": "python/35", "language": "python", "completion": "prime_lengths = []\n    for i in string:\n        prime_lengths.append(len(i) * len(i))\n    return any(prime_lengths)\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    prime_lengths = [len(i)*len(i) for i in string]\n    return any(prime_lengths)\nprint prime_length('kittens')\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    prime_lengths = map(lambda i: len(i)*len(i), string)\n    return any(prime_lengths)\nprint prime_length('kittens')\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    prime_lengths = map(lambda i: len(i)*len(i), string)\n    return any(prime_lengths)\nprint prime_length('kittens')\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    prime_lengths = map(lambda i: len(i)*len(i), string)\n    return any(prime_lengths)\nprint prime_length('kittens')\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == F"}
{"task_id": "python/36", "language": "python", "completion": "binary_sum = \"\"\n    while N:\n        binary_sum = str(N % 2) + binary_sum\n        N //= 2\n    return binary_sum\n\ndef solve_recursive(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if N == 0:\n        return \"0\"\n    else:\n        return str(N % 2) + solve_recursive(N // 2)\n\ndef main():\n    \"\"\"\n    Test function:\n    \"\"\"\n    \n    print(solve_recursive(1000))\n    print(solve_recursive(100))\n    print(solve_recursive(10000))\n    print(solve_recursive(147))\n    \n    print(solve_recursive(11111111))\n    print(solve_recursive(1111111111111111111111111111111"}
{"task_id": "python/36", "language": "python", "completion": "# YOUR CODE HERE\n    \n    N = str(N)\n    \n    binary = \"\"\n    \n    for i in N:\n        \n        binary += bin(int(i))[2:]\n    \n    return binary\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n    print(solve(1))\n    print(solve(2))\n    print(solve(3))\n    print(solve(10000))\n    print(solve(100000000))\n    print(solve(1000000000))\n    print(solve(10000000000))\n    print(solve(100000000000))\n    print(solve(1000000000000))\n    print(solve(10000000000000))\n    print(solve(100000000000000))\n    print(solve(1000000000000000))\n    print(solve(10000000000000000))\n    print(solve(100000000000000000))\n    print(solve(1000000000000000000))\n    print(solve(10000000000000000000))\n    print(solve(100000000000000000000))\n    print(solve(1000000000000000000000))\n    print(solve(10000000000000000000000))\n    print(solve(100000000000000000000000))\n    print(solve(1000000000000000000000000))\n    print(solve(10000000000000000000000000))\n    print(solve(100000000000000000000000000))\n    print(solve(1000000000000000000000000000))\n    print(solve(10000000000000000000000000000))\n    print(solve(100000000000000000000000000000))\n    print(solve(1000000000000000000000000000000))\n    print(solve(10000000000000000000000000000000))\n    print(solve(10000000000000000000000000000000"}
{"task_id": "python/37", "language": "python", "completion": "result = []\n    for i, lst in enumerate(lst):\n        for j, num in enumerate(lst):\n            if num == x:\n                result.append((i, j))\n    return result\n\n\nlst = [[1, 2, 3, 4, 5, 6],\n       [1, 2, 3, 4, 1, 6],\n       [1, 2, 3, 4, 5, 1]]\nx = 1\nprint(get_row(lst, x))\nlst = []\nx = 1\nprint(get_row(lst, x))\nlst = [[[], [1], [1, 2, 3]]"}
{"task_id": "python/37", "language": "python", "completion": "if lst == []:\n        return []\n    \n    def row_column_list(lst, x):\n        \"\"\"\n        Helper function which takes lst, and x, and returns\n        a list of coordinates, (row, column)\n        \"\"\"\n        \n        coordinates = []\n        \n        for i, lst in enumerate(lst):\n            for j, x_ in enumerate(lst):\n                if x == x_:\n                    coordinates.append((i, j))\n                    \n        return coordinates\n    \n    def sort_coordinates_by_row(lst):\n        \"\"\"\n        Helper function which takes lst, and returns\n        lst with coordinates sorted by row in ascending order.\n        \"\"\"\n        \n        return sorted(lst, key=lambda x: x[0])\n    \n    def sort_coordinates_by_row_and_col(lst):\n        \"\"\"\n        Helper function which takes lst, and returns\n        lst with coordinates sorted by row in ascending order,\n        and sorted by column in descending order.\n        \"\"\"\n        \n        return sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    return sort_coordinates_by_row_and_col(row_column_list(lst, x))\n    \n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if lst == []:\n        return []\n    \n    def row_column_list(lst, x):\n        \"\"\"\n        Helper function which takes lst, and x, and returns\n        a list of coordinates, (row, column)\n        \"\"\"\n        \n        coordinates = []\n        \n        for i, lst in enumerate(lst):\n            for j, x_ in enumerate(lst):\n                if x == x_:\n                    coordinates.append((i, j))\n                    \n        return coordinates\n    \n    def sort_coordinates_by_row(lst):\n        \"\"\"\n        Helper function which takes lst, and returns\n        lst with coordinates sorted by row in ascending order.\n        \"\"\"\n        \n        return sorted(lst, key=lambda x: x[0])\n    \n    def sort_coordinates_by_row_and_col(lst):\n        \"\"\"\n        Helper function which takes lst, and returns\n        lst with coordinates sorted by row in ascending order,\n        and sorted by column in descending order.\n        \"\"\"\n        \n        return sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    return sort_coordinates_by_row_and_col(row_column_list(lst, x))\n    \ndef test_get_row():\n    \"\"\"\n    Test get_row function\n    \"\"\"\n    print('test_get_row:')\n    \n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    \n    x = 1\n    expected = [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    print('  lst, x, expected:', lst, x, expected)\n    print('  actual:', get_row(lst, x))\n    print('  passed:', get_row(lst, x) == expected)\n    \n    print()\n    \n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    \n    x = 3\n    expected = []\n    print('  lst, x, expected:', lst, x, expected)\n    print('  actual:', get_row(lst, x))\n    print('  passed:', get_row(lst, x) == expected)\n    \n    print()\n    \n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    \n    x = 4\n    expected = [(1, 0), (1, 2), (1, 4), (2, 3)]\n    print('  lst, x, expected:', lst, x, expected)\n    print('  actual:', get_row(lst, x))\n    print('  passed:', get_row(lst, x)"}
{"task_id": "python/38", "language": "python", "completion": "if len(lst) < 2:\n        return None\n    lst_new = lst.copy()\n    lst_new.sort()\n    return lst_new[1]\n    \n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst_new = lst.copy()\n    lst_new.sort()\n    return lst_new[1]\n    \n    \n    \n    \n    \ndef is_palindrome(word):\n    \"\"\"\n    Write a function is_palindrome() that takes a string as input and returns True if it is a palindrome, False otherwise.\n    \n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"python\")\n    False\n    >>> is_palindrome(\"madam\")\n    True\n    >>> is_palindrome(\"noon\")\n    True\n    >>> is_palindrome(\"a\")\n    True\n    >>> is_palindrome(\"\")\n    True\n    >>> is_palindrome(\"race car\")\n    False\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"kayak\")\n    True\n    \"\"\"\n    return word == word[::-1]\n    \n    \n    \n    \n    \ndef get_nth_prime(n):\n    \"\"\"\n    Write a function get_nth_prime() that returns the nth prime number.\n    You can assume that nth is a positive integer.\n    \n    >>> get_nth_prime(1)\n    2\n    >>> get_nth_prime(2)\n    3\n    >>> get_nth_prime(3)\n    5\n    >>> get_nth_prime(4)\n    7\n    \"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in primes:\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes[-1]\n    \n    \n    \n    \n    \n    \ndef get_nth_prime(n):\n    \"\"\"\n    Write a function get_nth_prime() that returns the nth prime number.\n    You can assume that nth is a positive integer.\n    \n    >>> get_nth_prime(1)\n    2\n    >>> get_nth_prime(2)\n    3\n    >>> get_nth_prime(3)\n    5\n    >>> get_nth_prime(4)\n    7\n    \"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in primes:\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes[-1]\n    \n    \n    \n    \n    \ndef count_vowels(word):\n    \"\"\"\n    Write a function count_vowels() that takes a string as input and returns the number of vowels in the string.\n    \n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"python\")\n    1\n    >>> count_vowels(\"lighthouse labs\")\n    4\n    >>> count_vowels(\"aeiou\")\n    0\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \ndef count_vowels(word):\n    \"\"\"\n    Write a function count_vowels() that takes a string as input and returns the number of vowels in the string.\n    \n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"python\")\n    1\n    >>> count_vowels(\"lighthouse labs\")\n    4\n    >>> count_vowels(\"aeiou\")\n    0\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef count_vowels(word):\n    \"\"\"\n    Write a function count_vowels() that takes a string as input and returns the number of vowels in the string.\n    \n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"python\")\n    1\n    >>> count_vowels(\"lighthouse labs\")\n    4\n    >>> count_vowels(\"aeiou\")\n    0\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef count_vowels(word):\n    \"\"\"\n    Write a function count_vowels() that takes a string as input and returns the number of vowels in the string.\n    \n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"python\")\n    1\n    >>> count_vowels(\"lighthouse labs\")\n    4\n    >>> count_vowels(\"aeiou\")\n    0\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            cou"}
{"task_id": "python/39", "language": "python", "completion": "boredom = 0\n    for sentence in S.split("}
{"task_id": "python/39", "language": "python", "completion": "return sum(sentence.startswith('I') for sentence in S.split('.')) + sum(sentence.startswith('I') for sentence in S.split('?')) + sum(sentence.startswith('I') for sentence in S.split('!'))\n    \n\n    \n\"\"\"\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"I like turtles\")\n0\n>>> is_bored(\"I really love turtles\")\n0\n>>> is_bored(\"I really love them\")\n0\n>>> is_bored(\"I love them\")\n1\n>>> is_bored(\"I love you\")\n1\n\"\"\"\n\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    boredom_count = 0\n    boredom_words = [\"I\", \"me\", \"my\", \"mine\", \"myself\"]\n    \n    for sentence in S.split('.'):\n        if sentence.startswith(boredom_words[0]):\n            boredom_count += 1\n    for sentence in S.split('?'):\n        if sentence.startswith(boredom_words[1]):\n            boredom_count += 1\n    for sentence in S.split('!'):\n        if sentence.startswith(boredom_words[2]):\n            boredom_count += 1\n            \n    return boredom_count\n\n\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\n\nclass TestBored(unittest.TestCase):\n    @patch('sys.stdin', StringIO(\"The sky is blue. The sun is shining. I love this weather\"))\n    def test_bored_with_sentence(self):\n        self.assertEqual(is_bored(), 1)\n    @patch('sys.stdin', StringIO(\"I like turtles\"))\n    def test_bored_without_sentence(self):\n        self.assertEqual(is_bored(), 0)\n    @patch('sys.stdin', StringIO(\"I really love turtles\"))\n    def test_bored_with_word(self):\n        self.assertEqual(is_bored(), 0)\n    @patch('sys.stdin', StringIO(\"I really love them\"))\n    def test_bored_with_phrase(self):\n        self.assertEqual(is_bored(), 0)\n    @patch('sys.stdin', StringIO(\"I love them\"))\n    def test_bored_with_phrase(self):\n        self.assertEqual(is_bored(), 1)\n    @patch('sys.stdin', StringIO(\"I love you\"))\n    def test_bored_with_phrase(self):\n        self.assertEqual(is_bored(), 1)\n    @patch('sys.stdin', StringIO(\"I love me\")"}
{"task_id": "python/40", "language": "python", "completion": "lst.sort(reverse=True)\n    lst1=lst\n    lst1.sort(reverse=True)\n    for i in lst:\n        if i > lst1[0] and i % lst1[0] == 0:\n            lst1=lst.copy()\n            lst1.remove(i)\n            print(lst1)\n            for j in lst1:\n                if j > lst1[0] and j % lst1[0] == 0:\n                    lst1=lst.copy()\n                    lst1.remove(j)\n                    print(lst1)\n                    for k in lst1:\n                        if k > lst1[0] and k % lst1[0] == 0:\n                            lst1=lst.copy()\n                            lst1.remove(k)\n                            print(lst1)\n                            for l in lst1:\n                                if l > lst1[0] and l % lst1[0] == 0:\n                                    lst1=lst.copy()\n                                    lst1.remove(l)\n                                    print(lst1)\n                                    for m in lst1:\n                                        if m > lst1[0] and m % lst1[0] == 0:\n                                            lst1=lst.copy()\n                                            lst1.remove(m)\n                                            print(lst1)\n                                            for n in lst1:\n                                                if n > lst1[0] and n % lst1[0] == 0:\n                                                    lst1=lst.copy()\n                                                    lst1.remove(n)\n                                                    print(lst1)\n                                                    for o in lst1:\n                                                        if o > lst1[0] and o % lst1[0] == 0:\n                                                            lst1=lst.copy()\n                                                            lst1.remove(o)\n                                                            print(lst1)\n                                                            for p in lst1:\n                                                                if p > lst1[0] and p % lst1[0] == 0:\n                                                                    lst1=lst.copy()\n                                                                    lst1.remove(p)\n                                                                    print(lst1)\n                                                                    for q in lst1:\n                                                                        if q > lst1[0] and q % lst1[0] == 0:\n                                                                            lst1=lst.copy()\n                                                                            lst1.remove(q)\n                                                                            print(lst1)\n                                                                            for r in lst1:\n                                                                                if r > lst1[0] and r % lst1[0] == 0:\n                                                                                    lst1=lst.copy()\n                                                                                    lst1.remove(r)\n                                                                                    print(lst1)\n                                                                                    for s in lst1:\n                                                                                        if s > lst1[0] and s % lst1[0] == 0:\n                                                                                            lst1=lst.copy()\n                                                                                            lst1.remove(s)\n                                                                                            print(lst1)\n                                                                                            for t in lst1:\n                                                                                                if t > lst1[0] and t % lst1[0] == 0:\n                                                                                                    lst1=lst.copy()\n                                                                                                    lst1.remove(t)\n                                                                                                    print(lst1)\n                                                                                                    for u in lst1:\n                                                                                                        if u > lst1[0] and u % lst1[0] == 0:\n                                                                                                            lst1=lst.copy()\n                                                                                                            lst1.remove(u)\n                                                                                                            print(lst1)\n                                                                                                            for v in lst1:"}
{"task_id": "python/41", "language": "python", "completion": "if not bool(dict):\n        return False\n    elif all(isinstance(key, str) for key in dict.keys()):\n        return True\n    else:\n        return False\n\nprint(check_dict_case({}))\nprint(check_dict_case({1:\"apple\"}))\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))\n\n\ndef find_missing(lst):\n    \"\"\"\n    Given a list lst, return the missing number from the list. \n    lst will contain at least 2 elements and will be a sorted list.\n    The function should return None if all elements are consecutive, \n    and will return the element missing from the list.\n    Example:\n    find_missing([1,2,3,5,6]) should return 4.\n    find_missing([1,2,3,4,5]) should return None.\n    \"\"\"\n    lst.sort()\n    for i, num in enumerate(lst):\n        if i == 0 or i == len(lst) - 1:\n            continue\n        if lst[i-1] != lst[i]-1 and lst[i+1] != lst[i] + 1:\n            return lst[i] - 1\n    return None\n\nprint(find_missing([1,2,3,5,6]))\nprint(find_missing([1,2,3,4,5]))\nprint(find_missing([1,3,5,7,9,11]))\nprint(find_missing([1,2,4,5,6]))\nprint(find_missing([1,2,3,4,5,7,8,9,10,11,12]))\n\n\ndef find_missing_v2(lst):\n    \"\"\"\n    Given a list lst, return the missing number from the list. \n    lst will contain at least 2 elements and will be a sorted list.\n    The function should return None if all elements are consecutive, \n    and will return the element missing from the list.\n    Example:\n    find_missing([1,2,3,5,6]) should return 4.\n    find_missing([1,2,3,4,5]) should return None.\n    \"\"\"\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i+1] != lst[i]+1:\n            return lst[i] + 1\n    return None\n\nprint(find_missing_v2([1,2,3,5,6]))\nprint(find_missing_v2([1,2,3,4,5]))\nprint(find_missing_v2([1,3,5,7,9,11]))\nprint(find_missing_v2([1,2,4,5,6]))\nprint(find_missing_v2([1,2,3,4,5,7,8,9,10,11,12]))\n\n\ndef find_missing_v3(lst):\n    \"\"\"\n    Given a list lst, return the missing number from the list. \n    lst will contain at least 2 elements and will be a sorted list.\n    The function should return None if all elements are consecutive, \n    and will return the element missing from the list.\n    Example:\n    find_missing([1,2,3,5,6]) should return 4.\n    find_missing([1,2,3,4,5]) should return None.\n    \"\"\"\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1] + 1:\n            return"}
{"task_id": "python/41", "language": "python", "completion": "if len(dict) == 0:\n        return False\n    lower_case_keys = [key.islower() for key in dict.keys()]\n    upper_case_keys = [key.isupper() for key in dict.keys()]\n    if all(lower_case_keys) or all(upper_case_keys):\n        return True\n    else:\n        return False\n    \nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\nprint(check_dict_case({}))\n\ndef transpose_matrix(matrix):\n    \"\"\"\n    Given a matrix, transpose it and return the transposed matrix.\n    For example, given the following matrix:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    The transposed matrix is:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    transposed = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(matrix[j][i])\n        transposed.append(row)\n    return transposed\n    \ndef transpose_matrix_alternative(matrix):\n    \"\"\"\n    Given a matrix, transpose it and return the transposed matrix.\n    For example, given the following matrix:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    The transposed matrix is:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    transposed = [[matrix[j][i] for j in range(m)] for i in range(n)]\n    return transposed\n    \nprint(transpose_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(transpose_matrix_alternative([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\ndef transpose_matrix_alternative2(matrix):\n    \"\"\"\n    Given a matrix, transpose it and return the transposed matrix.\n    For example, given the following matrix:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    The transposed matrix is:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    transposed = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(matrix[j][i])\n        transposed.append(row)\n    return transposed\n    \nprint(transpose_matrix_alternative2([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\ndef transpose_matrix_alternative3(matrix):\n    \"\"\"\n    Given a matrix, transpose it and return the transposed matrix.\n    For example, given the following matrix:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    The transposed matrix is:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    transposed = ["}
{"task_id": "python/42", "language": "python", "completion": "intvalue=int(value)\n    if intvalue > 0:\n        return intvalue\n    elif intvalue < 0:\n        return -intvalue\n    else:\n        return intvalue\n    print(value)\n    \n   \nprint(closest_integer(10))\nprint(closest_integer(15.3))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_integer(-14.4))\nprint(closest_integer(14.4))\nprint(closest_integer(10.0))\nprint(closest_integer(15.0))\nprint(closest_integer(-14.0))\nprint(closest_integer(14.0))\nprint(closest_integer(-14.5))\nprint(closest_integer(14.5))\nprint(closest_intege"}
{"task_id": "python/42", "language": "python", "completion": "return int(value)\n\nimport doctest\ndoctest.testmod()\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"-14.5\"))\n\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))\n\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Create a function that takes in a temperature in celsius and converts\n    it to fahrenheit. Return the converted value.\n    '''\n    return celsius * 1.8 + 32\n\nimport doctest\ndoctest.testmod()\nprint(celsius_to_fahrenheit(2))\nprint(celsius_to_fahrenheit(0))\nprint(celsius_to_fahrenheit(1))\nprint(celsius_to_fahrenheit(100))"}
{"task_id": "python/43", "language": "python", "completion": "pile = [n]\n    n = n-1\n    while n>0:\n        pile.append(n%2*n+n)\n        n-=1\n    return pile\ndef test_make_a_pile():\n    assert make_a_pile(3) == [3, 5, 7]\n    assert make_a_pile(4) == [4, 7, 11, 15]\n    assert make_a_pile(5) == [5, 9, 13, 17, 21]\n    assert make_a_pile(6) == [6, 11, 16, 21, 27, 33]\n\ndef sum_of_primes(n):\n    \"\"\"\n    Given a positive integer n, return the sum of all the prime numbers\n    below n.\n    Examples:\n    >>> sum_of_primes(20)\n    17\n    >>> sum_of_primes(10)\n    5\n    >>> sum_of_primes(100)\n    1068\n    >>> sum_of_primes(1000)\n    142913\n    \"\"\"\n    s = 0\n    for i in range(2, n):\n        if is_prime(i):\n            s += i\n    return s\n    \ndef test_sum_of_primes():\n    assert sum_of_primes(20) == 17\n    assert sum_of_primes(10) == 5\n    assert sum_of_primes(100) == 1068\n    assert sum_of_primes(1000) == 142913\ndef is_prime(n):\n    for i in range(2, n-1):\n        if n % i == 0:\n            return False\n    return True\ndef test_is_prime():\n    assert is_prime(2)\n    assert is_prime(3)\n    assert is_prime(5)\n    assert is_prime(7)\n    assert is_prime(11)\n    assert is_prime(13)\n    assert is_prime(17)\n    assert is_prime(19)\n    assert not is_prime(4)\n    assert not is_prime(6)\n    assert not is_prime(10)\n    assert not is_prime(12)\n    assert not is_prime(14)\n    assert not is_prime(15)\n    assert not is_prime(16)\n    assert not is_prime(18)\n    assert not is_prime(20)\n    assert not is_prime(21)\n    assert not is_prime(22)\n    assert not is_prime(23)\n    assert not is_prime(24)\n    assert not is_prime(25)\n    assert not is_prime(26)\n    assert not is_prime(27)\n    assert not is_prime(28)\n    assert not is_prime(29)\n    assert not is_prime(30)\n    assert not is_prime(31)\n    assert not is_prime(32)\n    assert not is_prime(33)\n    assert not is_prime(34)\n    assert not is_prime(35)\n    assert not is_prime(36)\n    assert not is_prime(37)\n    assert not is_prime(38)\n    assert not is_prime(39)\n    assert not is_prime(40)\n    assert not is_prime(41)\n    assert not is_prime(42)\n    assert not is_prime(43)\n    assert not is_prime(44)\n    assert not is_prime(45)\n    assert not is_prime(46)\n    assert not is_prime(47)\n    assert not is_prime(48)\n    assert not is_prime(49)\n    assert not is_prime(50)\n    assert not is_prime(51)\n    assert not is_prime(52)\n    assert not is_prime(53)\n    assert not is_prime(54)\n    assert not is_prime(55)\n    assert not is_prime(56)\n    assert not is_prime(57)\n    assert not is_prime(58)\n    assert not is_prime(59)\n    assert not is_prime(60)\n    assert not is_prime(61)\n    assert not is_prime(62)\n    assert not is_prime(63)\n    assert not is_prime(64)\n    assert not is_prime(65)\n    assert not is_prime(66)\n    assert not is_prime(67)\n    assert not is_prime(68)\n    assert not is_prime(69)\n    assert not is_prime(70)\n    assert not is_prime(71)\n    assert not is_prime(72)\n    assert not is_prime(73)\n    assert not is_prime(74)\n    assert not is_prime(75)\n    assert not is_prime(76)\n    assert not is_prime(77)\n    assert not is_prime(78)\n    assert not is_prime(79)\n    assert not is_prime(80)\n    assert not is_prime(81)\n    assert not is_prime(82)\n    assert not is_prime(83)\n    assert not is_prime(84)\n    assert not is_prime(85)\n    assert not is_prime(86)\n    assert not is_prime(87)\n    assert not is_prime(88)\n    assert not is_prime(89)\n    assert not is_prime(90)\n    assert not is_prime(91)\n    assert not is_prime(92)\n    assert not is_prime(93)\n    assert not is_prime(94)\n    assert not is_prime(95)\n    assert not is_prime(96)\n    assert not is_prime(97)\n    assert not is_prime(98)\n    assert not is_prime(99)\n    assert not is_prime(100)\ndef sum_of_squares(n):\n    \"\"\"\n    Given a positive integer n, return the sum of all the squares of its\n    divisors excluding n.\n    Examples:\n    >>> sum_of_squares(13)\n    32\n    >>> sum_of_squares(2)\n    3\n    >>> sum_of_squares(9)\n    11\n    >>> sum_of_squares(10)\n    14\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i*i\n    return s\ndef test_sum_of_squares():\n    assert sum_of_squares(13) == 32\n    assert sum_of_squares(2) == 3\n    assert sum_of_squares(9) == 11\n    assert sum_of_squares(10) == 14\n    assert sum_of_squares(11) == 31\n    assert sum_of_squares(12) == 50\n    assert sum_of_squares(13) == 32\n    assert sum_of_squares(14) == 63\n    assert sum_of_squares(15) == 85\n    assert sum_of_squares(16) == 107\n    assert sum_of_squares(17) == 133\n    assert sum_of_squares(18) == 159\n    assert sum_of_squares(19)"}
{"task_id": "python/43", "language": "python", "completion": "pile = []\n    for i in range(n):\n        pile.append((2 * i + 1) if n % 2 else (2 * i))\n    return pile\n\n\ndef count_of_positives(lst):\n    \"\"\"\n    Given a list of integers, return the number of positive integers in the list.\n\n    Examples:\n    >>> count_of_positives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15])\n    8\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n    \n    \ndef sum_of_odd_numbers(lst):\n    \"\"\"\n    Given a list of integers, return the sum of all odd integers.\n\n    Examples:\n    >>> sum_of_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    25\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 2:\n            sum += i\n    return sum\n    \n    \ndef even_number_of_strings(lst):\n    \"\"\"\n    Given a list of strings, return the number of even-length strings.\n\n    Examples:\n    >>> even_number_of_strings([\"hey\", \"hello\", \"bye\"])\n    1\n    \"\"\"\n    count = 0\n    for i in lst:\n        if len(i) % 2 == 0:\n            count += 1\n    return count\n    \n    \ndef is_anagram(s1, s2):\n    \"\"\"\n    Given two strings, return True if they are anagrams of each other and False\n    otherwise. Two words are anagrams if you can rearrange the letters from one\n    word to spell the other.\n\n    Examples:\n    >>> is_anagram(\"abba\", \"aabb\")\n    False\n    \"\"\"\n    if len(s1) == len(s2):\n        return sorted(s1) == sorted(s2)\n    return False\n    \n    \ndef remove_all(lst, el):\n    \"\"\"\n    Given a list lst and a value el, remove all occurrences of el in lst and\n    return the new list.\n\n    Examples:\n    >>> remove_all([1, 2, 3, 1, 2, 3], 1)\n    [2, 3, 2, 3]\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        if i != el:\n            new_lst.append(i)\n    return new_lst\n    \n    \ndef contains(lst, el):\n    \"\"\"\n    Given a list lst and a value el, return True if the list contains el and\n    False otherwise.\n\n    Examples:\n    >>> contains([1, 2, 3, 1, 2, 3], 1)\n    True\n    \"\"\"\n    for i in lst:\n        if i == el:\n            return True\n    return False\n    \n    \ndef count(lst, el):\n    \"\"\"\n    Given a list lst and a value el, return the number of occurrences of el in lst.\n\n    Examples:\n    >>> count([1, 2, 3, 1, 2, 3], 1)\n    2\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == el:\n            count += 1\n    return count\n    \n    \ndef max_num(lst):\n    \"\"\"\n    Given a list lst, return the maximum element in lst.\n\n    Examples:\n    >>> max_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    10\n    \"\"\"\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n    \n    \ndef is_leap_year(year):\n    \"\"\"\n    Given a year, return True if it is a leap year and False otherwise.\n\n    Examples:\n    >>> is_leap_year(1990)\n    False\n    \"\"\"\n    if year % 400 == 0 or (year % 100 != 0 and year % 4 == 0):\n        return True\n    return False\n    \n    \ndef is_consecutive(lst):\n    \"\"\"\n    Given a list lst, return True if all elements in lst are consecutive integers,\n    otherwise False.\n\n    Examples:\n    >>> is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] + 1 != lst[i + 1]:\n            return False\n    return True\n    \n    \ndef sum_of_multiples(lst, n):\n    \"\"\"\n    Given a list of numbers lst and a number n, return the sum of all multiples of n in lst.\n\n    Examples:\n    >>> sum_of_multiples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    30\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n    \n    \ndef sum_of_multiples_of_3_and_5(lst):\n    \"\"\"\n    Given a list lst, return the sum of all elements in lst that are a multiple of 3 or 5.\n\n    Examples:\n    >>> sum_of_multiples_of_3_and_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    23\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 5 == 0:\n            sum"}
{"task_id": "python/44", "language": "python", "completion": "return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"f"}
{"task_id": "python/44", "language": "python", "completion": "return s.split(',')\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(',')\n    return s.split(' ')\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split(' ')\n\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split(' ')\n    \ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split(' ')\n    \ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split(' ')\n    \ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split(' ')\n    \ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split(' ')\n    \ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n    return s.split('"}
{"task_id": "python/45", "language": "python", "completion": "if x >= y:\n        return -1\n    for i in range(x, y+1):\n        if i%2 == 0:\n            return i\n\ndef is_prime(n):\n    \"\"\"This function takes a positive number n and returns True if n is a prime number and False otherwise.\n\n    For example:\n    is_prime(1) = False\n    is_prime(3) = True\n    is_prime(6) = False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n//2+1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_perfect(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a perfect number and False otherwise.\n\n    A number is called a perfect number if the sum of all its divisors (including itself) is equal to this number.\n\n    For example:\n    is_perfect(6) = True\n    is_perfect(20) = False\n    \"\"\"\n    if n <= 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors == n\n\ndef sum_of_digits(n):\n    \"\"\"This function takes a positive integer n and returns the sum of the digits of n.\n\n    For example:\n    sum_of_digits(12345) = 1 + 2 + 3 + 4 + 5 = 15\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n //= 10\n    return sum\n    \ndef is_palindrome(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a palindrome and False otherwise.\n\n    For example:\n    is_palindrome(121) = True\n    is_palindrome(123) = False\n    is_palindrome(1221) = True\n    \"\"\"\n    return n == reverse(n)\n\ndef reverse(n):\n    \"\"\"This function takes a positive integer n and returns its reversed version.\n\n    For example:\n    reverse(12345) = 54321\n    \"\"\"\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return reversed_num\n    \ndef is_happy(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a happy number and False otherwise.\n\n    A number is called a happy number if the sum of the squares of its digits is 1.\n\n    For example:\n    is_happy(19) = True\n    is_happy(39) = False\n    \"\"\"\n    def sum_of_squares(num):\n        \"\"\"This function takes a positive integer num and returns the sum of the squares of its digits.\n\n        For example:\n        sum_of_squares(12345) = 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55\n        \"\"\"\n        sum = 0\n        while num > 0:\n            sum += (num % 10) ** 2\n            num //= 10\n        return sum\n    \n    while n != 1 and n != 4:\n        n = sum_of_squares(n)\n    return n == 1\n    \ndef is_leap_year(year):\n    \"\"\"This function takes a positive integer year and returns True if year is a leap year and False otherwise.\n\n    For example:\n    is_leap_year(2020) = True\n    is_leap_year(2021) = False\n    \"\"\"\n    if year % 400 == 0:\n        return True\n    if year % 100 == 0:\n        return False\n    if year % 4"}
{"task_id": "python/46", "language": "python", "completion": "if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n\ndef rounded_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_3(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_4(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_5(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_6(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_7(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_8(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_9(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    return bin(int(avg))[2:]\n    \ndef rounded_avg_10(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n >"}
{"task_id": "python/46", "language": "python", "completion": "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m+1):\n        avg += i\n    avg = avg / (m - n + 1)\n    return bin(round(avg))[2:]\n\ndef solution("}
{"task_id": "python/47", "language": "python", "completion": "if n==0:\n        return []\n    if n==1:\n        return [1]\n    if n==2:\n        return [1,2]\n    result = []\n    result.extend(range(1, n+1))\n    for i in range(2, n):\n        if i % 2 == 0:\n            result[i] = f(i)\n        else:\n            result[i] = sum(range(1, i + 1))\n    return result\n  \n  \n  \n  \n  \ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n==0:\n        return []\n    if n==1:\n        return [1]\n    if n==2:\n        return [1,2]\n    result = []\n    result.extend(range(1, n+1))\n    for i in range(2, n):\n        if i % 2 == 0:\n            result[i] = f(i)\n        else:\n            result[i] = sum(range(1, i + 1))\n    return result\n  \n  \n  \n  \n  \n  \ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n==0:\n        return []\n    if n==1:\n        return [1]\n    if n==2:\n        return [1,2]\n    result = []\n    result.extend(range(1, n+1))\n    for i in range(2, n):\n        if i % 2 == 0:\n            result[i] = f(i)\n        else:\n            result[i] = sum(range(1, i + 1))\n    return result"}
{"task_id": "python/47", "language": "python", "completion": "pass\n  \n  def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    pass\n    factorial = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n        else:\n            factorial += i\n    return factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of nu"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def is_even_palindrome(x):\n        return is_palindrome(x) and x % 2 == 0\n\n    def is_odd_palindrome(x):\n        return is_palindrome(x) and x % 2 != 0\n\n    return (sum(1 for x in range(1, n + 1) if is_even_palindrome(x)), \n            sum(1 for x in range(1, n + 1) if is_odd_palindrome(x)))\n\n    \n\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome(12))\nprint(even_odd_palindrome(2000))\nprint(even_odd_palindrome(90000000))\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            count_even += 1\n        elif palindrome_test(i) and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)\n\nprint(test(3))\nprint(test(12))\nprint(test(2000))\nprint(test(90000000))\n\n\ndef palindrome_test(x):\n    return str(x) == str(x)[::-1]\n\ndef test(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if palindrome_test(i) and i % 2 == 0:\n            cou"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(num):\n        if num < 0:\n            return False\n        if num < 10:\n            return True\n        left = num\n        right = 0\n        while left:\n            right = right*10 + left%10\n            left = left // 10\n        return num == right\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and is_palindrome(i):\n            even_count += 1\n        elif is_palindrome(i):\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_palindrome():\n    \"\"\"\n    Unittest function for even_odd_palindrome function.\n    \"\"\"\n    \n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(0) == (0, 0)\n    assert even_odd_palindrome(1) == (0, 1)\n    assert even_odd_palindrome(100) == (50, 50)\n    print(\"Unittest passed!\")\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    \n    n = int(input(\"Enter a positive integer: \"))\n    even_count, odd_count = even_odd_palindrome(n)\n    print(f\"The number of even palindrome is {even_count} and odd palindrome is {odd_count}.\")\n\nif __name__ == \"__main__\":\n    main()\n\n\"\"\"\nSample Input: 3\n\nSample Output: The number of even palindrome is 1 and odd palindrome is 2.\n\nSample Input: 12\n\nSample Output: The number of even palindrome is 4 and odd palindrome is 6.\n\"\"\"\n\ndef test_even_odd_palindrome():\n    \"\"\"\n    Unittest function for even_odd_palindrome function.\n    \"\"\"\n    \n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(0) == (0, 0)\n    assert even_odd_palindrome(1) == (0, 1)\n    assert even_odd_palindrome(100) == (50, 50)\n    print(\"Unittest passed!\")\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    \n    n = int(input(\"Enter a positive integer: \"))\n    even_count, odd_count = even_odd_palindrome(n)\n    print(f\"The number of even palindrome is {even_count} and odd palindrome is {odd_count}.\")\n\nif __name__ == \"__main__\":\n    main()\n\n\"\"\"\nSample Input: 3\n\nSample Output: The number of even palindrome is 1 and odd palindrome is 2.\n\nSample Input: 12\n\nSample Output: The number of even palindrome is 4 and odd palindrome is 6.\n\"\"\"\n\ndef test_even_odd_palindrome():\n    \"\"\"\n    Unittest function for even_odd_palindrome function.\n    \"\"\"\n    \n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(0) == (0, 0)\n    assert even_odd_palindrome(1) == (0, 1)\n    assert even_odd_palindrome(100) == (50, 50)\n    print(\"Unittest passed!\")\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    \n    n = int(input(\"Enter a positive integer: \""}
{"task_id": "python/49", "language": "python", "completion": "if arr==[]:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            return False\n    return True"}
{"task_id": "python/49", "language": "python", "completion": "if len(arr) == 0:\n        return True\n    \n    max_pos = 0\n    max_val = 0\n    for i in range(len(arr)):\n        if max_val < arr[i]:\n            max_pos = i\n            max_val = arr[i]\n            \n    return arr[max_pos:] + arr[0:max_pos] == sorted(arr)\n\ndef move_one_ball(arr):\n    if arr == []:\n        return True\n    max_pos,max_val = 0,0\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_pos,max_val = i,arr[i]\n    return arr[max_pos:] + arr[0:max_pos] == sorted(arr)\n\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\n\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    max_pos, max_val = 0, arr[0]\n    for i, n in enumerate(arr):\n        if n > max_val:\n            max_pos, max_val = i, n\n    return arr[max_pos:] + arr[0:max_pos] == sorted(arr)\n\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return sorted(arr) == arr\n\ndef move_one_ball(arr):\n    for i, n in enumerate(arr):\n        if n > max(arr):\n            return False\n    return True\n\ndef move_one_ball(arr):\n    return sorted(arr) == arr\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    max_pos, max_val = 0, arr[0]\n    \n    for i, n in enumerate(arr):\n        if n > max_val:\n            max_pos, max_val = i, n\n    \n    return arr[max_pos:] + arr[0:max_pos] == sorted(arr)\n\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    max_pos, max_val = 0, arr[0]\n    \n    for i, n in enumerate(arr):\n        if n > max_val:\n            max_pos, max_val = i, n\n            \n    return arr[max_pos:] + arr[0:max_pos] == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return sorted(arr) == arr\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr == sorted(arr)\n\ndef move_one_ball(arr):\n    return arr"}
{"task_id": "python/50", "language": "python", "completion": "lst1_copy = lst1[:]\n    lst2_copy = lst2[:]\n    lst1_copy.extend(lst2_copy)\n    lst1_copy.sort()\n    lst1_copy.reverse()\n    if len(lst1_copy) % 2 != 0:\n        return \"YES\"\n    lst1_odd = lst1_copy[1::2]\n    lst2_even = lst2_copy[::2]\n    lst1_odd.extend(lst2_even)\n    lst1_odd.sort()\n    lst1_odd.reverse()\n    if lst1_odd != lst1_copy:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n    \n    \nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nprint(exchange(lst1, lst2))\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\"\n    Otherwise, return \"NO\"\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    lst1_copy = lst1[:]\n    lst2_copy = lst2[:]\n    lst1_copy.extend(lst2_copy)\n    lst1_copy.sort()\n    lst1_copy.reverse()\n    if len(lst1_copy) % 2 != 0:\n        return \"YES\"\n    lst1_odd = lst1_copy[1::2]\n    lst2_even = lst2_copy[::2]\n    lst1_odd.extend(lst2_even)\n    lst1_odd.sort()\n    lst1_odd.reverse()\n    if lst1_odd != lst1_copy:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n    \n    \nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nprint(exchange(lst1, lst2))\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\"\n    Otherwise, return \"NO\"\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    lst1_copy = lst1[:]\n    lst2_copy = lst2[:]\n    lst1_copy.extend(lst2_copy)\n    lst1_copy.sort()\n    lst1_copy.reverse()\n    if len(lst1_copy) % 2 != 0:\n        return \"YES\"\n    lst1_odd = lst1_copy[1::2]\n    lst2_even = lst2_copy[::2]\n    lst1_odd.extend(lst2_even)\n    lst1_odd.sort()\n    lst1_odd.reverse()\n    if lst1_odd != lst1_copy:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n    \n    \nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nprint(exchange(lst1, lst2))\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\"\n    Otherwise, return \"NO\"\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    lst1_copy = lst1[:]\n    lst2_copy = lst2[:]\n    lst1_copy.extend(lst2_copy)\n    lst1_copy.sort()\n    lst1_copy.reverse()\n    if len(lst1_copy) % 2 != 0:\n        return \"YES\"\n    lst1_odd = lst1_copy[1::2]\n    lst2_even"}
{"task_id": "python/50", "language": "python", "completion": "lst1_odds = []\n    lst2_evens = []\n    for i in lst1:\n        if i % 2 == 1:\n            lst1_odds.append(i)\n        elif i % 2 == 0:\n            lst2_evens.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst2_evens.append(i)\n        elif i % 2 == 1:\n            lst1_odds.append(i)\n    if len(lst1_odds) > 0 and len(lst2_evens) > 0:\n        lst1_odds, lst2_evens = lst2_evens, lst1_odds\n    lst1_odds, lst2_evens = lst2_evens, lst1_odds\n    if lst1_odds != lst2_evens:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 3, 5, 7], [2, 4, 6, 8]))\nprint(exchange([2, 4, 6, 8], [1, 3, 5, 7]))\n\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    lst1_odds = []\n    lst2_evens = []\n    for i in lst1:\n        if i % 2 == 1:\n            lst1_odds.append(i)\n        elif i % 2 == 0:\n            lst2_evens.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst2_evens.append(i)\n        elif i % 2 == 1:\n            lst1_odds.append(i)\n    if len(lst1_odds) > 0 and len(lst2_evens) > 0:\n        lst1_odds, lst2_evens = lst2_evens, lst1_odds\n    lst1_odds, lst2_evens = lst2_evens, lst1_odds\n    if lst1_odds != lst2_evens:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 3, 5, 7], [2, 4, 6, 8]))\nprint(exchange([2, 4, 6, 8], [1, 3, 5, 7]))\n\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    lst1_odds = []\n    lst2_evens = []\n    for i in lst1:\n        if i % 2 == 1:\n            lst1_odds.append(i)\n        elif i % 2 == 0:\n            lst2_evens.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst2_evens.append(i)\n        elif i % 2 == 1:\n            lst1_odds.append(i)\n    if len(lst1_odds) > 0 and len(lst2_evens) > 0:\n        lst1_odds, lst2_evens = lst2_evens, lst1_odds\n    lst1_odds, lst2_evens = lst2_evens, lst1_odds\n    if lst1_odds != lst2_evens:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 3, 5, 7], [2, 4, 6, 8]))\nprint(exchange([2, 4, 6, 8], [1, 3, 5, 7]))\n\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    lst1_odds = []\n    lst2_evens"}
{"task_id": "python/51", "language": "python", "completion": "result = s.replace(c,'')\n    result = result[::-1]\n    if result==result[::-1]:\n        return (result,True)\n    return (result,False)\n    \n\n\ndef first_palindrom(s):\n    \"\"\" Task\n    You are given a string s consisting of lowercase letters. We want to find the first palindrom in s.\n    A palindrom is a string that is equal to its reverse.\n    Return None if there is no palindrom in s.\n    \"\"\"\n    for i in range(len(s)):\n        if s[i:]==s[i:][::-1]:\n            return s[:i]\n        return None\n\ndef get_sum(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n\ndef get_sum_of_pairs(a,b):\n    \"\"\"Task\n    You are given two lists a and b of the same length. You should calculate the sum of a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] for every pair of corresponding elements in a and b\n    Example\n    For a = [1,2,3] and b = [4,5,6], the result should be 32\n    \"\"\"\n    result = 0\n    for i in range(len(a)):\n        result += a[i]"}
{"task_id": "python/51", "language": "python", "completion": "s=list(s)\n    c=list(c)\n    for i in c:\n        while s.count(i)>0:\n            s.remove(i)\n    result=\"\".join(s)\n    if result==result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n    \ndef main():\n    s = \"abcdef\"\n    c = \"b\"\n    result = reverse_delete(s, c)\n    print(result)\nif __name__ == '__main__':\n    main()\n#________________________________________________________________________________________________________________________________________________________________________\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=list(s)\n    c=list(c)\n    for i in c:\n        while s.count(i)>0:\n            s.remove(i)\n    result=\"\".join(s)\n    if result==result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n    \ndef main():\n    s = \"abcdef\"\n    c = \"b\"\n    result = reverse_delete(s, c)\n    print(result)\nif __name__ == '__main__':\n    main()\n#________________________________________________________________________________________________________________________________________________________________________\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=list(s)\n    c=list(c)\n    for i in c:\n        while s.count(i)>0:\n            s.remove(i)\n    result=\"\".join(s)\n    if result==result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n    \ndef main():\n    s = \"abcdef\"\n    c = \"b\"\n    result = reverse_delete(s, c)\n    print(result)\nif __name__"}
{"task_id": "python/52", "language": "python", "completion": "num_wells = len(grid[0])\n    num_buckets = math.ceil(sum(grid[0])/capacity)\n    num_rounds = num_wells + num_buckets - 1\n    num_rounds_with_fill = num_rounds // 2\n    return num_rounds_with_fill\n\ndef test_max_fill():\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_max_fill()\n\ndef fill(grid, bucket):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5) == 0\n    print(\"All test cases passed!\")\n\ntest_fill()\n\ndef fill(grid, bucket):\n    import math\n    num_rounds_with_fill = math.ceil(sum(grid[0])/bucket) - 1\n    return num_rounds_with_fill\n\ndef test_fill():\n    assert fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert fill([[0,0,0], [0,0,0]], 5)"}
{"task_id": "python/53", "language": "python", "completion": "def is_vowel(letter):\n        vowel_letters = ['a', 'e', 'i', 'o', 'u', 'y']\n        return letter.lower() in vowel_letters\n    \n    def is_vowel_count(word, n):\n        vowel_count = 0\n        for char in word:\n            if is_vowel(char):\n                vowel_count += 1\n        return vowel_count == n\n    \n    def is_consonant_count(word, n):\n        vowel_count = 0\n        consonant_count = 0\n        for char in word:\n            if is_vowel(char):\n                vowel_count += 1\n            else:\n                consonant_count += 1\n        return consonant_count == n\n    \n    words = s.split()\n    return [word for word in words if is_consonant_count(word, n)]\n    \n    \nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n\ndef get_vowel_indices(text):\n    vowels = \"AEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(text):\n        if char.upper() in vowels:\n            vowel_indices.append(i)\n    return vowel_indices\n\ndef is_consonant_count(word, n):\n    vowel_indices = get_vowel_indices(word)\n    vowel_count = len(vowel_indices)\n    consonant_count = len(word) - vowel_count\n    return consonant_count == n\n\ndef select_words(text, n):\n    words = text.split()\n    consonant_words = [word for word in words if is_consonant_count(word, n)]\n    return consonant_words\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog.\"\nn = 3\nconsonant_words = select_words(text, n)\nprint(consonant_words)  # Output: [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\", \"dog\"]\n\n\ndef get_vowel_indices(text):\n    vowels = \"AEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(text):\n        if char.upper() in vowels:\n            vowel_indices.append(i)\n    return vowel_indices\n\ndef is_consonant_count(word, n):\n    vowel_indices = get_vowel_indices(word)\n    vowel_count = len(vowel_indices)\n    consonant_count = len(word) - vowel_count\n    return consonant_count == n\n\ndef select_words(text, n):\n    words = text.split()\n    consonant_words = [word for word in words if is_consonant_count(word, n)]\n    return consonant_words\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog.\"\nn = 3\nconsonant_words = select_words(text, n)\nprint(consonant_words)  # Output:"}
{"task_id": "python/53", "language": "python", "completion": "word_list = []\n    for i in range(len(s)):\n        word = ''\n        for j in range(i, len(s)):\n            if s[j] in 'qwertyuiopasdfghjklzxcvbnm':\n                word += s[j]\n            else:\n                if len(set(word)) == n:\n                    word_list.append(word)\n                break\n    return word_list\ndef is_prime(num):\n    \"\"\"\n    Given a positive integer num, write a function to check if num is a prime number\n    Example 1: Input: num = 2 Output: true\n    Example 2: Input: num = 3 Output: true\n    Example 3: Input: num = 1 Output: false\n    Example 4: Input: num = 11 Output: true\n    Example 5: Input: num = 13 Output: true\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef reverse_words(s, n):\n    \"\"\"\n    Given a string s and an integer n, write a function to reverse the first n \n    words in the string s.\n    Examples:\n    reverse_words(\"my name is\", 2) == \"name is my\"\n    reverse_words(\"I love Python\", 3) == \"I love Python\"\n    reverse_words(\"my name is\", 1) == \"my name is\"\n    reverse_words(\"my name is\", 0) == \"my name is\"\n    \"\"\"\n    words = s.split()\n    if n > 0:\n        words = words[-n:] + words[:-n]\n    return ' '.join(words)\ndef gcd(a, b):\n    \"\"\"\n    Given two positive integers a and b, write a function to return their greatest \n    common divisor (GCD).\n    Example: gcd(1, 3) == 1\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    \"\"\"\n    Given two positive integers a and b, write a function to return their least \n    common multiple (LCM).\n    Example: lcm(1, 3) == 3\n    \"\"\"\n    return a * b // gcd(a, b)\ndef binary_search(arr, num):\n    \"\"\"\n    Given a list arr and a number num, write a function to return the index of num \n    in arr. If num does not exist in arr, return -1.\n    Examples:\n    binary_search([1, 2, 3, 4, 5], 3) == 2\n    binary_search([1, 2, 3, 4, 5], 6) == -1\n    binary_search([1, 2, 3, 4, 5], 0) == -1\n    binary_search([1, 2, 3, 4, 5], 5) == 4\n    binary_search([1, 2, 3, 4, 5], 1) == 0\n    binary_search([1, 2, 3, 4, 5], 2) == 1\n    \"\"\"\n    if num in arr:\n        return arr.index(num)\n    return -1\ndef fib_rec(n):\n    \"\"\"\n    Given a positive integer n, write a function to return the nth Fibonacci number.\n    The first two Fibonacci numbers are 1 and 1.\n    Example: fib_rec(1) == 1\n    fib_rec(2) == 1\n    fib_rec(3) == 2\n    fib_rec(4) == 3\n    fib_rec(5) == 5\n    fib_rec(6) == 8\n    fib_rec(7) == 13\n    fib_rec(8) == 21\n    fib_rec(9) == 34\n    fib_rec(10) == 55\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib_rec(n - 1) + fib_rec(n - 2)\ndef fib_it(n):\n    \"\"\"\n    Given a positive integer n, write a function to return the nth Fibonacci number.\n    The first two Fibonacci numbers are 1 and 1.\n    Example: fib_it(1) == 1\n    fib_it(2) == 1\n    fib_it(3) == 2\n    fib_it(4) == 3\n    fib_it(5) == 5\n    fib_it(6) == 8\n    fib_it(7) == 13\n    fib_it(8) == 21\n    fib_it(9) == 34\n    fib_it(10) == 55\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n - 1]\ndef fib_memo(n):\n    \"\"\"\n    Given a positive integer n, write a function to return the nth Fibonacci number.\n    The first two Fibonacci numbers are 1 and 1.\n    Example: fib_memo(1) == 1\n    fib_memo(2) == 1\n    fib_memo(3) == 2\n    fib_memo(4) == 3\n    fib_memo(5) == 5\n    fib_memo(6) == 8\n    fib_memo(7) == 13\n    fib_memo(8) == 21\n    fib_memo(9) == 34\n    fib_memo(10) == 55\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n - 1]\ndef fib_dp(n):\n    \"\"\"\n    Given a positive integer n, write a function to return the nth Fibonacci number.\n    The first two Fibonacci numbers are 1 and 1.\n    Example: fib_dp(1) == 1\n    fib_dp(2) == 1\n    fib_dp(3) == 2\n    fib_dp(4) == 3\n    fib_dp(5) == 5\n    fib_dp(6) == 8\n    fib_dp(7) == 13\n    fib_dp(8) == 21\n    fib_dp(9) == 34\n    fib_dp(10) == 55\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    fib = [1, 1]\n    for i in range(2, n):\n        fi"}
{"task_id": "python/54", "language": "python", "completion": "arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    ans = arr[:k]\n    return ans\n\nprint(maximum(arr, k))\nprint(sorted(arr, reverse=True)[:k])\nprint(sorted(arr, reverse=True))\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Ex"}
{"task_id": "python/54", "language": "python", "completion": "# Sort the array arr\n    arr.sort()\n    # Return a sorted list of length k with the maximum k numbers in arr\n    return arr[-k:]"}
{"task_id": "python/55", "language": "python", "completion": "def check_arr_length(arr):\n        \"\"\"\n        Checks if arr has a length of at least 1\n        \"\"\"\n        return len(arr) >= 1\n    \n    def check_k_length(k):\n        \"\"\"\n        Checks if k has a length of at least 1\n        \"\"\"\n        return len(k) >= 1\n    \n    def check_k_elements(arr):\n        \"\"\"\n        Checks if arr has at least k elements\n        \"\"\"\n        return len(arr) >= k\n    \n    def arr_check(arr):\n        \"\"\"\n        Checks if arr is an array\n        \"\"\"\n        return type(arr) is list\n    \n    def k_check(k):\n        \"\"\"\n        Checks if k is an int\n        \"\"\"\n        return type(k) is int\n    \n    def k_range_check(arr, k):\n        \"\"\"\n        Checks if k is a valid range,\n        i.e., 0 <= k <= len(arr)\n        \"\"\"\n        return 0 <= k <= len(arr)\n    \n    def check_sum_range(arr, k):\n        \"\"\"\n        Checks if sum of arr[:k] is in range [0, 100]\n        \"\"\"\n        return sum(arr[:k]) <= 100\n    \n    def k_elements_check(arr):\n        \"\"\"\n        Checks if arr has at least k elements\n        \"\"\"\n        return len(arr) >= k\n    \n    def sum_check(arr, k):\n        \"\"\"\n        Checks if sum of arr[:k] is in range [0, 100]\n        \"\"\"\n        return sum(arr[:k]) <= 100\n    \n    def check_arr(arr):\n        \"\"\"\n        Checks if arr is an array\n        \"\"\"\n        return type(arr) is list\n    \n    def check_k(k):\n        \"\"\"\n        Checks if k is an int\n        \"\"\"\n        return type(k) is int\n    \n    def check_k_range(arr, k):\n        \"\"\"\n        Checks if k is a valid range,\n        i.e., 0 <= k <= len(arr)\n        \"\"\"\n        return 0 <= k <= len(arr)\n    \n    def check_k_elements(arr):\n        \"\"\"\n        Checks if arr has at least k elements\n        \"\"\"\n        return len(arr) >= k\n    \n    def check_arr_elements(arr):\n        \"\"\"\n        Checks if arr is an array of integers\n        \"\"\"\n        return type(arr) is list and all(type(i) is int for i in arr)\n    \n    def sum_check(arr, k):\n        \"\"\"\n        Checks if sum of arr[:k] is in range [0, 100]\n        \"\"\"\n        return sum(arr[:k]) <= 100\n    \n    def sum_range_check(arr):\n        \"\"\"\n        Checks if sum of arr is in range [0, 100]\n        \"\"\"\n        return sum(arr) <= 100\n    \n    def k_elements_check(arr):\n        \"\"\"\n        Checks if arr has at least k elements\n        \"\"\"\n        return len(arr) >= k\n    \n    def arr_check(arr):\n        \"\"\"\n        Checks if arr is an array\n        \"\"\"\n        return type(arr) is list\n    \n    def arr_length_check(arr):\n        \"\"\"\n        Checks if arr has a length of at least 1\n        \"\"\"\n        return len(arr) >= 1\n    \n    def check_k(k):\n        \"\"\"\n        Checks if k is an int\n        \"\"\"\n        return type(k) is int\n    \n    def check_k_range(k):\n        \"\"\"\n        Checks if k is a valid range,\n        i.e., 0 <= k <= len(arr)\n        \"\"\"\n        return 0 <= k <= len(arr)\n    \n    def check_arr_elements(arr):\n        \"\"\"\n        Checks if arr is an array of integers\n        \"\"\"\n        return type(arr) is list and all(type(i) is int for i in arr)\n    \n    def check_arr_length(arr):\n        \"\"\"\n        Checks if arr has a length of at least 1\n        \"\"\"\n        return len(arr) >= 1\n    \n    def sum_check(arr, k):\n        \"\"\"\n        Checks if sum of arr[:k] is in range [0, 100]\n        \"\"\"\n        return sum(arr[:k]) <= 100\n    \n    def sum_range_check(arr):\n        \"\"\"\n        Checks if sum of arr is in range [0, 100]\n        \"\"\"\n        return sum(arr) <= 100\n    \n    def k_elements_check(arr):\n        \"\"\"\n        Checks if arr has at least k elements\n        \"\"\"\n        return len(arr) >= k\n    \n    def check_arr(arr):\n        \"\"\"\n        Checks if arr is an array\n        \"\"\"\n        return type(arr) is list\n    \n    def check_arr_elements(arr):\n        \"\"\"\n        Checks if arr is an array of integers\n        \"\"\"\n        return type(arr) is list and all(type(i) is int for i in arr)\n    \n    def sum_check(arr, k):\n        \"\"\"\n        Checks if sum of arr[:k] is in range [0, 100]\n        \"\"\"\n        return sum(arr[:k]) <= 100\n    \n    def sum_range_check(arr):\n        \"\"\"\n        Checks if sum of arr is in range [0, 100]\n        \"\"\"\n        return sum(arr) <= 100\n    \n    def k_elements_check(arr):\n        \"\"\"\n        Checks if arr has at least k elements\n        \"\"\"\n        return len(arr) >= k\n    \n    def check_arr(arr):\n        \"\"\"\n        Checks if arr is an array\n        \"\"\"\n        return type(arr) is l"}
{"task_id": "python/56", "language": "python", "completion": "x, y = interval1\n    u, v = interval2\n    if x < u and y > v: return 'NO'\n    elif x >= u and y > v: return 'NO'\n    elif x <= u and y <= v: return 'NO'\n    elif x > u and y < v: return 'NO'\n    else: return 'YES'\n\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    x, y = interval1\n    u, v = interval2\n    if x < u and y > v: return 'NO'\n    elif x >= u and y > v: return 'NO'\n    elif x <= u and y <= v: return 'NO'\n    elif x > u and y < v: return 'NO'\n    else: return 'YES'\n\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4))"}
{"task_id": "python/56", "language": "python", "completion": "if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\"\n\ndef sum_of_digits(n):\n    \"\"\"\n    You are given an integer n, return the sum of its digits.\n    For example, 123 ==> 1 + 2 + 3 ==> 6\n    \"\"\"\n    ans = 0\n    while n:\n        ans += n % 10\n        n = n // 10\n    return ans\n\ndef max_char_in_string(string):\n    \"\"\"You are given a string consisting of uppercase English letters only.\n    For each letter that appears in the string, return its most often occurring character.\n    If there are multiple most often occurring characters, output the first one in the alphabetical order.\n    Example: \"ABBCCDFEEDEDDDD\" ==> \"A\"\n    \"\"\"\n    ans = \"\"\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_freq = -1\n    for key in freq:\n        if freq[key] > max_freq:\n            max_freq = freq[key]\n            ans = key\n    return ans\n\ndef is_prime(n):\n    \"\"\"\n    You are given an integer n.\n    Return \"YES\" if it is prime, otherwise return \"NO\".\n    For example, 3 ==> \"YES\"\n    \"\"\"\n    if n <= 1:\n        return \"NO\"\n    if n % 2 == 0:\n        return \"NO\"\n    if n % 3 == 0:\n        return \"NO\"\n    if n % 5 == 0:\n        return \"NO\"\n    if n % 7 == 0:\n        return \"NO\"\n    return \"YES\"\n\ndef is_valid_identifier(identifier):\n    \"\"\"You are given a string. Return \"YES\" if it is a valid identifier, otherwise return \"NO\".\n    For example, \"abc\" ==> \"YES\"\n    \"\"\"\n    if identifier[0] in \"$_\":\n        return \"NO\"\n    for char in identifier:\n        if char in \"qwertyuiopasdfghjklzxcvbnm\":\n            continue\n        if char in \"$_\":\n            continue\n        return \"NO\"\n    return \"YES\"\n\ndef is_leap_year(year):\n    \"\"\"You are given an integer n, return \"YES\" if it is a leap year, otherwise return \"NO\".\n    For example, 2020 ==> \"YES\"\n    \"\"\"\n    if year % 4 == 0:\n        if year"}
{"task_id": "python/57", "language": "python", "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i - 2] + sequence[i - 3])\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence\n    \n#--------------------------------------------------------------------------------------------------------------------------------------------------\ndef sum_of_cubes(n):\n    \"\"\"Sum of Cubes\n    Write a function that takes a positive integer n, sums all the cubes of all the positive integers \n    smaller than n, and returns the sum.\n    For example, sum_of_cubes(4) should return 100.\n    \"\"\"\n    res = 0\n    for i in range(n):\n        res += i ** 3\n    return res\n\ndef sum_of_cubes2(n):\n    return sum([i ** 3 for i in range(n)])\n#--------------------------------------------------------------------------------------------------------------------------------------------------\ndef pig_it(text):\n    \"\"\"\n    Move the first letter of each word to the end of it, then add \"ay\" to the end of the word.\n    Examples\n    pig_it('Pig latin') -> igPay atinlay\n    pig_it('Hello world !') -> elloHay orldway !\n    \"\"\"\n    lst = text.split()\n    for i in range(len(lst)):\n        if lst[i].isalpha():\n            lst[i] = lst[i][1:] + lst[i][0] + 'ay'\n    return ' '.join(lst)\n#--------------------------------------------------------------------------------------------------------------------------------------------------\ndef is_valid_IP(strng):\n    \"\"\"\n    Write an algorithm that will identify valid IPv4 addresses in dot-decimal format.\n    IPs should be considered valid if they consist of four octets (with values between 0 and 255), \n    separated by dots (thus, a valid IP is 1.2.3.4).\n    \n    Examples\n    is_valid_IP('1.2.3.4') == True\n    is_valid_IP('123.45.67.89') == True\n    is_valid_IP('1.2.3') == False\n    is_valid_IP('1.2.3.4.5') == False\n    is_valid_IP('') == False\n    \"\"\"\n    if strng == '': return False\n    lst = strng.split('.')\n    if len(lst) != 4: return False\n    for i in range(len(lst)):\n        if not lst[i].isdigit(): return False\n        if int(lst[i]) < 0 or int(lst[i]) > 255: return False\n    return True\n#--------------------------------------------------------------------------------------------------------------------------------------------------\ndef factorial(n):\n    \"\"\"\n    Factorial\n    Given an integer n, return a list with each integer from 1 to n multiplied by n! (n factorial).\n    You can expect positive integer input.\n    Examples:\n    factorial(4) == [1, 2, 6, 24]\n    factorial(1) == [1]\n    \"\"\"\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return [1] + [i for i in range(2, n + 1)] + [res]\n#--------------------------------------------------------------------------------------------------------------------------------------------------\ndef sum_pairs(ints, s):\n    \"\"\"\n    Sum Pairs\n    Given a list of integers and a single sum value, return the first two values (parse from the left please) \n    in order of appearance that add up to form the sum.\n    sum_pairs([11, 3, 7, 5], 10) == [3, 7] or [7, 3]\n    sum_pairs([4, 3, 2, 3, 4], 6) == [4, 2] or [2, 4]\n    sum_pairs(["}
{"task_id": "python/58", "language": "python", "completion": "sum = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            sum = sum * digit\n        n = n / 10\n    return sum\n    \ndef is_perfect(n):\n    \"\"\"Given a positive integer n, return True if n is a perfect number\n    (also known as a perfect sum or a self-dividing number).\n    A perfect number is a positive integer that is equal to the sum of its\n    proper divisors, that is: n = d(n), where d(n) is the sum of the proper\n    divisors of n (not including n itself).\n    Return False if n is not a perfect number.\n    For example:\n    is_perfect(6)  == True  # 6 = 1 + 2 + 3\n    is_perfect(8)  == False # 8 is not a perfect number since it's not equal\n                          # to 1+2+4\n    is_perfect(28) == True  # 28 = 1+2+4+7+14\n    is_perfect(500) == False\n    \"\"\"\n    \n    def d(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        return s\n    \n    if d(n) == n:\n        return True\n    else:\n        return False\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if n is prime, and False\n    otherwise.\n    A prime number is a positive integer with exactly two divisors: 1 and n.\n    Return True if n is prime, and False if n is not prime.\n    For example:\n    is_prime(1)  == False\n    is_prime(2)  == True\n    is_prime(5)  == True\n    is_prime(7)  == True\n    is_prime(11) == True\n    is_prime(12) == False\n    is_prime(14) == False\n    \"\"\"\n    \n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef has_all_digits(n, digits):\n    \"\"\"Given a positive integer n and a string of digits d, return True if n\n    contains all of the digits from d and False otherwise.\n    For example:\n    has_all_digits(123, \"125\") == False\n    has_all_digits(125, \"125\") == True\n    \"\"\"\n    \n    for i in digits:\n        if i not in str(n):\n            return False\n    return True\n    \ndef has_repeated_digit(n):\n    \"\"\"Given a positive integer n, return True if n has a digit that is\n    repeated in its number.\n    For example:\n    has_repeated_digit(1221) == True  # 1 appears twice\n    has_repeated_digit(1212) == False # 1 does not appear twice\n    \"\"\"\n    \n    for i in range(0, 10):\n        if str(n).count(str(i)) > 1:\n            return True\n    return False\n    \ndef is_prime_efficient(n):\n    \"\"\"Given a positive integer n, return True if n is prime, and False\n    otherwise.\n    A prime number is a positive integer with exactly two divisors: 1 and n.\n    Return True if n is prime, and False if n is not prime.\n    You should try to implement an efficient algorithm.\n    \"\"\"\n    \n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef has_even_digit(n):\n    \"\"\"Given a positive integer n, return True if n contains an even number of\n    digits.\n    For example:\n    has_even_digit(123) == True  # 2 digits (1 and 3)\n    has_even_digit(123456789) == True  # 5 digits (2, 4, 6, 8 and 9)\n    has_even_digit(135) == False  # 3 digits (1, 3 and 5)\n    \"\"\"\n    \n    count = 0\n    while n"}
{"task_id": "python/58", "language": "python", "completion": "res = 1\n    while n != 0:\n        res *= n % 10\n        n //= 10\n    return res if res % 2 else 0\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\nprint(digits(1001))\n\n\ndef digits_reversed(n):\n    \"\"\"\n    Reverse the digits of an integer, and return the result.\n    For example:\n    digits_reversed(1)  == 1\n    digits_reversed(4)  == 4\n    digits_reversed(235) == 532\n    \"\"\"\n    res = 0\n    while n != 0:\n        res *= 10\n        res += n % 10\n        n //= 10\n    return res\nprint(digits_reversed(1))\nprint(digits_reversed(4))\nprint(digits_reversed(235))\nprint(digits_reversed(1001))\n\n\ndef is_palindrome(s):\n    \"\"\"\n    Given a string s, return True if s is a palindrome,\n    False otherwise.\n    A palindrome is a word that is spelled the same forwards and backwards.\n    For example:\n    is_palindrome('radar')  == True\n    is_palindrome('victor')  == False\n    is_palindrome('noon')  == True\n    \"\"\"\n    return s == s[::-1]\nprint(is_palindrome('radar'))\nprint(is_palindrome('victor'))\nprint(is_palindrome('noon'))\nprint(is_palindrome('radar1'))\n\n\ndef is_power_of_three(n):\n    \"\"\"\n    Given a positive integer n, return True if n is the power of three,\n    False otherwise.\n    A power of three is a number that can be represented as 3^i,\n    for some integer i > 0, and\n    for any integer x, x/3 is also a power of three.\n    For example:\n    is_power_of_three(27)  == True\n    is_power_of_three(1)  == True\n    is_power_of_three(9)  == True\n    is_power_of_three(8)  == False\n    \"\"\"\n    if n <= 0:\n        return False\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\nprint(is_power_of_three(27))\nprint(is_power_of_three(1))\nprint(is_power_of_three(9))\nprint(is_power_of_three(8))\nprint(is_power_of_three(12))\n\n\ndef is_power_of_five(n):\n    \"\"\"\n    Given a positive integer n, return True if n is the power of five,\n    False otherwise.\n    A power of five is a number that can be represented as 5^i,\n    for some integer i > 0, and\n    for any integer x, x/5 is also a power of five.\n    For example:\n    is_power_of_five(25)  == True\n    is_power_of_five(1)  == True\n    is_power_of_five(15)  == False\n    \"\"\"\n    if n <= 0:\n        return False\n    while n % 5 == 0:\n        n //= 5\n    return n == 1\nprint(is_power_of_five(25))\nprint(is_power_of_five(1))\nprint(is_power_of_five(15))\nprint(is_power_of_five(10))\nprint(is_power_of_five(12))\n\n\ndef is_power_of_ten(n):\n    \"\"\"\n    Given a positive integer n, return True if n is the power of ten,\n    False otherwise.\n    A power of ten is a number that can be represented as 10^i,\n    for some integer i > 0, and\n    for any integer x, x/10 is also a power of ten.\n    For example:\n    is_power_of_ten(10)  == True\n    is_power_of_ten(1)  == True\n    is_power_of_ten(20)  == True\n    is_power_of_ten(15)  == False\n    \"\"\"\n    if n <= 0:\n        return False\n    while n % 10 == 0:\n        n //= 10\n    return n == 1\nprint(is_power_of_ten(10))\nprint(is_power_of_ten(1))\nprint(is_power_of_ten(20))\nprint(is_power_of_ten(15))\nprint(is_power_of_ten(12))\n\n\ndef is_power_of_two(n):\n    \"\"\"\n    Given a positive integer n, return True if n is the power of two,\n    False otherwise.\n    A power of two is a number that can be represented as 2^i,\n    for some integer i > 0, and\n    for any integer x, x/2 is also a power of two.\n    For example:\n    is_power_of_two(25)  == False\n    is_power_of_two(1)  == True\n    is_power_of_two(16)  == True\n    is_power_of_two(15)  == False\n    \"\"\"\n    if n <= 0:\n        return False\n    while n"}
{"task_id": "python/59", "language": "python", "completion": "brackets_stack = []\n    nested_brackets_stack = []\n    \n    for char in string:\n        if char == '[':\n            brackets_stack.append(char)\n            nested_brackets_stack.append(char)\n        elif char == ']':\n            brackets_stack.pop()\n            nested_brackets_stack.pop()\n        else:\n            continue\n    \n    if len(brackets_stack) == 0 and len(nested_brackets_stack) > 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef get_primes(num):\n    '''\n    Create a function that takes a number num and returns a list of prime numbers up to \n    num (not inlcusive).\n\n    get_primes(10) \u279e [2, 3, 5, 7]\n    get_primes(20) \u279e [2, 3, 5, 7, 11, 13, 17, 19]\n    get_primes(30) \u279e [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    '''\n    \n    primes = []\n    for i in range(2, num):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n    \n    \n    \ndef get_mode(lst):\n    '''\n    Create a function that takes a list and returns its mode. If the mode is more than one number, return a list of them. If there is no mode, return None.\n\n    get_mode([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]) \u279e 3\n    get_mode([1, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5]) \u279e [5]\n    get_mode([1, 1, 2, 3, 3, 3, 4, 5]) \u279e [3, 3]\n    get_mode([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3]) \u279e [1, 2, 3]\n    get_mode([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]) \u279e [1, 2, 3, 4]\n    '''\n    \n    mode_dict = {}\n    for i in lst:\n        if i in mode_dict:\n            mode_dict[i] += 1\n        else:\n            mode_dict[i] = 1\n    \n    max_count = 0\n    modes = []\n    for i in mode_dict:\n        if mode_dict[i] > max_count:\n            max_count = mode_dict[i]\n            modes = [i]\n        elif mode_dict[i] == max_count and i not in modes:\n            modes.append(i)\n    \n    return modes\n    \n    \n    \ndef get_index(lst):\n    '''\n    Given an array of ints, return a new list where the value in each index is the index value\n    multiplied by the value at the index in the original list.\n\n    get_index([1, 2, 3, 4, 5]) \u279e [0, 2, 6, 12, 20]\n    get_index([5, 3, 1, -1]) \u279e [0, 0, 1, -1]\n    get_index([]) \u279e []\n    '''\n    \n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i] * i)\n    return res\n    \n    \n    \ndef get_index_new(lst):\n    '''\n    Given an array of ints, return a new list where the value in each index is the index value\n    multiplied by the value at the index in the original list.\n\n    get_index_new([1, 2, 3, 4, 5]) \u279e [0, 2, 6, 12, 20]\n    get_index_new([5, 3, 1, -1]) \u279e [0, 0, 1, -1]\n    get_index_new([]) \u279e []\n    '''\n    \n    if len(lst) == 0:\n        return []\n    else:\n        res = []\n        for i in range(len(lst)):\n            res.append(i * lst[i])\n        return re"}
{"task_id": "python/60", "language": "python", "completion": "return sum(int(pow(i,2)) for i in lst)\n\ndef sum_squares(lst):\n    return sum([int(pow(i, 2)) for i in lst])\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x ** 2, lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(pow(x, 2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x ** 2, lst))\n\ndef sum_squares(lst):\n    return sum([x * x for x in lst])\n\ndef sum_squares(lst):\n    return sum(int(pow(i, 2)) for i in lst)\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x * x, lst))\n\ndef sum_squares(lst):\n    return sum(x ** 2 for x in lst)\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x ** 2, lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x ** 2, lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x * x, lst))\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(x * x for x in lst)\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x * x, lst))\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(x * x for x in lst)\n\ndef sum_squares(lst):\n    return sum(x * x for x in lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(x * x for x in lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(x * x for x in lst)\n\ndef sum_squares(lst):\n    return sum(x ** 2 for x in lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x * x, lst))\n\ndef sum_squares(lst):\n    return sum(x * x for x in lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst * lst)\n\ndef sum_squares(lst):\n    return sum(lst *"}
{"task_id": "python/60", "language": "python", "completion": "# Your code goes here\n    lst1 = list(map(lambda x: int(x) + 1, lst))\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + (lst1[i] * lst1[i])\n    return sum\n\n\nlst1 = [1, 4, 9]\nprint(sum_squares(lst1))\n\ndef is_leap_year(year):\n    \"\"\"\n    You are given a year as input, \n    you need to return True if the year is a leap year or False if it is not. \n    Leap year rules:\n    1. A year should be divisible by 4, unless it is divisible by 100.\n    2. However, if it is also divisible by 100, then it should be divisible by 400.\n    \"\"\"\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\n\nyear = 2000\nprint(is_leap_year(year))\n\n\ndef fibonacci(n):\n    \"\"\"\n    You are given a number as input, \n    you need to return the nth number of fibonacci sequence. \n    The nth number of fibonacci sequence is the sum of its previous 2 numbers.\n    Examples:\n    For n = 1 the output should be 0\n    For n = 2 the output should be 1\n    For n = 3 the output should be 1\n    For n = 4 the output should be 2\n    For n = 5 the output should be 3\n    For n = 6 the output should be 5\n    For n = 7 the output should be 8\n    For n = 8 the output should be 13\n    For n = 9 the output should be 21\n    For n = 10 the output should be 34\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\nn = 1\nprint(fibonacci(n))\n\n\n\ndef is_pangram(s):\n    \"\"\"\n    You are given a string as input, \n    you need to return True if it is pangram or False if it is not.\n    Pangram definition:\n    1. A pangram is a sentence where every letter of the alphabet is used at least once.\n    Examples:\n    For s = \"The quick brown fox jumps over the lazy dog\" the output should be True\n    For s = \"The quick brown fox jumps over the lazy cat\" the output should be False\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for c in alphabet:\n        if c not in s.lower():\n            return False\n    return True\n\n\ns = \"The quick brown fox jumps over the lazy dog\"\nprint(is_pangram(s))\n\n\ndef is_valid_parentheses(s):\n    \"\"\"\n    You are given a string as input, \n    you need to return True if it is valid parentheses or False if it is not.\n    Valid parentheses definition:\n    1. Each opening ( must have exactly one closing )\n    2. Each closing ) must have a corresponding opening (\n    Examples:\n    For s = \"([])[]({})\" the output should be True\n    For s = \"([)[]({})\" the output should be False\n    For s = \"(({[]}))()\" the output should be True\n    For s = \"({[]}))\" the output should be False\n    For s = \"({[]})()\" the output should be True\n    \"\"\"\n    if s == \"\":\n        return True\n    if s[0] == \")\" or s[-1] == \"(\":\n        return False\n    if s[0] == \"(\" and s[-1] == \")\":\n        return is_valid_parentheses(s[1:-1])\n    else:\n        return is_valid_parentheses(s[1:]) or is_valid_parentheses(s[:-1])\n\n\ns = \"([])[]({})\"\nprint(is_valid_parentheses(s))\n\ndef is_valid_parentheses(s):\n    \"\"\"\n    You are given a string as input, \n    you need to return True if it is valid parentheses or False if it is not.\n    Valid parentheses definition:\n    1. Each opening ( must have exactly one closing )\n    2. Each closing ) must have a corresponding opening (\n    Examples:\n    For s = \"([])[]({})\" the outpu"}
{"task_id": "python/61", "language": "python", "completion": "lst=txt.split()\n    lst2=[]\n    for i in lst:\n        lst2.append(i[-1])\n    for i in lst2:\n        if i.isalpha():\n            return True\n        else:\n            return False\n    \nprint(check_if_last_char_is_a_letter(\"apple pie\"))\n\ndef get_middle_three_characters(txt):\n    '''\n    Create a function that takes a string and returns the middle\n    three characters.\n\n    Examples:\n    get_middle_three_characters(\"abcdef\") \u279e \"bcd\"\n    get_middle_three_characters(\"abcdefgh\") \u279e \"cde\"\n    get_middle_three_characters(\"abcdefghi\") \u279e \"cde\"\n    get_middle_three_characters(\"abcdefghij\") \u279e \"def\"\n    '''\n    mid=len(txt)//2\n    return txt[mid-1:mid+2]\n\nprint(get_middle_three_characters(\"abcdef\"))\n\ndef is_valid_hex_code(txt):\n    '''\n    Create a function that takes a string of hex code and\n    checks if it is a valid hex code. A valid hex code must\n    have exactly 6 characters, and each character must be\n    either a hexadecimal number between 0-9 or an alphabetic\n    character between a-f.\n\n    Examples:\n    is_valid_hex_code(\"#CD5C5C\") \u279e True\n    is_valid_hex_code(\"#EAECEE\") \u279e True\n    is_valid_hex_code(\"#eaecee\") \u279e True\n    is_valid_hex_code(\"#CD5C58C\") \u279e False\n    is_valid_hex_code(\"#CD5C5Z\") \u279e False\n    is_valid_hex_code(\"#CD5C&C\") \u279e False\n    is_valid_hex_code(\"#CD5C5C\") \u279e False\n    '''\n    if len(txt) != 7 or txt[0] != \"#\":\n        return False\n    for i in range(1, len(txt)):\n        if not (txt[i].isdigit() or (txt[i].isalpha() and txt[i].lower() >= \"a\" and txt[i].lower() <= \"f\")):\n            return False\n    return True\n\nprint(is_valid_hex_code(\"#CD5C5C\"))\n\ndef concatenate_same_letters(txt):\n    '''\n    Create a function that takes a string and concatenate\n    each group of consecutive letters as long as the group\n    size is greater than 2. Return \"Empty\" if there are no\n    groups of consecutive letters.\n\n    Examples:\n    concatenate_same_letters(\"abbbcdddeeeeedcba\") \u279e \"abcd\"\n    concatenate_same_letters(\"Hello\") \u279e \"Empty\"\n    concatenate_same_letters(\"He1o\") \u279e \"Empty\"\n    concatenate_same_letters(\"H1e2l1l2o\") \u279e \"Empty\"\n    concatenate_same_letters(\"abbc\") \u279e \"Empty\"\n    '''\n    lst=txt.split()\n    lst2=[]\n    for i in lst:\n        count=0\n        for j in i:\n            if j.isalpha():\n                count+=1\n            else:\n                break\n        if count>=2:\n            lst2.append(i)\n    return \" \".join(lst2)\n        \n    \nprint(concatenate_same_letters(\"abbbcdddeeeeedcba\"))\n\ndef get_domain_name(txt):\n    '''\n    Create a function that takes an URL string and returns the\n    domain name.\n\n    Examples:\n    get_domain_name(\"http://www.zombie-bites.com\") \u279e \"zombie-bites\"\n    get_domain_name(\"https://www.cnet.com\") \u279e \"cnet\"\n    get_domain_name(\"https://www.cnet.com\") \u279e \"cnet\"\n    get_domain_name(\"https://youtube.com\") \u279e \"youtube\"\n    get_domain_name(\"www.google.com\") \u279e \"google\"\n    get_domain_name(\"www.xakep.ru\") \u279e \"xakep\"\n    get_domain_name(\"https://youtube-comedy.com\") \u279e \"youtube-comedy\"\n    '''\n    return txt.split(\"www.\")[-1].split(\".com\")[0]\n\nprint(get_domain_name(\"http://www.zombie-bites.com\"))\n\ndef count_spec_digits(nums, digits):\n    '''\n    Create a function that takes two lists of integers and\n    returns a list containing the number of times each digit\n    in the second l"}
{"task_id": "python/61", "language": "python", "completion": "txt_list = txt.split(' ')\n    txt_list = txt_list[:-1]\n    txt_list = txt_list[-1].strip()\n    txt_list = txt_list[::-1]\n    if txt_list == '':\n        return False\n    else:\n        if txt_list[-1].isalpha():\n            return True\n        else:\n            return False\n\n\ndef test_check_if_last_char_is_a_letter(txt):\n    if check_if_last_char_is_a_letter(txt) is True:\n        print(txt, \"\u279e True\")\n    else:\n        print(txt, \"\u279e False\")\n\n\ntest_check_if_last_char_is_a_letter(\"apple pie\")\ntest_check_if_last_char_is_a_letter(\"apple pi e\")\ntest_check_if_last_char_is_a_letter(\"apple pi e \")\ntest_check_if_last_char_is_a_letter(\"\")\ntest_check_if_last_char_is_a_letter(\"a\")\n\n\ndef sum_of_digits(n):\n    '''\n    Create a function that takes an integer and returns the sum of the cubes of its digits.\n    Examples:\n    sum_of_digits(1) \u279e 1\n    sum_of_digits(9) \u279e 9 ** 3 = 729\n    sum_of_digits(10) \u279e 1 ** 3 + 0 ** 3 = 1\n    sum_of_digits(90) \u279e 9 ** 3 + 0 ** 3 = 729\n    '''\n    num_str = str(n)\n    num_list = []\n    sum_cube = 0\n    for i in num_str:\n        num_list.append(i)\n    for i in num_list:\n        sum_cube += int(i) ** 3\n    return sum_cube\n\n\ndef test_sum_of_digits(n):\n    print(n, \"\u279e\", sum_of_digits(n))\n\n\ntest_sum_of_digits(1)\ntest_sum_of_digits(9)\ntest_sum_of_digits(10)\ntest_sum_of_digits(90)\n\n\ndef is_palindrome(txt):\n    '''\n    Create a function that takes a string and returns True if it's a palindrome \n    or False if not.\n    Examples:\n    is_palindrome(\"madam\") \u279e True\n    is_palindrome(\"test\") \u279e False\n    is_palindrome(\"racecar\") \u279e True\n    '''\n    txt_list = []\n    txt_list.extend(txt.replace(' ', ''))\n    txt_list = txt_list[::-1]\n    txt_list = ''.join(txt_list)\n    if txt == txt_list:\n        return True\n    else:\n        return False\n\n\ndef test_is_palindrome(txt):\n    print(txt, \"\u279e\", is_palindrome(txt))\n\n\ntest_is_palindrome(\"madam\")\ntest_is_palindrome(\"test\")\ntest_is_palindrome(\"racecar\")\n\n\ndef convert_to_hex(n):\n    '''\n    Create a function that takes an integer and returns a string of its hexadecimal representation.\n    Examples:\n    convert_to_hex(25) \u279e \"19\"\n    convert_to_hex(100) \u279e \"64\"\n    convert_to_hex(255) \u279e \"ff\"\n    '''\n    hex_num = hex(n).replace(\"0x\", '')\n    return hex_num\n\n\ndef test_convert_to_hex(n):\n    print(n, \"\u279e\", convert_to_hex(n))\n\n\ntest_convert_to_hex(25)\ntest_convert_to_hex(100)\ntest_convert_to_hex(255)\n\n\ndef create_list(n, txt):\n    '''\n    Create a function that takes a number (n) and a string (txt) as arguments and returns a list filled with \n    the same text as many times as the given number (n) shows in the examples.\n    Examples:\n    create_list(6, \"hi\") \u279e [\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"]\n    create_list(3, \"apple\") \u279e [\"apple\", \"apple\", \"apple\"]\n    create_list(1, \"hi\") \u279e [\"hi\"]\n    '''\n    lst = []\n    for i in range(n):\n        lst.append(txt)\n    return lst\n\n\ndef test_create_list(n, txt):\n    print(n, \",\", txt, \"\u279e\", create_list(n, txt))\n\n\ntest_create_list(6, \"hi\")\ntest_create_list(3, \"apple\")\ntest_create_list(1, \"hi\")\n\n\ndef add_arrays(arr1, arr2):\n    '''\n    Create a function that takes two arrays and returns True if the two arrays sum to the same number, \n    otherwise return False.\n    Examples:\n    add_arrays([1, 1, 1], [1, 1, 1]) \u279e True\n    add_arrays([1, 1, 1], [2, 2, 2]) \u279e False\n    add_arrays([1, 1, 1], [2]) \u279e False\n    '''\n    arr1_sum = 0\n    for i in range(len(arr1)):\n        arr1_sum += arr1[i]\n    arr2_sum = 0\n    for i in range(len(arr2)):\n        arr2_sum += arr2[i]\n    if arr1_sum == arr2_sum:\n        return True\n    else:\n        return False\n\n\ndef test_add_arrays(arr1, arr2):\n    print(arr1, \",\", arr2, \"\u279e\", add_arrays(arr1, arr2))\n\n\ntest_add_arrays([1, 1, 1], [1, 1, 1])\ntest_add_arrays([1, 1, 1], [2, 2, 2])\ntest_add_arrays([1, 1, 1], [2])\n\n\ndef create_array(n, txt):\n    '''\n    Create a function that takes an integer n and a string s as arguments, \n    then returns a 2D a"}
{"task_id": "python/62", "language": "python", "completion": "arr = arr.copy()\n    arr.sort()\n    arr = arr[::-1]\n\n    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]:\n            return i + 1\n\n    return -1\n\n\ndef test_can_arrange():\n    \"\"\"Tests for function 'can_arrange'.\n    \"\"\"\n    assert can_arrange([]) == -1\n    assert can_arrange([1, 2, 3, 4, 5]) == 4\n    assert can_arrange([1, 2, 3, 2, 1, 1, 2, 2]) == -1\n    assert can_arrange([1, 2, 3, 2, 3, 1, 1, 2, 2, 1, 1, 1, 2, 3, 3]) == -1\n    print(\"Tests for function 'can_arrange' passed!\")\n\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n    arr = [1, 2, 3, 4, 5]\n    result = can_arrange(arr)\n    print(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    test_can_arrange()\n    main()\n\ndef find_missing_numbers(arr):\n    \"\"\"Implement function 'find_missing_numbers' which takes an array of\n    unique numbers in ascending order and returns a list of all the missing\n    numbers in the sequence. The function should return an empty list if\n    there are no missing numbers in the given array.\n\n    Examples:\n    find_missing_numbers([1, 2, 3, 4, 6, 7, 8, 10]) = [5, 9]\n    find_missing_numbers([1, 3, 4, 2]) = [5]\n    \"\"\"\n    result = []\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] != 1:\n            result.append(arr[i] + 1)\n    return result\n\n\ndef test_find_missing_numbers():\n    \"\"\"Tests for function 'find_missing_numbers'.\n    \"\"\"\n    assert find_missing_numbers([]) == []\n    assert find_missing_numbers([1, 2, 3, 4, 6, 7, 8, 10]) == [5, 9]\n    assert find_missing_numbers([1, 3, 4, 2]) == [5]\n    print(\"Tests for function 'find_missing_numbers' passed!\")\n\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n    arr = [1, 2, 3, 4, 6, 7, 8, 10]\n    result = find_missing_numbers(arr)\n    print(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    test_find_missing_numbers()\n    main()\n\ndef sum_of_pairs(arr, k):\n    \"\"\"Implement function 'sum_of_pairs' which takes an array of unique numbers\n    and an integer 'k'. The function should return a tuple containing two elements\n    from the array whose sum is equal to 'k' and None if no such two elements\n    can be found.\n\n    Examples:\n    sum_of_pairs([1, 2, 4, 4], 8) = (2, 6)\n    sum_of_pairs([1, 2, 3, 4], 5) = (2, 3)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                result.append((arr[i], arr[j]))\n    if len(result) == 0:\n        return None\n    return result[0]\n\n\ndef test_sum_of_pairs():\n    \"\"\"Tests for function 'sum_of_pairs'.\n    \"\"\"\n    assert sum_of_pairs([], 8) is None\n    assert sum_of_pairs([1, 2, 3, 4], 5) is None\n    assert sum_of_pairs([1, 2, 3, 4], 6) is None\n    assert sum_of_pairs([1, 2, 3, 4], 3) == (1, 1)\n    assert sum_of_pairs([1, 2, 3, 4], 4) == (1, 3)\n    assert sum_of_pairs([1, 2, 3, 4], 5) == (2, 3)\n    assert sum_of_pairs([1, 2, 3, 4], 8) == (2, 6)\n    assert sum_of_pairs([1, 2, 3, 4, 3, 5, 6, 2, 2, 5, 4, 3], 7) == (3, 4)\n    print(\"Tests for function 'sum_of_pairs' passed!\")\n\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n    arr = [1, 2, 3, 4, 3, 5, 6, 2, 2, 5, 4, 3]\n    k = 7\n    result = sum_of_pairs(arr, k)\n    print(arr)\n    print(k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    test_sum_of_pairs()\n    main()\n\ndef find_second_max(arr):\n    \"\"\"Implement function 'find_second_max' which takes a non-empty array of\n    unique numbers and returns the second-highest number in the array. The\n    function should return None if the array contains less than two elements.\n\n    Examples:\n    find_second_max([1, 2, 3, 4]) = 3\n    find_second_max([1, 1, 2, 3, 4]) = 3\n    find_second_max([1, 1, 2, 3, 3, 4]) = 3\n    find_second_max([1, 2, 3, 4, 3, 3]) = 3\n    find_second_max([1, 1, 3, 3, 4, 3]) = None\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    second_max = None\n    for i in range(len(arr)):\n        if arr[i] > arr[0]:\n            if second_max is None or arr[i] > second_max:\n                second_max = arr[i]\n    return second_max\n\n\ndef test_find_second_max():\n    \"\"\"Tests for function 'find_second_max'.\n    \"\"\"\n    assert find_second_max([]) is None\n    assert find_second_max([1, 1, 2, 3, 4]) == 3\n    assert find_second_max([1, 1, 2, 3, 3, 4]) == 3\n    assert find_second_max([1, 2, 3, 4, 3, 3]) == 3\n    assert find_second_max([1, 1, 3, 3, 4, 3]) == 3\n    prin"}
{"task_id": "python/62", "language": "python", "completion": "arr = sorted(arr, reverse=True)\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "smallest_integer = None\n    largest_integer = None\n    for num in lst:\n        if num < 0 and (smallest_integer is None or num > smallest_integer):\n            smallest_integer = num\n        elif num > 0 and (largest_integer is None or num < largest_integer):\n            largest_integer = num\n    return (smallest_integer, largest_integer)\n\n# Test the function\nlst1 = [2, 4, 1, 3, 5, 7]\nlst2 = []\nlst3 = [0]\n\nassert largest_smallest_integers(lst1) == (None, 1)\nassert largest_smallest_integers(lst2) == (None, None)\nassert largest_smallest_integers(lst3) == (None, None)\n\nprint(\"All tests passed!\")\n\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest_integer = None\n    largest_integer = None\n    for num in lst:\n        if num < 0 and (smallest_integer is None or num > smallest_integer):\n            smallest_integer = num\n        elif num > 0 and (largest_integer is None or num < largest_integer):\n            largest_integer = num\n    return (smallest_integer, largest_integer)\n\n# Test the function\nlst1 = [2, 4, 1, 3, 5, 7]\nlst2 = []\nlst3 = [0]\n\nassert largest_smallest_integers(lst1) == (None, 1)\nassert largest_smallest_integers(lst2) == (None, None)\nassert largest_smallest_integers(lst3) == (None, None)\n\nprint(\"All tests passed!\")\n\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest_integer = None\n    largest_integer = None\n    for num in lst:\n        if num < 0 and (smallest_integer is None or num > smallest_integer):\n            smallest_integer = num\n        elif"}
{"task_id": "python/63", "language": "python", "completion": "neg_int, pos_int = None, None\n    for num in lst:\n        if num < 0 and (neg_int is None or neg_int > num):\n            neg_int = num\n        elif num > 0 and (pos_int is None or pos_int < num):\n            pos_int = num\n    return (neg_int, pos_int)\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_int, pos_int = None, None\n    for num in lst:\n        if num < 0 and (neg_int is None or neg_int > num):\n            neg_int = num\n        elif num > 0 and (pos_int is None or pos_int < num):\n            pos_int = num\n    return (neg_int, pos_int)\n\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_int, pos_int = None, None\n    for num in lst:\n        if num < 0 and (neg_int is None or neg_int > num):\n            neg_int = num\n        elif num > 0 and (pos_int is None or pos_int < num):\n            pos_int = num\n    return (neg_int, pos_int)\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_int, pos_int = None, None\n    for num in lst:\n        if num < 0 and (neg_int is None or neg_int > num):\n            neg_int = num\n        elif num > 0 and (pos_int is None or pos_int < num):\n            pos_int = num\n    return (neg_int, pos_int)\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_int, pos_int = None,"}
{"task_id": "python/64", "language": "python", "completion": "if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n    # TODO: Implement this function\n    raise NotImplementedError()\n\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n    # TODO: Implement this function\n    raise NotImplementedError()\n\n\ndef brazilian_special_factorial(n):\n    \"\"\"The Brazilian special factorial is defined as:\n    brazilian_special_factorial(n) = n! / (n-1)! / (n-2)! / ... / 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_special_factorial(4)\n    96\n\n    The function will receive an integer as input and should return the brazilian\n    special factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * special_factorial(n-1) / (n-1)\n    # TODO: Implement this function\n    raise NotImplementedError()\n\n\ndef brazilian_special_factorial_inverse(n):\n    \"\"\"The Brazilian special factorial inverse is defined as:\n    brazilian_special_factorial_inverse(n) = n! / (n-1)! / (n-2)! / ... / 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_special_factorial_inverse(4)\n    4\n\n    The function will receive an integer as input and should return the brazilian\n    special factorial inverse of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * special_factorial(n-1) / (n-1)\n    # TODO: Implement this function\n    raise NotImplementedError()\n\n\nif __name__"}
{"task_id": "python/64", "language": "python", "completion": "special_factorial_n = 1\n    for i in range(1, n + 1):\n        special_factorial_n *= n\n        n -= 1\n    return special_factorial_n\n\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= i\n    return factorial_n\n\n\ndef brazilian_factorial_of_string(string):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial_of_string('4')\n    288\n\n    The function will receive an string as input and should return the brazilian\n    factorial of this string.\n    \"\"\"\n    string_factorial_n = 1\n    for i in string:\n        string_factorial_n *= int(i)\n    return string_factorial_n\n\n\ndef brazilian_factorial_of_special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial_of_special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= special_factorial(n)\n        n -= 1\n    return factorial_n\n\n\ndef brazilian_factorial_of_brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial_of_brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= brazilian_factorial(n)\n        n -= 1\n    return factorial_n\n\n\ndef brazilian_factorial_of_brazilian_factorial_string(string):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial_of_brazilian_factorial_string('4')\n    288\n\n    The function will receive an string as input and should return the brazilian\n    factorial of this string.\n    \"\"\"\n    string_factorial_n = 1\n    for i in string:\n        string_factorial_n *= int("}
{"task_id": "python/65", "language": "python", "completion": "pass\n\n\ndef count_chars(input_string):\n    \"\"\"\n    You are given a string,\n    you have to return a dictionary containing counts of each character in the string.\n\n    Example 1:\n        Input: string = \"abracadabra\"\n        Output: {'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1}\n\n    Example 2:\n        Input: string = \"abracadabra\"\n        Output: {'a': 5, 'b': 2, 'c': 1, 'r': 2, 'd': 1}\n\n    Constraints:\n        * len(string) <= 100\n        * string contains only letters\n    \"\"\"\n    pass\n\n\ndef lcm(a, b):\n    \"\"\"\n    Write a function lcm that takes two positive integers a and b as input and returns the LCM (least common multiple) of the numbers a and b.\n\n    Input:\n        lcm(5, 12) -> 12\n        lcm(1, 1) -> 1\n        lcm(5, 3) -> 15\n\n    Constraints:\n        * a and b are positive integers\n    \"\"\"\n    pass\n\n\ndef lcm_list(list_of_nums):\n    \"\"\"\n    Write a function lcm_list that takes a list of positive integers as input and returns the LCM (least common multiple) of all the numbers in the list.\n\n    Input:\n        lcm_list([1, 2, 3]) -> 6\n        lcm_list([1, 2, 3, 4, 5]) -> 60\n        lcm_list([1, 2, 3, 4, 5, 6]) -> 720\n        lcm_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 2520\n\n    Constraints:\n        * len(list_of_nums) > 0\n        * all(num > 0 for num in list_of_nums)\n    \"\"\"\n    pass\n\n\ndef lcm_all_nums(nums):\n    \"\"\"\n    Write a function lcm_all_nums that takes a variable number of positive integers as input and returns the LCM (least common multiple) of all the numbers in the list.\n\n    Input:\n        lcm_all_nums(1, 2, 3) -> 6\n        lcm_all_nums(1, 2, 3, 4, 5) -> 60\n        lcm_all_nums(1, 2, 3, 4, 5, 6) -> 720\n        lcm_all_nums(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) -> 2520\n\n    Constraints:\n        * len(nums) > 0\n        * all(num > 0 for num in nums)\n    \"\"\"\n    pass\n\n\ndef lcm_dict_values(d):\n    \"\"\"\n    Write a function lcm_dict_values that takes a dictionary of key-value pairs where the keys are strings and the values are positive integers as input and returns the LCM (least common multiple) of all the values in the dictionary.\n\n    Input:\n        lcm_dict_values({\"a\": 2, \"b\": 3, \"c\": 4}) -> 12\n        lcm_dict_values({\"a\": 2, \"b\": 3, \"c\": 4, \"d\": 5, \"e\": 6}) -> 720\n        lcm_dict_values({\"a\": 2, \"b\": 3, \"c\": 4, \"d\": 5, \"e\": 6, \"f\": 7, \"g\": 8, \"h\": 9, \"i\": 10}) -> 2520\n\n    Constraints:\n        * len(d) > 0\n        * all(isinstance(v, int) for v in d.values())\n    \"\"\"\n    pass\n\n\ndef lcm_all_dict_values("}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n        return all(n % i for i in range(2, n))\n    return \" \".join(w for w in sentence.split() if is_prime(len(w)))\n\n\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"Lets go for a swim\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"lets g"}
{"task_id": "python/66", "language": "python", "completion": "# write your code here\n    \n    num, denom = x.split(\"/\")\n    nnum, ndenom = n.split(\"/\")\n    \n    num, denom, nnum, ndenom = int(num), int(denom), int(nnum), int(ndenom)\n    \n    \n    while denom % ndenom != 0 or num % ndenom != 0:\n        num, denom, nnum, ndenom = denom, num % denom, ndenom, nnum % ndenom\n        \n    num = num / denom\n    nnum = nnum / ndenom\n    \n    \n    if num % nnum == 0:\n        return True\n    return False\n    \nsimplify(\"1/5\", \"5/1\")\n\nsimplify(\"1/6\", \"2/1\") \n\nsimplify(\"7/10\", \"10/2\")\n\n\ndef sum_primes(n):\n    \"\"\"Your task is to implement the function sum_primes that will return the sum of all prime numbers smaller than n.\n\n    sum_primes(10) = 17\n    sum_primes(20) = 37\n    \"\"\"\n    \n    # write your code here\n    primes = []\n    for i in range(2, n):\n        isPrime = True\n        for x in range(2, i):\n            if i % x == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(i)\n    \n    return sum(primes)\n    \nsum_primes(10)\n\nsum_primes(20) \n\nsum_primes(100) \n\n\ndef nth_fib(n):\n    \"\"\"Your task is to implement the function nth_fib, which returns the nth Fibonacci number.\n\n    nth_fib(0) = 0\n    nth_fib(1) = 1\n    nth_fib(2) = 1\n    nth_fib(3) = 2\n    nth_fib(4) = 3\n    nth_fib(5) = 5\n    nth_fib(6) = 8\n    nth_fib(7) = 13\n    nth_fib(8) = 21\n    nth_fib(9) = 34\n    nth_fib(10) = 55\n    nth_fib(11) = 89\n    nth_fib(12) = 144\n    nth_fib(13) = 233\n    nth_fib(14) = 377\n    nth_fib(15) = 610\n    nth_fib(16) = 987\n    nth_fib(17) = 1597\n    nth_fib(18) = 2584\n    nth_fib(19) = 4181\n    nth_fib(20) = 6765\n    nth_fib(30) = 832040\n    nth_fib(40) = 102334155\n    nth_fib(50) = 12586269025\n    nth_fib(60) = 1548008755920\n    nth_fib(70) = 190392490709135\n    nth_fib(80) = 2336321261195112764\n    nth_fib(90) = 2855712097244175\n    nth_fib(100) = 373670284550604\n    nth_fib(110) = 5102295234688913779\n    nth_fib(120) = 6779107095901749\n    nth_fib(130) = 101023016313727145\n    nth_fib(140) = 152110665389235291\n    nth_fib(150) = 2133477176077974255\n    nth_fib(160) = 3204541157094250248\n    nth_fib(170) = 4845634902275356916\n    nth_fib(180) = 7401276761756671123\n    nth_fib(190) = 11286767491159577118\n    nth_fib(200) = 1711715982916099792\n    nth_fib(210) = 27381552557079096565\n    nth_fib(220) = 41050567456389859462\n    nth_fib(230) = 63650747643494440526\n    nth_fib(240) = 1000000000000000000\n    nth_fib(250) = 15000000000000000000\n    nth_fib(260) = 250000000000000000000\n    nth_fib(270) = 400000000000000000000\n    nth_fib(280) = 6500000000000000000000\n    nth_fib(290) = 10000000000000000000000\n    nth_fib(300) = 150000000000000000000000\n    nth_fib(310) = 2500000000000000000000000\n    nth_fib(320) = 40000000000000000000000000\n    nth_fib(330) = 650000000000000000000000000\n    nth_fib(340) = 1000000000000000000000000000\n    nth_fib(350) = 15000000000000000000000000000\n    nth_fib(360) = 250000000000000000000000000000\n    nth_fib(370) = 4000000000000000000000000000000\n    nth_fib(380) = 65000000000000000000000000000000\n    nth_fib(390) = 10000000000000000000000000000000"}
{"task_id": "python/66", "language": "python", "completion": "if n == \"1/1\":\n        return True\n    numerator, denominator = int(x), int(n)\n    if numerator == denominator or numerator * denominator in [1, -1]:\n        return True\n    return False\n\n\ndef test():\n    \"\"\"Test function simplify\"\"\"\n    print(simplify(\"1/5\", \"5/1\"))\n    print(simplify(\"1/6\", \"2/1\"))\n    print(simplify(\"7/10\", \"10/2\"))\n    print(simplify(\"1/1\", \"1/1\"))\n\n    print(\"all tests passed\")\n\nif __name__"}
{"task_id": "python/67", "language": "python", "completion": "nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    return nums_sorted\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their d"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return nums\n\n    nums_sum = [(num, num // 10 + num % 10) for num in nums]\n    nums_sum.sort(key=lambda tup: (tup[1], tup[0]))\n    return [tup[0] for tup in nums_sum]\n\n\ndef test_order_by_points():\n    \"\"\"\n    >>> test_order_by_points()\n    \"\"\"\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))\n\n\nif __name__ == '__main__':\n    test_order_by_points()"}
{"task_id": "python/68", "language": "python", "completion": "# Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n    \ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in nums:\n        if (i > 10 and i % 2 == 1):\n            count += 1\n    return c"}
{"task_id": "python/68", "language": "python", "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n    pass\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n    pass\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n    pass\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n    pass\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n    pass\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit"}
{"task_id": "python/69", "language": "python", "completion": "from itertools import combinations\n    def is_multiple(n, m):\n        if (n % m == 0):\n            return True\n        return False\n    def is_sum_multiple(n, m):\n        if ((n + m) % 3 == 0):\n            return True\n        return False\n    def is_triple(n):\n        if ((n - 1) % 3 == 0):\n            return True\n        return False\n    comb = combinations(range(1, n + 1), 3)\n    res = 0\n    for x, y, z in comb:\n        if is_triple(x) and is_triple(y) and is_triple(z) and is_sum_multiple(x, y) and is_sum_multiple(y, z) and is_sum_multiple(z, x):\n            res += 1\n    return res\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    from itertools import combinations\n    def is_multiple(n, m):\n        if (n % m == 0):\n            return True\n        return False\n    def is_sum_multiple(n, m):\n        if ((n + m) % 3 == 0):\n            return True\n        return False\n    def is_triple(n):\n        if ((n - 1) % 3 == 0):\n            return True\n        return False\n    comb = combinations(range(1, n + 1), 3)\n    res = 0\n    for x, y, z in comb:\n        if is_triple(x) and is_triple(y) and is_triple(z) and is_sum_multiple(x, y) and is_sum_multiple(y, z) and is_sum_multiple(z, x):\n            res += 1\n    return res\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    from itertools import combinations\n    def is_multiple(n, m):\n        if (n % m == 0):\n            return True\n        return False\n    def is_sum_multiple(n, m):\n        if ((n + m) % 3 == 0):\n            return True\n        return False\n    def is_triple(n):\n        if ((n - 1) % 3 == 0):\n            return True\n        return False\n    comb = combinations(range(1, n + 1), 3)\n    res = 0\n    for x, y, z in comb:\n        if is_triple(x) and is_triple(y) and is_triple(z) and is_sum_multiple(x, y) and is_sum_multiple(y, z) and is_sum_multiple(z, x):\n            res += 1\n    return res\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    from itertools import combinations\n    def is_multiple(n, m):\n        if (n % m == 0):\n            return True\n        return False\n    def is_sum_multiple(n, m):\n        if ((n + m) % 3 == 0):\n            return True\n        return False\n    def is_triple(n):\n        if ((n - 1) % 3 == 0):\n            return True\n        return False\n    comb = combinations(range(1, n + 1), 3)\n    res = 0\n    for x, y, z in comb:\n        if is_triple(x) and is_triple(y) and is_triple(z) and is_sum_multiple(x, y) and is_sum_multiple(y, z) and is_sum_multiple(z, x):\n            res += 1\n    return res\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    from ite"}
{"task_id": "python/69", "language": "python", "completion": "if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k])"}
{"task_id": "python/70", "language": "python", "completion": "planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]\n    for planet in planets:\n        if planet != planet1 and planet != planet2:\n            planets.remove(planet)\n    planets.remove(planet1)\n    planets.remove(planet2)\n    for i in planets:\n        if planet1[0] != i[0]:\n            planets.remove(i)\n        if planet2[0] != i[0]:\n            planets.remove(i)\n    return tuple(planets)\n\n\ndef bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]\n    for i in planets:\n        if planet1[0] != i[0]:\n            planets.remove(i)\n    for i in planets:\n        if planet2[0] != i[0]:\n            planets.remove(i)\n    planets.remove(planet1)\n    planets.remove(planet2)\n    return tuple(planets)\n\n\ndef bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the pro"}
{"task_id": "python/70", "language": "python", "completion": "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    planets_betwee"}
{"task_id": "python/72", "language": "python", "completion": "sum_of_squares = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        if num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n    \n    \ndef is_prime(num):\n    '''\n    Determine if a number is prime.\n    \n    is_prime(0) == False\n    is_prime(1) == False\n    is_prime(2) == True\n    is_prime(3) == True\n    is_prime(4) == False\n    is_prime(5) == True\n    is_prime(6) == False\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(num):\n    '''\n    Given a positive integer, return the sum of its digits.\n    \n    sum_of_digits(10) == 1\n    sum_of_digits(493193) == 4\n    sum_of_digits(2017) == 9\n    sum_of_digits(0) == 0\n    '''\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n\n\ndef count_vowels(string):\n    '''\n    Given a lowercase string, return the number of vowels in the string.\n    \n    count_vowels(\"why\") == 1\n    count_vowels(\"what\") == 2\n    count_vowels(\"hello\") == 2\n    count_vowels(\"whoah!\") == 2\n    count_vowels(\"\") == 0\n    '''\n    vowel_count = 0\n    for char in string:\n        if char in \"aeiou\":\n            vowel_count += 1\n    return vowel_count\n\n\ndef factorial(num):\n    '''\n    Given a positive integer, return its factorial.\n    \n    factorial(0) == 1\n    factorial(1) == 1\n    factorial(2) == 2\n    factorial(3) == 6\n    factorial(4) == 24\n    '''\n    factorial_value = 1\n    for i in range(1, num + 1):\n        factorial_value *= i\n    return factorial_value\n\n\n\ndef square_root(num):\n    '''\n    Given a positive integer, return its square root.\n    \n    square_root(1) == 1\n    square_root(4) == 2\n    square_root(25) == 5\n    square_root(0) == 0\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    low = 0\n    high = num\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == num:\n            return mid\n        elif mid * mid > num:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return mid + 1\n\n\ndef fibonacci(n):\n    '''\n    Given a positive integer, return the nth Fibonacci number.\n    \n    fibonacci(0) == 0\n    fibonacci(1) == 1\n    fibonacci(2) == 1\n    fibonacci(3) == 2\n    fibonacci(4) == 3\n    fibonacci(10) == 55\n    fibonacci(20) == 6765\n    fibonacci(50) == 12586269025\n    '''\n    if n == 0 or n == 1:\n        return n\n    prev_prev, prev = 0, 1\n    for i in range(2, n + 1):\n        current = prev + prev_prev\n        prev_prev, prev = prev, current\n    return current\n\n\n\ndef factorial_recursive(num):\n    '''\n    Given a positive integer, return its factorial.\n    \n    factorial(0) == 1\n    factorial(1) == 1\n    factorial(2) == 2\n    factorial(3) == 6\n    factorial(4) == 24\n    '''\n    if num == 0 or num == 1:\n        return 1\n    return num * factorial_recursive(num - 1)\n\n\ndef is_palindrome(string):\n    '''\n    Given a lowercase string, return whether it is a palindrome.\n    \n    is_palindrome(\"abcda\") == False\n    is_palindrome(\"madam\") == True\n    is_palindrome(\"abba\") == True\n    is_palindrome(\"hello\") == False\n    is_palindrome(\"\") == True\n    '''\n    left = 0\n    right = len(string) - 1\n    while left < right:\n        if string[left]"}
{"task_id": "python/73", "language": "python", "completion": "def strength(name):\n        \"\"\"Calculates the strength of a given class name.\"\"\"\n        CAP = sum(1 for c in name if c.isupper())\n        SM = sum(1 for c in name if c.islower())\n        return CAP - SM\n    def get_name(extension):\n        \"\"\"Gets the name of an extension.\"\"\"\n        return extension.replace('\"', '').replace(\"'\", '')\n    def get_strength(extension):\n        \"\"\"Gets the strength of an extension.\"\"\"\n        return strength(get_name(extension))\n    def get_extension(class_name, extensions):\n        \"\"\"Returns the strongest extension for a given class.\"\"\"\n        strongest_extension = None\n        max_strength = -1\n        for extension in extensions:\n            name = get_name(extension)\n            strength = get_strength(extension)\n            if strength > max_strength:\n                strongest_extension = extension\n                max_strength = strength\n            elif strength == max_strength:\n                if get_name(strongest_extension) > get_name(extension):\n                    strongest_extension = extension\n        return strongest_extension\n    strongest_extension = get_extension(class_name, extensions)\n    if not strongest_extension:\n        return None\n    class_name = '.'.join(class_name.split('_'))\n    return '{}.{}'.format(class_name, get_name(strongest_extension))\nStrongest_Extension('my_class', ['AA', 'Be', 'CC'])\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Cheese', 'StuFfed'])\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Cheese', 'StuFfed', 'Slices', 'Cheese', 'StuFfed'])\nStrongest_Extension('Slices',"}
{"task_id": "python/73", "language": "python", "completion": "# TODO: implement this function\n    \n    if(class_name in extensions):\n        return class_name\n    max_strength=0\n    strongest_extension=''\n    for extension in extensions:\n        upper_case=extension.count("}
{"task_id": "python/74", "language": "python", "completion": "if b in a : return True\n    \n    for i in range(len(b)):\n        c = b[i:] + b[:i]\n        if c in a: return True\n    return False\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(word):\n    \"\"\"Return True if word is a palindrome (same forwards and backwards) and False otherwise\"\"\"\n    \"\"\"is_palindrome(\"madam\") => True\n    is_palindrome(\"hello\") => False\n    is_palindrome(\"redivider\") => True\n    is_palindrome(\"civic\") => True\n    is_palindrome(\"kayak\") => True\n    is_palindrome(\"1222\") => True\n    is_palindrome(\"12321\") => True\n    is_palindrome(\"12345\") => False\n    is_palindrome(\"123321\") => True\n    is_palindrome(\"123322\") => False\n    \"\"\"\n    return word == word[::-1]\n\ndef is_palindrome_recursive(word, i=0, j=1):\n    \"\"\"Return True if word is a palindrome (same forwards and backwards) and False otherwise\"\"\"\n    \"\"\"is_palindrome_recursive(\"madam\") => True\n    is_palindrome_recursive(\"hello\") => False\n    is_palindrome_recursive(\"redivider\") => True\n    is_palindrome_recursive(\"civic\") => True\n    is_palindrome_recursive(\"kayak\") => True\n    is_palindrome_recursive(\"1222\") => True\n    is_palindrome_recursive(\"12321\") => True\n    is_palindrome_recursive(\"12345\") => False\n    is_palindrome_recursive(\"123321\") => True\n    is_palindrome_recursive(\"123322\") => False\n    \"\"\"\n    if i == len(word) // 2:\n        return True\n    if word[i] != word[j]:\n        return False\n    return is_palindrome_recursive(word, i + 1, j - 1)\n\ndef is_palindrome_iterative(word):\n    \"\"\"Return True if word is a palindrome (same forwards and backwards) and False otherwise\"\"\"\n    \"\"\"is_palindrome_iterative(\"madam\") => True\n    is_palindrome_iterative(\"hello\") => False\n    is_palindrome_iterative(\"redivider\") => True\n    is_palindrome_iterative(\"civic\") => True\n    is_palindrome_iterative(\"kayak\") => True\n    is_palindrome_iterative(\"1222\") => True\n    is_palindrome_iterative(\"12321\") => True\n    is_palindrome_iterative(\"12345\") => False\n    is_palindrome_iterative(\"123321\") => True\n    is_palindrome_iterative(\"123322\") => False\n    \"\"\"\n    j = len(word) - 1\n    for i in range(len(word) // 2):\n        if word[i] != word[j]:\n            return False\n        j -= 1\n    return True\n\ndef is_palindrome_recursive_2(word, i=0, j=1):\n    \"\"\"Return True if word is a palindrome (same forwards and backwards) and False otherwise\"\"\"\n    \"\"\"is_palindrome_recursive_2(\"madam\") => True\n    is_palindrome_recursive_2(\"hello\") => False\n    is_palindrome_recursive_2(\"redivider\") => True\n    is_palindrome_recursive_2(\"civic\") => True\n    is_palindrome_recursive_2(\"kayak\") => True\n    is_palindrome_recursive_2(\"1222\") => True\n    is_palindrome_recursive_2(\"12321\") => True\n    is_palindrome_recursive_2(\"12345\") => False\n    is_palindrome_recursive_2(\"123321\") => True\n    is_palindrome_recursive_2(\"123322\") => False\n    \"\"\"\n    if i == j:\n        return True\n    if word[i] != word[j]:\n        return False\n    return is_palindrome_recursive_2(word, i + 1, j - 1)\n\ndef is_palindrome_iterative_2(word):\n    \"\"\"Return True if word is a palindrome (same forwards and backwards) and False otherwise\"\"\"\n    \"\"\"is_palindrome_iterative_2(\"madam\") => True\n    is_palindrome_iterative_2(\"hello\") => F"}
{"task_id": "python/74", "language": "python", "completion": "if(len(a)==len(b)):\n        return b in a\n    else:\n        for i in range(1, len(b)):\n            return cycpattern_check(b[i:] + b[:i], a)\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "roman_numeral = \"\"\n    divisors = {1000: \"m\", 900: \"cm\", 500: \"d\", 400: \"cd\", 100: \"c\",\n                90: \"xc\", 50: \"l\", 40: \"xl\", 10: \"x\", 9: \"ix\", 5: \"v\",\n                4: \"iv\", 1: \"i\"}\n    for denom in sorted(divisors.keys(), reverse=True):\n        while denom <= number:\n            roman_numeral += divisors[denom]\n            number -= denom\n    return roman_numeral\nint_to_mini_roman(19) == 'xix'\nint_to_mini_roman(152) == 'clii'\nint_to_mini_roman(426) == 'cdxxvi'\ndef roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral as a string, return its integer equivalent.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_to_int('xi') == 19\n    >>> roman_to_int('clix') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n    numeral_value = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd',\n                     1000: 'm'}\n    numeral_value['v'] = numeral_value['i'] + numeral_value['i']\n    numeral_value['l'] = numeral_value['x'] + numeral_value['x']\n    numeral_value['d'] = numeral_value['c'] + numeral_value['c']\n    numeral_value['m'] = numeral_value['m'] + numeral_value['m']\n    roman = roman.replace('i', '1').replace('v', '5').replace('x', '10').\\\n            replace('l', '50').replace('c', '100').replace('d', '500').\\\n            replace('m', '1000')\n    numeral_value_sum = 0\n    for denom in roman:\n        numeral_value_sum += numeral_value[denom]\n    return numeral_value_sum\nroman_to_int('xi') == 19\nroman_to_int('clix') == 152\nroman_to_int('cdxxvi') == 426\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, return it as a string in roman numerals.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    numeral_value = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D',\n                     1000: 'M'}\n    numeral_value['V'] = numeral_value['I'] + numeral_value['I']\n    numeral_value['L'] = numeral_value['X'] + numeral_value['X']\n    numeral_value['D'] = numeral_value['C'] + numeral_value['C']\n    numeral_value['M'] = numeral_value['M'] + numeral_value['M']\n    numeral_value_sum = \"\"\n    for denom in sorted(numeral_value.keys(), reverse=True):\n        while denom <= number:\n            numeral_value_sum += numeral_value[denom]\n            number -= denom\n    return numeral_value_sum\nint_to_roman(19) == 'XIX'\nint_to_roman(152) == 'CLII'\nint_to_roman(426) == 'CDXXVI'\ndef int_to_roman_numeral(num):\n    \"\"\"\n    Given a number, return it as a roman numeral string.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_numeral(19) == 'XIX'\n    >>> int_to_roman_numeral(152) == 'CLII'\n    >>> int_to_roman_numeral(426) == 'CDXXVI'\n    \"\"\"\n    return int_to_mini_roman(num) + ''.join(\n            int_to_roman(int_to_mini_roman(num)).replace(\n                'i', '').replace('v', '').replace('x', '').replace('l', '').\\\n                replace('c', '').replace('d', '').replace('m', '').split())\nint_to_roman_numeral(19) == 'XIX'\nint_to_roman_numeral(152) == 'CLII'\nint_to_roman_numeral(426) == 'CDXXVI'\ndef roman_numeral_to_int(roman):\n    \"\"\"\n    Given a roman numeral, return its integer value.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_numeral_to_int('XIX') == 19\n    >>> roman_numeral_to_int('CLII') == 152\n    >>> roman_numeral_to_int('CDXXVI') == 426\n    \"\"\"\n    numeral_value = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd',\n                     1000: 'm'}\n    numeral_value['v'] = numeral_value['i'] + numeral_value['i']\n    numeral_value['l'] = numeral_value['x'] + numeral_value['x'"}
{"task_id": "python/75", "language": "python", "completion": "int_to_roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c'\n    }\n    \n    roman_numeral = ''\n    while number > 0:\n        # Find the largest denomination that is less than or equal to number\n        for denom in reversed(int_to_roman):\n            if denom <= number:\n                break\n        \n        number -= denom\n        roman_numeral += int_to_roman[denom]\n    \n    return roman_numeral.lower()\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a valid Roman numeral as a string, convert its integer equivalent into\n    and return it as a nonnegative integer.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_to_int = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'c': 100\n    }\n    \n    value = 0\n    for i in range(len(roman)):\n        if i == len(roman) - 1 or roman_to_int[roman[i]] >= roman_to_int[roman[i+1]]:\n            value += roman_to_int[roman[i]]\n        else:\n            value -= roman_to_int[roman[i]]\n    \n    return value"}
{"task_id": "python/76", "language": "python", "completion": "# Write your solution below this comment\n    if c**2 == a**2 + b**2:\n        return True\n    return False\n    \nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n\ndef manhattan_distance(point1, point2):\n    '''\n    Calculates the manhattan distance between two points.\n    The manhattan distance is a measure of the distance between two points\n    that \"walk\" only along the straight lines that are horizontal or vertical.\n    The distance between point1 = (x1, y1) and point2 = (x2, y2) is:\n    manhattan_distance(point1, point2) = |x1 - x2| + |y1 - y2|\n    where |x| is the value of x and |y| is the value of y.\n    Example:\n    manhattan_distance((1, 2), (4, 5)) == 7\n    manhattan_distance((-10, -10), (10, 10)) == 20\n    '''\n    # Write your solution below this comment\n    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n    \nmanhattan_distance((1, 2), (4, 5)) == 7\nmanhattan_distance((-10, -10), (10, 10)) == 20\n\ndef manhattan_distance(point1, point2):\n    '''\n    Calculates the manhattan distance between two points.\n    The manhattan distance is a measure of the distance between two points\n    that \"walk\" only along the straight lines that are horizontal or vertical.\n    The distance between point1 = (x1, y1) and point2 = (x2, y2) is:\n    manhattan_distance(point1, point2) = |x1 - x2| + |y1 - y2|\n    where |x| is the value of x and |y| is the value of y.\n    Example:\n    manhattan_distance((1, 2), (4, 5)) == 7\n    manhattan_distance((-10, -10), (10, 10)) == 20\n    '''\n    # Write your solution below this comment\n    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n    \nmanhattan_distance((1, 2), (4, 5)) == 7\nmanhattan_distance((-10, -10), (10, 10)) == 20\n\ndef manhattan_distance(point1, point2):\n    '''\n    Calculates the manhattan distance between two points.\n    The manhattan distance is a measure of the distance between two points\n    that \"walk\" only along the straight lines that are horizontal or vertical.\n    The distance between point1 = (x1, y1) and point2 = (x2, y2) is:\n    manhattan_distance(point1, point2) = |x1 - x2| + |y1 - y2|\n    where |x| is the value of x and |y| is the value of y.\n    Example:\n    manhattan_distance((1, 2), (4, 5)) == 7\n    manhattan_distance((-10, -10), (10, 10)) == 20\n    '''\n    # Write your solution below this comment\n    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n    \nmanhattan_distance((1, 2), (4, 5)) == 7\nmanhattan_distance((-10, -10), (10, 10)) == 20\n\ndef manhattan_distance(point1, point2):\n    '''\n    Calculates the manhattan distance between two points.\n    The manhattan distance is a measure of the distance between two points\n    that \"walk\" only along the straight lines that are horizontal or vertical.\n    The distance between point1 = (x1, y1) and point2 = (x2, y2) is:\n    manhattan_distance(point1, point2) = |x1 - x2| + |y1 - y2|\n    where |x| is the value of x and |y| is the value of y.\n    Example:\n    manhattan_distance((1, 2), (4, 5)) == 7\n    manhattan_distance((-10, -10), (10, 10)) == 20\n    '''\n    # Write your solution below this comment\n    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n    \nmanhattan_distance((1, 2), (4, 5)) == 7\nmanhattan_distance((-10, -10), (10, 10)) == 20\n\ndef manhattan_distance(point1, point2):\n    '''\n    Calculates the manhattan distance between two points.\n    The manhattan distance is a measure of the distance between two points\n    that \"walk\" only along the straight lines that are horizontal or vertical.\n    The distance between point1 = (x1, y1) and point2 = (x2, y2) is:\n    manhattan_distance(point1, point2) = |x1 - x2| + |y1 - y2|\n    where |x| is the value of x and |y| is the value of y.\n    Example:\n    manhattan_distance((1, 2), (4, 5)) == 7\n    manhattan_distance((-10, -10), (10, 10)) == 20\n    '''\n    # Write your solution below this comment\n    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n    \nmanhattan_distance((1, 2),"}
{"task_id": "python/76", "language": "python", "completion": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 2, 1) == False\n\ndef triangle_type(a, b, c):\n    '''\n    Determine the type of a triangle from its side lengths. Return:\n    'scalene' for scalene triangles (3 sides with different lengths)\n    'equilateral' for equilateral triangles (3 sides with the same lengths)\n    'isosceles' for isosceles triangles (2 sides with the same length)\n    'not a triangle' for any triangle with side lengths that do not form a\n    right-angled triangle.\n    '''\n    if right_angle_triangle(a, b, c):\n        return 'right'\n    elif a == b or b == c or a == c:\n        return 'isosceles'\n    else:\n        return 'scalene'\n\ndef test_triangle_type():\n    assert triangle_type(3, 4, 5) == 'right'\n    assert triangle_type(1, 1, 1) == 'equilateral'\n    assert triangle_type(1, 2, 3) == 'isosceles'\n    assert triangle_type(1, 2, 1) == 'scalene'\n\ndef isosceles_area(a, b, c):\n    '''\n    Given the lengths of the three sides of an isosceles triangle. Return the\n    area of the triangle.\n    '''\n    if triangle_type(a, b, c) != 'isosceles':\n        raise ValueError('Input is not an isosceles triangle')\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\ndef test_isosceles_area():\n    assert isosceles_area(3, 4, 5) == 6.0\n    assert isosceles_area(1, 1, 1) == 0.4330127018922193\n    assert isosceles_area(1, 2, 3) == None\n\ndef scalene_area(a, b, c):\n    '''\n    Given the lengths of the three sides of an scalene triangle. Return the\n    area of the triangle.\n    '''\n    if triangle_type(a, b, c) != 'scalene':\n        raise ValueError('Input is not a scalene triangle')\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\ndef test_scalene_area():\n    assert scalene_area(3, 4, 5) == 1.7320508075688772\n    assert scalene_area(1, 1, 1) == 0.5\n    assert scalene_area(1, 2, 3) == None\n\n\ndef scalene_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of an scalene triangle. Return the\n    perimeter of the triangle.\n    '''\n    if triangle_type(a, b, c) != 'scalene':\n        raise ValueError('Input is not a scalene triangle')\n    perimeter = a + b + c\n    return perimeter\n\ndef test_scalene_perimeter():\n    assert scalene_perimeter(3, 4, 5) == 12\n    assert scalene_perimeter(1, 1, 1) == 3\n    assert scalene_perimeter(1, 2, 3) == None\n\ndef equilateral_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of an equilateral triangle. Return the\n    perimeter of the triangle.\n    '''\n    if triangle_type(a, b, c) != 'equilateral':\n        raise ValueError('Input is not an equilateral triangle')\n    perimeter = a + b + c\n    return perimeter\n\ndef test_equilateral_perimeter():\n    assert equilateral_perimeter(3, 3, 3) == 9\n    assert equilateral_perimeter(1, 1, 1) == 3\n    assert equilateral_perimeter(1, 2, 3)"}
{"task_id": "python/77", "language": "python", "completion": "#your code here\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return \"\".join(s)\ndef main():\n    s = \"1234\"\n    print(solve(s))\n    s = \"ab\"\n    print(solve(s))\n    s = \"#a@C\"\n    print(solve(s))\nif __name__ == \"__main__\":\n    main()\n  \ndef solve(s):\n    \"\"\"You are given an array of integers nums.\n    Write a function that returns an array of strings answer,\n    where answer[i] is a decimal representation of nums[i].\n    Examples\n    solve([1000,1234,2345,3456,4567]) = [\"1000\",\"1234\",\"2345\",\"3456\",\"4567\"]\n    solve([0,0,0,0,0]) = [\"0\",\"0\",\"0\",\"0\",\"0\"]\n    solve([2345,3456,4567,5678,6789]) = [\"2345\",\"3456\",\"4567\",\"5678\",\"6789\"]\n    \"\"\"\n    #your code here\n    answer = []\n    for i in range(len(s)):\n        answer.append(str(s[i]))\n    return answer\ndef main():\n    nums = [1000,1234,2345,3456,4567]\n    print(solve(nums))\n    nums = [0,0,0,0,0]\n    print(solve(nums))\n    nums = [2345,3456,4567,5678,6789]\n    print(solve(nums))\nif __name__ == \"__main__\":\n    main()\n  \ndef solve(s):\n    \"\"\"Given an array nums. We define a running sum of an array as\n    runningSum[i] = sum(nums[0]\u2026nums[i]).\n    Return the running sum of nums.\n    Examples\n    solve([1,2,3,4,5]) = [1, 3, 6, 10, 15]\n    solve([1,1,1,1,1]) = [1, 2, 3, 4, 5]\n    solve([3,1,2,10,1]) = [3, 4, 6, 16, 17]\n    \"\"\"\n    #your code here\n    s = []\n    s.append(nums[0])\n    for i in range(1,len(nums)):\n        s.append(s[i-1] + nums[i])\n    return s\ndef main():\n    nums = [1,2,3,4,5]\n    print(solve(nums))\n    nums = [1,1,1,1,1]\n    print(solve(nums))\n    nums = [3,1,2,10,1]\n    print(solve(nums))\nif __name__ == \"__main__\":\n    main()\n  \ndef solve(s):\n    \"\"\"Write a function that takes an array of positive integers as input and returns the number of distinct subsets with sum of elements less than or equal to target.\n    Examples\n    solve([1,2,3,4]) = 6\n    solve([1,2,3,4,5]) = 14\n    solve([1,2,3,4,5,6]) = 30\n    \"\"\"\n    #your code here\n    s = []\n    s.append(nums[0])\n    for i in range(1,len(nums)):\n        s.append(s[i-1] + nums[i])\n    return s\ndef main():\n    nums = [1,2,3,4]\n    print(solve(nums))\n    nums = [1,2,3,4,5]\n    print(solve(nums))\n    nums = [1,2,3,4,5,6]\n    print(solve(nums))\nif __name__ == \"__main__\":\n    main()\n  \ndef solve(s):\n    \"\"\"Write a function that takes an array of integers and returns the sum of its elements.\n    Examples\n    solve([1,2,3]) = 6\n    solve([5,7,1]) = 15\n    solve([4,5,6]) = 18\n    \"\"\"\n    #your code here\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    return s\ndef main():\n    nums = [1,2,3]\n    print(solve(nums))\n    nums = [5,7,1]\n    print(solve(nums))\n    nums = [4,5,6]\n    print(solve(nums))\nif __name__ == \"__main__\":\n    main()\n  \ndef solve(s):\n    \"\"\"You are given an array of integers nums and an integer target.\n    You want to create a set s, such that for every element in nums you can choose\n    an integer k from s such that nums[i] + k = target.\n    Return true if it's possible to create such a set s, or false otherwise.\n    Examples\n    solve([1,2,3,4], 5) = True\n    solve([3,4,5], 3) = True\n    solve([1,2,3,4,5,6], 7) = True\n    \"\"\"\n    #your code here\n    s = []\n    for i in range(len(nums)):\n        for j in range(len(s)):\n            s.append(nums[i] + s[j])\n            s.append(nums[i] - s[j])\n        s.append(nums[i])\n    return True if target in s else False\ndef main():\n    nums = [1,2,3,4]\n    target = 5\n    print(solve(nums, target))\n    nums = [3,4,5]\n    target = 3\n    print(solve(nums, target))\n    nums = [1,2,3,4,5,6]\n    target = 7\n    print(solve(nums, target))\nif __name__ == \"__main__\":\n    main()\n  \ndef solve(nums, target):\n    \"\"\"You are given an array of integers nums and an integer target.\n    You want to create a set s, such that for every element in nums you can choose\n    an integer k from s such that nums[i] + k = target.\n    Return true if it's possible to create such a set s, or false otherwise.\n    Examples\n    solve([1,2,3,4], 5) = True\n    solve([3,4,5], 3) = True\n    solve([1,2,3,4,5,6], 7) = True\n    \"\"\"\n    #your code here\n    s = []\n    for i in range(len(nums)):\n        for j in range(len(s)):\n            s.append(nums[i] + s[j])\n            s.append(nums[i] - s[j])\n        s.append(nums[i])\n    return True if target in s else False\ndef main():\n    nums = [1,2,3,4]\n    target = 5\n    print(solve(nums, target))\n    nums = [3,4,5]\n    target = 3\n    print(solve(nums, target))\n    nums = [1,2,3,4,5,6]\n    target"}
{"task_id": "python/77", "language": "python", "completion": "result = []\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return ''.join(result)\n\n\n#testing\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = []\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return ''.join(result)\n\n\ndef test_solve():\n    test_cases = [\n        (\"1234\", \"4321\"),\n        (\"ab\", \"AB\"),\n        (\"1234abc\", \"4321ABc\"),\n        (\"ab12\", \"Ab12\"),\n        (\"\", \"\"),\n        (\"#a@C\", \"#A@c\"),\n    ]\n    for inp, exp in test_cases:\n        assert solve(inp) == exp\n\n\ndef test_solve_reversed():\n    test_cases = [\n        (\"1234\", \"4321\"),\n        (\"ab\", \"AB\"),\n        (\"1234abc\", \"4321ABc\"),\n        (\"ab12\", \"Ab12\"),\n        (\"\", \"\"),\n        (\"#a@C\", \"#A@c\"),\n    ]\n    for inp, exp in test_cases:\n        assert solve(inp) == exp\n\n\ndef test_solve_empty():\n    test_cases = [\n        (\"\", \"\"),\n        (\"#a@C\", \"#A@c\"),\n    ]\n    for inp, exp in test_cases:\n        assert solve(inp) == exp\n\n\ndef test_solve_all_caps():\n    test_cases = [\n        (\"ABCDEFGHI\", \"ABCDEFGHI\"),\n        (\"abcdefghi\", \"ABCDEFGHI\"),\n        (\"ABCDEFGHIabcdefghi\", \"ABCDEFGHIabcdefghi\"),\n        (\"abcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghi\"),\n        (\"ABCDEFGHIabcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHI\"),\n    ]\n    for inp, exp in test_cases:\n        assert solve(inp) == exp\n\n\ndef test_solve_all_lower():\n    test_cases = [\n        (\"abcdefghi\", \"ABCDEFGHI\"),\n        (\"ABCDEFGHIabcdefghi\", \"ABCDEFGHIabcdefghi\"),\n        (\"abcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHI\"),\n        (\"ABCDEFGHIabcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHI\"),\n    ]\n    for inp, exp in test_cases:\n        assert solve(inp) == exp\n\n\ndef test_solve_all_caps_and_lower():\n    test_cases = [\n        (\"ABCDEFGHIabcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHI\"),\n        (\"abcdefghiABCDEFGHIabcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHIabcdefghiABCDEFGHI\"),\n    ]\n    for inp, exp in test_cases:\n        assert solve(inp) == exp\n\n\ndef test_solve_all_caps_and_lower():\n    test_cases = [\n        (\"ABCDEFGHIabcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHI\"),\n        (\"abcdefghiABCDEFGHIabcdefghiABCDEFGHI\", \"ABCDEFGHIabcdefghiABCDEFGHIabcdefghiABCDEFGHI\"),\n    ]\n    for inp, exp"}
{"task_id": "python/78", "language": "python", "completion": "if text:\n        import hashlib\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '26ab87e994e2565c01cb06e12552b1384fd726d0'\n    \"\"\"\n    if text:\n        import hashlib\n        return hashlib.sha1(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'd598d5e71c30c506119466c7da5b90897356226949c10c7c5c951c1481e22963'\n    \"\"\"\n    if text:\n        import hashlib\n        return hashlib.sha256(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == '05d113b85596c213581a659012e311501922e85a071591fc2b7a8092413c1f1392f15c6557a62033a9613e50429f63b319161e72194c23312d4d7e4f311901b'\n    \"\"\"\n    if text:\n        import hashlib\n        return hashlib.sha512(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha512_256(text):\n    \"\"\"\n    Given a string 'text', return its sha512-256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512_256('Hello world') == 'd5a034d771f817722a43e111369b002998e810e0e608071f0e7f93e5484941c9'\n    \"\"\"\n    if text:\n        import hashlib\n        return hashlib.sha512(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha384(text):\n    \"\"\"\n    Given a string 'text', return its sha384 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha384('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cbbbc2d0e342afc9292468a5bb3c000e9'\n    \"\"\"\n    if text:\n        import hashlib\n        return hashlib.sha384(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_ripemd160(text):\n    \"\"\"\n    Given a string 'text', return its ripemd160 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_ripemd160('Hello world') == '1458220f037564b618e23f19813fd4e9a09e890a'\n    \"\"\"\n    if text:\n        import hashlib\n        return hashlib.new('ripemd160', text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_md5_hmac(text, key):\n    \"\"\"\n    Given a string 'text' and a string 'key', return its md5-hmac equivalent string.\n    If either 'text' or 'key' is an empty string, return None.\n\n    >>> string_to_md5_hmac('Hello world', 'salt') == '10f5246b23897090a399a3e069095000'\n    \"\"\"\n    if text and key:\n        import hashlib\n        import hmac\n        return hmac.new(key, text, hashlib.md5).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha1_hmac(text, key):\n    \"\"\"\n    Given a string 'text' and a string 'key', return its sha1-hmac equivalent string.\n    If either 'text' or 'key' is an empty string, return None.\n\n    >>> string_to_sha1_hmac('Hello world', 'salt') == '0b2b61f826d9b5821d5f2b82339a1a142152146e'\n    \"\"\"\n    if text and key:\n        import hashlib\n        import hmac\n        return hmac.new(key, text, hashlib.sha1).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha256_hmac(text, key):\n    \"\"\"\n    Given a string 'text' and a string 'key', return its sha256-hmac equivalent string.\n    If either 'text' or 'key' is an empty string, return None.\n\n    >>> string_to_sha256_hmac('Hello world', 'salt') == 'e53960312a92f659596b921985666b542261403c093896b98a8b9c416113d2a0'\n    \"\"\"\n    if text and key:\n        import hashlib\n        import hmac\n        return hmac.new(key, text, hashlib.sha256).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha512_hmac(text, key):\n    \"\"\"\n    Given a string 'text' and a string 'key', return its sha512-hmac equivalent string.\n    If either 'text' or 'key' is an empty string, return None.\n\n    >>> string_to_sha512_hmac('Hello world', 'salt') == 'e53960312a92f659596b921985666b542261403c093896b98a8b9c416113d2a0'\n    \"\"\"\n    if text and key:\n        import hashlib\n        import hmac\n        return hmac.new(key, text, hashlib.sha512).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha384_hmac(text, key):\n    \"\"\"\n    Given a string 'text' and a string 'key', return its sha384-hmac equivalent string.\n    If either 'text' or 'key' is an empty string, return None.\n\n    >>> string_to_sha384_hmac('Hello world', 'salt') == 'e53960312a92f659596b921985666b542261403c093896b98a8b9c416113d2a0'\n    \"\"\"\n    if text and key:\n        import hashlib\n        import hmac\n        return hmac.new(key, text, hashl"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n    if text != '':\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '42db7b1559012a4a2815261737659280c7158869'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.sha1(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '9f25e1130549c8e933a032a1052e12e9e9801b7b756e71f957b219f6e9a59504'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.sha256(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_sha384(text):\n    \"\"\"\n    Given a string 'text', return its sha384 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha384('Hello world') == 'b6791180871063e513e18363a9141e2e2296100f6498e2c532f1056e4f9606f4e15e519928304790114a39b4134a4451'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.sha384(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'b229378158c93e680f9a0066948740c66f4e999031f634538a89508330f60b1f2b17699a8a86c848822381a39a0e779e708635e80e88757693e2e6131423a3'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.sha512(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_whirlpool(text):\n    \"\"\"\n    Given a string 'text', return its whirlpool hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_whirlpool('Hello world') == 'd1e5e58107830378916677e78c054860e063e14984a61c8b10f9c617f134385f3758236b906441c51e01b5007093830e56880100559635a974e1502173d1d91'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.whirlpool(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_crc32(text):\n    \"\"\"\n    Given a string 'text', return its crc32 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_crc32('Hello world') == '6c81c181'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.crc32(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_crc64(text):\n    \"\"\"\n    Given a string 'text', return its crc64 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_crc64('Hello world') == '6563643933313239353631313930393138303030323231383131393438383236'\n    \"\"\"\n    import hashlib\n    if text != '':\n        return hashlib.crc64(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n        \n\n\ndef string_to_blake2b(text):\n    \"\"\"\n    Given a string 'text', return its blake2b hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_blake2b('Hello world') == '3975e78a6a9135c58f311a3295c9e938a086598560e2991e9614656c81c181f'\n    \"\"\"\n    import hashlib\n    if text !="}
{"task_id": "python/79", "language": "python", "completion": "lst = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n    pass\n\ndef generate_odd_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the odd digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_odd_integers(2, 8) => [1, 3, 5, 7]\n    generate_odd_integers(8, 2) => [1, 3, 5, 7]\n    generate_odd_integers(10, 14) => []\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 != 0:\n            lst.append(i)\n    return lst\n    pass\n\ndef generate_even_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_even_integers(2, 8) => [2, 4, 6, 8]\n    generate_even_integers(8, 2) => [2, 4, 6, 8]\n    generate_even_integers(10, 14) => [10, 12]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n    pass\n\ndef generate_odd_even_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the odd digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_odd_even_integers(2, 8) => [1, 3, 5, 7]\n    generate_odd_even_integers(8, 2) => [1, 3, 5, 7]\n    generate_odd_even_integers(10, 14) => [10, 12]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n    pass\n\ndef generate_even_odd_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_even_odd_integers(2, 8) => [2, 4, 6, 8]\n    generate_even_odd_integers(8, 2) => [2, 4, 6, 8]\n    generate_even_odd_integers(10, 14) => [10, 12]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 != 0:\n            lst.append(i)\n    return lst\n    pass\n\ndef generate_reversed_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the reversed integers between\n    a and b, in ascending order.\n\n    For example:\n    generate_reversed_integers(2, 8) => [2, 8, 6, 4, 2]\n    generate_reversed_integers(8, 2) => [8, 6, 4, 2]\n    generate_reversed_integers(10, 14) => [10, 12, 14, 16, 18, 20]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        lst.append(i)\n    lst.reverse()\n    return lst\n    pass\n\ndef generate_reversed_odd_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the reversed odd integers\n    between a and b, in ascending order.\n\n    For example:\n    generate_reversed_odd_integers(2, 8) => [2, 6, 4, 2]\n    generate_reversed_odd_integers(8, 2) => [2, 6, 4, 2]\n    generate_reversed_odd_integers(10, 14) => [10, 14, 16, 18, 20]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 != 0:\n            lst.append(i)\n    lst.reverse()\n    return lst\n    pass\n\ndef generate_reversed_even_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the reversed even integers\n    between a and b, in ascending order.\n\n    For example:\n    generate_reversed_even_integers(2, 8) => [8, 6, 4, 2]\n    generate_reversed_even_integers(8, 2) => [8, 6, 4, 2]\n    generate_reversed_even_integers(10, 14) => [14, 12, 10]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            lst.append(i)\n    lst.reverse()\n    return lst\n    pass\n\ndef generate_reversed_odd_even_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the reversed odd and even\n    integers between a and b, in ascending order.\n\n    For example:\n    generate_reversed_odd_even_integers(2, 8) => [2, 8, 6, 4, 2]\n    generate_reversed_odd_even_integers(8, 2) => [2, 8, 6, 4, 2]\n    generate_reversed_odd_even_integers(10, 14) => [10, 14, 16, 18, 20]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            lst.append(i)\n        elif i % 2 != 0:\n            lst.append(i)\n    lst.reverse()\n    return lst\n    pass\n\ndef generate_reversed_even_odd_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the reversed even and odd\n    integers between a and b, in ascending order.\n\n    For example:\n    generate_reversed_even_odd_integers(2, 8) => [2, 6, 4, 2]\n    generate_reversed_even_odd_integers(8, 2) => [2, 6, 4, 2]\n    generate_reversed_even_odd_integers(10, 14) => [10, 12, 14, 16, 18, 20]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i % 2 != 0:\n            lst.append(i)\n        elif i % 2 == 0:\n            lst.append(i)\n    lst.reverse()\n    return lst\n    pass\n\ndef generate_integers_with_sum(a, b, s):\n    \"\"\"\n    Given two positive integers a and b, return the integers between a and b,\n    in ascending order, that sum to s.\n\n    For example:\n    generate_integers_with_sum(2, 8, 12) => [2, 4, 6, 8]\n    generate_integers_with_sum(8, 2, 12) => [2, 4, 6, 8]\n    generate_integers_with_sum(10, 14, 12) => [10, 12]\n    \"\"\"\n    lst = []\n    for i in range(a, b + 1):\n        if i + i"}
{"task_id": "python/79", "language": "python", "completion": "even_integers = []\n    \n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_integers.append(i)\n            \n    even_integers.sort()\n    \n    return even_integers\n\nif __name__ == \"__main__\":\n    print(generate_integers(2, 8))\n    print(generate_integers(8, 2))\n    print(generate_integers(10, 14))\n    print(generate_integers(2, 10))\n    print(generate_integers(5, 10))\n    print(generate_integers(1, 10))\n    print(generate_integers(1, 2))\n    print(generate_integers(1, 3))\n    print(generate_integers(1, 4))\n    print(generate_integers(1, 5))\n    print(generate_integers(1, 6))\n    print(generate_integers(1, 7))\n    print(generate_integers(1, 8))\n    print(generate_integers(1, 9))\n    print(generate_integers(1, 10))\n    print(generate_integers(1, 11))\n    print(generate_integers(1, 12))\n    print(generate_integers(1, 13))\n    print(generate_integers(1, 14))\n    print(generate_integers(1, 15))\n    print(generate_integers(1, 16))\n    print(generate_integers(1, 17))\n    print(generate_integers(1, 18))\n    print(generate_integers(1, 19))\n    print(generate_integers(1, 20))\n    print(generate_integers(1, 21))\n    print(generate_integers(1, 22))\n    print(generate_integers(1, 23))\n    print(generate_integers(1, 24))\n    print(generate_integers(1, 25))\n    print(generate_integers(1, 26))\n    print(generate_integers(1, 27))\n    print(generate_integers(1, 28))\n    print(generate_integers(1, 29))\n    print(generate_integers(1, 30))\n    print(generate_integers(1, 31))\n    print(generate_integers(1, 32))\n    print(generate_integers(1, 33))\n    print(generate_integers(1, 34))\n    print(generate_integers(1, 35))\n    print(generate_integers(1, 36))\n    print(generate_integers(1, 37))\n    print(generate_integers(1, 38))\n    print(generate_integers(1, 39))\n    print(generate_integers(1, 40))\n    print(generate_integers(1, 41))\n    print(generate_integers(1, 42))\n    print(generate_integers(1, 43))\n    print(generate_integers(1, 44))\n    print(generate_integers(1, 45))\n    print(generate_integers(1, 46))\n    print(generate_integers(1, 47))\n    print(generate_integers(1, 48))\n    print(generate_integers(1, 49))\n    print(generate_integers(1, 50))\n    print(generate_integers(1, 51))\n    print(generate_integers(1, 52))\n    print(generate_integers(1, 53))\n    print(generate_integers(1, 54))\n    print(generate_integers(1, 55))\n    print(generate_integers(1, 56))\n    print(generate_integers(1, 57))\n    print(generate_integers(1, 58))\n    print(generate_integers(1, 59))\n    print(generate_integers(1, 60))\n    print(generate_integers(1, 61))\n    print(generate_integers(1, 62))\n    print(generate_integers(1, 63))\n    print(generate_integers(1, 64))\n    print(generate_integers(1, 65))\n    print(generate_integers(1, 66))\n    print(generate_integers(1, 67))\n    print(generate_integers(1, 68))\n    print(generate_integers(1, 69))\n    print(generate_integers(1, 70))\n    print(generate_integers(1, 71))\n    print(generate_integers(1, 72))\n    print(generate_integers(1, 73))\n    print(generate_integers(1, 74))\n    print(generate_integers(1, 75))\n    print(generate_integers(1, 76))\n    print(generate_integers(1, 77))\n    print(generate_integers(1, 78))\n    print(generate_integers(1, 79))\n    print(generate_integers(1, 80))\n    print(generate_integers(1, 81))\n    print(generate_integers(1, 82))\n    print(generate_integers(1, 83))\n    print(generate_integers(1, 84))\n    print(generate_integers(1, 85))\n    print(generate_integers(1, 86))\n    print(generate_integers(1, 87))\n    print(generate_integers(1, 88))\n    print(generate_integers(1, 89))\n    print(generate_integers(1, 90))\n    print(generate_integers(1, 91))\n    print(generate_integers(1, 92))\n    print(generate_integers(1, 93))\n    print(generate_integers(1, 94))\n    print(generate_integers(1, 95))\n    print(generate_integers(1, 96))\n    print(generate_integers(1, 97))\n    print(generate_integers(1, 98))\n    print(generate_integers(1, 99))\n    print(generate_integers(1, 100))\n    print(generate_integers(1, 101))\n    print(generate_integers(1, 102))\n    print(generate_integers(1, 103))\n    print(generate_integers(1, 104))\n    print(generate_integers(1, 105))\n    print(generate_integers(1, 106))\n    print(generate_integers(1, 107))\n    print(generate_integers(1, 108))\n    print(generate_integers(1, 109))\n    print(generate_integers(1, 110))\n    print(generate_integers(1, 111))\n    print(generate_integers(1, 112))\n    print(generate_integers(1, 113))\n    print(generate_integers(1, 114))\n    print(generate_integers(1, 115))\n    print(generate_integers(1, 116))\n    print(generate_integers(1, 117))\n    print(generate_integers(1, 118))\n    print(generate_integers(1, 119))\n    print(generate_integers(1, 120))\n    print(generate_integers(1, 121))\n    print(generate_integers(1, 122))\n    print(generate_integers(1, 123))\n    print(generate_integers(1, 124))\n    print(generate_integers(1, 125))\n    print(generate_integers(1, 126))\n    print(generate_integers(1, 127))\n    print(generat"}

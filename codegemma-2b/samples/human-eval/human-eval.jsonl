{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/1", "completion": "result = []\n    paren_count = 0\n    paren_index = 0\n    paren_string = paren_string.replace(\" \", \"\")\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_count += 1\n        elif paren_string[i] == \")\":\n            paren_count -= 1\n            if paren_count < 0:\n                raise ValueError(\"Invalid input: Unmatched closing parenthesis\")\n        elif paren_count == 0:\n            if paren_string[paren_index:i] != \"\":\n                result.append(paren_string[paren_index:i])\n            paren_index = i + 1\n    if paren_count > 0:\n        raise ValueError(\"Invalid input: Unmatched opening parenthesis\")\n    if paren_string[paren_index:] != \"\":\n        result.append(paren_string[paren_index:])\n    return result\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_count = 0\n    paren_index = 0\n    paren_string = paren_string.replace(\""}
{"task_id": "HumanEval/2", "completion": "return number % 1.0\n\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return truncate_number(number)\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return truncate_number(number)\n\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return truncate_number(number)\n\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return truncate_number(number)\n\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return truncate_number(number)\n\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return truncate_number(number)\n\n\ndef truncate_number_float(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer s"}
{"task_id": "HumanEval/3", "completion": "# Write your solution here\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "HumanEval/4", "completion": "mean_number = sum(numbers) / len(numbers)\n    print(mean_number)\n    mad = sum(abs(x - mean_number) for x in numbers) / len(numbers)\n    print(mad)\n    return mad\n\n\nif __name__ == \"__main__\":\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/5", "completion": "new_numbers: List[int] = []\n    for number in numbers:\n        if number != delimeter:\n            new_numbers.append(number)\n            new_numbers.append(delimeter)\n        else:\n            new_numbers.append(number)\n    return new_numbers\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    new_numbers: List[int] = []\n    for number in numbers:\n        if number != delimeter:\n            new_numbers.append(number)\n            new_numbers.append(delimeter)\n        else:\n            new_numbers.append(number)\n    return new_numbers\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    new_numbers: List[int] = []\n    for number in numbers:\n        if number != delimeter:\n            new_numbers.append(number)\n            new_numbers.append(delimeter)\n        else:\n            new_numbers.append(number)\n    return new_numbers\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    new_numbers: List[int] = []\n    for number in numbers:\n        if number != delimeter:\n            new_numbers.append(number)\n            new_numbers.append(delimeter)\n        else:\n            new_numbers.append(number)\n    return new_numbers\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    new_numbers: List[int] = []\n    for number in numbers:\n        if number != delimeter:\n            new_numbers.append(number)\n            new_numbers.append(delimeter)\n        else:\n            new_numbers.append(number)\n    return new_numbers\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    new_numbers: List[int] = []\n    for number in numbers:\n        if number != delimeter:\n            new_numbers.append(number)\n            new_numbers.append(delimeter)\n        else:\n            new_numbers.ap"}
{"task_id": "HumanEval/6", "completion": "output = []\n    num_open_parens = 0\n    for char in paren_string:\n        if char == '(':\n            num_open_parens += 1\n        elif char == ')':\n            num_open_parens -= 1\n            if num_open_parens == 0:\n                output.append(2 + max(0, len(output) - 1))\n    return output"}
{"task_id": "HumanEval/7", "completion": "result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return re"}
{"task_id": "HumanEval/8", "completion": "if not numbers:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "result = []\n    for i in range(len(numbers)):\n        current_max = numbers[0]\n        for j in range(i + 1):\n            current_max = max(current_max, numbers[j])\n        result.append(current_max)\n    return result\n\n\ndef rolling_mean(numbers: List[int], window: int) -> List[int]:\n    \"\"\" From a given list of integers and a window size, generate a list of rolling mean element found until given moment\n    in the sequence.\n    >>> rolling_mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - window + 1):\n        result.append(sum(numbers[i: i + window]) / window)\n    return result\n\n\ndef rolling_median(numbers: List[int], window: int) -> List[int]:\n    \"\"\" From a given list of integers and a window size, generate a list of rolling median element found until given moment\n    in the sequence.\n    >>> rolling_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - window + 1):\n        result.append(sorted(numbers[i: i + window])[window // 2])\n    return result\n\n\ndef rolling_mode(numbers: List[int], window: int) -> List[int]:\n    \"\"\" From a given list of integers and a window size, generate a list of rolling mode element found until given moment\n    in the sequence.\n    >>> rolling_mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - window + 1):\n        result.append(max(set(numbers[i: i + window]), key=numbers[i: i + window].count))\n    return result\n\n\ndef rolling_window(numbers: List[int], window: int, step: int = 1) -> List[Tuple[int, int]]:\n    \"\"\" From a given list of integers, generate a list of tuple of rolling element found until given moment\n    in the sequence.\n    >>> rolling_window([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 1)\n    [(1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, None), (9, 10), (10, None)]\n    \"\"\"\n    result = []\n    for i in range(0, len(numbers) - window + 1, step):\n        if i + window <= len(numbers):\n            result.append((numbers[i], numbers[i + window - 1]))\n        else:\n            result.append((numbers[i], None))\n    return result\n\n\ndef test_rolling_max():\n    assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef test_rolling_mean():\n    assert rolling_mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef test_rolling_median():\n    assert rolling_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef test_rolling_mode():\n    assert rolling_mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef test_rolling_window():\n    assert rolling_window([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 1) == [(1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, None), (9, 10), (10, None)]\n\n\ndef test_rolling_window():\n    assert rolling_window([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 2) == [(1, None), (3, 6), (5, 8)"}
{"task_id": "HumanEval/10", "completion": "# We need to find the longest postfix of string that is a palindrome,\n    # so we do a naive search of all palindromic suffixes.\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            break\n    else:\n        return string\n\n    # Now we need to reverse the string that is before the palindrome suffix.\n    rev = ''.join(reversed(string[:i]))\n\n    return string[i:][::-1] + string[:i] + rev\n\n\ndef test_make_palindrome():\n    \"\"\" Test make_palindrome function \"\"\"\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n\n\ndef main():\n    \"\"\" Run doctests \"\"\"\n    import doctest\n    doctest.testmod()\n\n    print(f'{test_make_palindrome()=}')\n\n    print("}
{"task_id": "HumanEval/11", "completion": "assert len(a) == len(b)\n    return ''.join(map(lambda x, y: str(int(x) ^ int(y)), a, b))\n    \ndef get_xor_string(n: int, s: str) -> str:\n    \"\"\" Input is n, string s consisting only of 1s and 0s.\n    Perform binary XOR on s n times and return result also as a string.\n    >>> get_xor_string(2, '110')\n    '101'\n    \"\"\"\n    assert n > 0\n    xor_str = s\n    for i in range(n - 1):\n        xor_str = string_xor(xor_str, s)\n    return xor_str\n    \ndef get_xor_strings(n: int, s: str) -> List[str]:\n    \"\"\" Input is n, string s consisting only of 1s and 0s.\n    Perform binary XOR on s n times and return result also as a list of strings.\n    >>> get_xor_strings(2, '110')\n    ['101', '010']\n    \"\"\"\n    assert n > 0\n    xor_str = s\n    for i in range(n - 1):\n        xor_str = string_xor(xor_str, s)\n    return [xor_str]\n    \ndef get_xor_strings_v2(n: int, s: str) -> List[str]:\n    \"\"\" Input is n, string s consisting only of 1s and 0s.\n    Perform binary XOR on s n times and return result also as a list of strings.\n    >>> get_xor_strings_v2(2, '110')\n    ['101', '010']\n    \"\"\"\n    assert n > 0\n    xor_str = s\n    return [xor_str] * n\n    \ndef get_xor_strings_v3(n: int, s: str) -> List[str]:\n    \"\"\" Input is n, string s consisting only of 1s and 0s.\n    Perform binary XOR on s n times and return result also as a list of strings.\n    >>> get_xor_strings_v3(2, '110')\n    ['101', '010']\n    \"\"\"\n    assert n > 0\n    return list(map(lambda x: x, [s] * n))\n    \n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/12", "completion": "return None\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    return None\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    return None\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    return None\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    return None\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in cas"}
{"task_id": "HumanEval/13", "completion": "while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    return b if a % b == 0 else greatest_common_divisor_recursive(b, a % b)\n\n\ndef greatest_common_divisor_recursive_2(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive_2(3, 5)\n    1\n    >>> greatest_common_divisor_recursive_2(25, 15)\n    5\n    \"\"\"\n    return a if b == 0 else greatest_common_divisor_recursive_2(b, a % b)\n\n\ndef greatest_common_divisor_recursive_3(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive_3(3, 5)\n    1\n    >>> greatest_common_divisor_recursive_3(25, 15)\n    5\n    \"\"\"\n    return a if a == b else greatest_common_divisor_recursive_3(b, a - b) if a > b else greatest_common_divisor_recursive_3(a, b - a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    import random\n    import time\n    import timeit\n\n    def time_execution(function):\n        print(\"Time execution of {}:\".format(function))\n        print(timeit.timeit(lambda: function(2, 5), number=1000))\n\n    def time_gcd_function(function):\n        print(\"Time execution of {}:\".format(function))\n        print(timeit.timeit(lambda: function(2, 5), number=1000))\n\n    time_execution(greatest_common_divisor)\n    time_execution(greatest_common_divisor_recursive)\n    time_execution(greatest_common_divisor_recursive_2)\n    time_execution(greatest_common_divisor_recursive_3)\n\n    print()\n\n    print(\"Test execution of greatest_common_divisor_recursive_2\")\n    print(\"**************************************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive_2(*pair)\n    print()\n\n    print(\"Test execution of greatest_common_divisor_recursive_3\")\n    print(\"**************************************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive_3(*pair)\n    print()\n\n    print(\"Test execution of greatest_common_divisor\")\n    print(\"****************************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor(*pair)\n    print()\n\n    print(\"Test execution of greatest_common_divisor_recursive\")\n    print(\"************************************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive(*pair)\n    print()\n\n    print(\"Test execution of greatest_common_divisor_recursive_2\")\n    print(\"************************************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive_2(*pair)\n    print()\n\n    print(\"Test execution of greatest_common_divisor_recursive_3\")\n    print(\"************************************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive_3(*pair)\n    print()\n\n    print(\"Test execution of gcd\")\n    print(\"********************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor(*pair)\n    print()\n\n    print(\"Test execution of gcd_recursive\")\n    print(\"****************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive(*pair)\n    print()\n\n    print(\"Test execution of gcd_recursive_2\")\n    print(\"******************************\")\n    random_pairs = (\n        (random.randrange(1, 1000000), random.randrange(1, 1000000))\n        for i in range(100000)\n    )\n    for pair in random_pairs:\n        greatest_common_divisor_recursive_2(*pair)\n    print()\n\n    print(\"Test execution of gcd_recursive_3\")\n    print(\"******************************\")\n    random_pairs = (\n        (ran"}
{"task_id": "HumanEval/14", "completion": "result = []\n    for n in range(len(string) + 1):\n        result.append(string[:n])\n    return result\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Return True if string is a pangram, False otherwise\n    >>> is_pangram('abc')\n    False\n    >>> is_pangram('abcdefghijklmnopqrstuvwxyz')\n    True\n    \"\"\"\n    letters = set()\n    for letter in string.lower():\n        if letter.isalpha():\n            letters.add(letter)\n    return len(letters) == 26\n\n\ndef is_pangram_2(string: str) -> bool:\n    \"\"\" Return True if string is a pangram, False otherwise\n    >>> is_pangram_2('abc')\n    False\n    >>> is_pangram_2('abcdefghijklmnopqrstuvwxyz')\n    True\n    \"\"\"\n    return set(string.lower()).issubset('abcdefghijklmnopqrstuvwxyz')\n\n\ndef is_pangram_3(string: str) -> bool:\n    \"\"\" Return True if string is a pangram, False otherwise\n    >>> is_pangram_3('abc')\n    False\n    >>> is_pangram_3('abcdefghijklmnopqrstuvwxyz')\n    True\n    \"\"\"\n    return all(letter in string.lower() for letter in 'abcdefghijklmnopqrstuvwxyz')\n\n\ndef is_pangram_4(string: str) -> bool:\n    \"\"\" Return True if string is a pangram, False otherwise\n    >>> is_pangram_4('abc')\n    False\n    >>> is_pangram_4('abcdefghijklmnopqrstuvwxyz')\n    True\n    \"\"\"\n    return all(letter in string.lower() for letter in 'abcdefghijklmnopqrstuvwxyz')\n\n\ndef is_pangram_5(string: str) -> bool:\n    \"\"\" Return True if string is a pangram, False otherwise\n    >>> is_pangram_5('abc')\n    False\n    >>> is_pangram_5('abcdefghijklmnopqrstuvwxyz')\n    True\n    \"\"\"\n    letters = set()\n    for letter in string.lower():\n        if letter.isalpha():\n            letters.add(letter)\n    return len(letters) == 26"}
{"task_id": "HumanEval/15", "completion": "\"\"\"\n    \"\"\"\n    return \" \".join(list(range(n+1)))\n\ndef int_to_bin(n: int) -> str:\n    \"\"\"\n    >>> int_to_bin(0)\n    '0'\n    >>> int_to_bin(1)\n    '1'\n    >>> int_to_bin(2)\n    '10'\n    >>> int_to_bin(3)\n    '11'\n    >>> int_to_bin(4)\n    '100'\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return str(bin(n))[2:]\n\ndef int_sequence(n: int) -> list:\n    \"\"\" Return a list of ints starting from 0 upto n inclusive.\n    >>> int_sequence(0)\n    []\n    >>> int_sequence(1)\n    [0]\n    >>> int_sequence(2)\n    [0, 1]\n    >>> int_sequence(3)\n    [0, 1, 2]\n    >>> int_sequence(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return list(range(n+1))\n\ndef string_to_int(s: str) -> int:\n    \"\"\" Return an int from string s\n    >>> string_to_int('0')\n    0\n    >>> string_to_int('1')\n    1\n    >>> string_to_int('2')\n    2\n    >>> string_to_int('3')\n    3\n    >>> string_to_int('4')\n    4\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return int(s)\n\ndef bin_to_int(s: str) -> int:\n    \"\"\" Return an int from binary string s\n    >>> bin_to_int('0')\n    0\n    >>> bin_to_int('1')\n    1\n    >>> bin_to_int('10')\n    2\n    >>> bin_to_int('11')\n    3\n    >>> bin_to_int('100')\n    4\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return int(s, 2)\n\ndef int_to_string(n: int) -> str:\n    \"\"\" Return a string from integer n\n    >>> int_to_string(0)\n    '0'\n    >>> int_to_string(1)\n    '1'\n    >>> int_to_string(2)\n    '2'\n    >>> int_to_string(3)\n    '3'\n    >>> int_to_string(4)\n    '4'\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return str(n)\n\ndef bin_sequence(n: int) -> list:\n    \"\"\" Return a list of binary ints starting from 0 upto n inclusive.\n    >>> bin_sequence(0)\n    ['0']\n    >>> bin_sequence(1)\n    ['0', '1']\n    >>> bin_sequence(2)\n    ['0', '1', '10', '11']\n    >>> bin_sequence(3)\n    ['0', '1', '10', '11', '100', '101', '110', '111']\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return list(map(int_to_bin, range(n+1)))\n\ndef string_to_bin(s: str) -> str:\n    \"\"\" Return a binary string from string s\n    >>> string_to_bin('0')\n    '0'\n    >>> string_to_bin('1')\n    '1'\n    >>> string_to_bin('2')\n    '10'\n    >>> string_to_bin('3')\n    '11'\n    >>> string_to_bin('4')\n    '100'\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return bin(int(s))[2:]\n\ndef bin_to_string(s: str) -> str:\n    \"\"\" Return a string from binary string s\n    >>> bin_to_string('0')\n    '0'\n    >>> bin_to_string('1')\n    '1'\n    >>> bin_to_string('10')\n    '2'\n    >>> bin_to_string('11')\n    '3'\n    >>> bin_to_string('100')\n    '4'\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return str(int(s, 2))\n\ndef bin_int_to_string(s: str) -> str:\n    \"\"\" Return a string from binary int s\n    >>> bin_int_to_string(0)\n    '0'\n    >>> bin_int_to_string(1)\n    '1'\n    >>> bin_int_to_string(2)\n    '2'\n    >>> bin_int_to_string(3)\n    '3'\n    >>> bin_int_to_string(4)\n    '4'\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return str(int(s, 2))\n\ndef bin_string_to_int(s: str) -> int:\n    \"\"\" Return an int from binary string s\n    >>> bin_string_to_int('0')\n    0\n    >>> bin_string_to_int('1')\n    1\n    >>> bin_string_to_int('10')\n    2\n    >>> bin_string_to_int('11')\n    3\n    >>> bin_string_to_int('100')\n    4\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return int(s, 2)\n\ndef bin_int_to_bin_string(s: str) -> str:\n    \"\"\" Return a binary string from binary int s\n    >>> bin_int_to_bin_string(0)\n    '0'\n    >>> bin_int_to_bin_string(1)\n    '1'\n    >>> bin_int_to_bin_string(2)\n    '10'\n    >>> bin_int_to_bin_string(3)\n    '11'\n    >>> bin_int_to_bin_string(4)\n    '100'\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return bin(s)\n\ndef bin_string_to_bin_int(s: str) -> int:\n    \"\"\" Return an int from binary string s\n    >>> bin_string_to_bin_int('0')\n    0\n    >>> bin_string_to_bin_int('1')\n    1\n    >>> bin_string_to_bin_int('10')\n    2\n    >>> bin_string_to_bin_int('11')\n    3\n    >>> bin_string_to_bin_int('100')\n    4\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return int(s, 2)\n\ndef bin_string_to_bin_int_sequence(s: str) -> list:\n    \"\"\" Return a list of ints from binary string s\n    >>> bin_string_to_bin_int_sequence('0')\n    []\n    >>> bin_string_to_bin_int_sequence('1')\n    [0]\n    >>> bin_string_to_bin_int_sequence('10')\n    [0, 1]\n    >>> bin_string_to_bin_int_sequence('11')\n    [0, 1, 2]\n    >>> bin_string_to_bin_int_sequence('100')\n    [0, 1, 2, 3]\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return list(map(bin_string_to_bin_int, s))\n\ndef bin_int_to_bin_string_sequence(s: str) -> list:\n    \"\"\" Return a list of binary ints from binary int s\n    >>> bin_int_to_bin_string_sequence(0)\n    ['0']\n    >>> bin_int_to_bin_string_sequence(1)\n    ['1']\n    >>> bin_int_to_bin_string_sequence(2)\n    ['10']\n    >>> bin_int_to_bin_string_sequence(3)\n    ['11']\n    >>> bin_int_to_bin_string_sequence(4)\n    ['100']\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return list(map(bin_int_to_bin_string, s))\n\ndef bin_string_to_bin_int_sequence(s: str) -> list:\n    \"\"\" Return a list of ints from binary string s\n    >>> bin_string_to_bin_int_sequence('0')\n    []\n    >>> bin_string_to_bin_int_sequence('1')\n    [0]\n    >>> bin_string_to_bin_int_sequ"}
{"task_id": "HumanEval/16", "completion": "return len(set(string.upper()))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    \n    \n    def count_distinct_characters(string: str) -> int:\n        \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n        \"\"\"\n        return len(set(string.upper()))\n\n    if __name__ == '__main__':\n        import doctest\n        doctest.testmod()\n        \n        \n        def count_distinct_characters(string: str) -> int:\n        \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n        \"\"\"\n        return len(set(string.upper()))\n\n    if __name__ == '__main__':\n        import doctest\n        doctest.testmod()\n        \n        \n        def count_distinct_characters(string: str) -> int:\n        \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n        \"\"\"\n        return len(set(string.upper()))\n\n    if __name__ == '__main__':\n        import doctest\n        doctest.testmod()\n        \n        \n        def count_distinct_characters(string: str) -> int:\n        \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n        \"\"\"\n        return len(set(string.upper()"}
{"task_id": "HumanEval/17", "completion": "result = []\n    note_lengths = {'o': 4, 'o|': 2, '.|': 1}\n    for i in range(0, len(music_string), 2):\n        note_type = music_string[i:i + 2]\n        note_length = note_lengths[note_type]\n        result.append(note_length)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    print(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "return len(string) - len(string) // len(substring) + 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod("}
{"task_id": "HumanEval/19", "completion": "return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/20", "completion": "if not numbers:\n        raise ValueError(\"Must supply a list of at least one value\")\n    closest_value = float(\"inf\")\n    closest_elements = (0, 0)\n    for i, number in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            distance = abs(number - numbers[j])\n            if distance < closest_value:\n                closest_value = distance\n                closest_elements = (number, numbers[j])\n    return closest_elements\n\n\ndef find_closest_elements_test(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Must supply a list of at least one value\")\n    closest_value = float(\"inf\")\n    closest_elements = (0, 0)\n    for i, number in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            distance = abs(number - numbers[j])\n            if distance < closest_value:\n                closest_value = distance\n                closest_elements = (number, numbers[j])\n    return closest_elements\n\n\ndef find_closest_elements_test(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if"}
{"task_id": "HumanEval/21", "completion": "return [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\n\"\"\"\n\"\"\"\nfrom typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n    print(numbers)\n\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\n\"\"\"\n\"\"\"\nfrom typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n    print(numbers)\n\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\n\"\"\"\n\"\"\"\nfrom typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n    print(numbers)\n\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\n\"\"\"\n\"\"\"\nfrom typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n    print(numbers)\n\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\n\"\"\"\n\"\"\"\nfrom typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in"}
{"task_id": "HumanEval/22", "completion": "return [i for i in values if isinstance(i, int)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/23", "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\ndef strcpy(destination: str, source: str) -> str:\n    \"\"\" Copy string from source to destination.\n    >>> strcpy('', '')\n    ''\n    >>> strcpy('abc', '123')\n    '123'\n    >>> strcpy('abc', '1234')\n    '1234'\n    >>> strcpy('abc', '')\n    ''\n    >>> strcpy('', 'abc')\n    'abc'\n    >>> strcpy('abcdef', 'ghi')\n    'ghi'\n    >>> strcpy('abcdef', 'ghijk')\n    'ghijk'\n    \"\"\"\n    for i in range(len(source)):\n        destination += source[i]\n    return destination\n\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 1 if string1 is greater than string2, 0 if string1 is equal to\n    string2, or -1 if string1 is less than string2.\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'abd')\n    -1\n    >>> strcmp('abd', 'abc')\n    1\n    >>> strcmp('abc', 'abcd')\n    -1\n    >>> strcmp('abd', 'abcd')\n    -1\n    >>> strcmp('abcd', 'abd')\n    1\n    >>> strcmp('abcd', 'abc')\n    -1\n    \"\"\"\n    if len(string1) > len(string2):\n        return 1\n    elif len(string1) < len(string2):\n        return -1\n    else:\n        for i in range(len(string1)):\n            if ord(string1[i]) > ord(string2[i]):\n                return 1\n            elif ord(string1[i]) < ord(string2[i]):\n                return -1\n        return 0\n\n\ndef strcat(destination: str, source: str) -> str:\n    \"\"\" Concatenate source to destination.\n    >>> strcat('', '')\n    ''\n    >>> strcat('abc', '123')\n    'abc123'\n    >>> strcat('abc', '1234')\n    'abc1234'\n    >>> strcat('abc', '')\n    'abc'\n    >>> strcat('', 'abc')\n    'abc'\n    >>> strcat('abcdef', 'ghi')\n    'abcdefghi'\n    >>> strcat('abcdef', 'ghijk')\n    'abcdefghijk'\n    \"\"\"\n    for i in range(len(source)):\n        destination += source[i]\n    return destination\n\n\ndef strncat(destination: str, source: str, n: int) -> str:\n    \"\"\" Concatenate source to destination.\n    >>> strncat('', '', 1)\n    ''\n    >>> strncat('abc', '123', 1)\n    'abc123'\n    >>> strncat('abc', '1234', 1)\n    'abc1234'\n    >>> strncat('abc', '', 1)\n    'abc'\n    >>> strncat('', 'abc', 1)\n    'abc'\n    >>> strncat('abcdef', 'ghi', 3)\n    'abcdefghi'\n    >>> strncat('abcdef', 'ghijk', 3)\n    'abcdefghijk'\n    \"\"\"\n    for i in range(n):\n        destination += source[i]\n    return destination\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed version of string.\n    >>> strrev('abc')\n    'cba'\n    >>> strrev('123')\n    '321'\n    >>> strrev('abcde')\n    'edcba'\n    \"\"\"\n    string_reversed = ''\n    for i in range(len(string)):\n        string_reversed = string[i] + string_reversed\n    return string_reversed\n\n\ndef strlwr(string: str) -> str:\n    \"\"\" Return lowercase version of string.\n    >>> strlwr('ABCDEF')\n    'abcdef'\n    >>> strlwr('123')\n    '123'\n    >>> strlwr('abcde')\n    'abcdef'\n    \"\"\"\n    string_lower = ''\n    for i in string:\n        if ord(i) >= 65 and ord(i) <= 90:\n            string_lower += chr(ord(i) + 32)\n        else:\n            string_lower += i\n    return string_lower\n\n\ndef strupr(string: str) -> str:\n    \"\"\" Return uppercase version of string.\n    >>> strupr('abcdef')\n    'ABCDEF'\n    >>> strupr('123')\n    '123'\n    >>> strupr('abc')\n    'ABC'\n    \"\"\"\n    string_upper = ''\n    for i in string:\n        if ord(i) >= 97 and ord(i) <= 122:\n            string_upper += ch"}
{"task_id": "HumanEval/24", "completion": "divisor = n-1\n    while divisor > 1:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n        \n    return 1\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all divisors of n, smaller than n\n    >>> sum_of_divisors(15)\n    21\n    \"\"\"\n    divisor = n-1\n    total = 0\n    while divisor > 1:\n        if n % divisor == 0:\n            total += divisor\n        divisor -= 1\n    return total\n\n\ndef factorial(n: int) -> int:\n    \"\"\" For a given number n, find the product of all numbers from 1 to n, inclusive\n    >>> factorial(5)\n    120\n    \"\"\"\n    \n    answer = 1\n    while n > 0:\n        answer *= n\n        n -= 1\n    return answer\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Given a number n, return True if n is prime, and False otherwise\n    >>> is_prime(15)\n    False\n    \"\"\"\n    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            return False\n        divisor += 1\n    return True\n    \ndef nth_prime(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    count = 0\n    answer = 0\n    divisor = 1\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n\ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n    \ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n    \ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n\ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n\ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n    \ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while count < n:\n        divisor += 1\n        if is_prime(divisor):\n            count += 1\n            answer = divisor\n    return answer\n\ndef nth_prime_number(n: int) -> int:\n    \"\"\" Return the nth prime, counting from 1\n    >>> nth_prime(1)\n    2\n    \"\"\"\n    divisor = 2\n    count = 0\n    answer = 0\n    while coun"}
{"task_id": "HumanEval/25", "completion": "if n == 1:\n        return [1]\n    res = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            res.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        res.append(n)\n    return res\n\n\ndef lcm(factors: List[int]) -> int:\n    \"\"\" Return least common multiple of given list of numbers,\n    which is the smallest positive integer divisible by all numbers in the list\n    >>> lcm([2, 3, 5])\n    30\n    >>> lcm([7, 13, 17])\n    1285\n    >>> lcm([3, 4, 7])\n    84\n    \"\"\"\n    res = 1\n    for i in factors:\n        res = lcm_helper(res, i)\n    return res\n\n\ndef lcm_helper(a: int, b: int) -> int:\n    \"\"\" Return least common multiple of a and b,\n    which is the smallest positive integer divisible by both a and b\n    >>> lcm_helper(3, 5)\n    15\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a * (b + 1)\n\n\ndef lcm_all(numbers: List[int]) -> int:\n    \"\"\" Return least common multiple of list of numbers,\n    which is the smallest positive integer divisible by all numbers in the list\n    >>> lcm_all([4, 6, 8, 10])\n    24\n    >>> lcm_all([12, 18, 24, 30])\n    72\n    >>> lcm_all([5, 7, 11, 13])\n    191\n    \"\"\"\n    return lcm(map(factorize, numbers))\n\n\ndef gcd(factors: List[int]) -> int:\n    \"\"\" Return greatest common denominator of given list of numbers,\n    which is the largest positive integer that divides all numbers in the list\n    >>> gcd([12, 18, 24, 30])\n    6\n    \"\"\"\n    res = 1\n    for i in factors:\n        res = gcd_helper(res, i)\n    return res\n\n\ndef gcd_helper(a: int, b: int) -> int:\n    \"\"\" Return greatest common denominator of a and b,\n    which is the largest positive integer that divides both a and b\n    >>> gcd_helper(12, 18)\n    6\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_all(numbers: List[int]) -> int:\n    \"\"\" Return greatest common denominator of list of numbers,\n    which is the largest positive integer that d"}
{"task_id": "HumanEval/26", "completion": "seen = set()\n    res = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        res.append(num)\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(remove_duplicates([1, 2, 3, 2, 4]))"}
{"task_id": "HumanEval/27", "completion": "string = str(string)\n    new_string = ''\n    for i in string:\n        if i.islower():\n            new_string += i.upper()\n        elif i.isupper():\n            new_string += i.lower()\n        else:\n            new_string += i\n    return new_string\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Generate and return the nth fibonacci number.\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n.\n    >>> factorial(4)\n    24\n    \"\"\"\n    factorial = 1\n    for i in range(1,"}
{"task_id": "HumanEval/28", "completion": "pass\n\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated = ''\n    for s in strings:\n        concatenated = concatenated + s\n    return concatenated\n\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated = ''\n    for s in strings:\n        concatenated = concatenated + s\n    return concatenated"}
{"task_id": "HumanEval/29", "completion": "return [x for x in strings if x.startswith(prefix)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    print(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))"}
{"task_id": "HumanEval/30", "completion": "l = [x for x in l if x > 0]\n    return l\n\ndef get_square(l: list):\n    \"\"\"Return list of squares of each number in the list.\n    >>> get_square([-1, 2, -4, 5, 6])\n    [1, 4, 16, 25, 36]\n    >>> get_square([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [25, 9, 25, 4, 9, 25, 81, 0, 144, 1, 100]\n    \"\"\"\n    l = [x * x for x in l]\n    return l\n\ndef get_pairs(l: list):\n    \"\"\"Return a list of the first and last elements of each list in the list.\n    >>> get_pairs([[], [2], [2, 2], [2, 2, 2]])\n    [[], 2, 2, 2, 2]\n    >>> get_pairs([[], [2, 2], [2, 2, 2], [2, 2, 2, 2]])\n    [[], 2, 2, 2, 2]\n    \"\"\"\n    l = [[l[0], l[len(l) - 1]]]\n    return l\n\ndef get_list_from_file(filename: str):\n    \"\"\"Return a list of numbers that are in a file.\n    >>> get_list_from_file(\"input.txt\")\n    [1, 3, 6, 7, 8]\n    \"\"\"\n    with open(filename, \"r\") as file:\n        list = [int(line.strip()) for line in file]\n    return list\n\ndef get_tuple_from_file(filename: str):\n    \"\"\"Return a tuple of numbers that are in a file.\n    >>> get_tuple_from_file(\"input.txt\")\n    (1, 3, 6, 7, 8)\n    \"\"\"\n    with open(filename, \"r\") as file:\n        list = [int(line.strip()) for line in file]\n    return tuple(list)\n\ndef get_dict_from_file(filename: str):\n    \"\"\"Return a dictionary of numbers that are in a file.\n    >>> get_dict_from_file(\"input.txt\")\n    {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}\n    \"\"\"\n    with open(filename, \"r\") as file:\n        list = [int(line.strip()) for line in file]\n    return {i: list[i] for i in range(len(list))}\n\ndef get_file_from_dict(dictionary: dict, filename: str):\n    \"\"\"Write a dictionary to a file.\"\"\"\n    with open(filename, \"w\") as file:\n        for key, value in dictionary.items():\n            file.write(f\"{key}: {value}\\n\")\n    return None\n\n\ndef get_sum(l: list, f):\n    \"\"\"Return sum of function of numbers in the list.\n    >>> get_sum([-1, 2, -4, 5, 6], abs)\n    10\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], abs)\n    104\n    \"\"\"\n    summ = 0\n    for x in l:\n        summ += f(x)\n    return summ\n\n\ndef get_max(l, f):\n    \"\"\"Return max number in the list.\n    >>> get_max([-1, 2, -4, 5, 6], abs)\n    6\n    >>> get_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], abs)\n    123\n    \"\"\"\n    max_num = f(l[0])\n    for i in l[1:]:\n        if f(i) > max_num:\n            max_num = f(i)\n    return max_num\n\n\ndef get_min(l, f):\n    \"\"\"Return min number in the list.\n    >>> get_min([-1, 2, -4, 5, 6], abs)\n    -4\n    >>> get_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], abs)\n    -5\n    \"\"\"\n    min_num = f(l[0])\n    for i in l[1:]:\n        if f(i) < min_num:\n            min_num = f(i)\n    return min_num\n\n\ndef get_average(l, f):\n    \"\"\"Return average of function of numbers in the list.\n    >>> get_average([-1, 2, -4, 5, 6], abs)\n    1.3333333333333333\n    >>> get_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], abs)\n    4.333333333333333\n    \"\"\"\n    summ = 0\n    for x in l:\n        summ += f(x)\n    return summ / len(l)\n\n\ndef get_median(l, f):\n    \"\"\"Return median of function of numbers in the list.\n    >>> get_median([-1, 2, -4, 5, 6], abs)\n    2.0\n    >>> get_median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], abs)\n    123.0\n    \"\"\"\n    summ = 0\n    for x in l:\n        summ += f(x)\n    summ = summ / len(l)\n    summ_list = [summ for i in l]\n    summ_list.sort()\n    if len(summ_list) % 2 == 0:\n        return summ_list[len(summ_list) // 2] + summ_list[len(summ_list) // 2 - 1] / 2\n    else:\n        return summ_list[len(summ_list) // 2]\n\n\ndef get_frequency(dictionary: dict):\n    \"\"\"Return frequency of numbers in the list.\"\"\"\n    freq = {}\n    for i in dictionary.values():\n        if i in freq.keys():\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef get_mean(dictionary: dict, f):\n    \"\"\"Return mean of function of numbers in the list.\"\"\"\n    summ = 0\n    for i in dictionary.values():\n        summ += f(i)\n    summ = summ / len(dictionary.values())\n    summ_list = [summ for i in dictionary.values()]\n    summ_list.sort()\n    if len(summ_list) % 2 == 0:\n        return summ_list[len(summ_list) // 2] + summ_list[len(summ_list) // 2 - 1] / 2\n    else:\n        return summ_list[len(summ_list) // 2]\n\n\ndef get_mode(dictionary: dict):\n    \"\"\"Return mode of numbers in the list.\"\"\"\n    freq = get_frequency(dictionary)\n    return max(freq, key=freq.get)\n\n\ndef get_quantile(dictionary: dict, quantile: int, f):\n    \"\"\"Return quantile of function of numbers in the list.\"\"\"\n    summ = 0\n    summ_list = [summ for i in dictionary.values()]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile = summ_list[len(summ_list) // quantile]\n    summ_list.sort()\n    summ_list_quantile"}
{"task_id": "HumanEval/31", "completion": "if n == 1 or n == 0 or n % 2 == 0:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(3, int(n**(1/2))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef find_primes(n):\n    \"\"\"Return a list of all prime numbers up to and including a given number n.\n    >>> find_primes(101)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    >>> find_primes(1000)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397]\n    \"\"\"\n    primes = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\ndef find_divisors(n):\n    \"\"\"Return a list of all divisors of a given number n.\n    >>> find_divisors(512)\n    [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n    >>> find_divisors(1000)\n    [1, 2, 4, 5, 8, 10, 20, 25, 50, 100, 1000]\n    >>> find_divisors(1)\n    [1]\n    >>> find_divisors(0)\n    [1]\n    >>> find_divisors(2)\n    [1, 2]\n    >>> find_divisors(3)\n    [1, 3]\n    >>> find_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    >>> find_divisors(24)\n    [1, 2, 3, 4, 6, 8, 12, 24]\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\ndef find_primes_with_divisors(n):\n    \"\"\"Return a list of all prime numbers up to and including a given number n.\n    >>> find_primes_with_divisors(101)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    >>> find_primes_with_divisors(1000)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397]\n    \"\"\"\n    primes = []\n    for i in range(1, n+1):\n        if is_prime(i) and len(find_divisors(i)) >= 2:\n            primes.append(i)\n    return primes\n\n\ndef find_primes_with_divisors_and_multiplicity(n):\n    \"\"\"Return a list of tuples (p, m) where p is a prime number and m is the multiplicity of p in the number n.\n    >>> find_primes_with_divisors_and_multiplicity(101)\n    [(2, 1), (3, 1), (5, 1), (7, 1), (11, 1), (13, 1), (17, 1), (19, 1), (23, 1), (29, 1), (31, 1), (37, 1), (41, 1), (43, 1), (47, 1), (53, 1), (59, 1), (61, 1), (67, 1), (71, 1), (73, 1), (79, 1), (83, 1), (89, 1), (97, 1)]\n    >>> find_primes_with_divisors_and_multiplicity(1000)\n    [(2, 1), (3, 1), (5, 1), (7, 1), (11, 1), (13, 1), (17, 1), (19, 1), (23, 1), (29, 1), (31, 1), (37, 1), (41, 1), (43, 1), (47, 1), (53, 1), (59, 1), (61, 1), (67, 1), (71, 1), (73, 1), (79, 1), (83, 1), (89, 1), (97, 1), (101, 1), (103, 1), (107, 1), (109, 1), (113, 1), (127, 1), (131, 1), (137, 1), (139, 1), (149, 1), (151, 1), (157, 1), (163, 1), (167, 1), (173, 1), (179, 1), (181, 1), (191, 1), (193, 1), (197, 1), (199, 1), (211, 1), (223, 1), (227, 1), (229, 1), (233, 1), (239, 1), (241, 1), (251, 1), (257, 1), (263, 1), (269, 1), (271, 1), (277, 1), (281, 1), (283, 1), (293, 1), (307, 1), (311, 1), (313, 1), (317, 1), (331, 1), (337, 1), (347, 1), (349, 1), (353, 1), (359, 1), (367, 1), (373, 1), (379, 1), (383, 1), (389, 1), (397, 1)]\n    \"\"\"\n    primes_multiplicity = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            divisors = find_divisors(i)\n            for j in range(2, i):\n                if j in divisors:\n                    divisors.remove(j)\n            primes_multiplicity.append((i, len(divisors)))\n    return primes_multiplicity\n\n\ndef find_primes_with_divisors_and_multiplicity_and_sum(n):\n    \"\"\"Return a list of tuples (p, m, s) where p is a prime number, m is the multiplicity of p in the number n, and s is the sum of the divisors of p.\n    >>> find_primes_with_divisors_and_multiplicity_and_sum(101)\n    [(2, 1, 1), (3, 1, 3), (5, 1, 5), (7, 1, 7), (11, 1, 11), (13, 1, 13), (17, 1, 17), (19, 1, 19), (23, 1, 23), (29, 1, 29), (31, 1, 31), (37, 1, 37), (41, 1, 41), (43, 1, 43), (47, 1, 47), (53, 1, 53), (59, 1, 59), (61, 1, 61), (67, 1, 67), (71, 1, 71), (73, 1, 73), (79, 1, 79), (83, 1, 83), (89, 1, 89), (97, 1, 97)]\n    >>> find_primes_with_divisors_and_multiplicity_and_sum(1000)\n    [(2, 1, 2), (3, 1, 3), (5, 1, 5), (7, 1, 7), (11, 1, 11), (13, 1, 13), (17, 1, 17), (19, 1, 19), (23, 1, 23), (29, 1, 29), (31, 1, 31), (37, 1, 37), (41, 1, 41), (43, 1, 43), (47, 1, 47), (53, 1, 53), (59, 1, 59), (61, 1, 61), (67, 1, 67), (71, 1, 71), (73, 1, 73), (79, 1, 79), (83, 1, 83), (89, 1, 89), (97, 1, 97), (101, 1, 101), (103, 1, 103), (107, 1, 107), (109, 1, 109), (113, 1, 113), (127, 1, 127), (131, 1, 131), (137, 1, 137), (139, 1, 139), (149, 1, 149), (151, 1, 151), (157, 1, 157), (163, 1, 163), (167, 1, 167), (173, 1, 173), (179, 1, 179), (181, 1, 181), (191, 1, 191), (193, 1, 193), (197, 1, 197), (199, 1, 199), (211, 1, 211), (223, 1, 223), (227, 1, 227), (229, 1, 229), (233, 1, 233), (239, 1, 239), (241, 1, 241), (251, 1, 251), (257, 1, 257), (263, 1, 263), (269, 1, 269), (271, 1, 271), (277, 1, 277), (281, 1, 281), (283, 1, 283), (293, 1, 293), (307, 1, 307), (311, 1, 311), (313, 1, 313), (317, 1, 317), (331, 1, 331), (337, 1, 337), (347, 1, 347), (349, 1, 349), (353, 1, 353), (359, 1, 359), (367, 1, 367), (373, 1, 373), (379, 1, 379), (383, 1, 383), (389, 1, 389), (397, 1, 397)]\n    \"\"\"\n    primes_multiplicity_sum = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            divisors = find_divisors(i)\n            divisors_sum = sum(divisors)\n            primes_multiplicity_sum.append((i, len(divisors), divisors_sum))\n    return primes_multiplicity_sum\n\n\ndef main():\n    \"\"\"\n    This function is used to test the functions above.\n    \"\"\"\n    for i in range(1, 101):\n        divisors = find_divisors(i)\n        print(divisors)\n    print()\n    for i in range(1, 101):\n        divisors_sum = sum(find_divisors(i))\n        print(divisors_sum)\n    print()\n    for i in range(1, 101):\n        divisors_sum = sum(find_divisors(i))\n        if divisors_sum % 12 == 0:\n            print(i, divisors_sum)\n    print()\n    for i in range(1, 101):\n        divisors_sum = sum(find_divisors(i))\n        if divisors_sum % 12 == 0:\n            print(i, divisors_sum, find_divisors(i))\n    print()\n    for i in range(1, 101):\n        divisors_sum = sum(find_divisors(i))\n        if divisors_sum % 12 == 0:\n            print(i, divisors_sum, find_divisors(i), find_divisors(i)[0], find_divisors(i)[1], find_divisors(i)[2])\n    print()\n    for i in range(1, 101):\n        divisors_sum = sum(find_divisors(i))\n        if divisors_sum % 12 == 0:\n            print(i, divisors_sum, find_divisors(i), find_divisors(i)[0], find_divisors(i)[1], find_divisors(i)[2],\n                  find_divisors(i)[0] + find_divisors(i)[1] + find_divisors(i)[2])\n    print()\n    for i in range(1, 101):\n        divisors_sum = sum(find_divisors(i))\n        if divisors_sum % 12 == 0:\n            print(i, divisors_sum, find_divisors(i), find_divisors(i)[0], find_divisors(i)[1], find_divisors(i)[2],\n                  find_divisors(i)[0] + find_divisors(i)[1] + find_divisors(i)[2], is_perfect(divisors_sum))\n\n\ndef is_perfect(divisors_sum):\n    \"\"\"\n    This function is used to check if a number is perfect.\n    \"\"\"\n    if divisors_sum % 24 == 0:\n        return True\n    else:\n        return False\n\n\ndef find_divisors(n):\n    \"\"\"\n    This function is used to find divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\nif __name__ == \"__main__\":\n    main()\n\n# %%\n\nimport math\nimport bisect\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors_sum\nprint(divisors)\n\n# %%\n\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\n# %%\nimport bisect\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n          107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n          227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\n          349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n          467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n          613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\n          751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n          887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprimes_square = [i**2 for i in primes]\nprimes_cubic = [i**3 for i in primes]\ndivisors = [i for i in range(1, 280) if bisect.bisect(primes_square, i) or bisect.bisect(primes, i) or bisect.bisect(primes_cubic, i)]\ndivisors_sum = sum(divisors)\ndivisors\nprint(divisors)\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    \"\"\"Check if n is a perfect square.\n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(4)\n    True\n    >>> is_perfect_square(10)\n    False\n    >>> is_perfect_square(100)\n    True\n    >>> is_perfect_square(101)\n    False\n    \"\"\"\n    return n >= 0 and (n ** 0.5) % 1 == 0\ndef is_palindrome(n):\n    \"\"\"Check if n is a palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\ndef is_abundant(n):\n    \"\"\"Check if n is an abundant number.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(14)\n    False\n    >>> is_abundant(18)\n    True\n    \"\"\"\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors) > n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    \"\"\"Check if n is a perfect square.\n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(4)\n    True\n    >>> is_perfect_square(10)\n    False\n    >>> is_perfect_square(100)\n    True\n    >>> is_perfect_square(101)\n    False\n    \"\"\"\n    return n >= 0 and (n ** 0.5) % 1 == 0\ndef is_palindrome(n):\n    \"\"\"Check if n is a palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\ndef is_abundant(n):\n    \"\"\"Check if n is an abundant number.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(14)\n    False\n    >>> is_abundant(18)\n    True\n    \"\"\"\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors) > n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    \"\"\"Check if n is a perfect square.\n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(4)\n    True\n    >>> is_perfect_square(10)\n    False\n    >>> is_perfect_square(100)\n    True\n    >>> is_perfect_square(101)\n    False\n    \"\"\"\n    return n >= 0 and (n ** 0.5) % 1 == 0\ndef is_palindrome(n):\n    \"\"\"Check if n is a palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\ndef is_abundant(n):\n    \"\"\"Check if n is an abundant number.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(14)\n    False\n    >>> is_abundant(18)\n    True\n    \"\"\"\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors) > n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    \"\"\"Check if n is a perfect square.\n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(4)\n    True\n    >>> is_perfect_square(10)\n    False\n    >>> is_perfect_square(100)\n    True\n    >>> is_perfect_square(101)\n    False\n    \"\"\"\n    return n >= 0 and (n ** 0.5) % 1 == 0\ndef is_palindrome(n):\n    \"\"\"Check if n is a palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\ndef is_abundant(n):\n    \"\"\"Check if n is an abundant number.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(14)\n    False\n    >>> is_abundant(18)\n    True\n    \"\"\"\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors) > n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    \"\"\"Check if n is a perfect square.\n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(4)\n    True\n    >>> is_perfect_square(10)\n    False\n    >>> is_perfect_square(100)\n    True\n    >>> is_perfect_square(101)\n    False\n    \"\"\"\n    return n >= 0 and (n ** 0.5) % 1 == 0\nde"}
{"task_id": "HumanEval/32", "completion": "# Polynomial is in the form\n    # xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n = 0\n    #\n    # In the matrix form:\n    #\n    #   [ xs[1]  xs[2]   xs[3]  .... xs[n-1]  xs[n] ]\n    # A = [ x^0  x^1    x^2    .... x^(n-1)  x^(n) ]\n    #\n    # In general, coeff of xs[i] is in xs[i] and coeff of x is in x^i\n    #\n    # Solution of Ax = b is x = A^-1 b\n    #\n    # The solution is x = A^-1 b\n    #\n    # A is a coefficient matrix and x is an unknown matrix\n    #\n    # We are solving Ax = b where A is a square matrix and x and b are vectors\n    #\n    # A is a Vandermonde matrix:\n    #\n    # A = [ 1  x_0 1  x_0^2  1  x_0^3  ...  1  x_0^n  ...  x_0^n ]\n    #     [ 1  x_1 1  x_1^2  1  x_1^3  ...  1  x_1^n  ...  x_1^n ]\n    #     [ 1  x_2 1  x_2^2  1  x_2^3  ...  1  x_2^n  ...  x_2^n ]\n    #     ...\n    #     [ 1  x_n 1  x_n^2  1  x_n^3  ...  1  x_n^n  ...  x_n^n ]\n    #\n    # We know x is a vector of unknowns and A has n equations and n unknowns\n    #\n    # The solution is x = A^-1 b\n    #\n    # We have A^-1 b = A^-1 (Ax - b)\n    #\n    # A^-1 (Ax - b) = A^-1 A(x - b)\n    #\n    # A^-1 A(x - b) = A^-1 Ax - A^-1 b = 0\n    #\n    # x = A^-1 b\n    #\n    # The solution is x = A^-1 b\n    #\n    # For n-degree polynomia"}
{"task_id": "HumanEval/33", "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    l_prime = sorted(l_prime)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime[i//3]\n    return l\n\n\ndef pascal_triangle(n: int):\n    \"\"\"This function takes an integer n and returns a pascal triangle with the number of rows equal to n.\n    >>> pascal_triangle(2)\n    [[1], [1, 1]]\n    >>> pascal_triangle(3)\n    [[1], [1, 1], [1, 2, 1]]\n    \"\"\"\n    triangle = [[1]]\n    for i in range(1, n+1):\n        row = [1]\n        for j in range(1, i):\n            row.append(triangle[i-1][j-1] + triangle[i-1][j])\n        row.append(1)\n        triangle.append(row)\n    return triangle\n\n\ndef pascal_triangle_from_row(pascal_row: list[int]):\n    \"\"\"This function takes a pascal row pascal_row and returns a pascal triangle with a row pascal_row.\n    >>> pascal_triangle_from_row([1, 1])\n    [[1], [1, 1]]\n    >>> pascal_triangle_from_row([1, 1, 1])\n    [[1], [1, 1], [1, 2, 1]]\n    \"\"\"\n    triangle = [[1], [1, 1]]\n    for i in range(2, pascal_row+1):\n        row = [1]\n        for j in range(1, i):\n            row.append(triangle[i-1][j-1] + triangle[i-1][j])\n        row.append(1)\n        triangle.append(row)\n    return triangle\n\n\ndef pascal_triangle_from_triangle(pascal_triangle: list[list[int]]):\n    \"\"\"This function takes a pascal triangle pascal_triangle and returns a pascal triangle with pascal_triangle plus a row of pascal_triangle.\n    >>> pascal_triangle_from_triangle([[1]])\n    [[1], [1, 1]]\n    >>> pascal_triangle_from_triangle([[1, 1], [1, 1, 1]])\n    [[1], [1, 1], [1, 2, 1]]\n    \"\"\"\n    triangle = pascal_triangle.copy()\n    triangle.append([1])\n    for i in range(1, len(triangle)):\n        for j in range(1, i):\n            triangle[i][j] = pascal_triangle[i-1][j-1] + pascal_triangle[i-1][j]\n    return triangle\n\n\ndef pascal_triangle_from_triangle_row(pascal_triangle: list[list[int]], pascal_row: list[int]):\n    \"\"\"This function takes a pascal triangle pascal_triangle and a pascal row pascal_row and returns a pascal triangle with pascal_triangle plus pascal_row.\n    >>> pascal_triangle_from_triangle_row([[1]], [1])\n    [[1], [1, 1]]\n    >>> pascal_triangle_from_triangle_row([[1, 1]], [1, 1])\n    [[1], [1, 1], [1, 2, 1]]\n    \"\"\"\n    triangle = pascal_triangle.copy()\n    triangle.append(pascal_row)\n    for i in range(1, len(triangle)):\n        for j in range(1, i):\n            triangle[i][j] = pascal_triangle[i-1][j-1] + pascal_triangle[i-1][j]\n    return triangle\n\n\ndef pascal_row_sum(pascal_row: list[int]):\n    \"\"\"This function takes a pascal row pascal_row and returns the sum of pascal_row.\n    >>> pascal_row_sum([1])\n    1\n    >>> pascal_row_sum([1, 1])\n    2\n    \"\"\"\n    return sum(pascal_row)\n\n\ndef pascal_row_mult(pascal_row: list[int]):\n    \"\"\"This function takes a pascal row pascal_row and returns the product of pascal_row.\n    >>> pascal_row_mult([1])\n    1\n    >>> pascal_row_mult([1, 1])\n    2\n    \"\"\"\n    product = pascal_row[0]\n    for i in range(1, len(pascal_row)):\n        product *= pascal_row[i]\n    return product\n\n\ndef pascal_row_pow(pascal_row: list[int], n: int):\n    \"\"\"This function takes a pascal row pascal_row and an integer n and returns pascal_row_pow(pascal_row, n)\n    >>> pascal_row_pow([1], 1)\n    [1, 1]\n    >>> pascal_row_pow([1, 1], 2)\n    [1, 2, 1]\n    \"\"\"\n    row = pascal_row.copy()\n    for i in range(1, n):\n        row = pascal_triangle_from_row(row[0])\n    return row[0]\n\n\ndef pascal_triangle_pow(pascal_triangle: list[list[int]], n:"}
{"task_id": "HumanEval/34", "completion": "return sorted(set(l))\n\n\ndef reverse(l: list):\n    \"\"\"Return a list with the same elements in reverse order.\n    >>> reverse([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 0, 9, 3, 3, 2, 5, 5, 3]\n    \"\"\"\n    return l[::-1]\n\n\ndef max_value(l: list):\n    \"\"\"Return the largest value in a list of numbers.\n    >>> max_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef is_prime(n: int):\n    \"\"\"Returns True if n is prime, False otherwise\n    >>> is_prime(13)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\n\n\ndef first_prime(n: int):\n    \"\"\"Returns the first prime number in a list of ints\n    >>> first_prime(13)\n    True\n    >>> first_prime(15)\n    False\n    \"\"\"\n    for i in range(n):\n        if is_prime(i):\n            return i\n    return None\n\n\ndef factorial(n: int):\n    \"\"\"Returns the factorial of a number\n    >>> factorial(1)\n    1\n    >>> factorial(3)\n    6\n    \"\"\"\n    return n * factorial(n - 1) if n > 1 else 1\n\n\ndef fibonacci(n: int):\n    \"\"\"Returns the nth Fibonacci number\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    if n < 3:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef is_palindrome(s: str):\n    \"\"\"Returns True if s is a palindrome, False otherwise\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('kayak')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_even(n: int):\n    \"\"\"Returns True if n is even, False otherwise\n    >>> is_even(3)\n    False\n    >>> is_even(4)\n    True\n    \"\"\"\n    return n % 2 == 0\n\n\ndef is_odd(n: int):\n    \"\"\"Returns True if n is odd, False otherwise\n    >>> is_odd(3)\n    True\n    >>> is_odd(4)\n    False\n    \"\"\"\n    return n % 2 == 1\n\n\ndef count_zeros(l: list):\n    \"\"\"Returns the number of zeros in a list of ints\n    >>> count_zeros([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    1\n    \"\"\"\n    return l.count(0)\n\n\ndef sum_list(l: list):\n    \"\"\"Returns the sum of all the elements in a list\n    >>> sum_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    127\n    \"\"\"\n    return sum(l)\n\n\ndef multiply_list(l: list):\n    \"\"\"Returns the product of all the elements in a list\n    >>> multiply_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    1136120\n    \"\"\"\n    return reduce(lambda x, y: x * y, l, 1)\n\n\ndef square(x):\n    return x ** 2\n\n\ndef square_list(l: list):\n    \"\"\"Return a list with each element squared\n    >>> square_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [25, 9, 25, 4, 9, 9, 81, 0, 149]\n    \"\"\"\n    return list(map(square, l))\n\n\ndef even(n: int):\n    return n % 2 == 0\n\n\ndef even_list(l: list):\n    \"\"\"Return a list with only the even elements in the list\n    >>> even_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 5, 2, 3, 3, 9, 123]\n    \"\"\"\n    return list(filter(even, l))\n\n\ndef odd(n: int):\n    return n % 2 == 1\n\n\ndef odd_list(l: list):\n    \"\"\"Return a list with only the odd elements in the list\n    >>> odd_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [3, 3, 9, 123]\n    \"\"\"\n    return list(filter(odd, l))\n\n\ndef sum_of_squares(l: list):\n    \"\"\"Returns the sum of squares of all the elements in a list\n    >>> sum_of_squares([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    2900\n    \"\"\"\n    return sum(map(lambda x: x ** 2, l))\n\n\ndef"}
{"task_id": "HumanEval/35", "completion": "max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    min_value = l[0]\n    for i in l:\n        if i < min_value:\n            min_value = i\n    return min_value\n\n\ndef median(l: list):\n    \"\"\"Return median element in the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1.5\n    \"\"\"\n    sorted_list = sorted(l)\n    median_value = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        median_value = (median_value - 1 + median_value) / 2\n    return sorted_list[median_value]\n\n\ndef avarage(l: list):\n    \"\"\"Return avarage element in the list.\n    >>> avarage([1, 2, 3])\n    2\n    >>> avarage([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0.36363636363636365\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef avarage_of_squares(l: list):\n    \"\"\"Return avarage of squares of element in the list.\n    >>> avarage_of_squares([1, 2, 3])\n    5.0\n    >>> avarage_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    19.4375\n    \"\"\"\n    return sum(x**2 for x in l) / len(l)\n\n\ndef avarage_of_cubes(l: list):\n    \"\"\"Return avarage of cubes of element in the list.\n    >>> avarage_of_cubes([1, 2, 3])\n    2.0\n    >>> avarage_of_cubes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    77.99999999999997\n    \"\"\"\n    return sum(x**3 for x in l) / len(l)\n\n\ndef avarage_of_cubes_of_odd_numbers(l: list):\n    \"\"\"Return avarage of cubes of odd numbers in the list.\n    >>> avarage_of_cubes_of_odd_numbers([1, 2, 3])\n    0.0\n    >>> avarage_of_cubes_of_odd_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0.0\n    \"\"\"\n    return sum(x**3 for x in l if x % 2 == 1) / len(l)\n\n\ndef avarage_of_cubes_of_even_numbers(l: list):\n    \"\"\"Return avarage of cubes of even numbers in the list.\n    >>> avarage_of_cubes_of_even_numbers([1, 2, 3])\n    2.0\n    >>> avarage_of_cubes_of_even_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1.0\n    \"\"\"\n    return sum(x**3 for x in l if x % 2 == 0) / len(l)\n\n\ndef avarage_of_cubes_of_positive_numbers(l: list):\n    \"\"\"Return avarage of cubes of positive numbers in the list.\n    >>> avarage_of_cubes_of_positive_numbers([1, 2, 3])\n    0.0\n    >>> avarage_of_cubes_of_positive_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0.0\n    \"\"\"\n    return sum(x**3 for x in l if x > 0) / len(l)\n\n\ndef avarage_of_cubes_of_negative_numbers(l: list):\n    \"\"\"Return avarage of cubes of negative numbers in the list.\n    >>> avarage_of_cubes_of_negative_numbers([1, 2, 3])\n    0.0\n    >>> avarage_of_cubes_of_negative_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -6.0\n    \"\"\"\n    return sum(x**3 for x in l if x < 0) / len(l)\n\n\ndef avarage_of_cubes_of_non_zero_numbers(l: list):\n    \"\"\"Return avarage of cubes of non-zero numbers in the list.\n    >>> avarage_of_cubes_of_non_zero_numbers([1, 2, 3])\n    0.0\n    >>> avarage_of_cubes_of_non_zero_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0.0\n    \"\"\"\n    return sum(x**3 for x in l if x != 0) / len(l)\n\n\ndef avarage_of_cubes_of_not_zero_numbers(l: list):\n    \"\"\"Return avarage of cubes of non-zero numbers in the list.\n    >>> avarage_of_cubes_of_not_zero_numbers([1, 2, 3])\n    6.0\n    >>> avarage_of_cubes_of_not_zero_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    33.0\n    \"\"\"\n    return sum(x**3 for x in l if x != 0) / len(l)\n\n\ndef avarage_of_cubes_of_even_and_odd_numbers(l: list):\n    \"\"\"Return avarage of cubes of even and odd numbers in the list.\n    >>> avarage_of_cubes_of_even_and_odd_numbers([1, 2, 3])\n    1.0\n    >>> avarage_of_cubes_of_even_and_odd_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.0\n    \"\"\"\n    return sum(x**3 for x in l if x % 2 == 1 or x % 2 == 0) / len(l)\n\n\ndef avarage_of_cubes_of_even_and_not_even_numbers(l: list):\n    \"\"\"Return avarage of cubes of even and non-even numbers in the list.\n    >>> avarage_of_cubes_of_even_and_not_even_numbers([1, 2, 3])\n    1.0\n    >>> avarage_of_cubes_of_even_and_not_even_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    6.0\n    \"\"\"\n    return sum(x**3 for x in l if x % 2"}
{"task_id": "HumanEval/36", "completion": "count = 0 \n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            num_str = str(i)\n            if \"7\" in num_str or \"1\" in num_str:\n                count += 1\n    return count\n\nfizz_buzz(20)\nfizz_buzz(50)\nfizz_buzz(78)\nfizz_buzz(79)\nfizz_buzz(100)\nfizz_buzz(200)\nfizz_buzz(2000)\nfizz_buzz(3000)\nfizz_buzz(30000)\nfizz_buzz(500000)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    \"\"\"\n    \n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_primes(n: int) -> int:\n    \"\"\"Return the sum of all prime numbers up to and including n.\n    >>> sum_primes(3)\n    1\n    >>> sum_primes(5)\n    10\n    >>> sum_primes(10)\n    17\n    >>> sum_primes(20)\n    125\n    >>> sum_primes(1000)\n    1068\n    \"\"\"\n    \n    sum_primes = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            sum_primes += num\n    return sum_primes\n\ndef is_palindrome(word: str) -> bool:\n    \"\"\"Return True if word is a palindrome and False otherwise.\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"noon\")\n    True\n    >>> is_palindrome(\"hey\")\n    False\n    >>> is_palindrome(\"a\")\n    True\n    \"\"\"\n    \n    return word == word[::-1]\n\ndef is_power_of(base: int, n: int) -> bool:\n    \"\"\"Return True if n is the power of base.\n    >>> is_power_of(2, 2)\n    True\n    >>> is_power_of(2, 1)\n    False\n    >>> is_power_of(1, 1)\n    True\n    >>> is_power_of(2, 5)\n    False\n    >>> is_power_of(3, 12)\n    True\n    \"\"\"\n    \n    if n == base:\n        return True\n    elif n % base == 0 and is_power_of(base, n / base):\n        return True\n    return False\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if and only if s is a palindrome.\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"noon\")\n    True\n    >>> is_palindrome(\"hey\")\n    False\n    \"\"\"\n    \n    return s == s[::-1]\n\ndef hailstone(n: int) -> int:\n    \"\"\"Print the hailstone sequence starting at n and return its\n    length.\n    >>> hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> hailstone(1)\n    1\n    >>> hailstone(2)\n    2\n    \"\"\"\n    \n    count = 1 \n    while n != 1:\n        print(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    print(1) \n    return count \n\ndef num_evens(lst: list) -> int:\n    \"\"\"Return the number of even numbers in lst using a for loop.\n    >>> num_evens([2, 1, 2, 3, 4])\n    3\n    >>> num_evens([])\n    0\n    >>> num_evens([2])\n    1\n    \"\"\"\n    \n    count = 0 \n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n    return count\n\ndef num_evens(lst: list) -> int:\n    \"\"\"Return the number of even numbers in lst using a list comprehension.\n    >>> num_evens([2, 1, 2, 3, 4])\n    3\n    >>> num_evens([])\n    0\n    >>> num_evens([2])\n    1\n    \"\"\"\n    \n    return len([num for num in lst if num % 2 == 0])\n\ndef num_factors(n: int) -> int:\n    \"\"\"Return the number of factors n has.\n    >>> num_factors(6)\n    4  # 1, 2, 3, 6\n    >>> num_factors(100)\n    16  # 1, 2, 4, 5, 10, 20, 25, 50, 100\n    \"\"\"\n    \n    count = 0 \n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef has_digit(num: int, digit: int) -> bool:\n    \"\"\"Return True if num has a digit d and False otherwise.\n    >>> has_digit(10, 1)\n    True\n    >>> has_digit(123, 7)\n    False\n    >>> has_digit(34567, 5)\n    True\n    >>> has_digit(34567, 4)\n    False\n    \"\"\"\n    \n    return str(digit) in str(num)\n\ndef has_digit(num: int, digit: int) -> bool:\n    \"\"\"Return True if num has a digit d and False otherwise.\n    >>> has_digit(10, 1)\n    True\n    >>> has_digit(123, 7)\n    False\n    >>> has_digit(34567, 5)\n    True\n    >>> has_digit(34567, 4)\n    False\n    \"\"\"\n    \n    return any(digit in str(num) for num"}
{"task_id": "HumanEval/37", "completion": "l' = []\n    for i in range(0, len(l), 2):\n        l' += [l[i]]\n    for i in range(1, len(l), 2):\n        for j in range(i, 0, -1):\n            if l[j-1] > l[j]:\n                l[j], l[j-1] = l[j-1], l[j]\n    return l'\n\ndef sort_even_recursive(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_recursive([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_recursive([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    if len(l) < 2:\n        return l\n    else:\n        if l[0] % 2 == 0:\n            return [l[0]] + sort_even_recursive(l[1:])\n        else:\n            return sort_even_recursive(l[1:]) + [l[0]]\n\ndef sort_even_inplace(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_inplace([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    for i in range(0, len(l), 2):\n        for j in range(i, 0, -1):\n            if l[j-1] > l[j]:\n                l[j], l[j-1] = l[j-1], l[j]\n    return l\n\ndef sort_even_inplace_recursive(l: list, i: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace_recursive([1, 2, 3], 0)\n    [1, 2, 3]\n    >>> sort_even_inplace_recursive([5, 6, 3, 4], 0)\n    [3, 6, 5, 4]\n    \"\"\"\n    if len(l) < 2:\n        return l\n    else:\n        if l[i] % 2 == 0:\n            l[i], l[i-1] = l[i-1], l[i]\n            return sort_even_inplace_recursive(l, i+1)\n        else:\n            return sort_even_inplace_recursive(l, i+1)\n\n\ndef sort_even_inplace_recursive_2(l: list, i: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace_recursive_2([1, 2, 3], 0)\n    [1, 2, 3]\n    >>> sort_even_inplace_recursive_2([5, 6, 3, 4], 0)\n    [3, 6, 5, 4]\n    \"\"\"\n    if l[i] % 2 == 0:\n        if i < len(l)-1:\n            l, i, l[i+1], l[i] = l[:i+1] + l[i+2:], i, l[i+1], l[i]\n            return sort_even_inplace_recursive_2(l, i)\n        else:\n            return l\n    else:\n        if i < len(l)-1:\n            return sort_even_inplace_recursive_2(l, i+1)\n        else:\n            return l\n\ndef sort_even_inplace_recursive_3(l: list, i: int, n: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace_recursive_3([1, 2, 3], 0, 0)\n    [1, 2, 3]\n    >>> sort_even_inplace_recursive_3([5, 6, 3, 4], 0, 0)\n    [3, 6, 5, 4]\n    \"\"\"\n    if l[i] % 2 == 0:\n        if i < len(l)-1:\n            l, i, l[i+1], l[i] = l[:i+1] + l[i+2:], i, l[i+1], l[i]\n            return sort_even_inplace_recursive_3(l, i, n+1)\n        else:\n            return l\n    else:\n        if i < len(l)-1:\n            return sort_even_inplace_recursive_3(l, i+1, n+1)\n        else:\n            if n >= len(l)//2:\n                return l\n            else:\n                return sort_even_inplace_recursive_3(l, i+1, n+1)\n\ndef sort_even_inplace_recursive_4(l: list, i: int, n: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace_recursive_4([1, 2, 3], 0, 0)\n    [1, 2, 3]\n    >>> sort_even_inplace_recursive_4([5, 6, 3, 4], 0, 0)\n    [3, 6, 5, 4]\n    \"\"\"\n    if l[i] % 2 == 0:\n        if i < len(l)-1:\n            l, i, l[i+1], l[i] = l[:i+1] + l[i+2:], i, l[i+1], l[i]\n            return sort_even_inplace_recursive_4(l, i, n+1)\n        else:\n            return l\n    else:\n        if i < len(l)-1:\n            return sort_even_inplace_recursive_4(l, i+1, n+1)\n        else:\n            if n >= len(l)//2:\n                return l\n            else:\n                return sort_even_inplace_recursive_4(l, i+1, n+1)\n\ndef sort_even_inplace_recursive_5(l: list, i: int, n: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace_recursive_5([1, 2, 3], 0, 0)\n    [1, 2, 3]\n    >>> sort_even_inplace_recursive_5([5, 6, 3, 4], 0, 0)\n    [3, 6, 5, 4]\n    \"\"\"\n    if l[i] % 2 == 0:\n        if i < len(l)-1:\n            l, i, l[i+1], l[i] = l[:i+1] + l[i+2:], i, l[i+1], l[i]\n            return sort_even_inplace_recursive_5(l, i, n+1)\n        else:\n            return l\n    else:\n        if i < len(l)-1:\n            return sort_even_inplace_recursive_5(l, i+1, n+1)\n        else:\n            if n >= len(l)//2:\n                return l\n            else:\n                return sort_even_inplace_recursive_5(l, i+1, n+1)\n\ndef sort_even_inplace_recursive_6(l: list, i: int, n: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_inplace_recursive_6([1, 2, 3], 0, 0)\n    [1, 2, 3]\n    >>> sort_even_inplace_recursive_6([5, 6, 3, 4], 0, 0)\n    [3, 6, 5, 4]\n    \"\"\"\n    if l[i] % 2 == 0:\n        if i < len(l)-1:\n            l, i, l[i+1], l[i] = l[:i+1] + l[i+2:], i, l[i+1], l[i]\n            return sort_even_inplace_recursive_6(l, i, n+1)\n        else:\n            return l\n    else:\n        if i < len(l)-1:\n            return sort_even_inplace_recursive_6(l, i+1,"}
{"task_id": "HumanEval/38", "completion": "# reverse cycle groups in string.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in reversed(s)]\n    return \"\".join(groups)\n\n\ndef encode_alphabet(s: str, alphabet: str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n    \"\"\"\n    Encodes string s with alphabet.\n    \"\"\"\n    alphabet = [*alphabet]\n    return \"\".join([alphabet[alphabet.index(char)] for char in [*s]])\n\n\ndef decode_alphabet(s: str, alphabet: str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n    \"\"\"\n    Decodes string s encoded with alphabet.\n    \"\"\"\n    alphabet = [*alphabet]\n    return \"\".join([alphabet[alphabet.index(char)] for char in [*s]])\n\n\ndef encode_morse(s: str, alphabet: str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n    \"\"\"\n    Encodes string s with morse alphabet.\n    \"\"\"\n    morse_alphabet = \".- !?123456789\"\n    morse_alphabet = [*morse_alphabet]\n    alphabet = [*alphabet]\n    morse_alphabet = [*dict(zip(morse_alphabet, alphabet))]\n    return \"\".join([morse_alphabet[alphabet.index(char)] for char in [*s]])\n\n\ndef decode_morse(s: str, alphabet: str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n    \"\"\"\n    Decodes string s encoded with morse alphabet.\n    \"\"\"\n    morse_alphabet = \".- !?123456789\"\n    morse_alphabet = [*morse_alphabet]\n    alphabet = [*alphabet]\n    morse_alphabet = [*dict(zip(alphabet, morse_alphabet))]\n    return \"\".join([alphabet[morse_alphabet.index(char)] for char in [*s]])\n\n\ndef encode_base(s: str, base: int):\n    \"\"\"\n    Encodes string s with base.\n    \"\"\"\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet = [*alphabet]\n    return \"\".join([alphabet[int(alphabet.index(char) + (base * alphabet.index(char))) % 26] for char in [*s]])\n\n\ndef decode_base(s: str, base: int):\n    \"\"\"\n    Decodes string s encoded with base.\n    \"\"\"\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet = [*alphabet]\n    return \"\".join([alphabet[(alphabet.index(char) - (base * alphabet.index(char))) % 26] for char in [*s]])\n\n\ndef encode_base16(s: str):\n    \"\"\"\n    Encodes string s with base16.\n    \"\"\"\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet = [*alphabet]\n    return \"\".join([alphabet[int(alphabet.index(char) + (16 * alphabet.index(char))) % 3"}
{"task_id": "HumanEval/39", "completion": "a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    if a % 2 == 0:\n        return a\n    return b\n    \ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci number and it's prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    \n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    if a % 2 == 1:\n        return a\n    return b\n\ndef prime_fib_sum(n: int):\n    \"\"\"\n    prime_fib_sum returns the sum of all prime Fibonacci numbers not exceeding n\n    >>> prime_fib_sum(1000)\n    765\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        if prime_fib(i):\n            sum += i\n    return sum\n\ndef fib_prime_sum(n: int):\n    \"\"\"\n    fib_prime_sum returns the sum of all Fibonacci prime numbers not exceeding n\n    >>> fib_prime_sum(1000)\n    1889\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        if fib_prime(i):\n            sum += i\n    return sum\n\n\ndef fib_prime_product(n: int):\n    \"\"\"\n    fib_prime_product returns the product of all Fibonacci prime numbers not exceeding n\n    >>> fib_prime_product(1000)\n    41012552\n    \"\"\"\n    \n    product = 1\n    for i in range(2, n + 1):\n        if fib_prime(i):\n            product *= i\n    return product\n\n\ndef fib_prime_product_sum(n: int):\n    \"\"\"\n    fib_prime_product_sum returns the sum of all Fibonacci prime numbers not exceeding n\n    >>> fib_prime_product_sum(1000)\n    10039618\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        if fib_prime(i):\n            sum += i\n    return sum\n\ndef is_palindrome(s: str):\n    \"\"\"\n    is_palindrome returns True if s is a palindrome, False otherwise\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n    \n    return s == s[::-1]\n\n\ndef is_permutation(s: str, t: str):\n    \"\"\"\n    is_permutation returns True if s is a permutation of t, False otherwise\n    >>> is_permutation('abc', 'cba')\n    True\n    >>> is_permutation('abc', 'def')\n    False\n    \"\"\"\n    \n    return ''.join(sorted(s)) == ''.join(sorted(t))\n\n\ndef is_anagram(s: str, t: str):\n    \"\"\"\n    is_anagram returns True if s is an anagram of t, False otherwise\n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('abc', 'def')\n    False\n    \"\"\"\n    \n    return ''.join(sorted(s)) == ''.join(sorted(t))\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns the n-th Fibonacci number\n    >>> fib(10)\n    55\n    \"\"\"\n    \n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return b\n\ndef fib_sum(n: int):\n    \"\"\"\n    fib_sum returns the sum of all Fibonacci numbers not exceeding n\n    >>> fib_sum(10)\n    10\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        sum += fib(i)\n    return sum\n\ndef fib_product(n: int):\n    \"\"\"\n    fib_product returns the product of all Fibonacci numbers not exceeding n\n    >>> fib_product(10)\n    89\n    \"\"\"\n    \n    product = 1\n    for i in range(2, n + 1):\n        product *= fib(i)\n    return product\n\n\ndef fib_product_sum(n: int):\n    \"\"\"\n    fib_product_sum returns the sum of all Fibonacci numbers not exceeding n\n    >>> fib_product_sum(10)\n    10\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        sum += fib(i)\n    return sum\n\ndef fib_product_sum_odd(n: int):\n    \"\"\"\n    fib_product_sum_odd returns the sum of all odd Fibonacci numbers not exceeding n\n    >>> fib_product_sum_odd(10)\n    10\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        if fib(i) % 2 == 1:\n            sum += fib(i)\n    return sum\n\ndef fib_product_sum_odd_even(n: int):\n    \"\"\"\n    fib_product_sum_odd_even returns the sum of all odd and even Fibonacci numbers not exceeding n\n    >>> fib_product_sum_odd_even(10)\n    10\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n + 1):\n        if fib(i) % 2 == 0:\n            sum += fib(i)\n    return sum\n\ndef fib_product_sum_prime(n: int):\n    \"\"\"\n    fib_product_sum_prime returns the sum of all prime Fibonacci numbers not exceeding n\n    >>> fib_product_sum_prime(10)\n    10\n    \"\"\"\n    \n    sum = 0\n    for i in range(2, n"}
{"task_id": "HumanEval/40", "completion": "for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))\nprint(triples_sum_to_zero([1, 3, -2, 1]))\nprint(triples_sum_to_zero([1, 2, 3, 7]))\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\nprint(triples_sum_to_zero([1]))\n\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))\nprint(triples_sum_to_zero([1, 3, -2, 1]))\nprint(triples_sum_to_zero([1, 2, 3, 7]))\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\nprint(triples_sum_to_zero([1]))\nprint(triples_sum_to_zero([1, 2, 3, -4, 5, 6, 7, -8, 9, 0]))\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    \n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))\nprint(triples_sum_to_zero([1, 3, -2, 1]))\nprint(triples_sum_to_zero([1, 2, 3, 7]))\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\nprint(triples_sum_to_zero([1]))\nprint(triples_sum_to_zero([1, 2, 3, -4, 5, 6, 7, -8, 9, 0]))\n\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    \n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))\nprint(triples_sum_to_zero([1, 3, -2, 1]))\nprint(triples_sum_to_zero([1, 2, 3, 7]))\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\nprint(triples_sum_to_zero([1]))\nprint(triples_sum_to_zero([1, 2, 3, -4, 5, 6, 7, -8, 9, 0]))\n\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    \n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))\nprint(triples_sum_to_zero([1, 3, -2, 1]))\nprint(triples_sum_to_zero([1, 2, 3, 7]))\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\nprint(triples_sum_to_zero([1]))\nprint(triples_sum_to_zero([1, 2, 3, -4, 5, 6, 7, -8, 9, 0]))\n\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    \n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return"}
{"task_id": "HumanEval/41", "completion": "left_cars = [False] * n\n    right_cars = [False] * n\n    collisions = 0\n    while True:\n        for i in range(n):\n            if left_cars[i] and right_cars[i]:\n                collisions += 1\n            elif left_cars[i] or right_cars[i]:\n                left_cars[i] = True\n                right_cars[i] = True\n            else:\n                left_cars[i] = False\n                right_cars[i] = False\n        if all(left_cars) and all(right_cars):\n            return collisions\n\n\nif __name__ == '__main__':\n    print(car_race_collision(n=10))\n    print(car_race_collision(n=1000))\n    print(car_race_collision(n=100000))\n    print(car_race_collision(n=100000000))\n\n\"\"\"\nOUTPUT :\n1000\n1000000\n100000000\n\"\"\"\n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.  The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [False] * n\n    right_cars = [False] * n\n    collisions = 0\n    while True:\n        for i in range(n):\n            if left_cars[i] and right_cars[i]:\n                collisions += 1\n            elif left_cars[i] or right_cars[i]:\n                left_cars[i] = True\n                right_cars[i] = True\n            else:\n                left_cars[i] = False\n                right_cars[i] = False\n        if all(left_cars) and all(right_cars):\n            return collisions\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.  The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [False] * n\n    right_cars = [False] * n\n    collisions = 0\n    while True:\n        for i in range(n):\n            if left_cars[i] and right_cars[i]:\n                collisions += 1\n            elif left_cars[i] or right_cars[i]:\n                left_cars[i] = True\n                right_cars[i] = True\n            else:\n                left_cars[i] = False\n                right_cars[i] = False\n        if all(left_cars) and all(right_cars):\n            return collisions\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.  The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two car"}
{"task_id": "HumanEval/42", "completion": "l = list(map(lambda x: x + 1, l))\n    return l\n\n\ndef incr_dict(d: dict):\n    \"\"\"Return dict with values incremented by 1.\n    >>> incr_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n    {'a': 2, 'b': 3, 'c': 4, 'd': 5}\n    \"\"\"\n    d = dict(map(lambda x: (x[0], x[1] + 1), d.items()))\n    return d\n\n\ndef incr_tuple(t: tuple):\n    \"\"\"Return tuple with elements incremented by 1.\n    >>> incr_tuple([1, 2, 3])\n    (2, 3, 4)\n    >>> incr_tuple([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (6, 4, 6, 3, 4, 4, 10, 1, 124)\n    \"\"\"\n    t = tuple(map(lambda x: x + 1, t))\n    return t\n\ndef incr_list_tuple(l: list, t: tuple):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    l = incr_list(l)\n    t = incr_tuple(t)\n    return l, t\n\n\ndef incr_list_tuple_dict(l: list, t: tuple, d: dict):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    d = incr_dict(d)\n    l = incr_list(l)\n    t = incr_tuple(t)\n    return l, t, d\n\n\nif __name__ == '__main__':\n    print(incr_list([1, 2, 3]))\n    print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n    print(incr_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_tuple([1, 2, 3]))\n    print(incr_tuple([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n    print(incr_list_tuple([1, 2, 3], (5, 3, 5, 2, 3, 3, 9, 0, 123)))\n    print(incr_list_tuple_dict([1, 2, 3], (5, 3, 5, 2, 3, 3, 9, 0, 123), {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_list_tuple_dict([1, 2, 3], (5, 3, 5, 2, 3, 3, 9, 0, 123), {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n\nfrom typing import Iterable\n\ndef incr_tuple_iterable(t: tuple, iterable: Iterable):\n    \"\"\"Return tuple with elements incremented by 1.\"\"\"\n    t = tuple(map(lambda x: x + 1, t))\n    iterable = list(iterable)\n    iterable[0] = iterable[0] + 1\n    iterable[1] = iterable[1] + 1\n    t = tuple(iterable)\n    return t\n\n\ndef incr_list_tuple_iterable(t: tuple, iterable: Iterable, l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    t = incr_tuple_iterable(t, iterable)\n    l[0] = l[0] + 1\n    l[1] = l[1] + 1\n    t = incr_tuple_iterable(t, iterable)\n    l = incr_list(l)\n    return l, t\n\n\nif __name__ == '__main__':\n    print(incr_tuple_iterable((1, 2, 3), 'abc'))\n    print(incr_tuple_iterable((5, 3, 5, 2, 3, 3, 9, 0, 123), 'abc'))\n    print(incr_list_tuple_iterable((1, 2, 3), 'abc', [4, 5, 6]))\n    print(incr_list_tuple_iterable((5, 3, 5, 2, 3, 3, 9, 0, 123), 'abc', [4, 5, 6]))\n\n\nfrom typing import Iterable, Mapping, Sequence\n\n\ndef incr_tuple_iterable_mapping(t: tuple, iterable: Iterable, m: Mapping):\n    \"\"\"Return tuple with elements incremented by 1.\"\"\"\n    t = tuple(map(lambda x: x + 1, t))\n    iterable = list(iterable)\n    iterable[0] = iterable[0] + 1\n    iterable[1] = iterable[1] + 1\n    t = tuple(iterable)\n    m = incr_dict(m)\n    return t, m\n\n\ndef incr_list_tuple_iterable_mapping(t: tuple, iterable: Iterable, l: list, m: Mapping):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    t = incr_tuple_iterable_mapping(t, iterable, m)\n    l[0] = l[0] + 1\n    l[1] = l[1] + 1\n    t = incr_tuple_iterable_mapping(t, iterable, m)\n    l = incr_list(l)\n    return l, t, m\n\n\nif __name__ == '__main__':\n    print(incr_tuple_iterable_mapping((1, 2, 3), 'abc', {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_tuple_iterable_mapping((5, 3, 5, 2, 3, 3, 9, 0, 123), 'abc', {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_list_tuple_iterable_mapping((1, 2, 3), 'abc', [4, 5, 6], {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_list_tuple_iterable_mapping((5, 3, 5, 2, 3, 3, 9, 0, 123), 'abc', [4, 5, 6], {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n\n\nfrom typing import Iterable, Mapping, Sequence, Set\n\n\ndef incr_tuple_iterable_mapping_set(t: tuple, iterable: Iterable, m: Mapping, s: Set):\n    \"\"\"Return tuple with elements incremented by 1.\"\"\"\n    t = tuple(map(lambda x: x + 1, t))\n    iterable = list(iterable)\n    iterable[0] = iterable[0] + 1\n    iterable[1] = iterable[1] + 1\n    t = tuple(iterable)\n    m = incr_dict(m)\n    s.add('abc')\n    return t, m, s\n\n\ndef incr_list_tuple_iterable_mapping_set(t: tuple, iterable: Iterable, l: list, m: Mapping, s: Set):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    t = incr_tuple_iterable_mapping_set(t, iterable, m, s)\n    l[0] = l[0] + 1\n    l[1] = l[1] + 1\n    t = incr_tuple_iterable_mapping_set(t, iterable, m, s)\n    l = incr_list(l)\n    return l, t, m, s\n\n\nif __name__ == '__main__':\n    print(incr_tuple_iterable_mapping_set((1, 2, 3), 'abc', {'a': 1, 'b': 2, 'c': 3, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_tuple_iterable_mapping_set((5, 3, 5, 2, 3, 3, 9, 0, 123), 'abc', {'a': 1, 'b': 2, 'c': 3, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_list_tuple_iterable_mapping_set((1, 2, 3), 'abc', [4, 5, 6], {'a': 1, 'b': 2, 'c': 3, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(incr_list_tuple_iterable_mapping_set((5, 3, 5, 2, 3, 3, 9, 0, 123), 'abc', [4, 5, 6], {'a': 1, 'b': 2, 'c': 3, 'd': 4}, {'a'"}
{"task_id": "HumanEval/43", "completion": "seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False\n    \n\n    \ndef triplets_sum_to_zero(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are triplets that sum to zero,\n    and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    seen = set()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[i] + l[j])\n    return False\n\ndef triplets_sum_to_zero_fast(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are triplets that sum to zero,\n    and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    seen = set()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[i] + l[j])\n    return False\n    \n    \ndef triplets_sum_to_zero_fast(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are triplets that sum to zero,\n    and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    seen = set()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[i] + l[j])\n    return False\n\ndef triplets_sum_to_zero_fast(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are triplets that sum to zero,\n    and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    seen = set()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[i] + l[j])\n    return False\n\ndef triplets_sum_to_zero_fast(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are triplets that sum to zero,\n    and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    seen = set()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if"}
{"task_id": "HumanEval/44", "completion": "if base <= 9 and base > 0:\n        return str(x)\n    if x < 0:\n        raise ValueError('Negative number')\n    base_digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    if base > 36 or base < 2:\n        raise ValueError('Wrong base')\n    result = ''\n    while x > 0:\n        result = base_digits[x % base] + result\n        x = x // base\n    return result\n\n\ndef palindrome_list(lst):\n    \"\"\"Return list of palindromic elements of lst\n    >>> palindrome_list([1, 2, 3, 'madam', 10, '']))\n    ['madam']\n    >>> palindrome_list([1, 2, 'madam', 10, ''])\n    ['madam']\n    >>> palindrome_list([1, 2, 'madam', '10', ''])\n    ['madam', '10']\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if lst[i] == change_base(lst[i], 10) and len(str(lst[i])) > 1:\n            result.append(lst[i])\n    return result\n\n\ndef lcm(a, b):\n    \"\"\"Return lcm of a, b\n    >>> lcm(1, 2)\n    2\n    >>> lcm(2, 3)\n    6\n    >>> lcm(4, 6)\n    12\n    \"\"\"\n    if a == 0 or b == 0:\n        raise ValueError('Zero number')\n    if a == 1 or b == 1:\n        return max(a, b)\n    if a > b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_list(lst):\n    \"\"\"Return lcm of elements of lst\n    >>> lcm_list([1, 2, 3, 4, 6, 8])\n    24\n    >>> lcm_list([1, 2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60])\n    60\n    \"\"\"\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    return result\n\n\ndef gcd(a, b):\n    \"\"\"Return gcd of a, b\n    >>> gcd(1, 2)\n    1\n    >>> gcd(2, 3)\n    1\n    >>> gcd(4, 6)\n    2\n    \"\"\"\n    if a == 0 or b == 0:\n        raise ValueError('Zero number')\n    if a == 1 or b == 1:\n        return max(a, b)\n    if a > b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_list(lst):\n    \"\"\"Return gcd of elements of lst\n    >>> gcd_list([1, 2, 3, 4, 6, 8])\n    2\n    >>> gcd_list([1, 2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60])\n    1\n    \"\"\"\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = gcd(result, lst[i])\n    return result\n\n\ndef lcm_lcm(a, b):\n    \"\"\"Return lcm lcm of a, b\n    >>> lcm_lcm(1, 2)\n    2\n    >>> lcm_lcm(2, 3)\n    6\n    >>> lcm_lcm(4, 6)\n    12\n    \"\"\"\n    if a == 0 or b == 0:\n        raise ValueError('Zero number')\n    if a == 1 or b == 1:\n        return max(a, b)\n    return lcm(a, lcm(b, gcd(a, b)))\n\n\ndef lcm_lcm_list(lst):\n    \"\"\"Return lcm lcm of elements of lst\n    >>> lcm_lcm_list([1, 2, 3, 4, 6, 8])\n    6\n    >>> lcm_lcm_list([1, 2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60])\n    1\n    \"\"\"\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm_lcm(result, lst[i])\n    return result\n\n\ndef lcm_lcm_lcm(a, b):\n    \"\"\"Return lcm lcm lcm of a, b\n    >>> lcm_lcm_lcm(1, 2)\n    2\n    >>> lcm_lcm_lcm(2, 3)\n    6\n    >>> lcm_lcm_lcm(4, 6)\n    12\n    \"\"\"\n    if a == 0 or b == 0:\n        raise ValueError('Zero number')\n    if a == 1 or b == 1:\n        return max(a, b)\n    return lcm(lcm(a, b), lcm(a, b))\n\n\ndef lcm_lcm_lcm_list(lst):\n    \"\"\"Return lcm lcm lcm of elements of lst\n    >>> lcm_lcm_lcm_list([1, 2, 3, 4, 6, 8])\n    6\n    >>> lcm_lcm_lcm_list([1, 2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60])\n    1\n    \"\"\"\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm_lcm_lcm(result, lst[i])\n    return result\n\n\ndef gcd(a, b):\n    if a == 0 or b == 0:\n        return max(a, b)\n    return gcd(b, a % b)\n\n\ndef gcd_gcd(a, b):\n    \"\"\"Return gcd gcd gcd of a, b\n    >>> gcd_gcd(1, 2)\n    1\n    >>> gcd_gcd(2, 3)\n    1\n    >>> gcd_gcd(4, 6)\n    2\n    \"\"\"\n    if a == 0 or b == 0:\n        return max(a, b)\n    return gcd(a % b, b)\n\n\ndef gcd_gcd_gcd(a, b):\n    \"\"\"Return gcd gcd gcd of a, b\n    >>> gcd_gcd_gcd(1, 2)\n    1\n    >>> gcd_gcd_gcd(2, 3)\n    1\n    >>> gcd_gcd_gcd(4, 6)\n    2\n    \"\"\"\n    if a == 0 or b == 0:\n        return max(a, b)\n    return gcd(a % b, b)\n\n\ndef gcd_gcd_gcd_gcd(a, b):\n    \"\"\"Return gcd gcd gcd gcd of a, b\n    >>> gcd_gcd_gcd_gcd(1, 2)\n    1\n    >>> gcd_gcd_gcd_gcd(2, 3)\n    1\n    >>> gcd_gcd_gcd_gcd(4, 6)\n    2\n    \"\"\"\n    if a == 0 or b == 0:\n        return max(a, b)\n    return gcd(a % b, b)\n\n\ndef gcd_gcd_gcd_gcd_gcd(a, b):\n    \"\"\"Return gcd gcd gcd gcd gcd gcd of a, b\n    >>> gcd_gcd_gcd_gcd_gcd(1, 2)\n    1\n    >>> gcd_gcd_gcd_gcd_gcd(2, 3)\n    1\n    >>> gcd_gcd_gcd_gcd_gcd(4, 6)\n    2\n    \"\"\"\n    if a == 0 or b == 0:\n        return max(a, b)\n    return gcd(a % b, b)\n\n\ndef gcd_gcd_gcd_gcd_gcd_gcd(a, b):\n    \"\"\"Return gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd gcd"}
{"task_id": "HumanEval/45", "completion": "return a * h / 2\n\ndef isosceles(x, y, z):\n    \"\"\"Return True if x, y and z are three lengths of a triangle\n    and x==z or x==y or z==y.\n\n    >>> isosceles(1, 1, 1)\n    True\n    >>> isosceles(2, 3, 3)\n    True\n    >>> isosceles(1, 2, 3)\n    False\n    >>> isosceles(3, 4, 5)\n    False\n    >>> isosceles(3, 3, 1)\n    False\n    >>> isosceles(1, 1, 4)\n    False\n    >>> isosceles(1, 2, 2)\n    False\n    \"\"\"\n    return x==z or x==y or z==y\n\ndef isosceles_area(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if isosceles(x, y, z):\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n\ndef isosceles_area_2(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n\ndef isosceles_area_3(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_4(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_5(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_6(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_7(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_8(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_9(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b = y\n        return triangle_area(a, b)\n        \ndef isosceles_area_10(x, y, z):\n    \"\"\"Return the area of isosceles triangle with three sides x, y, z.\"\"\"\n    if x==z or x==y or z==y:\n        if x==z:\n            a = x\n            b = y\n        elif x==y:\n            a = x\n            b = z\n        else:\n            a = z\n            b"}
{"task_id": "HumanEval/46", "completion": "if n < 4:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n\ndef fib_recursive_call_count(n):\n    \"\"\"Returns the number of recursive calls made to fib4(n).  Do not use recursion.\n    >>> fib_recursive_call_count(3)\n    2\n    >>> fib_recursive_call_count(5)\n    5\n    >>> fib_recursive_call_count(8)\n    17\n    \"\"\"\n    global recursive_count\n    recursive_count += 1\n    if n < 4:\n        return 1\n    else:\n        return fib_recursive_call_count(n-1) + fib_recursive_call_count(n-2) + fib_recursive_call_count(n-3) + fib_recursive_call_count(n-4)\n\ndef fib_recursive_call_count_wrapper(n):\n    \"\"\"Calls fib_recursive_call_count(n) and returns the result along with the number of recursive calls made.\n    >>> fib_recursive_call_count_wrapper(3)\n    (2, 2)\n    >>> fib_recursive_call_count_wrapper(5)\n    (5, 5)\n    \"\"\"\n    global recursive_count\n    recursive_count = 0\n    result = fib_recursive_call_count(n)\n    return (result, recursive_count)\n\nrecursive_count = 0\nfib_recursive_call_count(7)\n\nfib_recursive_call_count_wrapper(7)\n\ndef fib_recursive_call_count_wrapper_timed(n):\n    \"\"\"Calls fib_recursive_call_count(n) and returns the result along with the number of recursive calls made and the time taken to compute it.\n    >>> fib_recursive_call_count_wrapper_timed(3)\n    (2, 2, 1.0)\n    >>> fib_recursive_call_count_wrapper_timed(5)\n    (5, 5, 1.0)\n    \"\"\"\n    import time\n    start_time = time.time()\n    (result, recursive_count) = fib_recursive_call_count_wrapper(n)\n    elapsed_time = time.time() - start_time\n    return (result, recursive_count, elapsed_time)\n\nfib_recursive_call_count_wrapper_timed(7)\n\nrecursive_count = 0\nfib_recursive_call_count_wrapper_timed(7)\n\ndef fib_recursive_call_count_wrapper_timed_recursive(n, i):\n    \"\"\"Calls fib_recursive_call_count(n) and returns the result along with the number of recursive calls made and the time taken to compute it.\n    >>> fib_recursive_call_count_wrapper_timed_recursive(7, 0)\n    (2, 2, 1.0)\n    >>> fib_recursive_call_count_wrapper_timed_recursive(7, 1)\n    (5, 5, 1.0)\n    \"\"\"\n    import time\n    start_time = time.time()\n    result = fib_recursive_call_count(n)\n    elapsed_time = time.time() - start_time\n    return (result, recursive_count, elapsed_time)\n\nrecursive_count = 0\nfib_recursive_call_count_wrapper_timed_recursive(7, 1)\n\ndef fib_recursive_call_count_wrapper_timed_recursive(n, i):\n    \"\"\"Calls fib_recursive_call_count(n) and returns the result along with the number of recursive calls made and the time taken to compute it.\n    >>> fib_recursive_call_count_wrapper_timed_recursive(7, 0)\n    (2, 2, 1.0)\n    >>> fib_recursive_call_count_wrapper_timed_recursive(7, 1)\n    (5, 5, 1.0)\n    \"\"\"\n    import time\n    start_time = time.time()\n    result = fib_recursive_call_count(n)\n    elapsed_time = time.time() - start_time\n    return (result, recursive_count, elapsed_time)\n\nrecursive_count = 0\nfib_recursive_call_count_wrapper_timed_recursive(7, 1)\n\nrecursive_count = 0\ndef fib_recursive_call_count_wrapper_timed_recursive_with_caching(n, i, cache):\n    \"\"\"Calls fib_recursive_call_count(n) and returns the result along with the number of recursive calls made and the time taken to compute it.\n    >>> fib_recursive_call_count_wrapper_timed_recursive_with_caching(7, 0, dict())\n    (2, 2, 1.0)\n    >>> fib_recursive_call_count_wrapper_timed_recursive_with_caching(7, 1, dict())\n    (5, 5, 1.0)\n    \"\"\"\n    import time\n    start_time = time.time()\n    result = fib_recursive_call_count(n)\n    elapsed_time"}
{"task_id": "HumanEval/47", "completion": "l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n\ndef factorial(n: int):\n    \"\"\"Return factorial of n, an int.\n    >>> factorial(10)\n    3628800\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    >>> factorial(-2)\n    'Negative input does not make factorial sense'\n    \"\"\"\n    if n < 0:\n        return \"Negative input does not make factorial sense\"\n    ans = 1\n    for i in range(n, 0, -1):\n        ans = ans * i\n    return ans\n\n\ndef palindrome(s: str):\n    \"\"\"Return whether s is a palindrome or not.\n    >>> palindrome('noon')\n    True\n    >>> palindrome('a')\n    True\n    >>> palindrome('racecar')\n    True\n    >>> palindrome('noon')\n    True\n    >>> palindrome('moon')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef square_dict(d: dict):\n    \"\"\"Return a dictionnary containing the squares of the keys and values in d.\n    >>> square_dict({1:2, 3:4})\n    {1: 4, 3: 9}\n    \"\"\"\n    return {k: v * v for k, v in d.items()}\n\n\ndef my_map(f, l: list):\n    \"\"\"Return list such that f(l[i]) for all i.\n    >>> my_map(lambda x: x * 2, [1, 2, 3])\n    [2, 4, 6]\n    >>> my_map(lambda x: x * x, [1, 2, 3])\n    [1, 4, 9]\n    \"\"\"\n    return [f(x) for x in l]\n\n\ndef my_filter(f, l: list):\n    \"\"\"Return list such that f(l[i]) is True for all i.\n    >>> my_filter(lambda x: x % 2 == 0, [1, 2, 3])\n    [2]\n    >>> my_filter(lambda x: x % 3 == 2, [1, 2, 3])\n    [3]\n    \"\"\"\n    return [x for x in l if f(x)]\n\n\ndef my_reduce(f, l: list, initial=None):\n    \"\"\"Reduce list to a single value, f(l[0], l[1], ..., l[n - 1]),\n    using initial as the initial value, or the first element if None.\n    >>> my_reduce(lambda x, y: x + y, [1, 2, 3, 4])\n    10\n    >>> my_reduce(lambda x, y: x + y, [1, 2, 3, 4], 0)\n    10\n    >>> my_reduce(lambda x, y: x + y, [1, 2, 3, 4], 10)\n    24\n    \"\"\"\n    if initial is None:\n        ans = l[0]\n    else:\n        ans = initial\n    for i in range(1, len(l)):\n        ans = f(ans, l[i])\n    return ans\n\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(34, 19)\n    1\n    >>> gcd(14, 7)\n    7\n    >>> gcd(10, 30)\n    10\n    >>> gcd(2, 1)\n    1\n    \"\"\"\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the lowest common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(1, 4)\n    4\n    >>> lcm(14, 7)\n    105\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef divisors(n: int):\n    \"\"\"Return divisors of n, as a list.\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(3)\n    [1, 3]\n    \"\"\"\n    ans = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans.append(i)\n    return ans\n\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(34, 19)\n    1\n    >>> gcd(14, 7)\n    7\n    >>> gcd(10, 30)\n    10\n    >>> gcd(2, 1)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the lowest common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(1, 4)\n    4\n    >>> lcm(14, 7)\n    105\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef divisors(n: int):\n    \"\"\"Return divisors of n, as a list.\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(3)\n    [1, 3]\n    \"\"\"\n    ans = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans.append(i)\n    return ans\n\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(34, 19)\n    1\n    >>> gcd(14, 7)\n    7\n    >>> gcd(10, 30)\n    10\n    >>> gcd(2, 1)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the lowest common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(1, 4)\n    4\n    >>> lcm(14, 7)\n    105\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef divisors(n: int):\n    \"\"\"Return divisors of n, as a list.\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(3)\n    [1, 3]\n    \"\"\"\n    ans = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans.append(i)\n    return ans\n\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(34, 19)\n    1\n    >>> gcd(14, 7)\n    7\n    >>> gcd(10, 30)\n    10\n    >>> gcd(2, 1)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the lowest common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(1, 4)\n    4\n    >>> lcm(14, 7)\n    105\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef divisors(n:"}
{"task_id": "HumanEval/48", "completion": "return True\n\n\ndef is_prime(number: int):\n    \"\"\"\n    Checks if the given number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(29)\n    True\n    \"\"\"\n    return True\n\n\ndef is_palindrome_sentence(sentence: str):\n    \"\"\"\n    Checks if sentence is a palindrome\n    >>> is_palindrome_sentence(\"Go hang a salami I'm a lasagna hog.\")\n    True\n    >>> is_palindrome_sentence(\"Was it a car or a cat I saw?\")\n    True\n    >>> is_palindrome_sentence(\"Was it a car or a cat I saw? or yes\")\n    False\n    >>> is_palindrome_sentence(\"Go hang a salami I'm a lasagna hog.\")\n    True\n    >>> is_palindrome_sentence(\"Go hang a salami I'm a lasagna hog. or yes\")\n    False\n    \"\"\"\n    return True\n\n\ndef is_armstrong(number: int):\n    \"\"\"\n    Checks if the given number is an Armstrong number\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    >>> is_armstrong(1000)\n    False\n    >>> is_armstrong(150)\n    False\n    \"\"\"\n    return True\n\n\ndef is_armstrong_sentence(sentence: str):\n    \"\"\"\n    Checks if sentence is an Armstrong number\n    >>> is_armstrong_sentence(\"Is this a Armstrong number?\")\n    True\n    >>> is_armstrong_sentence(\"Is this a Armstrong number? No\")\n    False\n    \"\"\"\n    return True\n\n\ndef get_palindrome_primes(number: int):\n    \"\"\"\n    Generates and returns all prime numbers\n    >>> get_palindrome_primes(100)\n    [101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 311, 337, 347, 353, 359, 373, 379, 383, 389, 727, 733, 739, 743, 751, 797, 799, 907, 911, 919, 929, 937, 941, 947]\n    \"\"\"\n    return []\n\n\ndef get_armstrong_primes(number: int):\n    \"\"\"\n    Generates and returns all Armstrong numbers\n    >>> get_armstrong_primes(100)\n    [153, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 407, 505, 593, 600, 604, 607, 617, 653, 664, 665, 666, 667, 668, 676, 688, 703, 707, 716, 717, 718, 719, 722, 723, 736, 738, 742, 747, 766, 767, 769, 788, 800, 802, 818, 842, 864, 872, 887]\n    \"\"\"\n    return []\n\n\ndef get_palindrome_armstrong_primes(number: int):\n    \"\"\"\n    Generates and returns all Armstrong numbers\n    >>> get_palindrome_armstrong_primes(100)\n    [153, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 407, 505, 593, 600, 604, 607, 617, 653, 664, 665, 666, 667, 668, 676, 688, 703, 707, 716, 717, 718, 719, 722, 723, 736, 738, 742, 747, 766, 767, 769, 788, 800, 802, 818, 842, 864, 872, 887]\n    \"\"\"\n    return []\n\n\ndef is_palindrome_prime(number: int):\n    \"\"\"\n    Checks if number is a palindrome and prime\n    >>> is_palindrome_prime(153)\n    False\n    >>> is_palindrome_prime(123321)\n    True\n    \"\"\"\n    return True\n\n\ndef is_armstrong_prime(number: int):\n    \"\"\"\n    Checks if number is an Armstrong and prime\n    >>> is_armstrong_prime(153)\n    False\n    >>> is_armstrong_prime(150)\n    False\n    >>> is_armstrong_prime(157)\n    False\n    >>> is_armstrong_prime(158)\n    False\n    \"\"\"\n    return True\n\n\ndef is_palindrome_armstrong_prime(number: int):\n    \"\"\"\n    Checks if number is a palindrome and armstrong\n    >>> is_palindrome_armstrong_prime(153)\n    False\n    >>> is_palindrome_armstrong_prime(150)\n    False\n    >>> is_palindrome_armstrong_prime(157)\n    False\n    >>> is_palindrome_armstrong_prime(158)\n    False\n    \"\"\"\n    return True\n\n\ndef get_primes(number: int):\n    \"\"\"\n    Generates and returns all prime numbers\n    >>> get_primes(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n    return"}
{"task_id": "HumanEval/49", "completion": "return pow(2, n, p)\n\n\ndef fermat_factor(n: int):\n    \"\"\"Find factors of n via Fermat's factorization method.\n    >>> fermat_factor(15)\n    (3, 5)\n    >>> fermat_factor(79)\n    (79, 1)\n    \"\"\"\n    if n < 2:\n        raise ValueError(f\"Fermat's method can only be applied to positive integers.\")\n    elif n % 2 == 0:\n        return 2, n // 2\n    elif n % 3 == 0:\n        return 3, n // 3\n    elif n % 5 == 0:\n        return 5, n // 5\n    else:\n        i = 1\n        while True:\n            i += 1\n            if modp(i, n) == n - 1:\n                return i, n // i\n            if modp(i, n) == 1:\n                return 1, n // 1\n            if i > n // 2:\n                return n, 1\n\n\ndef miller_rabin(n: int):\n    \"\"\"Miller-Rabin primality test for n.\n    >>> miller_rabin(1009)\n    True\n    >>> miller_rabin(1009)\n    True\n    >>> miller_rabin(1009)\n    True\n    >>> miller_rabin(1009)\n    True\n    \"\"\"\n    if n < 2:\n        raise ValueError(f\"Fermat's method can only be applied to positive integers.\")\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        a = modp(1, n)\n        b = modp(n - 1, n)\n        i = 0\n        while True:\n            i += 1\n            if i == n - 1:\n                return b % n == 1\n            elif b % 2 == 0:\n                return False\n            else:\n                b = modp(b, n)\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    return miller_rabin(n)\n\n\ndef test():\n    \"\"\"Run primality test and output prime candidates.\"\"\"\n    for n in range(1, 1000):\n        if miller_rabin(n):\n            print(n)\n\n\ndef modular_multiplication(n: int, m: int, p: int):\n    \"\"\"Multiplies n by m modulo p (be aware of numerics).\n    >>> modular_multiplication(3, 5, 11)\n    3\n    >>> modular_multiplication(5, 5, 11)\n    0\n    >>> modular_multiplication(5, 0, 11)\n    0\n    \"\"\"\n    if m == 0 or p == 0:\n        return 0\n    else:\n        return n % p\n\n\ndef modular_inverse(n: int, p: int):\n    \"\"\"Returns an integer x in 0..p-1 such that n * x (mod p) == 1.\"\"\"\n    if p == 0:\n        raise ValueError(\"Cannot calculate modular inverse of 0.\")\n    elif p == 1:\n        return 0\n    elif p == 2:\n        return n % p\n    elif p == 3:\n        return modular_multiplication(n, 2, 3)\n    elif p == 5:\n        return modular_multiplication(n, 4, 5)\n    elif p == 7:\n        return modular_multiplication(n, 2, 7)\n    else:\n        i = 0\n        while True:\n            i += 1\n            x = modular_multiplication(i, p - 1, p)\n            if x == 1:\n                return i\n\n\ndef modular_exponent(n: int, m: int, p: int):\n    \"\"\"Calculate n**m (mod p) (be aware of numerics).\n    >>> modular_exponent(2, 10, 13)\n    1\n    \"\"\"\n    if m == 0 or p == 0:\n        return 0\n    elif m == 1:\n        return n % p\n    elif p"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_morse(s: str):\n    \"\"\"\n    Returns morse code string of input string.\n    \"\"\"\n    MORSE_CODE_DICT = {\n        \"a\": \".-\",\n        \"b\": \"-...\",\n        \"c\": \"-.-.\",\n        \"d\": \"-..\",\n        \"e\": \".\",\n        \"f\": \"..-.\",\n        \"g\": \"--.\",\n        \"h\": \"....\",\n        \"i\": \"..\",\n        \"j\": \".---\",\n        \"k\": \"-.-\",\n        \"l\": \".-..\",\n        \"m\": \"--\",\n        \"n\": \"-.\",\n        \"o\": \"---\",\n        \"p\": \".--.\",\n        \"q\": \"--.-\",\n        \"r\": \".-.\",\n        \"s\": \"...\",\n        \"t\": \"-\",\n        \"u\": \"..-\",\n        \"v\": \"...-\",\n        \"w\": \".--\",\n        \"x\": \"-..-\",\n        \"y\": \"-.--\",\n        \"z\": \"--..\",\n    }\n    return \" \".join([MORSE_CODE_DICT[s] for s in s.lower()])\n\n\ndef decode_morse(s: str):\n    \"\"\"\n    Takes string encoded with encode_morse function. Returns decoded string.\n    \"\"\"\n    MORSE_CODE_DICT = {\n        \".-\": \"a\",\n        \"-...\": \"b\",\n        \"-.-.\": \"c\",\n        \"-..\": \"d\",\n        \".\": \"e\",\n        \"..-.\": \"f\",\n        \"--.\": \"g\",\n        \"....\": \"h\",\n        \"..\": \"i\",\n        \".---\": \"j\",\n        \"-.-\": \"k\",\n        \".-..\": \"l\",\n        \"--\": \"m\",\n        \"-.\": \"n\",\n        \"---\": \"o\",\n        \".--.\": \"p\",\n        \"--.-\": \"q\",\n        \".-.\": \"r\",\n        \"...\": \"s\",\n        \"-\": \"t\",\n        \"..-\": \"u\",\n        \"...-\": \"v\",\n        \".--\": \"w\",\n        \"-..-\": \"x\",\n        \"-.--\": \"y\",\n        \"--..\": \"z\",\n    }\n    return \"\".join([MORSE_CODE_DICT[s] for s in s.split()])\n\n\ndef encode_binary(s: str):\n    \"\"\"\n    Returns string encoded with binary code.\n    \"\"\"\n    return \"\".join([f\"{ord(s):08b}\" for s in s])\n\n\ndef decode_binary(s: str):\n    \"\"\"\n    Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int(s, 2)) for s in [s[i : i + 8] for i in range(0, len(s), 8)]])\n\n\ndef encode_base64(s: str):\n    \"\"\"\n    Returns base64 encoded string.\n    \"\"\"\n    BASE64_DICT = {\n        \"a\": \"0000\",\n        \"b\": \"0001\",\n        \"c\": \"0010\",\n        \"d\": \"0011\",\n        \"e\": \"0100\",\n        \"f\": \"0101\",\n        \"g\": \"0110\",\n        \"h\": \"0111\",\n        \"i\": \"1000\",\n        \"j\": \"1001\",\n        \"k\": \"1010\",\n        \"l\": \"1011\",\n        \"m\": \"1100\",\n        \"n\": \"1101\",\n        \"o\": \"1110\",\n        \"p\": \"1111\",\n    }\n    return \"\".join([BASE64_DICT[s] for s in s.lower()])\n\n\ndef decode_base64(s: str):\n    \"\"\"\n    Takes base64 encoded string and returns decoded string.\n    \"\"\"\n    BASE64_DICT = {\n        \"0000\": \"a\",\n        \"0001\": \"b\",\n        \"0010\": \"c\",\n        \"0011\": \"d\",\n        \"0100\": \"e\",\n        \"0101\": \"f\",\n        \"0110\": \"g\",\n        \"0111\": \"h\",\n        \"1000\": \"i\",\n        \"1001\": \"j\",\n        \"1010\": \"k\",\n        \"1011\": \"l\",\n        \"1100\": \"m\",\n        \"1101\": \"n\",\n        \"1110\": \"o\",\n        \"1111\": \"p\",\n    }\n    return \"\".join([BASE64_DICT[s] for s in [\"\".join([s[i : i + 4] for i in range(0, 6, 4)]) for s in s.split("}
{"task_id": "HumanEval/51", "completion": "result = \"\"\n    vowels = set(\"aeiou\")\n    for letter in text.lower():\n        if letter not in vowels:\n            result += letter\n    return result\n        \n\n\ndef is_palindrome(word):\n    \"\"\"\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('madam')\n    True\n    >>> is_palindrome('qwertyqwerty')\n    False\n    \"\"\"\n    reversed_word = word[::-1]\n    return word == reversed_word\n\n\ndef is_prime(number):\n    \"\"\"\n    >>> is_prime(13)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(111)\n    False\n    \"\"\"\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef nth_prime(number):\n    \"\"\"\n    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    \"\"\"\n    primes = []\n    i = 2\n    while len(primes) < number:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n\n\n\ndef factorial(n):\n    \"\"\"\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(3)\n    6\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n\n\ndef fibonacci(n):\n    \"\"\"\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(7)\n    13\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\n\ndef fibonacci_generator(n):\n    \"\"\"\n    >>> fibonacci_generator(0)\n    0\n    >>> fibonacci_generator(1)\n    1\n    >>> fibonacci_generator(3)\n    2\n    \"\"\"\n    a, b = 0, 1\n    yield a\n    for i in range(n):\n        a, b = b, a + b\n        yield a\n\n\n\ndef sum_of_lists(lists):\n    \"\"\"\n    >>> sum_of_lists([[1, 2, 3], [4, 5, 6]])\n    21\n    >>> sum_of_lists([[1, 2, 3], []])\n    6\n    \"\"\"\n    result = 0\n    for sublist in lists:\n        result += sum(sublist)\n    return result\n\n\n\ndef flatten(lists):\n    \"\"\"\n    >>> flatten([[1, 2, 3], [4, 5, 6]])\n    [1, 2, 3, 4, 5, 6]\n    >>> flatten([[1, 2, 3], []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for sublist in lists for item in sublist]\n\n\n\ndef transpose(matrix):\n    \"\"\"\n    >>> transpose([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    \"\"\"\n    return list(map(list, zip(*matrix)))\n\n\n\ndef count_words(text):\n    \"\"\"\n    >>> count_words('')\n    {}\n    >>> count_words('abc abc abC')\n    {'abc': 2, 'abC': 1}\n    \"\"\"\n    counts = {}\n    for word in text.split():\n        word = word.lower()\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\n\n\ndef fibonacci_generator(n):\n    \"\"\"\n    >>> fibonacci_generator(0)\n    0\n    >>> fibonacci_generator(1)\n    1\n    >>> fibonacci_generator(3)\n    2\n    \"\"\"\n    a, b = 0, 1\n    yield a\n    for i in range(n):\n        a, b = b, a + b\n        yield a\n\n\n\ndef sum_of_lists(lists):\n    \"\"\"\n    >>> sum_of_lists([[1, 2, 3], [4, 5, 6]])\n    21\n    >>> sum_of_lists([[1, 2, 3], []])\n    6\n    \"\"\"\n    result = 0\n    for sublist in lists:\n        result += sum(sublist)\n    return result\n\n\n\ndef flatten(lists):\n    \"\"\"\n    >>> flatten([[1, 2, 3], [4, 5, 6]])\n    [1, 2, 3, 4, 5, 6]\n    >>> flatten([[1, 2, 3], []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for sublist in lists for item in sublist]\n\n\n\ndef transpose(matrix):\n    \"\"\"\n    >>> transpose([[1, 2], [3, 4], [5, 6]])\n    [[1, 3, 5], [2, 4, 6]]\n    \"\"\"\n    return list(map(list, zip(*matrix)))\n\n\n\ndef count_words(text):\n    \"\"\"\n    >>> count_words('')\n    {}\n    >>> count_words('abc abc abC')\n    {'abc': 2, 'abC': 1}\n    \"\"\"\n    counts = {}\n    for word in text.split():\n        word = word.lower()\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\n\n\ndef fibonacci_generator(n):\n    \"\"\"\n    >>> fibonacci_generator(0)\n    0\n    >>> fibonacci_generator(1)\n    1\n    >>> fibonacci_generator(3)\n    2\n    \"\"\"\n    a, b = 0, 1\n    yield a\n    for i in range(n):\n        a, b = b, a + b\n        yield a\n\n\n\ndef sum_of_lists(lists):\n    \"\"\"\n    >>> sum_of_lists([[1, 2, 3], [4, 5, 6]])\n    21\n    >>> sum_of_lists([[1, 2, 3], []])\n    6\n    \"\"\"\n    result = 0\n    for sublist in lists:\n        result += sum(sublist)\n    return result\n\n\n\ndef flatten(lists):\n    \"\"\"\n    >>> flatten([[1, 2, 3], [4, 5, 6]])\n    [1, 2, 3, 4, 5, 6]\n    >>> flatten([[1, 2, 3], []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for sublist in lists for item in sublist]\n\n\n\nde"}
{"task_id": "HumanEval/52", "completion": "for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold_recursive(l: list, t: int, index: int = 0):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if index >= len(l):\n        return True\n    if l[index] >= t:\n        return False\n    return below_threshold_recursive(l, t, index + 1)\n\n\ndef below_threshold_sum(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return sum(1 for i in l if i >= t) == 0\n\n\ndef below_threshold_sum_recursive(l: list, t: int, index: int = 0):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if index >= len(l):\n        return True\n    if l[index] >= t:\n        return False\n    return below_threshold_sum_recursive(l, t, index + 1)\n\n\ndef below_threshold_sum_with_tuple(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    result = True\n    for i in l:\n        if i >= t:\n            result = False\n    return result\n\n\ndef below_threshold_sum_with_tuple_recursive(l: list, t: int, index: int = 0):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if index >= len(l):\n        return True\n    if l[index] >= t:\n        return False\n    return below_threshold_sum_with_tuple_recursive(l, t, index + 1)\n\n\ndef below_threshold_sum_with_tuple_sum(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return sum(1 for i in l if i >= t) == 0\n\n\ndef below_threshold_sum_with_tuple_sum_recursive(l: list, t: int, index: int = 0):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if index >= len(l):\n        return 0\n    if l[index] >= t:\n        return 0\n    return 1 + below_threshold_sum_with_tuple_sum_recursive(l, t, index + 1)\n\n\ndef below_threshold_sum_with_tuple_sum_with_tuple(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return sum(1 for i in l if i >= t) == 0\n\n\ndef below_threshold_sum_with_tuple_sum_with_tuple_recursive(\n    l: list, t: int, index: int = 0\n):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if index >= len(l):\n        return (0, 0)\n    if l[index]"}
{"task_id": "HumanEval/53", "completion": "return x + y\n\ndef is_odd(x: int):\n    \"\"\" Whether x is odd\n    >>> is_odd(2)\n    False\n    >>> is_odd(5)\n    True\n    \"\"\"\n    return x % 2 == 1\n\ndef largest_factor(x: int):\n    \"\"\" Return the largest factor of x\n    >>> largest_factor(12) # factors are 1, 2, 3, 4, 6, 12\n    6\n    >>> largest_factor(14) # factors are 1, 2, 7, 14\n    7\n    \"\"\"\n    factor = 1\n    for i in range(1, x):\n        if x % i == 0:\n            factor = i\n    return factor\n\ndef fizzbuzz(x: int):\n    \"\"\"\n    >>> fizzbuzz(1)\n    1\n    >>> fizzbuzz(5)\n    5\n    >>> fizzbuzz(12)\n    12\n    >>> fizzbuzz(2)\n    2\n    >>> fizzbuzz(3)\n    Fizz\n    >>> fizzbuzz(4)\n    4\n    >>> fizzbuzz(6)\n    Fizz\n    >>> fizzbuzz(7)\n    Buzz\n    >>> fizzbuzz(8)\n    8\n    >>> fizzbuzz(9)\n    Fizz\n    >>> fizzbuzz(10)\n    Buzz\n    \"\"\"\n    if x % 15 == 0:\n        return \"FizzBuzz\"\n    elif x % 5 == 0:\n        return \"Buzz\"\n    elif x % 3 == 0:\n        return \"Fizz\"\n    else:\n        return x\n\ndef is_prime(x: int):\n    \"\"\" Return True if x is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n    if x < 2:\n        return False\n    elif x == 2:\n        return True\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n\ndef sum_of_squares(x: int, y: int):\n    \"\"\" Return the sum of squares x and y\n    >>> sum_of_squares(1, 2)\n    5\n    >>> sum_of_squares(3, 4)\n    25\n    \"\"\"\n    return x**2 + y**2\n\ndef sum_of_multiples(x: int, y: int, n: int):\n    \"\"\" Return the sum of multiples of x, y, and n\n    >>> sum_of_multiples(3, 4, 100)\n    183\n    >>> sum_of_multiples(5, 7, 10)\n    30\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if i % x == 0 or i % y == 0:\n            sum += i\n    return sum\n\n\ndef is_even(x: int):\n    \"\"\" Return True if x is even\n    >>> is_even(2)\n    True\n    >>> is_even(5)\n    False\n    \"\"\"\n    return x % 2 == 0\n\ndef largest_factor_even(x: int):\n    \"\"\" Return the largest even factor of x\n    >>> largest_factor_even(12)\n    6\n    >>> largest_factor_even(13)\n    >>> largest_factor_even(2)\n    2\n    >>> largest_factor_even(10)\n    10\n    \"\"\"\n    factor = 0\n    for i in range(x, 0, -1):\n        if x % i == 0:\n            factor = i\n            break\n    return factor\n\ndef largest_factor_odd(x: int):\n    \"\"\" Return the largest odd factor of x\n    >>> largest_factor_odd(12)\n    11\n    >>> largest_factor_odd(13)\n    >>> largest_factor_odd(2)\n    Traceback (most recent call last):\n        ...\n    ValueError\n    \"\"\"\n    factor = 0\n    for i in range(1, x):\n        if x % i == 0:\n            if is_odd(i):\n                factor = i\n                break\n    if factor == 0:\n        raise ValueError(\"No odd factor\")\n    return factor\n\ndef largest_factor_odd_even(x: int):\n    \"\"\" Return the largest odd factor of x\n    >>> largest_factor_odd_even(12)\n    11\n    >>> largest_factor_odd_even(13)\n    >>> largest_factor_odd_even(2)\n    Traceback (most recent call last):\n        ...\n    ValueError\n    \"\"\"\n    factor = 0\n    for i in range(1, x):\n        if x % i == 0:\n            if is_odd(i) or is_even(i):\n                factor = i\n                break\n    if factor"}
{"task_id": "HumanEval/54", "completion": "s0_lst, s1_lst = list(s0), list(s1)\n    s0_lst.sort()\n    s1_lst.sort()\n    return s0_lst == s1_lst\n\ndef is_symmetric(s: str):\n    \"\"\"\n    Check if a string is a symmetric word.\n    >>> is_symmetric('madam')\n    True\n    >>> is_symmetric('madamim')\n    False\n    >>> is_symmetric('madamimandap')\n    True\n    >>> is_symmetric('madamimandapm')\n    False\n    >>> is_symmetric('madamimandapmm')\n    True\n    \"\"\"\n    return s[::-1] == s\n\n\ndef is_palindromic(s: str):\n    \"\"\"\n    Check if a string is a palindromic word.\n    >>> is_palindromic('madam')\n    True\n    >>> is_palindromic('madamim')\n    False\n    >>> is_palindromic('madamimandap')\n    True\n    >>> is_palindromic('madamimandapm')\n    False\n    >>> is_palindromic('madamimandapmm')\n    False\n    \"\"\"\n    \n    s_lst, s_rev_lst = list(s), list(s)[::-1]\n    return s_lst == s_rev_lst\n\n\ndef is_pangram(s: str):\n    \"\"\"\n    Check if a string is a pangram (contains all the letters in the alphabet).\n    >>> is_pangram('abcdefghijklmnopqrstuvwxyz')\n    True\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('The quick brown fox jumps ovEr the laZ doG')\n    False\n    \"\"\"\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    s_lst = list(s.lower())\n    for i in s_lst:\n        if i in alphabet:\n            alphabet.remove(i)\n    return alphabet == []\n\n\ndef count_vowels(s: str):\n    \"\"\"\n    Count vowels in a string.\n    >>> count_vowels('abracadabra')\n    5\n    >>> count_vowels('abracadabra')\n    5\n    >>> count_vowels('abracadabra')\n    5\n    >>> count_vowels('abracadabra')\n    5\n    \"\"\"\n    vowel_lst = ['a', 'e', 'i', 'o', 'u']\n    return len([i for i in list(s) if i in vowel_lst])\n\n\ndef sum_of_vowels(s: str):\n    \"\"\"\n    Sum vowels in a string.\n    >>> sum_of_vowels('abracadabra')\n    5\n    >>> sum_of_vowels('abracadabra')\n    5\n    >>> sum_of_vowels('abracadabra')\n    5\n    >>> sum_of_vowels('abracadabra')\n    5\n    \"\"\"\n    vowel_lst = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for i in list(s):\n        if i in vowel_lst:\n            vowel_count += 1\n    return vowel_count\n\n\ndef is_anagram(s0: str, s1: str):\n    \"\"\"\n    Check if two words are anagrams.\n    >>> is_anagram('ab', 'ba')\n    True\n    >>> is_anagram('ab', 'ba')\n    True\n    >>> is_anagram('ab', 'ba')\n    True\n    >>> is_anagram('ab', 'ba')\n    True\n    \"\"\"\n    return sorted(list(s0.lower())) == sorted(list(s1.lower()))\n\n\ndef sum_digits(n: int):\n    \"\"\"\n    Sum digits in a number.\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(123)\n    6\n    \"\"\"\n    sum_num = 0\n    for i in str(n):\n        sum_num += int(i)\n    return sum_num\n\n\ndef count_words(s: str):\n    \"\"\"\n    Count words in a string.\n    >>> count_words('abracadabra')\n    5\n    >>> count_words('abracadabra')\n    5\n    >>> count_words('abracadabra')\n    5\n    >>> count_words('abracadabra')\n    5\n    \"\"\"\n    return len(s.split(' '))\n\n\ndef longest_word(s: str):\n    \"\"\"\n    Find the longest word in a string.\n    >>> longest_word('abracadabra')\n    'abracadabra'\n    >>> longest_word('abracadabra')\n    'abracadabra'\n    >>> longest_word('abracadabra')\n    'abracadabra'\n    >>> longest_word('abracadabra')\n    'abracadabra'\n    \"\"\"\n    return max(s.split(' '), k"}
{"task_id": "HumanEval/55", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef fib_loop(n):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_0 = 0\n        fib_1 = 1\n        for _ in range(1, n):\n            fib_0, fib_1 = fib_1, fib_0 + fib_1\n        return fib_1\n\ndef fib_iterative(n):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(1, n):\n            a, b = b, a + b\n        return b\n\ndef fib_recursive(n):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_tail(n):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    def wrapper(n, a, b):\n        if n == 0:\n            return a\n        else:\n            return wrapper(n-1, b, a + b)\n    return wrapper(n, 0, 1)\n\ndef fib_recursion(n, a=0, b=1):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return a\n    else:\n        return fib_recursion(n-1, b, a+b)\n\ndef fib_recursion_tail(n, a=0, b=1):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return a\n    else:\n        return fib_recursion_tail(n-1, b, a+b)\n\n\ndef fib_generator(n):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        yield a\n        a, b = b, a + b\n        n -= 1\n\n\ndef fib_generator_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n == 0:\n        yield a\n    else:\n        yield from fib_generator_tail(n-1, b, a+b)\n\n\ndef fib_generator_recursive(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    yield a\n    yield from fib_generator_recursive(n-1, b, a+b)\n\ndef fib_generator_recursion(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n == 0:\n        yield a\n    else:\n        yield from fib_generator_recursion(n-1, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n == 0:\n        yield a\n    else:\n        yield from fib_generator_recursion_tail(n-1, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n > 0:\n        yield from fib_generator_recursion_tail(n-1, b, a+b)\n    else:\n        yield a\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n > 0:\n        yield from fib_generator_recursion_tail(n-1, b, a+b)\n    else:\n        yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n > 0:\n        yield from fib_generator_recursion_tail(n-1, b, a+b)\n    else:\n        yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n\ndef fib_generator_recursion_tail(n, a=0, b=1):\n    \"\"\"Return generator of Fibonacci number.\"\"\"\n    if n > 0:\n        yield from fib_generator_recursion_tail(n-1, b, a+b)\n    else:\n        yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n, b, a+b)\n    yield from fib_generator_recursion_tail(n-1, b, a+b)\n    yield a\n    yield from fib_generat"}
{"task_id": "HumanEval/56", "completion": "brackets = list(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(string: str):\n    \"\"\" return True if string is a palindrome.\n    >>> is_palindrome(\"civic\")\n    True\n    >>> is_palindrome(\"a\")\n    True\n    >>> is_palindrome(\"madamimadam\")\n    False\n    >>> is_palindrome(\"madam\")\n    True\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"civic\")\n    True\n    \"\"\"\n    string = list(string)\n    mid = int(len(string) / 2)\n    for i in range(mid):\n        if string[mid + i] != string[mid - i - 1]:\n            return False\n    return True\n    \n    \ndef is_power_of(base: int, power: int):\n    \"\"\" return True if power is a power of base.\n    >>> is_power_of(2, 1)\n    True\n    >>> is_power_of(2, 16)\n    True\n    >>> is_power_of(2, 17)\n    False\n    >>> is_power_of(10, 100)\n    False\n    \"\"\"\n    if power % base == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_pangram(string: str):\n    \"\"\" return True if string is a pangram.\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    \"\"\"\n    letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \n               \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \n               \"y\", \"z\"]\n    for letter in letters:\n        if letter in string:\n            pass\n        else:\n            return False\n    return True\n\ndef is_prime(num: int):\n    \"\"\" return True if num is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n            else:\n                return True\n    \n    \ndef is_palindrome_recursive(string: str):\n    \"\"\" return True if string is a palindrome.\n    >>> is_palindrome_recursive(\"civic\")\n    True\n    >>> is_palindrome_recursive(\"a\")\n    True\n    >>> is_palindrome_recursive(\"madamimadam\")\n    False\n    \"\"\"\n    if len(string) == 1 or len(string) == 0:\n        return True\n    elif string[0] != string[-1]:\n        return False\n    else:\n        return is_palindrome_recursive(string[1:-1])\n    \n    \ndef fibonacci(n):\n    \"\"\" return nth fibonacci number.\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \n    \ndef factorial(n):\n    \"\"\" return n factorial\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \n    \ndef sum_digits(num: int):\n    \"\"\" return sum of the digits of num\n    >>> sum_digits(123456)\n    21\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(111)\n    3\n    \"\"\"\n    digit_sum = 0\n    while num > 0:\n        digit = num % 10\n        digit_sum"}
{"task_id": "HumanEval/57", "completion": "increasing = decreasing = True\n    for i in range(1, len(l)):\n        if not increasing and not decreasing:\n            return False\n        if increasing and l[i] > l[i - 1]:\n            continue\n        if decreasing and l[i] < l[i - 1]:\n            continue\n        if increasing and l[i] < l[i - 1]:\n            increasing = False\n        if decreasing and l[i] > l[i - 1]:\n            decreasing = False\n    return True\n\n\ndef test_monotonic():\n    \"\"\">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 10, 10, 10, 10, 10, 10, 10])\n    True\n    >>> monotonic([10, 10, 10, 10, 10, 10, 10, 9])\n    False\n    >>> monotonic([10, 10, 10, 10, 10, 10, 10, 9, 8])\n    False\n    >>> monotonic([10, 10, 10, 10, 10, 10, 10, 9, 8, 7])\n    False\n    \"\"\"\n\n\ndef test_monotonic2():\n    \"\"\">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 10, 10, 10, 10, 10, 10, 10])\n    True\n    >>> monotonic([10, 10, 10, 10, 10, 10, 10, 9])\n    False\n    >>> monotonic([10, 10, 10, 10, 10, 10, 10, 9, 8])\n    False\n    >>> monotonic([10, 10, 10, 10, 10, 10, 10, 9, 8, 7])\n    False\n    \"\"\"\n\n\ndef get_next_vowel(string: str, index: int) -> str:\n    vowel_list = \"aeiou\"\n    vowel_list_length = len(vowel_list)\n    while True:\n        if (vowel_list.find(string[index]) + 1) % vowel_list_length == 0:\n            return string[index]\n        else:\n            index += 1\n\n\ndef get_next_consonant(string: str, index: int) -> str:\n    consonant_list = \"bcdfghjklmnpqrstvwxyz\"\n    consonant_list_length = len(consonant_list)\n    while True:\n        if (consonant_list.find(string[index]) + 1) % consonant_list_length == 0:\n            return string[index]\n        else:\n            index += 1\n\n\ndef next_vowel(string: str, index: int) -> str:\n    vowel = \"aeiou\"\n    vowel_index = vowel.find(string[index])\n    if vowel_index < 0:\n        raise ValueError(\n            f\"String {string} does not contain a vowel\"\n        )\n    vowel_length = len(vowel)\n    vowel_index += 1\n    vowel_index %= vowel_length\n    return vowel[vowel_index]\n\n\ndef next_consonant(string: str, index: int) -> str:\n    consonant = \"bcdfghjklmnpqrstvwxyz\"\n    consonant_index = consonant.find(string[index])\n    if consonant_index < 0:\n        raise ValueError(\n            f\"String {string} does not contain a consonant\"\n        )\n    consonant_length = len(consonant)\n    consonant_index += 1\n    consonant_index %= consonant_length\n    return consonant[consonant_index]\n\n\ndef next_cons(string: str, index: int) -> str:\n    if string[index] in \"aeiou\":\n        return next_vowel(string, index)\n    elif string[index] in \"bcdfghjklmnpqrstvwxyz\":\n        return next_consonant(string, index)\n    else:\n        raise ValueError(\n            f\"String {string} is not a consonant nor a vowel\"\n        )\n\n\ndef next_cons(string: str, index: int) -> str:\n    \"\"\"Return next consonant in string.\"\"\"\n    if string[index] in \"aeiou\":\n        return next_vowel(string, index)\n    elif string[index] in \"bcdfghjklmnpqrstvwxyz\":\n        return next_consonant(string, index)\n    else:\n        raise ValueError(\n            f\"String {string} is not a consonant nor a vowel\"\n        )\n\n\ndef get_vowel(string: str, index: int) -> str:\n    vowel_list = \"aeiou\"\n    vowel_list_length = len(vowel_list)\n    vowel_index = vowel_list.find(string[index])\n    vowel_index = vowel_index + 1\n    vowel_index %= vowel_list_length\n    vowel = vowel_list[vowel_index]\n    return vowel\n\n\ndef get_vowel(string: str, index: int) -> str:\n    \"\"\"Return next consonant in string.\"\"\"\n    vowel = \"aeiou\"\n    vowel_index ="}
{"task_id": "HumanEval/58", "completion": "return sorted(set(l1).intersection(l2))\n\n\ndef common_dictionary(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two dictionaries.\n    >>> common_dictionary([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    {'1': 1, '5': 1, '653': 2}\n    >>> common_dictionary([5, 3, 2, 8], [3, 2])\n    {'2': 2}\n    \"\"\"\n    return {key: min(l1.count(key), l2.count(key)) for key in l1 if key in l2}\n\n\ndef count_words(phrase: str) -> dict:\n    \"\"\"Count how many times each word in input phrase.\n    >>> count_words('hi is is is bob bob')\n    {'hi': 1, 'bob': 2, 'is': 3}\n    >>> count_words('bob')\n    {'bob': 1}\n    >>> count_words('hi hi hi hi')\n    {'hi': 4}\n    \"\"\"\n    words = phrase.split()\n    result = {}\n    for word in words:\n        result[word] = result.get(word, 0) + 1\n    return result\n\n\ndef transpose(l: list):\n    \"\"\"\n    >>> transpose([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [list(tup) for tup in zip(*l)]\n\n\ndef transpose_v2(l: list):\n    \"\"\"\n    >>> transpose_v2([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v2([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [list(tup) for tup in zip(*l)]\n\n\ndef transpose_v3(l: list):\n    \"\"\"\n    >>> transpose_v3([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v3([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return list(map(list, zip(*l)))\n\n\ndef transpose_v4(l: list):\n    \"\"\"\n    >>> transpose_v4([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v4([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [[row[i] for row in l] for i in range(len(l[0]))]\n\n\ndef transpose_v5(l: list):\n    \"\"\"\n    >>> transpose_v5([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v5([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return list(zip(*l))\n\n\ndef transpose_v6(l: list):\n    \"\"\"\n    >>> transpose_v6([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v6([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v7(l: list):\n    \"\"\"\n    >>> transpose_v7([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v7([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v8(l: list):\n    \"\"\"\n    >>> transpose_v8([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v8([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v9(l: list):\n    \"\"\"\n    >>> transpose_v9([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v9([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v10(l: list):\n    \"\"\"\n    >>> transpose_v10([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v10([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v11(l: list):\n    \"\"\"\n    >>> transpose_v11([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v11([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v12(l: list):\n    \"\"\"\n    >>> transpose_v12([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v12([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v13(l: list):\n    \"\"\"\n    >>> transpose_v13([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v13([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v14(l: list):\n    \"\"\"\n    >>> transpose_v14([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v14([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v15(l: list):\n    \"\"\"\n    >>> transpose_v15([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v15([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v16(l: list):\n    \"\"\"\n    >>> transpose_v16([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v16([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v17(l: list):\n    \"\"\"\n    >>> transpose_v17([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v17([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v18(l: list):\n    \"\"\"\n    >>> transpose_v18([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v18([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v19(l: list):\n    \"\"\"\n    >>> transpose_v19([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v19([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v20(l: list):\n    \"\"\"\n    >>> transpose_v20([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v20([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v21(l: list):\n    \"\"\"\n    >>> transpose_v21([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v21([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v22(l: list):\n    \"\"\"\n    >>> transpose_v22([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v22([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v23(l: list):\n    \"\"\"\n    >>> transpose_v23([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v23([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v24(l: list):\n    \"\"\"\n    >>> transpose_v24([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v24([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v25(l: list):\n    \"\"\"\n    >>> transpose_v25([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v25([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v26(l: list):\n    \"\"\"\n    >>> transpose_v26([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v26([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v27(l: list):\n    \"\"\"\n    >>> transpose_v27([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v27([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v28(l: list):\n    \"\"\"\n    >>> transpose_v28([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v28([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v29(l: list):\n    \"\"\"\n    >>> transpose_v29([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v29([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v30(l: list):\n    \"\"\"\n    >>> transpose_v30([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v30([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v31(l: list):\n    \"\"\"\n    >>> transpose_v31([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v31([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v32(l: list):\n    \"\"\"\n    >>> transpose_v32([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v32([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v33(l: list):\n    \"\"\"\n    >>> transpose_v33([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v33([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v34(l: list):\n    \"\"\"\n    >>> transpose_v34([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v34([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v35(l: list):\n    \"\"\"\n    >>> transpose_v35([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v35([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v36(l: list):\n    \"\"\"\n    >>> transpose_v36([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v36([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v37(l: list):\n    \"\"\"\n    >>> transpose_v37([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v37([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v38(l: list):\n    \"\"\"\n    >>> transpose_v38([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v38([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v39(l: list):\n    \"\"\"\n    >>> transpose_v39([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v39([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v40(l: list):\n    \"\"\"\n    >>> transpose_v40([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v40([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v41(l: list):\n    \"\"\"\n    >>> transpose_v41([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v41([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v42(l: list):\n    \"\"\"\n    >>> transpose_v42([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v42([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v43(l: list):\n    \"\"\"\n    >>> transpose_v43([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v43([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v44(l: list):\n    \"\"\"\n    >>> transpose_v44([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v44([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v45(l: list):\n    \"\"\"\n    >>> transpose_v45([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v45([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v46(l: list):\n    \"\"\"\n    >>> transpose_v46([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v46([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v47(l: list):\n    \"\"\"\n    >>> transpose_v47([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v47([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v48(l: list):\n    \"\"\"\n    >>> transpose_v48([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v48([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v49(l: list):\n    \"\"\"\n    >>> transpose_v49([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v49([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v50(l: list):\n    \"\"\"\n    >>> transpose_v50([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v50([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v51(l: list):\n    \"\"\"\n    >>> transpose_v51([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v51([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v52(l: list):\n    \"\"\"\n    >>> transpose_v52([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v52([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v53(l: list):\n    \"\"\"\n    >>> transpose_v53([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v53([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v54(l: list):\n    \"\"\"\n    >>> transpose_v54([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v54([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v55(l: list):\n    \"\"\"\n    >>> transpose_v55([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v55([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v56(l: list):\n    \"\"\"\n    >>> transpose_v56([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v56([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v57(l: list):\n    \"\"\"\n    >>> transpose_v57([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v57([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v58(l: list):\n    \"\"\"\n    >>> transpose_v58([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v58([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v59(l: list):\n    \"\"\"\n    >>> transpose_v59([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v59([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v60(l: list):\n    \"\"\"\n    >>> transpose_v60([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v60([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v61(l: list):\n    \"\"\"\n    >>> transpose_v61([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v61([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v62(l: list):\n    \"\"\"\n    >>> transpose_v62([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v62([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v63(l: list):\n    \"\"\"\n    >>> transpose_v63([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v63([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v64(l: list):\n    \"\"\"\n    >>> transpose_v64([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v64([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v65(l: list):\n    \"\"\"\n    >>> transpose_v65([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v65([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v66(l: list):\n    \"\"\"\n    >>> transpose_v66([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v66([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v67(l: list):\n    \"\"\"\n    >>> transpose_v67([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v67([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v68(l: list):\n    \"\"\"\n    >>> transpose_v68([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v68([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v69(l: list):\n    \"\"\"\n    >>> transpose_v69([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v69([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v70(l: list):\n    \"\"\"\n    >>> transpose_v70([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v70([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v71(l: list):\n    \"\"\"\n    >>> transpose_v71([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v71([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v72(l: list):\n    \"\"\"\n    >>> transpose_v72([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v72([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v73(l: list):\n    \"\"\"\n    >>> transpose_v73([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v73([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v74(l: list):\n    \"\"\"\n    >>> transpose_v74([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v74([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v75(l: list):\n    \"\"\"\n    >>> transpose_v75([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v75([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v76(l: list):\n    \"\"\"\n    >>> transpose_v76([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v76([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v77(l: list):\n    \"\"\"\n    >>> transpose_v77([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v77([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v78(l: list):\n    \"\"\"\n    >>> transpose_v78([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v78([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v79(l: list):\n    \"\"\"\n    >>> transpose_v79([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v79([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v80(l: list):\n    \"\"\"\n    >>> transpose_v80([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v80([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v81(l: list):\n    \"\"\"\n    >>> transpose_v81([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v81([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v82(l: list):\n    \"\"\"\n    >>> transpose_v82([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v82([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v83(l: list):\n    \"\"\"\n    >>> transpose_v83([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v83([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v84(l: list):\n    \"\"\"\n    >>> transpose_v84([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v84([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v85(l: list):\n    \"\"\"\n    >>> transpose_v85([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v85([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v86(l: list):\n    \"\"\"\n    >>> transpose_v86([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v86([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v87(l: list):\n    \"\"\"\n    >>> transpose_v87([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v87([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v88(l: list):\n    \"\"\"\n    >>> transpose_v88([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v88([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v89(l: list):\n    \"\"\"\n    >>> transpose_v89([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v89([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v90(l: list):\n    \"\"\"\n    >>> transpose_v90([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v90([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v91(l: list):\n    \"\"\"\n    >>> transpose_v91([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v91([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v92(l: list):\n    \"\"\"\n    >>> transpose_v92([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v92([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v93(l: list):\n    \"\"\"\n    >>> transpose_v93([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v93([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v94(l: list):\n    \"\"\"\n    >>> transpose_v94([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v94([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v95(l: list):\n    \"\"\"\n    >>> transpose_v95([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v95([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v96(l: list):\n    \"\"\"\n    >>> transpose_v96([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v96([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v97(l: list):\n    \"\"\"\n    >>> transpose_v97([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v97([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v98(l: list):\n    \"\"\"\n    >>> transpose_v98([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v98([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v99(l: list):\n    \"\"\"\n    >>> transpose_v99([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v99([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v100(l: list):\n    \"\"\"\n    >>> transpose_v100([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v100([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v101(l: list):\n    \"\"\"\n    >>> transpose_v101([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v101([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v102(l: list):\n    \"\"\"\n    >>> transpose_v102([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v102([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v103(l: list):\n    \"\"\"\n    >>> transpose_v103([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v103([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v104(l: list):\n    \"\"\"\n    >>> transpose_v104([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v104([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v105(l: list):\n    \"\"\"\n    >>> transpose_v105([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v105([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v106(l: list):\n    \"\"\"\n    >>> transpose_v106([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v106([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v107(l: list):\n    \"\"\"\n    >>> transpose_v107([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v107([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v108(l: list):\n    \"\"\"\n    >>> transpose_v108([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v108([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v109(l: list):\n    \"\"\"\n    >>> transpose_v109([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v109([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v110(l: list):\n    \"\"\"\n    >>> transpose_v110([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v110([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v111(l: list):\n    \"\"\"\n    >>> transpose_v111([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v111([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v112(l: list):\n    \"\"\"\n    >>> transpose_v112([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v112([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v113(l: list):\n    \"\"\"\n    >>> transpose_v113([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v113([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v114(l: list):\n    \"\"\"\n    >>> transpose_v114([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v114([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v115(l: list):\n    \"\"\"\n    >>> transpose_v115([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v115([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v116(l: list):\n    \"\"\"\n    >>> transpose_v116([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v116([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v117(l: list):\n    \"\"\"\n    >>> transpose_v117([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v117([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v118(l: list):\n    \"\"\"\n    >>> transpose_v118([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v118([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v119(l: list):\n    \"\"\"\n    >>> transpose_v119([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v119([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v120(l: list):\n    \"\"\"\n    >>> transpose_v120([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v120([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v121(l: list):\n    \"\"\"\n    >>> transpose_v121([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v121([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v122(l: list):\n    \"\"\"\n    >>> transpose_v122([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v122([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v123(l: list):\n    \"\"\"\n    >>> transpose_v123([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v123([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v124(l: list):\n    \"\"\"\n    >>> transpose_v124([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v124([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v125(l: list):\n    \"\"\"\n    >>> transpose_v125([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v125([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v126(l: list):\n    \"\"\"\n    >>> transpose_v126([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v126([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v127(l: list):\n    \"\"\"\n    >>> transpose_v127([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v127([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v128(l: list):\n    \"\"\"\n    >>> transpose_v128([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v128([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v129(l: list):\n    \"\"\"\n    >>> transpose_v129([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v129([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v130(l: list):\n    \"\"\"\n    >>> transpose_v130([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v130([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v131(l: list):\n    \"\"\"\n    >>> transpose_v131([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v131([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v132(l: list):\n    \"\"\"\n    >>> transpose_v132([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v132([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v133(l: list):\n    \"\"\"\n    >>> transpose_v133([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v133([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v134(l: list):\n    \"\"\"\n    >>> transpose_v134([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v134([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v135(l: list):\n    \"\"\"\n    >>> transpose_v135([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v135([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v136(l: list):\n    \"\"\"\n    >>> transpose_v136([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v136([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v137(l: list):\n    \"\"\"\n    >>> transpose_v137([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v137([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v138(l: list):\n    \"\"\"\n    >>> transpose_v138([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v138([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v139(l: list):\n    \"\"\"\n    >>> transpose_v139([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v139([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v140(l: list):\n    \"\"\"\n    >>> transpose_v140([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v140([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v141(l: list):\n    \"\"\"\n    >>> transpose_v141([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v141([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v142(l: list):\n    \"\"\"\n    >>> transpose_v142([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v142([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v143(l: list):\n    \"\"\"\n    >>> transpose_v143([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v143([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v144(l: list):\n    \"\"\"\n    >>> transpose_v144([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v144([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v145(l: list):\n    \"\"\"\n    >>> transpose_v145([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v145([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v146(l: list):\n    \"\"\"\n    >>> transpose_v146([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v146([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v147(l: list):\n    \"\"\"\n    >>> transpose_v147([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v147([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v148(l: list):\n    \"\"\"\n    >>> transpose_v148([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v148([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v149(l: list):\n    \"\"\"\n    >>> transpose_v149([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v149([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v150(l: list):\n    \"\"\"\n    >>> transpose_v150([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v150([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v151(l: list):\n    \"\"\"\n    >>> transpose_v151([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v151([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v152(l: list):\n    \"\"\"\n    >>> transpose_v152([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v152([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v153(l: list):\n    \"\"\"\n    >>> transpose_v153([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v153([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v154(l: list):\n    \"\"\"\n    >>> transpose_v154([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v154([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v155(l: list):\n    \"\"\"\n    >>> transpose_v155([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v155([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v156(l: list):\n    \"\"\"\n    >>> transpose_v156([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v156([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v157(l: list):\n    \"\"\"\n    >>> transpose_v157([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v157([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v158(l: list):\n    \"\"\"\n    >>> transpose_v158([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v158([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v159(l: list):\n    \"\"\"\n    >>> transpose_v159([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v159([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v160(l: list):\n    \"\"\"\n    >>> transpose_v160([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v160([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v161(l: list):\n    \"\"\"\n    >>> transpose_v161([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v161([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v162(l: list):\n    \"\"\"\n    >>> transpose_v162([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v162([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v163(l: list):\n    \"\"\"\n    >>> transpose_v163([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v163([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v164(l: list):\n    \"\"\"\n    >>> transpose_v164([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v164([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v165(l: list):\n    \"\"\"\n    >>> transpose_v165([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v165([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v166(l: list):\n    \"\"\"\n    >>> transpose_v166([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v166([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v167(l: list):\n    \"\"\"\n    >>> transpose_v167([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v167([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v168(l: list):\n    \"\"\"\n    >>> transpose_v168([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v168([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v169(l: list):\n    \"\"\"\n    >>> transpose_v169([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v169([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v170(l: list):\n    \"\"\"\n    >>> transpose_v170([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v170([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v171(l: list):\n    \"\"\"\n    >>> transpose_v171([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v171([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v172(l: list):\n    \"\"\"\n    >>> transpose_v172([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v172([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v173(l: list):\n    \"\"\"\n    >>> transpose_v173([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v173([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v174(l: list):\n    \"\"\"\n    >>> transpose_v174([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v174([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v175(l: list):\n    \"\"\"\n    >>> transpose_v175([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v175([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v176(l: list):\n    \"\"\"\n    >>> transpose_v176([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v176([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v177(l: list):\n    \"\"\"\n    >>> transpose_v177([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v177([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v178(l: list):\n    \"\"\"\n    >>> transpose_v178([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v178([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v179(l: list):\n    \"\"\"\n    >>> transpose_v179([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v179([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v180(l: list):\n    \"\"\"\n    >>> transpose_v180([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v180([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v181(l: list):\n    \"\"\"\n    >>> transpose_v181([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v181([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v182(l: list):\n    \"\"\"\n    >>> transpose_v182([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v182([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v183(l: list):\n    \"\"\"\n    >>> transpose_v183([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v183([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v184(l: list):\n    \"\"\"\n    >>> transpose_v184([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v184([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v185(l: list):\n    \"\"\"\n    >>> transpose_v185([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v185([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v186(l: list):\n    \"\"\"\n    >>> transpose_v186([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v186([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v187(l: list):\n    \"\"\"\n    >>> transpose_v187([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v187([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v188(l: list):\n    \"\"\"\n    >>> transpose_v188([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v188([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v189(l: list):\n    \"\"\"\n    >>> transpose_v189([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v189([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v190(l: list):\n    \"\"\"\n    >>> transpose_v190([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v190([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v191(l: list):\n    \"\"\"\n    >>> transpose_v191([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v191([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v192(l: list):\n    \"\"\"\n    >>> transpose_v192([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v192([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v193(l: list):\n    \"\"\"\n    >>> transpose_v193([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v193([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v194(l: list):\n    \"\"\"\n    >>> transpose_v194([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v194([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v195(l: list):\n    \"\"\"\n    >>> transpose_v195([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v195([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v196(l: list):\n    \"\"\"\n    >>> transpose_v196([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v196([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v197(l: list):\n    \"\"\"\n    >>> transpose_v197([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v197([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v198(l: list):\n    \"\"\"\n    >>> transpose_v198([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v198([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v199(l: list):\n    \"\"\"\n    >>> transpose_v199([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v199([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v200(l: list):\n    \"\"\"\n    >>> transpose_v200([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v200([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v201(l: list):\n    \"\"\"\n    >>> transpose_v201([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v201([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v202(l: list):\n    \"\"\"\n    >>> transpose_v202([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v202([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v203(l: list):\n    \"\"\"\n    >>> transpose_v203([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v203([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v204(l: list):\n    \"\"\"\n    >>> transpose_v204([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v204([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v205(l: list):\n    \"\"\"\n    >>> transpose_v205([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v205([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v206(l: list):\n    \"\"\"\n    >>> transpose_v206([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v206([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v207(l: list):\n    \"\"\"\n    >>> transpose_v207([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v207([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v208(l: list):\n    \"\"\"\n    >>> transpose_v208([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v208([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v209(l: list):\n    \"\"\"\n    >>> transpose_v209([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v209([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v210(l: list):\n    \"\"\"\n    >>> transpose_v210([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v210([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v211(l: list):\n    \"\"\"\n    >>> transpose_v211([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v211([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v212(l: list):\n    \"\"\"\n    >>> transpose_v212([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v212([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v213(l: list):\n    \"\"\"\n    >>> transpose_v213([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v213([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v214(l: list):\n    \"\"\"\n    >>> transpose_v214([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v214([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v215(l: list):\n    \"\"\"\n    >>> transpose_v215([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v215([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v216(l: list):\n    \"\"\"\n    >>> transpose_v216([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v216([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v217(l: list):\n    \"\"\"\n    >>> transpose_v217([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v217([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v218(l: list):\n    \"\"\"\n    >>> transpose_v218([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v218([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v219(l: list):\n    \"\"\"\n    >>> transpose_v219([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v219([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v220(l: list):\n    \"\"\"\n    >>> transpose_v220([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v220([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v221(l: list):\n    \"\"\"\n    >>> transpose_v221([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v221([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v222(l: list):\n    \"\"\"\n    >>> transpose_v222([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v222([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v223(l: list):\n    \"\"\"\n    >>> transpose_v223([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v223([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v224(l: list):\n    \"\"\"\n    >>> transpose_v224([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v224([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v225(l: list):\n    \"\"\"\n    >>> transpose_v225([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v225([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v226(l: list):\n    \"\"\"\n    >>> transpose_v226([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v226([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v227(l: list):\n    \"\"\"\n    >>> transpose_v227([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v227([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v228(l: list):\n    \"\"\"\n    >>> transpose_v228([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v228([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v229(l: list):\n    \"\"\"\n    >>> transpose_v229([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v229([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v230(l: list):\n    \"\"\"\n    >>> transpose_v230([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v230([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v231(l: list):\n    \"\"\"\n    >>> transpose_v231([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v231([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v232(l: list):\n    \"\"\"\n    >>> transpose_v232([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v232([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v233(l: list):\n    \"\"\"\n    >>> transpose_v233([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v233([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v234(l: list):\n    \"\"\"\n    >>> transpose_v234([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v234([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v235(l: list):\n    \"\"\"\n    >>> transpose_v235([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v235([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v236(l: list):\n    \"\"\"\n    >>> transpose_v236([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v236([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v237(l: list):\n    \"\"\"\n    >>> transpose_v237([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v237([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v238(l: list):\n    \"\"\"\n    >>> transpose_v238([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v238([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v239(l: list):\n    \"\"\"\n    >>> transpose_v239([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v239([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v240(l: list):\n    \"\"\"\n    >>> transpose_v240([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v240([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v241(l: list):\n    \"\"\"\n    >>> transpose_v241([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v241([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v242(l: list):\n    \"\"\"\n    >>> transpose_v242([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v242([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v243(l: list):\n    \"\"\"\n    >>> transpose_v243([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v243([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v244(l: list):\n    \"\"\"\n    >>> transpose_v244([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v244([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v245(l: list):\n    \"\"\"\n    >>> transpose_v245([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v245([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v246(l: list):\n    \"\"\"\n    >>> transpose_v246([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v246([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v247(l: list):\n    \"\"\"\n    >>> transpose_v247([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v247([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v248(l: list):\n    \"\"\"\n    >>> transpose_v248([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v248([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v249(l: list):\n    \"\"\"\n    >>> transpose_v249([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v249([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v250(l: list):\n    \"\"\"\n    >>> transpose_v250([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v250([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v251(l: list):\n    \"\"\"\n    >>> transpose_v251([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v251([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v252(l: list):\n    \"\"\"\n    >>> transpose_v252([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v252([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v253(l: list):\n    \"\"\"\n    >>> transpose_v253([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v253([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v254(l: list):\n    \"\"\"\n    >>> transpose_v254([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v254([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v255(l: list):\n    \"\"\"\n    >>> transpose_v255([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v255([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v256(l: list):\n    \"\"\"\n    >>> transpose_v256([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v256([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v257(l: list):\n    \"\"\"\n    >>> transpose_v257([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v257([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v258(l: list):\n    \"\"\"\n    >>> transpose_v258([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v258([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v259(l: list):\n    \"\"\"\n    >>> transpose_v259([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v259([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v260(l: list):\n    \"\"\"\n    >>> transpose_v260([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v260([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v261(l: list):\n    \"\"\"\n    >>> transpose_v261([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v261([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v262(l: list):\n    \"\"\"\n    >>> transpose_v262([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v262([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v263(l: list):\n    \"\"\"\n    >>> transpose_v263([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v263([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v264(l: list):\n    \"\"\"\n    >>> transpose_v264([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v264([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v265(l: list):\n    \"\"\"\n    >>> transpose_v265([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v265([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v266(l: list):\n    \"\"\"\n    >>> transpose_v266([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v266([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v267(l: list):\n    \"\"\"\n    >>> transpose_v267([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v267([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v268(l: list):\n    \"\"\"\n    >>> transpose_v268([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v268([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v269(l: list):\n    \"\"\"\n    >>> transpose_v269([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v269([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v270(l: list):\n    \"\"\"\n    >>> transpose_v270([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v270([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v271(l: list):\n    \"\"\"\n    >>> transpose_v271([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v271([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v272(l: list):\n    \"\"\"\n    >>> transpose_v272([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v272([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v273(l: list):\n    \"\"\"\n    >>> transpose_v273([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v273([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v274(l: list):\n    \"\"\"\n    >>> transpose_v274([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v274([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v275(l: list):\n    \"\"\"\n    >>> transpose_v275([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v275([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v276(l: list):\n    \"\"\"\n    >>> transpose_v276([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v276([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v277(l: list):\n    \"\"\"\n    >>> transpose_v277([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v277([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v278(l: list):\n    \"\"\"\n    >>> transpose_v278([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v278([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v279(l: list):\n    \"\"\"\n    >>> transpose_v279([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v279([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v280(l: list):\n    \"\"\"\n    >>> transpose_v280([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v280([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v281(l: list):\n    \"\"\"\n    >>> transpose_v281([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v281([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v282(l: list):\n    \"\"\"\n    >>> transpose_v282([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v282([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v283(l: list):\n    \"\"\"\n    >>> transpose_v283([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v283([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v284(l: list):\n    \"\"\"\n    >>> transpose_v284([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v284([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v285(l: list):\n    \"\"\"\n    >>> transpose_v285([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v285([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v286(l: list):\n    \"\"\"\n    >>> transpose_v286([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v286([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v287(l: list):\n    \"\"\"\n    >>> transpose_v287([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v287([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v288(l: list):\n    \"\"\"\n    >>> transpose_v288([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v288([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v289(l: list):\n    \"\"\"\n    >>> transpose_v289([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v289([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v290(l: list):\n    \"\"\"\n    >>> transpose_v290([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v290([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v291(l: list):\n    \"\"\"\n    >>> transpose_v291([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v291([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v292(l: list):\n    \"\"\"\n    >>> transpose_v292([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v292([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v293(l: list):\n    \"\"\"\n    >>> transpose_v293([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v293([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v294(l: list):\n    \"\"\"\n    >>> transpose_v294([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v294([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v295(l: list):\n    \"\"\"\n    >>> transpose_v295([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v295([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v296(l: list):\n    \"\"\"\n    >>> transpose_v296([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v296([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v297(l: list):\n    \"\"\"\n    >>> transpose_v297([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v297([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v298(l: list):\n    \"\"\"\n    >>> transpose_v298([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v298([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v299(l: list):\n    \"\"\"\n    >>> transpose_v299([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v299([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v300(l: list):\n    \"\"\"\n    >>> transpose_v300([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v300([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v301(l: list):\n    \"\"\"\n    >>> transpose_v301([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v301([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v302(l: list):\n    \"\"\"\n    >>> transpose_v302([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v302([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v303(l: list):\n    \"\"\"\n    >>> transpose_v303([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v303([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v304(l: list):\n    \"\"\"\n    >>> transpose_v304([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v304([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v305(l: list):\n    \"\"\"\n    >>> transpose_v305([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v305([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v306(l: list):\n    \"\"\"\n    >>> transpose_v306([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v306([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v307(l: list):\n    \"\"\"\n    >>> transpose_v307([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v307([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v308(l: list):\n    \"\"\"\n    >>> transpose_v308([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v308([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v309(l: list):\n    \"\"\"\n    >>> transpose_v309([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v309([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v310(l: list):\n    \"\"\"\n    >>> transpose_v310([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v310([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v311(l: list):\n    \"\"\"\n    >>> transpose_v311([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v311([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v312(l: list):\n    \"\"\"\n    >>> transpose_v312([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v312([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v313(l: list):\n    \"\"\"\n    >>> transpose_v313([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v313([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v314(l: list):\n    \"\"\"\n    >>> transpose_v314([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v314([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v315(l: list):\n    \"\"\"\n    >>> transpose_v315([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v315([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v316(l: list):\n    \"\"\"\n    >>> transpose_v316([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v316([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v317(l: list):\n    \"\"\"\n    >>> transpose_v317([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v317([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v318(l: list):\n    \"\"\"\n    >>> transpose_v318([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v318([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v319(l: list):\n    \"\"\"\n    >>> transpose_v319([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v319([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v320(l: list):\n    \"\"\"\n    >>> transpose_v320([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v320([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v321(l: list):\n    \"\"\"\n    >>> transpose_v321([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v321([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v322(l: list):\n    \"\"\"\n    >>> transpose_v322([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v322([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v323(l: list):\n    \"\"\"\n    >>> transpose_v323([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v323([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v324(l: list):\n    \"\"\"\n    >>> transpose_v324([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v324([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v325(l: list):\n    \"\"\"\n    >>> transpose_v325([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v325([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v326(l: list):\n    \"\"\"\n    >>> transpose_v326([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v326([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v327(l: list):\n    \"\"\"\n    >>> transpose_v327([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v327([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v328(l: list):\n    \"\"\"\n    >>> transpose_v328([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v328([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v329(l: list):\n    \"\"\"\n    >>> transpose_v329([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v329([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v330(l: list):\n    \"\"\"\n    >>> transpose_v330([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v330([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v331(l: list):\n    \"\"\"\n    >>> transpose_v331([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v331([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v332(l: list):\n    \"\"\"\n    >>> transpose_v332([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v332([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v333(l: list):\n    \"\"\"\n    >>> transpose_v333([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v333([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v334(l: list):\n    \"\"\"\n    >>> transpose_v334([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v334([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v335(l: list):\n    \"\"\"\n    >>> transpose_v335([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v335([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v336(l: list):\n    \"\"\"\n    >>> transpose_v336([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v336([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v337(l: list):\n    \"\"\"\n    >>> transpose_v337([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v337([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v338(l: list):\n    \"\"\"\n    >>> transpose_v338([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v338([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v339(l: list):\n    \"\"\"\n    >>> transpose_v339([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v339([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v340(l: list):\n    \"\"\"\n    >>> transpose_v340([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v340([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v341(l: list):\n    \"\"\"\n    >>> transpose_v341([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v341([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v342(l: list):\n    \"\"\"\n    >>> transpose_v342([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v342([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v343(l: list):\n    \"\"\"\n    >>> transpose_v343([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v343([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v344(l: list):\n    \"\"\"\n    >>> transpose_v344([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v344([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v345(l: list):\n    \"\"\"\n    >>> transpose_v345([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v345([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v346(l: list):\n    \"\"\"\n    >>> transpose_v346([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v346([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v347(l: list):\n    \"\"\"\n    >>> transpose_v347([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v347([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v348(l: list):\n    \"\"\"\n    >>> transpose_v348([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v348([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v349(l: list):\n    \"\"\"\n    >>> transpose_v349([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v349([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v350(l: list):\n    \"\"\"\n    >>> transpose_v350([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v350([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v351(l: list):\n    \"\"\"\n    >>> transpose_v351([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v351([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v352(l: list):\n    \"\"\"\n    >>> transpose_v352([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v352([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v353(l: list):\n    \"\"\"\n    >>> transpose_v353([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v353([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v354(l: list):\n    \"\"\"\n    >>> transpose_v354([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v354([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v355(l: list):\n    \"\"\"\n    >>> transpose_v355([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v355([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v356(l: list):\n    \"\"\"\n    >>> transpose_v356([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v356([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v357(l: list):\n    \"\"\"\n    >>> transpose_v357([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v357([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v358(l: list):\n    \"\"\"\n    >>> transpose_v358([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v358([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v359(l: list):\n    \"\"\"\n    >>> transpose_v359([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v359([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v360(l: list):\n    \"\"\"\n    >>> transpose_v360([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v360([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v361(l: list):\n    \"\"\"\n    >>> transpose_v361([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v361([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v362(l: list):\n    \"\"\"\n    >>> transpose_v362([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v362([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v363(l: list):\n    \"\"\"\n    >>> transpose_v363([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v363([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v364(l: list):\n    \"\"\"\n    >>> transpose_v364([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v364([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v365(l: list):\n    \"\"\"\n    >>> transpose_v365([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v365([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v366(l: list):\n    \"\"\"\n    >>> transpose_v366([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v366([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v367(l: list):\n    \"\"\"\n    >>> transpose_v367([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v367([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v368(l: list):\n    \"\"\"\n    >>> transpose_v368([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v368([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v369(l: list):\n    \"\"\"\n    >>> transpose_v369([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v369([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v370(l: list):\n    \"\"\"\n    >>> transpose_v370([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v370([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v371(l: list):\n    \"\"\"\n    >>> transpose_v371([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v371([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v372(l: list):\n    \"\"\"\n    >>> transpose_v372([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v372([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v373(l: list):\n    \"\"\"\n    >>> transpose_v373([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v373([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v374(l: list):\n    \"\"\"\n    >>> transpose_v374([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v374([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v375(l: list):\n    \"\"\"\n    >>> transpose_v375([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v375([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v376(l: list):\n    \"\"\"\n    >>> transpose_v376([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v376([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v377(l: list):\n    \"\"\"\n    >>> transpose_v377([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v377([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v378(l: list):\n    \"\"\"\n    >>> transpose_v378([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v378([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v379(l: list):\n    \"\"\"\n    >>> transpose_v379([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v379([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v380(l: list):\n    \"\"\"\n    >>> transpose_v380([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v380([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v381(l: list):\n    \"\"\"\n    >>> transpose_v381([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v381([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v382(l: list):\n    \"\"\"\n    >>> transpose_v382([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v382([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v383(l: list):\n    \"\"\"\n    >>> transpose_v383([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v383([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v384(l: list):\n    \"\"\"\n    >>> transpose_v384([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v384([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v385(l: list):\n    \"\"\"\n    >>> transpose_v385([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v385([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v386(l: list):\n    \"\"\"\n    >>> transpose_v386([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v386([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v387(l: list):\n    \"\"\"\n    >>> transpose_v387([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v387([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v388(l: list):\n    \"\"\"\n    >>> transpose_v388([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v388([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v389(l: list):\n    \"\"\"\n    >>> transpose_v389([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v389([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v390(l: list):\n    \"\"\"\n    >>> transpose_v390([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v390([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v391(l: list):\n    \"\"\"\n    >>> transpose_v391([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v391([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v392(l: list):\n    \"\"\"\n    >>> transpose_v392([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v392([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v393(l: list):\n    \"\"\"\n    >>> transpose_v393([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v393([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v394(l: list):\n    \"\"\"\n    >>> transpose_v394([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v394([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v395(l: list):\n    \"\"\"\n    >>> transpose_v395([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v395([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v396(l: list):\n    \"\"\"\n    >>> transpose_v396([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v396([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v397(l: list):\n    \"\"\"\n    >>> transpose_v397([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v397([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v398(l: list):\n    \"\"\"\n    >>> transpose_v398([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v398([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v399(l: list):\n    \"\"\"\n    >>> transpose_v399([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v399([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v400(l: list):\n    \"\"\"\n    >>> transpose_v400([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v400([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v401(l: list):\n    \"\"\"\n    >>> transpose_v401([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v401([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v402(l: list):\n    \"\"\"\n    >>> transpose_v402([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v402([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v403(l: list):\n    \"\"\"\n    >>> transpose_v403([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v403([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v404(l: list):\n    \"\"\"\n    >>> transpose_v404([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v404([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v405(l: list):\n    \"\"\"\n    >>> transpose_v405([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v405([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v406(l: list):\n    \"\"\"\n    >>> transpose_v406([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v406([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v407(l: list):\n    \"\"\"\n    >>> transpose_v407([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v407([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v408(l: list):\n    \"\"\"\n    >>> transpose_v408([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v408([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v409(l: list):\n    \"\"\"\n    >>> transpose_v409([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v409([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v410(l: list):\n    \"\"\"\n    >>> transpose_v410([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v410([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v411(l: list):\n    \"\"\"\n    >>> transpose_v411([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v411([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v412(l: list):\n    \"\"\"\n    >>> transpose_v412([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v412([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v413(l: list):\n    \"\"\"\n    >>> transpose_v413([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v413([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v414(l: list):\n    \"\"\"\n    >>> transpose_v414([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v414([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v415(l: list):\n    \"\"\"\n    >>> transpose_v415([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v415([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v416(l: list):\n    \"\"\"\n    >>> transpose_v416([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v416([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v417(l: list):\n    \"\"\"\n    >>> transpose_v417([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v417([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v418(l: list):\n    \"\"\"\n    >>> transpose_v418([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v418([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v419(l: list):\n    \"\"\"\n    >>> transpose_v419([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v419([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v420(l: list):\n    \"\"\"\n    >>> transpose_v420([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v420([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v421(l: list):\n    \"\"\"\n    >>> transpose_v421([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v421([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v422(l: list):\n    \"\"\"\n    >>> transpose_v422([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v422([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v423(l: list):\n    \"\"\"\n    >>> transpose_v423([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v423([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v424(l: list):\n    \"\"\"\n    >>> transpose_v424([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v424([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v425(l: list):\n    \"\"\"\n    >>> transpose_v425([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v425([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v426(l: list):\n    \"\"\"\n    >>> transpose_v426([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v426([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v427(l: list):\n    \"\"\"\n    >>> transpose_v427([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v427([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v428(l: list):\n    \"\"\"\n    >>> transpose_v428([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v428([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v429(l: list):\n    \"\"\"\n    >>> transpose_v429([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v429([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v430(l: list):\n    \"\"\"\n    >>> transpose_v430([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v430([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v431(l: list):\n    \"\"\"\n    >>> transpose_v431([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v431([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v432(l: list):\n    \"\"\"\n    >>> transpose_v432([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v432([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v433(l: list):\n    \"\"\"\n    >>> transpose_v433([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v433([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v434(l: list):\n    \"\"\"\n    >>> transpose_v434([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v434([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v435(l: list):\n    \"\"\"\n    >>> transpose_v435([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v435([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v436(l: list):\n    \"\"\"\n    >>> transpose_v436([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v436([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v437(l: list):\n    \"\"\"\n    >>> transpose_v437([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v437([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v438(l: list):\n    \"\"\"\n    >>> transpose_v438([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v438([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v439(l: list):\n    \"\"\"\n    >>> transpose_v439([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v439([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v440(l: list):\n    \"\"\"\n    >>> transpose_v440([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v440([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v441(l: list):\n    \"\"\"\n    >>> transpose_v441([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v441([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v442(l: list):\n    \"\"\"\n    >>> transpose_v442([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v442([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v443(l: list):\n    \"\"\"\n    >>> transpose_v443([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v443([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v444(l: list):\n    \"\"\"\n    >>> transpose_v444([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v444([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v445(l: list):\n    \"\"\"\n    >>> transpose_v445([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v445([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v446(l: list):\n    \"\"\"\n    >>> transpose_v446([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v446([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v447(l: list):\n    \"\"\"\n    >>> transpose_v447([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v447([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v448(l: list):\n    \"\"\"\n    >>> transpose_v448([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v448([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v449(l: list):\n    \"\"\"\n    >>> transpose_v449([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v449([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v450(l: list):\n    \"\"\"\n    >>> transpose_v450([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v450([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v451(l: list):\n    \"\"\"\n    >>> transpose_v451([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v451([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v452(l: list):\n    \"\"\"\n    >>> transpose_v452([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v452([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v453(l: list):\n    \"\"\"\n    >>> transpose_v453([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v453([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v454(l: list):\n    \"\"\"\n    >>> transpose_v454([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v454([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v455(l: list):\n    \"\"\"\n    >>> transpose_v455([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v455([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v456(l: list):\n    \"\"\"\n    >>> transpose_v456([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v456([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v457(l: list):\n    \"\"\"\n    >>> transpose_v457([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v457([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v458(l: list):\n    \"\"\"\n    >>> transpose_v458([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v458([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v459(l: list):\n    \"\"\"\n    >>> transpose_v459([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v459([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v460(l: list):\n    \"\"\"\n    >>> transpose_v460([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v460([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v461(l: list):\n    \"\"\"\n    >>> transpose_v461([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v461([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v462(l: list):\n    \"\"\"\n    >>> transpose_v462([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v462([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v463(l: list):\n    \"\"\"\n    >>> transpose_v463([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v463([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v464(l: list):\n    \"\"\"\n    >>> transpose_v464([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v464([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v465(l: list):\n    \"\"\"\n    >>> transpose_v465([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v465([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v466(l: list):\n    \"\"\"\n    >>> transpose_v466([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v466([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v467(l: list):\n    \"\"\"\n    >>> transpose_v467([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v467([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v468(l: list):\n    \"\"\"\n    >>> transpose_v468([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v468([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v469(l: list):\n    \"\"\"\n    >>> transpose_v469([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v469([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v470(l: list):\n    \"\"\"\n    >>> transpose_v470([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v470([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v471(l: list):\n    \"\"\"\n    >>> transpose_v471([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v471([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v472(l: list):\n    \"\"\"\n    >>> transpose_v472([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v472([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v473(l: list):\n    \"\"\"\n    >>> transpose_v473([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v473([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v474(l: list):\n    \"\"\"\n    >>> transpose_v474([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v474([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v475(l: list):\n    \"\"\"\n    >>> transpose_v475([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v475([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v476(l: list):\n    \"\"\"\n    >>> transpose_v476([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v476([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v477(l: list):\n    \"\"\"\n    >>> transpose_v477([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v477([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v478(l: list):\n    \"\"\"\n    >>> transpose_v478([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v478([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v479(l: list):\n    \"\"\"\n    >>> transpose_v479([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v479([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v480(l: list):\n    \"\"\"\n    >>> transpose_v480([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v480([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v481(l: list):\n    \"\"\"\n    >>> transpose_v481([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v481([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v482(l: list):\n    \"\"\"\n    >>> transpose_v482([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v482([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v483(l: list):\n    \"\"\"\n    >>> transpose_v483([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v483([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v484(l: list):\n    \"\"\"\n    >>> transpose_v484([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v484([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v485(l: list):\n    \"\"\"\n    >>> transpose_v485([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v485([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v486(l: list):\n    \"\"\"\n    >>> transpose_v486([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v486([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v487(l: list):\n    \"\"\"\n    >>> transpose_v487([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v487([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v488(l: list):\n    \"\"\"\n    >>> transpose_v488([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v488([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v489(l: list):\n    \"\"\"\n    >>> transpose_v489([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v489([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v490(l: list):\n    \"\"\"\n    >>> transpose_v490([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v490([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v491(l: list):\n    \"\"\"\n    >>> transpose_v491([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v491([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v492(l: list):\n    \"\"\"\n    >>> transpose_v492([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v492([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v493(l: list):\n    \"\"\"\n    >>> transpose_v493([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v493([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v494(l: list):\n    \"\"\"\n    >>> transpose_v494([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v494([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v495(l: list):\n    \"\"\"\n    >>> transpose_v495([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v495([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v496(l: list):\n    \"\"\"\n    >>> transpose_v496([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v496([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v497(l: list):\n    \"\"\"\n    >>> transpose_v497([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v497([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v498(l: list):\n    \"\"\"\n    >>> transpose_v498([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v498([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v499(l: list):\n    \"\"\"\n    >>> transpose_v499([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v499([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v500(l: list):\n    \"\"\"\n    >>> transpose_v500([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v500([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v501(l: list):\n    \"\"\"\n    >>> transpose_v501([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v501([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v502(l: list):\n    \"\"\"\n    >>> transpose_v502([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v502([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v503(l: list):\n    \"\"\"\n    >>> transpose_v503([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v503([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v504(l: list):\n    \"\"\"\n    >>> transpose_v504([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v504([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v505(l: list):\n    \"\"\"\n    >>> transpose_v505([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v505([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v506(l: list):\n    \"\"\"\n    >>> transpose_v506([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v506([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v507(l: list):\n    \"\"\"\n    >>> transpose_v507([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v507([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v508(l: list):\n    \"\"\"\n    >>> transpose_v508([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v508([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v509(l: list):\n    \"\"\"\n    >>> transpose_v509([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v509([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v510(l: list):\n    \"\"\"\n    >>> transpose_v510([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v510([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v511(l: list):\n    \"\"\"\n    >>> transpose_v511([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v511([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v512(l: list):\n    \"\"\"\n    >>> transpose_v512([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v512([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v513(l: list):\n    \"\"\"\n    >>> transpose_v513([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v513([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v514(l: list):\n    \"\"\"\n    >>> transpose_v514([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v514([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v515(l: list):\n    \"\"\"\n    >>> transpose_v515([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v515([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v516(l: list):\n    \"\"\"\n    >>> transpose_v516([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v516([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v517(l: list):\n    \"\"\"\n    >>> transpose_v517([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v517([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v518(l: list):\n    \"\"\"\n    >>> transpose_v518([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v518([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v519(l: list):\n    \"\"\"\n    >>> transpose_v519([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v519([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v520(l: list):\n    \"\"\"\n    >>> transpose_v520([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v520([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v521(l: list):\n    \"\"\"\n    >>> transpose_v521([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v521([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v522(l: list):\n    \"\"\"\n    >>> transpose_v522([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v522([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v523(l: list):\n    \"\"\"\n    >>> transpose_v523([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v523([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v524(l: list):\n    \"\"\"\n    >>> transpose_v524([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v524([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v525(l: list):\n    \"\"\"\n    >>> transpose_v525([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v525([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v526(l: list):\n    \"\"\"\n    >>> transpose_v526([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v526([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v527(l: list):\n    \"\"\"\n    >>> transpose_v527([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v527([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v528(l: list):\n    \"\"\"\n    >>> transpose_v528([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v528([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v529(l: list):\n    \"\"\"\n    >>> transpose_v529([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v529([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v530(l: list):\n    \"\"\"\n    >>> transpose_v530([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v530([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v531(l: list):\n    \"\"\"\n    >>> transpose_v531([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v531([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v532(l: list):\n    \"\"\"\n    >>> transpose_v532([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v532([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v533(l: list):\n    \"\"\"\n    >>> transpose_v533([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v533([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v534(l: list):\n    \"\"\"\n    >>> transpose_v534([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v534([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v535(l: list):\n    \"\"\"\n    >>> transpose_v535([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v535([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v536(l: list):\n    \"\"\"\n    >>> transpose_v536([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v536([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v537(l: list):\n    \"\"\"\n    >>> transpose_v537([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v537([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v538(l: list):\n    \"\"\"\n    >>> transpose_v538([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v538([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v539(l: list):\n    \"\"\"\n    >>> transpose_v539([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v539([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v540(l: list):\n    \"\"\"\n    >>> transpose_v540([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v540([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v541(l: list):\n    \"\"\"\n    >>> transpose_v541([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v541([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v542(l: list):\n    \"\"\"\n    >>> transpose_v542([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v542([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v543(l: list):\n    \"\"\"\n    >>> transpose_v543([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v543([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v544(l: list):\n    \"\"\"\n    >>> transpose_v544([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v544([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v545(l: list):\n    \"\"\"\n    >>> transpose_v545([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v545([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v546(l: list):\n    \"\"\"\n    >>> transpose_v546([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v546([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v547(l: list):\n    \"\"\"\n    >>> transpose_v547([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v547([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v548(l: list):\n    \"\"\"\n    >>> transpose_v548([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v548([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v549(l: list):\n    \"\"\"\n    >>> transpose_v549([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v549([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v550(l: list):\n    \"\"\"\n    >>> transpose_v550([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v550([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v551(l: list):\n    \"\"\"\n    >>> transpose_v551([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v551([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v552(l: list):\n    \"\"\"\n    >>> transpose_v552([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v552([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v553(l: list):\n    \"\"\"\n    >>> transpose_v553([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v553([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v554(l: list):\n    \"\"\"\n    >>> transpose_v554([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v554([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v555(l: list):\n    \"\"\"\n    >>> transpose_v555([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v555([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v556(l: list):\n    \"\"\"\n    >>> transpose_v556([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v556([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v557(l: list):\n    \"\"\"\n    >>> transpose_v557([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v557([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v558(l: list):\n    \"\"\"\n    >>> transpose_v558([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v558([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v559(l: list):\n    \"\"\"\n    >>> transpose_v559([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v559([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v560(l: list):\n    \"\"\"\n    >>> transpose_v560([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v560([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v561(l: list):\n    \"\"\"\n    >>> transpose_v561([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v561([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v562(l: list):\n    \"\"\"\n    >>> transpose_v562([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v562([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v563(l: list):\n    \"\"\"\n    >>> transpose_v563([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v563([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v564(l: list):\n    \"\"\"\n    >>> transpose_v564([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v564([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v565(l: list):\n    \"\"\"\n    >>> transpose_v565([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v565([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v566(l: list):\n    \"\"\"\n    >>> transpose_v566([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v566([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v567(l: list):\n    \"\"\"\n    >>> transpose_v567([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v567([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v568(l: list):\n    \"\"\"\n    >>> transpose_v568([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v568([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v569(l: list):\n    \"\"\"\n    >>> transpose_v569([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v569([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v570(l: list):\n    \"\"\"\n    >>> transpose_v570([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v570([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v571(l: list):\n    \"\"\"\n    >>> transpose_v571([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v571([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v572(l: list):\n    \"\"\"\n    >>> transpose_v572([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v572([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v573(l: list):\n    \"\"\"\n    >>> transpose_v573([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v573([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v574(l: list):\n    \"\"\"\n    >>> transpose_v574([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v574([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v575(l: list):\n    \"\"\"\n    >>> transpose_v575([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v575([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v576(l: list):\n    \"\"\"\n    >>> transpose_v576([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v576([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v577(l: list):\n    \"\"\"\n    >>> transpose_v577([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v577([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v578(l: list):\n    \"\"\"\n    >>> transpose_v578([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v578([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v579(l: list):\n    \"\"\"\n    >>> transpose_v579([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v579([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v580(l: list):\n    \"\"\"\n    >>> transpose_v580([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v580([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v581(l: list):\n    \"\"\"\n    >>> transpose_v581([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v581([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v582(l: list):\n    \"\"\"\n    >>> transpose_v582([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v582([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v583(l: list):\n    \"\"\"\n    >>> transpose_v583([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v583([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v584(l: list):\n    \"\"\"\n    >>> transpose_v584([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v584([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v585(l: list):\n    \"\"\"\n    >>> transpose_v585([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v585([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v586(l: list):\n    \"\"\"\n    >>> transpose_v586([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v586([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v587(l: list):\n    \"\"\"\n    >>> transpose_v587([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v587([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v588(l: list):\n    \"\"\"\n    >>> transpose_v588([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v588([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v589(l: list):\n    \"\"\"\n    >>> transpose_v589([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v589([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v590(l: list):\n    \"\"\"\n    >>> transpose_v590([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v590([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v591(l: list):\n    \"\"\"\n    >>> transpose_v591([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v591([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v592(l: list):\n    \"\"\"\n    >>> transpose_v592([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v592([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v593(l: list):\n    \"\"\"\n    >>> transpose_v593([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v593([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v594(l: list):\n    \"\"\"\n    >>> transpose_v594([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v594([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v595(l: list):\n    \"\"\"\n    >>> transpose_v595([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v595([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v596(l: list):\n    \"\"\"\n    >>> transpose_v596([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v596([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v597(l: list):\n    \"\"\"\n    >>> transpose_v597([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v597([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v598(l: list):\n    \"\"\"\n    >>> transpose_v598([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v598([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v599(l: list):\n    \"\"\"\n    >>> transpose_v599([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v599([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v600(l: list):\n    \"\"\"\n    >>> transpose_v600([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v600([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v601(l: list):\n    \"\"\"\n    >>> transpose_v601([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v601([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v602(l: list):\n    \"\"\"\n    >>> transpose_v602([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v602([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v603(l: list):\n    \"\"\"\n    >>> transpose_v603([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v603([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v604(l: list):\n    \"\"\"\n    >>> transpose_v604([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v604([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v605(l: list):\n    \"\"\"\n    >>> transpose_v605([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v605([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v606(l: list):\n    \"\"\"\n    >>> transpose_v606([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v606([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v607(l: list):\n    \"\"\"\n    >>> transpose_v607([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v607([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v608(l: list):\n    \"\"\"\n    >>> transpose_v608([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v608([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v609(l: list):\n    \"\"\"\n    >>> transpose_v609([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v609([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v610(l: list):\n    \"\"\"\n    >>> transpose_v610([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v610([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v611(l: list):\n    \"\"\"\n    >>> transpose_v611([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v611([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v612(l: list):\n    \"\"\"\n    >>> transpose_v612([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v612([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v613(l: list):\n    \"\"\"\n    >>> transpose_v613([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v613([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v614(l: list):\n    \"\"\"\n    >>> transpose_v614([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v614([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v615(l: list):\n    \"\"\"\n    >>> transpose_v615([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v615([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v616(l: list):\n    \"\"\"\n    >>> transpose_v616([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v616([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v617(l: list):\n    \"\"\"\n    >>> transpose_v617([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v617([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v618(l: list):\n    \"\"\"\n    >>> transpose_v618([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v618([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v619(l: list):\n    \"\"\"\n    >>> transpose_v619([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v619([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v620(l: list):\n    \"\"\"\n    >>> transpose_v620([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v620([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v621(l: list):\n    \"\"\"\n    >>> transpose_v621([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v621([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v622(l: list):\n    \"\"\"\n    >>> transpose_v622([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v622([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v623(l: list):\n    \"\"\"\n    >>> transpose_v623([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v623([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v624(l: list):\n    \"\"\"\n    >>> transpose_v624([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v624([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v625(l: list):\n    \"\"\"\n    >>> transpose_v625([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v625([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v626(l: list):\n    \"\"\"\n    >>> transpose_v626([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v626([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v627(l: list):\n    \"\"\"\n    >>> transpose_v627([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v627([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v628(l: list):\n    \"\"\"\n    >>> transpose_v628([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v628([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v629(l: list):\n    \"\"\"\n    >>> transpose_v629([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v629([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v630(l: list):\n    \"\"\"\n    >>> transpose_v630([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v630([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v631(l: list):\n    \"\"\"\n    >>> transpose_v631([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v631([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v632(l: list):\n    \"\"\"\n    >>> transpose_v632([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v632([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v633(l: list):\n    \"\"\"\n    >>> transpose_v633([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v633([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v634(l: list):\n    \"\"\"\n    >>> transpose_v634([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v634([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v635(l: list):\n    \"\"\"\n    >>> transpose_v635([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v635([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v636(l: list):\n    \"\"\"\n    >>> transpose_v636([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v636([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v637(l: list):\n    \"\"\"\n    >>> transpose_v637([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v637([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v638(l: list):\n    \"\"\"\n    >>> transpose_v638([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v638([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v639(l: list):\n    \"\"\"\n    >>> transpose_v639([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v639([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v640(l: list):\n    \"\"\"\n    >>> transpose_v640([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v640([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v641(l: list):\n    \"\"\"\n    >>> transpose_v641([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v641([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v642(l: list):\n    \"\"\"\n    >>> transpose_v642([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v642([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v643(l: list):\n    \"\"\"\n    >>> transpose_v643([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v643([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v644(l: list):\n    \"\"\"\n    >>> transpose_v644([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v644([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v645(l: list):\n    \"\"\"\n    >>> transpose_v645([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v645([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v646(l: list):\n    \"\"\"\n    >>> transpose_v646([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v646([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v647(l: list):\n    \"\"\"\n    >>> transpose_v647([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v647([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v648(l: list):\n    \"\"\"\n    >>> transpose_v648([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v648([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v649(l: list):\n    \"\"\"\n    >>> transpose_v649([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v649([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v650(l: list):\n    \"\"\"\n    >>> transpose_v650([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v650([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v651(l: list):\n    \"\"\"\n    >>> transpose_v651([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v651([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v652(l: list):\n    \"\"\"\n    >>> transpose_v652([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v652([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v653(l: list):\n    \"\"\"\n    >>> transpose_v653([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v653([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v654(l: list):\n    \"\"\"\n    >>> transpose_v654([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v654([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v655(l: list):\n    \"\"\"\n    >>> transpose_v655([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v655([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v656(l: list):\n    \"\"\"\n    >>> transpose_v656([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v656([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v657(l: list):\n    \"\"\"\n    >>> transpose_v657([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v657([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v658(l: list):\n    \"\"\"\n    >>> transpose_v658([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v658([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v659(l: list):\n    \"\"\"\n    >>> transpose_v659([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v659([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v660(l: list):\n    \"\"\"\n    >>> transpose_v660([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v660([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v661(l: list):\n    \"\"\"\n    >>> transpose_v661([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v661([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v662(l: list):\n    \"\"\"\n    >>> transpose_v662([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v662([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v663(l: list):\n    \"\"\"\n    >>> transpose_v663([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v663([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v664(l: list):\n    \"\"\"\n    >>> transpose_v664([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v664([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v665(l: list):\n    \"\"\"\n    >>> transpose_v665([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v665([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v666(l: list):\n    \"\"\"\n    >>> transpose_v666([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v666([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v667(l: list):\n    \"\"\"\n    >>> transpose_v667([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v667([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v668(l: list):\n    \"\"\"\n    >>> transpose_v668([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v668([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v669(l: list):\n    \"\"\"\n    >>> transpose_v669([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v669([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v670(l: list):\n    \"\"\"\n    >>> transpose_v670([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v670([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v671(l: list):\n    \"\"\"\n    >>> transpose_v671([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v671([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v672(l: list):\n    \"\"\"\n    >>> transpose_v672([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v672([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v673(l: list):\n    \"\"\"\n    >>> transpose_v673([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v673([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v674(l: list):\n    \"\"\"\n    >>> transpose_v674([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v674([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v675(l: list):\n    \"\"\"\n    >>> transpose_v675([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v675([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v676(l: list):\n    \"\"\"\n    >>> transpose_v676([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v676([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v677(l: list):\n    \"\"\"\n    >>> transpose_v677([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v677([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v678(l: list):\n    \"\"\"\n    >>> transpose_v678([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v678([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v679(l: list):\n    \"\"\"\n    >>> transpose_v679([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v679([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v680(l: list):\n    \"\"\"\n    >>> transpose_v680([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v680([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v681(l: list):\n    \"\"\"\n    >>> transpose_v681([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v681([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v682(l: list):\n    \"\"\"\n    >>> transpose_v682([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v682([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v683(l: list):\n    \"\"\"\n    >>> transpose_v683([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v683([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v684(l: list):\n    \"\"\"\n    >>> transpose_v684([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v684([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v685(l: list):\n    \"\"\"\n    >>> transpose_v685([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v685([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v686(l: list):\n    \"\"\"\n    >>> transpose_v686([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v686([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v687(l: list):\n    \"\"\"\n    >>> transpose_v687([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v687([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v688(l: list):\n    \"\"\"\n    >>> transpose_v688([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v688([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v689(l: list):\n    \"\"\"\n    >>> transpose_v689([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v689([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v690(l: list):\n    \"\"\"\n    >>> transpose_v690([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v690([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v691(l: list):\n    \"\"\"\n    >>> transpose_v691([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v691([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v692(l: list):\n    \"\"\"\n    >>> transpose_v692([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v692([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v693(l: list):\n    \"\"\"\n    >>> transpose_v693([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v693([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\"\n    return [*zip(*l)]\n\n\ndef transpose_v694(l: list):\n    \"\"\"\n    >>> transpose_v694([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose_v694([[1, 2], [3, 4, 5], [6]])\n    [[1, 3, 6], [2, 4]]\n    \"\"\""}
{"task_id": "HumanEval/59", "completion": "factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n / factor\n        else:\n            factor = factor + 1\n    return int(factor-1)\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, and False otherwise. Assume n is an integer.\"\"\"\n    if n <= 1:\n        return False\n    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            return False\n        factor = factor + 1\n    return True\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int = int(input(\"Enter a number: \"))\n    if n == 0 or n == 1:\n        print(\"This is not a prime number\")\n    else:\n        if is_prime(n):\n            print(n, \"is a prime number\")\n            print(largest_prime_factor(n))\n        else:\n            print(n, \"is not a prime number\")\n\n\nif __name__ == '__main__':\n    main()\n    \n    \n    \ndef main():\n    \"\"\"Main function\"\"\"\n    n: int"}
{"task_id": "HumanEval/60", "completion": "return n*(n+1)//2\n\ndef factorial(n: int):\n    \"\"\"factorial is a function that factorial of numbers.\n    >>> factorial(1)\n    1\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(100)\n    3368692651008000\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n*factorial(n-1)\n\ndef fibonacci(n: int):\n    \"\"\"fibonacci is a function that returns nth number of fibonacci sequence.\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(10)\n    55\n    >>> fibonacci(100)\n    354224848179261915075\n    >>> fibonacci(1000)\n    333992359882022525611\n    \"\"\"\n    if n <= 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n\ndef fib_iter(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(100)\n    354224848179261915075\n    >>> fib_iter(1000)\n    333992359882022525611\n    \"\"\"\n    a, b, i = 1, 1, 0\n    while i < n:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_2(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_2(1)\n    1\n    >>> fib_iter_2(10)\n    55\n    >>> fib_iter_2(100)\n    354224848179261915075\n    >>> fib_iter_2(1000)\n    333992359882022525611\n    \"\"\"\n    a, b, i = 1, 1, 0\n    while i < n:\n        a, b, i = a+b, a, i+1\n    return a\n\n\ndef fib_iter_3(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_3(1)\n    1\n    >>> fib_iter_3(10)\n    55\n    >>> fib_iter_3(100)\n    354224848179261915075\n    >>> fib_iter_3(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_4(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_4(1)\n    1\n    >>> fib_iter_4(10)\n    55\n    >>> fib_iter_4(100)\n    354224848179261915075\n    >>> fib_iter_4(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_5(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_5(1)\n    1\n    >>> fib_iter_5(10)\n    55\n    >>> fib_iter_5(100)\n    354224848179261915075\n    >>> fib_iter_5(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_6(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_6(1)\n    1\n    >>> fib_iter_6(10)\n    55\n    >>> fib_iter_6(100)\n    354224848179261915075\n    >>> fib_iter_6(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_7(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_7(1)\n    1\n    >>> fib_iter_7(10)\n    55\n    >>> fib_iter_7(100)\n    354224848179261915075\n    >>> fib_iter_7(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_8(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_8(1)\n    1\n    >>> fib_iter_8(10)\n    55\n    >>> fib_iter_8(100)\n    354224848179261915075\n    >>> fib_iter_8(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_9(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_9(1)\n    1\n    >>> fib_iter_9(10)\n    55\n    >>> fib_iter_9(100)\n    354224848179261915075\n    >>> fib_iter_9(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_10(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_10(1)\n    1\n    >>> fib_iter_10(10)\n    55\n    >>> fib_iter_10(100)\n    354224848179261915075\n    >>> fib_iter_10(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_11(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_11(1)\n    1\n    >>> fib_iter_11(10)\n    55\n    >>> fib_iter_11(100)\n    354224848179261915075\n    >>> fib_iter_11(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_12(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_12(1)\n    1\n    >>> fib_iter_12(10)\n    55\n    >>> fib_iter_12(100)\n    354224848179261915075\n    >>> fib_iter_12(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_13(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_13(1)\n    1\n    >>> fib_iter_13(10)\n    55\n    >>> fib_iter_13(100)\n    354224848179261915075\n    >>> fib_iter_13(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_14(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_14(1)\n    1\n    >>> fib_iter_14(10)\n    55\n    >>> fib_iter_14(100)\n    354224848179261915075\n    >>> fib_iter_14(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_15(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_15(1)\n    1\n    >>> fib_iter_15(10)\n    55\n    >>> fib_iter_15(100)\n    354224848179261915075\n    >>> fib_iter_15(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_16(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_16(1)\n    1\n    >>> fib_iter_16(10)\n    55\n    >>> fib_iter_16(100)\n    354224848179261915075\n    >>> fib_iter_16(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_17(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_17(1)\n    1\n    >>> fib_iter_17(10)\n    55\n    >>> fib_iter_17(100)\n    354224848179261915075\n    >>> fib_iter_17(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_18(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_18(1)\n    1\n    >>> fib_iter_18(10)\n    55\n    >>> fib_iter_18(100)\n    354224848179261915075\n    >>> fib_iter_18(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_19(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_19(1)\n    1\n    >>> fib_iter_19(10)\n    55\n    >>> fib_iter_19(100)\n    354224848179261915075\n    >>> fib_iter_19(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_20(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_20(1)\n    1\n    >>> fib_iter_20(10)\n    55\n    >>> fib_iter_20(100)\n    354224848179261915075\n    >>> fib_iter_20(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_21(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_21(1)\n    1\n    >>> fib_iter_21(10)\n    55\n    >>> fib_iter_21(100)\n    354224848179261915075\n    >>> fib_iter_21(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_22(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_22(1)\n    1\n    >>> fib_iter_22(10)\n    55\n    >>> fib_iter_22(100)\n    354224848179261915075\n    >>> fib_iter_22(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_23(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_23(1)\n    1\n    >>> fib_iter_23(10)\n    55\n    >>> fib_iter_23(100)\n    354224848179261915075\n    >>> fib_iter_23(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_24(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_24(1)\n    1\n    >>> fib_iter_24(10)\n    55\n    >>> fib_iter_24(100)\n    354224848179261915075\n    >>> fib_iter_24(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_25(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_25(1)\n    1\n    >>> fib_iter_25(10)\n    55\n    >>> fib_iter_25(100)\n    354224848179261915075\n    >>> fib_iter_25(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_26(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_26(1)\n    1\n    >>> fib_iter_26(10)\n    55\n    >>> fib_iter_26(100)\n    354224848179261915075\n    >>> fib_iter_26(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_27(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_27(1)\n    1\n    >>> fib_iter_27(10)\n    55\n    >>> fib_iter_27(100)\n    354224848179261915075\n    >>> fib_iter_27(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_28(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_28(1)\n    1\n    >>> fib_iter_28(10)\n    55\n    >>> fib_iter_28(100)\n    354224848179261915075\n    >>> fib_iter_28(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_29(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_29(1)\n    1\n    >>> fib_iter_29(10)\n    55\n    >>> fib_iter_29(100)\n    354224848179261915075\n    >>> fib_iter_29(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_30(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_30(1)\n    1\n    >>> fib_iter_30(10)\n    55\n    >>> fib_iter_30(100)\n    354224848179261915075\n    >>> fib_iter_30(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_31(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_31(1)\n    1\n    >>> fib_iter_31(10)\n    55\n    >>> fib_iter_31(100)\n    354224848179261915075\n    >>> fib_iter_31(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_32(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_32(1)\n    1\n    >>> fib_iter_32(10)\n    55\n    >>> fib_iter_32(100)\n    354224848179261915075\n    >>> fib_iter_32(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_33(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_33(1)\n    1\n    >>> fib_iter_33(10)\n    55\n    >>> fib_iter_33(100)\n    354224848179261915075\n    >>> fib_iter_33(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_34(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_34(1)\n    1\n    >>> fib_iter_34(10)\n    55\n    >>> fib_iter_34(100)\n    354224848179261915075\n    >>> fib_iter_34(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_35(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_35(1)\n    1\n    >>> fib_iter_35(10)\n    55\n    >>> fib_iter_35(100)\n    354224848179261915075\n    >>> fib_iter_35(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_36(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_36(1)\n    1\n    >>> fib_iter_36(10)\n    55\n    >>> fib_iter_36(100)\n    354224848179261915075\n    >>> fib_iter_36(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_37(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_37(1)\n    1\n    >>> fib_iter_37(10)\n    55\n    >>> fib_iter_37(100)\n    354224848179261915075\n    >>> fib_iter_37(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_38(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_38(1)\n    1\n    >>> fib_iter_38(10)\n    55\n    >>> fib_iter_38(100)\n    354224848179261915075\n    >>> fib_iter_38(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_39(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_39(1)\n    1\n    >>> fib_iter_39(10)\n    55\n    >>> fib_iter_39(100)\n    354224848179261915075\n    >>> fib_iter_39(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_40(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_40(1)\n    1\n    >>> fib_iter_40(10)\n    55\n    >>> fib_iter_40(100)\n    354224848179261915075\n    >>> fib_iter_40(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_41(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_41(1)\n    1\n    >>> fib_iter_41(10)\n    55\n    >>> fib_iter_41(100)\n    354224848179261915075\n    >>> fib_iter_41(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_42(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_42(1)\n    1\n    >>> fib_iter_42(10)\n    55\n    >>> fib_iter_42(100)\n    354224848179261915075\n    >>> fib_iter_42(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_43(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_43(1)\n    1\n    >>> fib_iter_43(10)\n    55\n    >>> fib_iter_43(100)\n    354224848179261915075\n    >>> fib_iter_43(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_44(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_44(1)\n    1\n    >>> fib_iter_44(10)\n    55\n    >>> fib_iter_44(100)\n    354224848179261915075\n    >>> fib_iter_44(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_45(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_45(1)\n    1\n    >>> fib_iter_45(10)\n    55\n    >>> fib_iter_45(100)\n    354224848179261915075\n    >>> fib_iter_45(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_46(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_46(1)\n    1\n    >>> fib_iter_46(10)\n    55\n    >>> fib_iter_46(100)\n    354224848179261915075\n    >>> fib_iter_46(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_47(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_47(1)\n    1\n    >>> fib_iter_47(10)\n    55\n    >>> fib_iter_47(100)\n    354224848179261915075\n    >>> fib_iter_47(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_48(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_48(1)\n    1\n    >>> fib_iter_48(10)\n    55\n    >>> fib_iter_48(100)\n    354224848179261915075\n    >>> fib_iter_48(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_49(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_49(1)\n    1\n    >>> fib_iter_49(10)\n    55\n    >>> fib_iter_49(100)\n    354224848179261915075\n    >>> fib_iter_49(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_50(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_50(1)\n    1\n    >>> fib_iter_50(10)\n    55\n    >>> fib_iter_50(100)\n    354224848179261915075\n    >>> fib_iter_50(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_51(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_51(1)\n    1\n    >>> fib_iter_51(10)\n    55\n    >>> fib_iter_51(100)\n    354224848179261915075\n    >>> fib_iter_51(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_52(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_52(1)\n    1\n    >>> fib_iter_52(10)\n    55\n    >>> fib_iter_52(100)\n    354224848179261915075\n    >>> fib_iter_52(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_53(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_53(1)\n    1\n    >>> fib_iter_53(10)\n    55\n    >>> fib_iter_53(100)\n    354224848179261915075\n    >>> fib_iter_53(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_54(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_54(1)\n    1\n    >>> fib_iter_54(10)\n    55\n    >>> fib_iter_54(100)\n    354224848179261915075\n    >>> fib_iter_54(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_55(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_55(1)\n    1\n    >>> fib_iter_55(10)\n    55\n    >>> fib_iter_55(100)\n    354224848179261915075\n    >>> fib_iter_55(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_56(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_56(1)\n    1\n    >>> fib_iter_56(10)\n    55\n    >>> fib_iter_56(100)\n    354224848179261915075\n    >>> fib_iter_56(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_57(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_57(1)\n    1\n    >>> fib_iter_57(10)\n    55\n    >>> fib_iter_57(100)\n    354224848179261915075\n    >>> fib_iter_57(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_58(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_58(1)\n    1\n    >>> fib_iter_58(10)\n    55\n    >>> fib_iter_58(100)\n    354224848179261915075\n    >>> fib_iter_58(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_59(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_59(1)\n    1\n    >>> fib_iter_59(10)\n    55\n    >>> fib_iter_59(100)\n    354224848179261915075\n    >>> fib_iter_59(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_60(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_60(1)\n    1\n    >>> fib_iter_60(10)\n    55\n    >>> fib_iter_60(100)\n    354224848179261915075\n    >>> fib_iter_60(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_61(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_61(1)\n    1\n    >>> fib_iter_61(10)\n    55\n    >>> fib_iter_61(100)\n    354224848179261915075\n    >>> fib_iter_61(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_62(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_62(1)\n    1\n    >>> fib_iter_62(10)\n    55\n    >>> fib_iter_62(100)\n    354224848179261915075\n    >>> fib_iter_62(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_63(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_63(1)\n    1\n    >>> fib_iter_63(10)\n    55\n    >>> fib_iter_63(100)\n    354224848179261915075\n    >>> fib_iter_63(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_64(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_64(1)\n    1\n    >>> fib_iter_64(10)\n    55\n    >>> fib_iter_64(100)\n    354224848179261915075\n    >>> fib_iter_64(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_65(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_65(1)\n    1\n    >>> fib_iter_65(10)\n    55\n    >>> fib_iter_65(100)\n    354224848179261915075\n    >>> fib_iter_65(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_66(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_66(1)\n    1\n    >>> fib_iter_66(10)\n    55\n    >>> fib_iter_66(100)\n    354224848179261915075\n    >>> fib_iter_66(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_67(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_67(1)\n    1\n    >>> fib_iter_67(10)\n    55\n    >>> fib_iter_67(100)\n    354224848179261915075\n    >>> fib_iter_67(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_68(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_68(1)\n    1\n    >>> fib_iter_68(10)\n    55\n    >>> fib_iter_68(100)\n    354224848179261915075\n    >>> fib_iter_68(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_69(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_69(1)\n    1\n    >>> fib_iter_69(10)\n    55\n    >>> fib_iter_69(100)\n    354224848179261915075\n    >>> fib_iter_69(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_70(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_70(1)\n    1\n    >>> fib_iter_70(10)\n    55\n    >>> fib_iter_70(100)\n    354224848179261915075\n    >>> fib_iter_70(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_71(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_71(1)\n    1\n    >>> fib_iter_71(10)\n    55\n    >>> fib_iter_71(100)\n    354224848179261915075\n    >>> fib_iter_71(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_72(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_72(1)\n    1\n    >>> fib_iter_72(10)\n    55\n    >>> fib_iter_72(100)\n    354224848179261915075\n    >>> fib_iter_72(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_73(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_73(1)\n    1\n    >>> fib_iter_73(10)\n    55\n    >>> fib_iter_73(100)\n    354224848179261915075\n    >>> fib_iter_73(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_74(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_74(1)\n    1\n    >>> fib_iter_74(10)\n    55\n    >>> fib_iter_74(100)\n    354224848179261915075\n    >>> fib_iter_74(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_75(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_75(1)\n    1\n    >>> fib_iter_75(10)\n    55\n    >>> fib_iter_75(100)\n    354224848179261915075\n    >>> fib_iter_75(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_76(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_76(1)\n    1\n    >>> fib_iter_76(10)\n    55\n    >>> fib_iter_76(100)\n    354224848179261915075\n    >>> fib_iter_76(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_77(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_77(1)\n    1\n    >>> fib_iter_77(10)\n    55\n    >>> fib_iter_77(100)\n    354224848179261915075\n    >>> fib_iter_77(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_78(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_78(1)\n    1\n    >>> fib_iter_78(10)\n    55\n    >>> fib_iter_78(100)\n    354224848179261915075\n    >>> fib_iter_78(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_79(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_79(1)\n    1\n    >>> fib_iter_79(10)\n    55\n    >>> fib_iter_79(100)\n    354224848179261915075\n    >>> fib_iter_79(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_80(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_80(1)\n    1\n    >>> fib_iter_80(10)\n    55\n    >>> fib_iter_80(100)\n    354224848179261915075\n    >>> fib_iter_80(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_81(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_81(1)\n    1\n    >>> fib_iter_81(10)\n    55\n    >>> fib_iter_81(100)\n    354224848179261915075\n    >>> fib_iter_81(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_82(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_82(1)\n    1\n    >>> fib_iter_82(10)\n    55\n    >>> fib_iter_82(100)\n    354224848179261915075\n    >>> fib_iter_82(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_83(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_83(1)\n    1\n    >>> fib_iter_83(10)\n    55\n    >>> fib_iter_83(100)\n    354224848179261915075\n    >>> fib_iter_83(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_84(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_84(1)\n    1\n    >>> fib_iter_84(10)\n    55\n    >>> fib_iter_84(100)\n    354224848179261915075\n    >>> fib_iter_84(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_85(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_85(1)\n    1\n    >>> fib_iter_85(10)\n    55\n    >>> fib_iter_85(100)\n    354224848179261915075\n    >>> fib_iter_85(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_86(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_86(1)\n    1\n    >>> fib_iter_86(10)\n    55\n    >>> fib_iter_86(100)\n    354224848179261915075\n    >>> fib_iter_86(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_87(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_87(1)\n    1\n    >>> fib_iter_87(10)\n    55\n    >>> fib_iter_87(100)\n    354224848179261915075\n    >>> fib_iter_87(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_88(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_88(1)\n    1\n    >>> fib_iter_88(10)\n    55\n    >>> fib_iter_88(100)\n    354224848179261915075\n    >>> fib_iter_88(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_89(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_89(1)\n    1\n    >>> fib_iter_89(10)\n    55\n    >>> fib_iter_89(100)\n    354224848179261915075\n    >>> fib_iter_89(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_90(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_90(1)\n    1\n    >>> fib_iter_90(10)\n    55\n    >>> fib_iter_90(100)\n    354224848179261915075\n    >>> fib_iter_90(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_91(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_91(1)\n    1\n    >>> fib_iter_91(10)\n    55\n    >>> fib_iter_91(100)\n    354224848179261915075\n    >>> fib_iter_91(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_92(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_92(1)\n    1\n    >>> fib_iter_92(10)\n    55\n    >>> fib_iter_92(100)\n    354224848179261915075\n    >>> fib_iter_92(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_93(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_93(1)\n    1\n    >>> fib_iter_93(10)\n    55\n    >>> fib_iter_93(100)\n    354224848179261915075\n    >>> fib_iter_93(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_94(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_94(1)\n    1\n    >>> fib_iter_94(10)\n    55\n    >>> fib_iter_94(100)\n    354224848179261915075\n    >>> fib_iter_94(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_95(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_95(1)\n    1\n    >>> fib_iter_95(10)\n    55\n    >>> fib_iter_95(100)\n    354224848179261915075\n    >>> fib_iter_95(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_96(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_96(1)\n    1\n    >>> fib_iter_96(10)\n    55\n    >>> fib_iter_96(100)\n    354224848179261915075\n    >>> fib_iter_96(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_97(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_97(1)\n    1\n    >>> fib_iter_97(10)\n    55\n    >>> fib_iter_97(100)\n    354224848179261915075\n    >>> fib_iter_97(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_98(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_98(1)\n    1\n    >>> fib_iter_98(10)\n    55\n    >>> fib_iter_98(100)\n    354224848179261915075\n    >>> fib_iter_98(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_99(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_99(1)\n    1\n    >>> fib_iter_99(10)\n    55\n    >>> fib_iter_99(100)\n    354224848179261915075\n    >>> fib_iter_99(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_100(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_100(1)\n    1\n    >>> fib_iter_100(10)\n    55\n    >>> fib_iter_100(100)\n    354224848179261915075\n    >>> fib_iter_100(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_101(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_101(1)\n    1\n    >>> fib_iter_101(10)\n    55\n    >>> fib_iter_101(100)\n    354224848179261915075\n    >>> fib_iter_101(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_102(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_102(1)\n    1\n    >>> fib_iter_102(10)\n    55\n    >>> fib_iter_102(100)\n    354224848179261915075\n    >>> fib_iter_102(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_103(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_103(1)\n    1\n    >>> fib_iter_103(10)\n    55\n    >>> fib_iter_103(100)\n    354224848179261915075\n    >>> fib_iter_103(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_104(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_104(1)\n    1\n    >>> fib_iter_104(10)\n    55\n    >>> fib_iter_104(100)\n    354224848179261915075\n    >>> fib_iter_104(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_105(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_105(1)\n    1\n    >>> fib_iter_105(10)\n    55\n    >>> fib_iter_105(100)\n    354224848179261915075\n    >>> fib_iter_105(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_106(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_106(1)\n    1\n    >>> fib_iter_106(10)\n    55\n    >>> fib_iter_106(100)\n    354224848179261915075\n    >>> fib_iter_106(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_107(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_107(1)\n    1\n    >>> fib_iter_107(10)\n    55\n    >>> fib_iter_107(100)\n    354224848179261915075\n    >>> fib_iter_107(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_108(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_108(1)\n    1\n    >>> fib_iter_108(10)\n    55\n    >>> fib_iter_108(100)\n    354224848179261915075\n    >>> fib_iter_108(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_109(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_109(1)\n    1\n    >>> fib_iter_109(10)\n    55\n    >>> fib_iter_109(100)\n    354224848179261915075\n    >>> fib_iter_109(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_110(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_110(1)\n    1\n    >>> fib_iter_110(10)\n    55\n    >>> fib_iter_110(100)\n    354224848179261915075\n    >>> fib_iter_110(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_111(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_111(1)\n    1\n    >>> fib_iter_111(10)\n    55\n    >>> fib_iter_111(100)\n    354224848179261915075\n    >>> fib_iter_111(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_112(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_112(1)\n    1\n    >>> fib_iter_112(10)\n    55\n    >>> fib_iter_112(100)\n    354224848179261915075\n    >>> fib_iter_112(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_113(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_113(1)\n    1\n    >>> fib_iter_113(10)\n    55\n    >>> fib_iter_113(100)\n    354224848179261915075\n    >>> fib_iter_113(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_114(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_114(1)\n    1\n    >>> fib_iter_114(10)\n    55\n    >>> fib_iter_114(100)\n    354224848179261915075\n    >>> fib_iter_114(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_115(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_115(1)\n    1\n    >>> fib_iter_115(10)\n    55\n    >>> fib_iter_115(100)\n    354224848179261915075\n    >>> fib_iter_115(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_116(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_116(1)\n    1\n    >>> fib_iter_116(10)\n    55\n    >>> fib_iter_116(100)\n    354224848179261915075\n    >>> fib_iter_116(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_117(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_117(1)\n    1\n    >>> fib_iter_117(10)\n    55\n    >>> fib_iter_117(100)\n    354224848179261915075\n    >>> fib_iter_117(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_118(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_118(1)\n    1\n    >>> fib_iter_118(10)\n    55\n    >>> fib_iter_118(100)\n    354224848179261915075\n    >>> fib_iter_118(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_119(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_119(1)\n    1\n    >>> fib_iter_119(10)\n    55\n    >>> fib_iter_119(100)\n    354224848179261915075\n    >>> fib_iter_119(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_120(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_120(1)\n    1\n    >>> fib_iter_120(10)\n    55\n    >>> fib_iter_120(100)\n    354224848179261915075\n    >>> fib_iter_120(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_121(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_121(1)\n    1\n    >>> fib_iter_121(10)\n    55\n    >>> fib_iter_121(100)\n    354224848179261915075\n    >>> fib_iter_121(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_122(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_122(1)\n    1\n    >>> fib_iter_122(10)\n    55\n    >>> fib_iter_122(100)\n    354224848179261915075\n    >>> fib_iter_122(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_123(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_123(1)\n    1\n    >>> fib_iter_123(10)\n    55\n    >>> fib_iter_123(100)\n    354224848179261915075\n    >>> fib_iter_123(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_124(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_124(1)\n    1\n    >>> fib_iter_124(10)\n    55\n    >>> fib_iter_124(100)\n    354224848179261915075\n    >>> fib_iter_124(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_125(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_125(1)\n    1\n    >>> fib_iter_125(10)\n    55\n    >>> fib_iter_125(100)\n    354224848179261915075\n    >>> fib_iter_125(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_126(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_126(1)\n    1\n    >>> fib_iter_126(10)\n    55\n    >>> fib_iter_126(100)\n    354224848179261915075\n    >>> fib_iter_126(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_127(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_127(1)\n    1\n    >>> fib_iter_127(10)\n    55\n    >>> fib_iter_127(100)\n    354224848179261915075\n    >>> fib_iter_127(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_128(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_128(1)\n    1\n    >>> fib_iter_128(10)\n    55\n    >>> fib_iter_128(100)\n    354224848179261915075\n    >>> fib_iter_128(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_129(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_129(1)\n    1\n    >>> fib_iter_129(10)\n    55\n    >>> fib_iter_129(100)\n    354224848179261915075\n    >>> fib_iter_129(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_130(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_130(1)\n    1\n    >>> fib_iter_130(10)\n    55\n    >>> fib_iter_130(100)\n    354224848179261915075\n    >>> fib_iter_130(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_131(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_131(1)\n    1\n    >>> fib_iter_131(10)\n    55\n    >>> fib_iter_131(100)\n    354224848179261915075\n    >>> fib_iter_131(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_132(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_132(1)\n    1\n    >>> fib_iter_132(10)\n    55\n    >>> fib_iter_132(100)\n    354224848179261915075\n    >>> fib_iter_132(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_133(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_133(1)\n    1\n    >>> fib_iter_133(10)\n    55\n    >>> fib_iter_133(100)\n    354224848179261915075\n    >>> fib_iter_133(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_134(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_134(1)\n    1\n    >>> fib_iter_134(10)\n    55\n    >>> fib_iter_134(100)\n    354224848179261915075\n    >>> fib_iter_134(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_135(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_135(1)\n    1\n    >>> fib_iter_135(10)\n    55\n    >>> fib_iter_135(100)\n    354224848179261915075\n    >>> fib_iter_135(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_136(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_136(1)\n    1\n    >>> fib_iter_136(10)\n    55\n    >>> fib_iter_136(100)\n    354224848179261915075\n    >>> fib_iter_136(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_137(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_137(1)\n    1\n    >>> fib_iter_137(10)\n    55\n    >>> fib_iter_137(100)\n    354224848179261915075\n    >>> fib_iter_137(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_138(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_138(1)\n    1\n    >>> fib_iter_138(10)\n    55\n    >>> fib_iter_138(100)\n    354224848179261915075\n    >>> fib_iter_138(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_139(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_139(1)\n    1\n    >>> fib_iter_139(10)\n    55\n    >>> fib_iter_139(100)\n    354224848179261915075\n    >>> fib_iter_139(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_140(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_140(1)\n    1\n    >>> fib_iter_140(10)\n    55\n    >>> fib_iter_140(100)\n    354224848179261915075\n    >>> fib_iter_140(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_141(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_141(1)\n    1\n    >>> fib_iter_141(10)\n    55\n    >>> fib_iter_141(100)\n    354224848179261915075\n    >>> fib_iter_141(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_142(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_142(1)\n    1\n    >>> fib_iter_142(10)\n    55\n    >>> fib_iter_142(100)\n    354224848179261915075\n    >>> fib_iter_142(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_143(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_143(1)\n    1\n    >>> fib_iter_143(10)\n    55\n    >>> fib_iter_143(100)\n    354224848179261915075\n    >>> fib_iter_143(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_144(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_144(1)\n    1\n    >>> fib_iter_144(10)\n    55\n    >>> fib_iter_144(100)\n    354224848179261915075\n    >>> fib_iter_144(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_145(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_145(1)\n    1\n    >>> fib_iter_145(10)\n    55\n    >>> fib_iter_145(100)\n    354224848179261915075\n    >>> fib_iter_145(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_146(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_146(1)\n    1\n    >>> fib_iter_146(10)\n    55\n    >>> fib_iter_146(100)\n    354224848179261915075\n    >>> fib_iter_146(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_147(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_147(1)\n    1\n    >>> fib_iter_147(10)\n    55\n    >>> fib_iter_147(100)\n    354224848179261915075\n    >>> fib_iter_147(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_148(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_148(1)\n    1\n    >>> fib_iter_148(10)\n    55\n    >>> fib_iter_148(100)\n    354224848179261915075\n    >>> fib_iter_148(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_149(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_149(1)\n    1\n    >>> fib_iter_149(10)\n    55\n    >>> fib_iter_149(100)\n    354224848179261915075\n    >>> fib_iter_149(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_150(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_150(1)\n    1\n    >>> fib_iter_150(10)\n    55\n    >>> fib_iter_150(100)\n    354224848179261915075\n    >>> fib_iter_150(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_151(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_151(1)\n    1\n    >>> fib_iter_151(10)\n    55\n    >>> fib_iter_151(100)\n    354224848179261915075\n    >>> fib_iter_151(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_152(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_152(1)\n    1\n    >>> fib_iter_152(10)\n    55\n    >>> fib_iter_152(100)\n    354224848179261915075\n    >>> fib_iter_152(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_153(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_153(1)\n    1\n    >>> fib_iter_153(10)\n    55\n    >>> fib_iter_153(100)\n    354224848179261915075\n    >>> fib_iter_153(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_154(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_154(1)\n    1\n    >>> fib_iter_154(10)\n    55\n    >>> fib_iter_154(100)\n    354224848179261915075\n    >>> fib_iter_154(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_155(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_155(1)\n    1\n    >>> fib_iter_155(10)\n    55\n    >>> fib_iter_155(100)\n    354224848179261915075\n    >>> fib_iter_155(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_156(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_156(1)\n    1\n    >>> fib_iter_156(10)\n    55\n    >>> fib_iter_156(100)\n    354224848179261915075\n    >>> fib_iter_156(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_157(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_157(1)\n    1\n    >>> fib_iter_157(10)\n    55\n    >>> fib_iter_157(100)\n    354224848179261915075\n    >>> fib_iter_157(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_158(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_158(1)\n    1\n    >>> fib_iter_158(10)\n    55\n    >>> fib_iter_158(100)\n    354224848179261915075\n    >>> fib_iter_158(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_159(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_159(1)\n    1\n    >>> fib_iter_159(10)\n    55\n    >>> fib_iter_159(100)\n    354224848179261915075\n    >>> fib_iter_159(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_160(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_160(1)\n    1\n    >>> fib_iter_160(10)\n    55\n    >>> fib_iter_160(100)\n    354224848179261915075\n    >>> fib_iter_160(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_161(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_161(1)\n    1\n    >>> fib_iter_161(10)\n    55\n    >>> fib_iter_161(100)\n    354224848179261915075\n    >>> fib_iter_161(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_162(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_162(1)\n    1\n    >>> fib_iter_162(10)\n    55\n    >>> fib_iter_162(100)\n    354224848179261915075\n    >>> fib_iter_162(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_163(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_163(1)\n    1\n    >>> fib_iter_163(10)\n    55\n    >>> fib_iter_163(100)\n    354224848179261915075\n    >>> fib_iter_163(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_164(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_164(1)\n    1\n    >>> fib_iter_164(10)\n    55\n    >>> fib_iter_164(100)\n    354224848179261915075\n    >>> fib_iter_164(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_165(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_165(1)\n    1\n    >>> fib_iter_165(10)\n    55\n    >>> fib_iter_165(100)\n    354224848179261915075\n    >>> fib_iter_165(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_166(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_166(1)\n    1\n    >>> fib_iter_166(10)\n    55\n    >>> fib_iter_166(100)\n    354224848179261915075\n    >>> fib_iter_166(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_167(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_167(1)\n    1\n    >>> fib_iter_167(10)\n    55\n    >>> fib_iter_167(100)\n    354224848179261915075\n    >>> fib_iter_167(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_168(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_168(1)\n    1\n    >>> fib_iter_168(10)\n    55\n    >>> fib_iter_168(100)\n    354224848179261915075\n    >>> fib_iter_168(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_169(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_169(1)\n    1\n    >>> fib_iter_169(10)\n    55\n    >>> fib_iter_169(100)\n    354224848179261915075\n    >>> fib_iter_169(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_170(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_170(1)\n    1\n    >>> fib_iter_170(10)\n    55\n    >>> fib_iter_170(100)\n    354224848179261915075\n    >>> fib_iter_170(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_171(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_171(1)\n    1\n    >>> fib_iter_171(10)\n    55\n    >>> fib_iter_171(100)\n    354224848179261915075\n    >>> fib_iter_171(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_172(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_172(1)\n    1\n    >>> fib_iter_172(10)\n    55\n    >>> fib_iter_172(100)\n    354224848179261915075\n    >>> fib_iter_172(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_173(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_173(1)\n    1\n    >>> fib_iter_173(10)\n    55\n    >>> fib_iter_173(100)\n    354224848179261915075\n    >>> fib_iter_173(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_174(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_174(1)\n    1\n    >>> fib_iter_174(10)\n    55\n    >>> fib_iter_174(100)\n    354224848179261915075\n    >>> fib_iter_174(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_175(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_175(1)\n    1\n    >>> fib_iter_175(10)\n    55\n    >>> fib_iter_175(100)\n    354224848179261915075\n    >>> fib_iter_175(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_176(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_176(1)\n    1\n    >>> fib_iter_176(10)\n    55\n    >>> fib_iter_176(100)\n    354224848179261915075\n    >>> fib_iter_176(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_177(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_177(1)\n    1\n    >>> fib_iter_177(10)\n    55\n    >>> fib_iter_177(100)\n    354224848179261915075\n    >>> fib_iter_177(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_178(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_178(1)\n    1\n    >>> fib_iter_178(10)\n    55\n    >>> fib_iter_178(100)\n    354224848179261915075\n    >>> fib_iter_178(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_179(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_179(1)\n    1\n    >>> fib_iter_179(10)\n    55\n    >>> fib_iter_179(100)\n    354224848179261915075\n    >>> fib_iter_179(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_180(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_180(1)\n    1\n    >>> fib_iter_180(10)\n    55\n    >>> fib_iter_180(100)\n    354224848179261915075\n    >>> fib_iter_180(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_181(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_181(1)\n    1\n    >>> fib_iter_181(10)\n    55\n    >>> fib_iter_181(100)\n    354224848179261915075\n    >>> fib_iter_181(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_182(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_182(1)\n    1\n    >>> fib_iter_182(10)\n    55\n    >>> fib_iter_182(100)\n    354224848179261915075\n    >>> fib_iter_182(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_183(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_183(1)\n    1\n    >>> fib_iter_183(10)\n    55\n    >>> fib_iter_183(100)\n    354224848179261915075\n    >>> fib_iter_183(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_184(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_184(1)\n    1\n    >>> fib_iter_184(10)\n    55\n    >>> fib_iter_184(100)\n    354224848179261915075\n    >>> fib_iter_184(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_185(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_185(1)\n    1\n    >>> fib_iter_185(10)\n    55\n    >>> fib_iter_185(100)\n    354224848179261915075\n    >>> fib_iter_185(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_186(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_186(1)\n    1\n    >>> fib_iter_186(10)\n    55\n    >>> fib_iter_186(100)\n    354224848179261915075\n    >>> fib_iter_186(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_187(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_187(1)\n    1\n    >>> fib_iter_187(10)\n    55\n    >>> fib_iter_187(100)\n    354224848179261915075\n    >>> fib_iter_187(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_188(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_188(1)\n    1\n    >>> fib_iter_188(10)\n    55\n    >>> fib_iter_188(100)\n    354224848179261915075\n    >>> fib_iter_188(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_189(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_189(1)\n    1\n    >>> fib_iter_189(10)\n    55\n    >>> fib_iter_189(100)\n    354224848179261915075\n    >>> fib_iter_189(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_190(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_190(1)\n    1\n    >>> fib_iter_190(10)\n    55\n    >>> fib_iter_190(100)\n    354224848179261915075\n    >>> fib_iter_190(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_191(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_191(1)\n    1\n    >>> fib_iter_191(10)\n    55\n    >>> fib_iter_191(100)\n    354224848179261915075\n    >>> fib_iter_191(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_192(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_192(1)\n    1\n    >>> fib_iter_192(10)\n    55\n    >>> fib_iter_192(100)\n    354224848179261915075\n    >>> fib_iter_192(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_193(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_193(1)\n    1\n    >>> fib_iter_193(10)\n    55\n    >>> fib_iter_193(100)\n    354224848179261915075\n    >>> fib_iter_193(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_194(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_194(1)\n    1\n    >>> fib_iter_194(10)\n    55\n    >>> fib_iter_194(100)\n    354224848179261915075\n    >>> fib_iter_194(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_195(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_195(1)\n    1\n    >>> fib_iter_195(10)\n    55\n    >>> fib_iter_195(100)\n    354224848179261915075\n    >>> fib_iter_195(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_196(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_196(1)\n    1\n    >>> fib_iter_196(10)\n    55\n    >>> fib_iter_196(100)\n    354224848179261915075\n    >>> fib_iter_196(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_197(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_197(1)\n    1\n    >>> fib_iter_197(10)\n    55\n    >>> fib_iter_197(100)\n    354224848179261915075\n    >>> fib_iter_197(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_198(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_198(1)\n    1\n    >>> fib_iter_198(10)\n    55\n    >>> fib_iter_198(100)\n    354224848179261915075\n    >>> fib_iter_198(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_199(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_199(1)\n    1\n    >>> fib_iter_199(10)\n    55\n    >>> fib_iter_199(100)\n    354224848179261915075\n    >>> fib_iter_199(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_200(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_200(1)\n    1\n    >>> fib_iter_200(10)\n    55\n    >>> fib_iter_200(100)\n    354224848179261915075\n    >>> fib_iter_200(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_201(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_201(1)\n    1\n    >>> fib_iter_201(10)\n    55\n    >>> fib_iter_201(100)\n    354224848179261915075\n    >>> fib_iter_201(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_202(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_202(1)\n    1\n    >>> fib_iter_202(10)\n    55\n    >>> fib_iter_202(100)\n    354224848179261915075\n    >>> fib_iter_202(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_203(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_203(1)\n    1\n    >>> fib_iter_203(10)\n    55\n    >>> fib_iter_203(100)\n    354224848179261915075\n    >>> fib_iter_203(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_204(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_204(1)\n    1\n    >>> fib_iter_204(10)\n    55\n    >>> fib_iter_204(100)\n    354224848179261915075\n    >>> fib_iter_204(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_205(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_205(1)\n    1\n    >>> fib_iter_205(10)\n    55\n    >>> fib_iter_205(100)\n    354224848179261915075\n    >>> fib_iter_205(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_206(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_206(1)\n    1\n    >>> fib_iter_206(10)\n    55\n    >>> fib_iter_206(100)\n    354224848179261915075\n    >>> fib_iter_206(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_207(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_207(1)\n    1\n    >>> fib_iter_207(10)\n    55\n    >>> fib_iter_207(100)\n    354224848179261915075\n    >>> fib_iter_207(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_208(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_208(1)\n    1\n    >>> fib_iter_208(10)\n    55\n    >>> fib_iter_208(100)\n    354224848179261915075\n    >>> fib_iter_208(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_209(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_209(1)\n    1\n    >>> fib_iter_209(10)\n    55\n    >>> fib_iter_209(100)\n    354224848179261915075\n    >>> fib_iter_209(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_210(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_210(1)\n    1\n    >>> fib_iter_210(10)\n    55\n    >>> fib_iter_210(100)\n    354224848179261915075\n    >>> fib_iter_210(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_211(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_211(1)\n    1\n    >>> fib_iter_211(10)\n    55\n    >>> fib_iter_211(100)\n    354224848179261915075\n    >>> fib_iter_211(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_212(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_212(1)\n    1\n    >>> fib_iter_212(10)\n    55\n    >>> fib_iter_212(100)\n    354224848179261915075\n    >>> fib_iter_212(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_213(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_213(1)\n    1\n    >>> fib_iter_213(10)\n    55\n    >>> fib_iter_213(100)\n    354224848179261915075\n    >>> fib_iter_213(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_214(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_214(1)\n    1\n    >>> fib_iter_214(10)\n    55\n    >>> fib_iter_214(100)\n    354224848179261915075\n    >>> fib_iter_214(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_215(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_215(1)\n    1\n    >>> fib_iter_215(10)\n    55\n    >>> fib_iter_215(100)\n    354224848179261915075\n    >>> fib_iter_215(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_216(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_216(1)\n    1\n    >>> fib_iter_216(10)\n    55\n    >>> fib_iter_216(100)\n    354224848179261915075\n    >>> fib_iter_216(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_217(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_217(1)\n    1\n    >>> fib_iter_217(10)\n    55\n    >>> fib_iter_217(100)\n    354224848179261915075\n    >>> fib_iter_217(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_218(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_218(1)\n    1\n    >>> fib_iter_218(10)\n    55\n    >>> fib_iter_218(100)\n    354224848179261915075\n    >>> fib_iter_218(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_219(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_219(1)\n    1\n    >>> fib_iter_219(10)\n    55\n    >>> fib_iter_219(100)\n    354224848179261915075\n    >>> fib_iter_219(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_220(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_220(1)\n    1\n    >>> fib_iter_220(10)\n    55\n    >>> fib_iter_220(100)\n    354224848179261915075\n    >>> fib_iter_220(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_221(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_221(1)\n    1\n    >>> fib_iter_221(10)\n    55\n    >>> fib_iter_221(100)\n    354224848179261915075\n    >>> fib_iter_221(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_222(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_222(1)\n    1\n    >>> fib_iter_222(10)\n    55\n    >>> fib_iter_222(100)\n    354224848179261915075\n    >>> fib_iter_222(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_223(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_223(1)\n    1\n    >>> fib_iter_223(10)\n    55\n    >>> fib_iter_223(100)\n    354224848179261915075\n    >>> fib_iter_223(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_224(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_224(1)\n    1\n    >>> fib_iter_224(10)\n    55\n    >>> fib_iter_224(100)\n    354224848179261915075\n    >>> fib_iter_224(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_225(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_225(1)\n    1\n    >>> fib_iter_225(10)\n    55\n    >>> fib_iter_225(100)\n    354224848179261915075\n    >>> fib_iter_225(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_226(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_226(1)\n    1\n    >>> fib_iter_226(10)\n    55\n    >>> fib_iter_226(100)\n    354224848179261915075\n    >>> fib_iter_226(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_227(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_227(1)\n    1\n    >>> fib_iter_227(10)\n    55\n    >>> fib_iter_227(100)\n    354224848179261915075\n    >>> fib_iter_227(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_228(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_228(1)\n    1\n    >>> fib_iter_228(10)\n    55\n    >>> fib_iter_228(100)\n    354224848179261915075\n    >>> fib_iter_228(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_229(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_229(1)\n    1\n    >>> fib_iter_229(10)\n    55\n    >>> fib_iter_229(100)\n    354224848179261915075\n    >>> fib_iter_229(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_230(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_230(1)\n    1\n    >>> fib_iter_230(10)\n    55\n    >>> fib_iter_230(100)\n    354224848179261915075\n    >>> fib_iter_230(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_231(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_231(1)\n    1\n    >>> fib_iter_231(10)\n    55\n    >>> fib_iter_231(100)\n    354224848179261915075\n    >>> fib_iter_231(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_232(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_232(1)\n    1\n    >>> fib_iter_232(10)\n    55\n    >>> fib_iter_232(100)\n    354224848179261915075\n    >>> fib_iter_232(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_233(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_233(1)\n    1\n    >>> fib_iter_233(10)\n    55\n    >>> fib_iter_233(100)\n    354224848179261915075\n    >>> fib_iter_233(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_234(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_234(1)\n    1\n    >>> fib_iter_234(10)\n    55\n    >>> fib_iter_234(100)\n    354224848179261915075\n    >>> fib_iter_234(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_235(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_235(1)\n    1\n    >>> fib_iter_235(10)\n    55\n    >>> fib_iter_235(100)\n    354224848179261915075\n    >>> fib_iter_235(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_236(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_236(1)\n    1\n    >>> fib_iter_236(10)\n    55\n    >>> fib_iter_236(100)\n    354224848179261915075\n    >>> fib_iter_236(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_237(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_237(1)\n    1\n    >>> fib_iter_237(10)\n    55\n    >>> fib_iter_237(100)\n    354224848179261915075\n    >>> fib_iter_237(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_238(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_238(1)\n    1\n    >>> fib_iter_238(10)\n    55\n    >>> fib_iter_238(100)\n    354224848179261915075\n    >>> fib_iter_238(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_239(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_239(1)\n    1\n    >>> fib_iter_239(10)\n    55\n    >>> fib_iter_239(100)\n    354224848179261915075\n    >>> fib_iter_239(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_240(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_240(1)\n    1\n    >>> fib_iter_240(10)\n    55\n    >>> fib_iter_240(100)\n    354224848179261915075\n    >>> fib_iter_240(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_241(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_241(1)\n    1\n    >>> fib_iter_241(10)\n    55\n    >>> fib_iter_241(100)\n    354224848179261915075\n    >>> fib_iter_241(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_242(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_242(1)\n    1\n    >>> fib_iter_242(10)\n    55\n    >>> fib_iter_242(100)\n    354224848179261915075\n    >>> fib_iter_242(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_243(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_243(1)\n    1\n    >>> fib_iter_243(10)\n    55\n    >>> fib_iter_243(100)\n    354224848179261915075\n    >>> fib_iter_243(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_244(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_244(1)\n    1\n    >>> fib_iter_244(10)\n    55\n    >>> fib_iter_244(100)\n    354224848179261915075\n    >>> fib_iter_244(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_245(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_245(1)\n    1\n    >>> fib_iter_245(10)\n    55\n    >>> fib_iter_245(100)\n    354224848179261915075\n    >>> fib_iter_245(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_246(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_246(1)\n    1\n    >>> fib_iter_246(10)\n    55\n    >>> fib_iter_246(100)\n    354224848179261915075\n    >>> fib_iter_246(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_247(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_247(1)\n    1\n    >>> fib_iter_247(10)\n    55\n    >>> fib_iter_247(100)\n    354224848179261915075\n    >>> fib_iter_247(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_248(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_248(1)\n    1\n    >>> fib_iter_248(10)\n    55\n    >>> fib_iter_248(100)\n    354224848179261915075\n    >>> fib_iter_248(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_249(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_249(1)\n    1\n    >>> fib_iter_249(10)\n    55\n    >>> fib_iter_249(100)\n    354224848179261915075\n    >>> fib_iter_249(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_250(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_250(1)\n    1\n    >>> fib_iter_250(10)\n    55\n    >>> fib_iter_250(100)\n    354224848179261915075\n    >>> fib_iter_250(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_251(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_251(1)\n    1\n    >>> fib_iter_251(10)\n    55\n    >>> fib_iter_251(100)\n    354224848179261915075\n    >>> fib_iter_251(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_252(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_252(1)\n    1\n    >>> fib_iter_252(10)\n    55\n    >>> fib_iter_252(100)\n    354224848179261915075\n    >>> fib_iter_252(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_253(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_253(1)\n    1\n    >>> fib_iter_253(10)\n    55\n    >>> fib_iter_253(100)\n    354224848179261915075\n    >>> fib_iter_253(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_254(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_254(1)\n    1\n    >>> fib_iter_254(10)\n    55\n    >>> fib_iter_254(100)\n    354224848179261915075\n    >>> fib_iter_254(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_255(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_255(1)\n    1\n    >>> fib_iter_255(10)\n    55\n    >>> fib_iter_255(100)\n    354224848179261915075\n    >>> fib_iter_255(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_256(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_256(1)\n    1\n    >>> fib_iter_256(10)\n    55\n    >>> fib_iter_256(100)\n    354224848179261915075\n    >>> fib_iter_256(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_257(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_257(1)\n    1\n    >>> fib_iter_257(10)\n    55\n    >>> fib_iter_257(100)\n    354224848179261915075\n    >>> fib_iter_257(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_258(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_258(1)\n    1\n    >>> fib_iter_258(10)\n    55\n    >>> fib_iter_258(100)\n    354224848179261915075\n    >>> fib_iter_258(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_259(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_259(1)\n    1\n    >>> fib_iter_259(10)\n    55\n    >>> fib_iter_259(100)\n    354224848179261915075\n    >>> fib_iter_259(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_260(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_260(1)\n    1\n    >>> fib_iter_260(10)\n    55\n    >>> fib_iter_260(100)\n    354224848179261915075\n    >>> fib_iter_260(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_261(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_261(1)\n    1\n    >>> fib_iter_261(10)\n    55\n    >>> fib_iter_261(100)\n    354224848179261915075\n    >>> fib_iter_261(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_262(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_262(1)\n    1\n    >>> fib_iter_262(10)\n    55\n    >>> fib_iter_262(100)\n    354224848179261915075\n    >>> fib_iter_262(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_263(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_263(1)\n    1\n    >>> fib_iter_263(10)\n    55\n    >>> fib_iter_263(100)\n    354224848179261915075\n    >>> fib_iter_263(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_264(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_264(1)\n    1\n    >>> fib_iter_264(10)\n    55\n    >>> fib_iter_264(100)\n    354224848179261915075\n    >>> fib_iter_264(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_265(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_265(1)\n    1\n    >>> fib_iter_265(10)\n    55\n    >>> fib_iter_265(100)\n    354224848179261915075\n    >>> fib_iter_265(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_266(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_266(1)\n    1\n    >>> fib_iter_266(10)\n    55\n    >>> fib_iter_266(100)\n    354224848179261915075\n    >>> fib_iter_266(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_267(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_267(1)\n    1\n    >>> fib_iter_267(10)\n    55\n    >>> fib_iter_267(100)\n    354224848179261915075\n    >>> fib_iter_267(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_268(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_268(1)\n    1\n    >>> fib_iter_268(10)\n    55\n    >>> fib_iter_268(100)\n    354224848179261915075\n    >>> fib_iter_268(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_269(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_269(1)\n    1\n    >>> fib_iter_269(10)\n    55\n    >>> fib_iter_269(100)\n    354224848179261915075\n    >>> fib_iter_269(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_270(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_270(1)\n    1\n    >>> fib_iter_270(10)\n    55\n    >>> fib_iter_270(100)\n    354224848179261915075\n    >>> fib_iter_270(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_271(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_271(1)\n    1\n    >>> fib_iter_271(10)\n    55\n    >>> fib_iter_271(100)\n    354224848179261915075\n    >>> fib_iter_271(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_272(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_272(1)\n    1\n    >>> fib_iter_272(10)\n    55\n    >>> fib_iter_272(100)\n    354224848179261915075\n    >>> fib_iter_272(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_273(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_273(1)\n    1\n    >>> fib_iter_273(10)\n    55\n    >>> fib_iter_273(100)\n    354224848179261915075\n    >>> fib_iter_273(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_274(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_274(1)\n    1\n    >>> fib_iter_274(10)\n    55\n    >>> fib_iter_274(100)\n    354224848179261915075\n    >>> fib_iter_274(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_275(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_275(1)\n    1\n    >>> fib_iter_275(10)\n    55\n    >>> fib_iter_275(100)\n    354224848179261915075\n    >>> fib_iter_275(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_276(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_276(1)\n    1\n    >>> fib_iter_276(10)\n    55\n    >>> fib_iter_276(100)\n    354224848179261915075\n    >>> fib_iter_276(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_277(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_277(1)\n    1\n    >>> fib_iter_277(10)\n    55\n    >>> fib_iter_277(100)\n    354224848179261915075\n    >>> fib_iter_277(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_278(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_278(1)\n    1\n    >>> fib_iter_278(10)\n    55\n    >>> fib_iter_278(100)\n    354224848179261915075\n    >>> fib_iter_278(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_279(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_279(1)\n    1\n    >>> fib_iter_279(10)\n    55\n    >>> fib_iter_279(100)\n    354224848179261915075\n    >>> fib_iter_279(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_280(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_280(1)\n    1\n    >>> fib_iter_280(10)\n    55\n    >>> fib_iter_280(100)\n    354224848179261915075\n    >>> fib_iter_280(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_281(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_281(1)\n    1\n    >>> fib_iter_281(10)\n    55\n    >>> fib_iter_281(100)\n    354224848179261915075\n    >>> fib_iter_281(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_282(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_282(1)\n    1\n    >>> fib_iter_282(10)\n    55\n    >>> fib_iter_282(100)\n    354224848179261915075\n    >>> fib_iter_282(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_283(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_283(1)\n    1\n    >>> fib_iter_283(10)\n    55\n    >>> fib_iter_283(100)\n    354224848179261915075\n    >>> fib_iter_283(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_284(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_284(1)\n    1\n    >>> fib_iter_284(10)\n    55\n    >>> fib_iter_284(100)\n    354224848179261915075\n    >>> fib_iter_284(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_285(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_285(1)\n    1\n    >>> fib_iter_285(10)\n    55\n    >>> fib_iter_285(100)\n    354224848179261915075\n    >>> fib_iter_285(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_286(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_286(1)\n    1\n    >>> fib_iter_286(10)\n    55\n    >>> fib_iter_286(100)\n    354224848179261915075\n    >>> fib_iter_286(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_287(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_287(1)\n    1\n    >>> fib_iter_287(10)\n    55\n    >>> fib_iter_287(100)\n    354224848179261915075\n    >>> fib_iter_287(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_288(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_288(1)\n    1\n    >>> fib_iter_288(10)\n    55\n    >>> fib_iter_288(100)\n    354224848179261915075\n    >>> fib_iter_288(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_289(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_289(1)\n    1\n    >>> fib_iter_289(10)\n    55\n    >>> fib_iter_289(100)\n    354224848179261915075\n    >>> fib_iter_289(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_290(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_290(1)\n    1\n    >>> fib_iter_290(10)\n    55\n    >>> fib_iter_290(100)\n    354224848179261915075\n    >>> fib_iter_290(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_291(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_291(1)\n    1\n    >>> fib_iter_291(10)\n    55\n    >>> fib_iter_291(100)\n    354224848179261915075\n    >>> fib_iter_291(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_292(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_292(1)\n    1\n    >>> fib_iter_292(10)\n    55\n    >>> fib_iter_292(100)\n    354224848179261915075\n    >>> fib_iter_292(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_293(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_293(1)\n    1\n    >>> fib_iter_293(10)\n    55\n    >>> fib_iter_293(100)\n    354224848179261915075\n    >>> fib_iter_293(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_294(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_294(1)\n    1\n    >>> fib_iter_294(10)\n    55\n    >>> fib_iter_294(100)\n    354224848179261915075\n    >>> fib_iter_294(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_295(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_295(1)\n    1\n    >>> fib_iter_295(10)\n    55\n    >>> fib_iter_295(100)\n    354224848179261915075\n    >>> fib_iter_295(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_296(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_296(1)\n    1\n    >>> fib_iter_296(10)\n    55\n    >>> fib_iter_296(100)\n    354224848179261915075\n    >>> fib_iter_296(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_297(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_297(1)\n    1\n    >>> fib_iter_297(10)\n    55\n    >>> fib_iter_297(100)\n    354224848179261915075\n    >>> fib_iter_297(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_298(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_298(1)\n    1\n    >>> fib_iter_298(10)\n    55\n    >>> fib_iter_298(100)\n    354224848179261915075\n    >>> fib_iter_298(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_299(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_299(1)\n    1\n    >>> fib_iter_299(10)\n    55\n    >>> fib_iter_299(100)\n    354224848179261915075\n    >>> fib_iter_299(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_300(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_300(1)\n    1\n    >>> fib_iter_300(10)\n    55\n    >>> fib_iter_300(100)\n    354224848179261915075\n    >>> fib_iter_300(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_301(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_301(1)\n    1\n    >>> fib_iter_301(10)\n    55\n    >>> fib_iter_301(100)\n    354224848179261915075\n    >>> fib_iter_301(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_302(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_302(1)\n    1\n    >>> fib_iter_302(10)\n    55\n    >>> fib_iter_302(100)\n    354224848179261915075\n    >>> fib_iter_302(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_303(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_303(1)\n    1\n    >>> fib_iter_303(10)\n    55\n    >>> fib_iter_303(100)\n    354224848179261915075\n    >>> fib_iter_303(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_304(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_304(1)\n    1\n    >>> fib_iter_304(10)\n    55\n    >>> fib_iter_304(100)\n    354224848179261915075\n    >>> fib_iter_304(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_305(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_305(1)\n    1\n    >>> fib_iter_305(10)\n    55\n    >>> fib_iter_305(100)\n    354224848179261915075\n    >>> fib_iter_305(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_306(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_306(1)\n    1\n    >>> fib_iter_306(10)\n    55\n    >>> fib_iter_306(100)\n    354224848179261915075\n    >>> fib_iter_306(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_307(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_307(1)\n    1\n    >>> fib_iter_307(10)\n    55\n    >>> fib_iter_307(100)\n    354224848179261915075\n    >>> fib_iter_307(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_308(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_308(1)\n    1\n    >>> fib_iter_308(10)\n    55\n    >>> fib_iter_308(100)\n    354224848179261915075\n    >>> fib_iter_308(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_309(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_309(1)\n    1\n    >>> fib_iter_309(10)\n    55\n    >>> fib_iter_309(100)\n    354224848179261915075\n    >>> fib_iter_309(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_310(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_310(1)\n    1\n    >>> fib_iter_310(10)\n    55\n    >>> fib_iter_310(100)\n    354224848179261915075\n    >>> fib_iter_310(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_311(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_311(1)\n    1\n    >>> fib_iter_311(10)\n    55\n    >>> fib_iter_311(100)\n    354224848179261915075\n    >>> fib_iter_311(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_312(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_312(1)\n    1\n    >>> fib_iter_312(10)\n    55\n    >>> fib_iter_312(100)\n    354224848179261915075\n    >>> fib_iter_312(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_313(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_313(1)\n    1\n    >>> fib_iter_313(10)\n    55\n    >>> fib_iter_313(100)\n    354224848179261915075\n    >>> fib_iter_313(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_314(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_314(1)\n    1\n    >>> fib_iter_314(10)\n    55\n    >>> fib_iter_314(100)\n    354224848179261915075\n    >>> fib_iter_314(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_315(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_315(1)\n    1\n    >>> fib_iter_315(10)\n    55\n    >>> fib_iter_315(100)\n    354224848179261915075\n    >>> fib_iter_315(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_316(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_316(1)\n    1\n    >>> fib_iter_316(10)\n    55\n    >>> fib_iter_316(100)\n    354224848179261915075\n    >>> fib_iter_316(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_317(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_317(1)\n    1\n    >>> fib_iter_317(10)\n    55\n    >>> fib_iter_317(100)\n    354224848179261915075\n    >>> fib_iter_317(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_318(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_318(1)\n    1\n    >>> fib_iter_318(10)\n    55\n    >>> fib_iter_318(100)\n    354224848179261915075\n    >>> fib_iter_318(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_319(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_319(1)\n    1\n    >>> fib_iter_319(10)\n    55\n    >>> fib_iter_319(100)\n    354224848179261915075\n    >>> fib_iter_319(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_320(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_320(1)\n    1\n    >>> fib_iter_320(10)\n    55\n    >>> fib_iter_320(100)\n    354224848179261915075\n    >>> fib_iter_320(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_321(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_321(1)\n    1\n    >>> fib_iter_321(10)\n    55\n    >>> fib_iter_321(100)\n    354224848179261915075\n    >>> fib_iter_321(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_322(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_322(1)\n    1\n    >>> fib_iter_322(10)\n    55\n    >>> fib_iter_322(100)\n    354224848179261915075\n    >>> fib_iter_322(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_323(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_323(1)\n    1\n    >>> fib_iter_323(10)\n    55\n    >>> fib_iter_323(100)\n    354224848179261915075\n    >>> fib_iter_323(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_324(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_324(1)\n    1\n    >>> fib_iter_324(10)\n    55\n    >>> fib_iter_324(100)\n    354224848179261915075\n    >>> fib_iter_324(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_325(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_325(1)\n    1\n    >>> fib_iter_325(10)\n    55\n    >>> fib_iter_325(100)\n    354224848179261915075\n    >>> fib_iter_325(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_326(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_326(1)\n    1\n    >>> fib_iter_326(10)\n    55\n    >>> fib_iter_326(100)\n    354224848179261915075\n    >>> fib_iter_326(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_327(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_327(1)\n    1\n    >>> fib_iter_327(10)\n    55\n    >>> fib_iter_327(100)\n    354224848179261915075\n    >>> fib_iter_327(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_328(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_328(1)\n    1\n    >>> fib_iter_328(10)\n    55\n    >>> fib_iter_328(100)\n    354224848179261915075\n    >>> fib_iter_328(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_329(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_329(1)\n    1\n    >>> fib_iter_329(10)\n    55\n    >>> fib_iter_329(100)\n    354224848179261915075\n    >>> fib_iter_329(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_330(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_330(1)\n    1\n    >>> fib_iter_330(10)\n    55\n    >>> fib_iter_330(100)\n    354224848179261915075\n    >>> fib_iter_330(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_331(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_331(1)\n    1\n    >>> fib_iter_331(10)\n    55\n    >>> fib_iter_331(100)\n    354224848179261915075\n    >>> fib_iter_331(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_332(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_332(1)\n    1\n    >>> fib_iter_332(10)\n    55\n    >>> fib_iter_332(100)\n    354224848179261915075\n    >>> fib_iter_332(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_333(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_333(1)\n    1\n    >>> fib_iter_333(10)\n    55\n    >>> fib_iter_333(100)\n    354224848179261915075\n    >>> fib_iter_333(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_334(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_334(1)\n    1\n    >>> fib_iter_334(10)\n    55\n    >>> fib_iter_334(100)\n    354224848179261915075\n    >>> fib_iter_334(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_335(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_335(1)\n    1\n    >>> fib_iter_335(10)\n    55\n    >>> fib_iter_335(100)\n    354224848179261915075\n    >>> fib_iter_335(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_336(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_336(1)\n    1\n    >>> fib_iter_336(10)\n    55\n    >>> fib_iter_336(100)\n    354224848179261915075\n    >>> fib_iter_336(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_337(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_337(1)\n    1\n    >>> fib_iter_337(10)\n    55\n    >>> fib_iter_337(100)\n    354224848179261915075\n    >>> fib_iter_337(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_338(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_338(1)\n    1\n    >>> fib_iter_338(10)\n    55\n    >>> fib_iter_338(100)\n    354224848179261915075\n    >>> fib_iter_338(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_339(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_339(1)\n    1\n    >>> fib_iter_339(10)\n    55\n    >>> fib_iter_339(100)\n    354224848179261915075\n    >>> fib_iter_339(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_340(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_340(1)\n    1\n    >>> fib_iter_340(10)\n    55\n    >>> fib_iter_340(100)\n    354224848179261915075\n    >>> fib_iter_340(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_341(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_341(1)\n    1\n    >>> fib_iter_341(10)\n    55\n    >>> fib_iter_341(100)\n    354224848179261915075\n    >>> fib_iter_341(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_342(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_342(1)\n    1\n    >>> fib_iter_342(10)\n    55\n    >>> fib_iter_342(100)\n    354224848179261915075\n    >>> fib_iter_342(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_343(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_343(1)\n    1\n    >>> fib_iter_343(10)\n    55\n    >>> fib_iter_343(100)\n    354224848179261915075\n    >>> fib_iter_343(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_344(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_344(1)\n    1\n    >>> fib_iter_344(10)\n    55\n    >>> fib_iter_344(100)\n    354224848179261915075\n    >>> fib_iter_344(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_345(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_345(1)\n    1\n    >>> fib_iter_345(10)\n    55\n    >>> fib_iter_345(100)\n    354224848179261915075\n    >>> fib_iter_345(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_346(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_346(1)\n    1\n    >>> fib_iter_346(10)\n    55\n    >>> fib_iter_346(100)\n    354224848179261915075\n    >>> fib_iter_346(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_347(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_347(1)\n    1\n    >>> fib_iter_347(10)\n    55\n    >>> fib_iter_347(100)\n    354224848179261915075\n    >>> fib_iter_347(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_348(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_348(1)\n    1\n    >>> fib_iter_348(10)\n    55\n    >>> fib_iter_348(100)\n    354224848179261915075\n    >>> fib_iter_348(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_349(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_349(1)\n    1\n    >>> fib_iter_349(10)\n    55\n    >>> fib_iter_349(100)\n    354224848179261915075\n    >>> fib_iter_349(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_350(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_350(1)\n    1\n    >>> fib_iter_350(10)\n    55\n    >>> fib_iter_350(100)\n    354224848179261915075\n    >>> fib_iter_350(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_351(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_351(1)\n    1\n    >>> fib_iter_351(10)\n    55\n    >>> fib_iter_351(100)\n    354224848179261915075\n    >>> fib_iter_351(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_352(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_352(1)\n    1\n    >>> fib_iter_352(10)\n    55\n    >>> fib_iter_352(100)\n    354224848179261915075\n    >>> fib_iter_352(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_353(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_353(1)\n    1\n    >>> fib_iter_353(10)\n    55\n    >>> fib_iter_353(100)\n    354224848179261915075\n    >>> fib_iter_353(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_354(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_354(1)\n    1\n    >>> fib_iter_354(10)\n    55\n    >>> fib_iter_354(100)\n    354224848179261915075\n    >>> fib_iter_354(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_355(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_355(1)\n    1\n    >>> fib_iter_355(10)\n    55\n    >>> fib_iter_355(100)\n    354224848179261915075\n    >>> fib_iter_355(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_356(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_356(1)\n    1\n    >>> fib_iter_356(10)\n    55\n    >>> fib_iter_356(100)\n    354224848179261915075\n    >>> fib_iter_356(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_357(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_357(1)\n    1\n    >>> fib_iter_357(10)\n    55\n    >>> fib_iter_357(100)\n    354224848179261915075\n    >>> fib_iter_357(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_358(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_358(1)\n    1\n    >>> fib_iter_358(10)\n    55\n    >>> fib_iter_358(100)\n    354224848179261915075\n    >>> fib_iter_358(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_359(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_359(1)\n    1\n    >>> fib_iter_359(10)\n    55\n    >>> fib_iter_359(100)\n    354224848179261915075\n    >>> fib_iter_359(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_360(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_360(1)\n    1\n    >>> fib_iter_360(10)\n    55\n    >>> fib_iter_360(100)\n    354224848179261915075\n    >>> fib_iter_360(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_361(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_361(1)\n    1\n    >>> fib_iter_361(10)\n    55\n    >>> fib_iter_361(100)\n    354224848179261915075\n    >>> fib_iter_361(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_362(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_362(1)\n    1\n    >>> fib_iter_362(10)\n    55\n    >>> fib_iter_362(100)\n    354224848179261915075\n    >>> fib_iter_362(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_363(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_363(1)\n    1\n    >>> fib_iter_363(10)\n    55\n    >>> fib_iter_363(100)\n    354224848179261915075\n    >>> fib_iter_363(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_364(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_364(1)\n    1\n    >>> fib_iter_364(10)\n    55\n    >>> fib_iter_364(100)\n    354224848179261915075\n    >>> fib_iter_364(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_365(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_365(1)\n    1\n    >>> fib_iter_365(10)\n    55\n    >>> fib_iter_365(100)\n    354224848179261915075\n    >>> fib_iter_365(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_366(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_366(1)\n    1\n    >>> fib_iter_366(10)\n    55\n    >>> fib_iter_366(100)\n    354224848179261915075\n    >>> fib_iter_366(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_367(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_367(1)\n    1\n    >>> fib_iter_367(10)\n    55\n    >>> fib_iter_367(100)\n    354224848179261915075\n    >>> fib_iter_367(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_368(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_368(1)\n    1\n    >>> fib_iter_368(10)\n    55\n    >>> fib_iter_368(100)\n    354224848179261915075\n    >>> fib_iter_368(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_369(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_369(1)\n    1\n    >>> fib_iter_369(10)\n    55\n    >>> fib_iter_369(100)\n    354224848179261915075\n    >>> fib_iter_369(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_370(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_370(1)\n    1\n    >>> fib_iter_370(10)\n    55\n    >>> fib_iter_370(100)\n    354224848179261915075\n    >>> fib_iter_370(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_371(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_371(1)\n    1\n    >>> fib_iter_371(10)\n    55\n    >>> fib_iter_371(100)\n    354224848179261915075\n    >>> fib_iter_371(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_372(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_372(1)\n    1\n    >>> fib_iter_372(10)\n    55\n    >>> fib_iter_372(100)\n    354224848179261915075\n    >>> fib_iter_372(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_373(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_373(1)\n    1\n    >>> fib_iter_373(10)\n    55\n    >>> fib_iter_373(100)\n    354224848179261915075\n    >>> fib_iter_373(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_374(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_374(1)\n    1\n    >>> fib_iter_374(10)\n    55\n    >>> fib_iter_374(100)\n    354224848179261915075\n    >>> fib_iter_374(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_375(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_375(1)\n    1\n    >>> fib_iter_375(10)\n    55\n    >>> fib_iter_375(100)\n    354224848179261915075\n    >>> fib_iter_375(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_376(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_376(1)\n    1\n    >>> fib_iter_376(10)\n    55\n    >>> fib_iter_376(100)\n    354224848179261915075\n    >>> fib_iter_376(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_377(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_377(1)\n    1\n    >>> fib_iter_377(10)\n    55\n    >>> fib_iter_377(100)\n    354224848179261915075\n    >>> fib_iter_377(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_378(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_378(1)\n    1\n    >>> fib_iter_378(10)\n    55\n    >>> fib_iter_378(100)\n    354224848179261915075\n    >>> fib_iter_378(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_379(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_379(1)\n    1\n    >>> fib_iter_379(10)\n    55\n    >>> fib_iter_379(100)\n    354224848179261915075\n    >>> fib_iter_379(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_380(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_380(1)\n    1\n    >>> fib_iter_380(10)\n    55\n    >>> fib_iter_380(100)\n    354224848179261915075\n    >>> fib_iter_380(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_381(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_381(1)\n    1\n    >>> fib_iter_381(10)\n    55\n    >>> fib_iter_381(100)\n    354224848179261915075\n    >>> fib_iter_381(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_382(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_382(1)\n    1\n    >>> fib_iter_382(10)\n    55\n    >>> fib_iter_382(100)\n    354224848179261915075\n    >>> fib_iter_382(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_383(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_383(1)\n    1\n    >>> fib_iter_383(10)\n    55\n    >>> fib_iter_383(100)\n    354224848179261915075\n    >>> fib_iter_383(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_384(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_384(1)\n    1\n    >>> fib_iter_384(10)\n    55\n    >>> fib_iter_384(100)\n    354224848179261915075\n    >>> fib_iter_384(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_385(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_385(1)\n    1\n    >>> fib_iter_385(10)\n    55\n    >>> fib_iter_385(100)\n    354224848179261915075\n    >>> fib_iter_385(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_386(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_386(1)\n    1\n    >>> fib_iter_386(10)\n    55\n    >>> fib_iter_386(100)\n    354224848179261915075\n    >>> fib_iter_386(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_387(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_387(1)\n    1\n    >>> fib_iter_387(10)\n    55\n    >>> fib_iter_387(100)\n    354224848179261915075\n    >>> fib_iter_387(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_388(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_388(1)\n    1\n    >>> fib_iter_388(10)\n    55\n    >>> fib_iter_388(100)\n    354224848179261915075\n    >>> fib_iter_388(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_389(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_389(1)\n    1\n    >>> fib_iter_389(10)\n    55\n    >>> fib_iter_389(100)\n    354224848179261915075\n    >>> fib_iter_389(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_390(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_390(1)\n    1\n    >>> fib_iter_390(10)\n    55\n    >>> fib_iter_390(100)\n    354224848179261915075\n    >>> fib_iter_390(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_391(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_391(1)\n    1\n    >>> fib_iter_391(10)\n    55\n    >>> fib_iter_391(100)\n    354224848179261915075\n    >>> fib_iter_391(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_392(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_392(1)\n    1\n    >>> fib_iter_392(10)\n    55\n    >>> fib_iter_392(100)\n    354224848179261915075\n    >>> fib_iter_392(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_393(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_393(1)\n    1\n    >>> fib_iter_393(10)\n    55\n    >>> fib_iter_393(100)\n    354224848179261915075\n    >>> fib_iter_393(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_394(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_394(1)\n    1\n    >>> fib_iter_394(10)\n    55\n    >>> fib_iter_394(100)\n    354224848179261915075\n    >>> fib_iter_394(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_395(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_395(1)\n    1\n    >>> fib_iter_395(10)\n    55\n    >>> fib_iter_395(100)\n    354224848179261915075\n    >>> fib_iter_395(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_396(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_396(1)\n    1\n    >>> fib_iter_396(10)\n    55\n    >>> fib_iter_396(100)\n    354224848179261915075\n    >>> fib_iter_396(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_397(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_397(1)\n    1\n    >>> fib_iter_397(10)\n    55\n    >>> fib_iter_397(100)\n    354224848179261915075\n    >>> fib_iter_397(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_398(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_398(1)\n    1\n    >>> fib_iter_398(10)\n    55\n    >>> fib_iter_398(100)\n    354224848179261915075\n    >>> fib_iter_398(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_399(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_399(1)\n    1\n    >>> fib_iter_399(10)\n    55\n    >>> fib_iter_399(100)\n    354224848179261915075\n    >>> fib_iter_399(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_400(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_400(1)\n    1\n    >>> fib_iter_400(10)\n    55\n    >>> fib_iter_400(100)\n    354224848179261915075\n    >>> fib_iter_400(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_401(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_401(1)\n    1\n    >>> fib_iter_401(10)\n    55\n    >>> fib_iter_401(100)\n    354224848179261915075\n    >>> fib_iter_401(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_402(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_402(1)\n    1\n    >>> fib_iter_402(10)\n    55\n    >>> fib_iter_402(100)\n    354224848179261915075\n    >>> fib_iter_402(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_403(n: int):\n    \"\"\"fib_iter is a function that returns nth number of fibonacci sequence.\n    >>> fib_iter_403(1)\n    1\n    >>> fib_iter_403(10)\n    55\n    >>> fib_iter_403(100)\n    354224848179261915075\n    >>> fib_iter_403(1000)\n    333992359882022525611\n    \"\"\"\n    if n < 3:\n        return 1\n    a, b, i = 1, 1, 0\n    while i < n-1:\n        a, b, i = a+b, a, i+1\n    return a\n\ndef fib_iter_404(n: int):\n    \"\"\"fib_iter is a function that"}
{"task_id": "HumanEval/61", "completion": "stack = []\n    opening_brackets = '({['\n    closing_brackets = ')}]'\n    bracket_pairs = {')':'(', ']':'[', '}':'{'}\n    for char in brackets:\n        if char in opening_brackets:\n            stack.append(char)\n        if char in closing_brackets:\n            if stack == []:\n                return False\n            elif stack[-1] != bracket_pairs[char]:\n                return False\n            else:\n                stack.pop()\n    return stack == []\n\ndef test_correct_bracketing():\n    assert correct_bracketing(\"(\") is False\n    assert correct_bracketing(\"()\") is True\n    assert correct_bracketing(\"(()())\") is True\n    assert correct_bracketing(\")(()\") is False\n    assert correct_bracketing(\"(()\") is False\n    assert correct_bracketing(\"(()())\") is True\n    assert correct_bracketing(\"((\") is False\n    assert correct_bracketing(\"(((())\") is False\n    assert correct_bracketing(\"(()())\") is True\n    assert correct_bracketing(\"(((())))\") is True\n    assert correct_bracketing(\"()(())\") is True\n    assert correct_bracketing(\"(()())(()())\") is True\n    assert correct_bracketing(\"(()())("}
{"task_id": "HumanEval/62", "completion": "derivatives = []\n    for i in range(1, len(xs)):\n        derivatives.append(xs[i] * i)\n    return derivatives\n\ndef coeff_deriv(coeff_poly):\n    \"\"\" coeff_deriv takes a polynomial coeff_poly, which is a list of\n    the coefficients of a polynomial. The output is a list of the coeffients\n    of its derivative.\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6, 0]\n    \"\"\"\n    derivatives = derivative(coeff_poly)\n    return derivatives\n\ndef evaluate(coeff_poly, xs):\n    \"\"\" coeff_poly is a list of coefficients of a polynomial. xs is a list of\n    x-values for which to evaluate the polynomial. For example:\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    >>> coeff_deriv([2, 3, 4])\n    [6, 12, 24]\n    >>> coeff_deriv([2, 3, 4, 5])\n    [12, 24, 48, 90]\n    >>> coeff_deriv([2, 3, 4, 5, 6])\n    [24, 48, 90, 162, 246]\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([3, 1, 2, 4, 5, 6])\n    [2, 6, 12, 20, 0, 0]\n    >>> coeff_deriv([1, 2, 3, 4, 5, 6, 7])\n    [2, 6, 12, 20, 0, 0, 0]\n    >>> coeff_deriv([2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [6, 12, 24, 48, 90, 162, 246, 360, 480]\n    \"\"\"\n    coeff_derivatives = coeff_deriv(coeff_poly)\n    results = []\n    for x in xs:\n        result = 0\n        for i in range(0, len(coeff_derivatives)):\n            result += coeff_derivatives[i] * (x**i)\n        results.append(result)\n    return results\n    \n    \ndef f(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> f([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0, 0, 0, 0]\n    >>> f([1, 2, 3])\n    [2, 6, 0, 0, 0, 0, 0, 0]\n    >>> f([2, 3, 4])\n    [6, 12, 24, 0, 0, 0, 0, 0]\n    >>> f([2, 3, 4, 5])\n    [12, 24, 48, 90, 0, 0, 0, 0]\n    \"\"\"\n    derivatives = []\n    for i in range(0, len(xs)):\n        derivatives.append(xs[i] * (i + 1))\n    return derivatives\n\ndef f_eval(coeff_poly, xs):\n    \"\"\" coeff_deriv takes a polynomial coeff_poly, which is a list of\n    the coefficients of a polynomial. The output is a list of the coeffients\n    of its derivative.\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivatives = coeff_deriv(coeff_poly)\n    results = []\n    for x in xs:\n        result = 0\n        for i in range(0, len(derivatives)):\n            result += derivatives[i] * (x**i)\n        results.append(result)\n    return results\n    \n    \ndef f_der(coeff_poly):\n    \"\"\" coeff_deriv takes a polynomial coeff_poly, which is a list of\n    the coefficients of a polynomial. The output is a list of the coeffients\n    of its derivative.\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivatives = coeff_deriv(coeff_poly)\n    return derivatives\n    \n    \ndef f_eval_der(coeff_poly, xs):\n    \"\"\" coeff_deriv takes a polynomial coeff_poly, which is a list of\n    the coefficients of a polynomial. The output is a list of the coeffients\n    of its derivative.\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivatives = coeff_deriv(coeff_poly)\n    results = []\n    for x in xs:\n        result = 0\n        for i in range(0, len(derivatives)):\n            result += derivatives[i] * (x**i)\n        results.append(result)\n    return results\n    \ndef f_eval_der_der(coeff_poly, xs):\n    \"\"\" coeff_deriv takes a polynomial coeff_poly, which is a list of\n    the coefficients of a polynomial. The output is a list of the coeffients\n    of its derivative.\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivatives = coeff_deriv(coeff_poly)\n    deriv2s = coeff_deriv(derivatives)\n    results = []\n    for x in xs:\n        result = 0\n        for i in range(0, len(deriv2s)):\n            result += deriv2s[i] * (x**i)\n        results.append(result)\n    return results\n    \ndef newton_poly(coeff_poly, xs, error):\n    \"\"\" coeff_poly is a list of coefficients of a polynomial. xs is a list of\n    x-values for which to evaluate the polynomial. For example:\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    >>> coeff_deriv([2, 3, 4])\n    [6, 12, 24]\n    >>> coeff_deriv([2, 3, 4, 5])\n    [12, 24, 48, 90]\n    >>> coeff_deriv([2, 3, 4, 5, 6])\n    [24, 48, 90, 162, 246]\n    >>> coeff_deriv([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 0]\n    >>> coeff_deriv([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivatives = coeff_deriv(coeff_poly)\n    results = []\n    for x in xs:\n        result = derivatives[0]\n        for i in range(1, len(derivatives)):\n            result += derivatives[i] * (x - x"}
{"task_id": "HumanEval/63", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n# print(fibfib(5))\n# print(fibfib(8))\n# print(fibfib(15))\n\ndef fib(n: int) -> int:\n    \"\"\"\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \n# print(fib(0))\n# print(fib(1))\n# print(fib(5))\n\n\ndef fib2(n: int) -> int:\n    \"\"\"\n    >>> fib2(0)\n    0\n    >>> fib2(1)\n    1\n    >>> fib2(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib2(0))\nprint(fib2(1))\nprint(fib2(5))\n\ndef fib(n: int) -> int:\n    \"\"\"\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib2(n: int) -> int:\n    \"\"\"\n    >>> fib2(0)\n    0\n    >>> fib2(1)\n    1\n    >>> fib2(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib3(n: int) -> int:\n    \"\"\"\n    >>> fib3(0)\n    0\n    >>> fib3(1)\n    1\n    >>> fib3(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib4(n: int) -> int:\n    \"\"\"\n    >>> fib4(0)\n    0\n    >>> fib4(1)\n    1\n    >>> fib4(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib5(n: int) -> int:\n    \"\"\"\n    >>> fib5(0)\n    0\n    >>> fib5(1)\n    1\n    >>> fib5(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib6(n: int) -> int:\n    \"\"\"\n    >>> fib6(0)\n    0\n    >>> fib6(1)\n    1\n    >>> fib6(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib7(n: int) -> int:\n    \"\"\"\n    >>> fib7(0)\n    0\n    >>> fib7(1)\n    1\n    >>> fib7(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib8(n: int) -> int:\n    \"\"\"\n    >>> fib8(0)\n    0\n    >>> fib8(1)\n    1\n    >>> fib8(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib9(n: int) -> int:\n    \"\"\"\n    >>> fib9(0)\n    0\n    >>> fib9(1)\n    1\n    >>> fib9(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib10(n: int) -> int:\n    \"\"\"\n    >>> fib10(0)\n    0\n    >>> fib10(1)\n    1\n    >>> fib10(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib11(n: int) -> int:\n    \"\"\"\n    >>> fib11(0)\n    0\n    >>> fib11(1)\n    1\n    >>> fib11(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib12(n: int) -> int:\n    \"\"\"\n    >>> fib12(0)\n    0\n    >>> fib12(1)\n    1\n    >>> fib12(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib13(n: int) -> int:\n    \"\"\"\n    >>> fib13(0)\n    0\n    >>> fib13(1)\n    1\n    >>> fib13(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib14(n: int) -> int:\n    \"\"\"\n    >>> fib14(0)\n    0\n    >>> fib14(1)\n    1\n    >>> fib14(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib15(n: int) -> int:\n    \"\"\"\n    >>> fib15(0)\n    0\n    >>> fib15(1)\n    1\n    >>> fib15(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib16(n: int) -> int:\n    \"\"\"\n    >>> fib16(0)\n    0\n    >>> fib16(1)\n    1\n    >>> fib16(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib17(n: int) -> int:\n    \"\"\"\n    >>> fib17(0)\n    0\n    >>> fib17(1)\n    1\n    >>> fib17(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib18(n: int) -> int:\n    \"\"\"\n    >>> fib18(0)\n    0\n    >>> fib18(1)\n    1\n    >>> fib18(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib19(n: int) -> int:\n    \"\"\"\n    >>> fib19(0)\n    0\n    >>> fib19(1)\n    1\n    >>> fib19(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib20(n: int) -> int:\n    \"\"\"\n    >>> fib20(0)\n    0\n    >>> fib20(1)\n    1\n    >>> fib20(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib21(n: int) -> int:\n    \"\"\"\n    >>> fib21(0)\n    0\n    >>> fib21(1)\n    1\n    >>> fib21(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib22(n: int) -> int:\n    \"\"\"\n    >>> fib22(0)\n    0\n    >>> fib22(1)\n    1\n    >>> fib22(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib23(n: int) -> int:\n    \"\"\"\n    >>> fib23(0)\n    0\n    >>> fib23(1)\n    1\n    >>> fib23(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib24(n: int) -> int:\n    \"\"\"\n    >>> fib24(0)\n    0\n    >>> fib24(1)\n    1\n    >>> fib24(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib25(n: int)"}
{"task_id": "HumanEval/64", "completion": "count = 0\n    for char in s:\n        if char in \"aeiou\":\n            count += 1\n    return count\n\ndef is_palindrome(s):\n    \"\"\"Write a function is_palindrome which takes a string as input and\n    returns True if it is a palindrome, else returns False.\n    A string is called a palindrome when it reads the same from\n    front as well as from back.\n    Here, 'y' is also a palindrome, but only when it is at the end of the\n    given word.\n\n    Example:\n    >>> is_palindrome(\"abcba\")\n    True\n    >>> is_palindrome(\"ACEDY\")\n    False\n    \"\"\"\n    return s == s[::-1]\n\ndef vowels_and_consonants_count(s):\n    \"\"\"Write a function vowels_and_consonants_count which takes a string as\n    input and returns a tuple containing the number of vowels and consonants\n    in the string.\n\n    Example:\n    >>> vowels_and_consonants_count(\"abcde\")\n    (2, 3)\n    >>> vowels_and_consonants_count(\"ACEDY\")\n    (3, 3)\n    \"\"\"\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char in \"aeiou\":\n            vowel_count += 1\n        elif char.isalpha():\n            consonant_count += 1\n    return (vowel_count, consonant_count)"}
{"task_id": "HumanEval/65", "completion": "if shift == 0:\n        return x\n    else:\n        x = str(x)\n        result = x[-shift:] + x[:-shift]\n        return result\n\n\ndef encrypt(x, s):\n    \"\"\"Encrypt the string x with the shift s and return the result as a string.\n    >>> encrypt(\"apple\", 5)\n    \"fuqqt\"\n    >>> encrypt(\"apple\", -5)\n    \"ogggg\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(x)):\n        result += chr(ord(x[i]) + s)\n    return result\n\n\ndef decrypt(x, s):\n    \"\"\"Decrypt the string x with the shift s and return the result as a string.\n    >>> decrypt(\"fuqqt\", 5)\n    \"apple\"\n    >>> decrypt(\"ogggg\", -5)\n    \"apple\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(x)):\n        result += chr(ord(x[i]) - s)\n    return result\n\n\ndef decrypt_by_frequency(x):\n    \"\"\"Decrypt the string x by character frequency.\n    >>> decrypt_by_frequency(\"fuqqtfqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"}
{"task_id": "HumanEval/66", "completion": "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n\ndef test_digitSum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n\ndef isLeap(year):\n    \"\"\"\n    Task\n    Write a function that takes in a year and returns true or false depending on whether it is a leap year.\n    A leap year is defined as follows:\n        - Every year divisible by 4 is a leap year.\n        - Every year divisible by 100 is NOT a leap year.\n        - Every year divisible by 400 is a leap year.\n        \n        Examples:\n            isLeap(2000) => True\n            isLeap(2001) => False\n            isLeap(2004) => True\n            isLeap(2100) => False\n            isLeap(1900) => False\n            isLeap(1800) => False\n            isLeap(2012) => True\n            isLeap(1984) => True\n            isLeap(1985) => False\n    \"\"\"\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        return True\n    else:\n        return False\n\n\ndef test_isLeap():\n    assert isLeap(2000) == True\n    assert isLeap(2001) == False\n    assert isLeap(2004) == True\n    assert isLeap(2100) == False\n    assert isLeap(1900) == False\n    assert isLeap(1800) == False\n    assert isLeap(2012) == True\n    assert isLeap(1984) == True\n    assert isLeap(1985) == False\n\n\ndef getNthPrime(n):\n    \"\"\"\n    Task\n    Write a function that returns the nth prime.\n    \n    Examples:\n        getNthPrime(1) => 2\n        getNthPrime(2) => 3\n        getNthPrime(3) => 5\n        getNthPrime(4) => 7\n        getNthPrime(5) => 11\n        getNthPrime(6) => 13\n        getNthPrime(7) => 17\n        getNthPrime(8) => 19\n        getNthPrime(9) => 23\n        getNthPrime(10) => 29\n    \"\"\"\n    if n == 1:\n        return 2\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        if isPrime(num):\n            count += 1\n    return num\n\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n\n\ndef test_getNthPrime():\n    assert getNthPrime(1) == 2\n    assert getNthPrime(2) == 3\n    assert getNthPrime(3) == 5\n    assert getNthPrime(4) == 7\n    assert getNthPrime(5) == 11\n    assert getNthPrime(6) == 13\n    assert getNthPrime(7) == 17\n    assert getNthPrime(8) == 19\n    assert getNthPrime(9) == 23\n    assert getNthPrime(10) == 29\n\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n\n\ndef getNthPrime(n):\n    if n == 1:\n        return 2\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        if isPrime(num):\n            count += 1\n    return num\n\n\ndef test_nthPrime():\n    assert nthPrime(1) == 2\n    assert nthPrime(2) == 3\n    assert nthPrime(3) == 5\n    assert nthPrime(4) == 7\n    assert nthPrime(5) == 11\n    assert nthPrime(6) == 13\n    assert nthPrime(7) == 17\n    assert nthPrime(8) == 19\n    assert nthPrime(9) == 23\n    assert nthPrime(10) == 29\n    assert nthPrime(20) == 79\n    assert nthPrime(100) == 541\n    assert nthPrime(1000) == 877\n\n\ndef nthPrime(n):\n    if n == 1:\n        return 2\n    count = 1\n    num = 1\n    while count"}
{"task_id": "HumanEval/67", "completion": "if s[-7:]==\"apples\":\n        apples=int(s[-11:-7])\n    elif s[-7:]==\"oranges\":\n        oranges=int(s[-11:-7])\n    elif s[-7:]==\"mango\":\n        mango=int(s[-11:-7])\n    return int(n)-(apples+oranges+mango)\n  \n  \n  def word_with_highest_frequency(s):\n    \"\"\"\n    In this task, you will be given a string that represents a word with its frequency\n    return the word with the highest frequency and its frequency.\n    for example:\n    word_with_highest_frequency(\"hello world hello\") -> hello, 2\n    word_with_highest_frequency(\"hello world hello python\") -> hello, 3\n    word_with_highest_frequency(\"hello world hello python is very easy\") -> hello, 3\n    \"\"\"\n    \n    words_frequency={}\n    for word in s.split():\n        words_frequency[word]=s.split().count(word)\n    highest_frequency=max(words_frequency.values())\n    highest_frequency_word=[word for word,frequency in words_frequency.items() if frequency==highest_frequency]\n    highest_frequency_word.sort()\n    return highest_frequency_word[0],highest_frequency\n\n\n  def word_count(s):\n    \"\"\"\n    In this task, you will be given a string that represents a text,\n    return a dictionary that contains the word count for each word in the text.\n    for example:\n    word_count(\"hello world hello\") -> {'hello': 2, 'world': 1}\n    word_count(\"hello world hello python\") -> {'hello': 2, 'world': 1, 'python': 1}\n    word_count(\"hello world hello python is very easy\") -> {'hello': 2, 'world': 1, 'python': 1, 'is': 1, 'very': 1, 'easy': 1}\n    \"\"\"\n    \n    word_count_dictionary={}\n    for word in s.split():\n        word_count_dictionary[word]=s.split().count(word)\n    return word_count_dictionary\n  \n  \n  def word_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a sentence and an integer that represents\n    the total number of words in the sentence return a dictionary that contains the word distribution\n    for each word in the sentence.\n    for example:\n    word_distribution(\"hello world hello\", 3) -> {'hello': 2, 'world': 1}\n    word_distribution(\"hello world hello python\", 5) -> {'hello': 2, 'world': 1, 'python': 1}\n    word_distribution(\"hello world hello python is very easy\", 6) -> {'hello': 2, 'world': 1, 'python': 1, 'is': 1, 'very': 1, 'easy': 1}\n    \"\"\"\n    \n    word_distribution_dictionary={}\n    fo"}
{"task_id": "HumanEval/68", "completion": "# Write your code here\n    if arr == []:\n        return []\n    elif len(arr) % 2 == 0:\n        arr_sorted = sorted(arr, reverse = True)\n        arr_sorted = sorted(arr_sorted, key = lambda x: x % 2)\n        return [arr_sorted[arr_sorted.index(min(arr_sorted))], arr.index(min(arr_sorted))]\n    else:\n        arr_sorted = sorted(arr, reverse = True)\n        arr_sorted = sorted(arr_sorted, key = lambda x: x % 2)\n        return [arr_sorted[arr_sorted.index(min(arr_sorted))], arr.index(min(arr_sorted))]"}
{"task_id": "HumanEval/69", "completion": "m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m = x\n    return m\n\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\nprint(search([4, 1, 2, 2, 3, 1]))\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    m = -1\n    for x in lst:\n        if lst.count(x) >= x and x > m:\n            m"}
{"task_id": "HumanEval/70", "completion": "lst2 = []\n    while lst:\n        lst2.append(min(lst))\n        lst.remove(min(lst))\n    return lst2\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    while lst:\n        lst2.append(max(lst))\n        lst.remove(max(lst))\n    return lst2\n\n\ndef strange_sort_list3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    while lst:\n        lst2.append(min(lst))\n        lst.remove(min(lst))\n        lst2.append(max(lst))\n        lst.remove(max(lst))\n    return lst2\n\n\ndef strange_sort_list4(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    while lst:\n        lst2.append(lst.pop(lst.index(min(lst))))\n        lst2.append(lst.pop(lst.index(max(lst))))\n    return lst2\n\ndef strange_sort_list5(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    lst_copy = lst.copy()\n    while lst:\n        lst2.append(lst_copy.pop(lst_copy.index(min(lst_copy))))\n        lst2.append(lst_copy.pop(lst_copy.index(max(lst_copy))))\n    return lst2\n\ndef strange_sort_list6(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 ="}
{"task_id": "HumanEval/71", "completion": "sides = [a,b,c]\n    sides.sort()\n    \n    if a + b < c or a + c < b or b + c < a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\n# %%\ndef factorial(n):\n    '''\n    Calculate the factorial of a given number. The factorial of n is defined as\n    the product of all positive integers less than or equal to n.\n    Example:\n    factorial(5) == 120\n    factorial(10) == 3628800\n    factorial(15) == 1307674368000\n    '''\n    fac = 1\n    for i in range(1, n + 1):\n        fac *= i\n    return fac\nprint(factorial(5))\nprint(factorial(10))\nprint(factorial(15))\n# %%\ndef palindrome_sentence(text):\n    '''\n    Determine if the given sentence is a palindrome. A palindrome sentence is a sentence\n    that reads the same forwards and backwards.\n    Example:\n    palindrome_sentence('Madam, I\\'m Adam.') == True\n    palindrome_sentence('I don\\'t even know') == False\n    palindrome_sentence('Was it a car or a cat I saw?') == True\n    palindrome_sentence('Mr. Owl ate my metal worm') == False\n    '''\n    text = text.lower()\n    text = text.replace(' ', '')\n    text = text.replace(',', '')\n    text = text.replace('?', '')\n    text = text.replace('.', '')\n    text = text.replace('!', '')\n    \n    return text == text[::-1]\nprint(palindrome_sentence('Madam, I\\'m Adam.'))\nprint(palindrome_sentence('I don\\'t even know'))\nprint(palindrome_sentence('Was it a car or a cat I saw?'))\nprint(palindrome_sentence('Mr. Owl ate my metal worm'))\n# %%\ndef transpose_matrix(matrix):\n    '''\n    Given a matrix of integers, return a new matrix where the columns and rows have been transposed.\n    Example:\n    transpose_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]) == [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n    transpose_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]) == [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n    '''\n    rows = len(matrix)\n    columns = len(matrix[0])\n    transpose = []\n    for i in range(columns):\n        row = []\n        for j in range(rows):\n            row.append(matrix[j][i])\n        transpose.append(row)\n    return transpose\n\nprint(transpose_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]))\nprint(transpose_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]))\n# %%\ndef is_prime(n):\n    '''\n    Determine if the given number is prime. A prime number is a positive integer \n    that has exactly two distinct divisors, the number itself and one.\n    Example:\n    is_prime(17) == True\n    is_prime(22) == False\n    is_prime(23) == True\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_prime(17))\nprint(is_prime(22))\nprint(is_prime(23))\n# %%\ndef nth_prime(n):\n    '''\n    Find the nth prime number. A prime number is a positive integer that has exactly two distinct divisors, \n    the number itself and one. The first few prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29.\n    Example:\n    nth_prime(1) == 2\n    nth_prime(2) == 3\n    nth_prime(3) == 5\n    nth_prime(4) == 7\n    nth_prime(5) == 11\n    nth_prime(6) == 13\n    nth_prime(7) == 17\n    nth_prime(8) == 19\n    nth_prime(9) == 23\n    nth_prime(10) == 29\n    '''\n    count = 0\n    for i in range(2, 1000):\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return"}
{"task_id": "HumanEval/72", "completion": ""}
{"task_id": "HumanEval/73", "completion": "# Write your code here\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            arr[right] = arr[left]\n            count += 1\n            right -= 1\n    return count\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            arr[right] = arr[left]\n            count += 1\n            right -= 1\n    return count\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            arr[right] = arr[left]\n            count += 1\n            right -= 1\n    return count\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            arr[right] = arr[left]\n            count"}
{"task_id": "HumanEval/74", "completion": "if lst1 == [] and lst2 != []:\n        return lst2\n    elif lst1 != [] and lst2 == []:\n        return lst1\n    elif lst1 != [] and lst2 != [] and lst1[0] == lst2[0]:\n        lst1.pop(0)\n        lst2.pop(0)\n        return total_match(lst1, lst2)\n    else:\n        return lst1\n    \nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'Hi']\nlst3 = ['hi', 'admin', 'project']\nlst4 = ['hi', 'admin', 'hi', 'admin']\nlst5 = ['4']\nlst6 = ['1', '2', '3', '4', '5']\nprint(total_match(lst1, lst2))\nprint(total_match(lst3, lst4))\nprint(total_match(lst5, lst6))\nprint(total_match([], []))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\n\n\n\ndef lst_num(lst):\n    '''\n    Write a function that takes in a list of integers or floats and returns a list \n    of the numbers sorted in ascending order and a list of the negative numbers in \n    the list.\n\n    Examples\n    lst_num([5, 7, 8, 1, 2, 2, -1, 10, -5, -6, 7, -4, -3, 4, 1, 1, 2]) \u279e [[1, 2, 2], [-1, -3, -4, -6, -5], [5, 7, 8, 1, 2, 10, 7, 8, 1, 2]]\n    lst_num([4, 6, 3, -5, 6, -3, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]) \u279e [[3, 6, 6], [-5, -3, -3, -5, -6], [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n    lst_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) \u279e [[], [], []]\n    lst_num([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) \u279e [[], [], []]\n    lst_num([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1]) \u279e [[], [], []]\n    '''\n    \n    lst_pos = []\n    lst_neg = []\n    lst_sorted = []\n    \n    for i in lst:\n        if i > 0:\n            lst_pos.append(i)\n        else:\n            lst_neg.append(i)\n    lst_sorted.append(lst_pos)\n    lst_sorted.append(lst_neg)\n    \n    return lst_sorted\n        \nlst = [5, 7, 8, 1, 2, 2, -1, 10, -5, -6, 7, -4, -3, 4, 1, 1, 2]\nprint(lst_num(lst))\n\nlst = [4, 6, 3, -5, 6, -3, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]\nprint(lst_num(lst))\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nprint(lst_num(lst))\n\nlst = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(lst_num(lst))\n\nlst = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1]\nprint(lst_num(lst))\n\n\n\ndef lst_to_tup(lst):\n    '''\n    Write a function that takes in a list of strings and returns a tuple of all the strings in the list that are less than \n    the longest string in the list.\n\n    Examples\n    lst_to_tup([\"code\", \"bug\", \"baby\", \"bugger\", \"babybug\"]) \u279e (\"bug\", \"bugger\")\n    lst_to_tup([\"code\", \"bug\", \"babybug\", \"bugger\", \"baby\", \"bug\", \"bugger\", \"bugger\", \"bug\"]) \u279e (\"bug\", \"bugger\")\n    lst_to_tup([\"code\", \"bug\", \"babybug\", \"bugger\", \"bug\", \"bug\"]) \u279e (\"bug\", \"bug\", \"bug\")\n    lst_to_tup([\"code\", \"bug\", \"bug\", \"baby\", \"bug\", \"baby\", \"bug\", \"bugger\"]) \u279e (\"bug\", \"bug\", \"bug\", \"bug\")\n    lst_to_tup([\"code\", \"bug\", \"babybug\", \"bugger\", \"bug\", \"bug\"]) \u279e (\"bug\", \"bug\", \"bug\")\n    '''\n    \n    longest = max(lst, key=len)\n    tup_longest = ()\n    tup_longest = tup_longest + (longest,)\n    \n    for i in lst:\n        if len(longest) == len(i):\n            tup_longest = tup_longest + (i,)\n            \n    tup_longest = tup_longest + tuple(tup_longest)\n    tup_longest = tup_longest + tuple(tup_longest)\n    tup_longest = tup_longest + tuple(tup_longest)\n    \n    return tup_longest\n        \nlst = [\"code\", \"bug\", \"baby\", \"bugger\", \"babybug\"]\nprint(lst_to_tup(lst))\n\nlst = [\"code\", \"bug\", \"babybug\", \"bugger\", \"baby\", \"bug\", \"bugger\", \"bugger\", \"bug\"]\nprint(lst_to_tup(lst))\n\nlst = [\"code\", \"bug\", \"babybug\", \"bugger\", \"bug\", \"bug\"]\nprint(lst_to_tup(lst))\n\nlst = [\"code\", \"bug\", \"babybug\", \"bugger\", \"bug\", \"bug\""}
{"task_id": "HumanEval/75", "completion": "\"your code goes here\"\n    for i in range(2,a):\n        if a % i == 0 and is_prime(i):\n            return False\n    return True\n    \n    \ndef is_prime(a):\n    \"\"\" Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime(2) == True\n    \"\"\"\n    \"your code goes here\"\n    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n    \n    \ndef sum_of_primes(n):\n    \"\"\"Write a function that returns sum of all prime numbers from 1 to n (n is given).\n    Example:\n    sum_of_primes(10) == 17\n    \"\"\"\n    \"your code goes here\"\n    s=0\n    for i in range(1,n+1):\n        if is_prime(i):\n            s=s+i\n    return s\n    \ndef sum_of_primes_2(n):\n    \"\"\"Write a function that returns sum of all prime numbers from 1 to n (n is given).\n    Example:\n    sum_of_primes_2(10) == 17\n    \"\"\"\n    \"your code goes here\"\n    s=0\n    for i in range(2,n+1):\n        if is_multiply_prime(i):\n            s=s+i\n    return s\n    \n    \ndef is_fibonacci(a):\n    \"\"\"Write a function that returns true if the given number is Fibonacci and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_fibonacci(7) == True\n    \"\"\"\n    \"your code goes here\"\n    f1=0\n    f2=1\n    while f2 < a:\n        temp=f2\n        f2=f2+f1\n        f1=temp\n    return f2==a\n    \ndef is_fibonnaci_2(n):\n    \"\"\"Write a function that returns true if the given number is Fibonacci and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_fibonacci(7) == True\n    \"\"\"\n    \"your code goes here\"\n    f1=0\n    f2=1\n    while f2 < n:\n        temp=f2\n        f2=f2+f1\n        f1=temp\n    return f2==n\n    \n    \ndef is_fibonacci_3(n):\n    \"\"\"Write a function that returns true if the given number is Fibonacci and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_fibonacci(7) == True\n    \"\"\"\n    \"your code goes here\"\n    f1=0\n    f2=1\n    while f2 < n:\n        temp=f2\n        f2=f2+f1\n        f1=temp\n    return f2==n\n    \n    \n    \ndef fibonnaci_sequence(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    l=[]\n    f1=0\n    f2=1\n    while f2 < n:\n        l.append(f2)\n        temp=f2\n        f2=f2+f1\n        f1=temp\n    return l\n    \n    \n    \n    \ndef fibonacci_sequence_2(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci_sequence_2(n-1) + fibonacci_sequence_2(n-2)\n    \n    \n    \n    \ndef fibonacci_sequence_3(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonnaci_sequence_3(n-1) + fibonnaci_sequence_3(n-2)\n    \n    \n    \n    \ndef fibonacci_sequence_4(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci_sequence_4(n-1) + fibonacci_sequence_4(n-2)\n    \n    \n    \n    \ndef fibonacci_sequence_5(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci_sequence_5(n-1) + fibonacci_sequence_5(n-2)\n    \n    \n    \n    \ndef fibonacci_sequence_6(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci_sequence_6(n-1) + fibonacci_sequence_6(n-2)\n    \n    \n    \n    \ndef fibonacci_sequence_7(n):\n    \"\"\"Write a function that returns fibonnaci sequence from 1 to n (n is given).\n    Example:\n    fibonnaci_sequence(10) == [1,1,2,3,5,8,13,21,34,55]\n    \"\"\"\n    \"your code goes here\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci_sequence_7(n-1)"}
{"task_id": "HumanEval/76", "completion": "return n**int(n)==x\ndef get_sum(string):\n    \"\"\"Your task is to return a sum of all integers in a string.\n    For example, for the string \"1\"  an answer will be 1.\n    For the string \"25\" a return value of 25\n    For the string \"abc\" return 0\n    For the string \"My numbers are #2, #24, 10\" return 39.\n    Negative numbers are not considered:\n    For the string \"All negative numbers #1, #-2, #-5 return -11\"\n    \"\"\"\n    sum_of_int=0\n    for i in range(len(string)):\n        if string[i].isdigit():\n            sum_of_int=sum_of_int+int(string[i])\n    return sum_of_int\ndef get_count(string):\n    \"\"\"Your team is writing a fancy new text editor and you've been tasked with\n    implementing the auto-completion feature.\n    Completing the get_count function returns the number of times that you should\n    press the BACKSPACE key on your keyboard.\n    Example:\n    Backspace: \"abc\"    =>  \"ab\"    =>  \"a\"\n    Backspace: \"abc\" + BACKSPACE  =>  \"ab\"   =>  \"\" (zero backspaces)\n    Backspace: \"abc\" + BACKSPACE + BACKSPACE  => \"a\"  => \"\" (zero more backspaces)\n    \"\"\"\n    sum_of_backspace=0\n    for i in range(len(string)-1,-1,-1):\n        if string[i]==\"#\":\n            sum_of_backspace=sum_of_backspace+1\n        else:\n            break\n    return sum_of_backspace\ndef is_prime(n):\n    \"\"\"\n    Check if the number is prime\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\ndef find_missing_letter(chars):\n    \"\"\"\n    Find the missing letter in the provided array of consecutive\n    capital letters.\n    \"\"\"\n    for i in range(len(chars)):\n        if i==0:\n            continue\n        if ord(chars[i])==ord(chars[i-1])+1:\n            continue\n        else:\n            return chr(ord(chars[i-1])+1)\n    return \"\"\ndef dna_decode(dna):\n    \"\"\"\n    Given a DNA strand, return the complementary (pair) DNA strand\n    \"\"\"\n    dna_list=[]\n    for i in range(len(dna)):\n        if dna[i]==\"A\":\n            dna_list.append(\"T\")\n        elif dna[i]==\"T\":\n            dna_list.append(\"A\")\n        elif dna[i]==\"C\":\n            dna_list.append(\"G\")\n        elif dna[i]==\"G\":\n            dna_list.append(\"C\")\n    return \"\".join(dna_list)\ndef dna_decode(dna):\n    \"\"\"\n    Given a DNA strand, return the complementary (pair) DNA strand\n    \"\"\"\n    dna_list=[]\n    for i in range(len(dna)):\n        if dna[i]==\"A\":\n            dna_list.append(\"T\")\n        elif dna[i]==\"T\":\n            dna_list.append(\"A\")\n        elif dna[i]==\"C\":\n            dna_list.append(\"G\")\n        elif dna[i]==\"G\":\n            dna_list.append(\"C\")\n    return \"\".join(dna_list)\ndef dna_decode(dna):\n    \"\"\"\n    Given a DNA strand, return the complementary (pair) DNA strand\n    \"\"\"\n    dna_list=[]\n    for i in range(len(dna)):\n        if dna[i]==\"A\":\n            dna_list.append(\"T\")\n        elif dna[i]==\"T\":\n            dna_list.append(\"A\")\n        elif dna[i]==\"C\":\n            dna_list.append(\"G\")\n        elif dna[i]==\"G\":\n            dna_list.append(\"C\")\n    return \"\".join(dna_list)\ndef dna_decode(dna):\n    \"\"\"\n    Given a DNA strand, return the complementary (pair) DNA strand\n    \"\"\"\n    dna_list=[]\n    for i in range(len(dna)):\n        if dna[i]"}
{"task_id": "HumanEval/77", "completion": "return a > 0 and ((a ** (1 / 3) - int(a ** (1 / 3))) == 0)"}
{"task_id": "HumanEval/78", "completion": "prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 5"}
{"task_id": "HumanEval/79", "completion": "binary = bin(decimal)[2:]  # Get the binary representation of the decimal number\n    return 'db' + binary + 'db'  # Add the extra characters and return the result\n\n    return decimal  # Return the decimal number as is, no changes needed\n\n# Test Cases\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\"\nprint(decimal_to_binary(56))  # Output: \"db111000db\"\nprint(decimal_to_binary(256))  # Output: \"db1000000000db\"\nprint(decimal_to_binary(0))  # Output: \"db0db\"\nprint(decimal_to_binary(1))  # Output: \"db1db\"\nprint(decimal_to_binary(99))  # Output: \"db1000000001db\"\nprint(decimal_to_binary(1024))  # Output: \"db1000000000000db\"\nprint(decimal_to_binary(63))  # Output: \"db11111db\"\nprint(decimal_to_binary(999))  # Output: \"db11111000001db\"\nprint(decimal_to_binary(1000))  # Output: \"db1000000000000db\"\nprint(decimal_to_binary(1000000))  # Output: \"db10000000000000000000db\"\nprint(decimal_to_binary(10000000))  # Output: \"db100000000000000000000db\"\nprint(decimal_to_binary(100000000))  # Output: \"db1000000000000000000000db\"\nprint(decimal_to_binary(1000000000))  # Output: \"db10000000000000000000000db\"\nprint(decimal_to_binary(10000000000))  # Output: \"db100000000000000000000000db\"\nprint(decimal_to_binary(100000000000))  # Output: \"db1000000000000000000000000db\"\nprint(decimal_to_binary(1000000000000))  # Output: \"db10000000000000000000000000db\"\nprint(decimal_to_binary(10000000000000))  # Output: \"db100000000000000000000000000db\"\nprint(decimal_to_binary(100000000000000))  # Output: \"db1000000000000000000000000000db\"\nprint(decimal_to_binary(1000000000000000))  # Output: \"db10000000000000000000000000000db\"\nprint(decimal_to_binary(10000000000000000))  # Output: \"db100000000000000000000000000000db\"\nprint(decimal_to_binary(100000000000000000))  # Output: \"db1000000000000000000000000000000db\"\nprint(decimal_to_binary(1000000000000000000))  # Output: \"db10000000000000000000000000000000db\"\nprint(decimal_to_binary(10000000000000000000))  # Output: \"db10000000000000000000000000000000"}
{"task_id": "HumanEval/80", "completion": "for i in range(0, len(s) - 2):\n        if s[i + 1] == s[i] or s[i + 2] == s[i]:\n            return False\n    return True\n\ndef get_next_letter(letter):\n    \"\"\"\n    Given a lowercase letter, return the next letter in the alphabet, skipping \"y\" and wrapping around to \"a\".\n    For example:\n    get_next_letter(a) => b\n    get_next_letter(b) => c\n    get_next_letter(z) => a\n    get_next_letter(y) => a\n    \"\"\"\n    if letter == \"z\":\n        return \"a\"\n    return chr(ord(letter) + 1)\n\n\ndef get_next_vowel(letter):\n    \"\"\"Given a lowercase letter, return the next vowel in the alphabet.\n    For example:\n    get_next_vowel(b) => c\n    get_next_vowel(c) => d\n    get_next_vowel(a) => e\n    get_next_vowel(e) => f\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_index = vowels.index(letter)\n    vowel_index += 1\n    vowel_index %= 5\n    return vowels[vowel_index]\n\n\ndef get_next_consonant(letter):\n    \"\"\"Given a lowercase letter, return the next consonant (not a vowel) in the alphabet.\n    For example:\n    get_next_consonant(b) => d\n    get_next_consonant(d) => f\n    get_next_consonant(z) => b\n    get_next_consonant(y) => b\n    \"\"\"\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    consonant_index = consonants.index(letter)\n    consonant_index += 1\n    consonant_index %= 20\n    return consonants[consonant_index]\n\n\ndef get_next_prime(num):\n    \"\"\"Given an integer num, return the next prime number after num.\n    For example:\n    get_next_prime(1) => 2\n    get_next_prime(5) => 7\n    get_next_prime(13) => 17\n    \"\"\"\n    num += 1\n    while True:\n        if is_prime(num):\n            return num\n        num += 1\n\n\ndef is_prime(num):\n    \"\"\"Returns True if num is prime, False otherwise.\n    For example:\n    is_prime(1) => False\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => False\n    is_prime(10) => False\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(13) => True\n    is_prime(14) => False\n    is_prime(15) => False\n    is_prime(16) => False\n    is_prime(17) => True\n    is_prime(18) => False\n    is_prime(19) => True\n    is_prime(20) => False\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_sorted(lst):\n    \"\"\"Returns True if lst is sorted in ascending order, False otherwise.\n    For example:\n    is_sorted([1, 2, 3]) => True\n    is_sorted([1, 2, 1]) => False\n    is_sorted([1, 3, 2]) => False\n    is_sorted([1, 2, 3, 2, 1]) => False\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i - 1] > lst[i]:\n            return False\n    return True\n\n\ndef is_descending(lst):\n    \"\"\"Returns True if lst is sorted in descending order, False otherwise.\n    For example:\n    is_descending([1, 2, 3]) => False\n    is_descending([1, 2, 1]) => False\n    is_descending([1, 3, 2]) => True\n    is_descending([1, 2, 3, 2, 1]) => False\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i - 1] < lst[i]:\n            return False\n    return True\n\n\ndef is_ascending(lst):\n    \"\"\"Returns True if lst is sorted in ascending order, False otherwise.\n    For example:\n    is_ascending([1, 2, 3]) => True\n    is_ascending([1, 2, 1]) => False\n    is_ascending([1, 3, 2]) => False\n    is_ascending([1, 2, 3, 2, 1]) => False\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i - 1] > lst[i]:\n            return False\n    return True\n\n\ndef get_longest_run(lst):\n    \"\"\"Returns the length of the longest run of identical values in lst.\n    For example:\n    get_longest_run([1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3]) => 2\n    get_longest_run([1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3]) => 3\n    get_longest_run([1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3]) => 3\n    \"\"\"\n    longest_run = 1\n    curr_run = 1\n    for i in range(1, len(lst)):\n        if lst[i - 1] == l"}
{"task_id": "HumanEval/81", "completion": "def grade_equation(grades):\n        grades_to_letters = {\n            4.0: 'A+',\n            3.7: 'A',\n            3.3: 'A-',\n            3.0: 'B+',\n            2.7: 'B',\n            2.3: 'B-',\n            2.0: 'C+',\n            1.7: 'C',\n            1.3: 'C-',\n            1.0: 'D+',\n            0.7: 'D',\n            0.0: 'D-'\n        }\n        \n        grades_letters = []\n        \n        for grade in grades:\n            letter_grade = grades_to_letters.get(grade, 'Invalid Grade')\n            grades_letters.append(letter_grade)\n        \n        return grades_letters\n    \n    letter_grade_list = grade_equation(grades)\n    return letter_grade_list\n\ndef test_grade_equation():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    expected_grades = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    result = grade_equation(grades)\n    assert result == expected_grades, f\"Test failed. Expected: {expected_grades}, Actual: {result}\"\n    print(\"Test passed!\")\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    def grade_equation(grades):\n        grades_to_letters = {\n            4.0: 'A+',\n            3.7: 'A',\n            3.3: 'A-',\n            3.0: 'B+',\n            2.7: 'B',\n            2.3: 'B-',\n            2.0: 'C+',\n            1.7: 'C',\n            1.3: 'C-',\n            1.0: 'D+',\n            0.7: 'D',\n            0.0: 'D-'\n        }\n        \n        grades_letters = []\n        \n        for grade in grades:\n            letter_grade = grades_to_letters.get(grade, 'Invalid Grade')\n            grades_letters.append(letter_grade)\n        \n        return grades_letters\n    \n    letter_grade_list = grade_equation(grades)\n    return letter_grade_list\n\n\ndef test_grade_equation():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    expected_grades = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    result = grade_equation(grades)\n    assert result == expected_grades, f\"Test failed. Expected: {expected_grades}, Actual: {result}\"\n    print(\"Test passed!\""}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n        \"\"\"Helper function to determine whether a number is prime\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    string_length = len(string)\n    return is_prime(string_length)\n\n\ndef is_prime(n):\n    \"\"\"Helper function to determine whether a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    return is_prime(string_length)\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    return is_prime(string_length)\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    return is_prime(string_length)\n\ndef is_prime(n):\n    \"\"\"Helper function to determine whether a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    return is_prime(string_length)\n\ndef is_prime(n):\n    \"\"\"Helper function to determine whether a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    return is_prime(string_length)\n\n\ndef is_prime(n):\n    \"\"\"Helper function to determine whether a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    return is_prime(string_length)\n\n\ndef is_prime(n):\n    \"\"\"Helper function to determine whether a number is prime\"\"\"\n    if n"}
{"task_id": "HumanEval/83", "completion": "def starts_or_ends(num):\n        if (num % 10 == 1 or num % 10 == 0):\n            return True\n        else:\n            return False\n        \n    def checker(num):\n        if (num % 10 == 1 or num % 10 == 0):\n            return True\n        if num > 10:\n            if num % 10 == 0 or num % 10 == 1:\n                return False\n            else:\n                return True\n        \n    def recursive(num, num_list):\n        num = num - 1\n        if num == 0:\n            if starts_or_ends(num_list[0]):\n                return num_list\n            else:\n                return []\n        else:\n            num_list.append(num_list[0] * 10 + 1)\n            num_list.append(num_list[0] * 10 + 0)\n            num_list = recursive(num, num_list)\n            return num_list\n        \n    count = 0\n    for i in range(1, n+1):\n        num_list = [1]\n        num_list = recursive(i, num_list)\n        for num in num_list:\n            if checker(num):\n                count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "# Write your code here.\n    \n    return bin(N)[2:]"}
{"task_id": "HumanEval/85", "completion": "return sum(lst[::2]) \n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7])"}
{"task_id": "HumanEval/86", "completion": "result = ''\n    for word in s.split(' '):\n        result += ''.join(sorted(word)) + ' '\n    return result.rstrip()\n    \nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))\nprint(anti_shuffle('Hello World  !!!'))\nprint(anti_shuffle('Hello World  !!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\"!!!\""}
{"task_id": "HumanEval/87", "completion": "return [(lst.index(lst[i]), i) for i,v in enumerate(lst) if x in v]"}
{"task_id": "HumanEval/88", "completion": "result = []\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i + j == len(array) - 1:\n                if (i + j) % 2 == 0:\n                    result.append(array[j])\n                    result.append(array[i])\n                else:\n                    result.insert(0, array[j])\n                    result.insert(0, array[i])\n    return result\n\n\ndef merge_sorted_arrays(arrays):\n    \"\"\"\n    Given multiple sorted arrays, return a new merged and sorted array of all the items in all the given arrays.\n    The arrays can have different lengths.\n\n    Examples:\n    * merge_sorted_arrays([]) => []\n    * merge_sorted_arrays([]) => []\n    * merge_sorted_arrays([[], [], []]) => []\n    * merge_sorted_arrays([[1, 2, 3]]) => [1, 2, 3]\n    * merge_sorted_arrays([[1, 2, 3], [4, 5, 6]]) => [1, 2, 3, 4, 5, 6]\n    * merge_sorted_arrays([[3, 5, 10], [2, 6], [1, 8, 9]]) => [1, 2, 3, 5, 6, 8, 9, 10]\n    \"\"\"\n    if arrays == [[]]:\n        return []\n    elif len(arrays) == 0:\n        return []\n    elif len(arrays) == 1:\n        return arrays[0]\n    else:\n        merged_arrays = []\n        for i in range(len(arrays)):\n            merged_arrays.extend(arrays[i])\n        merged_arrays.sort()\n        return merged_arrays\n\ndef is_palindrome(string):\n    \"\"\"\n    Given a string, return True if the string is a palindrome, False otherwise.\n\n    Note:\n    * ignore whitespace, punctuation, case sensitivity.\n\n    Examples:\n    * is_palindrome('') => True\n    * is_palindrome('foo') => False\n    * is_palindrome('racecar') => True\n    * is_palindrome('Able was I ere I saw Elba') => True\n    \"\"\"\n    string = string.replace(\" \", \"\")\n    string = string.replace(\".\", \"\").replace(\",\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    string = string.lower()\n    string_rev = string[::-1]\n    if string == string_rev:\n        return True\n    else:\n        return False\n\ndef rotate_array(array, n=1):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after rotating it n times,\n    where a single rotation consists of moving the last element to the beginning.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * rotate_array([], n=1) => []\n    * rotate_array([1], n=1) => [1]\n    * rotate_array([1, 2, 3], n=1) => [3, 1, 2]\n    * rotate_array([1, 2, 3], n=3) => [1, 2, 3]\n    \"\"\"\n    rotated_array = []\n    for i in range(len(array)):\n        rotated_array.append(array[-1])\n        array.remove(array[-1])\n    return rotated_array\n\ndef longest_common_prefix(strings):\n    \"\"\"\n    Given an array of strings, return the longest common prefix of all the given strings.\n    If there is none, return ''.\n\n    Note:\n    * if a string is empty, return an empty string ''.\n\n    Examples:\n    * longest_common_prefix(['a', 'b', 'c']) => ''\n    * longest_common_prefix(['abcdef', 'abcdef', 'abcdef', 'abcdef']) => 'abcdef'\n    \"\"\"\n    if len(strings) == 0:\n        return ''\n    prefix = []\n    for i in range(len(strings[0])):\n        prefix_temp = []\n        for j in range(len(strings)):\n            prefix_temp.append(strings[j][i])\n        if len(set(prefix_temp)) == 1:\n            prefix.append(prefix_temp[0])\n        else:\n            return ''.join(prefix)\n    return ''.join(prefix)\n\ndef fibonacci(n, memo={}):\n    \"\"\"\n    Given a posit"}
{"task_id": "HumanEval/89", "completion": "d={'a': 'z', 'b': 'y', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't', 'h': 's', 'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o', 'm': 'n', 'n': 'm', 'o': 'l', 'p': 'k', 'q': 'j', 'r': 'i', 's': 'h', 't': 'g', 'u': 'f', 'v': 'e', 'w': 'd', 'x': 'c', 'y': 'b', 'z': 'a'}\n    s2=''\n    for i in s:\n        s2=s2+d[i]\n    return s2\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d={'z': 'a', 'y': 'b', 'x': 'c', 'w': 'd', 'v': 'e', 'u': 'f', 't': 'g', 's': 'h', 'r': 'i', 'q': 'j', 'p': 'k', 'o': 'l', 'n': 'm', 'm': 'n', 'l': 'o', 'k': 'p', 'j': 'q', 'i': 'r', 'h': 's', 'g': 't', 'f': 'u', 'e': 'v', 'd': 'w', 'c': 'x', 'b': 'y', 'a': 'z'}\n    s2=''\n    for i in s:\n        s2=s2+d[i]\n    return s2\n\ndef encrypt_vigenere(s,k):\n    \"\"\"Create a function encrypt_vigenere that takes a string s and \n    a string k and returns a string encrypted with the alphabet being rotated \n    by k. The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt_vigenere('hi', 'asdfghjkl') returns 'lm'\n    encrypt_vigenere('asdfghjkl', 'asdfghjkl') returns 'asdfghjkl'\n    encrypt_vigenere('gf', 'asdfghjkl') returns 'kj'\n    encrypt_vigenere('et', 'asdfghjkl') returns 'ix'\n    \"\"\"\n    d={'a': 'z', 'b': 'y', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't', 'h': 's', 'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o', 'm': 'n', 'n': 'm', 'o': 'l', 'p': 'k', 'q': 'j', 'r': 'i', 's': 'h', 't': 'g', 'u': 'f', 'v': 'e', 'w': 'd', 'x': 'c', 'y': 'b', 'z': 'a'}\n    s2=''\n    for i in range(len(s)):\n        if s[i] in d.keys():\n            s2=s2+d[s[i]]\n        else:\n            s2=s2+s[i]\n    return s2\n\ndef decrypt_vigenere(s,k):\n    \"\"\"Create a function decrypt_vigenere that takes a string s and \n    a string k and returns a string encrypted with the alphabet being rotated \n    by k. The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt_vigenere('hi', 'asdfghjkl') returns 'lm'\n    encrypt_vigenere('asdfghjkl', 'asdfghjkl') returns 'asdfghjkl'\n    encrypt_vigenere('gf', 'asdfghjkl') returns 'kj'\n    encrypt_vigenere('et', 'asdfghjkl') returns 'ix'\n    \"\"\"\n    d={'z': 'a', 'y': 'b', 'x': 'c', 'w': 'd', 'v': 'e', 'u': 'f', 't': 'g', 's': 'h', 'r': 'i', 'q': 'j', 'p': 'k', 'o': 'l', 'n': 'm', 'm': 'n', 'l': 'o', 'k': 'p', 'j': 'q', 'i': 'r', 'h': 's', 'g': 't', 'f': 'u', 'e': 'v', 'd': 'w', 'c': 'x', 'b': 'y', 'a': 'z'}\n    s2=''\n    for i in range(len(s)):\n        if s[i] in d.keys():\n            s2=s2+d[s[i]]\n        else:\n            s2=s2+s[i]\n    return s2\n\ndef encrypt_caesar(s):\n    \"\"\"Create a function encrypt_caesar that takes a string s and returns\n    a string encrypted with the alphabet being rotated in a manner such \n    that the letters are shifted down by two multiplied to two places.\n    For example:\n    encrypt_caesar('hi') returns 'lm'\n    encrypt_caesar('asdfghjkl') returns 'ewhjklnop'\n    encrypt_caesar('gf') returns 'kj'\n    encrypt_caesar('et') returns 'ix'\n    \"\"\"\n    d={'a': 'z', 'b': 'y', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't', 'h': 's', 'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o', 'm': 'n', 'n': 'm', 'o': 'l', 'p': 'k', 'q': 'j', 'r': 'i', 's': 'h', 't'"}
{"task_id": "HumanEval/90", "completion": "lst = sorted(lst)\n    \n    try:\n        return lst[1]\n    except IndexError:\n        return None\n    \nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n    \n    \ndef sum_of_digits(number):\n    \"\"\"\n    You are given a number. Write a function sum_of_digits() that returns the sum of the digits of this number.\n    \n    sum_of_digits(123) == 6\n    sum_of_digits(333) == 9\n    \"\"\"\n    \n    s = sum(map(int, str(number)))\n    \n    return s\n    \nprint(sum_of_digits(123))\nprint(sum_of_digits(333))\n    \ndef factorial(n):\n    \"\"\"\n    You are given a number. Write a function factorial() that returns its factorial.\n    \n    factorial(5) == 120\n    factorial(10) == 3628800\n    factorial(1) == 1\n    \"\"\"\n    \n    s = 1\n    \n    for i in range(1, n + 1):\n        s *= i\n    \n    return s\n\nprint(factorial(5))\nprint(factorial(10))\nprint(factorial(1))\n    \ndef fibonacci(n):\n    \"\"\"\n    You are given a number. Write a function fibonacci() that returns its nth Fibonacci number.\n    \n    fibonacci(1) == 1\n    fibonacci(2) == 1\n    fibonacci(3) == 2\n    fibonacci(4) == 3\n    fibonacci(10) == 55\n    \"\"\"\n    \n    if n == 1 or n == 2:\n        return 1\n    \n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(1))\nprint(fibonacci(2))\nprint(fibonacci(3))\nprint(fibonacci(4))\nprint(fibonacci(10))\n    \ndef nth_prime(n):\n    \"\"\"\n    You are given a number. Write a function nth_prime() that returns nth prime number.\n    \n    nth_prime(1) == 2\n    nth_prime(2) == 3\n    nth_prime(3) == 5\n    nth_prime(10) == 29\n    \"\"\"\n    \n    lst = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    if n > len(lst):\n        raise ValueError('Input number n is too big!')\n    \n    return lst[n - 1]\n\nprint(nth_prime(1))\nprint(nth_prime(2))\nprint(nth_prime(3))\nprint(nth_prime(10))\n    \ndef nth_fib(n):\n    \"\"\"\n    You are given a number. Write a function nth_fib() that returns nth Fibonacci number.\n    \n    nth_fib(1) == 1\n    nth_fib(2) == 1\n    nth_fib(3) == 2\n    nth_fib(10) == 55\n    \"\"\"\n    \n    lst = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n    \n    if n > len(lst):\n        raise ValueError('Input number n is too big!')\n    \n    return lst[n - 1]\n\nprint(nth_fib(1))\nprint(nth_fib(2))\nprint(nth_fib(3))\nprint(nth_fib(10))\n    \ndef nth_fib_recursive(n):\n    \"\"\"\n    You are given a number. Write a function nth_fib_recursive() that returns nth Fibonacci number.\n    \n    nth_fib_recursive(1) == 1\n    nth_fib_recursive(2) == 1\n    nth_fib_recursive(3) == 2\n    nth_fib_recursive(10) == 55\n    \"\"\"\n    \n    if n == 1 or n == 2:\n        return 1\n    \n    return nth_fib_recursive(n - 1) + nth_fib_recursive(n - 2)\n\nprint(nth_fib_recursive(1))\nprint(nth_fib_recursive(2))\nprint(nth_fib_recursive(3))\nprint(nth_fib_recursive(10))\n    \ndef nth_fib_recursive2(n):\n    \"\"\"\n    You are given a number. Write a function nth_fib_recursive2() that returns nth Fibonacci number.\n    \n    nth_fib_recursive2(1) == 1\n    nth_fib_recursive2(2) == 1\n    nth_fib_recursive2(3) == 2\n    nth_fib_recursive2(10) == 55\n    \"\"\"\n    \n    if n == 1 or n == 2:\n        return 1\n    \n    if n - 1 > len(lst):\n        lst.extend("}
{"task_id": "HumanEval/91", "completion": "bore"}
{"task_id": "HumanEval/92", "completion": "return (z+y==x) or (x+y==z) or (y+z==x)\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    return (z+y==x) or (x+y==z) or (y+z==x) or (x==int(x)) or (y==int(y)) or (z==int(z))\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int('5', 2, 7))\n\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples"}
{"task_id": "HumanEval/93", "completion": "vowels = 'aeiou'"}
{"task_id": "HumanEval/94", "completion": "sum = 0\n    def prime(n):\n        if n==2:\n            return True\n        else:\n            for x in range(2,n//2):\n                if n%x==0:\n                    return False\n            return True\n    \n    for x in lst:\n        if prime(x):\n            sum += x\n    return sum\n#     lst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\n#     lst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\n#     lst = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\n#     lst = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\n#     lst = [0, 81, 12, 3, 1, 21]\n#     lst = [0, 8, 1, 2, 1, 7]\n\n    \nprint(skjkasdkd(lst=[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\n\ndef kdkdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    def prime(n):\n        if n==2:\n            return True\n        else:\n            for x in range(2,n//2):\n                if n%x==0:\n                    return False\n            return True\n    \n    def sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \n    lst = lst.copy()\n    lst.sort(reverse=True)\n    lst_prime = []\n    for x in lst:\n        if prime(x):\n            lst_prime.append(x)\n    lst_prime.sort()\n    return lst_prime\n    \n    \n\nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef summ(lst):\n    \n    def prime(n):\n        if n==2:\n            return True\n        else:\n            for x in range(2,n//2):\n                if n%x==0:\n                    return False\n            return True\n    \n    def sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \n    lst = lst.copy()\n    lst.sort(reverse=True)\n    lst_prime = []\n    for x in lst:\n        if prime(x):\n            lst_prime.append(x)\n    lst_prime.sort()\n    return lst_prime\n\n    \n    \ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n\n    \n    \n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef prime(n):\n    if n==2:\n        return True\n    else:\n        for x in range(2,n//2):\n            if n%x==0:\n                return False\n        return True\n    \ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(sum_of_digits(lst))\n\ndef sum_of_digits(n):\n        s = 0\n        while n:\n            s += n%10\n            n //= 10\n        return s\n    \nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]"}
{"task_id": "HumanEval/95", "completion": "if len(dict) == 0:\n        return False\n    \n    for key in dict:\n        if type(key) != str:\n            return False\n        \n    return True\n\ndef transpose_dict(dict):\n    \"\"\"\n    Transpose a dictionary (switch the key and values).\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\ndef transpose_dict_values(dict):\n    \"\"\"\n    Transpose a dictionary (switch the key and values).\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]] = key\n        \n    return new_dict\n\ndef transpose_dict_values_list(dict, list):\n    \"\"\"\n    Transpose a dictionary (switch the key and values)\n    \"\"\"\n    \n    new_dict = {}\n    for key in dict:\n        new_dict[dict[key]]"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]\n\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes ="}
{"task_id": "HumanEval/97", "completion": "if a < 0:\n        a *= -1\n    if b < 0:\n        b *= -1\n    res = 0\n    while b:\n        if b & 1 == 1:\n            res += a\n        a <<= 1\n        b >>= 1\n    return res\ndef sum_of_cubes(lst):\n    return sum([x**3 for x in lst])\n\ndef summation(lst):\n    if lst:\n        lst.pop(0)\n        return sum(lst)\n    return 0\n\ndef sum_of_cubes(lst):\n    return sum(x**3 for x in lst)\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(x ** 3 for x in lst)\n    \ndef sum_of_cubes(lst):\n    return sum(x ** 3 for x in lst)\n\ndef sum_of_cubes(lst):\n    return sum(x ** 3 for x in lst)\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3, lst))\n\ndef sum_of_cubes(lst):\n    return sum(map(lambda x: x ** 3"}
{"task_id": "HumanEval/98", "completion": "# Define a set of uppercase vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Iterate over the string\n    for i, char in enumerate(s):\n        # Check if the character is an uppercase vowel and has an even index\n        if char.isupper() and i % 2 == 0 and char in vowels:\n            # Increment the count by 1\n            count += 1\n    \n    # Return the final count\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # expected output: 1\nprint(count_upper('abcdefg'))  # expected output: 0\nprint(count_upper('dBBE'))  # expected output: 0\nprint(count_upper('AaBbCc'))  # expected output: 3\nprint(count_upper('AaBbCcDdEeFfGgHh'))  # expected output: 10\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # expected output: 0\nprint(count_upper('aAAbC'))  # exp"}
{"task_id": "HumanEval/99", "completion": "pass\n\n\ndef concatenate_strings(str1, str2):\n    '''\n    Create a function that takes two strings and concatenates them.\n\n    Examples\n    >>> concatenate_strings(\"Hello \", \"World\")\n    \"Hello World\"\n    '''\n    pass\n\n\ndef concatenate_arrays(arr1, arr2):\n    '''\n    Create a function that concatenates all the elements of an array into a\n    single string, separated by a comma and a space \", \".\n\n    Examples\n    >>> concatenate_arrays([\"a\", \"b\", \"c\", \"d\"])\n    \"a, b, c, d\"\n    '''\n    pass\n\n\ndef concatenate_arrays_with_separator(arr1, arr2, separator):\n    '''\n    Create a function that concatenates all the elements of two arrays,\n    separated by the given separator.\n\n    Examples\n    >>> concatenate_arrays_with_separator([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], \"-\")\n    \"a-b-c-d-e-f\"\n    '''\n    pass\n\n\ndef concatenate_arrays_with_separator_and_limit(arr1, arr2, separator, limit):\n    '''\n    Create a function that concatenates all the elements of two arrays,\n    separated by the given separator, and stops concatenating after the given\n    limit.\n\n    Examples\n    >>> concatenate_arrays_with_separator_and_limit([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], \"-\", 2)\n    \"a-b\"\n    '''\n    pass\n\n\ndef concatenate_arrays_with_separator_and_limit_and_separator(arr1, arr2, separator, limit, separator_limit):\n    '''\n    Create a function that concatenates all the elements of two arrays,\n    separated by the given separator, and stops concatenating after the given\n    limit. If the concatenation of the given separator is longer than the given\n    separator_limit, then it should be truncated and the rest of the separator\n    should be removed.\n\n    Examples\n    >>> concatenate_arrays_with_separator_and_limit_and_separator([\"a\", \"b\", \"c\"],"}
{"task_id": "HumanEval/100", "completion": "pile = []\n    for i in range(n):\n        pile.append(i)\n    return pile\n    \n\n\ndef pile_of_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> pile_of_stones(3)\n    [3, 5, 7]\n    >>> pile_of_stones(4)\n    [4, 6, 8, 10]\n    >>> pile_of_stones(5)\n    [5, 7, 9, 11, 13]\n    >>> pile_of_stones(6)\n    [6, 8, 10, 12, 14, 16]\n    >>> pile_of_stones(7)\n    [7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    pile = []\n    for i in range(1, n+1):\n        pile.append(i*2)\n    return pile\n\ndef pile_of_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> pile_of_stones(3)\n    [3, 5, 7]\n    >>> pile_of_stones(4)\n    [4, 6, 8, 10]\n    >>> pile_of_stones(5)\n    [5, 7, 9, 11, 13]\n    >>> pile_of_stones(6)\n    [6, 8, 10, 12, 14, 16]\n    >>> pile_of_stones(7)\n    [7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    pile = []\n    for i in range(1, n+1):\n        pile.append(i*2)\n    return pile\n\ndef pile_of_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> pile_of_stones(3)\n    [3, 5, 7]\n    >>> pile_of_stones(4)\n    [4, 6, 8, 10]\n    >>> pile_of_stones(5)\n    [5, 7, 9, 11, 13]\n    >>> pile_of_stones(6)\n    [6, 8, 10, 12, 14, 16]\n    >>> pile_of_stones(7)\n    [7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    pile = []\n    for i in range(1, n+1):\n        pile.append(i*2)\n    return pile\n\n\ndef pile_of_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> pile_of_stones(3)\n    [3, 5, 7]\n    >>> pile_of_stones(4)\n    [4, 6, 8, 10]\n    >>> pile_of_stones(5)\n    [5, 7, 9, 11, 13]\n    >>> pile_of_stones(6)\n    [6, 8, 10, 12, 14, 16]\n    >>> pile_of_stones(7)\n    [7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    pile = []\n    for i in range(1, n+1):\n        pile.append(i*2)\n    return pile\n\ndef pile_of_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> pile_of_stones(3)\n    [3, 5, 7]\n    >>> pile_of_stones(4)\n    [4, 6, 8, 10]\n    >>> pile_of_stones(5)\n    [5, 7, 9, 11, 13]\n    >>> pile_of_stones(6)\n    [6, 8, 10, 12, 14, 16]\n    >>> pile_of_stones(7)\n    [7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    pile = []\n    for i in range(1, n+1):\n        pile.append(i*2)\n    return pile\n\n\ndef pile_of_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> pile_of_stones(3)\n    [3, 5, 7]\n    >>> pile_of_stones(4)\n    [4, 6, 8, 10]\n    >>> pile_of_stones(5)\n    [5, 7, 9, 11, 13]\n    >>> pile_of_stones(6)\n    [6, 8, 10, 12, 14, 16]\n    >>> pile_of_stones(7)\n    [7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    pile"}
{"task_id": "HumanEval/101", "completion": "return s.split(\", \")\n\nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n\n\ndef create_phone_number(n):\n    \"\"\"\n    Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.\n    \n    create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"(123) 456-7890\"\n    create_phone_number([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == \"(111) 111-1111\"\n    create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"(123) 456-7890\"\n    \"\"\"\n    \n    return \"({}) {}-{}\".format(n[0:3], n[3:6], n[6:10])\n\n\nprint(create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\nprint(create_phone_number([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\nprint(create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n\ndef likes(names):\n    \"\"\"\n    You probably know the \"like\" system from Facebook and other pages. People can \"like\" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.\n\n    Implement a function likes :: [String] -> String, which must take in input array, containing the names of people who like an item. It must return the display text as shown in the examples:\n\n    likes [] // must be \"no one likes this\"\n    likes [\"Peter\"] // must be \"Peter likes this\"\n    likes [\"Jacob\", \"Alex\"] // must be \"Jacob and Alex like this\"\n    likes [\"Max\", \"John\", \"Mark\"] // must be \"Max, John and Mark like this\"\n    likes [\"Alex\", \"Jacob\", \"Mark\", \"Max\"] // must be \"Alex, Jacob and 2 others like this\"\n    \n    \"\"\"\n    \n    if len(names) == 0:\n        return \"no one likes this\"\n    elif len(names) == 1:\n        return \"{} likes this\".format(names[0])\n    elif len(names) == 2:\n        return \"{} and {} like this\".format(names[0], names[1])\n    elif len(names) == 3:\n        return \"{}, {} and {} like this\".format(names[0], names[1], names[2])\n    elif len(names) > 3:\n        return \"{}, {} and {} others like this\".format(names[0], names[1], len(names) - 2)\n    \nprint(likes([]))\nprint(likes([\"Peter\"]))\nprint(likes([\"Jacob\", \"Alex\"]))\nprint(likes([\"Max\", \"John\", \"Mark\"]))\nprint(likes([\"Alex\", \"Jacob\", \"Mark\", \"Max\"]))\n\n\ndef sort_by_extension(arr):\n    \"\"\"\n    Given a list of files. Sort these files by extension.\n    \n    sort_by_extension([\"1.cad\", \"1.bat\", \"1.aa\"]) == [\"1.aa\", \"1.bat\", \"1.cad\"]\n    sort_by_extension([\"1.cad\", \"1.bat\", \"1.aa\", \"2.bat\"]) == [\"1.aa\", \"1.bat\", \"2.bat\", \"1.cad\"]\n    sort_by_extension([\"1.cad\", \"1.bat\", \"1.aa\", \"2.bat\"]) \n    \"\"\"\n    \n    return sorted(arr, key=lambda x: x.split(\".\")[-1])\n\nprint(sort_by_extension([\"1.cad\", \"1.bat\", \"1.aa\"]))\nprint(sort_by_extension([\"1.cad\", \"1.bat\", \"1.aa\", \"2.bat\"]))\nprint(sort_by_extension([\"1.cad\", \"1.bat\", \"1.aa\", \"2.bat\"]))\n\n\ndef get_middle(s):\n    \"\"\"\n    You are going to be given a word. Your job is to return the middle character of the word. If the word's length is odd, return the middle character. If the word's length is even, return the middle 2 characters.\n\n    #Examples:\n\n    Kata.getMiddle(\"test\") should return \"es\"\n\n    Kata.getMiddle(\"testing\") should return \"t\"\n\n    Kata.getMiddle(\"middle\") should return \"dd\"\n\n    Kata.getMiddle(\"A\") should return \"A\"\n    Kata.getMiddle(\"\") should return \"\"\n    \"\"\"\n    \n    return s[(len(s) - 1)//2:(len(s) + 2)//2]\n\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\nprint(get_middle(\"\"))\n\n\ndef make_uppercase(s):\n    \"\"\"\n    You want to get rid of"}
{"task_id": "HumanEval/102", "completion": "for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef is_prime(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\n\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\n\n\ndef is_prime(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\n\n\ndef sum_of_squares(n):\n    \"\"\"This function takes a positive integer n and returns the sum of squares of\n    its digits.\n\n    For example:\n    sum_of_squares(234) = 22\n    sum_of_squares(42) = 16\n    \"\"\"\n    s = 0\n    while n > 0:\n        s += (n % 10) ** 2\n        n //= 10\n    return s\n\n\ndef sum_of_squares(n):\n    \"\"\"This function takes a positive integer n and returns the sum of squares of\n    its digits.\n\n    For example:\n    sum_of_squares(234) = 22\n    sum_of_squares(42) = 16\n    \"\"\"\n    s = 0\n    while n > 0:\n        s += (n % 10) ** 2\n        n //= 10\n    return s\n\n\ndef is_prime(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\n\n\ndef sum_of_squares(n):\n    \"\"\"This function takes a positive integer n and returns the sum of squares of\n    its digits.\n\n    For example:\n    sum_of_squares(234) = 22\n    sum_of_squares(42) = 16\n    \"\"\"\n    s = 0\n    while n > 0:\n        s += (n % 10) ** 2\n        n //= 10\n    return s\n\n\ndef is_prime(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\n\n\ndef sum_of_squares(n):\n    \"\"\"This function takes a positive integer n and returns the sum of squares of\n    its digits.\n\n    For example:\n    sum_of_squares(234) = 22\n    sum_of_squares(42) = 16\n    \"\"\"\n    s = 0\n    while n > 0:\n        s += (n % 10) ** 2\n        n //= 10\n    return s\n\n\ndef is_prime(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\n\n\ndef sum_of_squares(n):\n    \"\"\"This function takes a positive integer n and returns the sum of squares of\n    its digits.\n\n    For example:\n    sum_of_squares(234) = 22\n    sum_of_squares(42) = 16\n    \"\"\"\n    s = 0\n    while n > 0:\n        s += (n % 10) ** 2\n        n //= 10\n    return s\n\n\ndef is_prime(n):\n    \"\"\"This function takes a positive integer n and returns True if n is a prime\n    number. Otherwise, it should return False.\n\n    For example:\n    is_prime(11) = True\n    is_prime(10) = False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef bin_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_bin_avg():\n    assert bin_avg(1, 5) == \"0b11\"\n    assert bin_avg(7, 5) == -1\n    assert bin_avg(10, 20) == \"0b1111\"\n    assert bin_avg(20, 33) == \"0b11010\"\n\n\ndef bin_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_bin_avg_2():\n    assert bin_avg_2(1, 5) == \"0b11\"\n    assert bin_avg_2(7, 5) == -1\n    assert bin_avg_2(10, 20) == \"0b1111\"\n    assert bin_avg_2(20, 33) == \"0b11010\"\n\n\ndef bin_avg_3(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_bin_avg_3():\n    assert bin_avg_3(1, 5) == \"0b11\"\n    assert bin_avg_3(7, 5) == -1\n    assert bin_avg_3(10, 20) == \"0b1111\"\n    assert bin_avg_3(20, 33) == \"0b11010\"\n\n\ndef bin_avg_4(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_bin_avg_4():\n    assert bin_avg_4(1, 5) == \"0b11\"\n    assert bin_avg_4(7, 5) == -1\n    assert bin_avg_4(10, 20) == \"0b1111\"\n    assert bin_avg_4(20, 33) == \"0b11010\"\n\n\ndef bin_avg_5(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_bin_avg_5():\n    assert bin_avg_5(1, 5) == \"0b11\"\n    assert bin_avg_5(7, 5) == -1\n    assert bin_avg_5(10, 20) == \"0b1111\"\n    assert bin_avg_5(20, 33) == \"0b11010\"\n\n\ndef bin_avg_6(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\ndef test_bin_avg_6():\n    assert bin_avg_6(1, 5) == \"0b11\"\n    assert bin_avg_6(7, 5) == -1\n    assert bin_avg_6(10, 20) == \"0b1111\"\n    assert bin_avg_6(20, 33) == \"0b11010\"\n\n\ndef bin_avg_7(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    bin_avg(1, 5) => \"0b11\"\n    bin_avg(7, 5) => -1\n    bin_avg(10, 20) => \"0b1111\"\n    bin_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_bin = bin(int(avg))\n    return avg_bin\n\nde"}
{"task_id": "HumanEval/104", "completion": "digits = set()\n    result = set()\n    for i in x:\n        while i > 0:\n            digit = i % 10\n            if digit % 2 == 0:\n                break\n            digits.add(digit)\n            i = i // 10\n        if i == 0:\n            result.add(i)\n    result.update(digits)\n    return sorted(list(result))\n\ndef test_unique_digits():\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED.\\n\"  \n\ntest_unique_digits()\n\ndef unique_digits_str(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_str([15, 33, 1422, 1])\n    '1, 15, 33'\n    \"\"\"\n    result = ''\n    for i in unique_digits(x):\n        result = result + ', ' + str(i)\n    return result[2:]\n\ndef test_unique_digits_str():\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED.\\n\"  \n\ntest_unique_digits_str()\n\ndef uniquify_str(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_str('aabbcc')\n    'ab'\n    >>> uniquify_str('abcd')\n    'abcd'\n    \"\"\"\n    result = ''\n    seen = set()\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result = result + char\n    return result\n\ndef uniquify_str(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_str('aabbcc')\n    'ab'\n    >>> uniquify_str('abcd')\n    'abcd'\n    \"\"\"\n    seen = set()\n    result = ''\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result = result + char\n    return result\n\ndef uniquify_set(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_set('aabbcc')\n    'ab'\n    >>> uniquify_set('abcd')\n    'abcd'\n    \"\"\"\n    seen = set()\n    result = ''\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result = result + char\n    return result\n\ndef uniquify_lst(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_lst('aabbcc')\n    'ab'\n    >>> uniquify_lst('abcd')\n    'abcd'\n    \"\"\"\n    seen = []\n    result = ''\n    for char in s:\n        if char not in seen:\n            seen.append(char)\n            result = result + char\n    return result\n\ndef uniquify_lst(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_lst('aabbcc')\n    'ab'\n    >>> uniquify_lst('abcd')\n    'abcd'\n    \"\"\"\n    seen = []\n    result = ''\n    for char in s:\n        if char not in seen:\n            seen.append(char)\n            result = result + char\n    return result\n\ndef uniquify_lst(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_lst('aabbcc')\n    'ab'\n    >>> uniquify_lst('abcd')\n    'abcd'\n    \"\"\"\n    seen = []\n    result = ''\n    for char in s:\n        if char not in seen:\n            seen.append(char)\n            result = result + char\n    return result\n\ndef uniquify_lst(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_lst('aabbcc')\n    'ab'\n    >>> uniquify_lst('abcd')\n    'abcd'\n    \"\"\"\n    seen = []\n    result = ''\n    for char in s:\n        if char not in seen:\n            seen.append(char)\n            result = result + char\n    return result\n\ndef uniquify_lst(s):\n    \"\"\"Given a string s, return uniquified version of s.\n\n    For example:\n    >>> uniquify_lst('aabbcc')\n    'ab'\n    >>> uniquify_lst('abcd')\n    'abcd'\n    \"\"\"\n    seen = []\n    result = ''\n    for"}
{"task_id": "HumanEval/105", "completion": "return arr\n\n\ndef test():\n    test_passed = True\n    tests = [\n        [5, 2, 1, 1, 4, 5, 8, 2, 3],\n        [2, 1, 1, 4, 5, 8, 2, 3],\n        [],\n        [1, -1, 55],\n        [100000, 1, 1, 4, 5, 8, 2, 3],\n        [2, 1, 1, 4, 5, 8, 2, 3, 1, 1, 4, 5, 8, 2, 3],\n        [2, 1, 1, 4, 5, 8, 2, 3, 1, 1, 4, 5, 8, 2, 3, 1, 1, 4, 5, 8, 2, 3],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "HumanEval/106", "completion": "def factorial(i):\n        res = 1\n        for j in range(1, i + 1):\n            res *= j\n        return res\n    \n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n    \nprint(f(5))\n\n\ndef f(n):\n    \"\"\"Implement a function f that takes n as a parameter and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\nprint(f(5))\n\n\ndef f(n):\n    \"\"\"Implement a function f that takes n as a parameter and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(i):\n        res = 1\n        for j in range(1, i + 1):\n            res *= j\n        return res\n    \n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\nprint(f(5))\n\n\ndef f(n):\n    \"\"\"Implement a function f that takes n as a parameter and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(i):\n        res = 1\n        for j in range(1, i + 1):\n            res *= j\n        return res\n    \n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\nprint(f(5))\n\n\ndef f(n):\n    \"\"\"Implement a function f that takes n as a parameter and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(i):\n        res = 1\n        for j in range(1, i + 1):\n            res *= j\n        return res\n    \n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\nprint(f(5))\n\n\ndef f(n):\n    \"\"\"Implement a function f that takes n as a parameter and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(i):\n        res = 1\n        for j in range(1, i + 1):\n            res *= j\n        return res\n    \n    res = []\n    for i in range(1, n + 1):\n        if i % 2"}
{"task_id": "HumanEval/107", "completion": "# Write your solution below this line.\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_even_palindrome(i) or is_odd_palindrome(i):\n            if is_even_palindrome(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\ndef is_even_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return a boolean value based on whether num\n    is a palindrome or not.\n    \"\"\"\n    # Write your solution below this line.\n    string_num = str(num)\n    reversed_string_num = string_num[::-1]\n    if string_num == reversed_string_num:\n        return True\n    else:\n        return False\n\n\ndef is_odd_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return a boolean value based on whether num\n    is a palindrome or not.\n    \"\"\"\n    # Write your solution below this line.\n    string_num = str(num)\n    reversed_string_num = string_num[::-1]\n    if string_num == reversed_string_num:\n        return False\n    else:\n        return True\n\n\ndef is_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return a boolean value based on whether num\n    is a palindrome or not.\n    \"\"\"\n    # Write your solution below this line.\n    string_num = str(num)\n    reversed_string_num = string_num[::-1]\n    if string_num == reversed_string_num:\n        return True\n    else:\n        return False\n    \n\ndef is_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return a boolean value based on whether num\n    is a palindrome or not.\n    \"\"\"\n    # Write your solution below this line.\n    string_num = str(num)\n    reversed_string_num = string_num[::-1]\n    if string_num == reversed_string_num:\n        return True\n    else:\n        return False\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your solution below this line.\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_even_palindrome(i) or is_odd_palindrome(i)"}
{"task_id": "HumanEval/108", "completion": "res = 0\n    \n    for num in arr:\n        s = str(num)\n        if len(s) > 1:\n            for i in range(len(s)):\n                if int(s[i]) > 0:\n                    res += 1\n    return res"}
{"task_id": "HumanEval/109", "completion": "# Write your code here\n    def helper(arr):\n        if len(arr) == 0:\n            return True\n        if len(arr) == 1:\n            return True\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    \n    def reverse_arr(arr):\n        new_arr = []\n        for i in range(len(arr)-1, -1, -1):\n            new_arr.append(arr[i])\n        return new_arr\n    \n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    new_arr = []\n    for i in range(len(arr)-1, -1, -1):\n        new_arr.append(arr[i])\n    for i in range(len(arr)):\n        for j in range(0, i+1):\n            temp_arr = new_arr[j:i+1]\n            if helper(temp_arr) == True:\n                return True\n    return False\n    \n    \n    \nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))\nprint(move_one_ball([1]))\nprint(move_one_ball([1, 2, 3, 4, 5]))\nprint(move_one_ball([3, 1, 2, 5, 4]))\nprint(move_one_ball([3, 1, 2, 5, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 2]))\nprint(move_one_ball([3, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]))\nprint(move_one_ball([3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "HumanEval/110", "completion": "for i in range(len(lst2)):\n        for j in range(len(lst1)):\n            if lst2[i] == lst1[j]:\n                lst2[i] = lst1[j]\n                lst1[j] = lst2[i]\n                break\n    lst2 = list(map(lambda x: int(x % 2 == 0), lst2))\n    return lst2 == [0, 0, 0, 0]\n\n\ndef test_exchange():\n    assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == False\n\n\ndef rotate(lst):\n    \"\"\"\n    In this problem, you have to implement a function rotate(lst)\n    which takes a list of numbers as input and returns a new list\n    in which every element has been shifted to the right by one.\n    For example:\n    rotate([1, 2, 3, 4]) => [4, 1, 2, 3]\n    \"\"\"\n    lst2 = lst[:]\n    lst2[-1] = lst[0]\n    for i in range(len(lst) - 1):\n        lst2[i] = lst[i + 1]\n    return lst2\n\n\ndef test_rotate():\n    assert rotate([1, 2, 3, 4]) == [4, 1, 2, 3]\n\n\ndef transpose(lst):\n    \"\"\"\n    In this problem, you have to implement a function transpose(lst)\n    which takes a list of lists as input and returns a new list\n    that is the transpose of lst.\n    For example:\n    transpose([[1, 2, 3], [4, 5, 6]]) => [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst[0])):\n        lst2.append([])\n        for j in range(len(lst)):\n            lst2[i].append(lst[j][i])\n    return lst2\n\n\ndef test_transpose():\n    assert transpose([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]\n\n\ndef transpose2(lst):\n    \"\"\"\n    In this problem, you have to implement a function transpose2(lst)\n    which takes a list of lists as input and returns a new list\n    that is the transpose of lst.\n    For example:\n    transpose2([[1, 2, 3], [4, 5, 6]]) => [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    lst2 = lst[:]\n    for i in range(len(lst)):\n        for j in range(i, len(lst[0])):\n            lst2[j][i], lst2[i][j] = lst[i][j], lst[j][i]\n    return lst2\n\n\ndef test_transpose2():\n    assert transpose2([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]\n\n\ndef transpose3(lst):\n    \"\"\"\n    In this problem, you have to implement a function transpose3(lst)\n    which takes a list of lists as input and returns a new list\n    that is the transpose of lst.\n    For example:\n    transpose3([[1, 2, 3], [4, 5, 6]]) => [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    lst2 = lst[:]\n    for i in range(len(lst)):\n        for j in range(i, len(lst[0])):\n            lst2[i][j], lst2[j][i] = lst[j][i], lst[i][j]\n    return lst2\n\n\ndef test_transpose3():\n    assert transpose3([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]\n\n\ndef transpose4(lst):\n    \"\"\"\n    In this problem, you have to implement a function transpose4(lst)\n    which takes a list of lists as input and returns a new list\n    that is the transpose of lst.\n    For example:\n    transpose4([[1, 2, 3], [4, 5, 6]]) => [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    lst2 = lst[:]\n    for i in range(len(lst)):\n        for j in range(i, len(lst[0])):\n            lst2[i][j], lst2[j][i] = lst[j][i], lst[i][j]\n    return lst2\n\n\ndef test_transpose4():\n    assert transpose4([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]\n\n\ndef transpose5(lst):\n    \"\"\"\n    In this problem, you have to implement a function transpose5(lst)\n    which takes a list of lists as input and returns a new list\n    that is the transpose of lst.\n    For example:\n    transpose5([[1, 2, 3], [4, 5, 6]]) => [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    lst2 = lst[:]\n    for i in range(len(lst)):\n        for j in range(i, len(lst[0])):\n            lst2[i][j], lst2[j][i] = lst[j][i], lst[i][j]\n    return lst2\n\n\ndef test_transpose5():\n    assert transpose5([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]\n\n\ndef transpose6(lst):\n    \"\"\"\n    In this problem, you have to implement a function transpose6(lst)\n    which takes a list of lists as input and returns a new list\n    that is the transpose of lst.\n    For example:\n    transpose6([[1, 2, 3], [4, 5, 6]]) => [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    lst2 = lst[:]\n    for i in range(len(lst)):\n        for j in range(i, len(lst[0])):\n            lst2[i][j], lst2[j][i] = lst[j][i], lst[i][j]\n    return lst2\n\n\ndef test_transpose6():\n    assert transpose6([[1, 2, 3], [4, 5, 6]])"}
{"task_id": "HumanEval/111", "completion": "histogram = {}\n    for x in test:\n        if x in histogram:\n            histogram[x] += 1\n        else:\n            histogram[x] = 1\n    return histogram\n\ndef histogram_test():\n    \"\"\"\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    histogram_tests = {\n        'a b c': {'a': 1, 'b': 1, 'c': 1},\n        'a b b a': {'a': 2, 'b': 2},\n        'a b c a b': {'a': 2, 'b': 2},\n        'b b b b a': {'b': 4},\n        '': {},\n    }\n    for test, result in histogram_tests.items():\n        assert histogram(test) == result, f'{test} is not {result}'\n    print('tests passed!')\n\ndef histogram_keys(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letters in decreasing order of count.\n    If several letters have the same count, return all of them.\n    \n    Example:\n    histogram_keys('a b c') == ['c', 'b', 'a']\n    histogram_keys('a b b a') == ['b', 'a', 'a']\n    histogram_keys('a b c a b') == ['c', 'b', 'a']\n    histogram_keys('b b b b a') == ['b', 'a']\n    histogram_keys('') == []\n\n    \"\"\"\n    histogram = {}\n    for x in test:\n        if x in histogram:\n            histogram[x] += 1\n        else:\n            histogram[x] = 1\n    keys = []\n    for x in histogram:\n        keys.append(x)\n    keys.sort(reverse=True, key=histogram.get)\n    return keys\n\ndef histogram_keys_test():\n    \"\"\"\n    histogram_keys('a b c') == ['c', 'b', 'a']\n    histogram_keys('a b b a') == ['b', 'a', 'a']\n    histogram_keys('a b c a b') == ['c', 'b', 'a']\n    histogram_keys('b b b b a') == ['b', 'a']\n    histogram_keys('') == []\n    \"\"\"\n    histogram_keys_tests = {\n        'a b c': ['c', 'b', 'a'],\n        'a b b a': ['b', 'a', 'a'],\n        'a b c a b': ['c', 'b', 'a'],\n        'b b b b a': ['b', 'a'],\n        '': ["}
{"task_id": "HumanEval/112", "completion": "lst = []\n    lst2 = []\n    for i in range(len(s)):\n        if s[i] not in lst:\n            lst.append(s[i])\n        else:\n            lst2.append(s[i])\n    if lst2 == []:\n        lst2.append(s)\n    lst2 = ''.join(lst2)\n    lst2 = lst2[::-1]\n    lst2 = lst2.replace(lst2[0],'')\n    if c in lst2 and len(lst2) > 1:\n        return(lst2,True)\n    elif c in lst2 and len(lst2) == 1:\n        return(lst2,False)\n    else:\n        return(lst2,False)\n\ns = \"abcdef\"\nc = \"b\"\nprint(reverse_delete(s,c))\n\"\"\"\nTask\nWrite a function that takes an array of integers (a list in groovy) and an integer (k, k > 0). You have to find all pairs of this array so that their sum is equal to k.\n    The function should return a list of pairs, each one as an array of two integers and sorted. The order of the pairs in the list doesn't matter. For example:\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 8, the result should be [[1, 7], [3, 5], [8, 12]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 2, the result should be [].\n    For a = [1, 1, 1, 1] and k = 2, the result should be [[1, 1]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 3, the result should be [].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 1, the result should be [].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 5, the result should be [[3, 11], [10, 14], [1, 15], [8, 13], [7, 12]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 10, the result should be [[8, 12], [3, 11], [1, 15], [7, 13], [10, 14]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 4, the result should be [].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 6, the result should be [[1, 11], [7, 14]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 12, the result should be [[8, 14], [10, 11]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 15, the result should be [[1, 14], [7, 11], [3, 13], [8, 10], [11, 8], [15, 3], [15, 7], [11, 15], [14, 11], [1, 15]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 9, the result should be [[1, 14], [3, 11], [7, 13], [8, 10], [11, 8], [15, 3], [15, 7], [11, 15], [14, 11]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 7, the result should be [[1, 14], [1, 11], [1, 15], [3, 10], [7, 13], [8, 10], [11, 8], [11, 15], [14, 11], [7, 12]].\n    For a = [1, 3, 7, 8, 10, 11, 14, 15] and k = 11, the result should be [[3, 8], [3, 14], [3, 11], [3, 15], [7, 8], [7, 11], [7, 14], [7, 15], [8, 11], [8, 15], [10, 11], [10, 15], [11, 14], [11, 15]].\n\"\"\"\ndef solution(a, k):\n    pairs = []\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] == k:\n                pairs.append([a[i], a[j]])\n    return pairs\n\nprint(solution([1, 3, 7, 8, 10, 11, 14, 15], 15))\n\"\"\"\nTask\nWrite a function that takes an array of strings and returns an array of strings in which the first letter of each string is capitalized.\n    Example\n    For input = [\"stay\", \"bye\"], the output should be [\"Stay\", \"Bye\"].\n    For input = [\"take\", \"me\", \"to\", \"the\", \"tree\"], the output should be [\"Take\", \"Me\", \"To\", \"The\", \"Tree\"].\n\"\"\"\ndef solution(input):\n    return [x.title() for x in input]\nprint(solution([\"stay\", \"bye\"]))\n\"\"\"\nTask\nWrite a function that takes a non-negative integer n and returns the sum of its digits.\n    Example\n    For n = 9, the output should be sumDigits(n) = 9.\n    For n = 134, the output should be sumDigits(n) = 7.\n\"\"\"\ndef sumDigits(n):\n    return sum(int(x) for x in str(n))\nprint(sumDigits(9))\n\"\"\"\nTask\nWrite a function that takes an integer n and an integer k, and returns the number of pairs of integers in the range [1, n] that have exactly k divisors.\n    Example\n    For n = 10, k = 2, the output should be numberOfPairs(n, k) = 4.\n    There are four 2-divisors:\n    1, 2, 4, 6, and\n    1, 3, 5, 9.\n    For n = 5, k = 5, the output should be numberOfPairs(n, k) = 0.\n\"\"\"\ndef numberOfPairs(n, k):\n    count = 0\n    for i in range(1, n+1):\n        divisors = []\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisors.append(j)\n        if len(divisors) == k:\n            count += 1\n    return count\n\nprint(numberOfPairs(10, 2))\n\"\"\"\nTask\nWrite a function that takes an array of strings and returns a new array where each value is replaced with its length.\n    Example\n    For inputArray = [\"abc\", \"car\", \"ers\"], the output should be arrayChange(inputArray) = [3, 3, 4].\n\"\"\"\ndef arrayChange(inputArray):\n    newArray = []\n    for i in range(len(inputArray)):\n        newArray.append(len(inputArray[i]))\n    return newArray\nprint(arrayChange([\"abc\", \"car\", \"ers\"]))\n\"\"\"\nTask\nWrite a function that takes a string, reverses it, and checks if the reversed string is equal to the original string.\n    Example\n    For inputString = \"SDA\", the output should be reverseString(inputString) = true;\n    For inputString = \"SDA\", the output should be reverseString(inputString) = false.\n\"\"\"\ndef reverseString(inputString):\n    return inputString[::-1] == inputString\nprint(reverseString(\"SDA\"))\n\"\"\"\nTask\nWrite a function that takes an array of strings as an input, and returns a new array consisting of the same strings sorted in non-decreasing alphabetical order.\n    Example\n    For inputArray = [\"c\", \"b\", \"a\", \"d\"], the output should be\n\"\"\"\ndef sortArr"}
{"task_id": "HumanEval/113", "completion": "return odd_count_string(lst)\n\ndef odd_count_string(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                count += 1\n        new_lst.append(\"the number of odd elements \"+str(count)+ \"n the str\"+ str(count) + \" of the \" + \"str\"+str(i) + \"of the\" + \"input\")\n    return new_lst\n    \ndef odd_count_string(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                count += 1\n        new_lst.append(\"the number of odd elements \"+str(count)+ \"n the str\"+ str(count) + \" of the \" + \"str\"+str(i) + \"of the\" + \"input\")\n    return new_lst\n    \ndef odd_count_string(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                count += 1\n        new_lst.append(\"the number of odd elements \"+str(count)+ \"n the str\"+ str(count) + \" of the \""}
{"task_id": "HumanEval/114", "completion": "sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n        minSum = min(minSum, sums[i])\n    return minSum\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [None] * len(nums)\n    sums[0] = nums[0]\n    minSum = nums[0]\n    for i"}
{"task_id": "HumanEval/115", "completion": "# Check grid type\n    if not isinstance(grid, list):\n        raise TypeError(\"grid is not a list\")\n    for row in grid:\n        if not isinstance(row, list):\n            raise TypeError(\"grid is not a list of lists\")\n        if len(row) != len(grid[0]):\n            raise ValueError(\"grid is not a square\")\n        for cell in row:\n            if not isinstance(cell, (int, float)):\n                raise TypeError(\"grid is not a list of lists of ints\")\n            if cell not in (0, 1):\n                raise ValueError(\"grid is not a list of lists of ints\")\n    if not isinstance(capacity, (int, float)):\n        raise TypeError(\"capacity is not an int or float\")\n    if not isinstance(capacity, (int, float)):\n        raise TypeError(\"capacity is not an int or float\")\n    if capacity <= 0:\n        raise ValueError(\"capacity must be greater than 0\")\n    # Check grid\n    n_wells = len(grid)\n    n_cols = len(grid[0])\n    for i in range(n_wells):\n        if n_cols != len(grid[i]):\n            raise ValueError(\"grid is not a square\")\n        for j in range(n_cols):\n            if grid[i][j] not in (0, 1):\n                raise ValueError(\"grid is not a list of lists of ints\")\n    # Check capacity\n    if capacity <= 0:\n        raise ValueError(\"capacity must be greater than 0\")\n    # Solution\n    if n_wells == 0:\n        return 0\n    if n_wells == 1:\n        return int(math.ceil(math.log2(capacity)))\n    n_buckets = sum(grid[0])\n    if n_buckets == 0:\n        return int(math.ceil(math.log2(capacity)))\n    if n_wells > 1:\n        n_buckets_wells = sum([sum(row) for row in grid])\n        return int(math.ceil(math.log2(capacity))) + int(math.ceil(math.log2(n_buckets_wells)))\n    return int(math.ceil(math.log2(capacity))) + int(math.ceil(math.log2(n_buckets)))\n    \ndef min_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity"}
{"task_id": "HumanEval/116", "completion": "return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_2(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_3(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_4(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_5(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_6(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_7(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_8(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_9(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_10(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x) if c.isdigit()), x))\n\n\ndef sort_array_11(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of o"}
{"task_id": "HumanEval/117", "completion": "s = s.replace(\" \",\"\")\n    output = []\n    for i in range(len(s) - n + 1):\n        count = 0\n        for j in range(n):\n            if s[i + j] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                count+=1\n        if count == 0:\n            output.append(s[i: i + n])\n    return output\n\n\ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    assert select_words(\"She sells sea shells\", 3) == [\"She\", \"sells\", \"sea\", \"shells\"]\n    assert select_words(\"She sells sea shells\", 4) == [\"She\", \"sells\"]\n    assert select_words(\"She sells sea shells\", 5) == []\n    assert select_words(\"She sells sea shells\", 6) == [\"She\", \"sells\", \"sea\", \"shells\"]\n    assert select_words(\"She sells sea shells\", 10) == [\"She\", \"sells\", \"sea\", \"shells\"]\n    print(\"All tests passed!\")\n\ntest_select_words()\n# Question 3\ndef encrypt_letter(letter, n):\n    \"\"\"Implement the Caesar cipher for letter. Caesar cipher is a type of substitution\n    cipher where each alphabet in the plain text is substituted by a letter found after\n    a certain number of positions up the alphabet.\n    Examples:\n    encrypt_letter(\"a\", 0) ==> \"a\"\n    encrypt_letter(\"z\", 2) ==> \"c\"\n    encrypt_letter(\"a\", 26) == \"a\"\n    encrypt_letter(\"a\", -1) == \"z\"\n    encrypt_letter(\"c\", -2) == \"a\"\n    encrypt_letter(\" \", -1) == \" \"\n    encrypt_letter(\" \", 1) == \" \"\n    encrypt_letter(\"z\", 1) == \"a\"\n    encrypt_letter(\"z\", -1) == \"y\"\n    encrypt_letter(\"a\", -2) == \"y\"\n    encrypt_letter(\"z\", -2) == \"x\"\n    encrypt_letter(\"a\", -3) == \"x\"\n    encrypt_letter(\"z\", -3) == \"v\"\n    encrypt_letter(\" \", -2) == \" \"\n    encrypt_letter(\" \", -3) == \" \"\n    \"\"\"\n    if letter == \" \":\n        return \" \"\n    elif letter == \"z\":\n        return chr((ord(letter) - ord(\"a\") + n) % 26 + ord(\"a\"))\n    elif letter"}
{"task_id": "HumanEval/118", "completion": "vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word.upper()\n    vowels_pos = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_pos.append(i)\n    if len(vowels_pos) == 0:\n        return \"\"\n    vowels_pos.append(len(word))\n    vowels_pos.sort()\n    for i in range(len(vowels_pos)-1):\n        if vowels_pos[i+1] - vowels_pos[i] > 1:\n            return word[vowels_pos[i]+1]\n    return \"\"\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word.upper()\n    vowels_pos = [len(word)]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            vowels_pos.append(i)\n    if len(vowels_pos) == 0:\n        return \"\"\n    vowels_pos.append(0)\n    vowels_pos.sort()\n    for i in range(len(vowels_pos)-1):\n        if vowels_pos[i+1] - vowels_pos[i] > 1:\n            return word[vowels_pos[i+1]-1]\n    return \"\"\ndef get_closest_vowel_3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word.upper()\n    vowels_pos = []\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            vowels_pos.append(i)\n    if len(vowels_pos) == 0:\n        return \"\"\n    vowels_pos.append(0)\n    vowels_pos.sort()\n    for i in range(len(vowels_pos)-1):\n        if vowels_pos[i+1] - vowels_pos[i] > 1:\n            return word[vowels_pos[i+1]-1]\n    return"}
{"task_id": "HumanEval/119", "completion": "### YOUR CODE HERE\n    i = 0\n    while lst[i] != '(' and lst[i] != ')':\n        i += 1\n    if lst[i] == '(':\n        lst.remove('(')\n        lst.remove(')')\n    elif lst[i] == ')':\n        lst.remove(')')\n        lst.remove('(')\n    i = len(lst)-1\n    while lst[i] != '(' and lst[i] != ')':\n        i -= 1\n    if lst[i] == '(':\n        lst.remove('(')\n        lst.remove(')')\n    elif lst[i] == ')':\n        lst.remove(')')\n        lst.remove('(')\n    lst2 = lst[i:]\n    lst3 = lst[:i+1]\n    if lst3 == lst2:\n        return 'Yes'\n    else:\n        return 'No'\n\n### TEST CASES ###\nprint(\"match_parens(['()', '()']) == 'Yes'\")\nprint(\"match_parens(['(', ')']) == 'No'\")\nprint(\"match_parens(['()', ')']) == 'No'\")\nprint(\"match_parens(['()', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())']) == 'Yes'\")\nprint(\"match_parens(['(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()', '(()())']) == 'Yes'\")\nprint(\"match_parens(['(()())', '()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()']) == 'Yes'\")\nprint(\"match_parens(['()', '(()())', '()"}
{"task_id": "HumanEval/120", "completion": "sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]\n\ndef test_maximum():\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\ndef main():\n    print("}
{"task_id": "HumanEval/121", "completion": "lst = lst[0]\n    return lst"}
{"task_id": "HumanEval/122", "completion": "def sum_of_digits(x):\n        if x == 0:\n            return 0\n        return sum_of_digits(x // 10) + x % 10\n\n    return sum(arr[:k]) if sum(arr[:k]) < 100 else sum(arr[:k]) + sum_of_digits(arr[k])\n\ndef main():\n    arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    k = 4\n    print(add_elements(arr, k))\n    arr = [11, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "HumanEval/123", "completion": "# TODO: Implement this function\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    odd_collatz = [num for num in collatz if num % 2 != 0]\n    return odd_collatz\n\n\ndef test_get_odd_collatz(test_cases):\n    \"\"\"\n    This function is used to test your implementation of get_odd_collatz.\n\n    test_cases is a list of tuples. Each tuple has two elements, first is an integer,\n    and second is a list that represents the sorted list of odd numbers in collatz sequence.\n    \"\"\"\n    for n, ans in test_cases:\n        if get_odd_collatz(n) != ans:\n            print(f\"Fail! {n} returns {get_odd_collatz(n)}, but {ans} is expected.\")\n        else:\n            print(f\"Pass! {n} returns {get_odd_collatz(n)}\")\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (1, [1]),\n        (10, [10, 3, 10"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n    import re\n    date = date.replace(\"/\", \"-\")\n    if not date.endswith(\"-20\"):\n        return False\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    return True\n\ndef valid_password(password):\n    \"\"\"You have to write a function which validates a given password and\n    returns True if the password is valid otherwise False.\n    The password is valid if all of the following rules are satisfied:\n    1. The password has at least 8 characters.\n    2. The password has at least one lowercase character.\n    3. The password has at least one uppercase character.\n    4. The password has at least one digit.\n    5. The password has at least one punctuation character:\n        (, -, %, $, !, &, *, #, @, ~, ^, +, =)\n    6. The password has at least one space character.\n\n    For example:\n    valid_password('Abc12345!') => True\n\n    valid_password('Abc12345') => False\n\n    valid_password('Abc12345 ') => False\n\n    valid_password('Abc12345-') => False\n\n    valid_password('Abc12345!') => False\n\n    valid_password('Abc12345@#') => False\n    \"\"\"\n    import re\n    if not re.match(r'^\\S{8,}$', password):\n        return False\n    if not re.search(r'[a-z]', password):\n        return False\n    if not re.search(r'[A-Z]', password):\n        return False\n    if not re.search(r'\\d', password):\n        return False\n    if not re.search(r'[~!@#$%^&*+=]', password):\n        return False\n    if not re.search(r'\\s', password):\n        return False\n    return True\n\ndef valid_phone(phone):\n    \"\"\"You have to write a function which validates a given phone number and\n    returns True if the phone number is valid otherwise False.\n    The phone number is valid if all of the following rules are satisfied:\n    1. The phone number is not empty.\n    2. The phone number has a length of 11 characters.\n    3. The first character of the phone number is 0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    4. The second character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    5. The third character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    6. The fourth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    7. The fifth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    8. The sixth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    9. The seventh character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    10. The eighth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    11. The ninth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    12. The tenth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    13. The eleventh character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n    14. The twelth character of the phone number is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9.\n\n    For example:\n    valid_phone('01111111111') => True\n\n    valid_phone('0111111111') => False\n\n    valid_phone('01111111111') => False\n\n    valid_phone('0111111111-') => False\n\n    valid_phone('01111111111') => False\n\n    valid_phone('01111111111') => False\n    \"\"\"\n    if not phone:\n        return False\n    if not len(phone) == 11:\n        return False\n    i"}
{"task_id": "HumanEval/125", "completion": "# YOUR CODE HERE\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in txt if i.islower() and ord(i) % 2 == 1])\n    return txt\n    raise NotImplementedError()\ndef split_words(txt):\n    txt = txt.split(\" \")\n    if \" \" in txt:\n        txt = txt.split(\" \")\n    elif \",\" in txt:\n        txt = txt.split(\",\")\n    else:\n        txt = sum([len(i) for i in"}
{"task_id": "HumanEval/126", "completion": "if lst == sorted(lst):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "start_interval1, end_interval1 = interval1\n    start_interval2, end_interval2 = interval2\n    \n    if start_interval1 > end_interval2 or start_interval2 > end_interval1:\n        return \"NO\"\n    else:\n        start_intersection = max(start_interval1, start_interval2)\n        end_intersection = min(end_interval1, end_interval2)\n        intersection_length = end_intersection - start_intersection + 1\n        \n        if intersection_length > 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n        \n    \"\"\"\n    print(\"interval1\", interval1)\n    print(\"interval2\", interval2)\n    print(\"start_interval1\", start_interval1)\n    print(\"end_interval1\", end_interval1)\n    print(\"start_interval2\", start_interval2)\n    print(\"end_interval2\", end_interval2)\n    print(\"start_intersection\", start_intersection)\n    print(\"end_intersection\", end_intersection)\n    print(\"intersection_length\", intersection_length)\n    \"\"\"\n\ndef is_prime(number):\n    if number < 2:\n        return False\n    \n    if number == 2:\n        return True\n    \n    if number % 2 == 0:\n        return False\n    \n    for i in range(3, int(number**0.5) + 1, 2):\n        if number % i == 0:\n            return False\n    \n    return True\n    \ndef get_intersection_length("}
{"task_id": "HumanEval/128", "completion": "pass\n\n\ndef prod_signs_recur(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_recur([1, 2, 2, -4]) == -9\n    >>> prod_signs_recur([0, 1]) == 0\n    >>> prod_signs_recur([]) == None\n    \"\"\"\n    pass\n\n\ndef prod_signs_iter(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_iter([1, 2, 2, -4]) == -9\n    >>> prod_signs_iter([0, 1]) == 0\n    >>> prod_signs_iter([]) == None\n    \"\"\"\n    pass\n\n\ndef prod_signs_iter_recur(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_iter_recur([1, 2, 2, -4]) == -9\n    >>> prod_signs_iter_recur([0, 1]) == 0\n    >>> prod_signs_iter_recur([]) == None\n    \"\"\"\n    pass\n\n\ndef prod_signs_iter_recur_gen(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_iter_recur_gen([1, 2, 2, -4]) == -9\n    >>> prod_signs_iter_recur_gen([0, 1]) == 0\n    >>> prod_signs_iter_recur_gen([]) == None\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    import time\n    doctest.testmod()\n    print('Testing code')\n    for i in range(1, 5):\n        print('testing %d ...' % i)\n        start = time.time()\n        print(prod_signs([1, 2, 2, -4]))\n        print(prod_signs_recur([1, 2, 2, -4]))\n        print(prod_signs_iter([1, 2, 2, -4]))\n        print(prod_signs_iter_recur([1, 2, 2, -4]))\n        print(prod_signs_iter_recur_gen([1, 2, 2, -4]))\n        print("}
{"task_id": "HumanEval/129", "completion": "n, m = len(grid), len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    min_path = [grid[0][0]]\n\n    def dfs(i, j, k, min_path, visited):\n        visited[i][j] = True\n        if k == 1:\n            min_path.append(grid[i][j])\n            return\n        neighbors = []\n        if i > 0 and not visited[i - 1][j]:\n            neighbors.append((i - 1, j, grid[i - 1][j]))\n        if i < n - 1 and not visited[i + 1][j]:\n            neighbors.append((i + 1, j, grid[i + 1][j]))\n        if j > 0 and not visited[i][j - 1]:\n            neighbors.append((i, j - 1, grid[i][j - 1]))\n        if j < m - 1 and not visited[i][j + 1]:\n            neighbors.append((i, j + 1, grid[i][j + 1]))\n        for x, y, val in neighbors:\n            dfs(x, y, k - 1, min_path, visited)\n\n    dfs(0, 0, k, min_path, visited)\n\n    return min_path\n\n\ndef test_cases():\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    expected_output = [1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 1: output={output}\"\n\n    grid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\n    k = 1\n    expected_output = [1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 2: output={output}\"\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 2\n    expected_output = [1, 2, 1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 3: output={output}\"\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    expected_output = [1, 2, 1, 2, 1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 4: output={output}\"\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 5\n    expected_output = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 5: output={output}\"\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 6\n    expected_output = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 6: output={output}\"\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 7\n    expected_output = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 7: output={output}\"\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 8\n    expected_output = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    output = minPath(grid, k)\n    assert output == expected_output, f\"Error in test case 8: output={output}\"\n\n    grid ="}
{"task_id": "HumanEval/130", "completion": "list_of_tribonacci = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            list_of_tribonacci.append(1 + list_of_tribonacci[i - 1] + list_of_tribonacci[i - 2])\n        else:\n            list_of_tribonacci.append(list_of_tribonacci[i - 1] + list_of_tribonacci[i - 2] + list_of_tribonacci[i - 3])\n    return list_of_tribonacci\ndef test_tri(n):\n    \"\"\"Tribonacci sequence can be used to model water in a stream, so we can calculate the current water level.\n    You are given a non-negative integer number n, you have to a return a list of the first n water levels.\n    water(0) = [0]\n    water(2) = [0, 0]\n    water(4) = [0, 0, 0]\n    water(3) = [water(2), water(2) + water(1)]\n    water(4) = [water(3), water(3) + water(2), water(3) + water(2) + water(1)]\n    water(4) = [0, 0, water(2), water(2) + water(1), water(3) + water(2) + water(1) + water(0)]\n    water(5) = [water(4), water(4) + water(3), water(4) + water(3) + water(2), water(4) + water(3) + water(2) + water(1), water(5) + water(4) + water(3) + water(2) + water(1) + water(0)]\n    \"\"\"\n    water_levels = [0]\n    if n == 0:\n        return water_levels\n    elif n == 1:\n        water_levels.append(water_levels[0])\n        return water_levels\n    elif n == 2:\n        water_levels.append(water_levels[0])\n        water_levels.append(water_levels[1])\n        return water_levels\n    else:\n        water_levels.append(water_levels[0])\n        water_levels.append(water_levels[1])\n        water_levels.append(water_levels[2])\n    for i in range(3, n):\n        water_levels.append(water_levels[i - 1] + water_levels[i - 2] + water_levels[i - 3])\n    return water_levels\ndef test_tri(n):\n    \"\"\"Tribonacci sequence can be used to model water in a stream, so we can calculate the current water level.\n    You are given a non-negative integer number n, you have to a return a list of the first n water levels.\n    water(0) = [0]\n    water(2) = [0, 0]\n    water(4) = [0, 0, 0]\n    water(3) = [water(2), water(2) + water(1)]\n    water(4) = [water(3), water(3) + water(2), water(3) + water(2) + water(1)]\n    water(4) = [0, 0, water(2), water(2) + water(1), water(3) + water(2) + water(1) + water(0)]\n    water(5) = [water(4), water(4) + water(3), water(4) + water(3) + water(2), water(4) + water(3) + water(2) + water(1), water(5) + water(4) + water(3) + water(2) + water(1) + water(0)]\n    \"\"\"\n    water_levels = [0]\n    if n == 0:\n        return water_levels\n    elif n == 1:\n        water_levels.append(water_levels[0])\n        return water_levels\n    elif n == 2:\n        water_levels.append(water_levels[0])\n        water_levels.append(water_levels[1])\n        return water_levels\n    else:\n        water_levels.append(water_levels[0])\n        water_levels.append(water_levels[1])\n        water_levels.append(water_levels[2])\n    for i in range(3, n):\n        water_levels.append(water_levels[i - 1] + water_levels[i - 2] + water_levels[i - 3])\n    return water_levels\ndef test_tri(n):\n    \"\"\"Tribonacci sequence can be used to model water in a stream, so we can calculate the current water level.\n    You are given a non-negative integer number n, you have to a return a list of the first n water levels.\n    water(0) = [0]\n    water(2) = [0, 0]\n    water(4) = [0, 0, 0]\n    water(3) = [water(2), water(2) + water(1)]\n    water(4) = [water(3), water(3) + water(2), water(3) + water(2) + water(1)]\n    water(4) = [0, 0, water(2), water(2) + water(1), water(3) + water(2) + water(1) + water(0)]\n    water(5) = [water(4), water(4) + water(3), water(4) + water(3) + water(2), water(4) + water(3) + water(2) + water(1), water(5) + water(4) + water(3) + water(2) + water(1) + water(0)]\n    \"\"\"\n    water_levels = [0]\n    if n == 0:\n        return water_levels\n    elif n == 1:\n        water_levels.append(water_levels[0])\n        return water_levels\n    elif n == 2:\n        water_levels.append(water_levels[0])\n        water_levels.append(water_levels[1])\n        return water_levels\n    else:\n        water_levels.append(water_levels[0])\n        water_levels.append(water_levels[1])\n        water_levels.append(water_levels[2])\n    for i in range(3, n):\n        water_levels.append(water_levels[i - 1] + water_levels[i - 2] + water_levels[i - 3])\n    return water_levels\ndef test_tri(n):\n    \"\"\"Tribonacci sequence can be used to model water in a stream, so we can calculate the current water level.\n    You are given a non-negative integer number n, you have to a return a list of the first n water levels.\n    water(0) = [0]\n    water(2) = [0, 0]\n    water(4) = [0, 0, 0]\n    water(3) = [water(2), water(2) + water(1)]\n    water(4) = [water(3), water(3)"}
{"task_id": "HumanEval/131", "completion": "pass\n\ndef string_match(str1, str2):\n    \"\"\"Given two strings, return the count of the number of times\n    the strings \"cat\" appears somewhere in the longer of the two\n    strings. Assume that both str1 and str2 contain only lowercase\n    characters.\n    For example:\n    string_match('catcowcat', 'cat') \u2192 2\n    string_match('catcowcat', 'cow') \u2192 1\n    string_match('catcowcat', 'dog') \u2192 0\n    \"\"\"\n    pass\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, and False otherwise.\"\"\"\n    pass\n\ndef fib(n):\n    \"\"\"Return the nth Fibonacci number.\n\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(10)\n    55\n    \"\"\"\n    pass\n\ndef fib_recursive(n):\n    \"\"\"Return nth Fibonacci number.\n\n    >>> fib_recursive(0)\n    0\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(2)\n    1\n    >>> fib_recursive(3)\n    2\n    >>> fib_recursive(10)\n    55\n    \"\"\"\n    pass\n\ndef fib_iterative(n):\n    \"\"\"Return nth Fibonacci number.\n\n    >>> fib_iterative(0)\n    0\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(2)\n    1\n    >>> fib_iterative(3)\n    2\n    >>> fib_iterative(10)\n    55\n    \"\"\"\n    pass\n\ndef fib_recursive_with_memo(n, memo):\n    \"\"\"Return nth Fibonacci number.\n\n    >>> fib_recursive_with_memo(0, {})\n    0\n    >>> fib_recursive_with_memo(1, {})\n    1\n    >>> fib_recursive_with_memo(2, {})\n    1\n    >>> fib_recursive_with_memo(3, {})\n    2\n    >>> fib_recursive_with_memo(10, {})\n    55\n    \"\"\"\n    pass\n\ndef fib_with_memo(n):\n    \"\"\"Return nth Fibonacci number.\n\n    >>> fib_with_memo(0)\n    0\n    >>> fib_with_memo(1)\n    1\n    >>> fib_with_memo(2)\n    1\n    >>> fib_with_memo(3)\n    2\n    >>> fib_with_memo(10)\n    55\n    \"\"\"\n    pass\n\ndef fib_iterative_with_memo(n):\n    \"\"\"Return nth Fibonacci number.\n\n    >>> fib_iterative_with_memo(0)\n    0\n    >>> fib_iterative_with_memo(1)\n    1\n    >>> fib_iterative_with_memo(2)\n    1\n    >>> fib_iterative_with_memo(3)\n    2\n    >>> fib_iterative_with_memo(10)\n    55\n    \"\"\"\n    pass\n\ndef sum_of_squares(n):\n    \"\"\"Return the sum of the squares of all numbers up to n, including n.\n    For example:\n    sum_of_squares(4) == 30   (1^2 + 2^2 + 3^2 + 4^2)\n    sum_of_squares(10) == 385 (1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2 + 10^2)\n    \"\"\"\n    pass\n\ndef factorial(n):\n    \"\"\"Return n factorial for n >= 0.\n    For example:\n    factorial(4) == 24  (4 * 3 * 2 * 1)\n    factorial(10) == 3628800\n    \"\"\"\n    pass\n\ndef hailstone(n):\n    \"\"\"Print the hailstone sequence starting at n and return its\n    length.\n\n    >>> hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> hailstone(1)\n    1\n    \"\"\"\n    pass\n\ndef sum_digits(n):\n    \"\"\"Sum digits in positive integer n.\n\n    >>> sum_digits(10)\n    1\n    >>> sum_digits(101)\n    2\n    >>> sum_digits(11111111111111)\n    1\n    \"\"\"\n    pass\n\ndef number_of_divisors(n):\n    \"\"\"Return number of divisors of positive integer n.\n\n    >>> number_of_divisors(10)\n    2\n    >>> number_of_divisors(20)\n    4\n    >>> number_of_divisors(9)\n    2\n    \"\"\"\n    pass\n\ndef is_perfect(n):\n    \"\"\"Return true if n is a perfect number and false otherwise.\n\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(28)\n    True\n    >>> is_perfect(100)\n    False\n    >>> is_perfect(29)\n    False\n    \"\"\"\n    pass\n\ndef sum_divisors(n):\n    \"\"\"Return the sum of all divisors of positive integer n.\n    >>> sum_divisors(6)\n    6  # 1, 2, 3\n    >>> sum_divisors(10)\n    18  # 1, 2, 3, 4, 5, 6, 10\n    >>> sum_divisors(123456)\n    10168\n    \"\"\"\n    pass\n\ndef is_prime_num(n):\n    \"\"\"Return true if n is a prime number and false otherwise.\n    >>> is_prime_num(10)\n    False\n    >>> is_prime_num(7)\n    True\n    \"\"\"\n    pass\n\ndef is_prime(n):\n    \"\"\"Return true if n is a prime number and false otherwise.\n    >>> is_prime(10)\n    False\n    >>> is_prime(7)\n    True\n    \"\"\"\n    pass\n\ndef nth_prime(n):\n    \"\"\"Return the nth prime number.\"\"\"\n    pass\n\ndef is_power_of_2(n):\n    \"\"\"Return true if n is a power of 2 and false otherwise.\n    >>> is_power_of_2(1)\n    True\n    >>> is_power_of_2(1024)\n    True\n    >>> is_power_of_2(16"}
{"task_id": "HumanEval/132", "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\n\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\ndef is_nested(string):\n    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''"}
{"task_id": "HumanEval/133", "completion": "lst = [int(i) for i in lst]\n    sq_lst = [x**2 for x in lst]\n    return sum(sq_lst)\n\nlst = [1,2,3]\nsum_squares(lst)\nlst = [1,4,9]\nsum_squares(lst)\nlst = [1,3,5,7]\nsum_squares(lst)\nlst = [1.4,4.2,0]\nsum_squares(lst)\nlst = [-2.4,1,1]\nsum_squares(lst)\n\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return sum(lst_ceil_squared)\n\nlst = [1,2,3]\nsum_squares_lst(lst)\nlst = [1,4,9]\nsum_squares_lst(lst)\nlst = [1,3,5,7]\nsum_squares_lst(lst)\nlst = [1.4,4.2,0]\nsum_squares_lst(lst)\nlst = [-2.4,1,1]\nsum_squares_lst(lst)\n\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return sum(lst_ceil_squared)\n\nlst = [1,2,3]\nsum_squares_lst(lst)\nlst = [1,4,9]\nsum_squares_lst(lst)\nlst = [1,3,5,7]\nsum_squares_lst(lst)\nlst = [1.4,4.2,0]\nsum_squares_lst(lst)\nlst = [-2.4,1,1]\nsum_squares_lst(lst)\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return sum(lst_ceil_squared)\n\nlst = [1,2,3]\nsum_squares_lst(lst)\nlst = [1,4,9]\nsum_squares_lst(lst)\nlst = [1,3,5,7]\nsum_squares_lst(lst)\nlst = [1.4,4.2,0]\nsum_squares_lst(lst)\nlst = [-2.4,1,1]\nsum_squares_lst(lst)\n\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return sum(lst_ceil_squared)\n\nlst = [1,2,3]\nsum_squares_lst(lst)\nlst = [1,4,9]\nsum_squares_lst(lst)\nlst = [1,3,5,7]\nsum_squares_lst(lst)\nlst = [1.4,4.2,0]\nsum_squares_lst(lst)\nlst = [-2.4,1,1]\nsum_squares_lst(lst)\n\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return sum(lst_ceil_squared)\n\nlst = [1,2,3]\nsum_squares_lst(lst)\nlst = [1,4,9]\nsum_squares_lst(lst)\nlst = [1,3,5,7]\nsum_squares_lst(lst)\nlst = [1.4,4.2,0]\nsum_squares_lst(lst)\nlst = [-2.4,1,1]\nsum_squares_lst(lst)\n\n\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return sum(lst_ceil_squared)\n\nlst = [1,2,3]\nsum_squares_lst(lst)\nlst = [1,4,9]\nsum_squares_lst(lst)\nlst = [1,3,5,7]\nsum_squares_lst(lst)\nlst = [1.4,4.2,0]\nsum_squares_lst(lst)\nlst = [-2.4,1,1]\nsum_squares_lst(lst)\n\n\n\ndef sum_squares_lst(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst_ceil = [int(i) for i in lst]\n    lst_ceil_squared = [x**2 for x in lst_ceil]\n    return s"}
{"task_id": "HumanEval/134", "completion": "txt = txt.split()\n    for word in txt:\n        if not word[-1].isalpha():\n            return True\n        else:\n            return False\n        \n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n# %%\ndef is_palindrome(word):\n    '''\n    Create a function that takes a string as an argument and returns \n    True or False depending on whether the characters\n    backwards, forwards and with spaces are the same.\n    Note: You have to remove spaces from the string first.\n\n    Examples:\n    is_palindrome(\"A man, a plan, a canal: Panama\") \u279e True\n    is_palindrome(\"racecar\") \u279e True\n    is_palindrome(\"not a palindrome\") \u279e False\n    is_palindrome(\"Was it a car or a cat I saw?\") \u279e True\n    is_palindrome(\"No 'x' in Nixon\") \u279e True\n    '''\n    \n    word = word.replace(\" \",\"\").lower()\n    return word[::-1] == word\n    \n    \n    \n    \nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"not a palindrome\"))\nprint(is_palindrome(\"Was it a car or a cat I saw?\"))\nprint(is_palindrome(\"No 'x' in Nixon\"))\n# %%\ndef abbreviate(words):\n    '''\n    Create a function that takes a string and returns the first letter,\n    the number of letters between the first and the last letter, and\n    the last letter of a string.\n\n    Examples:\n    abbreviate(\"jumps\") \u279e \"j4s\"\n    abbreviate(\"jumps over the moon\") \u279e \"j7s 2m\"\n    abbreviate(\"apples\") \u279e \"a5s\"\n    '''\n    \n    return (words[0] + str(len(words[1:-1])) + words[-1])\n    \n    \nprint(abbreviate(\"jumps\"))\nprint(abbreviate(\"jumps over the moon\"))\nprint(abbreviate(\"apples\"))\n# %%\ndef abbreviate(words):\n    '''\n    Create a function that takes a string and returns the first letter,\n    the number of letters between the first and the last letter, and\n    the last letter of a string.\n\n    Examples:\n    abbreviate(\"jumps\") \u279e \"j4s\"\n    abbreviate(\"jumps over the moon\") \u279e \"j7s 2m\"\n    abbreviate(\"apples\") \u279e \"a5s\"\n    '''\n    \n    return (words[0] + str(len(words[1:-1])) + words[-1])\n    \n    \nprint(abbreviate(\"jumps\"))\nprint(abbreviate(\"jumps over the moon\"))\nprint(abbreviate(\"apples\"))\n# %%\ndef abbreviate(words):\n    '''\n    Create a function that takes a string and returns the first letter,\n    the number of letters between the first and the last letter, and\n    the last letter of a string.\n\n    Examples:\n    abbreviate(\"jumps\") \u279e \"j4s\"\n    abbreviate(\"jumps over the moon\") \u279e \"j7s 2m\"\n    abbreviate(\"apples\") \u279e \"a5s\"\n    '''\n    \n    return (words[0] + str(len(words[1:-1]"}
{"task_id": "HumanEval/135", "completion": "arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "max_neg, min_pos = None, None\n    for i in lst:\n        if i < 0 and max_neg is None or i < max_neg:\n            max_neg = i\n        if i > 0 and min_pos is None or i < min_pos:\n            min_pos = i\n    return (max_neg, min_pos)\n\n\ndef lcm_and_gcd(lst):\n    '''\n    Create a function that takes a list and returns a tuple of the\n    list's LCM (least common multiple) and GCD (greatest common divisor).\n    LCM and GCD are defined in terms of each other.\n\n    LCM = Least Common Multiple\n    GCD = Greatest Common Divisor\n\n    Examples:\n    lcm_and_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (72, 1)\n    lcm_and_gcd([13, 6, 17, 18, 19, 20, 37]) == (636, 1)\n    lcm_and_gcd([13, 6, 1, 17, 18, 19, 20, 37]) == (636, 1)\n    '''\n    lcm, gcd = None, None\n    for i in lst:\n        lcm = lcm * i if lcm else i\n        gcd = gcd * i if gcd else i\n        lcm = lcm // gcd if lcm // gcd > 1 else lcm\n        gcd = gcd // lcm if gcd // lcm > 1 else gcd\n    return (lcm, gcd)\n\ndef lcm_and_gcd(lst):\n    '''\n    Create a function that takes a list and returns a tuple of the\n    list's LCM (least common multiple) and GCD (greatest common divisor).\n    LCM and GCD are defined in terms of each other.\n\n    LCM = Least Common Multiple\n    GCD = Greatest Common Divisor\n\n    Examples:\n    lcm_and_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (72, 1)\n    lcm_and_gcd([13, 6, 17, 18, 19, 20, 37]) == (636, 1)\n    lcm_and_gcd([13, 6, 1, 17, 18, 19, 20, 37]) == (636, 1)\n    '''\n    lcm, gcd = None, None\n    for i in lst:\n        lcm = lcm * i if lcm else i\n        gcd = gcd * i if gcd else i\n        lcm = lcm // gcd if lcm // gcd > 1 else lcm\n        gcd = gcd // lcm if gcd // lcm > 1 else gcd\n    return (lcm, gcd)\n\ndef lcm_and_gcd(lst):\n    '''\n    Create a function that takes a list and returns a tuple of the\n    list's LCM (least common multiple) and GCD (greatest common divisor).\n    LCM and GCD are defined in terms of each other.\n\n    LCM = Least Common Multiple\n    GCD = Greatest Common Divisor\n\n    Examples:\n    lcm_and_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (72, 1)\n    lcm_and_gcd([13, 6, 17, 18, 19, 20, 37]) == (636, 1)\n    lcm_and_gcd([13, 6, 1, 17, 18, 19, 20, 37]) == (636, 1)\n    '''\n    lcm, gcd = None, None\n    for i in lst:\n        lcm = lcm * i if lcm else i\n        gcd = gcd * i if gcd else i\n        lcm = lcm // gcd if lcm // gcd > 1 else lcm\n        gcd = gcd // lcm if gcd // lcm > 1 else gcd\n    return (lcm, gcd)\n\n\ndef lcm_and_gcd(lst):\n    '''\n    Create a function that takes a list and returns a tuple of the\n    list's LCM (least common multiple) and GCD (greatest common divisor).\n    LCM and GCD are defined in terms of each other.\n\n    LCM = Least Common Multiple\n    GCD = Greatest Common Divisor\n\n    Examples:\n    lcm_and_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (72, 1)\n    lcm_and_gcd([13, 6, 17, 18, 19, 20, 37]) == (636, 1)\n    lcm_and_gcd([13, 6, 1, 17, 18, 19, 20, 37]) == (636, 1)\n    '''\n    lcm, gcd = None, None\n    for i in lst:\n        lcm = lcm * i if lcm else i\n        gcd = gcd * i if gcd else i\n        lcm = lcm // gcd if lcm // gcd > 1 else lcm\n        gcd = gcd // lcm if gcd // lcm > 1 else gcd\n    return (lcm, gcd)\n\n\ndef lcm_and_gcd(lst):\n    '''\n    Create a function that takes a list and returns a tuple of the\n    list's LCM (least common multiple) and GCD (greatest common divisor).\n    LCM and GCD are defined in terms of each other.\n\n    LCM = Least Common Multiple\n    GCD = Greatest Common Divisor\n\n    Examples:\n    lcm_and_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (72, 1)\n    lcm_and_gcd([13, 6, 17, 18, 19, 20, 37]) == (636, 1)\n    lcm_and_gcd([13, 6, 1, 17, 18, 19, 20, 37]) == (636, 1)\n    '''\n    lcm, gcd = None, None\n    for i in lst:\n        lcm = lcm * i if lcm else i\n        gcd = gcd * i if gcd else i\n        lcm = lcm // gcd if lcm // gcd > 1 else lcm\n        gcd = gcd // lcm if gcd // lcm > 1 else gcd\n    return (lcm, gcd)\n\n\ndef lcm_and_gcd(lst):\n    '''\n    Create a function that takes a list and returns a tuple of the\n    list's LCM (least common multiple) and GCD (greatest common divisor).\n    LCM and GCD are defined in terms of each other.\n\n    LCM = Least Common Multiple\n    GCD = Greatest Common Divisor\n\n    Examples:\n    lcm_and_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (72, 1)\n    lcm_and_gcd([13, 6, 17, 18, 19, 20, 37]) == (636, 1)\n    lcm_and_gcd([13, 6, 1, 17, 18, 19, 20, 37]) == (636, 1)\n    '''\n    lcm, gcd = None,"}
{"task_id": "HumanEval/137", "completion": "if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two variables, and returns True if the first\n    variable is lexicographically greater than the second variable, and False otherwise.\n\n    compare_two(\"bird\", \"bee\") \u279e False\n    compare_two(\"bee\", \"bird\") \u279e True\n    compare_two(\"bird\", \"bird\") \u279e False\n    \"\"\"\n    if a > b:\n        return True\n    elif a < b:\n        return False\n    else:\n        return None\n\ndef compare_three(a, b, c):\n    \"\"\"\n    Create a function that takes three numbers as arguments and returns True if the third number is between the first and second number (respectively).\n    Return False otherwise.\n\n    compare_three(1, 2, 3) \u279e False\n    compare_three(2, 3, 1) \u279e True\n    compare_three(3, 2, 1) \u279e False\n    \"\"\"\n    if c > a and c < b:\n        return True\n    else:\n        return False\n\ndef compare_four(a, b, c, d):\n    \"\"\"\n    Create a function that takes four arguments:\n    x: an integer\n    y: an integer\n    z: an integer\n    The function returns True if the first two variables are equal and the last variable is less than the other two,\n    and False otherwise.\n\n    compare_four(1, 1, 2, 2) \u279e False\n    compare_four(1, 1, 2, 3) \u279e False\n    compare_four(2, 3, 1, 0) \u279e True\n    \"\"\"\n    if a == b and c > d:\n        return True\n    else:\n        return False\n\ndef compare_five(a, b, c, d, e):\n    \"\"\"\n    Create a function that takes five variables and returns True if the last variable is greater than the sum of the first and second variables,\n    and the third variable is less than the difference of the fourth and fifth variables, and False otherwise.\n\n    compare_five(1, 1, 2, 3, 4) \u279e False\n    compare_five(2, 3, 1, 0, -1) \u279e True\n    compare_five(2, 3, 1, 0, 5) \u279e False\n    \"\"\"\n    if e > a + b and c < d - e:\n        return True\n    else:\n        return False\n\ndef compare_six(a, b, c, d, e, f):\n    \"\"\"\n    Create a function that takes six variables, multiplies the first three variables and adds the fourth variable,\n    and subtracts the fifth variable. Return True if this value is equal to the sixth variable, and False otherwise.\n\n    compare_six(1, 1, 1, 2, 0, -1) \u279e True\n    compare_six(2, 3, 1, 0, -1, -2) \u279e False\n    compare_six(2, 3, 1, 0, -1, 1) \u279e True\n    \"\"\"\n    if a * b * c + d == e - f:\n        return True\n    else:\n        return False\n\ndef compare_seven(a, b, c, d, e, f, g):\n    \"\"\"\n    Create a function that takes seven variables, multiplies the first three variables and adds the fourth variable,\n    and subtracts the fifth and sixth variables. Return True if this value is equal to the seventh variable, and False otherwise.\n\n    compare_seven(1, 1, 1, 2, 0, -1, -2) \u279e False\n    compare_seven(2, 3, 1, 0, -1, -2, -3) \u279e True\n    compare_seven(2, 3, 1, 0, -1, 1, 2) \u279e True\n    \"\"\"\n    if a * b * c + d == e - f - g:\n        return True\n    else:\n        return False\n\ndef compare_eight(a, b, c, d, e, f, g, h):\n    \"\"\"\n    Create a function that takes eight variables, subtracts the first two variables and multiplies the remaining variables.\n    Return True if this value is equal to the last variable, and False otherwise.\n\n    compare_eight(1, 1, 1, 2, 0, -1, -2, 4) \u279e True\n    compare_eight(2, 3, 1, 0, -1, -2, 4, 5) \u279e False\n    compare_eight(2, 3, 1, 0, -1, 1, 2, 1) \u279e False\n    \"\"\"\n    if (d - e) * (f - g) * (h - a) == h:\n        return True\n    else:\n        return"}
{"task_id": "HumanEval/138", "completion": "if n < 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n % 4 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 4 == 0:\n        return True\n    return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 == 0 and n % 4 != 0:\n        return True\n    if n % 4 == 0:\n        return True\n    return False\n\n\n\ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 == 0 and n % 4 != 0 or n % 4 == 0\n\n    \n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 == 0 if n % 4 != 0 else n % 4 == 0\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 if n % 4 != 0 else n % 4\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 and n % 4 != 0 or n % 4\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 and n % 4 and n % 4\n\n\ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 != 0 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2:\n        return False\n    if n % 4 != 0 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 != 0 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n\ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 and n % 4 and n % 4\n\n\ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    return n % 2 and n % 4 and n % 4\n\n\ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n % 4 and n % 4:\n        return True\n    else:\n        return False\n\n    \n    \n    \ndef is_equal_to_sum_even(n):\n    if n < 0:\n        return False\n    if n % 2 and n"}
{"task_id": "HumanEval/139", "completion": "special_factorials = []\n    for i in range(1, n+1):\n        special_factorials.append(i)\n    return special_factorials\n\ndef factorial(n):\n    \"\"\"The factorial function is defined as:\n    factorial(n) = n * (n-1) * (n-2) * ... * 1\n\n    For example:\n    >>> factorial(4)\n    24\n\n    The function will receive an integer as input and should return the factorial\n    of this integer.\n    \"\"\"\n    factorials = []\n    for i in range(1, n+1):\n        factorials.append(i)\n    return factorials\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    special_factorials = factorial(n)\n    return special_factorials\n\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    special_factorials = factorial(n)\n    return special_factorials\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    special_factorials = factorial(n)\n    return special_factorials\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    special_factorials = factorial(n)\n    return special_factorials\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    special_factorials = factorial(n)\n    return special_factorials\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    special_factorials = factorial(n)\n    return special_factorials\n\ndef brazilian_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> brazilian_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the brazilian\n    factorial of this integer.\n    \"\"\"\n    special_factorials"}
{"task_id": "HumanEval/140", "completion": "text = text.replace(' ', '_')\n    while True:\n        replaced = False\n        for i in range(len(text) - 1):\n            if text[i] == ' ' and text[i + 1] == ' ':\n                text = text[:i] + '_' + text[i + 1:]\n                replaced = True\n                break\n        if not replaced:\n            break\n    return text\n\ndef test_fix_spaces():\n    assert fix_spaces(\"Example\") == \"Example\"\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n    assert fix_spaces(\" Example   3\") == \"_Example-3\"\n    assert fix_spaces(\"Example  Example  Example  Example \") == \"Example_Example_Example_Example\"\n    assert fix_spaces(\"Example  Example  Example  Example\") == \"Example_Example_Example_Example\"\n\ntest_fix_spaces()\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(' ', '_')\n    while True:\n        replaced = False\n        for i in range(len(text) - 1):\n            if text[i] == ' ' and text[i + 1] == ' ':\n                text = text[:i] + '_' + text[i + 1:]\n                replaced = True\n                break\n        if not replaced:\n            break\n    return text\n\n\ndef test_fix_spaces():\n    assert fix_spaces(\"Example\") == \"Example\"\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n    assert fix_spaces(\" Example   3\") == \"_Example-3\"\n    assert fix_spaces(\"Example  Example  Example  Example \") == \"Example_Example_Example_Example\"\n    assert fix_spaces(\"Example  Example  Example  Example\") == \"Example_Example_Example_Example\"\n\ntest_fix_spaces()\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\")"}
{"task_id": "HumanEval/141", "completion": "file_name_arr = file_name.split('.')\n    if len(file_name_arr[0]) < 3 and file_name_arr[0].isalpha() and len(file_name_arr) == 2 and file_name_arr[1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    return 'No'\n\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No' (the name should start with a latin alphapet letter)\nprint(file_name_check(\"example_123.dll\")) # => 'Yes' (the name contains exactly one dot '.' and the substring before the dot should not be empty)\nprint(file_name_check(\"example.doc\")) # => 'No' (the file's name should not be longer than three digits '0'-'9')\nprint(file_name_check(\"example.exe\")) # => 'Yes' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    file_name_arr = file_name.split('.')\n    if len(file_name_arr[0]) < 3 and file_name_arr[0].isalpha() and len(file_name_arr) == 2 and file_name_arr[1] in ['txt', 'exe', 'dll'"}
{"task_id": "HumanEval/142", "completion": "sum_of_squares = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i]**2\n            sum_of_squares += lst[i]\n        elif i % 3 != 0 and i % 4 == 0:\n            lst[i] = lst[i]**3\n            sum_of_squares += lst[i]\n    return sum_of_squares\n\nlst = []\nprint(sum_squares(lst))\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i]**2\n            sum_of_squares += lst[i]\n        elif i % 3 != 0 and i % 4 == 0:\n            lst[i] = lst[i]**3\n            sum_of_squares += lst[i]\n    return sum_of_squares\n\nlst = [1, 2, 3, 4]\nprint(sum_squares(lst))\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i]**2\n            sum_of_squares += lst[i]\n        elif i % 3 != 0 and i % 4 == 0:\n            lst[i] = lst[i]**3\n            sum_of_squares += lst[i]\n    return sum_of_squares\n\nlst = [1, 2, 3, 4]\nprint(sum_squares(lst))\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst ="}
{"task_id": "HumanEval/143", "completion": "# Your code goes here\n    \n    \n    def prime_number(n):\n        if n < 2:\n            return False\n        for i in range(2,int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    \n    def prime_length(sentence):\n        words = sentence.split()\n        prime_length_words = []\n        for word in words:\n            if prime_number(len(word)):\n                prime_length_words.append(word)\n        return ' '.join(prime_length_words)\n    \n    \n    return prime_length(sentence)\n\n\nif __name__ == \"__main__\":\n    \n    sentences = [\n        \"This is a test\",\n        \"lets go for swimming\",\n        \"we are going to buy a car\"\n    ]\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in sentences:\n        print(words_in_sentence(sentence))\n    \n    \n    print()\n    \n    \n    for sentence in"}
{"task_id": "HumanEval/144", "completion": "numerator, denominator = x.split(\"/\")\n    numerator, denominator = int(numerator), int(denominator)\n    simplified_numerator, simplified_denominator = int(numerator * n), int(denominator * n)\n    simplified_numerator, simplified_denominator = abs(simplified_numerator), abs(simplified_denominator)\n    simplified_numerator, simplified_denominator = find_gcd(simplified_numerator, simplified_denominator)\n    simplified_numerator, simplified_denominator = simplified_numerator // simplified_denominator, simplified_denominator // simplified_numerator\n    simplified_numerator, simplified_denominator = int(simplified_numerator), int(simplified_denominator)\n    numerator, denominator = int(numerator), int(denominator)\n    simplified_numerator, simplified_denominator = int(numerator * n), int(denominator * n)\n    simplified_numerator, simplified_denominator = find_gcd(simplified_numerator, simplified_denominator)\n    simplified_numerator, simplified_denominator = simplified_numerator // simplified_denominator, simplified_denominator // simplified_numerator\n    simplified_numerator, simplified_denominator = int(simplified_numerator), int(simplified_denominator)\n    simplified_numerator, simplified_denominator = abs(simplified_numerator), abs(simplified_denominator)\n    simplified_numerator, simplified_denominator = simplified_numerator, simplified_denominator\n    simplified_numerator, simplified_denominator = simplified_numerator // simplified_denominator, simplified_denominator"}
{"task_id": "HumanEval/145", "completion": "result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for i in range(len(nums)):\n        summ = sum(int(x) for x in str(nums[i]))\n        result.append((summ, nums[i]))\n    result.sort()\n    return [x[1] for x in result]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in origi"}
{"task_id": "HumanEval/146", "completion": "counter = 0\n    for num in nums:\n        if num > 10:\n            numStr = str(num)\n            if numStr[-1] == '1':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '3':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '5':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '7':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '9':\n                numStr = numStr[:-1]\n            numStr = int(numStr)\n            if numStr[-1] == '1':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '3':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '5':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '7':\n                numStr = numStr[:-1]\n            elif numStr[-1] == '9':\n                numStr = numStr[:-1]\n            if int(numStr) % 2 == 1:\n                counter += 1\n    return counter\n\n\ndef findSubarrayWithSum(nums, s):\n    \"\"\"Write a function that takes an array of numbers and a target sum as \n    inputs and returns true if there is a subarray of the array that has \n    a sum equals to the target sum, and false otherwise.\n    For example: \n    findSubarrayWithSum([1, 2, 3], 5) => true\n    findSubarrayWithSum([1, 2, 3], 7) => false \n    \"\"\"\n    counter = 0\n    for i in range(len(nums)):\n        if counter == s:\n            return True\n        for j in range(i+1, len(nums)):\n            counter += nums[j]\n            if counter == s:\n                return True\n    return False \n\n\n\ndef findMin(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the minimum value in the array.\n    For example:\n    findMin([5, 1, 2, 3, 4]) => 1\n    findMin([9, 2, 3, 4]) => 2\n    \"\"\"\n    minNum = nums[0]\n    for num in nums:\n        if num < minNum:\n            minNum = num\n    return minNum\n\n\n\ndef longestPrefix(s1, s2):\n    \"\"\"Write a function that takes two strings as inputs and returns the \n    longest prefix of s1 that is also a prefix of s2.\n    For example:\n    longestPrefix(\"cat\", \"caterpillar\") => \"ca\"\n    longestPrefix(\"cat\", \"caterpie\") => \"\"\n    longestPrefix(\"a\", \"abc\") => \"a\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return result\n        result += s1[i]\n    return result\n\n\ndef isSubstring(s1, s2):\n    \"\"\"Write a function that takes two strings as inputs and returns true \n    if s1 is a substring of s2 and false otherwise.\n    For example:\n    isSubstring(\"cat\", \"caterpillar\") => true\n    isSubstring(\"dog\", \"cat\") => false\n    \"\"\"\n    if s1 in s2:\n        return True\n    return False\n\ndef isPalindrome(s):\n    \"\"\"Write a function that takes a string as input and returns true if it is \n    a palindrome (reads the same forward and backward) and false otherwise.\n    For example:\n    isPalindrome(\"racecar\") => true\n    isPalindrome(\"racecar1\") => false\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return s == result\n\ndef firstUniqChar(s)"}
{"task_id": "HumanEval/147", "completion": "if n < 3:\n        return 0\n    \n    triplets = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if i * i + j * j == k * k:\n                    triplets += 1\n    \n    return triplets\n\n# Test cases\nprint(get_max_triples(5))  # Output: 1\nprint(get_max_triples(10))  # Output: 1\nprint(get_max_triples(15))  # Output: 0\nprint(get_max_triples(20))  # Output: 2\nprint(get_max_triples(30))  # Output: 1\nprint(get_max_triples(40))  # Output: 2\nprint(get_max_triples(50))  # Output: 4\nprint(get_max_triples(60))  # Output: 3\nprint(get_max_triples(70))  # Output: 2\nprint(get_max_triples(80))  # Output: 2\nprint(get_max_triples(90))  # Output: 2\nprint(get_max_triples(100))  # Output: 3\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    \n    triplets = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if i * i + j * j == k * k:\n                    triplets += 1\n    \n    return triplets\n\n# Test cases\nprint(get_max_triples(5))  # Output: 1\nprint(get_max_triples(10))  # Output: 1\nprint(get_max_triples(15))  # Output: 0\nprint(get_max_triples(20))  # Output: 2\nprint(get_max_triples(30))  # Output: 1\nprint(get_max_triples(40))  # Output: 2\nprint(get_max_triples(50))  # Output: 4\nprint(get_max_triples(60))  # Output: 3\nprint(get_max_triples(70))  # Output: 2\nprint(get_max_triples(80))  # Output: 2\nprint(get_max_triples(90))  # Output: 2\nprint(get_max_triples(100))  # Output: 3\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    \n    triplets = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if i * i + j * j == k * k:\n                    triplets += 1\n    \n    return triplets\n\n# Test cases\nprint(get_max_triples(5))  # Output: 1\nprint(get_max_triples(10))  # Output: 1\nprint(get_max_triples(15))  # Output: 0\nprint(get_max_triples(20))  # Output: 2\nprint(get_max_triples(30))  # Output: 1\nprint(get_max_triples(40))  # Output: 2\nprint(get_max_triples(50))  # Output: 4\nprint(get_max_triples(60))  # Output: 3\nprint(get_max_triples(70))  # Output: 2\nprint(get_max_triples(80))  # Output: 2\nprint(get_max_triples(90))  # Output: 2\nprint(get_max_triples(100))  # Output: 3\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    \n    triplets = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if i * i + j * j == k * k:\n                    triplets += 1\n    \n    return triplets\n\n# Test cases\nprint(get_max_triples(5))  # Output: 1\nprint(get_max_triples(10))  # Output: 1\nprint(get_max_triples(15))  # Output: 0\nprint(get_max_triples(20))  # Output: 2\nprint(get_max_triples(30))  # Output: 1\nprint(get_max_triples(40))  # Output: 2\nprint(get_max_triples(50))  # Output: 4\nprint(get_max_triples(60))  # Output: 3\nprint(get_max_triples(70))  # Output: 2\nprint(get_max_triples(80))  # Output: 2\nprint(get_max_triples(90))  # Output: 2\nprint(get_max_triples(100))  # Output: 3\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    \n    triplets = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k"}
{"task_id": "HumanEval/148", "completion": "planets = {\n    \"Mercury\": 1,\n    \"Venus\": 3,\n    \"Earth\": 4,\n    \"Mars\": 5,\n    \"Jupiter\": 7,\n    \"Saturn\": 9,\n    \"Uranus\": 10,\n    \"Neptune\": 11,\n    \"Pluto\": 15,\n    \"Ceres\": 17,\n    \"Makemake\": 19,\n    \"Eris\": 20,\n    \"Haumea\": 21,\n    \"Quaoar\": 22,\n    \"Sedna\": 23,\n    \"Charon\": 24,\n    \"Hydra\": 25,\n    \"Titania\": 26,\n    \"Oberon\": 27,\n    \"Miranda\": 28,\n    \"Ariel\": 29,\n    \"Umbriel\": 30,\n    \"Triton\": 31,\n    \"Nereid\": 32,\n    \"Charon\": 33,\n    \"Nix\": 34,\n    \"Styx\": 35,\n    \"Kerberos\": 36,\n    \"Halimede\": 37,\n    \"Sao\": 38,\n    \"Nix\": 39,\n    \"Hydra\": 40,\n    \"Miranda\": 41,\n    \"Titania\": 42,\n    \"Oberon\": 43,\n    \"Ariel\": 44,\n    \"Umbriel\": 45,\n    \"Triton\": 46,\n    \"Nereid\": 47,\n    \"Charon\": 48,\n    \"Styx\": 49,\n    \"Kerberos\": 50,\n    \"Halimede\": 51,\n    \"Sao\": 52,\n    \"Nix\": 53,\n    \"Hydra\": 54,\n    \"Umbriel\": 55,\n    \"Miranda\": 56,\n    \"Titania\": 57,\n    \"Oberon\": 58,\n    \"Ariel\": 59,\n    \"Umbriel\": 60,\n    \"Triton\": 61,\n    \"Nereid\": 62,\n    \"Charon\": 63,\n    \"Styx\": 64,\n    \"Kerberos\": 65,\n    \"Halimede\": 66,\n    \"Sao\": 67,\n    \"Nix\": 68,\n    \"Hydra\": 69,\n    \"Miranda\": 70,\n    \"Titania\": 71,\n    \"Oberon\": 72,\n    \"Ariel\": 73,\n    \"Umbriel\": 74,\n    \"Triton\": 75,\n    \"Nereid\": 76,\n    \"Charon\": 77,\n    \"Styx\": 78,\n    \"Kerberos\": 79,\n    \"Halimede\": 80,\n    \"Sao\": 81,\n    \"Nix\": 82,\n    \"Hydra\": 83,\n    \"Miranda\": 84,\n    \"Titania\": 85,\n    \"Oberon\": 86,\n    \"Ariel\": 87,\n    \"Umbriel\": 88,\n    \"Triton\": 89,\n    \"Nereid\": 90,\n    \"Charon\": 91,\n    \"Styx\": 92,\n    \"Kerberos\": 93,\n    \"Halimede\": 94,\n    \"Sao\": 95,\n    \"Nix\": 96,\n    \"Hydra\": 97,\n    \"Miranda\": 98,\n    \"Titania\": 99,\n    \"Oberon\": 100,\n    \"Ariel\": 101,\n    \"Umbriel\": 102,\n    \"Triton\": 103,\n    \"Nereid\": 104,\n    \"Charon\": 105,\n    \"Styx\": 106,\n    \"Kerberos\": 107,\n    \"Halimede\": 108,\n    \"Sao\": 109,\n    \"Nix\": 110,\n    \"Hydra\": 111,\n    \"Miranda\": 112,\n    \"Titania\": 113,\n    \"Oberon\": 114,\n    \"Ariel\": 115,\n    \"Umbriel\": 116,\n    \"Triton\": 117,\n    \"Nereid\": 118,\n    \"Charon\": 119,\n    \"Styx\": 120,\n    \"Kerberos\": 121,\n    \"Halimede\": 122,\n    \"Sao\": 123,\n    \"Nix\": 124,\n    \"Hydra\": 125,\n    \"Miranda\": 126,\n    \"Titania\": 127,\n    \"Oberon\": 128,\n    \"Ariel\": 129,\n    \"Umbriel\": 130,\n    \"Triton\": 131,\n    \"Nereid\": 132,\n    \"Charon\": 133,\n    \"Styx\": 134,\n    \"Kerberos\": 135,\n    \"Halimede\": 136,\n    \"Sao\": 137,\n    \"Nix\": 138,\n    \"Hydra\": 139,\n    \"Miranda\": 140,\n    \"Titania\": 141,\n    \"Oberon\": 142,\n    \"Ariel\": 143,\n    \"Umbriel\": 144,\n    \"Triton\": 145,\n    \"Nereid\": 146,\n    \"Charon\": 147,\n    \"Styx\": 148,\n    \"Kerberos\": 149,\n    \"Halimede\": 150,\n    \"Sao\": 151,\n    \"Nix\": 152,\n    \"Hydra\": 153,\n    \"Miranda\": 154,\n    \"Titania\": 155,\n    \"Oberon\": 156,\n    \"Ariel\": 157,\n    \"Umbriel\": 158,\n    \"Triton\": 159,\n    \"Nereid\": 160,\n    \"Charon\": 161,\n    \"Styx\": 162,\n    \"Kerberos\": 163,\n    \"Halimede\": 164,\n    \"Sao\": 165,\n    \"Nix\": 166,\n    \"Hydra\": 167,\n    \"Miranda\": 168,\n    \"Titania\": 169,\n    \"Oberon\": 170,\n    \"Ariel\": 171,\n    \"Umbriel\": 172,\n    \"Triton\": 173,\n    \"Nereid\": 174,\n    \"Charon\": 175,\n    \"Styx\": 176,\n    \"Kerberos\": 177,\n    \"Halimede\": 178,\n    \"Sao\": 179,\n    \"Nix\": 180,\n    \"Hydra\": 181,\n    \"Miranda\": 182,\n    \"Titania\": 183,\n    \"Oberon\": 184,\n    \"Ariel\": 185,\n    \"Umbriel\": 186,\n    \"Triton\": 187,\n    \"Nereid\": 188,\n    \"Charon\": 189,\n    \"Styx\": 190,\n    \"Kerberos\": 191,\n    \"Halimede\": 192,\n    \"Sao\": 193,\n    \"Nix\": 194,\n    \"Hydra\": 195,\n    \"Miranda\": 196,\n    \"Titania\": 197,\n    \"Oberon\": 198,\n    \"Ariel\": 199,\n    \"Umbriel\": 200,\n    \"Triton\": 201,\n    \"Nereid\": 202,\n    \"Charon\": 203,\n    \"Styx\": 204,\n    \"Kerberos\": 205,\n    \"Halimede\": 206,\n    \"Sao\": 207,\n    \"Nix\": 208,\n    \"Hydra\": 209,\n    \"Miranda\": 210,\n    \"Titania\": 211,\n    \"Oberon\": 212,\n    \"Ariel\": 213,\n    \"Umbriel\": 214,\n    \"Triton\": 215,\n    \"Nereid\": 216,\n    \"Charon\": 217,\n    \"Styx\": 218,\n    \"Kerberos\": 219,\n    \"Halimede\": 220,\n    \"Sao\": 221,\n    \"Nix\": 222,\n    \"Hydra\": 223,\n    \"Miranda\": 224,\n    \"Titania\": 225,\n    \"Oberon\": 226,\n    \"Ariel\": 227,\n    \"Umbriel\": 228,\n    \"Triton\": 229,\n    \"Nereid\": 230,\n    \"Charon\": 231,\n    \"Styx\": 232,\n    \"Kerberos\": 233,\n    \"Halimede\": 234,\n    \"Sao\": 235,\n    \"Nix\": 236,\n    \"Hydra\": 237,\n    \"Miranda\": 238,\n    \"Titania\": 239,\n    \"Oberon\": 240,\n    \"Ariel\": 241,\n    \"Umbriel\": 242,\n    \"Triton\": 243,\n    \"Nereid\": 244,\n    \"Charon\": 245,\n    \"Styx\": 246,\n    \"Kerberos\": 247,\n    \"Halimede\": 248,\n    \"Sao\": 249,\n    \"Nix\": 250,\n    \"Hydra\": 251,\n    \"Miranda\": 252,\n    \"Titania\": 253,\n    \"Oberon\": 254,\n    \"Ariel\": 255,\n    \"Umbriel\": 256,\n    \"Triton\": 257,\n    \"Nereid\": 258,\n    \"Charon\": 259,\n    \"Styx\": 260,\n    \"Kerberos\": 261,\n    \"Halimede\": 262,\n    \"Sao\": 263,\n    \"Nix\": 264,\n    \"Hydra\": 265,\n    \"Miranda\": 266,\n    \"Titania\": 267,\n    \"Oberon\": 268,\n    \"Ariel\": 269,\n    \"Umbriel\": 270,\n    \"Triton\": 271,\n    \"Nereid\": 272,\n    \"Charon\": 273,\n    \"Styx\": 274,\n    \"Kerberos\": 275,\n    \"Halimede\": 276,\n    \"Sao\": 277,\n    \"Nix\": 278,\n    \"Hydra\": 279,\n    \"Miranda\": 280,\n    \"Titania\": 281,\n    \"Oberon\": 282,\n    \"Ariel\": 283,\n    \"Umbriel\": 284,\n    \"Triton\": 285,\n    \"Nereid\": 286,\n    \"Charon\": 287,\n    \"Styx\": 288,\n    \"Kerberos\": 289,\n    \"Halimede\": 290,\n    \"Sao\": 291,\n    \"Nix\": 292,\n    \"Hydra\": 293,\n    \"Miranda\": 294,\n    \"Titania\": 295,\n    \"Oberon\": 296,\n    \"Ariel\": 297,\n    \"Umbriel\": 298,\n    \"Triton\": 299,\n    \"Nereid\": 300,\n    \"Charon\": 301,\n    \"Styx\": 302,\n    \"Kerberos\": 303,\n    \"Halimede\": 304,\n    \"Sao\": 305,\n    \"Nix\": 306,\n    \"Hydra\": 307,\n    \"Miranda\": 308,\n    \"Titania\": 309,\n    \"Oberon\": 310,\n    \"Ariel\": 311,\n    \"Umbriel\": 312,\n    \"Triton\": 313,\n    \"Nereid\": 314,\n    \"Charon\": 315,\n    \"Styx\": 316,\n    \"Kerberos\": 317,\n    \"Halimede\": 318,\n    \"Sao\": 319,\n    \"Nix\": 320,\n    \"Hydra\": 321,\n    \"Miranda\": 322,\n    \"Titania\": 323,\n    \"Oberon\": 324,\n    \"Ariel\": 325,\n    \"Umbriel\": 326,\n    \"Triton\": 327,\n    \"Nereid\": 328,\n    \"Charon\": 329,\n    \"Styx\": 330,\n    \"Kerberos\": 331,\n    \"Halimede\": 332,\n    \"Sao\": 333,\n    \"Nix\": 334,\n    \"Hydra\": 335,\n    \"Miranda\": 336,\n    \"Titania\": 337,\n    \"Oberon\": 338,\n    \"Ariel\": 339,\n    \"Umbriel\": 340,\n    \"Triton\": 341,\n    \"Nereid\": 342,\n    \"Charon\": 343,\n    \"Styx\": 344,\n    \"Kerberos\": 345,\n    \"Halimede\": 346,\n    \"Sao\": 347,\n    \"Nix\": 348,\n    \"Hydra\": 349,\n    \"Miranda\": 350,\n    \"Titania\": 351,\n    \"Oberon\": 352,\n    \"Ariel\": 353,\n    \"Umbriel\": 354,\n    \"Triton\": 355,\n    \"Nereid\": 356,\n    \"Charon\": 357,\n    \"Styx\": 358,\n    \"Kerberos\": 359,\n    \"Halimede\": 360,\n    \"Sao\": 361,\n    \"Nix\": 362,\n    \"Hydra\": 363,\n    \"Miranda\": 364,\n    \"Titania\": 365,\n    \"Oberon\": 366,\n    \"Ariel\": 367,\n    \"Umbriel\": 368,\n    \"Triton\": 369,\n    \"Nereid\": 370,\n    \"Charon\": 371,\n    \"Styx\": 372,\n    \"Kerberos\": 373,\n    \"Halimede\": 374,\n    \"Sao\": 375,\n    \"Nix\": 376,\n    \"Hydra\": 377,\n    \"Miranda\": 378,\n    \"Titania\": 379,\n    \"Oberon\": 380,\n    \"Ariel\": 381,\n    \"Umbriel\": 382,\n    \"Triton\": 383,\n    \"Nereid\": 384,\n    \"Charon\": 385,\n    \"Styx\": 386,\n    \"Kerberos\": 387,\n    \"Halimede\": 388,\n    \"Sao\": 389,\n    \"Nix\": 390,\n    \"Hydra\": 391,\n    \"Miranda\": 392,\n    \"Titania\": 393,\n    \"Oberon\": 394,\n    \"Ariel\": 395,\n    \"Umbriel\": 396,\n    \"Triton\": 397,\n    \"Nereid\": 398,\n    \"Charon\": 399,\n    \"Styx\": 400,\n    \"Kerberos\": 401,\n    \"Halimede\": 402,\n    \"Sao\": 403,\n    \"Nix\": 404,\n    \"Hydra\": 405,\n    \"Miranda\": 406,\n    \"Titania\": 407,\n    \"Oberon\": 408,\n    \"Ariel\": 409,\n    \"Umbriel\": 410,\n    \"Triton\": 411,\n    \"Nereid\": 412,\n    \"Charon\": 413,\n    \"Styx\": 414,\n    \"Kerberos\": 415,\n    \"Halimede\": 416,\n    \"Sao\": 417,\n    \"Nix\": 418,\n    \"Hydra\": 419,\n    \"Miranda\": 420,\n    \"Titania\": 421,\n    \"Oberon\": 422,\n    \"Ariel\": 423,\n    \"Umbriel\": 424,\n    \"Triton\": 425,\n    \"Nereid\": 426,\n    \"Charon\": 427,\n    \"Styx\": 428,\n    \"Kerberos\": 429,\n    \"Halimede\": 430,\n    \"Sao\": 431,\n    \"Nix\": 432,\n    \"Hydra\": 433,\n    \"Miranda\": 434,\n    \"Titania\": 435,\n    \"Oberon\": 436,\n    \"Ariel\": 437,\n    \"Umbriel\": 438,\n    \"Triton\": 439,\n    \"Nereid\": 440,\n    \"Charon\": 441,\n    \"Styx\": 442,\n    \"Kerberos\": 443,\n    \"Halimede\": 444,\n    \"Sao\": 445,\n    \"Nix\": 446,\n    \"Hydra\": 447,\n    \"Miranda\": 448,\n    \"Titania\": 449,\n    \"Oberon\": 450,\n    \"Ariel\": 451,\n    \"Umbriel\": 452,\n    \"Triton\": 453,\n    \"Nereid\": 454,\n    \"Charon\": 455,\n    \"Styx\": 456,\n    \"Kerberos\": 457,\n    \"Halimede\": 458,\n    \"Sao\": 459,\n    \"Nix\": 460,\n    \"Hydra\": 461,\n    \"Miranda\": 462,\n    \"Titania\": 463,\n    \"Oberon\": 464,\n    \"Ariel\": 465,\n    \"Umbriel\": 466,\n    \"Triton\": 467,\n    \"Nereid\": 468,\n    \"Charon\": 469,\n    \"Styx\": 470,\n    \"Kerberos\": 471,\n    \"Halimede\": 472,\n    \"Sao\": 473,\n    \"Nix\": 474,\n    \"Hydra\": 475,\n    \"Miranda\": 476,\n    \"Titania\": 477,\n    \"Oberon\": 478,\n    \"Ariel\": 479,\n    \"Umbriel\": 480,\n    \"Triton\": 481,\n    \"Nereid\": 482,\n    \"Charon\": 483,\n    \"Styx\": 484,\n    \"Kerberos\": 485,\n    \"Halimede\": 486,\n    \"Sao\": 487,\n    \"Nix\": 488,\n    \"Hydra\": 489,\n    \"Miranda\": 490,\n    \"Titania\": 491,\n    \"Oberon\": 492,\n    \"Ariel\": 493,\n    \"Umbriel\": 494,\n    \"Triton\": 495,\n    \"Nereid\": 496,\n    \"Charon\": 497,\n    \"Styx\": 498,\n    \"Kerberos\": 499,\n    \"Halimede\": 500,\n    \"Sao\": 501,\n    \"Nix\": 502,\n    \"Hydra\": 503,\n    \"Miranda\": 504,\n    \"Titania\": 505,\n    \"Oberon\": 506,\n    \"Ariel\": 507,\n    \"Umbriel\": 508,\n    \"Triton\": 509,\n    \"Nereid\": 510,\n    \"Charon\": 511,\n    \"Styx\": 512,\n    \"Kerberos\": 513,\n    \"Halimede\": 514,\n    \"Sao\": 515,\n    \"Nix\": 516,\n    \"Hydra\": 517,\n    \"Miranda\": 518,\n    \"Titania\": 519,\n    \"Oberon\": 520,\n    \"Ariel\": 521,\n    \"Umbriel\": 522,\n    \"Triton\": 523,\n    \"Nereid\": 524,\n    \"Charon\": 525,\n    \"Styx\": 526,\n    \"Kerberos\": 527,\n    \"Halimede\": 528,\n    \"Sao\": 529,\n    \"Nix\": 530,\n    \"Hydra\": 531,\n    \"Miranda\": 532,\n    \"Titania\": 533,\n    \"Oberon\": 534,\n    \"Ariel\": 535,\n    \"Umbriel\": 536,\n    \"Triton\": 537,\n    \"Nereid\": 538,\n    \"Charon\": 539,\n    \"Styx\": 540,\n    \"Kerberos\": 541,\n    \"Halimede\": 542,\n    \"Sao\": 543,\n    \"Nix\": 544,\n    \"Hydra\": 545,\n    \"Miranda\": 546,\n    \"Titania\": 547,\n    \"Oberon\": 548,\n    \"Ariel\": 549,\n    \"Umbriel\": 550,\n    \"Triton\": 551,\n    \"Nereid\": 552,\n    \"Charon\": 553,\n    \"Styx\": 554,\n    \"Kerberos\": 555,\n    \"Halimede\": 556,\n    \"Sao\": 557,\n    \"Nix\": 558,\n    \"Hydra\": 559,\n    \"Miranda\": 560,\n    \"Titania\": 561,\n    \"Oberon\": 562,\n    \"Ariel\": 563,\n    \"Umbriel\": 564,\n    \"Triton\": 565,\n    \"Nereid\": 566,\n    \"Charon\": 567,\n    \"Styx\": 568,\n    \"Kerberos\": 569,\n    \"Halimede\": 570,\n    \"Sao\": 571,\n    \"Nix\": 572,\n    \"Hydra\": 573,\n    \"Miranda\": 574,\n    \"Titania\": 575,\n    \"Oberon\": 576,\n    \"Ariel\": 577,\n    \"Umbriel\": 578,\n    \"Triton\": 579,\n    \"Nereid\": 580,\n    \"Charon\": 581,\n    \"Styx\": 582,\n    \"Kerberos\": 583,\n    \"Halimede\": 584,\n    \"Sao\": 585,\n    \"Nix\": 586,\n    \"Hydra\": 587,\n    \"Miranda\": 588,\n    \"Titania\": 589,\n    \"Oberon\": 590,\n    \"Ariel\": 591,\n    \"Umbriel\": 592,\n    \"Triton\": 593,\n    \"Nereid\": 594,\n    \"Charon\": 595,\n    \"Styx\": 596,\n    \"Kerberos\": 597,\n    \"Halimede\": 598,\n    \"Sao\": 599,\n    \"Nix\": 600,\n    \"Hydra\": 601,\n    \"Miranda\": 602,\n    \"Titania\": 603,\n    \"Oberon\": 604,\n    \"Ariel\": 605,\n    \"Umbriel\": 606,\n    \"Triton\": 607,\n    \"Nereid\": 608,\n    \"Charon\": 609,\n    \"Styx\": 610,\n    \"Kerberos\": 611,\n    \"Halimede\": 612,\n    \"Sao\": 613,\n    \"Nix\": 614,\n    \"Hydra\": 615,\n    \"Miranda\": 616,\n    \"Titania\": 617,\n    \"Oberon\": 618,\n    \"Ariel\": 619,\n    \"Umbriel\": 620,\n    \"Triton\": 621,\n    \"Nereid\": 622,\n    \"Charon\": 623,\n    \"Styx\": 624,\n    \"Kerberos\": 625,\n    \"Halimede\": 626,\n    \"Sao\": 627,\n    \"Nix\": 628,\n    \"Hydra\": 629,\n    \"Miranda\": 630,\n    \"Titania\": 631,\n    \"Oberon\": 632,\n    \"Ariel\": 633,\n    \"Umbriel\": 634,\n    \"Triton\": 635,\n    \"Nereid\": 636,\n    \"Charon\": 637,\n    \"Styx\": 638,\n    \"Kerberos\": 639,\n    \"Halimede\": 640,\n    \"Sao\": 641,\n    \"Nix\": 642,\n    \"Hydra\": 643,\n    \"Miranda\": 644,\n    \"Titania\": 645,\n    \"Oberon\": 646,\n    \"Ariel\": 647,\n    \"Umbriel\": 648,\n    \"Triton\": 649,\n    \"Nereid\": 650,\n    \"Charon\": 651,\n    \"Styx\": 652,\n    \"Kerberos\": 653,\n    \"Halimede\": 654,\n    \"Sao\": 655,\n    \"Nix\": 656,\n    \"Hydra\": 657,\n    \"Miranda\": 658,\n    \"Titania\": 659,\n    \"Oberon\": 660,\n    \"Ariel\": 661,\n    \"Umbriel\": 662,\n    \"Triton\": 663,\n    \"Nereid\": 664,\n    \"Charon\": 665,\n    \"Styx\": 666,\n    \"Kerberos\": 667,\n    \"Halimede\": 668,\n    \"Sao\": 669,\n    \"Nix\": 670,\n    \"Hydra\": 671,\n    \"Miranda\": 672,\n    \"Titania\": 673,\n    \"Oberon\": 674,\n    \"Ariel\": 675,\n    \"Umbriel\": 676,\n    \"Triton\": 677,\n    \"Nereid\": 678,\n    \"Charon\": 679,\n    \"Styx\": 680,\n    \"Kerberos\": 681,\n    \"Halimede\": 682,\n    \"Sao\": 683,\n    \"Nix\": 684,\n    \"Hydra\": 685,\n    \"Miranda\": 686,\n    \"Titania\": 687,\n    \"Oberon\": 688,\n    \"Ariel\": 689,\n    \"Umbriel\": 690,\n    \"Triton\": 691,\n    \"Nereid\": 692,\n    \"Charon\": 693,\n    \"Styx\": 694,\n    \"Kerberos\": 695,\n    \"Halimede\": 696,\n    \"Sao\": 697,\n    \"Nix\": 698,\n    \"Hydra\": 699,\n    \"Miranda\": 700,\n    \"Titania\": 701,\n    \"Oberon\": 702,\n    \"Ariel\": 703,\n    \"Umbriel\": 704,\n    \"Triton\": 705,\n    \"Nereid\": 706,\n    \"Charon\": 707,\n    \"Styx\": 708,\n    \"Kerberos\": 709,\n    \"Halimede\": 710,\n    \"Sao\": 711,\n    \"Nix\": 712,\n    \"Hydra\": 713,\n    \"Miranda\": 714,\n    \"Titania\": 715,\n    \"Oberon\": 716,\n    \"Ariel\": 717,\n    \"Umbriel\": 718,\n    \"Triton\": 719,\n    \"Nereid\": 720,\n    \"Charon\": 721,\n    \"Styx\": 722,\n    \"Kerberos\": 723,\n    \"Halimede\": 724,\n    \"Sao\": 725,\n    \"Nix\": 726,\n    \"Hydra\": 727,\n    \"Miranda\": 728,\n    \"Titania\": 729,\n    \"Oberon\": 730,\n    \"Ariel\": 731,\n    \"Umbriel\": 732,\n    \"Triton\": 733,\n    \"Nereid\": 734,\n    \"Charon\": 735,\n    \"Styx\": 736,\n    \"Kerberos\": 737,\n    \"Halimede\": 738,\n    \"Sao\": 739,\n    \"Nix\": 740,\n    \"Hydra\": 741,\n    \"Miranda\": 742,\n    \"Titania\": 743,\n    \"Oberon\": 744,\n    \"Ariel\": 745,\n    \"Umbriel\": 746,\n    \"Triton\": 747,\n    \"Nereid\": 748,\n    \"Charon\": 749,\n    \"Styx\": 750,\n    \"Kerberos\": 751,\n    \"Halimede\": 752,\n    \"Sao\": 753,\n    \"Nix\": 754,\n    \"Hydra\": 755,\n    \"Miranda\": 756,\n    \"Titania\": 757,\n    \"Oberon\": 758,\n    \"Ariel\": 759,\n    \"Umbriel\": 760,\n    \"Triton\": 761,\n    \"Nereid\": 762,\n    \"Charon\": 763,\n    \"Styx\": 764,\n    \"Kerberos\": 765,\n    \"Halimede\": 766,\n    \"Sao\": 767,\n    \"Nix\": 768,\n    \"Hydra\": 769,\n    \"Miranda\": 770,\n    \"Titania\": 771,\n    \"Oberon\": 772,\n    \"Ariel\": 773,\n    \"Umbriel\": 774,\n    \"Triton\": 775,\n    \"Nereid\": 776,\n    \"Charon\": 777,\n    \"Styx\": 778,\n    \"Kerberos\": 779,\n    \"Halimede\": 780,\n    \"Sao\": 781,\n    \"Nix\": 782,\n    \"Hydra\": 783,\n    \"Miranda\": 784,\n    \"Titania\": 785,\n    \"Oberon\": 786,\n    \"Ariel\": 787,\n    \"Umbriel\": 788,\n    \"Triton\": 789,\n    \"Nereid\": 790,\n    \"Charon\": 791,\n    \"Styx\": 792,\n    \"Kerberos\": 793,\n    \"Halimede\": 794,\n    \"Sao\": 795,\n    \"Nix\": 796,\n    \"Hydra\": 797,\n    \"Miranda\": 798,\n    \"Titania\": 799,\n    \"Oberon\": 800,\n    \"Ariel\": 801,\n    \"Umbriel\": 802,\n    \"Triton\": 803,\n    \"Nereid\": 804,\n    \"Charon\": 805,\n    \"Styx\": 806,\n    \"Kerberos\": 807,\n    \"Halimede\": 808,\n    \"Sao\": 809,\n    \"Nix\": 810,\n    \"Hydra\": 811,\n    \"Miranda\": 812,\n    \"Titania\": 813,\n    \"Oberon\": 814,\n    \"Ariel\": 815,\n    \"Umbriel\": 816,\n    \"Triton\": 817,\n    \"Nereid\": 818,\n    \"Charon\": 819,\n    \"Styx\": 820,\n    \"Kerberos\": 821,\n    \"Halimede\": 822,\n    \"Sao\": 823,\n    \"Nix\": 824,\n    \"Hydra\": 825,\n    \"Miranda\": 826,\n    \"Titania\": 827,\n    \"Oberon\": 828,\n    \"Ariel\": 829,\n    \"Umbriel\": 830,\n    \"Triton\": 831,\n    \"Nereid\": 832,\n    \"Charon\": 833,\n    \"Styx\": 834,\n    \"Kerberos\": 835,\n    \"Halimede\": 836,\n    \"Sao\": 837,\n    \"Nix\": 838,\n    \"Hydra\": 839,\n    \"Miranda\": 840,\n    \"Titania\": 841,\n    \"Oberon\": 842,\n    \"Ariel\": 843,\n    \"Umbriel\": 844,\n    \"Triton\": 845,\n    \"Nereid\": 846,\n    \"Charon\": 847,\n    \"Styx\": 848,\n    \"Kerberos\": 849,\n    \"Halimede\": 850,\n    \"Sao\": 851,\n    \"Nix\": 852,\n    \"Hydra\": 853,\n    \"Miranda\": 854,\n    \"Titania\": 855,\n    \"Oberon\": 856,\n    \"Ariel\": 857,\n    \"Umbriel\": 858,\n    \"Triton\": 859,\n    \"Nereid\": 860,\n    \"Charon\": 861,\n    \"Styx\": 862,\n    \"Kerberos\": 863,\n    \"Halimede\": 864,\n    \"Sao\": 865,\n    \"Nix\": 866,\n    \"Hydra\": 867,\n    \"Miranda\": 868,\n    \"Titania\": 869,\n    \"Oberon\": 870,\n    \"Ariel\": 871,\n    \"Umbriel\": 872,\n    \"Triton\": 873,\n    \"Nereid\": 874,\n    \"Charon\": 875,\n    \"Styx\": 876,\n    \"Kerberos\": 877,\n    \"Halimede\": 878,\n    \"Sao\": 879,\n    \"Nix\": 880,\n    \"Hydra\": 881,\n    \"Miranda\": 882,\n    \"Titania\": 883,\n    \"Oberon\": 884,\n    \"Ariel\": 885,\n    \"Umbriel\": 886,\n    \"Triton\": 887,\n    \"Nereid\": 888,\n    \"Charon\": 889,\n    \"Styx\": 890,\n    \"Kerberos\": 891,\n    \"Halimede\": 892,\n    \"Sao\": 893,\n    \"Nix\": 894,\n    \"Hydra\": 895,\n    \"Miranda\": 896,\n    \"Titania\": 897,\n    \"Oberon\": 898,\n    \"Ariel\": 899,\n    \"Umbriel\": 900,\n    \"Triton\": 901,\n    \"Nereid\": 902,\n    \"Charon\": 903,\n    \"Styx\": 904,\n    \"Kerberos\": 905,\n    \"Halimede\": 906,\n    \"Sao\": 907,\n    \"Nix\": 908,\n    \"Hydra\": 909,\n    \"Miranda\": 910,\n    \"Titania\": 911,\n    \"Oberon\": 912,\n    \"Ariel\": 913,\n    \"Umbriel\": 914,\n    \"Triton\": 915,\n    \"Nereid\": 916,\n    \"Charon\": 917,\n    \"Styx\": 918,\n    \"Kerberos\": 919,\n    \"Halimede\": 920,\n    \"Sao\": 921,\n    \"Nix\": 922,\n    \"Hydra\": 923,\n    \"Miranda\": 924,\n    \"Titania\": 925,\n    \"Oberon\": 926,\n    \"Ariel\": 927,\n    \"Umbriel\": 928,\n    \"Triton\": 929,\n    \"Nereid\": 930,\n    \"Charon\": 931,\n    \"Styx\": 932,\n    \"Kerberos\": 933,\n    \"Halimede\": 934,\n    \"Sao\": 935,\n    \"Nix\": 936,\n    \"Hydra\": 937,\n    \"Miranda\": 938,\n    \"Titania\": 939,\n    \"Oberon\": 940,\n    \"Ariel\": 941,\n    \"Umbriel\": 942,\n    \"Triton\": 943,\n    \"Nereid\": 944,\n    \"Charon\": 945,\n    \"Styx\": 946,\n    \"Kerberos\": 947,\n    \"Halimede\": 948,\n    \"Sao\": 949,\n    \"Nix\": 950,\n    \"Hydra\": 951,\n    \"Miranda\": 952,\n    \"Titania\": 953,\n    \"Oberon\": 954,\n    \"Ariel\": 955,\n    \"Umbriel\": 956,\n    \"Triton\": 957,\n    \"Nereid\": 958,\n    \"Charon\": 959,\n    \"Styx\": 960,\n    \"Kerberos\": 961,\n    \"Halimede\": 962,\n    \"Sao\": 963,\n    \"Nix\": 964,\n    \"Hydra\": 965,\n    \"Miranda\": 966,\n    \"Titania\": 967,\n    \"Oberon\": 968,\n    \"Ariel\": 969,\n    \"Umbriel\": 970,\n    \"Triton\": 971,\n    \"Nereid\": 972,\n    \"Charon\": 973,\n    \"Styx\": 974,\n    \"Kerberos\": 975,\n    \"Halimede\": 976,\n    \"Sao\": 977,\n    \"Nix\": 978,\n    \"Hydra\": 979,\n    \"Miranda\": 980,\n    \"Titania\": 981,\n    \"Oberon\": 982,\n    \"Ariel\": 983,\n    \"Umbriel\": 984,\n    \"Triton\": 985,\n    \"Nereid\": 986,\n    \"Charon\": 987,\n    \"Styx\": 988,\n    \"Kerberos\": 989,\n    \"Halimede\": 990,\n    \"Sao\": 991,\n    \"Nix\": 992,\n    \"Hydra\": 993,\n    \"Miranda\": 994,\n    \"Titania\": 995,\n    \"Oberon\": 996,\n    \"Ariel\": 997,\n    \"Umbriel\": 998,\n    \"Triton\": 999,\n    \"Nereid\": 1000,\n    \"Charon\": 1001,\n    \"Styx\": 1002,\n    \"Kerberos\": 1003,\n    \"Halimede\": 1004,\n    \"Sao\": 1005,\n    \"Nix\": 1006,\n    \"Hydra\": 1007,\n    \"Miranda\": 1008,\n    \"Titania\": 1009,\n    \"Oberon\": 1010,\n    \"Ariel\": 1011,\n    \"Umbriel\": 1012,\n    \"Triton\": 1013,\n    \"Nereid\": 1014,\n    \"Charon\": 1015,\n    \"Styx\": 1016,\n    \"Kerberos\": 1017,\n    \"Halimede\": 1018,\n    \"Sao\": 1019,\n    \"Nix\": 1020,\n    \"Hydra\": 1021,\n    \"Miranda\": 1022,\n    \"Titania\": 1023,\n    \"Oberon\": 1024,\n    \"Ariel\": 1025,\n    \"Umbriel\": 1026,\n    \"Triton\": 1027,\n    \"Nereid\": 1028,\n    \"Charon\": 1029,\n    \"Styx\": 1030,\n    \"Kerberos\": 1031,\n    \"Halimede\": 1032,\n    \"Sao\": 1033,\n    \"Nix\": 1034,\n    \"Hydra\": 1035,\n    \"Miranda\": 1036,\n    \"Titania\": 1037,\n    \"Oberon\": 1038,\n    \"Ariel\": 1039,\n    \"Umbriel\": 1040,\n    \"Triton\": 1041,\n    \"Nereid\": 1042,\n    \"Charon\": 1043,\n    \"Styx\": 1044,\n    \"Kerberos\": 1045,\n    \"Halimede\": 1046,\n    \"Sao\": 1047,\n    \"Nix\": 1048,\n    \"Hydra\": 1049,\n    \"Miranda\": 1050,\n    \"Titania\": 1051,\n    \"Oberon\": 1052,\n    \"Ariel\": 1053,\n    \"Umbriel\": 1054,\n    \"Triton\": 1055,\n    \"Nereid\": 1056,\n    \"Charon\": 1057,\n    \"Styx\": 1058,\n    \"Kerberos\": 1059,\n    \"Halimede\": 1060,\n    \"Sao\": 1061,\n    \"Nix\": 1062,\n    \"Hydra\": 1063,\n    \"Miranda\": 1064,\n    \"Titania\": 1065,\n    \"Oberon\": 1066,\n    \"Ariel\": 1067,\n    \"Umbriel\": 1068,\n    \"Triton\": 1069,\n    \"Nereid\": 1070,\n    \"Charon\": 1071,\n    \"Styx\": 1072,\n    \"Kerberos\": 1073,\n    \"Halimede\": 1074,\n    \"Sao\": 1075,\n    \"Nix\": 1076,\n    \"Hydra\": 1077,\n    \"Miranda\": 1078,\n    \"Titania\": 1079,\n    \"Oberon\": 1080,\n    \"Ariel\": 1081,\n    \"Umbriel\": 1082,\n    \"Triton\": 1083,\n    \"Nereid\": 1084,\n    \"Charon\": 1085,\n    \"Styx\": 1086,\n    \"Kerberos\": 1087,\n    \"Halimede\": 1088,\n    \"Sao\": 1089,\n    \"Nix\": 1090,\n    \"Hydra\": 1091,\n    \"Miranda\": 1092,\n    \"Titania\": 1093,\n    \"Oberon\": 1094,\n    \"Ariel\": 1095,\n    \"Umbriel\": 1096,\n    \"Triton\": 1097,\n    \"Nereid\": 1098,\n    \"Charon\": 1099,\n    \"Styx\": 1100,\n    \"Kerberos\": 1101,\n    \"Halimede\": 1102,\n    \"Sao\": 1103,\n    \"Nix\": 1104,\n    \"Hydra\": 1105,\n    \"Miranda\": 1106,\n    \"Titania\": 1107,\n    \"Oberon\": 1108,\n    \"Ariel\": 1109,\n    \"Umbriel\": 1110,\n    \"Triton\": 1111,\n    \"Nereid\": 1112,\n    \"Charon\": 1113,\n    \"Styx\": 1114,\n    \"Kerberos\": 1115,\n    \"Halimede\": 1116,\n    \"Sao\": 1117,\n    \"Nix\": 1118,\n    \"Hydra\": 1119,\n    \"Miranda\": 1120,\n    \"Titania\": 1121,\n    \"Oberon\": 1122,\n    \"Ariel\": 1123,\n    \"Umbriel\": 1124,\n    \"Triton\": 1125,\n    \"Nereid\": 1126,\n    \"Charon\": 1127,\n    \"Styx\": 1128,\n    \"Kerberos\": 1129,\n    \"Halimede\": 1130,\n    \"Sao\": 1131,\n    \"Nix\": 1132,\n    \"Hydra\": 1133,\n    \"Miranda\": 1134,\n    \"Titania\": 1135,\n    \"Oberon\": 1136,\n    \"Ariel\": 1137,\n    \"Umbriel\": 1138,\n    \"Triton\": 1139,\n    \"Nereid\": 1140,\n    \"Charon\": 1141,\n    \"Styx\": 1142,\n    \"Kerberos\": 1143,\n    \"Halimede\": 1144,\n    \"Sao\": 1145,\n    \"Nix\": 1146,\n    \"Hydra\": 1147,\n    \"Miranda\": 1148,\n    \"Titania\": 1149,\n    \"Oberon\": 1150,\n    \"Ariel\": 1151,\n    \"Umbriel\": 1152,\n    \"Triton\": 1153,\n    \"Nereid\": 1154,\n    \"Charon\": 1155,\n    \"Styx\": 1156,\n    \"Kerberos\": 1157,\n    \"Halimede\": 1158,\n    \"Sao\": 1159,\n    \"Nix\": 1160,\n    \"Hydra\": 1161,\n    \"Miranda\": 1162,\n    \"Titania\": 1163,\n    \"Oberon\": 1164,\n    \"Ariel\": 1165,\n    \"Umbriel\": 1166,\n    \"Triton\": 1167,\n    \"Nereid\": 1168,\n    \"Charon\": 1169,\n    \"Styx\": 1170,\n    \"Kerberos\": 1171,\n    \"Halimede\": 1172,\n    \"Sao\": 1173,\n    \"Nix\": 1174,\n    \"Hydra\": 1175,\n    \"Miranda\": 1176,\n    \"Titania\": 1177,\n    \"Oberon\": 1178,\n    \"Ariel\": 1179,\n    \"Umbriel\": 1180,\n    \"Triton\": 1181,\n    \"Nereid\": 1182,\n    \"Charon\": 1183,\n    \"Styx\": 1184,\n    \"Kerberos\": 1185,\n    \"Halimede\": 1186,\n    \"Sao\": 1187,\n    \"Nix\": 1188,\n    \"Hydra\": 1189,\n    \"Miranda\": 1190,\n    \"Titania\": 1191,\n    \"Oberon\": 1192,\n    \"Ariel\": 1193,\n    \"Umbriel\": 1194,\n    \"Triton\": 1195,\n    \"Nereid\": 1196,\n    \"Charon\": 1197,\n    \"Styx\": 1198,\n    \"Kerberos\": 1199,\n    \"Halimede\": 1200,\n    \"Sao\": 1201,\n    \"Nix\": 1202,\n    \"Hydra\": 1203,\n    \"Miranda\": 1204,\n    \"Titania\": 1205,\n    \"Oberon\": 1206,\n    \"Ariel\": 1207,\n    \"Umbriel\": 1208,\n    \"Triton\": 1209,\n    \"Nereid\": 1210,\n    \"Charon\": 1211,\n    \"Styx\": 1212,\n    \"Kerberos\": 1213,\n    \"Halimede\": 1214,\n    \"Sao\": 1215,\n    \"Nix\": 1216,\n    \"Hydra\": 1217,\n    \"Miranda\": 1218,\n    \"Titania\": 1219,\n    \"Oberon\": 1220,\n    \"Ariel\": 1221,\n    \"Umbriel\": 1222,\n    \"Triton\": 1223,\n    \"Nereid\": 1224,\n    \"Charon\": 1225,\n    \"Styx\": 1226,\n    \"Kerberos\": 1227,\n    \"Halimede\": 1228,\n    \"Sao\": 1229,\n    \"Nix\": 1230,\n    \"Hydra\": 1231,\n    \"Miranda\": 1232,\n    \"Titania\": 1233,\n    \"Oberon\": 1234,\n    \"Ariel\": 1235,\n    \"Umbriel\": 1236,\n    \"Triton\": 1237,\n    \"Nereid\": 1238,\n    \"Charon\": 1239,\n    \"Styx\": 1240,\n    \"Kerberos\": 1241,\n    \"Halimede\": 1242,\n    \"Sao\": 1243,\n    \"Nix\": 1244,\n    \"Hydra\": 1245,\n    \"Miranda\": 1246,\n    \"Titania\": 1247,\n    \"Oberon\": 1248,\n    \"Ariel\": 1249,\n    \"Umbriel\": 1250,\n    \"Triton\": 1251,\n    \"Nereid\": 1252,\n    \"Charon\": 1253,\n    \"Styx\": 1254,\n    \"Kerberos\": 1255,\n    \"Halimede\": 1256,\n    \"Sao\": 1257,\n    \"Nix\": 1258,\n    \"Hydra\": 1259,\n    \"Miranda\": 1260,\n    \"Titania\": 1261,\n    \"Oberon\": 1262,\n    \"Ariel\": 1263,\n    \"Umbriel\": 1264,\n    \"Triton\": 1265,\n    \"Nereid\": 1266,\n    \"Charon\": 1267,\n    \"Styx\": 1268,\n    \"Kerberos\": 1269,\n    \"Halimede\": 1270,\n    \"Sao\": 1271,\n    \"Nix\": 1272,\n    \"Hydra\": 1273,\n    \"Miranda\": 1274,\n    \"Titania\": 1275,\n    \"Oberon\": 1276,\n    \"Ariel\": 1277,\n    \"Umbriel\": 1278,\n    \"Triton\": 1279,\n    \"Nereid\": 1280,\n    \"Charon\": 1281,\n    \"Styx\": 1282,\n    \"Kerberos\": 1283,\n    \"Halimede\": 1284,\n    \"Sao\": 1285,\n    \"Nix\": 1286,\n    \"Hydra\": 1287,\n    \"Miranda\": 1288,\n    \"Titania\": 1289,\n    \"Oberon\": 1290,\n    \"Ariel\": 1291,\n    \"Umbriel\": 1292,\n    \"Triton\": 1293,\n    \"Nereid\": 1294,\n    \"Charon\": 1295,\n    \"Styx\": 1296,\n    \"Kerberos\": 1297,\n    \"Halimede\": 1298,\n    \"Sao\": 1299,\n    \"Nix\": 1300,\n    \"Hydra\": 1301,\n    \"Miranda\": 1302,\n    \"Titania\": 1303,\n    \"Oberon\": 1304,\n    \"Ariel\": 1305,\n    \"Umbriel\": 1306,\n    \"Triton\": 1307,\n    \"Nereid\": 1308,\n    \"Charon\": 1309,\n    \"Styx\": 1310,\n    \"Kerberos\": 1311,\n    \"Halimede\": 1312,\n    \"Sao\": 1313,\n    \"Nix\": 1314,\n    \"Hydra\": 1315,\n    \"Miranda\": 1316,\n    \"Titania\": 1317,\n    \"Oberon\": 1318,\n    \"Ariel\": 1319,\n    \"Umbriel\": 1320,\n    \"Triton\": 1321,\n    \"Nereid\": 1322,\n    \"Charon\": 1323,\n    \"Styx\": 1324,\n    \"Kerberos\": 1325,\n    \"Halimede\": 1326,\n    \"Sao\": 1327,\n    \"Nix\": 1328,\n    \"Hydra\": 1329,\n    \"Miranda\": 1330,\n    \"Titania\": 1331,\n    \"Oberon\": 1332,\n    \"Ariel\": 1333,\n    \"Umbriel\": 1334,\n    \"Triton\": 1335,\n    \"Nereid\": 1336,\n    \"Charon\": 1337,\n    \"Styx\": 1338,\n    \"Kerberos\": 1339,\n    \"Halimede\": 1340,\n    \"Sao\": 1341,\n    \"Nix\": 1342,\n    \"Hydra\": 1343,\n    \"Miranda\": 1344,\n    \"Titania\": 1345,\n    \"Oberon\": 1346,\n    \"Ariel\": 1347,\n    \"Umbriel\": 1348,\n    \"Triton\": 1349,\n    \"Nereid\": 1350,\n    \"Charon\": 1351,\n    \"Styx\": 1352,\n    \"Kerberos\": 1353,\n    \"Halimede\": 1354,\n    \"Sao\": 1355,\n    \"Nix\": 1356,\n    \"Hydra\": 1357,\n    \"Miranda\": 1358,\n    \"Titania\": 1359,\n    \"Oberon\": 1360,\n    \"Ariel\": 1361,\n    \"Umbriel\": 1362,\n    \"Triton\": 1363,\n    \"Nereid\": 1364,\n    \"Charon\": 1365,\n    \"Styx\": 1366,\n    \"Kerberos\": 1367,\n    \"Halimede\": 1368,\n    \"Sao\": 1369,\n    \"Nix\": 1370,\n    \"Hydra\": 1371,\n    \"Miranda\": 1372,\n    \"Titania\": 1373,\n    \"Oberon\": 1374,\n    \"Ariel\": 1375,\n    \"Umbriel\": 1376,\n    \"Triton\": 1377,\n    \"Nereid\": 1378,\n    \"Charon\": 1379,\n    \"Styx\": 1380,\n    \"Kerberos\": 1381,\n    \"Halimede\": 1382,\n    \"Sao\": 1383,\n    \"Nix\": 1384,\n    \"Hydra\": 1385,\n    \"Miranda\": 1386,\n    \"Titania\": 1387,\n    \"Oberon\": 1388,\n    \"Ariel\": 1389,\n    \"Umbriel\": 1390,\n    \"Triton\": 1391,\n    \"Nereid\": 1392,\n    \"Charon\": 1393,\n    \"Styx\": 1394,\n    \"Kerberos\": 1395,\n    \"Halimede\": 1396,\n    \"Sao\": 1397,\n    \"Nix\": 1398,\n    \"Hydra\": 1399,\n    \"Miranda\": 1400,\n    \"Titania\": 1401,\n    \"Oberon\": 1402,\n    \"Ariel\": 1403,\n    \"Umbriel\": 1404,\n    \"Triton\": 1405,\n    \"Nereid\": 1406,\n    \"Charon\": 1407,\n    \"Styx\": 1408,\n    \"Kerberos\": 1409,\n    \"Halimede\": 1410,\n    \"Sao\": 1411,\n    \"Nix\": 1412,\n    \"Hydra\": 1413,\n    \"Miranda\": 1414,\n    \"Titania\": 1415,\n    \"Oberon\": 1416,\n    \"Ariel\": 1417,\n    \"Umbriel\": 1418,\n    \"Triton\": 1419,\n    \"Nereid\": 1420,\n    \"Charon\": 1421,\n    \"Styx\": 1422,\n    \"Kerberos\": 1423,\n    \"Halimede\": 1424,\n    \"Sao\": 1425,\n    \"Nix\": 1426,\n    \"Hydra\": 1427,\n    \"Miranda\": 1428,\n    \"Titania\": 1429,\n    \"Oberon\": 1430,\n    \"Ariel\": 1431,\n    \"Umbriel\": 1432,\n    \"Triton\": 1433,\n    \"Nereid\": 1434,\n    \"Charon\": 1435,\n    \"Styx\": 1436,\n    \"Kerberos\": 1437,\n    \"Halimede\": 1438,\n    \"Sao\": 1439,\n    \"Nix\": 1440,\n    \"Hydra\": 1441,\n    \"Miranda\": 1442,\n    \"Titania\": 1443,\n    \"Oberon\": 1444,\n    \"Ariel\": 1445,\n    \"Umbriel\": 1446,\n    \"Triton\": 1447,\n    \"Nereid\": 1448,\n    \"Charon\": 1449,\n    \"Styx\": 1450,\n    \"Kerberos\": 1451,\n    \"Halimede\": 1452,\n    \"Sao\": 1453,\n    \"Nix\": 1454,\n    \"Hydra\": 1455,\n    \"Miranda\": 1456,\n    \"Titania\": 1457,\n    \"Oberon\": 1458,\n    \"Ariel\": 1459,\n    \"Umbriel\": 1460,\n    \"Triton\": 1461,\n    \"Nereid\": 1462,\n    \"Charon\": 1463,\n    \"Styx\": 1464,\n    \"Kerberos\": 1465,\n    \"Halimede\": 1466,\n    \"Sao\": 1467,\n    \"Nix\": 1468,\n    \"Hydra\": 1469,\n    \"Miranda\": 1470,\n    \"Titania\": 1471,\n    \"Oberon\": 1472,\n    \"Ariel\": 1473,\n    \"Umbriel\": 1474,\n    \"Triton\": 1475,\n    \"Nereid\": 1476,\n    \"Charon\": 1477,\n    \"Styx\": 1478,\n    \"Kerberos\": 1479,\n    \"Halimede\": 1480,\n    \"Sao\": 1481,\n    \"Nix\": 1482,\n    \"Hydra\": 1483,\n    \"Miranda\": 1484,\n    \"Titania\": 1485,\n    \"Oberon\": 1486,\n    \"Ariel\": 1487,\n    \"Umbriel\": 1488,\n    \"Triton\": 1489,\n    \"Nereid\": 1490,\n    \"Charon\": 1491,\n    \"Styx\": 1492,\n    \"Kerberos\": 1493,\n    \"Halimede\": 1494,\n    \"Sao\": 1495,\n    \"Nix\": 1496,\n    \"Hydra\": 1497,\n    \"Miranda\": 1498,\n    \"Titania\": 1499,\n    \"Oberon\": 1500,\n    \"Ariel\": 1501,\n    \"Umbriel\": 1502,\n    \"Triton\": 1503,\n    \"Nereid\": 1504,\n    \"Charon\": 1505,\n    \"Styx\": 1506,\n    \"Kerberos\": 1507,\n    \"Halimede\": 1508,\n    \"Sao\": 1509,\n    \"Nix\": 1510,\n    \"Hydra\": 1511,\n    \"Miranda\": 1512,\n    \"Titania\": 1513,\n    \"Oberon\": 1514,\n    \"Ariel\": 1515,\n    \"Umbriel\": 1516,\n    \"Triton\": 1517,\n    \"Nereid\": 1518,\n    \"Charon\": 1519,\n    \"Styx\": 1520,\n    \"Kerberos\": 1521,\n    \"Halimede\": 1522,\n    \"Sao\": 1523,\n    \"Nix\": 1524,\n    \"Hydra\": 1525,\n    \"Miranda\": 1526,\n    \"Titania\": 1527,\n    \"Oberon\": 1528,\n    \"Ariel\": 1529,\n    \"Umbriel\": 1530,\n    \"Triton\": 1531,\n    \"Nereid\": 1532,\n    \"Charon\": 1533,\n    \"Styx\": 1534,\n    \"Kerberos\": 1535,\n    \"Halimede\": 1536,\n    \"Sao\": 1537,\n    \"Nix\": 1538,\n    \"Hydra\": 1539,\n    \"Miranda\": 1540,\n    \"Titania\": 1541,\n    \"Oberon\": 1542,\n    \"Ariel\": 1543,\n    \"Umbriel\": 1544,\n    \"Triton\": 1545,\n    \"Nereid\": 1546,\n    \"Charon\": 1547,\n    \"Styx\": 1548,\n    \"Kerberos\": 1549,\n    \"Halimede\": 1550,\n    \"Sao\": 1551,\n    \"Nix\": 1552,\n    \"Hydra\": 1553,\n    \"Miranda\": 1554,\n    \"Titania\": 1555,\n    \"Oberon\": 1556,\n    \"Ariel\": 1557,\n    \"Umbriel\": 1558,\n    \"Triton\": 1559,\n    \"Nereid\": 1560,\n    \"Charon\": 1561,\n    \"Styx\": 1562,\n    \"Kerberos\": 1563,\n    \"Halimede\": 1564,\n    \"Sao\": 1565,\n    \"Nix\": 1566,\n    \"Hydra\": 1567,\n    \"Miranda\": 1568,\n    \"Titania\": 1569,\n    \"Oberon\": 1570,\n    \"Ariel\": 1571,\n    \"Umbriel\": 1572,\n    \"Triton\": 1573,\n    \"Nereid\": 1574,\n    \"Charon\": 1575,\n    \"Styx\": 1576,\n    \"Kerberos\": 1577,\n    \"Halimede\": 1578,\n    \"Sao\": 1579,\n    \"Nix\": 1580,\n    \"Hydra\": 1581,\n    \"Miranda\": 1582,\n    \"Titania\": 1583,\n    \"Oberon\": 1584,\n    \"Ariel\": 1585,\n    \"Umbriel\": 1586,\n    \"Triton\": 1587,\n    \"Nereid\": 1588,\n    \"Charon\": 1589,\n    \"Styx\": 1590,\n    \"Kerberos\": 1591,\n    \"Halimede\": 1592,\n    \"Sao\": 1593,\n    \"Nix\": 1594,\n    \"Hydra\": 1595,\n    \"Miranda\": 1596,\n    \"Titania\": 1597,\n    \"Oberon\": 1598,\n    \"Ariel\": 1599,\n    \"Umbriel\": 1600,\n    \"Triton\": 1601,\n    \"Nereid\": 1602,\n    \"Charon\": 1603,\n    \"Styx\": 1604,\n    \"Kerberos\": 1605,\n    \"Halimede\": 1606,\n    \"Sao\": 1607,\n    \"Nix\": 1608,\n    \"Hydra\": 1609,\n    \"Miranda\": 1610,\n    \"Titania\": 1611,\n    \"Oberon\": 1612,\n    \"Ariel\": 1613,\n    \"Umbriel\": 1614,\n    \"Triton\": 1615,\n    \"Nereid\": 1616,\n    \"Charon\": 1617,\n    \"Styx\": 1618,\n    \"Kerberos\": 1619,\n    \"Halimede\": 1620,\n    \"Sao\": 1621,\n    \"Nix\": 1622,\n    \"Hydra\": 1623,\n    \"Miranda\": 1624,\n    \"Titania\": 1625,\n    \"Oberon\": 1626,\n    \"Ariel\": 1627,\n    \"Umbriel\": 1628,\n    \"Triton\": 1629,\n    \"Nereid\": 1630,\n    \"Charon\": 1631,\n    \"Styx\": 1632,\n    \"Kerberos\": 1633,\n    \"Halimede\": 1634,\n    \"Sao\": 1635,\n    \"Nix\": 1636,\n    \"Hydra\": 1637,\n    \"Miranda\": 1638,\n    \"Titania\": 1639,\n    \"Oberon\": 1640,\n    \"Ariel\": 1641,\n    \"Umbriel\": 1642,\n    \"Triton\": 1643,\n    \"Nereid\": 1644,\n    \"Charon\": 1645,\n    \"Styx\": 1646,\n    \"Kerberos\": 1647,\n    \"Halimede\": 1648,\n    \"Sao\": 1649,\n    \"Nix\": 1650,\n    \"Hydra\": 1651,\n    \"Miranda\": 1652,\n    \"Titania\": 1653,\n    \"Oberon\": 1654,\n    \"Ariel\": 1655,\n    \"Umbriel\": 1656,\n    \"Triton\": 1657,\n    \"Nereid\": 1658,\n    \"Charon\": 1659,\n    \"Styx\": 1660,\n    \"Kerberos\": 1661,\n    \"Halimede\": 1662,\n    \"Sao\": 1663,\n    \"Nix\": 1664,\n    \"Hydra\": 1665,\n    \"Miranda\": 1666,\n    \"Titania\": 1667,\n    \"Oberon\": 1668,\n    \"Ariel\": 1669,\n    \"Umbriel\": 1670,\n    \"Triton\": 1671,\n    \"Nereid\": 1672,\n    \"Charon\": 1673,\n    \"Styx\": 1674,\n    \"Kerberos\": 1675,\n    \"Halimede\": 1676,\n    \"Sao\": 1677,\n    \"Nix\": 1678,\n    \"Hydra\": 1679,\n    \"Miranda\": 1680,\n    \"Titania\": 1681,\n    \"Oberon\": 1682,\n    \"Ariel\": 1683,\n    \"Umbriel\": 1684,\n    \"Triton\": 1685,\n    \"Nereid\": 1686,\n    \"Charon\": 1687,\n    \"Styx\": 1688,\n    \"Kerberos\": 1689,\n    \"Halimede\": 1690,\n    \"Sao\": 1691,\n    \"Nix\": 1692,\n    \"Hydra\": 1693,\n    \"Miranda\": 1694,\n    \"Titania\": 1695,\n    \"Oberon\": 1696,\n    \"Ariel\": 1697,\n    \"Umbriel\": 1698,\n    \"Triton\": 1699,\n    \"Nereid\": 1700,\n    \"Charon\": 1701,\n    \"Styx\": 1702,\n    \"Kerberos\": 1703,\n    \"Halimede\": 1704,\n    \"Sao\": 1705,\n    \"Nix\": 1706,\n    \"Hydra\": 1707,\n    \"Miranda\": 1708,\n    \"Titania\": 1709,\n    \"Oberon\": 1710,\n    \"Ariel\": 1711,\n    \"Umbriel\": 1712,\n    \"Triton\": 1713,\n    \"Nereid\": 1714,\n    \"Charon\": 1715,\n    \"Styx\": 1716,\n    \"Kerberos\": 1717,\n    \"Halimede\": 1718,\n    \"Sao\": 1719,\n    \"Nix\": 1720,\n    \"Hydra\": 1721,\n    \"Miranda\": 1722,\n    \"Titania\": 1723,\n    \"Oberon\": 1724,\n    \"Ariel\": 1725,\n    \"Umbriel\": 1726,\n    \"Triton\": 1727,\n    \"Nereid\": 1728,\n    \"Charon\": 1729,\n    \"Styx\": 1730,\n    \"Kerberos\": 1731,\n    \"Halimede\": 1732,\n    \"Sao\": 1733,\n    \"Nix\": 1734,\n    \"Hydra\": 1735,\n    \"Miranda\": 1736,\n    \"Titania\": 1737,\n    \"Oberon\": 1738,\n    \"Ariel\": 1739,\n    \"Umbriel\": 1740,\n    \"Triton\": 1741,\n    \"Nereid\": 1742,\n    \"Charon\": 1743,\n    \"Styx\": 1744,\n    \"Kerberos\": 1745,\n    \"Halimede\": 1746,\n    \"Sao\": 1747,\n    \"Nix\": 1748,\n    \"Hydra\": 1749,\n    \"Miranda\": 1750,\n    \"Titania\": 1751,\n    \"Oberon\": 1752,\n    \"Ariel\": 1753,\n    \"Umbriel\": 1754,\n    \"Triton\": 1755,\n    \"Nereid\": 1756,\n    \"Charon\": 1757,\n    \"Styx\": 1758,\n    \"Kerberos\": 1759,\n    \"Halimede\": 1760,\n    \"Sao\": 1761,\n    \"Nix\": 1762,\n    \"Hydra\": 1763,\n    \"Miranda\": 1764,\n    \"Titania\": 1765,\n    \"Oberon\": 1766,\n    \"Ariel\": 1767,\n    \"Umbriel\": 1768,\n    \"Triton\": 1769,\n    \"Nereid\": 1770,\n    \"Charon\": 1771,\n    \"Styx\": 1772,\n    \"Kerberos\": 1773,\n    \"Halimede\": 1774,\n    \"Sao\": 1775,\n    \"Nix\": 1776,\n    \"Hydra\": 1777,\n    \"Miranda\": 1778,\n    \"Titania\": 1779,\n    \"Oberon\": 1780,\n    \"Ariel\": 1781,\n    \"Umbriel\": 1782,\n    \"Triton\": 1783,\n    \"Nereid\": 1784,\n    \"Charon\": 1785,\n    \"Styx\": 1786,\n    \"Kerberos\": 1787,\n    \"Halimede\": 1788,\n    \"Sao\": 1789,\n    \"Nix\": 1790,\n    \"Hydra\": 1791,\n    \"Miranda\": 1792,\n    \"Titania\": 1793,\n    \"Oberon\": 1794,\n    \"Ariel\": 1795,\n    \"Umbriel\": 1796,\n    \"Triton\": 1797,\n    \"Nereid\": 1798,\n    \"Charon\": 1799,\n    \"Styx\": 1800,\n    \"Kerberos\": 1801,\n    \"Halimede\": 1802,\n    \"Sao\": 1803,\n    \"Nix\": 1804,\n    \"Hydra\": 1805,\n    \"Miranda\": 1806,\n    \"Titania\": 1807,\n    \"Oberon\": 1808,\n    \"Ariel\": 1809,\n    \"Umbriel\": 1810,\n    \"Triton\": 1811,\n    \"Nereid\": 1812,\n    \"Charon\": 1813,\n    \"Styx\": 1814,\n    \"Kerberos\": 1815,\n    \"Halimede\": 1816,\n    \"Sao\": 1817,\n    \"Nix\": 1818,\n    \"Hydra\": 1819,\n    \"Miranda\": 1820,\n    \"Titania\": 1821,\n    \"Oberon\": 1822,\n    \"Ariel\": 1823,\n    \"Umbriel\": 1824,\n    \"Triton\": 1825,\n    \"Nereid\": 1826,\n    \"Charon\": 1827,\n    \"Styx\": 1828,\n    \"Kerberos\": 1829,\n    \"Halimede\": 1830,\n    \"Sao\": 1831,\n    \"Nix\": 1832,\n    \"Hydra\": 1833,\n    \"Miranda\": 1834,\n    \"Titania\": 1835,\n    \"Oberon\": 1836,\n    \"Ariel\": 1837,\n    \"Umbriel\": 1838,\n    \"Triton\": 1839,\n    \"Nereid\": 1840,\n    \"Charon\": 1841,\n    \"Styx\": 1842,\n    \"Kerberos\": 1843,\n    \"Halimede\": 1844,\n    \"Sao\": 1845,\n    \"Nix\": 1846,\n    \"Hydra\": 1847,\n    \"Miranda\": 1848,\n    \"Titania\": 1849,\n    \"Oberon\": 1850,\n    \"Ariel\": 1851,\n    \"Umbriel\": 1852,\n    \"Triton\": 1853,\n    \"Nereid\": 1854,\n    \"Charon\": 1855,\n    \"Styx\": 1856,\n    \"Kerberos\": 1857,\n    \"Halimede\": 1858,\n    \"Sao\": 1859,\n    \"Nix\": 1860,\n    \"Hydra\": 1861,\n    \"Miranda\": 1862,\n    \"Titania\": 1863,\n    \"Oberon\": 1864,\n    \"Ariel\": 1865,\n    \"Umbriel\": 1866,\n    \"Triton\": 1867,\n    \"Nereid\": 1868,\n    \"Charon\": 1869,\n    \"Styx\": 1870,\n    \"Kerberos\": 1871,\n    \"Halimede\": 1872,\n    \"Sao\": 1873,\n    \"Nix\": 1874,\n    \"Hydra\": 1875,\n    \"Miranda\": 1876,\n    \"Titania\": 1877,\n    \"Oberon\": 1878,\n    \"Ariel\": 1879,\n    \"Umbriel\": 1880,\n    \"Triton\": 1881,\n    \"Nereid\": 1882,\n    \"Charon\": 1883,\n    \"Styx\": 1884,\n    \"Kerberos\": 1885,\n    \"Halimede\": 1886,\n    \"Sao\": 1887,\n    \"Nix\": 1888,\n    \"Hydra\": 1889,\n    \"Miranda\": 1890,\n    \"Titania\": 1891,\n    \"Oberon\": 1892,\n    \"Ariel\": 1893,\n    \"Umbriel\": 1894,\n    \"Triton\": 1895,\n    \"Nereid\": 1896,\n    \"Charon\": 1897,\n    \"Styx\": 1898,\n    \"Kerberos\": 1899,\n    \"Halimede\": 1900,\n    \"Sao\": 1901,\n    \"Nix\": 1902,\n    \"Hydra\": 1903,\n    \"Miranda\": 1904,\n    \"Titania\": 1905,\n    \"Oberon\": 1906,\n    \"Ariel\": 1907,\n    \"Umbriel\": 1908,\n    \"Triton\": 1909,\n    \"Nereid\": 1910,\n    \"Charon\": 1911,\n    \"Styx\": 1912,\n    \"Kerberos\": 1913,\n    \"Halimede\": 1914,\n    \"Sao\": 1915,\n    \"Nix\": 1916,\n    \"Hydra\": 1917,\n    \"Miranda\": 1918,\n    \"Titania\": 1919,\n    \"Oberon\": 1920,\n    \"Ariel\": 1921,\n    \"Umbriel\": 1922,\n    \"Triton\": 1923,\n    \"Nereid\": 1924,\n    \"Charon\": 1925,\n    \"Styx\": 1926,\n    \"Kerberos\": 1927,\n    \"Halimede\": 1928,\n    \"Sao\": 1929,\n    \"Nix\": 1930,\n    \"Hydra\": 1931,\n    \"Miranda\": 1932,\n    \"Titania\": 1933,\n    \"Oberon\": 1934,\n    \"Ariel\": 1935,\n    \"Umbriel\": 1936,\n    \"Triton\": 1937,\n    \"Nereid\": 1938,\n    \"Charon\": 1939,\n    \"Styx\": 1940,\n    \"Kerberos\": 1941,\n    \"Halimede\": 1942,\n    \"Sao\": 1943,\n    \"Nix\": 1944,\n    \"Hydra\": 1945,\n    \"Miranda\": 1946,\n    \"Titania\": 1947,\n    \"Oberon\": 1948,\n    \"Ariel\": 1949,\n    \"Umbriel\": 1950,\n    \"Triton\": 1951,\n    \"Nereid\": 1952,\n    \"Charon\": 1953,\n    \"Styx\": 1954,\n    \"Kerberos\": 1955,\n    \"Halimede\": 1956,\n    \"Sao\": 1957,\n    \"Nix\": 1958,\n    \"Hydra\": 1959,\n    \"Miranda\": 1960,\n    \"Titania\": 1961,\n    \"Oberon\": 1962,\n    \"Ariel\": 1963,\n    \"Umbriel\": 1964,\n    \"Triton\": 1965,\n    \"Nereid\": 1966,\n    \"Charon\": 1967,\n    \"Styx\": 1968,\n    \"Kerberos\": 1969,\n    \"Halimede\": 1970,\n    \"Sao\": 1971,\n    \"Nix\": 1972,\n    \"Hydra\": 1973,\n    \"Miranda\": 1974,\n    \"Titania\": 1975,\n    \"Oberon\": 1976,\n    \"Ariel\": 1977,\n    \"Umbriel\": 1978,\n    \"Triton\": 1979,\n    \"Nereid\": 1980,\n    \"Charon\": 1981,\n    \"Styx\": 1982,\n    \"Kerberos\": 1983,\n    \"Halimede\": 1984,\n    \"Sao\": 1985,\n    \"Nix\": 1986,\n    \"Hydra\": 1987,\n    \"Miranda\": 1988,\n    \"Titania\": 1989,\n    \"Oberon\": 1990,\n    \"Ariel\": 1991,\n    \"Umbriel\": 1992,\n    \"Triton\": 1993,\n    \"Nereid\": 1994,\n    \"Charon\": 1995,\n    \"Styx\": 1996,\n    \"Kerberos\": 1997,\n    \"Halimede\": 1998,\n    \"Sao\": 1999,\n    \"Nix\": 2000,\n    \"Hydra\": 2001,\n    \"Miranda\": 2002,\n    \"Titania\": 2003,\n    \"Oberon\": 2004,\n    \"Ariel\": 2005,\n    \"Umbriel\": 2006,\n    \"Triton\": 2007,\n    \"Nereid\": 2008,\n    \"Charon\": 2009,\n    \"Styx\": 2010,\n    \"Kerberos\": 2011,\n    \"Halimede\": 2012,\n    \"Sao\": 2013,\n    \"Nix\": 2014,\n    \"Hydra\": 2015,\n    \"Miranda\": 2016,\n    \"Titania\": 2017,\n    \"Oberon\": 2018,\n    \"Ariel\": 2019,\n    \"Umbriel\": 2020,\n    \"Triton\": 2021,\n    \"Nereid\": 2022,\n    \"Charon\": 2023,\n    \"Styx\": 2024,\n    \"Kerberos\": 2025,\n    \"Halimede\": 2026,\n    \"Sao\": 2027,\n    \"Nix\": 2028,\n    \"Hydra\": 2029,\n    \"Miranda\": 2030,\n    \"Titania\": 2031,\n    \"Oberon\": 2032,\n    \"Ariel\": 2033,\n    \"Umbriel\": 2034,\n    \"Triton\": 2035,\n    \"Nereid\": 2036,\n    \"Charon\": 2037,\n    \"Styx\": 2038,\n    \"Kerberos\": 2039,\n    \"Halimede\": 2040,\n    \"Sao\": 2041,\n    \"Nix\": 2042,\n    \"Hydra\": 2043,\n    \"Miranda\": 2044,\n    \"Titania\": 2045,\n    \"Oberon\": 2046,\n    \"Ariel\": 2047,\n    \"Umbriel\": 2048,\n    \"Triton\": 2049,\n    \"Nereid\": 2050,\n    \"Charon\": 2051,\n    \"Styx\": 2052,\n    \"Kerberos\": 2053,\n    \"Halimede\": 2054,\n    \"Sao\": 2055,\n    \"Nix\": 2056,\n    \"Hydra\": 2057,\n    \"Miranda\": 2058,\n    \"Titania\": 2059,\n    \"Oberon\": 2060,\n    \"Ariel\": 2061,\n    \"Umbriel\": 2062,\n    \"Triton\": 2063,\n    \"Nereid\": 2064,\n    \"Charon\": 2065,\n    \"Styx\": 2066,\n    \"Kerberos\": 2067,\n    \"Halimede\": 2068,\n    \"Sao\": 2069,\n    \"Nix\": 2070,\n    \"Hydra\": 2071,\n    \"Miranda\": 2072,\n    \"Titania\": 2073,\n    \"Oberon\": 2074,\n    \"Ariel\": 2075,\n    \"Umbriel\": 2076,\n    \"Triton\": 2077,\n    \"Nereid\": 2078,\n    \"Charon\": 2079,\n    \"Styx\": 2080,\n    \"Kerberos\": 2081,\n    \"Halimede\": 2082,\n    \"Sao\": 2083,\n    \"Nix\": 2084,\n    \"Hydra\": 2085,\n    \"Miranda\": 2086,\n    \"Titania\": 2087,\n    \"Oberon\": 2088,\n    \"Ariel\": 2089,\n    \"Umbriel\": 2090,\n    \"Triton\": 2091,\n    \"Nereid\": 2092,\n    \"Charon\": 2093,\n    \"Styx\": 2094,\n    \"Kerberos\": 2095,\n    \"Halimede\": 2096,\n    \"Sao\": 2097,\n    \"Nix\": 2098,\n    \"Hydra\": 2099,\n    \"Miranda\": 2100,\n    \"Titania\": 2101,\n    \"Oberon\": 2102,\n    \"Ariel\": 2103,\n    \"Umbriel\": 2104,\n    \"Triton\": 2105,\n    \"Nereid\": 2106,\n    \"Charon\": 2107,\n    \"Styx\": 2108,\n    \"Kerberos\": 2109,\n    \"Halimede\": 2110,\n    \"Sao\": 2111,\n    \"Nix\": 2112,\n    \"Hydra\": 2113,\n    \"Miranda\": 2114,\n    \"Titania\": 2115,\n    \"Oberon\": 2116,\n    \"Ariel\": 2117,\n    \"Umbriel\": 2118,\n    \"Triton\": 2119,\n    \"Nereid\": 2120,\n    \"Charon\": 2121,\n    \"Styx\": 2122,\n    \"Kerberos\": 2123,\n    \"Halimede\": 2124,\n    \"Sao\": 2125,\n    \"Nix\": 2126,\n    \"Hydra\": 2127,\n    \"Miranda\": 2128,\n    \"Titania\": 2129,\n    \"Oberon\": 2130,\n    \"Ariel\": 2131,\n    \"Umbriel\": 2132,\n    \"Triton\": 2133,\n    \"Nereid\": 2134,\n    \"Charon\": 2135,\n    \"Styx\": 2136,\n    \"Kerberos\": 2137,\n    \"Halimede\": 2138,\n    \"Sao\": 2139,\n    \"Nix\": 2140,\n    \"Hydra\": 2141,\n    \"Miranda\": 2142,\n    \"Titania\": 2143,\n    \"Oberon\": 2144,\n    \"Ariel\": 2145,\n    \"Umbriel\": 2146,\n    \"Triton\": 2147,\n    \"Nereid\": 2148,\n    \"Charon\": 2149,\n    \"Styx\": 2150,\n    \"Kerberos\": 2151,\n    \"Halimede\": 2152,\n    \"Sao\": 2153,\n    \"Nix\": 2154,\n    \"Hydra\": 2155,\n    \"Miranda\": 2156,\n    \"Titania\": 2157,\n    \"Oberon\": 2158,\n    \"Ariel\": 2159,\n    \"Umbriel\": 2160,\n    \"Triton\": 2161,\n    \"Nereid\": 2162,\n    \"Charon\": 2163,\n    \"Styx\": 2164,\n    \"Kerberos\": 2165,\n    \"Halimede\": 2166,\n    \"Sao\": 2167,\n    \"Nix\": 2168,\n    \"Hydra\": 2169,\n    \"Miranda\": 2170,\n    \"Titania\": 2171,\n    \"Oberon\": 2172,\n    \"Ariel\": 2173,\n    \"Umbriel\": 2174,\n    \"Triton\": 2175,\n    \"Nereid\": 2176,\n    \"Charon\": 2177,\n    \"Styx\": 2178,\n    \"Kerberos\": 2179,\n    \"Halimede\": 2180,\n    \"Sao\": 2181,\n    \"Nix\": 2182,\n    \"Hydra\": 2183,\n    \"Miranda\": 2184,\n    \"Titania\": 2185,\n    \"Oberon\": 2186,\n    \"Ariel\": 2187,\n    \"Umbriel\": 2188,\n    \"Triton\": 2189,\n    \"Nereid\": 2190,\n    \"Charon\": 2191,\n    \"Styx\": 2192,\n    \"Kerberos\": 2193,\n    \"Halimede\": 2194,\n    \"Sao\": 2195,\n    \"Nix\": 2196,\n    \"Hydra\": 2197,\n    \"Miranda\": 2198,\n    \"Titania\": 2199,\n    \"Oberon\": 2200,\n    \"Ariel\": 2201,\n    \"Umbriel\": 2202,\n    \"Triton\": 2203,\n    \"Nereid\": 2204,\n    \"Charon\": 2205,\n    \"Styx\": 2206,\n    \"Kerberos\": 2207,\n    \"Halimede\": 2208,\n    \"Sao\": 2209,\n    \"Nix\": 2210,\n    \"Hydra\": 2211,\n    \"Miranda\": 2212,\n    \"Titania\": 2213,\n    \"Oberon\": 2214,\n    \"Ariel\": 2215,\n    \"Umbriel\": 2216,\n    \"Triton\": 2217,\n    \"Nereid\": 2218,\n    \"Charon\": 2219,\n    \"Styx\": 2220,\n    \"Kerberos\": 2221,\n    \"Halimede\": 2222,\n    \"Sao\": 2223,\n    \"Nix\": 2224,\n    \"Hydra\": 2225,\n    \"Miranda\": 2226,\n    \"Titania\": 2227,\n    \"Oberon\": 2228,\n    \"Ariel\": 2229,\n    \"Umbriel\": 2230,\n    \"Triton\": 2231,\n    \"Nereid\": 2232,\n    \"Charon\": 2233,\n    \"Styx\": 2234,\n    \"Kerberos\": 2235,\n    \"Halimede\": 2236,\n    \"Sao\": 2237,\n    \"Nix\": 2238,\n    \"Hydra\": 2239,\n    \"Miranda\": 2240,\n    \"Titania\": 2241,\n    \"Oberon\": 2242,\n    \"Ariel\": 2243,\n    \"Umbriel\": 2244,\n    \"Triton\": 2245,\n    \"Nereid\": 2246,\n    \"Charon\": 2247,\n    \"Styx\": 2248,\n    \"Kerberos\": 2249,\n    \"Halimede\": 2250,\n    \"Sao\": 2251,\n    \"Nix\": 2252,\n    \"Hydra\": 2253,\n    \"Miranda\": 2254,\n    \"Titania\": 2255,\n    \"Oberon\": 2256,\n    \"Ariel\": 2257,\n    \"Umbriel\": 2258,\n    \"Triton\": 2259,\n    \"Nereid\": 2260,\n    \"Charon\": 2261,\n    \"Styx\": 2262,\n    \"Kerberos\": 2263,\n    \"Halimede\": 2264,\n    \"Sao\": 2265,\n    \"Nix\": 2266,\n    \"Hydra\": 2267,\n    \"Miranda\": 2268,\n    \"Titania\": 2269,\n    \"Oberon\": 2270,\n    \"Ariel\": 2271,\n    \"Umbriel\": 2272,\n    \"Triton\": 2273,\n    \"Nereid\": 2274,\n    \"Charon\": 2275,\n    \"Styx\": 2276,\n    \"Kerberos\": 2277,\n    \"Halimede\": 2278,\n    \"Sao\": 2279,\n    \"Nix\": 2280,\n    \"Hydra\": 2281,\n    \"Miranda\": 2282,\n    \"Titania\": 2283,\n    \"Oberon\": 2284,\n    \"Ariel\": 2285,\n    \"Umbriel\": 2286,\n    \"Triton\": 2287,\n    \"Nereid\": 2288,\n    \"Charon\": 2289,\n    \"Styx\": 2290,\n    \"Kerberos\": 2291,\n    \"Halimede\": 2292,\n    \"Sao\": 2293,\n    \"Nix\": 2294,\n    \"Hydra\": 2295,\n    \"Miranda\": 2296,\n    \"Titania\": 2297,\n    \"Oberon\": 2298,\n    \"Ariel\": 2299,\n    \"Umbriel\": 2300,\n    \"Triton\": 2301,\n    \"Nereid\": 2302,\n    \"Charon\": 2303,\n    \"Styx\": 2304,\n    \"Kerberos\": 2305,\n    \"Halimede\": 2306,\n    \"Sao\": 2307,\n    \"Nix\": 2308,\n    \"Hydra\": 2309,\n    \"Miranda\": 2310,\n    \"Titania\": 2311,\n    \"Oberon\": 2312,\n    \"Ariel\": 2313,\n    \"Umbriel\": 2314,\n    \"Triton\": 2315,\n    \"Nereid\": 2316,\n    \"Charon\": 2317,\n    \"Styx\": 2318,\n    \"Kerberos\": 2319,\n    \"Halimede\": 2320,\n    \"Sao\": 2321,\n    \"Nix\": 2322,\n    \"Hydra\": 2323,\n    \"Miranda\": 2324,\n    \"Titania\": 2325,\n    \"Oberon\": 2326,\n    \"Ariel\": 2327,\n    \"Umbriel\": 2328,\n    \"Triton\": 2329,\n    \"Nereid\": 2330,\n    \"Charon\": 2331,\n    \"Styx\": 2332,\n    \"Kerberos\": 2333,\n    \"Halimede\": 2334,\n    \"Sao\": 2335,\n    \"Nix\": 2336,\n    \"Hydra\": 2337,\n    \"Miranda\": 2338,\n    \"Titania\": 2339,\n    \"Oberon\": 2340,\n    \"Ariel\": 2341,\n    \"Umbriel\": 2342,\n    \"Triton\": 2343,\n    \"Nereid\": 2344,\n    \"Charon\": 2345,\n    \"Styx\": 2346,\n    \"Kerberos\": 2347,\n    \"Halimede\": 2348,\n    \"Sao\": 2349,\n    \"Nix\": 2350,\n    \"Hydra\": 2351,\n    \"Miranda\": 2352,\n    \"Titania\": 2353,\n    \"Oberon\": 2354,\n    \"Ariel\": 2355,\n    \"Umbriel\": 2356,\n    \"Triton\": 2357,\n    \"Nereid\": 2358,\n    \"Charon\": 2359,\n    \"Styx\": 2360,\n    \"Kerberos\": 2361,\n    \"Halimede\": 2362,\n    \"Sao\": 2363,\n    \"Nix\": 2364,\n    \"Hydra\": 2365,\n    \"Miranda\": 2366,\n    \"Titania\": 2367,\n    \"Oberon\": 2368,\n    \"Ariel\": 2369,\n    \"Umbriel\": 2370,\n    \"Triton\": 2371,\n    \"Nereid\": 2372,\n    \"Charon\": 2373,\n    \"Styx\": 2374,\n    \"Kerberos\": 2375,\n    \"Halimede\": 2376,\n    \"Sao\": 2377,\n    \"Nix\": 2378,\n    \"Hydra\": 2379,\n    \"Miranda\": 2380,\n    \"Titania\": 2381,\n    \"Oberon\": 2382,\n    \"Ariel\": 2383,\n    \"Umbriel\": 2384,\n    \"Triton\": 2385,\n    \"Nereid\": 2386,\n    \"Charon\": 2387,\n    \"Styx\": 2388,\n    \"Kerberos\": 2389,\n    \"Halimede\": 2390,\n    \"Sao\": 2391,\n    \"Nix\": 2392,\n    \"Hydra\": 2393,\n    \"Miranda\": 2394,\n    \"Titania\": 2395,\n    \"Oberon\": 2396,\n    \"Ariel\": 2397,\n    \"Umbriel\": 2398,\n    \"Triton\": 2399,\n    \"Nereid\": 2400,\n    \"Charon\": 2401,\n    \"Styx\": 2402,\n    \"Kerberos\": 2403,\n    \"Halimede\": 2404,\n    \"Sao\": 2405,\n    \"Nix\": 2406,\n    \"Hydra\": 2407,\n    \"Miranda\": 2408,\n    \"Titania\": 2409,\n    \"Oberon\": 2410,\n    \"Ariel\": 2411,\n    \"Umbriel\": 2412,\n    \"Triton\": 2413,\n    \"Nereid\": 2414,\n    \"Charon\": 2415,\n    \"Styx\": 2416,\n    \"Kerberos\": 2417,\n    \"Halimede\": 2418,\n    \"Sao\": 2419,\n    \"Nix\": 2420,\n    \"Hydra\": 2421,\n    \"Miranda\": 2422,\n    \"Titania\": 2423,\n    \"Oberon\": 2424,\n    \"Ariel\": 2425,\n    \"Umbriel\": 2426,\n    \"Triton\": 2427,\n    \"Nereid\": 2428,\n    \"Charon\": 2429,\n    \"Styx\": 2430,\n    \"Kerberos\": 2431,\n    \"Halimede\": 2432,\n    \"Sao\": 2433,\n    \"Nix\": 2434,\n    \"Hydra\": 2435,\n    \"Miranda\": 2436,\n    \"Titania\": 2437,\n    \"Oberon\": 2438,\n    \"Ariel\": 2439,\n    \"Umbriel\": 2440,\n    \"Triton\": 2441,\n    \"Nereid\": 2442,\n    \"Charon\": 2443,\n    \"Styx\": 2444,\n    \"Kerberos\": 2445,\n    \"Halimede\": 2446,\n    \"Sao\": 2447,\n    \"Nix\": 2448,\n    \"Hydra\": 2449,\n    \"Miranda\": 2450,\n    \"Titania\": 2451,\n    \"Oberon\": 2452,\n    \"Ariel\": 2453,\n    \"Umbriel\": 2454,\n    \"Triton\": 2455,\n    \"Nereid\": 2456,\n    \"Charon\": 2457,\n    \"Styx\": 2458,\n    \"Kerberos\": 2459,\n    \"Halimede\": 2460,\n    \"Sao\": 2461,\n    \"Nix\": 2462,\n    \"Hydra\": 2463,\n    \"Miranda\": 2464,\n    \"Titania\": 2465,\n    \"Oberon\": 2466,\n    \"Ariel\": 2467,\n    \"Umbriel\": 2468,\n    \"Triton\": 2469,\n    \"Nereid\": 2470,\n    \"Charon\": 2471,\n    \"Styx\": 2472,\n    \"Kerberos\": 2473,\n    \"Halimede\": 2474,\n    \"Sao\": 2475,\n    \"Nix\": 2476,\n    \"Hydra\": 2477,\n    \"Miranda\": 2478,\n    \"Titania\": 2479,\n    \"Oberon\": 2480,\n    \"Ariel\": 2481,\n    \"Umbriel\": 2482,\n    \"Triton\": 2483,\n    \"Nereid\": 2484,\n    \"Charon\": 2485,\n    \"Styx\": 2486,\n    \"Kerberos\": 2487,\n    \"Halimede\": 2488,\n    \"Sao\": 2489,\n    \"Nix\": 2490,\n    \"Hydra\": 2491,\n    \"Miranda\": 2492,\n    \"Titania\": 2493,\n    \"Oberon\": 2494,\n    \"Ariel\": 2495,\n    \"Umbriel\": 2496,\n    \"Triton\": 2497,\n    \"Nereid\": 2498,\n    \"Charon\": 2499,\n    \"Styx\": 2500,\n    \"Kerberos\": 2501,\n    \"Halimede\": 2502,\n    \"Sao\": 2503,\n    \"Nix\": 2504,\n    \"Hydra\": 2505,\n    \"Miranda\": 2506,\n    \"Titania\": 2507,\n    \"Oberon\": 2508,\n    \"Ariel\": 2509,\n    \"Umbriel\": 2510,\n    \"Triton\": 2511,\n    \"Nereid\": 2512,\n    \"Charon\": 2513,\n    \"Styx\": 2514,\n    \"Kerberos\": 2515,\n    \"Halimede\": 2516,\n    \"Sao\": 2517,\n    \"Nix\": 2518,\n    \"Hydra\": 2519,\n    \"Miranda\": 2520,\n    \"Titania\": 2521,\n    \"Oberon\": 2522,\n    \"Ariel\": 2523,\n    \"Umbriel\": 2524,\n    \"Triton\": 2525,\n    \"Nereid\": 2526,\n    \"Charon\": 2527,\n    \"Styx\": 2528,\n    \"Kerberos\": 2529,\n    \"Halimede\": 2530,\n    \"Sao\": 2531,\n    \"Nix\": 2532,\n    \"Hydra\": 2533,\n    \"Miranda\": 2534,\n    \"Titania\": 2535,\n    \"Oberon\": 2536,\n    \"Ariel\": 2537,\n    \"Umbriel\": 2538,\n    \"Triton\": 2539,\n    \"Nereid\": 2540,\n    \"Charon\": 2541,\n    \"Styx\": 2542,\n    \"Kerberos\": 2543,\n    \"Halimede\": 2544,\n    \"Sao\": 2545,\n    \"Nix\": 2546,\n    \"Hydra\": 2547,\n    \"Miranda\": 2548,\n    \"Titania\": 2549,\n    \"Oberon\": 2550,\n    \"Ariel\": 2551,\n    \"Umbriel\": 2552,\n    \"Triton\": 2553,\n    \"Nereid\": 2554,\n    \"Charon\": 2555,\n    \"Styx\": 2556,\n    \"Kerberos\": 2557,\n    \"Halimede\": 2558,\n    \"Sao\": 2559,\n    \"Nix\": 2560,\n    \"Hydra\": 2561,\n    \"Miranda\": 2562,\n    \"Titania\": 2563,\n    \"Oberon\": 2564,\n    \"Ariel\": 2565,\n    \"Umbriel\": 2566,\n    \"Triton\": 2567,\n    \"Nereid\": 2568,\n    \"Charon\": 2569,\n    \"Styx\": 2570,\n    \"Kerberos\": 2571,\n    \"Halimede\": 2572,\n    \"Sao\": 2573,\n    \"Nix\": 2574,\n    \"Hydra\": 2575,\n    \"Miranda\": 2576,\n    \"Titania\": 2577,\n    \"Oberon\": 2578,\n    \"Ariel\": 2579,\n    \"Umbriel\": 2580,\n    \"Triton\": 2581,\n    \"Nereid\": 2582,\n    \"Charon\": 2583,\n    \"Styx\": 2584,\n    \"Kerberos\": 2585,\n    \"Halimede\": 2586,\n    \"Sao\": 2587,\n    \"Nix\": 2588,\n    \"Hydra\": 2589,\n    \"Miranda\": 2590,\n    \"Titania\": 2591,\n    \"Oberon\": 2592,\n    \"Ariel\": 2593,\n    \"Umbriel\": 2594,\n    \"Triton\": 2595,\n    \"Nereid\": 2596,\n    \"Charon\": 2597,\n    \"Styx\": 2598,\n    \"Kerberos\": 2599,\n    \"Halimede\": 2600,\n    \"Sao\": 2601,\n    \"Nix\": 2602,\n    \"Hydra\": 2603,\n    \"Miranda\": 2604,\n    \"Titania\": 2605,\n    \"Oberon\": 2606,\n    \"Ariel\": 2607,\n    \"Umbriel\": 2608,\n    \"Triton\": 2609,\n    \"Nereid\": 2610,\n    \"Charon\": 2611,\n    \"Styx\": 2612,\n    \"Kerberos\": 2613,\n    \"Halimede\": 2614,\n    \"Sao\": 2615,\n    \"Nix\": 2616,\n    \"Hydra\": 2617,\n    \"Miranda\": 2618,\n    \"Titania\": 2619,\n    \"Oberon\": 2620,\n    \"Ariel\": 2621,\n    \"Umbriel\": 2622,\n    \"Triton\": 2623,\n    \"Nereid\": 2624,\n    \"Charon\": 2625,\n    \"Styx\": 2626,\n    \"Kerberos\": 2627,\n    \"Halimede\": 2628,\n    \"Sao\": 2629,\n    \"Nix\": 2630,\n    \"Hydra\": 2631,\n    \"Miranda\": 2632,\n    \"Titania\": 2633,\n    \"Oberon\": 2634,\n    \"Ariel\": 2635,\n    \"Umbriel\": 2636,\n    \"Triton\": 2637,\n    \"Nereid\": 2638,\n    \"Charon\": 2639,\n    \"Styx\": 2640,\n    \"Kerberos\": 2641,\n    \"Halimede\": 2642,\n    \"Sao\": 2643,\n    \"Nix\": 2644,\n    \"Hydra\": 2645,\n    \"Miranda\": 2646,\n    \"Titania\": 2647,\n    \"Oberon\": 2648,\n    \"Ariel\": 2649,\n    \"Umbriel\": 2650,\n    \"Triton\": 2651,\n    \"Nereid\": 2652,\n    \"Charon\": 2653,\n    \"Styx\": 2654,\n    \"Kerberos\": 2655,\n    \"Halimede\": 2656,\n    \"Sao\": 2657,\n    \"Nix\": 2658,\n    \"Hydra\": 2659,\n    \"Miranda\": 2660,\n    \"Titania\": 2661,\n    \"Oberon\": 2662,\n    \"Ariel\": 2663,\n    \"Umbriel\": 2664,\n    \"Triton\": 2665,\n    \"Nereid\": 2666,\n    \"Charon\": 2667,\n    \"Styx\": 2668,\n    \"Kerberos\": 2669,\n    \"Halimede\": 2670,\n    \"Sao\": 2671,\n    \"Nix\": 2672,\n    \"Hydra\": 2673,\n    \"Miranda\": 2674,\n    \"Titania\": 2675,\n    \"Oberon\": 2676,\n    \"Ariel\": 2677,\n    \"Umbriel\": 2678,\n    \"Triton\": 2679,\n    \"Nereid\": 2680,\n    \"Charon\": 2681,\n    \"Styx\": 2682,\n    \"Kerberos\": 2683,\n    \"Halimede\": 2684,\n    \"Sao\": 2685,\n    \"Nix\": 2686,\n    \"Hydra\": 2687,\n    \"Miranda\": 2688,\n    \"Titania\": 2689,\n    \"Oberon\": 2690,\n    \"Ariel\": 2691,\n    \"Umbriel\": 2692,\n    \"Triton\": 2693,\n    \"Nereid\": 2694,\n    \"Charon\": 2695,\n    \"Styx\": 2696,\n    \"Kerberos\": 2697,\n    \"Halimede\": 2698,\n    \"Sao\": 2699,\n    \"Nix\": 2700,\n    \"Hydra\": 2701,\n    \"Miranda\": 2702,\n    \"Titania\": 2703,\n    \"Oberon\": 2704,\n    \"Ariel\": 2705,\n    \"Umbriel\": 2706,\n    \"Triton\": 2707,\n    \"Nereid\": 2708,\n    \"Charon\": 2709,\n    \"Styx\": 2710,\n    \"Kerberos\": 2711,\n    \"Halimede\": 2712,\n    \"Sao\": 2713,\n    \"Nix\": 2714,\n    \"Hydra\": 2715,\n    \"Miranda\": 2716,\n    \"Titania\": 2717,\n    \"Oberon\": 2718,\n    \"Ariel\": 2719,\n    \"Umbriel\": 2720,\n    \"Triton\": 2721,\n    \"Nereid\": 2722,\n    \"Charon\": 2723,\n    \"Styx\": 2724,\n    \"Kerberos\": 2725,\n    \"Halimede\": 2726,\n    \"Sao\": 2727,\n    \"Nix\": 2728,\n    \"Hydra\": 2729,\n    \"Miranda\": 2730,\n    \"Titania\": 2731,\n    \"Oberon\": 2732,\n    \"Ariel\": 2733,\n    \"Umbriel\": 2734,\n    \"Triton\": 2735,\n    \"Nereid\": 2736,\n    \"Charon\": 2737,\n    \"Styx\": 2738,\n    \"Kerberos\": 2739,\n    \"Halimede\": 2740,\n    \"Sao\": 2741,\n    \"Nix\": 2742,\n    \"Hydra\": 2743,\n    \"Miranda\": 2744,\n    \"Titania\": 2745,\n    \"Oberon\": 2746,\n    \"Ariel\": 2747,\n    \"Umbriel\": 2748,\n    \"Triton\": 2749,\n    \"Nereid\": 2750,\n    \"Charon\": 2751,\n    \"Styx\": 2752,\n    \"Kerberos\": 2753,\n    \"Halimede\": 2754,\n    \"Sao\": 2755,\n    \"Nix\": 2756,\n    \"Hydra\": 2757,\n    \"Miranda\": 2758,\n    \"Titania\": 2759,\n    \"Oberon\": 2760,\n    \"Ariel\": 2761,\n    \"Umbriel\": 2762,\n    \"Triton\": 2763,\n    \"Nereid\": 2764,\n    \"Charon\": 2765,\n    \"Styx\": 2766,\n    \"Kerberos\": 2767,\n    \"Halimede\": 2768,\n    \"Sao\": 2769,\n    \"Nix\": 2770,\n    \"Hydra\": 2771,\n    \"Miranda\": 2772,\n    \"Titania\": 2773,\n    \"Oberon\": 2774,\n    \"Ariel\": 2775,\n    \"Umbriel\": 2776,\n    \"Triton\": 2777,\n    \"Nereid\": 2778,\n    \"Charon\": 2779,\n    \"Styx\": 2780,\n    \"Kerberos\": 2781,\n    \"Halimede\": 2782,\n    \"Sao\": 2783,\n    \"Nix\": 2784,\n    \"Hydra\": 2785,\n    \"Miranda\": 2786,\n    \"Titania\": 2787,\n    \"Oberon\": 2788,\n    \"Ariel\": 2789,\n    \"Umbriel\": 2790,\n    \"Triton\": 2791,\n    \"Nereid\": 2792,\n    \"Charon\": 2793,\n    \"Styx\": 2794,\n    \"Kerberos\": 2795,\n    \"Halimede\": 2796,\n    \"Sao\": 2797,\n    \"Nix\": 2798,\n    \"Hydra\": 2799,\n    \"Miranda\": 2800,\n    \"Titania\": 2801,\n    \"Oberon\": 2802,\n    \"Ariel\": 2803,\n    \"Umbriel\": 2804,\n    \"Triton\": 2805,\n    \"Nereid\": 2806,\n    \"Charon\": 2807,\n    \"Styx\": 2808,\n    \"Kerberos\": 2809,\n    \"Halimede\": 2810,\n    \"Sao\": 2811,\n    \"Nix\": 2812,\n    \"Hydra\": 2813,\n    \"Miranda\": 2814,\n    \"Titania\": 2815,\n    \"Oberon\": 2816,\n    \"Ariel\": 2817,\n    \"Umbriel\": 2818,\n    \"Triton\": 2819,\n    \"Nereid\": 2820,\n    \"Charon\": 2821,\n    \"Styx\": 2822,\n    \"Kerberos\": 2823,\n    \"Halimede\": 2824,\n    \"Sao\": 2825,\n    \"Nix\": 2826,\n    \"Hydra\": 2827,\n    \"Miranda\": 2828,\n    \"Titania\": 2829,\n    \"Oberon\": 2830,\n    \"Ariel\": 2831,\n    \"Umbriel\": 2832,\n    \"Triton\": 2833,\n    \"Nereid\": 2834,\n    \"Charon\": 2835,\n    \"Styx\": 2836,\n    \"Kerberos\": 2837,\n    \"Halimede\": 2838,\n    \"Sao\": 2839,\n    \"Nix\": 2840,\n    \"Hydra\": 2841,\n    \"Miranda\": 2842,\n    \"Titania\": 2843,\n    \"Oberon\": 2844,\n    \"Ariel\": 2845,\n    \"Umbriel\": 2846,\n    \"Triton\": 2847,\n    \"Nereid\": 2848,\n    \"Charon\": 2849,\n    \"Styx\": 2850,\n    \"Kerberos\": 2851,\n    \"Halimede\": 2852,\n    \"Sao\": 2853,\n    \"Nix\": 2854,\n    \"Hydra\": 2855,\n    \"Miranda\": 2856,\n    \"Titania\": 2857,\n    \"Oberon\": 2858,\n    \"Ariel\": 2859,\n    \"Umbriel\": 2860,\n    \"Triton\": 2861,\n    \"Nereid\": 2862,\n    \"Charon\": 2863,\n    \"Styx\": 2864,\n    \"Kerberos\": 2865,\n    \"Halimede\": 2866,\n    \"Sao\": 2867,\n    \"Nix\": 2868,\n    \"Hydra\": 2869,\n    \"Miranda\": 2870,\n    \"Titania\": 2871,\n    \"Oberon\": 2872,\n    \"Ariel\": 2873,\n    \"Umbriel\": 2874,\n    \"Triton\": 2875,\n    \"Nereid\": 2876,\n    \"Charon\": 2877,\n    \"Styx\": 2878,\n    \"Kerberos\": 2879,\n    \"Halimede\": 2880,\n    \"Sao\": 2881,\n    \"Nix\": 2882,\n    \"Hydra\": 2883,\n    \"Miranda\": 2884,\n    \"Titania\": 2885,\n    \"Oberon\": 2886,\n    \"Ariel\": 2887,\n    \"Umbriel\": 2888,\n    \"Triton\": 2889,\n    \"Nereid\": 2890,\n    \"Charon\": 2891,\n    \"Styx\": 2892,\n    \"Kerberos\": 2893,\n    \"Halimede\": 2894,\n    \"Sao\": 2895,\n    \"Nix\": 2896,\n    \"Hydra\": 2897,\n    \"Miranda\": 2898,\n    \"Titania\": 2899,\n    \"Oberon\": 2900,\n    \"Ariel\": 2901,\n    \"Umbriel\": 2902,\n    \"Triton\": 2903,\n    \"Nereid\": 2904,\n    \"Charon\": 2905,\n    \"Styx\": 2906,\n    \"Kerberos\": 2907,\n    \"Halimede\": 2908,\n    \"Sao\": 2909,\n    \"Nix\": 2910,\n    \"Hydra\": 2911,\n    \"Miranda\": 2912,\n    \"Titania\": 2913,\n    \"Oberon\": 2914,\n    \"Ariel\": 2915,\n    \"Umbriel\": 2916,\n    \"Triton\": 2917,\n    \"Nereid\": 2918,\n    \"Charon\": 2919,\n    \"Styx\": 2920,\n    \"Kerberos\": 2921,\n    \"Halimede\": 2922,\n    \"Sao\": 2923,\n    \"Nix\": 2924,\n    \"Hydra\": 2925,\n    \"Miranda\": 2926,\n    \"Titania\": 2927,\n    \"Oberon\": 2928,\n    \"Ariel\": 2929,\n    \"Umbriel\": 2930,\n    \"Triton\": 2931,\n    \"Nereid\": 2932,\n    \"Charon\": 2933,\n    \"Styx\": 2934,\n    \"Kerberos\": 2935,\n    \"Halimede\": 2936,\n    \"Sao\": 2937,\n    \"Nix\": 2938,\n    \"Hydra\": 2939,\n    \"Miranda\": 2940,\n    \"Titania\": 2941,\n    \"Oberon\": 2942,\n    \"Ariel\": 2943,\n    \"Umbriel\": 2944,\n    \"Triton\": 2945,\n    \"Nereid\": 2946,\n    \"Charon\": 2947,\n    \"Styx\": 2948,\n    \"Kerberos\": 2949,\n    \"Halimede\": 2950,\n    \"Sao\": 2951,\n    \"Nix\": 2952,\n    \"Hydra\": 2953,\n    \"Miranda\": 2954,\n    \"Titania\": 2955,\n    \"Oberon\": 2956,\n    \"Ariel\": 2957,\n    \"Umbriel\": 2958,\n    \"Triton\": 2959,\n    \"Nereid\": 2960,\n    \"Charon\": 2961,\n    \"Styx\": 2962,\n    \"Kerberos\": 2963,\n    \"Halimede\": 2964,\n    \"Sao\": 2965,\n    \"Nix\": 2966,\n    \"Hydra\": 2967,\n    \"Miranda\": 2968,\n    \"Titania\": 2969,\n    \"Oberon\": 2970,\n    \"Ariel\": 2971,\n    \"Umbriel\": 2972,\n    \"Triton\": 2973,\n    \"Nereid\": 2974,\n    \"Charon\": 2975,\n    \"Styx\": 2976,\n    \"Kerberos\": 2977,\n    \"Halimede\": 2978,\n    \"Sao\": 2979,\n    \"Nix\": 2980,\n    \"Hydra\": 2981,\n    \"Miranda\": 2982,\n    \"Titania\": 2983,\n    \"Oberon\": 2984,\n    \"Ariel\": 2985,\n    \"Umbriel\": 2986,\n    \"Triton\": 2987,\n    \"Nereid\": 2988,\n    \"Charon\": 2989,\n    \"Styx\": 2990,\n    \"Kerberos\": 2991,\n    \"Halimede\": 2992,\n    \"Sao\": 2993,\n    \"Nix\": 2994,\n    \"Hydra\": 2995,\n    \"Miranda\": 2996,\n    \"Titania\": 2997,\n    \"Oberon\": 2998,\n    \"Ariel\": 2999,\n    \"Umbriel\": 3000,\n    \"Triton\": 3001,\n    \"Nereid\": 3002,\n    \"Charon\": 3003,\n    \"Styx\": 3004,\n    \"Kerberos\": 3005,\n    \"Halimede\": 3006,\n    \"Sao\": 3007,\n    \"Nix\": 3008,\n    \"Hydra\": 3009,\n    \"Miranda\": 3010,\n    \"Titania\": 3011,\n    \"Oberon\": 3012,\n    \"Ariel\": 3013,\n    \"Umbriel\": 3014,\n    \"Triton\": 3015,\n    \"Nereid\": 3016,\n    \"Charon\": 3017,\n    \"Styx\": 3018,\n    \"Kerberos\": 3019,\n    \"Halimede\": 3020,\n    \"Sao\": 3021,\n    \"Nix\": 3022,\n    \"Hydra\": 3023,\n    \"Miranda\": 3024,\n    \"Titania\": 3025,\n    \"Oberon\": 3026,\n    \"Ariel\": 3027,\n    \"Umbriel\": 3028,\n    \"Triton\": 3029,\n    \"Nereid\": 3030,\n    \"Charon\": 3031,\n    \"Styx\": 3032,\n    \"Kerberos\": 3033,\n    \"Halimede\": 3034,\n    \"Sao\": 3035,\n    \"Nix\": 3036,\n    \"Hydra\": 3037,\n    \"Miranda\": 3038,\n    \"Titania\": 3039,\n    \"Oberon\": 3040,\n    \"Ariel\": 3041,\n    \"Umbriel\": 3042,\n    \"Triton\": 3043,\n    \"Nereid\": 3044,\n    \"Charon\": 3045,\n    \"Styx\": 3046,\n    \"Kerberos\": 3047,\n    \"Halimede\": 3048,\n    \"Sao\": 3049,\n    \"Nix\": 3050,\n    \"Hydra\": 3051,\n    \"Miranda\": 3052,\n    \"Titania\": 3053,\n    \"Oberon\": 3054,\n    \"Ariel\": 3055,\n    \"Umbriel\": 3056,\n    \"Triton\": 3057,\n    \"Nereid\": 3058,\n    \"Charon\": 3059,\n    \"Styx\": 3060,\n    \"Kerberos\": 3061,\n    \"Halimede\": 3062,\n    \"Sao\": 3063,\n    \"Nix\": 3064,\n    \"Hydra\": 3065,\n    \"Miranda\": 3066,\n    \"Titania\": 3067,\n    \"Oberon\": 3068,\n    \"Ariel\": 3069,\n    \"Umbriel\": 3070,\n    \"Triton\": 3071,\n    \"Nereid\": 3072,\n    \"Charon\": 3073,\n    \"Styx\": 3074,\n    \"Kerberos\": 3075,\n    \"Halimede\": 3076,\n    \"Sao\": 3077,\n    \"Nix\": 3078,\n    \"Hydra\": 3079,\n    \"Miranda\": 3080,\n    \"Titania\": 3081,\n    \"Oberon\": 3082,\n    \"Ariel\": 3083,\n    \"Umbriel\": 3084,\n    \"Triton\": 3085,\n    \"Nereid\": 3086,\n    \"Charon\": 3087,\n    \"Styx\": 3088,\n    \"Kerberos\": 3089,\n    \"Halimede\": 3090,\n    \"Sao\": 3091,\n    \"Nix\": 3092,\n    \"Hydra\": 3093,\n    \"Miranda\": 3094,\n    \"Titania\": 3095,\n    \"Oberon\": 3096,\n    \"Ariel\": 3097,\n    \"Umbriel\": 3098,\n    \"Triton\": 3099,\n    \"Nereid\": 3100,\n    \"Charon\": 3101,\n    \"Styx\": 3102,\n    \"Kerberos\": 3103,\n    \"Halimede\": 3104,\n    \"Sao\": 3105,\n    \"Nix\": 3106,\n    \"Hydra\": 3107,\n    \"Miranda\": 3108,\n    \"Titania\": 3109,\n    \"Oberon\": 3110,\n    \"Ariel\": 3111,\n    \"Umbriel\": 3112,\n    \"Triton\": 3113,\n    \"Nereid\": 3114,\n    \"Charon\": 3115,\n    \"Styx\": 3116,\n    \"Kerberos\": 3117,\n    \"Halimede\": 3118,\n    \"Sao\": 3119,\n    \"Nix\": 3120,\n    \"Hydra\": 3121,\n    \"Miranda\": 3122,\n    \"Titania\": 3123,\n    \"Oberon\": 3124,\n    \"Ariel\": 3125,\n    \"Umbriel\": 3126,\n    \"Triton\": 3127,\n    \"Nereid\": 3128,\n    \"Charon\": 3129,\n    \"Styx\": 3130,\n    \"Kerberos\": 3131,\n    \"Halimede\": 3132,\n    \"Sao\": 3133,\n    \"Nix\": 3134,\n    \"Hydra\": 3135,\n    \"Miranda\": 3136,\n    \"Titania\": 3137,\n    \"Oberon\": 3138,\n    \"Ariel\": 3139,\n    \"Umbriel\": 3140,\n    \"Triton\": 3141,\n    \"Nereid\": 3142,\n    \"Charon\": 3143,\n    \"Styx\": 3144,\n    \"Kerberos\": 3145,\n    \"Halimede\": 3146,\n    \"Sao\": 3147,\n    \"Nix\": 3148,\n    \"Hydra\": 3149,\n    \"Miranda\": 3150,\n    \"Titania\": 3151,\n    \"Oberon\": 3152,\n    \"Ariel\": 3153,\n    \"Umbriel\": 3154,\n    \"Triton\": 3155,\n    \"Nereid\": 3156,\n    \"Charon\": 3157,\n    \"Styx\": 3158,\n    \"Kerberos\": 3159,\n    \"Halimede\": 3160,\n    \"Sao\": 3161,\n    \"Nix\": 3162,\n    \"Hydra\": 3163,\n    \"Miranda\": 3164,\n    \"Titania\": 3165,\n    \"Oberon\": 3166,\n    \"Ariel\": 3167,\n    \"Umbriel\": 3168,\n    \"Triton\": 3169,\n    \"Nereid\": 3170,\n    \"Charon\": 3171,\n    \"Styx\": 3172,\n    \"Kerberos\": 3173,\n    \"Halimede\": 3174,\n    \"Sao\": 3175,\n    \"Nix\": 3176,\n    \"Hydra\": 3177,\n    \"Miranda\": 3178,\n    \"Titania\": 3179,\n    \"Oberon\": 3180,\n    \"Ariel\": 3181,\n    \"Umbriel\": 3182,\n    \"Triton\": 3183,\n    \"Nereid\": 3184,\n    \"Charon\": 3185,\n    \"Styx\": 3186,\n    \"Kerberos\": 3187,\n    \"Halimede\": 3188,\n    \"Sao\": 3189,\n    \"Nix\": 3190,\n    \"Hydra\": 3191,\n    \"Miranda\": 3192,\n    \"Titania\": 3193,\n    \"Oberon\": 3194,\n    \"Ariel\": 3195,\n    \"Umbriel\": 3196,\n    \"Triton\": 3197,\n    \"Nereid\": 3198,\n    \"Charon\": 3199,\n    \"Styx\": 3200,\n    \"Kerberos\": 3201,\n    \"Halimede\": 3202,\n    \"Sao\": 3203,\n    \"Nix\": 3204,\n    \"Hydra\": 3205,\n    \"Miranda\": 3206,\n    \"Titania\": 3207,\n    \"Oberon\": 3208,\n    \"Ariel\": 3209,\n    \"Umbriel\": 3210,\n    \"Triton\": 3211,\n    \"Nereid\": 3212,\n    \"Charon\": 3213,\n    \"Styx\": 3214,\n    \"Kerberos\": 3215,\n    \"Halimede\": 3216,\n    \"Sao\": 3217,\n    \"Nix\": 3218,\n    \"Hydra\": 3219,\n    \"Miranda\": 3220,\n    \"Titania\": 3221,\n    \"Oberon\": 3222,\n    \"Ariel\": 3223,\n    \"Umbriel\": 3224,\n    \"Triton\": 3225,\n    \"Nereid\": 3226,\n    \"Charon\": 3227,\n    \"Styx\": 3228,\n    \"Kerberos\": 3229,\n    \"Halimede\": 3230,\n    \"Sao\": 3231,\n    \"Nix\": 3232,\n    \"Hydra\": 3233,\n    \"Miranda\": 3234,\n    \"Titania\": 3235,\n    \"Oberon\": 3236,\n    \"Ariel\": 3237,\n    \"Umbriel\": 3238,\n    \"Triton\": 3239,\n    \"Nereid\": 3240,\n    \"Charon\": 3241,\n    \"Styx\": 3242,\n    \"Kerberos\": 3243,\n    \"Halimede\": 3244,\n    \"Sao\": 3245,\n    \"Nix\": 3246,\n    \"Hydra\": 3247,\n    \"Miranda\": 3248,\n    \"Titania\": 3249,\n    \"Oberon\": 3250,\n    \"Ariel\": 3251,\n    \"Umbriel\": 3252,\n    \"Triton\": 3253,\n    \"Nereid\": 3254,\n    \"Charon\": 3255,\n    \"Styx\": 3256,\n    \"Kerberos\": 3257,\n    \"Halimede\": 3258,\n    \"Sao\": 3259,\n    \"Nix\": 3260,\n    \"Hydra\": 3261,\n    \"Miranda\": 3262,\n    \"Titania\": 3263,\n    \"Oberon\": 3264,\n    \"Ariel\": 3265,\n    \"Umbriel\": 3266,\n    \"Triton\": 3267,\n    \"Nereid\": 3268,\n    \"Charon\": 3269,\n    \"Styx\": 3270,\n    \"Kerberos\": 3271,\n    \"Halimede\": 3272,\n    \"Sao\": 3273,\n    \"Nix\": 3274,\n    \"Hydra\": 3275,\n    \"Miranda\": 3276,\n    \"Titania\": 3277,\n    \"Oberon\": 3278,\n    \"Ariel\": 3279,\n    \"Umbriel\": 3280,\n    \"Triton\": 3281,\n    \"Nereid\": 3282,\n    \"Charon\": 3283,\n    \"Styx\": 3284,\n    \"Kerberos\": 3285,\n    \"Halimede\": 3286,\n    \"Sao\": 3287,\n    \"Nix\": 3288,\n    \"Hydra\": 3289,\n    \"Miranda\": 3290,\n    \"Titania\": 3291,\n    \"Oberon\": 3292,\n    \"Ariel\": 3293,\n    \"Umbriel\": 3294,\n    \"Triton\": 3295,\n    \"Nereid\": 3296,\n    \"Charon\": 3297,\n    \"Styx\": 3298,\n    \"Kerberos\": 3299,\n    \"Halimede\": 3300,\n    \"Sao\": 3301,\n    \"Nix\": 3302,\n    \"Hydra\": 3303,\n    \"Miranda\": 3304,\n    \"Titania\": 3305,\n    \"Oberon\": 3306,\n    \"Ariel\": 3307,\n    \"Umbriel\": 3308,\n    \"Triton\": 3309,\n    \"Nereid\": 3310,\n    \"Charon\": 3311,\n    \"Styx\": 3312,\n    \"Kerberos\": 3313,\n    \"Halimede\": 3314,\n    \"Sao\": 3315,\n    \"Nix\": 3316,\n    \"Hydra\": 3317,\n    \"Miranda\": 3318,\n    \"Titania\": 3319,\n    \"Oberon\": 3320,\n    \"Ariel\": 3321,\n    \"Umbriel\": 3322,\n    \"Triton\": 3323,\n    \"Nereid\": 3324,\n    \"Charon\": 3325,\n    \"Styx\": 3326,\n    \"Kerberos\": 3327,\n    \"Halimede\": 3328,\n    \"Sao\": 3329,\n    \"Nix\": 3330,\n    \"Hydra\": 3331,\n    \"Miranda\": 3332,\n    \"Titania\": 3333,\n    \"Oberon\": 3334,\n    \"Ariel\": 3335,\n    \"Umbriel\": 3336,\n    \"Triton\": 3337,\n    \"Nereid\": 3338,\n    \"Charon\": 3339,\n    \"Styx\": 3340,\n    \"Kerberos\": 3341,\n    \"Halimede\": 3342,\n    \"Sao\": 3343,\n    \"Nix\": 3344,\n    \"Hydra\": 3345,\n    \"Miranda\": 3346,\n    \"Titania\": 3347,\n    \"Oberon\": 3348,\n    \"Ariel\": 3349,\n    \"Umbriel\": 3350,\n    \"Triton\": 3351,\n    \"Nereid\": 3352,\n    \"Charon\": 3353,\n    \"Styx\": 3354,\n    \"Kerberos\": 3355,\n    \"Halimede\": 3356,\n    \"Sao\": 3357,\n    \"Nix\": 3358,\n    \"Hydra\": 3359,\n    \"Miranda\": 3360,\n    \"Titania\": 3361,\n    \"Oberon\": 3362,\n    \"Ariel\": 3363,\n    \"Umbriel\": 3364,\n    \"Triton\": 3365,\n    \"Nereid\": 3366,\n    \"Charon\": 3367,\n    \"Styx\": 3368,\n    \"Kerberos\": 3369,\n    \"Halimede\": 3370,\n    \"Sao\": 3371,\n    \"Nix\": 3372,\n    \"Hydra\": 3373,\n    \"Miranda\": 3374,\n    \"Titania\": 3375,\n    \"Oberon\": 3376,\n    \"Ariel\": 3377,\n    \"Umbriel\": 3378,\n    \"Triton\": 3379,\n    \"Nereid\": 3380,\n    \"Charon\": 3381,\n    \"Styx\": 3382,\n    \"Kerberos\": 3383,\n    \"Halimede\": 3384,\n    \"Sao\": 3385,\n    \"Nix\": 3386,\n    \"Hydra\": 3387,\n    \"Miranda\": 3388,\n    \"Titania\": 3389,\n    \"Oberon\": 3390,\n    \"Ariel\": 3391,\n    \"Umbriel\": 3392,\n    \"Triton\": 3393,\n    \"Nereid\": 3394,\n    \"Charon\": 3395,\n    \"Styx\": 3396,\n    \"Kerberos\": 3397,\n    \"Halimede\": 3398,\n    \"Sao\": 3399,\n    \"Nix\": 3400,\n    \"Hydra\": 3401,\n    \"Miranda\": 3402,\n    \"Titania\": 3403,\n    \"Oberon\": 3404,\n    \"Ariel\": 3405,\n    \"Umbriel\": 3406,\n    \"Triton\": 3407,\n    \"Nereid\": 3408,\n    \"Charon\": 3409,\n    \"Styx\": 3410,\n    \"Kerberos\": 3411,\n    \"Halimede\": 3412,\n    \"Sao\": 3413,\n    \"Nix\": 3414,\n    \"Hydra\": 3415,\n    \"Miranda\": 3416,\n    \"Titania\": 3417,\n    \"Oberon\": 3418,\n    \"Ariel\": 3419,\n    \"Umbriel\": 3420,\n    \"Triton\": 3421,\n    \"Nereid\": 3422,\n    \"Charon\": 3423,\n    \"Styx\": 3424,\n    \"Kerberos\": 3425,\n    \"Halimede\": 3426,\n    \"Sao\": 3427,\n    \"Nix\": 3428,\n    \"Hydra\": 3429,\n    \"Miranda\": 3430,\n    \"Titania\": 3431,\n    \"Oberon\": 3432,\n    \"Ariel\": 3433,\n    \"Umbriel\": 3434,\n    \"Triton\": 3435,\n    \"Nereid\": 3436,\n    \"Charon\": 3437,\n    \"Styx\": 3438,\n    \"Kerberos\": 3439,\n    \"Halimede\": 3440,\n    \"Sao\": 3441,\n    \"Nix\": 3442,\n    \"Hydra\": 3443,\n    \"Miranda\": 3444,\n    \"Titania\": 3445,\n    \"Oberon\": 3446,\n    \"Ariel\": 3447,\n    \"Umbriel\": 3448,\n    \"Triton\": 3449,\n    \"Nereid\": 3450,\n    \"Charon\": 3451,\n    \"Styx\": 3452,\n    \"Kerberos\": 3453,\n    \"Halimede\": 3454,\n    \"Sao\": 3455,\n    \"Nix\": 3456,\n    \"Hydra\": 3457,\n    \"Miranda\": 3458,\n    \"Titania\": 3459,\n    \"Oberon\": 3460,\n    \"Ariel\": 3461,\n    \"Umbriel\": 3462,\n    \"Triton\": 3463,\n    \"Nereid\": 3464,\n    \"Charon\": 3465,\n    \"Styx\": 3466,\n    \"Kerberos\": 3467,\n    \"Halimede\": 3468,\n    \"Sao\": 3469,\n    \"Nix\": 3470,\n    \"Hydra\": 3471,\n    \"Miranda\": 3472,\n    \"Titania\": 3473,\n    \"Oberon\": 3474,\n    \"Ariel\": 3475,\n    \"Umbriel\": 3476,\n    \"Triton\": 3477,\n    \"Nereid\": 3478,\n    \"Charon\": 3479,\n    \"Styx\": 3480,\n    \"Kerberos\": 3481,\n    \"Halimede\": 3482,\n    \"Sao\": 3483,\n    \"Nix\": 3484,\n    \"Hydra\": 3485,\n    \"Miranda\": 3486,\n    \"Titania\": 3487,\n    \"Oberon\": 3488,\n    \"Ariel\": 3489,\n    \"Umbriel\": 3490,\n    \"Triton\": 3491,\n    \"Nereid\": 3492,\n    \"Charon\": 3493,\n    \"Styx\": 3494,\n    \"Kerberos\": 3495,\n    \"Halimede\": 3496,\n    \"Sao\": 3497,\n    \"Nix\": 3498,\n    \"Hydra\": 3499,\n    \"Miranda\": 3500,\n    \"Titania\": 3501,\n    \"Oberon\": 3502,\n    \"Ariel\": 3503,\n    \"Umbriel\": 3504,\n    \"Triton\": 3505,\n    \"Nereid\": 3506,\n    \"Charon\": 3507,\n    \"Styx\": 3508,\n    \"Kerberos\": 3509,\n    \"Halimede\": 3510,\n    \"Sao\": 3511,\n    \"Nix\": 3512,\n    \"Hydra\": 3513,\n    \"Miranda\": 3514,\n    \"Titania\": 3515,\n    \"Oberon\": 3516,\n    \"Ariel\": 3517,\n    \"Umbriel\": 3518,\n    \"Triton\": 3519,\n    \"Nereid\": 3520,\n    \"Charon\": 3521,\n    \"Styx\": 3522,\n    \"Kerberos\": 3523,\n    \"Halimede\": 3524,\n    \"Sao\": 3525,\n    \"Nix\": 3526,\n    \"Hydra\": 3527,\n    \"Miranda\": 3528,\n    \"Titania\": 3529,\n    \"Oberon\": 3530,\n    \"Ariel\": 3531,\n    \"Umbriel\": 3532,\n    \"Triton\": 3533,\n    \"Nereid\": 3534,\n    \"Charon\": 3535,\n    \"Styx\": 3536,\n    \"Kerberos\": 3537,\n    \"Halimede\": 3538,\n    \"Sao\": 3539,\n    \"Nix\": 3540,\n    \"Hydra\": 3541,\n    \"Miranda\": 3542,\n    \"Titania\": 3543,\n    \"Oberon\": 3544,\n    \"Ariel\": 3545,\n    \"Umbriel\": 3546,\n    \"Triton\": 3547,\n    \"Nereid\": 3548,\n    \"Charon\": 3549,\n    \"Styx\": 3550,\n    \"Kerberos\": 3551,\n    \"Halimede\": 3552,\n    \"Sao\": 3553,\n    \"Nix\": 3554,\n    \"Hydra\": 3555,\n    \"Miranda\": 3556,\n    \"Titania\": 3557,\n    \"Oberon\": 3558,\n    \"Ariel\": 3559,\n    \"Umbriel\": 3560,\n    \"Triton\": 3561,\n    \"Nereid\": 3562,\n    \"Charon\": 3563,\n    \"Styx\": 3564,\n    \"Kerberos\": 3565,\n    \"Halimede\": 3566,\n    \"Sao\": 3567,\n    \"Nix\": 3568,\n    \"Hydra\": 3569,\n    \"Miranda\": 3570,\n    \"Titania\": 3571,\n    \"Oberon\": 3572,\n    \"Ariel\": 3573,\n    \"Umbriel\": 3574,\n    \"Triton\": 3575,\n    \"Nereid\": 3576,\n    \"Charon\": 3577,\n    \"Styx\": 3578,\n    \"Kerberos\": 3579,\n    \"Halimede\": 3580,\n    \"Sao\": 3581,\n    \"Nix\": 3582,\n    \"Hydra\": 3583,\n    \"Miranda\": 3584,\n    \"Titania\": 3585,\n    \"Oberon\": 3586,\n    \"Ariel\": 3587,\n    \"Umbriel\": 3588,\n    \"Triton\": 3589,\n    \"Nereid\": 3590,\n    \"Charon\": 3591,\n    \"Styx\": 3592,\n    \"Kerberos\": 3593,\n    \"Halimede\": 3594,\n    \"Sao\": 3595,\n    \"Nix\": 3596,\n    \"Hydra\": 3597,\n    \"Miranda\": 3598,\n    \"Titania\": 3599,\n    \"Oberon\": 3600,\n    \"Ariel\": 3601,\n    \"Umbriel\": 3602,\n    \"Triton\": 3603,\n    \"Nereid\": 3604,\n    \"Charon\": 3605,\n    \"Styx\": 3606,\n    \"Kerberos\": 3607,\n    \"Halimede\": 3608,\n    \"Sao\": 3609,\n    \"Nix\": 3610,\n    \"Hydra\": 3611,\n    \"Miranda\": 3612,\n    \"Titania\": 3613,\n    \"Oberon\": 3614,\n    \"Ariel\": 3615,\n    \"Umbriel\": 3616,\n    \"Triton\": 3617,\n    \"Nereid\": 3618,\n    \"Charon\": 3619,\n    \"Styx\": 3620,\n    \"Kerberos\": 3621,\n    \"Halimede\": 3622,\n    \"Sao\": 3623,\n    \"Nix\": 3624,\n    \"Hydra\": 3625,\n    \"Miranda\": 3626,\n    \"Titania\": 3627,\n    \"Oberon\": 3628,\n    \"Ariel\": 3629,\n    \"Umbriel\": 3630,\n    \"Triton\": 3631,\n    \"Nereid\": 3632,\n    \"Charon\": 3633,\n    \"Styx\": 3634,\n    \"Kerberos\": 3635,\n    \"Halimede\": 3636,\n    \"Sao\": 3637,\n    \"Nix\": 3638,\n    \"Hydra\": 3639,\n    \"Miranda\": 3640,\n    \"Titania\": 3641,\n    \"Oberon\": 3642,\n    \"Ariel\": 3643,\n    \"Umbriel\": 3644,\n    \"Triton\": 3645,\n    \"Nereid\": 3646,\n    \"Charon\": 3647,\n    \"Styx\": 3648,\n    \"Kerberos\": 3649,\n    \"Halimede\": 3650,\n    \"Sao\": 3651,\n    \"Nix\": 3652,\n    \"Hydra\": 3653,\n    \"Miranda\": 3654,\n    \"Titania\": 3655,\n    \"Oberon\": 3656,\n    \"Ariel\": 3657,\n    \"Umbriel\": 3658,\n    \"Triton\": 3659,\n    \"Nereid\": 3660,\n    \"Charon\": 3661,\n    \"Styx\": 3662,\n    \"Kerberos\": 3663,\n    \"Halimede\": 3664,\n    \"Sao\": 3665,\n    \"Nix\": 3666,\n    \"Hydra\": 3667,\n    \"Miranda\": 3668,\n    \"Titania\": 3669,\n    \"Oberon\": 3670,\n    \"Ariel\": 3671,\n    \"Umbriel\": 3672,\n    \"Triton\": 3673,\n    \"Nereid\": 3674,\n    \"Charon\": 3675,\n    \"Styx\": 3676,\n    \"Kerberos\": 3677,\n    \"Halimede\": 3678,\n    \"Sao\": 3679,\n    \"Nix\": 3680,\n    \"Hydra\": 3681,\n    \"Miranda\": 3682,\n    \"Titania\": 3683,\n    \"Oberon\": 3684,\n    \"Ariel\": 3685,\n    \"Umbriel\": 3686,\n    \"Triton\": 3687,\n    \"Nereid\": 3688,\n    \"Charon\": 3689,\n    \"Styx\": 3690,\n    \"Kerberos\": 3691,\n    \"Halimede\": 3692,\n    \"Sao\": 3693,\n    \"Nix\": 3694,\n    \"Hydra\": 3695,\n    \"Miranda\": 3696,\n    \"Titania\": 3697,\n    \"Oberon\": 3698,\n    \"Ariel\": 3699,\n    \"Umbriel\": 3700,\n    \"Triton\": 3701,\n    \"Nereid\": 3702,\n    \"Charon\": 3703,\n    \"Styx\": 3704,\n    \"Kerberos\": 3705,\n    \"Halimede\": 3706,\n    \"Sao\": 3707,\n    \"Nix\": 3708,\n    \"Hydra\": 3709,\n    \"Miranda\": 3710,\n    \"Titania\": 3711,\n    \"Oberon\": 3712,\n    \"Ariel\": 3713,\n    \"Umbriel\": 3714,\n    \"Triton\": 3715,\n    \"Nereid\": 3716,\n    \"Charon\": 3717,\n    \"Styx\": 3718,\n    \"Kerberos\": 3719,\n    \"Halimede\": 3720,\n    \"Sao\": 3721,\n    \"Nix\": 3722,\n    \"Hydra\": 3723,\n    \"Miranda\": 3724,\n    \"Titania\": 3725,\n    \"Oberon\": 3726,\n    \"Ariel\": 3727,\n    \"Umbriel\": 3728,\n    \"Triton\": 3729,\n    \"Nereid\": 3730,\n    \"Charon\": 3731,\n    \"Styx\": 3732,\n    \"Kerberos\": 3733,\n    \"Halimede\": 3734,\n    \"Sao\": 3735,\n    \"Nix\": 3736,\n    \"Hydra\": 3737,\n    \"Miranda\": 3738,\n    \"Titania\": 3739,\n    \"Oberon\": 3740,\n    \"Ariel\": 3741,\n    \"Umbriel\": 3742,\n    \"Triton\": 3743,\n    \"Nereid\": 3744,\n    \"Charon\": 3745,\n    \"Styx\": 3746,\n    \"Kerberos\": 3747,\n    \"Halimede\": 3748,\n    \"Sao\": 3749,\n    \"Nix\": 3750,\n    \"Hydra\": 3751,\n    \"Miranda\": 3752,\n    \"Titania\": 3753,\n    \"Oberon\": 3754,\n    \"Ariel\": 3755,\n    \"Umbriel\": 3756,\n    \"Triton\": 3757,\n    \"Nereid\": 3758,\n    \"Charon\": 3759,\n    \"Styx\": 3760,\n    \"Kerberos\": 3761,\n    \"Halimede\": 3762,\n    \"Sao\": 3763,\n    \"Nix\": 3764,\n    \"Hydra\": 3765,\n    \"Miranda\": 3766,\n    \"Titania\": 3767,\n    \"Oberon\": 3768,\n    \"Ariel\": 3769,\n    \"Umbriel\": 3770,\n    \"Triton\": 3771,\n    \"Nereid\": 3772,\n    \"Charon\": 3773,\n    \"Styx\": 3774,\n    \"Kerberos\": 3775,\n    \"Halimede\": 3776,\n    \"Sao\": 3777,\n    \"Nix\": 3778,\n    \"Hydra\": 3779,\n    \"Miranda\": 3780,\n    \"Titania\": 3781,\n    \"Oberon\": 3782,\n    \"Ariel\": 3783,\n    \"Umbriel\": 3784,\n    \"Triton\": 3785,\n    \"Nereid\": 3786,\n    \"Charon\": 3787,\n    \"Styx\": 3788,\n    \"Kerberos\": 3789,\n    \"Halimede\": 3790,\n    \"Sao\": 3791,\n    \"Nix\": 3792,\n    \"Hydra\": 3793,\n    \"Miranda\": 3794,\n    \"Titania\": 3795,\n    \"Oberon\": 3796,\n    \"Ariel\": 3797,\n    \"Umbriel\": 3798,\n    \"Triton\": 3799,\n    \"Nereid\": 3800,\n    \"Charon\": 3801,\n    \"Styx\": 3802,\n    \"Kerberos\": 3803,\n    \"Halimede\": 3804,\n    \"Sao\": 3805,\n    \"Nix\": 3806,\n    \"Hydra\": 3807,\n    \"Miranda\": 3808,\n    \"Titania\": 3809,\n    \"Oberon\": 3810,\n    \"Ariel\": 3811,\n    \"Umbriel\": 3812,\n    \"Triton\": 3813,\n    \"Nereid\": 3814,\n    \"Charon\": 3815,\n    \"Styx\": 3816,\n    \"Kerberos\": 3817,\n    \"Halimede\": 3818,\n    \"Sao\": 3819,\n    \"Nix\": 3820,\n    \"Hydra\": 3821,\n    \"Miranda\": 3822,\n    \"Titania\": 3823,\n    \"Oberon\": 3824,\n    \"Ariel\": 3825,\n    \"Umbriel\": 3826,\n    \"Triton\": 3827,\n    \"Nereid\": 3828,\n    \"Charon\": 3829,\n    \"Styx\": 3830,\n    \"Kerberos\": 3831,\n    \"Halimede\": 3832,\n    \"Sao\": 3833,\n    \"Nix\": 3834,\n    \"Hydra\": 3835,\n    \"Miranda\": 3836,\n    \"Titania\": 3837,\n    \"Oberon\": 3838,\n    \"Ariel\": 3839,\n    \"Umbriel\": 3840,\n    \"Triton\": 3841,\n    \"Nereid\": 3842,\n    \"Charon\": 3843,\n    \"Styx\": 3844,\n    \"Kerberos\": 3845,\n    \"Halimede\": 3846,\n    \"Sao\": 3847,\n    \"Nix\": 3848,\n    \"Hydra\": 3849,\n    \"Miranda\": 3850,\n    \"Titania\": 3851,\n    \"Oberon\": 3852,\n    \"Ariel\": 3853,\n    \"Umbriel\": 3854,\n    \"Triton\": 3855,\n    \"Nereid\": 3856,\n    \"Charon\": 3857,\n    \"Styx\": 3858,\n    \"Kerberos\": 3859,\n    \"Halimede\": 3860,\n    \"Sao\": 3861,\n    \"Nix\": 3862,\n    \"Hydra\": 3863,\n    \"Miranda\": 3864,\n    \"Titania\": 3865,\n    \"Oberon\": 3866,\n    \"Ariel\": 3867,\n    \"Umbriel\": 3868,\n    \"Triton\": 3869,\n    \"Nereid\": 3870,\n    \"Charon\": 3871,\n    \"Styx\": 3872,\n    \"Kerberos\": 3873,\n    \"Halimede\": 3874,\n    \"Sao\": 3875,\n    \"Nix\": 3876,\n    \"Hydra\": 3877,\n    \"Miranda\": 3878,\n    \"Titania\": 3879,\n    \"Oberon\": 3880,\n    \"Ariel\": 3881,\n    \"Umbriel\": 3882,\n    \"Triton\": 3883,\n    \"Nereid\": 3884,\n    \"Charon\": 3885,\n    \"Styx\": 3886,\n    \"Kerberos\": 3887,\n    \"Halimede\": 3888,\n    \"Sao\": 3889,\n    \"Nix\": 3890,\n    \"Hydra\": 3891,\n    \"Miranda\": 3892,\n    \"Titania\": 3893,\n    \"Oberon\": 3894,\n    \"Ariel\": 3895,\n    \"Umbriel\": 3896,\n    \"Triton\": 3897,\n    \"Nereid\": 3898,\n    \"Charon\": 3899,\n    \"Styx\": 3900,\n    \"Kerberos\": 3901,\n    \"Halimede\": 3902,\n    \"Sao\": 3903,\n    \"Nix\": 3904,\n    \"Hydra\": 3905,\n    \"Miranda\": 3906,\n    \"Titania\": 3907,\n    \"Oberon\": 3908,\n    \"Ariel\": 3909,\n    \"Umbriel\": 3910,\n    \"Triton\": 3911,\n    \"Nereid\": 3912,\n    \"Charon\": 3913,\n    \"Styx\": 3914,\n    \"Kerberos\": 3915,\n    \"Halimede\": 3916,\n    \"Sao\": 3917,\n    \"Nix\": 3918,\n    \"Hydra\": 3919,\n    \"Miranda\": 3920,\n    \"Titania\": 3921,\n    \"Oberon\": 3922,\n    \"Ariel\": 3923,\n    \"Umbriel\": 3924,\n    \"Triton\": 3925,\n    \"Nereid\": 3926,\n    \"Charon\": 3927,\n    \"Styx\": 3928,\n    \"Kerberos\": 3929,\n    \"Halimede\": 3930,\n    \"Sao\": 3931,\n    \"Nix\": 3932,\n    \"Hydra\": 3933,\n    \"Miranda\": 3934,\n    \"Titania\": 3935,\n    \"Oberon\": 3936,\n    \"Ariel\": 3937,\n    \"Umbriel\": 3938,\n    \"Triton\": 3939,\n    \"Nereid\": 3940,\n    \"Charon\": 3941,\n    \"Styx\": 3942,\n    \"Kerberos\": 3943,\n    \"Halimede\": 3944,\n    \"Sao\": 3945,\n    \"Nix\": 3946,\n    \"Hydra\": 3947,\n    \"Miranda\": 3948,\n    \"Titania\": 3949,\n    \"Oberon\": 3950,\n    \"Ariel\": 3951,\n    \"Umbriel\": 3952,\n    \"Triton\": 3953,\n    \"Nereid\": 3954,\n    \"Charon\": 3955,\n    \"Styx\": 3956,\n    \"Kerberos\": 3957,\n    \"Halimede\": 3958,\n    \"Sao\": 3959,\n    \"Nix\": 3960,\n    \"Hydra\": 3961,\n    \"Miranda\": 3962,\n    \"Titania\": 3963,\n    \"Oberon\": 3964,\n    \"Ariel\": 3965,\n    \"Umbriel\": 3966,\n    \"Triton\": 3967,\n    \"Nereid\": 3968,\n    \"Charon\": 3969,\n    \"Styx\": 3970,\n    \"Kerberos\": 3971,\n    \"Halimede\": 3972,\n    \"Sao\": 3973,\n    \"Nix\": 3974,\n    \"Hydra\": 3975,\n    \"Miranda\": 3976,\n    \"Titania\": 3977,\n    \"Oberon\": 3978,\n    \"Ariel\": 3979,\n    \"Umbriel\": 3980,\n    \"Triton\": 3981,\n    \"Nereid\": 3982,\n    \"Charon\": 3983,\n    \"Styx\": 3984,\n    \"Kerberos\": 3985,\n    \"Halimede\": 3986,\n    \"Sao\": 3987,\n    \"Nix\": 3988,\n    \"Hydra\": 3989,\n    \"Miranda\": 3990,\n    \"Titania\": 3991,\n    \"Oberon\": 3992,\n    \"Ariel\": 3993,\n    \"Umbriel\": 3994,\n    \"Triton\": 3995,\n    \"Nereid\": 3996,\n    \"Charon\": 3997,\n    \"Styx\": 3998,\n    \"Kerberos\": 3999,\n    \"Halimede\": 4000}\n\ndef find_letter(letter):\n    if letter in bf:\n        return letter\n    elif letter in bf.lower():\n        return letter.upper()\n    else:\n        return None\n\ndef encode_bf(plaintext):\n    encoded_text = \"\"\n    for letter in plaintext:\n        encoded_text += find_letter(letter) or \"\"\n    return encoded_text\n\ndef decode_bf(ciphertext):\n    decoded_text = \"\"\n    for letter in ciphertext:\n        decoded_text += find_letter(letter) or \"\"\n    return decoded_text\n\ndef encrypt(plaintext):\n    return encode_bf(plaintext)\n\ndef decrypt(ciphertext):\n    return decode_bf(ciphertext)\n\ndef main():\n    plaintext = input(\"Enter plaintext to encrypt: \")\n    ciphertext = encrypt(plaintext)\n    print(\"Encrypted ciphertext:\", ciphertext)\n    decrypted_plaintext = decrypt(ciphertext)\n    print(\"Decrypted plaintext:\", decrypted_plaintext)\n\nif __name__ == \"__main__\":\n    main()\n\n# Brute-Force Encryption and Decryption with BF\n\n# Brute-Force Encryption and Decryption with BF\n\ndef bf_encrypt(plaintext, key):\n    ciphertext = \"\"\n    for char in plaintext:\n        if char in key:\n            ciphertext += key[char]\n        else:\n            ciphertext += char\n    return ciphertext\n\ndef bf_decrypt(ciphertext, key):\n    plaintext = \"\"\n    for char in ciphertext:\n        if char in key:\n            plaintext += key[char]\n        else:\n            plaintext += char\n    return plaintext\n\ndef main():\n    plaintext = input(\"Enter plaintext to encrypt: \")\n    key = input(\"Enter encryption key: \")\n    ciphertext = bf_encrypt(plaintext, key)\n    print(\"Encrypted ciphertext:\", ciphertext)\n    decrypted_plaintext = bf_decrypt(ciphertext, key)\n    print(\"Decrypted plaintext:\", decrypted_plaintext)\n\nif __name__ == \"__main__\":\n    main()\n\n# Brute-Force Encryption and Decryption with BF\n\ndef bf_encrypt(plaintext, key):\n    ciphertext = \"\"\n    for char in plaintext:\n        if char in key:\n            ciphertext += key[char]\n        else:\n            ciphertext += char\n    return ciphertext\n\ndef bf_decrypt(ciphertext, key):\n    plaintext = \"\"\n    for char in ciphertext:\n        if char in key:\n            plaintext += key[char]\n        else:\n            plaintext += char\n    return plaintext\n\ndef main():\n    plaintext = input(\"Enter plaintext to encrypt: \")\n    key = input(\"Enter encryption key: \")\n    ciphertext = bf_encrypt(plaintext, key)\n    print(\"Encrypted ciphertext:\", ciphertext)\n    decrypted_plaintext = bf_decrypt(ciphertext, key)\n    print(\"Decrypted plaintext:\", decrypted_plaintext)\n\nif __name__ == \"__main__\":\n    main()\n\n# Brute-Force Encryption and Decryption with BF\n\ndef bf_encrypt(plaintext, key):\n    ciphertext = \"\"\n    for char in plaintext:\n        if char in key:\n            ciphertext += key[char]\n        else:\n            ciphertext += char\n    return ciphertext\n\ndef bf_decrypt(ciphertext, key):\n    plaintext = \"\"\n    for char in ciphertext:\n        if char in key:\n            plaintext += key[char]\n        else:\n            plaintext += char\n    return plaintext\n\ndef main():\n    plaintext = input(\"Enter plaintext to encrypt: \")\n    key = input(\"Enter encryption key: \")\n    ciphertext = bf_encrypt(plaintext, key)\n    print(\"Encrypted ciphertext:\", ciphertext)\n    decrypted_plaintext = bf_decrypt(ciphertext, key)\n    print(\"Decrypted plaintext:\", decrypted_plaintext)\n\nif __name__"}
{"task_id": "HumanEval/149", "completion": "def sort_by_length(lst):\n        return sorted(lst, key=len)\n    def delete_odd_length_strings(lst):\n        return [word for word in lst if len(word) % 2 == 0]\n    def sort_list_of_strings(lst):\n        return sorted(lst, key=len)\n    def delete_odd_length_strings(lst):\n        return [word for word in lst if len(word) % 2 == 0]\n    def sort_list_of_strings(lst):\n        return sorted(lst, key=len)\n    lst = delete_odd_length_strings(lst)\n    lst = sort_list_of_strings(lst)\n    return lst\ndef test_sorted_list_sum():\n    lst = [\"aa\", \"a\", \"aaa\"]\n    assert sorted_list_sum(lst) == [\"aa\"]\n    lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    assert sorted_list_sum(lst) == [\"ab\", \"cd\"]\n    lst = [\"aa\", \"aa\"]\n    assert sorted_list_sum(lst) == [\"aa\", \"aa\"]\n    lst = [\"aa\", \"aa\", \"aa\"]\n    assert sorted_list_sum(lst) == [\"aa\", \"aa\", \"aa\"]\n    lst = [\"aa\", \"aa\", \"aa\", \"aa\"]\n    assert sorted_list_sum(lst) == [\"aa\", \"aa\", \"aa\", \"aa\"]\n    lst = [\"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\","}
{"task_id": "HumanEval/150", "completion": "primes = [i for i in range(1, n + 1) if all([i % j != 0 for j in range(2, i)])]\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_recursive(n, x, y, primes):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_memo(n, x, y, primes):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_dp(n, x, y, primes):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary(n, x, y):\n    primes = [i for i in range(1, n + 1) if all([i % j != 0 for j in range(2, i)])]\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_recursive(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef x_or_y_binary_dp_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo_memo(n, x, y, primes, i):\n    if n in primes:\n        return x\n    return y\n\ndef "}
{"task_id": "HumanEval/151", "completion": "if len(lst) == 0:\n        return 0\n    \n    sum_of_odd_squares = 0\n    for num in lst:\n        if num % 2 != 0 and isinstance(num, int):\n            sum_of_odd_squares += num * num\n    return sum_of_odd_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\n\ndef get_longest_string(lst):\n    '''\n    Given a list of strings, return the length of the longest string.\n    If the list is empty, return 0.\n    \n    get_longest_string(['python', 'c', 'go', 'java']) == 5\n    get_longest_string(['']) == 0\n    get_longest_string(['a', 'bb', 'ccc', 'dddd']) == 5\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    longest_string = lst[0]\n    for string in lst:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return len(longest_string)\n\nprint(get_longest_string(['python', 'c', 'go', 'java']))\nprint(get_longest_string(['']))\nprint(get_longest_string(['a', 'bb', 'ccc', 'dddd']))\n\n\ndef get_longest_string_list(lst):\n    '''\n    Given a list of strings, return a list of the longest string in the list.\n    If the input list is empty, return an empty list.\n    \n    get_longest_string_list(['python', 'c', 'go', 'java']) == ['python', 'java']\n    get_longest_string_list(['']) == ['']\n    get_longest_string_list(['a', 'bb', 'ccc', 'dddd']) == ['a', 'bb', 'ccc', 'dddd']\n    '''\n    if len(lst) == 0:\n        return []\n    \n    longest_strings = []\n    longest_string = lst[0]\n    for string in lst:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    longest_strings.append(longest_string)\n    return longest_strings\n\nprint(get_longest_string_list(['python', 'c', 'go', 'java']))\nprint(get_longest_string_list(['']))\nprint(get_longest_string_list(['a', 'bb', 'ccc', 'dddd']))\n\n\ndef get_shortest_string_list(lst):\n    '''\n    Given a list of strings, return a list of the shortest string in the list.\n    If the input list is empty, return an empty list.\n    \n    get_shortest_string_list(['python', 'c', 'go', 'java']) == ['c']\n    get_shortest_string_list(['']) == ['']\n    get_shortest_string_list(['a', 'bb', 'ccc', 'dddd']) == ['a', 'bb', 'ccc', 'dddd']\n    '''\n    if len(lst) == 0:\n        return []\n    \n    shortest_strings = []\n    shortest_string = lst[0]\n    for string in lst:\n        if len(string) < len(shortest_string):\n            shortest_string"}
{"task_id": "HumanEval/152", "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\ndef is_valid_walk(walk):\n    \"\"\"You live in the city of Cartesia where all roads are laid out in a perfect grid.\n    You arrived ten minutes too early to an appointment, so you decided to take the opportunity to go for a \n    short walk. The city provides its citizens with a Walk Generating App on their phones -- every time you \n    tap the button it sends you an array of one-minute periods of time. \n    You locate your new starting point in the center of the city, and you need to walk exactly ten minutes \n    (you don't want to drive anywhere soon), while you're at it. Given a list of the cities you've \n    visited, return true if it is possible to get to the destination, false if you cannot.\n    The city comes with its own rules for walking: you can only walk on the roads you've already traveled on,\n    ie., you can't travel through any other connecting points, except the ending location.\n    \n    example:\n    \n    is_valid_walk(['n','s','n','s','n','s','n','s','n','s']) -> True\n    is_valid_walk(['w','e','w','e','w','e','w','e','w','e','w','e']) -> False\n    \"\"\"\n    return len(walk) == 10 and walk.count('n') == walk.count('s') and walk.count('e') == walk.count('w')\nprint(is_valid_walk(['n','s','n','s','n','s','n','s','n','s']))\nprint(is_valid_walk(['w','e','w','e','w','e','w','e','w','e','w','e']))\n\ndef find_smallest(arr):\n    \"\"\"Create a function called findSmallestInt() that takes an array of integers and returns its \n    smallest integer.\n    \n    example:\n    \n    findSmallestInt([78,56,232,12,18]) -> 56\n    findSmallestInt([78,56,232,12,18]) -> 56\n    \"\"\"\n    smallest = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest\nprint(findSmallestInt([78,56,232,12,18]))\n\ndef find_longest(strng):\n    \"\"\"\n    Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, \n    containing distinct letters, - each taken only once - coming from s1 or s2.\n    \n    example:\n    \n    find_longest(\"a\", \"ab\") -> \"ab\"\n    find_longest(\"loopingisfunbutdangerous\", \"lessdangerousthancoding\") -> \"abcdefghilnoprstu\"\n    find_longest(\"inmanylanguages\", \"theresapairoffunctions\") -> \"acefghilmnoprstuy\"\n    \"\"\"\n    s1, s2 = set(s1), set(s2)\n    return \"\".join(sorted(s1.union(s2), key=lambda x: ord(x)))\nprint(find_longest(\"a\", \"ab\"))\nprint(find_longest(\"loopingisfunbutdangerous\", \"lessdangerousthancoding\"))\nprint(find_longest(\"inmanylanguages\", \"theresapairoffunctions\"))\n\ndef get_middle(str):\n    \"\"\"You are going to be given a word. Your job is to return the middle character of the word. \n    If the word's length is odd, return the middle character. \n    If the word's length is even, return the middle 2 characters.\n    \n    example:\n    \n    get_middle(\"test\") -> \"es\"\n    get_middle(\"testing\") -> \"t\"\n    get_middle(\"middle\") -> \"dd\"\n    get_middle(\"A\") -> \"A\"\n    \"\"\"\n    return str[(len(str) - 1)//2:(len(str) + 2)//2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\ndef get_middle(str):\n    \"\"\"You are going to be given a word. Your job is to return the middle character of the word. \n    If the word's length is odd, return the middle character. \n    If the word's length is even, return the middle 2 characters.\n    \n    example:\n    \n    get_middle(\"test\") -> \"es\"\n    get_middle(\"testing\") -> \"t\"\n    get_middle(\"middle\") -> \"dd\"\n    get_middle(\"A\") -> \"A\"\n    \"\"\"\n    return str[(len(str) - 1)//2:(len(str) + 2)//2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\ndef get_next_prev_prime(num):\n    \"\"\"Implement a function which returns the previous and next prime numbers of the given integer.\n    If the number is prime return the string \"Not prime!\".\n    \n    example:\n    \n    get_next_prev_prime(17) -> 17-1"}
{"task_id": "HumanEval/153", "completion": "strongest_extension = ''\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = f\"{class_name}.{extension}\"\n            \n    return strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB']))\n\n\nprint(Strongest_Extension('Slices', ['AA', 'BB', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB', 'DD']))\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB', 'DD', 'EE']))\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB', 'DD', 'EE', 'FF']))\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB', 'DD', 'EE', 'FF', 'GG']))\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AAA', 'BBB', 'CCC']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AAA', 'BBB', 'CCC', 'ZZZ']))\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AAA', 'BBB', 'CCC', 'ZZZ']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AAA', 'BBB', 'CCC', 'ZZZ', 'ZZZ']))\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AAA', 'BBB', 'CCC', 'ZZZ', 'ZZZ', 'ZZZ']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AAA', 'BBB', 'CCC', 'ZZZ', 'ZZZ', 'ZZZ', 'ZZZ'"}
{"task_id": "HumanEval/154", "completion": "for i in range(len(b)):\n        if b[0:i] in a:\n            return True\n    return False\n\n\n# Test cases\nassert cycpattern_check(\"abcd\",\"abd\") == False\nassert cycpattern_check(\"hello\",\"ell\") == True\nassert cycpattern_check(\"whassup\",\"psus\") == False\nassert cycpattern_check(\"abab\",\"baa\") == True\nassert cycpattern_check(\"abab\",\"abba\") == False\nassert cycpattern_check(\"abab\",\"ab\") == True\nassert cycpattern_check(\"abab\",\"abab\") == True\nassert cycpattern_check(\"abab\",\"abababab\") == True\nassert cycpattern_check(\"abababababab\",\"abab\") == True\nassert cycpattern_check(\"abababababab\",\"abababab\") == False\nassert cycpattern_check(\"abababababab\",\"ababab\") == True\nassert cycpattern_check(\"abababababab\",\"ababab\") == False\nassert cycpattern_check(\"abababababab\",\"aba\") == True\nassert cycpattern_check(\"abababababab\",\"aba\") == False\nassert cycpattern_check(\"abababababab\",\"ababab\") == True\nassert cycpattern_check(\"abababababab\",\"abab\") == False\nassert cycpattern_check(\"abababababab\",\"abababab\") == False\nassert cycpattern_check(\"abababababab\",\"abababababababab\") == True\nassert cycpattern_check(\"abababababab\",\"abababababab\") == False\nassert cycpattern_check(\"abababababababab\",\"abab\") == True\nassert cycpattern_check(\"abababababab\",\"ababab\") == True\nassert cycpattern_check(\"abababababab\",\"abababab\") == True\nassert cycpattern_check(\"abababababab\",\"abababababababab\") == True\nassert cycpattern_check(\"abababababab\",\"ababababababab\") == True\nassert cycpattern_check(\"abababababab\",\"ababababab\") == True\nassert cycpattern_check(\"abababababab\",\"abababab\") == True\nassert cycpattern_check(\"abababababab\",\"abab\") == True\nassert cycpattern_check(\"abababababab\",\"ab\") == True\nassert cycpattern_check(\"abababababab\",\"abababab\") == True\nassert cycpattern_check(\"ababababab\",\"ababab\") == True\nassert cycpattern_check(\"ababababab\",\"ababab\") == True\nassert cycpattern_check(\"ababababab\",\"ab\") == True\nassert cycpattern_check(\"ababababab\",\"ababab\") == True\nassert cycpattern_check(\"ababababab\",\"abababab\") == True\nassert cycpattern_check(\"ababababab\",\"ababababab\") == True\nassert cycpattern_check(\"ababababab\",\"ab\") == True\nassert cycpattern_check(\"ababababab\",\"ababab\") == True\nassert cycpattern_check(\"ababababab\",\"abababab\") == True\nassert cycpattern_check(\"ababababab\",\"ababababab\") == True\nassert cycpattern_check(\"ababab"}
{"task_id": "HumanEval/155", "completion": "odd_count = 0\n    even_count = 0\n    if num < 0:\n        num = num * -1\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(1111111111111111111111111111111"}
{"task_id": "HumanEval/156", "completion": "def num_to_str(n, symbol):\n        \"\"\"\n        Given a positive integer, obtain its roman numeral equivalent as a string,\n        and return it in lowercase.\n        Restrictions: 1 <= num <= 1000\n        \"\"\"\n        symbols = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n            \"IV\": 4,\n            \"IX\": 9,\n            \"XL\": 40,\n            \"XC\": 90,\n            \"CD\": 400,\n            \"CM\": 900,\n        }\n        return symbols.get(symbol) * n\n\n    def num_to_roman(n):\n        \"\"\"\n        Given a positive integer, obtain its roman numeral equivalent as a string,\n        and return it in lowercase.\n        Restrictions: 1 <= num <= 1000\n        \"\"\"\n        symbols = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        roman = \"\"\n        for i in range(len(symbols)):\n            if n // num_to_str(symbols[symbols[i]], i) >= 0 and n % num_to_str(\n                symbols[symbols[i]], i\n            ) >= 0:\n                roman += num_to_str(n // num_to_str(symbols[symbols[i]], i), i)\n                n %= num_to_str(symbols[symbols[i]], i)\n        return roman.lower()\n\n    return num_to_roman(number)\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def num_to_str(n, symbol):\n        \"\"\"\n        Given a positive integer, obtain its roman numeral equivalent as a string,\n        and return it in lowercase.\n        Restrictions: 1 <= num <= 1000\n        \"\"\"\n        symbols = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n            \"IV\": 4,\n            \"IX\": 9,\n            \"XL\": 40,\n            \"XC\": 90,\n            \"CD\": 400,\n            \"CM\": 900,\n        }\n        return symbols.get(symbol) * n\n\n    def num_to_roman(n):\n        \"\"\"\n        Given a positive integer, obtain its roman numeral equivalent as a string,\n        and return it in lowercase.\n        Restrictions: 1 <= num <= 1000\n        \"\"\"\n        symbols = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        roman = \"\"\n        for i in range(len(symbols)):\n            if n // num_to_str(symbols[symbols[i]], i) >= 0 and n % num_to_str(\n                symbols[symbols[i]], i\n            ) >= 0:\n                roman += num_to_str(n // num_to_str(symbols[symbols[i]], i), i)\n                n %= num_to_str(symbols[symbols[i]], i)\n        return roman.lower()\n\n    return num_to_roman(number)\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def num_to_str(n, symbol):\n        \"\"\"\n        Given a positive integer, obtain its roman numeral equivalent as a string,\n        and return it in lowercase.\n        Restrictions: 1 <= num <= 1000\n        \"\"\"\n        symbols = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n            \"IV\": 4,\n            \"IX\": 9,\n            \"XL\": 40,\n            \"XC\": 90,\n            \"CD\": 400,\n            \"CM\": 900,\n        }\n        return symbols.get(symbol)"}
{"task_id": "HumanEval/157", "completion": "# TODO: Implement me.\n    if a ** 2 + b ** 2 == c ** 2:\n        return True\n    else:\n        return False\n    \ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides can form a triangle, False otherwise.\n    Note:\n    The sum of any two sides of a triangle is always greater than the third side.\n    '''\n    # TODO: Implement me.\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n    \ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    Note:\n    An equilateral triangle is a triangle in which all three sides are equal in length.\n    '''\n    # TODO: Implement me.\n    if a == b and a == c:\n        return True\n    else:\n        return False\n\ndef is_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a scalene triangle, False otherwise.\n    Note:\n    A scalene triangle is a triangle in which all three sides are different in length.\n    '''\n    # TODO: Implement me.\n    if a != b and a != c and b != c:\n        return True\n    else:\n        return False\n    \ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    Note:\n    An isosceles triangle is a triangle in which two sides are of equal length and \n    at least one of the other two sides is of a different length.\n    '''\n    # TODO: Implement me.\n    if a == b and a != c or a == c and a != b or c == b and c != a:\n        return True\n    else:\n        return False\n    \ndef is_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    # TODO: Implement me.\n    if a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2:\n        return"}
{"task_id": "HumanEval/158", "completion": "# your code\n    list_max_unique=[]\n    for word in words:\n        unique_characters=set(word)\n        list_max_unique.append(len(unique_characters))\n    max_unique_characters=max(list_max_unique)\n    max_unique_characters_index=list_max_unique.index(max_unique_characters)\n    return words[max_unique_characters_index]\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # your code\n    list_max_unique=[]\n    for word in words:\n        unique_characters=set(word)\n        list_max_unique.append(len(unique_characters))\n    max_unique_characters=max(list_max_unique)\n    max_unique_characters_index=list_max_unique.index(max_unique_characters)\n    return words[max_unique_characters_index]\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # your code\n    list_max_unique=[]\n    for word in words:\n        unique_characters=set(word)\n        list_max_unique.append(len(unique_characters))\n    max_unique_characters=max(list_max_unique)\n    max_unique_characters_index=list_max_unique.index(max_unique_characters)\n    return words[max_unique_characters_index]\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\nprint(find_max([\"abcd\", \"efghi\",\"jklmn\"]))\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # your code\n    list_max_unique=[]\n    for word in words:\n        unique_characters=set(word)\n        list_max_unique.append(len(unique_characters))\n    max_unique_charac"}
{"task_id": "HumanEval/159", "completion": "# TODO: Write code here\n    return None\n    \ndef eat(number, need, remaining):\n    \n    if (number < 0 or number > 1000):\n        print(\"number should be between 0 and 1000\")\n        return None\n    \n    if (need < 0 or need > 1000):\n        print(\"need should be between 0 and 1000\")\n        return None\n    \n    if (remaining < 0 or remaining > 1000):\n        print(\"remaining should be between 0 and 1000\")\n        return None\n    \n    if (number >= remaining):\n        return [number, remaining]\n    else:\n        return [number, remaining - number]\n    \ndef eat(number, need, remaining):\n    \n    if (number < 0 or number > 1000):\n        print(\"number should be between 0 and 1000\")\n        return None\n    \n    if (need < 0 or need > 1000):\n        print(\"need should be between 0 and 1000\")\n        return None\n    \n    if (remaining < 0 or remaining > 1000):\n        print(\"remaining should be between 0 and 1000\")\n        return None\n    \n    if (number >= remaining):\n        return [number, remaining]\n    else:\n        return [number, remaining - number]\n    \ndef eat(number, need, remaining):\n    \n    if (number < 0 or number > 1000):\n        print(\"number should be between 0 and 1000\")\n        return None\n    \n    if (need < 0 or need > 1000):\n        print(\"need should be between 0 and 1000\")\n        return None\n    \n    if (remaining < 0 or remaining > 1000):\n        print(\"remaining should be between 0 and 1000\")\n        return"}
{"task_id": "HumanEval/160", "completion": "operator_list = operator.copy()\n    operand_list = operand.copy()\n    expression_list = []\n    for i in range(len(operator_list)):\n        if operator_list[i] == '+':\n            expression_list.append(operand_list[i] + operand_list[i+1])\n        elif operator_list[i] == '-':\n            expression_list.append(operand_list[i] - operand_list[i+1])\n        elif operator_list[i] == '*':\n            expression_list.append(operand_list[i] * operand_list[i+1])\n        elif operator_list[i] == '**':\n            expression_list.append(operand_list[i] ** operand_list[i+1])\n        elif operator_list[i] == '//':\n            expression_list.append(operand_list[i] // operand_list[i+1])\n    return sum(expression_list)\n\n    \n\ndef do_algebra_with_bracket(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + (3 * 4 - 5)\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator_list = operator.copy()\n    operand_list = operand.copy()\n    bracket_list = []\n    bracket_count = 0\n    for i in range(len(operator_list)):\n        if operator_list[i] == '(':\n            bracket_list.append(i)\n            bracket_count += 1\n        elif operator_list[i] == ')':\n            bracket_count -= 1\n            if bracket_count == 0:\n                bracket_list.append(i+1)\n                operator_list = operator_list[:bracket_list[0]] + operator_list[bracket_list[1]:]\n                operand_list = operand_list[:bracket_list[0]] + operand_list[bracket_list[1]:]\n                break\n    expression_list"}
{"task_id": "HumanEval/161", "completion": "res = []\n    for i in range(len(s)):\n        if s[i].isupper():\n            res.append(s[i].lower())\n        elif s[i].islower():\n            res.append(s[i].upper())\n        else:\n            res.append(s[i])\n    return ''.join(res)\n\ndef is_digit(s):\n    \"\"\"You are given a string s.\n    The function should return True if s is a digit. Otherwise, it should return False.\n    Examples\n    is_digit(\"1\") = True\n    is_digit(\"A\") = False\n    is_digit(\"#\") = False\n    \"\"\"\n    return s.isdigit()\ndef is_vowel(s):\n    \"\"\"You are given a string s.\n    The function should return True if s is a vowel. Otherwise, it should return False.\n    Examples\n    is_vowel(\"a\") = True\n    is_vowel(\"b\") = False\n    is_vowel(\"e\") = True\n    \"\"\"\n    return s in \"aeiouAEIOU\"\ndef is_consonant(s):\n    \"\"\"You are given a string s.\n    The function should return True if s is a consonant. Otherwise, it should return False.\n    Examples\n    is_consonant(\"a\") = False\n    is_consonant(\"b\") = True\n    is_consonant(\"e\") = False\n    \"\"\"\n    return not is_vowel(s)\ndef sum_of_digits(s):\n    \"\"\"You are given a string s.\n    The function should return the sum of the digits in s.\n    Examples\n    sum_of_digits(\"a1b2c3\") = 6\n    sum_of_digits(\"a\") = 0\n    sum_of_digits(\"A2B3C4\") = 10\n    \"\"\"\n    res = 0\n    for i in s:\n        if i.isdigit():\n            res += int(i)\n    return res\ndef sum_of_positive_digits(s):\n    \"\"\"You are given a string s.\n    The function should return the sum of the positive digits in s.\n    Examples\n    sum_of_positive_digits(\"a1b2c3\") = 5\n    sum_of_positive_digits(\"a\") = 0\n    sum_of_positive_digits(\"A2B3C4\") = 7\n    \"\"\"\n    res = 0\n    for i in s:\n        if i.isdigit() and int(i) > 0:\n            res += int(i)\n    return res\ndef factorial(n):\n    \"\"\"You are given a non-negative integer n.\n    The function should return n factorial.\n    Examples\n    factorial(0) = 1\n    factorial(1) = 1\n    factorial(3) = 6\n    \"\"\"\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\ndef fibonacci(n):\n    \"\"\"You are given a non-negative integer n.\n    The function should return the nth Fibonacci number.\n    Examples\n    fibonacci(0) = 0\n    fibonacci(1) = 1\n    fibonacci(2) = 1\n    fibonacci(3) = 2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef factorial_recursive(n):\n    \"\"\"You are given a non-negative integer n.\n    The function should return n factorial.\n    Examples\n    factorial_recursive(0) = 1\n    factorial_recursive(1) = 1\n    factorial_recursive(3) = 6\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\ndef gcd(a, b):\n    \"\"\"You are given two non-negative integers a and b.\n    The function should return their greatest common divisor.\n    Examples\n    gcd(3, 12) = 3\n    gcd(14, 7) = 7\n    gcd(15, 10) = 5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\ndef lcm(a, b):\n    \"\"\"You are given two non-negative integers a and b.\n    The function should return their least common multiple.\n    Examples\n    lcm(3, 12) = 12\n    lcm(14, 7) = 14\n    lcm(15, 10) = 30\n    \"\"\"\n    return a * b / gcd(a, b)\ndef lcm_recursive(a, b):\n    \"\"\"You are given two non-negative integers a and b.\n    The function should return their least common multiple.\n    Examples\n    lcm_recursive(3, 12) = 12\n    lcm_recursive(14, 7) = 14\n    lcm_recursive(15, 10) = 30\n    \"\"\"\n    if a == b:\n        return a\n    elif a > b:\n        return lcm_recursive(a - b, b)\n    else:\n        return lcm_recursive(a, b - a)\ndef lcm_recursive_2(a, b):\n    \"\"\"You are given two non-negative integers a and b.\n    The function should return their least common multiple.\n    Examples\n    lcm_recursive_2(3, 12) = 12\n    lcm_recursive_2(14, 7) = 14\n    lcm_recursive_2(15, 10) = 30\n    \"\"\"\n    if a == b:\n        return a\n    else:\n        return lcm_recursive_2(a, b - a) if a > b else lcm_recursive_2(a - b, b)\ndef lcm_recursive_3(a, b):\n    \"\"\"You are given two non-negative integers a and b.\n    The function should return their least common multiple.\n    Examples\n    lcm_recursive_3(3, 12) = 12\n    lcm_recursive_3(14, 7) = 14\n    lcm_recursive_3(15, 10) = 30\n    \"\"\"\n    if a == b:\n        return a\n    else:\n        return lcm_recursive_3("}
{"task_id": "HumanEval/162", "completion": "if not text:\n        return\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\ndef md5_string_to_hex(md5):\n    \"\"\"\n    Given a md5 hash 'md5', return its hexadecimal equivalent string.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_string_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == 'd811a4160995751f515d4e1e8f8a6650'\n    \"\"\"\n    if not md5:\n        return\n    import hashlib\n    return hashlib.md5(md5.encode('utf-8')).hexdigest()\ndef md5_hex_to_string(md5):\n    \"\"\"\n    Given a hexadecimal md5 hash 'md5', return its string equivalent string.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_hex_to_string('d811a4160995751f515d4e1e8f8a6650') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5:\n        return\n    import hashlib\n    return hashlib.md5(md5.encode('utf-8')).hexdigest()\ndef hex_string_to_md5(md5):\n    \"\"\"\n    Given a hexadecimal md5 hash 'md5', return its md5 hash string.\n    If 'md5' is an empty string, return None.\n\n    >>> hex_string_to_md5('d811a4160995751f515d4e1e8f8a6650') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5:\n        return\n    import hashlib\n    return hashlib.md5(md5.encode('utf-8')).hexdigest()\ndef md5_string_to_md5(md5):\n    \"\"\"\n    Given a md5 hash 'md5', return its md5 hash string.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_string_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5:\n        return\n    import hashlib\n    return hashlib.md5(md5.encode('utf-8')).hexdigest()\ndef md5_to_md5_string(md5):\n    \"\"\"\n    Given a md5 hash 'md5', return its md5 hash string.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_to_md5_string('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5:\n        return\n    import hashlib\n    return hashlib.md5(md5.encode('utf-8')).hexdigest()\ndef md5_to_hex_string(md5):\n    \"\"\"\n    Given a md5 hash 'md5', return its hexadecimal equivalent string.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_to_hex_string('3e25960a79dbc69b674cd4ec67a72c62') == 'd811a4160995751f515d4e1e8f8a6650'\n    \"\"\"\n    if not md5:\n        return\n    import hashlib\n    return hashlib.md5(md5.encode('utf-8')).hexdigest()\ndef hex_to_md5(hex):\n    \"\"\"\n    Given a hexadecimal md5 hash 'hex', return its md5 hash string.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_md5('d811a4160995751f515d4e1e8f8a6650') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not hex:\n        return\n    import hashlib\n    return hashlib.md5(hex.encode('utf-8')).hexdigest()\ndef hex_string_to_hex(hex):\n    \"\"\"\n    Given a hexadecimal md5 hash 'hex', return its hexadecimal equivalent string.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_string_to_hex('d811a4160995751f515d4e1e8f8a6650') == 'd811a4160995751f515d4e1e8f8a6650'\n    \"\"\"\n    if not hex:\n        return\n    import hashlib\n    return hashlib.md5(hex.encode('utf-8')).hexdigest()\ndef hex_to_hex_string(hex):\n    \"\"\"\n    Given a hexadecimal md5 hash 'hex', return its hexadecimal equivalent string.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_hex_string('d811a4160995751f515d4e1e8f8a6650') == 'd811a4160995751f515d4e1e8f8a6650'\n    \"\"\"\n    if not hex:\n        return\n    import hashlib\n    return hashlib.md5(hex.encode('utf-8')).hexdigest()\ndef hex_to_md5_string(hex):\n    \"\"\"\n    Given a hexadecimal md5 hash 'hex', return its md5 hash string.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_md5_string('d811a4160995751f515d4e1e8f8a6650') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not hex:\n        return\n    import hashlib\n    return hashlib.md5(hex.encode('utf-8')"}
{"task_id": "HumanEval/163", "completion": "output = []\n    for i in range(a,b+1):\n        if i%2==0:\n            output.append(i)\n    return output\n\n\ndef is_even(n):\n    \"\"\"\n    Given an integer n, return True if n is even and False if n is odd.\n    \"\"\"\n    if n%2==0:\n        return True\n    else:\n        return False\n    \ndef generate_odds(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the odd digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_odds(2, 8) => [3, 5, 7]\n    generate_odds(8, 2) => [3, 5, 7]\n    generate_odds(10, 14) => [11, 13]\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == False:\n            output.append(i)\n    return output\n    \ndef generate_even(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_even(2, 8) => [2, 4, 6, 8]\n    generate_even(8, 2) => [2, 4, 6, 8]\n    generate_even(10, 14) => [10, 12]\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    return output\n    \ndef generate_sum(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the sum of the even digits\n    between a and b, inclusive.\n\n    For example:\n    generate_sum(2, 8) => 2 + 4 + 6 + 8 => 18\n    generate_sum(8, 2) => 2 + 4 + 6 + 8 => 18\n    generate_sum(10, 14) => 10 + 12 => 22\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    return sum(output)\n\ndef generate_product(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the product of the even\n    digits between a and b, inclusive.\n\n    For example:\n    generate_product(2, 8) => 2 * 4 * 6 * 8 => 48\n    generate_product(8, 2) => 2 * 4 * 6 * 8 => 48\n    generate_product(10, 14) => 10 * 12 => 120\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    output = output[0]*output[1]\n    return output\n\ndef generate_average(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the average of the even\n    digits between a and b, inclusive.\n\n    For example:\n    generate_average(2, 8) => (2 + 4 + 6 + 8) / 4 => 6\n    generate_average(8, 2) => (2 + 4 + 6 + 8) / 4 => 6\n    generate_average(10, 14) => (10 + 12) / 2 => 11\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    output = sum(output)/len(output)\n    return output\n    \ndef generate_smallest(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the smallest of the even\n    digits between a and b, inclusive.\n\n    For example:\n    generate_smallest(2, 8) => 2\n    generate_smallest(8, 2) => 2\n    generate_smallest(10, 14) => 10\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    output.sort()\n    return output[0]\n    \ndef generate_largest(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the largest of the even\n    digits between a and b, inclusive.\n\n    For example:\n    generate_largest(2, 8) => 8\n    generate_largest(8, 2) => 8\n    generate_largest(10, 14) => 14\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    output.sort()\n    return output[-1]\n    \n    \ndef generate_longest(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the length of the longest\n    even-digit sequence between a and b, inclusive.\n\n    For example:\n    generate_longest(2, 8) => 3\n    generate_longest(8, 2) => 3\n    generate_longest(10, 14) => 2\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) == True:\n            output.append(i)\n    output = len(output)\n    return output\n    \ndef generate_shortest(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the length of the shortest\n    even-digit sequence between a and b, inclusive.\n\n    For example:\n    generate_shortest(2, 8) => 1\n    generate_shortest(8, 2) => 1\n    generate_shortest(10, 14) => 1\n    \"\"\"\n    output = []\n    for i in range(a,b+1):\n        if is_even(i) =="}

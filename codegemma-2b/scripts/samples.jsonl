{"task_id": "task0", "completion": "    for x in range(len(numbers) - 1):\n        for y in range(x + 1, len(numbers)):\n            if abs(numbers[x] - numbers[y]) < threshold:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "task1", "completion": "    def separate_paren_groups(paren_string: str) -> List[str]:\n        \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n        separate those group into separate strings and return the list of those.\n        Separate groups are balanced (each open brace is properly closed) and not nested within each other\n        Ignore any spaces in the input string.\n        >>> separate_paren_groups('( ) (( )) (( )( ))')\n        ['()', '(())', '(()())']\n        \"\"\"\n        stack = []\n        paren_groups = []\n        paren_string = paren_string.replace(\" \", \"\")\n        for char in paren_string:\n            if char == \"(\":\n                stack.append(char)\n            elif char == \")\":\n                paren_groups.append(stack.pop() + char)\n        return paren_groups\n    paren_groups = separate_paren_groups(paren_string)\n    paren_groups = paren_groups[1:]\n    paren_groups = paren_groups[:len(paren_groups)-1]\n    paren_groups = paren_groups[1::]\n    return paren_groups\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n"}
{"task_id": "task2", "completion": "    if number >= 0 and number < 1:\n        return number\n    else:\n        return truncate_number(number - 1)\n\ndef truncate_decimals(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimals part of the number.\n    >>> truncate_decimals(3.5)\n    0.0\n    \"\"\"\n    if number >= 0 and number < 1:\n        return number\n    else:\n        return truncate_decimals(number - truncate_number(number))\n\ndef truncate_number(number: float, decimals: int) -> float:\n    \"\"\" Given a positive floating point number, truncate it up to given\n    decimals and return the new number.\n    >>> truncate_number(3.5, 1)\n    3.5\n    >>> truncate_number(3.5, 0)\n    4.0\n    >>> truncate_number(3.5, 2)\n    3.5\n    \"\"\"\n    if number >= 0 and number < 1:\n        return truncate_decimals(number) * 10 ** decimals\n    else:\n        return truncate_decimals(number) * 10 ** decimals\n\n\ndef truncate_decimals(number: float, decimals: int) -> float:\n    \"\"\" Given a positive floating point number, truncate it up to given\n    decimals and return the new number.\n    >>> truncate_decimals(3.5, 1)\n    0.5\n    >>> truncate_decimals(3.5, 0)\n    4.0\n    >>> truncate_decimals(3.5, 2)\n    3.5\n    \"\"\"\n    if number >= 0 and number < 1:\n        return truncate_decimals(number) * 10 ** decimals\n    else:\n        return truncate_decimals(number) * 10 ** decimals\n\n\ndef truncate_number(number: float, decimals: int) -> float:\n    \"\"\" Given a positive floating point number, truncate it up to given\n    decimals and return the new number.\n    >>> truncate_number(3.5, 1)\n    3.5\n    >>> truncate_number(3.5, 0)\n    4.0\n    >>> truncate_number(3.5, 2)\n    3.5\n    \"\"\"\n    if number >= 0 and number < 1:\n        return truncate_decimals(number) * 10 ** decimals\n    else:\n        return truncate_decimals(number) * 10 **"}
{"task_id": "task3", "completion": "    balance: int = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "task4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nif __name__ == '__main__':\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))\n"}
{"task_id": "task5", "completion": "    if not numbers:\n        return []\n    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result\n\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n "}
{"task_id": "task6", "completion": "    parens = paren_string.split()\n    parens_list = [[]]\n    parens_list_indices = [0]\n    for i in range(len(parens)):\n        if parens[i] == '(':\n            parens_list[-1].append(parens[i])\n            parens_list_indices.append(parens_list_indices[-1])\n        elif parens[i] == ')':\n            parens_list_indices.pop()\n            parens_list.append([])\n            parens_list_indices.append(parens_list_indices[-1])\n        else:\n            parens_list[parens_list_indices[-1]].append(parens[i])\n    return [len(x) for x in parens_list[1:]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "task7", "completion": "    result = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            result.append(strings[i])\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            result.append(strings[i])\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            result.append(strings[i])\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            result.append(strings[i])\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            result.append(strings[i])\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain g"}
{"task_id": "task8", "completion": "    return None\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "task9", "completion": "    rolling_max_list = []\n    rolling_max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        rolling_max_list.append(max(numbers[0:i + 1]))\n    return rolling_max_list\n\n\ndef rolling_sums(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    >>> rolling_sums([1, 2, 3, 2, 3, 4, 2])\n    [1, 3, 6, 6, 9, 13, 15]\n    \"\"\"\n    rolling_sums_list = []\n    rolling_sums_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        rolling_sums_list.append(numbers[i] + rolling_sums_list[i - 1])\n    return rolling_sums_list\n\n\ndef rolling_product(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling product element found until given moment\n    in the sequence.\n    >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 6, 12, 24, 48, 96]\n    \"\"\"\n    rolling_product_list = []\n    rolling_product_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        rolling_product_list.append(numbers[i] * rolling_product_list[i - 1])\n    return rolling_product_list\n\n\ndef rolling_sums_odd(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum of odd element found until given moment\n    in the sequence.\n    >>> rolling_sums_odd([1, 2, 3, 2, 3, 4, 2])\n    [1, 3, 5, 5, 5, 5, 5]\n    \"\"\"\n    rolling_sums_odd_list = []\n    rolling_sums_odd_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        if numbers[i] % 2 != 0:\n            rolling_sums_odd_list.append(numbers[i] + rolling_sums_odd_list[i - 1])\n        else:\n            rolling_sums_odd_list.append(rolling_sums_odd_list[i - 1])\n    return rolling_sums_odd_list\n\n\ndef rolling_product_odd(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling product of odd element found until given moment\n    in the sequence.\n    >>> rolling_product_odd([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 6, 24, 48, 96, 192]\n    \"\"\"\n    rolling_product_odd_list = []\n    rolling_product_odd_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        if numbers[i] % 2 != 0:\n            rolling_product_odd_list.append(numbers[i] * rolling_product_odd_list[i - 1])\n        else:\n            rolling_product_odd_list.append(rolling_product_odd_list[i - 1])\n    return rolling_product_odd_list\n\n\ndef rolling_sums_even(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum of even element found until given moment\n    in the sequence.\n    >>> rolling_sums_even([1, 2, 3, 2, 3, 4, 2])\n    [1, 3, 6, 6, 6, 6, 6]\n    \"\"\"\n    rolling_sums_even_list = []\n    rolling_sums_even_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        if "}
{"task_id": "task10", "completion": "    longest_palindrome = \"\"\n    for i, char in enumerate(string):\n        for j in range(i, len(string) + 1):\n            substring = string[i:j]\n            if is_palindrome(substring):\n                longest_palindrome = substring\n                break\n    return string + longest_palindrome[::-1]\n\n\ndef test_is_palindrome():\n    assert is_palindrome('') is True\n    assert is_palindrome('a') is True\n    assert is_palindrome('aba') is True\n    assert is_palindrome('abcba') is True\n    assert is_palindrome('abc') is False\n    assert is_palindrome('abcd') is False\n    assert is_palindrome('abcc') is False\n    assert is_palindrome('abcdef') is False\n\n\ndef test_make_palindrome():\n    assert make_palindrome('') == ''\n    assert make_palindrome('a') == 'a'\n    assert make_palindrome('b') == 'b'\n    assert make_palindrome('c') == 'c'\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('abca') == 'abcabac'\n    assert make_palindrome('abcd') == 'abcd'\n    assert make_palindrome('abcdcb') == 'abcdcb'\n    assert make_palindrome('abcdcba') == 'abcdcbac'\n    assert make_palindrome('abcdcbac') == 'abcdcbac'\n\n\ndef main() -> None:\n    import doctest\n    doctest.testmod()\n    print(make_palindrome('abcdcbac'))\n\n\nif __name__ == '__main__':\n    main()\n\nclass Node:\n    \"\"\" Node for linked list \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n    def __str__(self):\n        \"\"\" Print node and next node \"\"\"\n        if self.next is not None:\n            return 'Node({}) -> {}'.format(self.value, self.next.value)\n        else:\n            return 'Node({})'.format(self.value)\n\n\nclass LinkedList:\n    \"\"\" Linked List \"\"\"\n\n    def __init__(self):\n        self.head = None\n        self.tail = self.head\n\n    def __str__(self):\n        \"\"\" Print list \"\"\"\n        node = self.head\n        nodes = []\n        while node is not None:\n            nodes.append(node.value)\n            node = node.next\n        nodes.append('None')\n        return ' -> '.join(nodes)\n\n    def insert_at_front(self, value):\n        \"\"\" Insert node at front of list \"\"\"\n        if self.head is "}
{"task_id": "task11", "completion": ""}
{"task_id": "task12", "completion": "    if strings:\n        longest_str = strings[0]\n        for i in strings:\n            if len(longest_str) < len(i):\n                longest_str = i\n        return longest_str\n    else:\n        return None\n"}
{"task_id": "task13", "completion": ""}
{"task_id": "task14", "completion": "    prefixes = []\n    prefix = \"\"\n    for i in range(len(string)):\n        prefix += string[i]\n        prefixes.append(prefix)\n    return prefixes\n\n\ndef test_all_prefixes():\n    \"\"\" Test all_prefixes function\"\"\"\n    assert all_prefixes('abc') == ['a', 'ab', 'abc']\n    assert all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n\ndef main():\n    test_all_prefixes()\n    print(\"all_prefixes test passed\")\n\nif __name__ == \"__main__\":\n    main()\n\n\n# def test_all_prefixes():\n#     \"\"\" Test all_prefixes function\"\"\"\n#     assert all_prefixes('abc') == ['a', 'ab', 'abc']\n#     assert all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n\n\n# def main():\n#     test_all_prefixes()\n#     print(\"all_prefixes test passed\")\n\n# if __name__ == \"__main__\":\n#     main()\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    suffixes = []\n    suffix = \"\"\n    for i in range(len(string)):\n        suffix += string[i]\n        suffixes.append(suffix)\n    return suffixes\n\n\ndef longest_common_prefix(string1: str, string2: str) -> str:\n    \"\"\" Return longest common prefix between two input strings\n    >>> longest_common_prefix('abcdef', 'abcdefghi')\n    'abcdef'\n    \"\"\"\n    min_len = min(len(string1), len(string2))\n    prefix = \"\"\n    for i in range(min_len):\n        if string1[i] == string2[i]:\n            prefix += string1[i]\n        else:\n            break\n    return prefix\n\n\ndef test_longest_common_prefix():\n    \"\"\" Test longest_common_prefix function\"\"\"\n    assert longest_common_prefix('abcdef', 'abcdefghi') == 'abcdef'\n    assert longest_common_prefix('abcdef', 'abcdefghil') == 'abc'\n    assert longest_common_prefix('abcdef', 'abcdefghijk') == ''\n\n\ndef main():\n    test_longest_common_prefix()\n    print(\"longest_common_prefix test passed\")\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "task15", "completion": "    \n    def _string_sequence(n: int) -> str:\n        \"\"\" Helper function to recursively build string starting from 0 upto n inclusive.\n        >>> _string_sequence(0)\n        '0'\n        >>> _string_sequence(5)\n        '0 1 2 3 4 5'\n        \"\"\"\n        if n == 0:\n            return '0'\n        else:\n            return str(n) + ' ' + _string_sequence(n-1)\n    return _string_sequence(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "task16", "completion": "    seen_chars = set()\n    for ch in string:\n        seen_chars.add(ch.lower())\n    return len(seen_chars)\n\n\ndef sum_of_digits(number: int) -> int:\n    \"\"\" Given a number, sum up its digits\n    >>> sum_of_digits(123)\n    6\n    >>> sum_of_digits(1000)\n    1\n    \"\"\"\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        sum += digit\n        number //= 10\n    return sum\n\n\ndef count_vowel(string: str) -> int:\n    \"\"\" Count the number of vowels in a given string\n    >>> count_vowel('Jerry')\n    2\n    >>> count_vowel('xyzXYZ')\n    0\n    \"\"\"\n    vowel_count = 0\n    vowel_set = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for ch in string:\n        if ch in vowel_set:\n            vowel_count += 1\n    return vowel_count\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Calculate the factorial of a given number.\n    >>> factorial(0)\n    1\n    >>> factorial(5)\n    120\n    \"\"\"\n    fac = 1\n    for i in range(1, n+1):\n        fac *= i\n    return fac\n\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Given a string, reverse it.\n    >>> reverse_string('Jerry')\n    'rejerJ'\n    \"\"\"\n    reversed_string = ''\n    for ch in string:\n        reversed_string = ch + reversed_string\n    return reversed_string\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Given a string, check if it is a palindrome (reads the same forward and backward)\n    >>> is_palindrome('rejerJ')\n    True\n    >>> is_palindrome('abcba')\n    True\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n    reversed_string = reverse_string(string)\n    return reversed_string == string\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Given a number, check if it is a prime number\n    >>> is_prime(17)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if number == 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef is_anagram(string1: str, string2: str) -> bool:\n    \"\"\" Given two strings, check if they are anagrams\n    >>> is_anagram('silent', 'listen')\n    True\n    >>> is_anagram('abc', 'cba')\n    True\n    >>> is_anagram('abc', 'def')\n    False\n    \"\"\"\n    return sorted(string1) == sorted(string2)\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Given a number, return the nth Fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Given two numbers, return their greatest common divisor\n    >>> gcd(1, 1)\n    1\n    >>> gcd(8, 12)\n    4\n    >>> gcd(20, 30)\n    10\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Given two numbers, return their least common multiple\n    >>> lcm(1, 1)\n    1\n    >>> lcm(8, 12)\n    48\n    >>> lcm(20, 30)\n    60\n    \"\"\"\n    return a * b // gcd(a, b)\n\n\ndef gcd_lcm(a: int, b: int) -> tuple[int, int]:\n    \"\"\" Given two numbers, return their greatest common divisor and least common multiple\n    >>> gcd_lcm(1, 1)\n    (1, 1)\n    >>> gcd_lcm(8, 12)\n    (4, 48)\n    >>> gcd_lcm(20, 30)\n    (10, 60)\n    \"\"\"\n    return gcd(a, b), lcm(a, b)\n\n\ndef is_perfect_square(number: int) -> bool:\n    \"\"\" Given a number, check if it is a perfect square\n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(2)\n    False\n    >>> is_perfect_square(4)\n    True\n    \"\"\"\n    return"}
{"task_id": "task17", "completion": "    note_list = music_string.split()\n    note_list_int = []\n    for i in note_list:\n        if i[-1] == 'o':\n            note_list_int.append(4)\n        elif i[-1] == '|':\n            note_list_int.append(2)\n        elif i[-1] == '.':\n            note_list_int.append(1)\n    return note_list_int\n"}
{"task_id": "task18", "completion": "    count = 0\n    for i in range(len(string) - len(substring)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\ndef test_how_many_times():\n    assert how_many_times('', 'a') == 0\n    assert how_many_times('aaa', 'a') == 3\n    assert how_many_times('aaaa', 'aa') == 3\n\n\ndef test_how_many_times_from_start():\n    assert how_many_times('aaa', '') == 3\n    assert how_many_times('aaa', 'a') == 3\n    assert how_many_times('aaa', 'aa') == 2\n    assert how_many_times('aaaa', 'aa') == 3\n    assert how_many_times('aaaa', 'a') == 4\n    assert how_many_times('aaaa', 'aaaa') == 1\n    assert how_many_times('aaaa', 'a') == 4\n\n\ndef test_how_many_times_from_end():\n    assert how_many_times('aaa', 'a') == 3\n    assert how_many_times('aaa', '') == 0\n    assert how_many_times('aaa', 'aaa') == 1\n    assert how_many_times('aaaa', 'a') == 4\n    assert how_many_times('aaaa', 'aaaa') == 1\n    assert how_many_times('aaaa', 'aa') == 3\n\n\ndef test_how_many_times_from_middle():\n    assert how_many_times('aaaa', 'a') == 4\n    assert how_many_times('aaaa', 'aa') == 3\n    assert how_many_times('aaaa', 'aaa') == 2\n    assert how_many_times('aaaa', 'aaaa') == 1\n\n\ndef test_empty_substring():\n    assert how_many_times('aaa', '') == 3\n    assert how_many_times('aaa', 'aa') == 1\n    assert how_many_times('aaa', 'aaa') == 0\n\n\ndef test_empty_string():\n    assert how_many_times('', '') == 1\n    assert how_many_times('', 'a') == 0\n    assert how_many_times('', 'aa') == 0\n    assert how_many_times('', 'aaa') == 0\n    assert how_many_times('', 'aaaa') == 0\n\n\ndef test_empty_string_empty_substring():\n    assert how_many_times('', '') == 1\n    assert how_many_times('', 'aa') == 0\n    assert how_many_times('', 'aaa') == 0\n    assert how_many_times('', 'aaaa') == 0\n\n\ndef test_substring_not_in_string():\n    assert how_many_times('aaa', 'aaab') == 0\n    assert how_many_times('aaa', 'aaaaab') == 0\n    assert how_many_times('aaa', 'aaaaaab') == 0\n\n\ndef test_substring_in_string():\n    assert how_many_times('aaa', 'aa') == 3\n    assert how_many_times('aaa', 'aaa') == 1\n    assert how_many_times('aaa', 'aaaa') == 0\n    assert how_many_times('aaa', 'aaaaa') == 0\n    assert how_many_times('aaa', 'aaaaaa') == 0\n    assert how_many_times('aaa', 'aaaaaaa') == 0\n\n\ndef test_overlapping_substring():\n    assert how_many_times('aaa', 'aaab') == 2\n    assert how_many_times('aaa', 'aaaaab') == 1\n    assert how_many_times('aaa', 'aaaaaab') == 0\n    assert how_many_times('aaa', 'aaaaaaab') == 0\n    assert how_many_times('aaa', 'aaaaaaaab') == 0\n\n\ndef test_overlapping_substring_from_start():\n    assert how_many_times('aaaa', 'aa') == 4\n    assert how_many_times('aaaa', 'aaaa') == 1\n    assert how_many_times('aaaa', 'aaaaa') == 0\n    assert how_many_times('aaaa', 'aaaaaa') == 0\n    assert how_many_times('aaaa', 'aaaaaaa') == 0\n\n\ndef test_overlapping_substring_from_middle():\n    assert how_many_times('aaaa', 'aa') == 4\n    assert how_many_times('aaaa', 'aaaa') == 1\n    assert how_many_times('aaaa', 'aaaaa') == 0\n    assert how_many_times('aaaa', 'aaaaaa') == 0\n    assert how_many_times('aaaa', 'aaaaaaa') == 0\n\n\ndef test_overlapping_substring_from_end():\n    assert how_many_times('aaaa', 'aa') == 4\n    assert how_many_times('aaaa', 'aaaa') == 1\n    assert how_many_times('aaaa', 'aaaaa') == 0\n    assert how_many_times('aaaa', 'aaaaaa') == 0\n    assert how_many_times('aaaa', 'aaaaaaa') == 0\n\n\ndef test_overlapping_substring_from_middle_and_end():\n    assert how_many_times('aaaa', 'aa') == 4\n    assert how_many_times('aaaa', 'aaaa') "}
{"task_id": "task19", "completion": "    # TODO: Write your sorting function here\n    string_of_numbers = ''\n    numbers = numbers.split(' ')\n    numbers.sort(key=lambda n: int(n))\n    for i in numbers:\n        string_of_numbers += i + ' '\n    return string_of_numbers[:-1]\n\nsort_numbers('three one five')\n# print(sort_numbers('three one five'))\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    # TODO: Write your sorting function here\n    string_of_numbers = ''\n    numbers = numbers.split(' ')\n    numbers.sort(key=lambda n: int(n))\n    for i in numbers:\n        string_of_numbers += i + ' '\n    return string_of_numbers[:-1]\n\nsort_numbers_2('three one five')\n# print(sort_numbers('three one five'))\n\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_3('three one five')\n    'one three five'\n    \"\"\"\n    # TODO: Write your sorting function here\n    string_of_numbers = ''\n    numbers = numbers.split(' ')\n    numbers.sort(key=lambda n: int(n))\n    for i in numbers:\n        string_of_numbers += i + ' '\n    return string_of_numbers[:-1]\n\nsort_numbers_3('three one five')\n# print(sort_numbers('three one five'))\n\ndef sort_numbers_4(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smal"}
{"task_id": "task20", "completion": "    # TODO: Implement this function.\n    smallest_diff = 0\n    smallest_pairs = []\n    \n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                diff = abs(numbers[i] - numbers[j])\n                if smallest_diff == 0 or diff < smallest_diff:\n                    smallest_diff = diff\n                    smallest_pairs = (numbers[i], numbers[j])\n    return smallest_pairs\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    print(find_closest_elements(numbers))\n    \n\n    \n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    smallest_diff = 0\n    smallest_pairs = []\n    \n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                diff = abs(numbers[i] - numbers[j])\n                if smallest_diff == 0 or diff < smallest_diff:\n                    smallest_diff = diff\n                    smallest_pairs = (numbers[i], numbers[j])\n    return smallest_pairs\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    print(find_closest_elements(numbers))\n    \n\n    \n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    smallest_diff = 0\n    smallest_pairs = []\n    \n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                diff = abs(numbers[i] - numbers[j])\n                if smallest_diff == 0 or diff < smallest_diff:\n "}
{"task_id": "task21", "completion": "    smallest = min(numbers)\n    biggest = max(numbers)\n    return [(x - smallest) / (biggest - smallest) for x in numbers]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "task22", "completion": "    return [value for value in values if isinstance(value, int)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "task23", "completion": "    assert isinstance(string, str), \"Input must be str\"\n    assert isinstance(string, str), \"Input must be str\"\n    return sum(1 for _ in string)\n\n\ndef str_rev(string: str) -> str:\n    \"\"\" Return string in reverse\n    >>> str_rev('abc')\n    'cba'\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    return ''.join(reversed(string))\n\n\ndef str_count(string: str, substr: str) -> int:\n    \"\"\" Return number of occurrences of substring in string\n    >>> str_count('abcdef', 'e')\n    1\n    >>> str_count('abcdef', 'abc')\n    1\n    >>> str_count('abcdef', 'xyz')\n    0\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    assert isinstance(substr, str), \"Input must be str\"\n    return string.count(substr)\n\n\ndef str_concat(string1: str, string2: str) -> str:\n    \"\"\" Return concatenated string\n    >>> str_concat('abc', 'def')\n    'abcdef'\n    \"\"\"\n    assert isinstance(string1, str), \"Input must be str\"\n    assert isinstance(string2, str), \"Input must be str\"\n    return string1 + string2\n\n\ndef str_upper(string: str) -> str:\n    \"\"\" Return string in uppercase\n    >>> str_upper('abc')\n    'ABC'\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    return string.upper()\n\n\ndef str_lower(string: str) -> str:\n    \"\"\" Return string in lowercase\n    >>> str_lower('ABC')\n    'abc'\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    return string.lower()\n\n\ndef str_swap(string: str, a: str, b: str) -> str:\n    \"\"\" Return string with swapped a and b characters\n    >>> str_swap('abcdef', 'c', 'f')\n    'abcdef'\n    >>> str_swap('abcdef', 'a', 'c')\n    'badcfe'\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    assert isinstance(a, str) or a.isnumeric(), \"Input must be str\"\n    assert isinstance(b, str) or b.isnumeric(), \"Input must be str\"\n    return string.replace(a, b).replace(b, a)\n\n\ndef str_repeat(string: str, n: int) -> str:\n    \"\"\" Return string repeated n times\n    >>> str_repeat('abc', 3)\n    'abcabcabc'\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    assert isinstance(n, int), \"Input must be int\"\n    return string * n\n\n\ndef str_split(string: str, sep: str, maxsplit: int) -> list:\n    \"\"\" Return list of words in string\n    >>> str_split('abc def', ' ', 1)\n    ['abc', 'def']\n    >>> str_split('abc def', ' ', 2)\n    ['abc', 'def']\n    \"\"\"\n    assert isinstance(string, str), \"Input must be str\"\n    assert isinstance(sep, str), \"Input must be str\"\n    assert isinstance(maxsplit, int), \"Input must be int\"\n    return string.split(sep, maxsplit)\n\n\ndef str_replace(string: str, old: str, new: str, maxreplace: int) -> str:\n    \"\"\" Return string with replaced substring\n    >>> str_replace('abcdef', 'b', 'B', 1)\n    'abCdEf'\n    \"\"\"\n    assert isinstan"}
{"task_id": "task24", "completion": "    divisor = n - 1\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\" For a given number n, find the largest prime number that divides n evenly\n    >>> largest_prime_factor(15)\n    5\n    \"\"\"\n    divisor = n - 1\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor\n    \n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"All tests passed!\")\n\nif __name__ "}
{"task_id": "task25", "completion": "    result = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            result.append(i)\n            n = n // i\n        if n == 1:\n            break\n    return result\n\n\nif __name__ == \"__main__\":\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n"}
{"task_id": "task26", "completion": "    seen_elements = set()\n    result = []\n    for number in numbers:\n        if number in seen_elements:\n            continue\n        seen_elements.add(number)\n        result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n"}
{"task_id": "task27", "completion": "    \n    uppercase_characters = []\n    for index in range(len(string)):\n        if ord(string[index]) in range(65, 91):\n            uppercase_characters.append(string[index])\n            \n    for uppercase_character in uppercase_characters:\n        index = ord(uppercase_character) - 32\n        string = string.replace(uppercase_character, chr(index))\n    \n    return string\n\ndef palindrome(string: str) -> bool:\n    \"\"\" Return True if string is a palindrome, else False.\n    >>> palindrome('noon')\n    True\n    >>> palindrome('robert')\n    False\n    \"\"\"\n    \n    reversed_string = ''\n    for character in string:\n        reversed_string = character + reversed_string\n    return string == reversed_string\n\n\ndef fizzbuzz(number: int) -> str:\n    \"\"\" Return FizzBuzz for a number.\n    >>> fizzbuzz(3)\n    'Fizz'\n    >>> fizzbuzz(5)\n    'Buzz'\n    >>> fizzbuzz(15)\n    'FizzBuzz'\n    \"\"\"\n    \n    if number % 3 == 0 and number % 5 == 0:\n        return 'FizzBuzz'\n    elif number % 3 == 0:\n        return 'Fizz'\n    elif number % 5 == 0:\n        return 'Buzz'\n    else:\n        return str(number)\n\ndef prime(number: int) -> bool:\n    \"\"\" Return True if number is prime, else False.\n    >>> prime(11)\n    True\n    >>> prime(12)\n    False\n    \"\"\"\n    \n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\ndef factorial(number: int) -> int:\n    \"\"\" Return factorial of a number, e.g. 5! = 1 * 2 * 3 * 4 * 5 = 120\n    >>> factorial(5)\n    120\n    \"\"\"\n    \n    if number == 0:\n        return 1\n    return number * factorial(number - 1)\n\n\ndef hailstone(number: int) -> list[int]:\n    \"\"\" Return hailstone sequence for a number.\n    >>> hailstone(1)\n    [1]\n    >>> hailstone(2)\n    [2, 1]\n    >>> hailstone(10)\n    [10, 5, 16, 8, 4, 2, 1]\n    \"\"\"\n    \n    if number == 1:\n        return [1]\n    elif number % 2 == 0:\n        return hailstone(number//2) + [number]\n    else:\n        return hailstone(number*3+1) + [number]\n\ndef hailstone_recursive(number: int) -> list[int]:\n    \"\"\" Return hailstone sequence for a number, recursive.\n    >>> hailstone_recursive(1)\n    [1]\n    >>> hailstone_recursive(2)\n    [2, 1]\n    >>> hailstone_recursive(10)\n    [10, 5, 16, 8, 4, 2, 1]\n    \"\"\"\n    \n    if number == 1:\n        return [1]\n    elif number % 2 == 0:\n        return [number] + hailstone_recursive(number//2)\n    else:\n        return [number] + hailstone_recursive(number*3+1)\n\n\ndef hailstone_recursive(number: int) -> list[int]:\n    \"\"\" Return hailstone sequence for a number, recursive.\n    >>> hailstone_recursive(1)\n    [1]\n    >>> hailstone_recursive(2)\n    [2, 1]\n    >>> hailstone_recursive(10)\n    [10, 5, 16, 8, 4, 2, 1]\n    \"\"\"\n    \n    if number == 1:\n        return [1]\n    elif number % 2 == 0:\n        return [number] + hailstone_recursive(number//2)\n    else:\n        return [number] + hailstone_recursive(number*3+1)\n\ndef fib(n: int) -> int:\n    \"\"\" Return nth Fibonacci number, e.g. fib(1) = 1, fib(2) = 1, fib(3) = 2, fib(4) = 3, etc.\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(10)\n    55\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fibonacci_recursive(n: int) -> int:\n    \"\"\" Return nth Fibonacci number, e.g. fib(1) = 1, fib(2) = 1, fib(3) = 2, fib(4) = 3, etc.\n    >>> fibonacci_recursive(1)\n    1\n    >>> fibonacci_recursive(2)\n    1\n    >>> fibonacci_recursive(3)\n    2\n    >>> fibonacci_recursive(4)\n    3\n    >>> fibonacci_recursive(10)\n    55\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\ndef fibonacci_recursive(n: int) -> int:\n    \"\"\" Return nth Fibonacci number, e.g. fib(1) = 1, fib(2) = 1, fib(3) = 2, fib(4) = 3, etc.\n    >>> fibonacci_recursive(1)\n    1\n    >>> fibonacci_recursive(2)\n    1\n    >>> fibonacci_recursive(3)\n    2\n    >>> fibonacci_recursive(4)\n    3\n    >>> fibonacci_recursive(10)\n    55\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    elif "}
{"task_id": "task28", "completion": "    concatenated = ''\n    for string in strings:\n        concatenated = concatenated + string\n    return concatenated\n\n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print('\\n*** ALL TEST PASSED!\\n')\n"}
{"task_id": "task29", "completion": "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n"}
{"task_id": "task30", "completion": ""}
{"task_id": "task31", "completion": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_palindrome(s):\n    \"\"\"Return true if a given string is a palindrome, and false otherwise.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('apple')\n    False\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('baa')\n    True\n    >>> is_palindrome('abcba')\n    True\n    >>> is_palindrome('kayak')\n    True\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('apple')\n    False\n    \"\"\"\n    return s == s[::-1]\ndef fibonacci(n):\n    \"\"\"Return nth Fibonacci number.\n    >>> fibonacci(1)\n    0\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    1\n    >>> fibonacci(4)\n    2\n    >>> fibonacci(5)\n    3\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef is_odd(n):\n    \"\"\"Return true if n is odd, and false otherwise.\n    >>> is_odd(2)\n    False\n    >>> is_odd(5)\n    True\n    \"\"\"\n    return n % 2 == 1\ndef is_odd_number(n):\n    \"\"\"Return true if n is odd, and false otherwise.\n    >>> is_odd_number(3)\n    True\n    >>> is_odd_number(2)\n    False\n    \"\"\"\n    return n % 2 == 1\ndef is_even_number(n):\n    \"\"\"Return true if n is odd, and false otherwise.\n    >>> is_even_number(3)\n    False\n    >>> is_even_number(2)\n    True\n    \"\"\"\n    return n % 2 == 0\ndef is_even(n):\n    \"\"\"Return true if n is even, and false otherwise.\n    >>> is_even(2)\n    True\n    >>> is_even(5)\n    False\n    \"\"\"\n    return n % 2 == 0\ndef sum_odds(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds(1)\n    1\n    >>> sum_odds(3)\n    6\n    >>> sum_odds(5)\n    25\n    \"\"\"\n    return sum(i for i in range(n) if is_odd(i))\ndef sum_odds_2(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_2(1)\n    1\n    >>> sum_odds_2(3)\n    6\n    >>> sum_odds_2(5)\n    25\n    \"\"\"\n    return sum(range(1, n, 2))\ndef sum_odds_3(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_3(1)\n    1\n    >>> sum_odds_3(3)\n    6\n    >>> sum_odds_3(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_4(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_4(1)\n    1\n    >>> sum_odds_4(3)\n    6\n    >>> sum_odds_4(5)\n    25\n    \"\"\"\n    return sum(range(1, n+1, 2))\ndef sum_odds_5(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_5(1)\n    1\n    >>> sum_odds_5(3)\n    6\n    >>> sum_odds_5(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1) if i % 2 == 1)\ndef sum_odds_6(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_6(1)\n    1\n    >>> sum_odds_6(3)\n    6\n    >>> sum_odds_6(5)\n    25\n    \"\"\"\n    return sum(range(1, n+1, 2))\ndef sum_odds_7(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_7(1)\n    1\n    >>> sum_odds_7(3)\n    6\n    >>> sum_odds_7(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_8(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_8(1)\n    1\n    >>> sum_odds_8(3)\n    6\n    >>> sum_odds_8(5)\n    25\n    \"\"\"\n    return sum(range(1, n+1, 2))\ndef sum_odds_9(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_9(1)\n    1\n    >>> sum_odds_9(3)\n    6\n    >>> sum_odds_9(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_10(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_10(1)\n    1\n    >>> sum_odds_10(3)\n    6\n    >>> sum_odds_10(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_11(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_11(1)\n    1\n    >>> sum_odds_11(3)\n    6\n    >>> sum_odds_11(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_12(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_12(1)\n    1\n    >>> sum_odds_12(3)\n    6\n    >>> sum_odds_12(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_13(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_13(1)\n    1\n    >>> sum_odds_13(3)\n    6\n    >>> sum_odds_13(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_14(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_14(1)\n    1\n    >>> sum_odds_14(3)\n    6\n    >>> sum_odds_14(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_15(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_15(1)\n    1\n    >>> sum_odds_15(3)\n    6\n    >>> sum_odds_15(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_16(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_16(1)\n    1\n    >>> sum_odds_16(3)\n    6\n    >>> sum_odds_16(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_17(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_17(1)\n    1\n    >>> sum_odds_17(3)\n    6\n    >>> sum_odds_17(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_18(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_18(1)\n    1\n    >>> sum_odds_18(3)\n    6\n    >>> sum_odds_18(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_19(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_19(1)\n    1\n    >>> sum_odds_19(3)\n    6\n    >>> sum_odds_19(5)\n    25\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))\ndef sum_odds_20(n):\n    \"\"\"Return sum of odd numbers 1 through n.\n    >>> sum_odds_20(1)\n    1\n    >>> sum_odds_20(3)\n    6\n    >>> sum_odds_20(5)\n    25\n    \"\"\"\n    return s"}
{"task_id": "task32", "completion": "    return poly(xs, -1.0) / xs[0]\n\n\ndef taylor_polynomial(xs: list, x: float):\n    \"\"\" taylor_polynomial evaluates taylor polynomial with\n    coefficients xs at point x.\n    \"\"\"\n    return poly(xs, x) + sum([poly([coeff], x) * x * (x - i) / math.factorial(i + 1) for i, coeff in enumerate(xs)])\n\n\ndef newton_method(xs: list, x: float, tol: float, max_iter: int):\n    \"\"\" newton_method newton's method for finding zero of a polynomial.\n    newton's method is an iterative method that successively approximates the roots\n    of a function.\n    \"\"\"\n    prev_x = None\n    i = 0\n    while i < max_iter and tol < abs(prev_x - x):\n        prev_x = x\n        x = prev_x - poly(xs, prev_x) / poly([1] + xs[:-1], prev_x)\n        i += 1\n    return x\n\n\ndef newton_method_v2(xs: list, x: float, tol: float, max_iter: int):\n    \"\"\" newton_method newton's method for finding zero of a polynomial.\n    newton's method is an iterative method that successively approximates the roots\n    of a function.\n    \"\"\"\n    prev_x = None\n    i = 0\n    while i < max_iter and tol < abs(prev_x - x):\n        prev_x = x\n        x = prev_x - poly(xs, prev_x) / poly_derivative(xs, prev_x)\n        i += 1\n    return x\n\n\ndef newton_method_v3(xs: list, x: float, tol: float, max_iter: int):\n    \"\"\" newton_method newton's method for finding zero of a polynomial.\n    newton's method is an iterative method that successively approximates the roots\n    of a function.\n    \"\"\"\n    prev_x = None\n    i = 0\n    while i < max_iter and tol < abs(prev_x - x):\n        prev_x = x\n        x = prev_x - poly(xs, prev_x) / taylor_derivative(xs, prev_x)\n        i += 1\n    return x\n\n\ndef taylor_derivative(xs: list, x: float):\n    \"\"\" taylor_derivative calculates taylor derivative\n    of a polynomial at point x.\n    \"\"\"\n    return sum([coeff * x * (x - i) / (i + 1) for i, coeff in enumerate(xs)])\n\n\ndef newton_method_derivative(xs: list, x: float, tol: float, max_iter: int):\n    \"\"\" newton_method newton's method for finding zero of a polynomial.\n    newton's method is an iterative method that successively approximates the roots\n    of a function.\n    \"\"\"\n    prev_x = None\n    i = 0\n    while i < max_iter and tol < abs(prev_x - x):\n        prev_x = x\n        x = prev_x - poly(xs, prev_x) / taylor_derivative(xs, prev_x)\n        i "}
{"task_id": "task33", "completion": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l2.append(l[i])\n    l2.sort()\n    l2.extend(l[i] for i in range(len(l)) if i % 3 == 0)\n    return l2\n\n\ndef add_to_front(lst, elt):\n    \"\"\" Adds element to the front of lst\n    >>> lst = [1,2,3,4]\n    >>> add_to_front(lst, 0)\n    [0, 1, 2, 3, 4]\n    \"\"\"\n    lst.insert(0, elt)\n    return lst\n\ndef add_to_back(lst, elt):\n    \"\"\" Adds element to the back of lst\n    >>> lst = [1,2,3,4]\n    >>> add_to_back(lst, 5)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    lst.append(elt)\n    return lst\n\ndef remove_first(lst):\n    \"\"\"Removes the first element of lst and returns a new list\n    >>> lst = [1,2,3,4]\n    >>> remove_first(lst)\n    [2, 3, 4]\n    \"\"\"\n    lst = lst[1:]\n    return lst\n\ndef remove_last(lst):\n    \"\"\"Removes the last element of lst and returns a new list\n    >>> lst = [1,2,3,4]\n    >>> remove_last(lst)\n    [1, 2, 3]\n    \"\"\"\n    lst = lst[:-1]\n    return lst\n\ndef remove_at(lst, i):\n    \"\"\"Removes the ith element of lst and returns a new list\n    >>> lst = [1,2,3,4]\n    >>> remove_at(lst, 1)\n    [1, 3, 4]\n    \"\"\"\n    lst = lst[:i] + lst[i+1:]\n    return lst\n\ndef add_at(lst, i, elt):\n    \"\"\"Adds elt to the ith position of lst and returns a new list\n    >>> lst = [1,2,3,4]\n    >>> add_at(lst, 1, 100)\n    [1, 100, 2, 3, 4]\n    \"\"\"\n    lst = lst[:i] + [elt] + lst[i:]\n    return lst\n\ndef filter_ge(lst, n):\n    \"\"\"Takes a list lst and a number n and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_ge(lst, 2)\n    [2, 3, 4, 5]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] >= n:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_le(lst, n):\n    \"\"\"Takes a list lst and a number n and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_le(lst, 2)\n    [1, 2]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] <= n:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_odd(lst):\n    \"\"\"Takes a list lst and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_odd(lst)\n    [1, 3, 5]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_even(lst):\n    \"\"\"Takes a list lst and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_even(lst)\n    [2, 4]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_ge_even(lst):\n    \"\"\"Takes a list lst and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_ge_even(lst)\n    [2, 4]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i] >= 2:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_lt_even(lst):\n    \"\"\"Takes a list lst and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_lt_even(lst)\n    [1, 3, 5]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i] < 2:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_gt_even(lst):\n    \"\"\"Takes a list lst and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_gt_even(lst)\n    [4, 5]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i] > 2:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_lt(lst, n):\n    \"\"\"Takes a list lst and a number n and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_lt(lst, 3)\n    [1, 2]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] < n:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_le(lst, n):\n    \"\"\"Takes a list lst and a number n and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_le(lst, 3)\n    [1, 2, 3]\n    \"\"\"\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] <= n:\n            lst2.append(lst[i])\n    return lst2\n\ndef filter_gt(lst, n):\n    \"\"\"Takes a list lst and a number n and returns a new list\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> filter_gt(lst, 3)\n    [4, 5]\n    \"\"\"\n    lst2 = "}
{"task_id": "task34", "completion": "    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    return sorted(result)\n# unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\n\ndef transpose(m: list):\n    \"\"\"Return transposed matrix (m.transpose())\n    >>> transpose([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    result = []\n    for i in range(len(m[0])):\n        result.append([])\n        for j in range(len(m)):\n            result[i].append(m[j][i])\n    return result\n# transpose([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_inplace(m: list):\n    \"\"\"Transpose matrix inplace (m.transpose_inplace())\n    >>> m = [[1, 2, 3], [4, 5, 6]]\n    >>> transpose_inplace(m)\n    >>> m\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            m[i][j], m[j][i] = m[j][i], m[i][j]\n# m = [[1, 2, 3], [4, 5, 6]]\n# transpose_inplace(m)\n# m\n\n\ndef transpose_recursive(m: list):\n    \"\"\"Return transposed matrix (m.transpose_recursive())\n    >>> transpose_recursive([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(i: int, j: int, m: list):\n        if i >= len(m):\n            return\n        transpose(i + 1, j, m)\n        m[i][j], m[j][i] = m[j][i], m[i][j]\n\n    transpose(0, 0, m)\n    return m\n# transpose_recursive([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_inplace_recursive(m: list):\n    \"\"\"Transpose matrix inplace (m.transpose_inplace_recursive())\n    >>> m = [[1, 2, 3], [4, 5, 6]]\n    >>> transpose_inplace_recursive(m)\n    >>> m\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(i: int, j: int, m: list):\n        if i >= len(m):\n            return\n        transpose(i + 1, j, m)\n        m[i][j], m[j][i] = m[j][i], m[i][j]\n\n    transpose(0, 0, m)\n# m = [[1, 2, 3], [4, 5, 6]]\n# transpose_inplace_recursive(m)\n# m\n\n\ndef transpose_recursive_generator(m: list):\n    \"\"\"Transpose matrix in generator (m.transpose_recursive_generator())\n    >>> transpose_recursive_generator([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(i: int, j: int, m: list):\n        if i >= len(m):\n            return\n        yield from transpose(i + 1, j, m)\n        m[i][j], m[j][i] = m[j][i], m[i][j]\n\n    yield from transpose(0, 0, m)\n# transpose_recursive_generator([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_recursive_generator_inplace(m: list):\n    \"\"\"Transpose matrix inplace (m.transpose_recursive_generator_inplace())\n    >>> m = [[1, 2, 3], [4, 5, 6]]\n    >>> transpose_recursive_generator_inplace(m)\n    >>> m\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(i: int, j: int, m: list):\n        if i >= len(m):\n            return\n        yield from transpose(i + 1, j, m)\n        m[i][j], m[j][i] = m[j][i], m[i][j]\n\n    yield from transpose(0, 0, m)\n# transpose_recursive_generator_inplace([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_generator(m: list):\n    \"\"\"Transpose matrix in generator (m.transpose_generator())\n    >>> transpose_generator([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(m: list):\n        for i in range(len(m)):\n            for j in range(len(m[0])):\n                yield m[i][j]\n        yield from transpose(m[1:])\n\n    yield from transpose(m)\n# transpose_generator([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_generator_inplace(m: list):\n    \"\"\"Transpose matrix inplace (m.transpose_generator_inplace())\n    >>> m = [[1, 2, 3], [4, 5, 6]]\n    >>> transpose_generator_inplace(m)\n    >>> m\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(m: list):\n        for i in range(len(m)):\n            for j in range(len(m[0])):\n                yield m[i][j]\n        yield from transpose(m[1:])\n\n    yield from transpose(m)\n# transpose_generator_inplace([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_generator_recursive(m: list):\n    \"\"\"Transpose matrix in generator (m.transpose_generator_recursive())\n    >>> transpose_generator_recursive([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(m: list):\n        for i in range(len(m)):\n            for j in range(len(m[0])):\n                yield m[i][j]\n            yield from transpose(m[1:])\n\n    yield from transpose(m)\n# transpose_generator_recursive([[1, 2, 3], [4, 5, 6]])\n\n\ndef transpose_generator_recursive_inplace(m: list):\n    \"\"\"Transpose matrix inplace (m.transpose_generator_recursive_inplace())\n    >>> m = [[1, 2, 3], [4, 5, 6]]\n    >>> transpose_generator_recursive_inplace(m)\n    >>> m\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n\n    def transpose(m: list):\n        for i in range(len(m)):\n            for j in range(len(m[0])):\n                yield m[i][j]\n            yield from transpose(m[1:])\n\n    yield "}
{"task_id": "task35", "completion": "    assert isinstance(l, list), \"argument is not a list\"\n    if l == []:\n        return None\n    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n\n\ndef factorial(n: int):\n    \"\"\"Return n factorial.\"\"\"\n    assert isinstance(n, int), \"argument is not an integer\"\n    assert n >= 0, \"argument is not a nonnegative integer\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True iff s is a palindrome.\"\"\"\n    assert isinstance(s, str), \"argument is not a string\"\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    for i in range(0, len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\n\ndef is_valid_isbn(isbn: str):\n    \"\"\"Return True iff isbn is a valid ISBN.\n    >>> is_valid_isbn(\"978-3-16-148410-0\")\n    True\n    >>> is_valid_isbn(\"978-3-16-148410-1\")\n    False\n    >>> is_valid_isbn(\"978-3-16-148410-X\")\n    False\n    >>> is_valid_isbn(\"978-3-16-148410-10\")\n    False\n    >>> is_valid_isbn(\"978-3-16-148410-X\")\n    False\n    >>> is_valid_isbn(\"978-3-16-148410-X\")\n    False\n    \"\"\"\n    isbn = isbn.replace(\"-\", \"\")\n    isbn = isbn.replace(\" \", \"\")\n    if isbn.isalpha():\n        return False\n    isbn_list = [int(isbn[i]) for i in range(len(isbn))]\n    if len(isbn_list) != 10:\n        return False\n    checksum = 0\n    for i in range(0, 9):\n        checksum += isbn_list[i] * (10 - i)\n    checksum %= 11\n    if isbn[-1] == \"X\":\n        checksum = 10\n    elif isbn[-1] != str(checksum):\n        return False\n    return True\n\n\ndef has_duplicate(l: list):\n    \"\"\"Return True iff l has at least two distinct elements.\n    >>> has_duplicate([1, 2, 3])\n    False\n    >>> has_duplicate([1, 2, 3, 3])\n    True\n    >>> has_duplicate([\"a\", \"b\", \"c\", \"a\"])\n    True\n    \"\"\"\n    assert isinstance(l, list), \"argument is not a list\"\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            if i != j and l[i] == l[j]:\n                return True\n    return False\n\n\ndef sum_of_squares(l: list):\n    \"\"\"Return sum of squares of elements in list l.\n    >>> sum_of_squares([1, 2, 3])\n    14\n    \"\"\"\n    assert isinstance(l, list), \"argument is not a list\"\n    total = 0\n    for i in l:\n        total += i ** 2\n    return total\n\n\ndef sum_of_cubes(l: list):\n    \"\"\"Return sum of cubes of elements in list l.\n    >>> sum_of_cubes([1, 2, 3])\n    10\n    \"\"\"\n    assert isinstance(l, list), \"argument is not a list\"\n    total = 0\n    for i in l:\n        total += i ** 3\n    return total\n\n\ndef is_permutation(a: list, b: list):\n    \"\"\"Return True iff a is a permutation of b.\n    >>> is_permutation([1, 2, 3], [3, 1, 2])\n    True\n    \"\"\"\n    assert isinstance(a, list), \"argument is not a list\"\n    assert isinstance(b, list), \"argument is not a list\"\n    if len(a) != len(b):\n        return False\n    for i in a:\n        if a.count(i) != b.count(i):\n            return False\n    return True\n\n\ndef is_palindrome_recursive(s: str):\n    \"\"\"Return True iff s is a palindrome.\n    >>> is_palindrome_recursive(\"racecar\")\n    True\n    \"\"\"\n    assert isinstance(s, str), \"argument is not a string\"\n    if s == \"\":\n        return True\n    elif s[0] == s[len(s) - 1]:\n        return is_palindrome_recursive(s[1:-1])\n    else:\n        return False\n\n\ndef is_palindrome_iterative(s: str):\n    \"\"\"Return True iff s is a palindrome.\n    >>> is_palindrome_iterative(\"racecar\")\n    True\n    \"\"\"\n    assert isinstance(s, str), \"argument is not a string\"\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    for i in range(0, len(s) // 2)"}
{"task_id": "task36", "completion": "    count = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime and False if n is not prime.\n    >>> is_prime(10)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    \"\"\"\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(n**0.5) + 1, 2): \n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime(n: int):\n    \"\"\"Return the nth prime.\n    >>> nth_prime(1)\n    2\n    >>> nth_prime(5)\n    11\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n\ndef factorial(n: int):\n    \"\"\"Return the factorial of n.\n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef is_palindrome(word: str):\n    \"\"\"Return True if word is a palindrome and False otherwise.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return word == word[::-1]\n\ndef is_valid_parentheses(string: str):\n    \"\"\"\n    >>> is_valid_parentheses(\"()\")\n    True\n    >>> is_valid_parentheses(\"(())((()())())\")\n    True\n    >>> is_valid_parentheses(\")(\")\n    False\n    >>> is_valid_parentheses(\"())(\")\n    False\n    >>> is_valid_parentheses(\"(((((((((())))))))))\")\n    True\n    \"\"\"\n    count = 0\n    for i in string:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n\ndef is_valid_parentheses_pythonic(string: str):\n    \"\"\"\n    >>> is_valid_parentheses_pythonic(\"()\")\n    True\n    >>> is_valid_parentheses_pythonic(\"(())((()())())\")\n    True\n    >>> is_valid_parentheses_pythonic(\")(\")\n    False\n    >>> is_valid_parentheses_pythonic(\"())(\")\n    False\n    >>> is_valid_parentheses_pythonic(\"(((((((((())))))))))\")\n    True\n    \"\"\"\n    return not [c for c in string if c == \"(\"] or not ["}
{"task_id": "task37", "completion": "    for i in range(len(l)):\n        if i % 2 != 0:\n            l[i] = l[i]\n\n    l.sort()\n    return l\n\n\ndef sort_by_last_letter(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies\n    are equal to the values of the even indicies of l, but sorted by their last letter.\n    >>> sort_by_last_letter(['hi', 'bye', 'good bye'])\n    ['hi', 'good bye', 'bye']\n    >>> sort_by_last_letter(['hi', 'hello', 'hey'])\n    ['hi', 'hey', 'hello']\n    \"\"\"\n    l.sort(key=lambda x: x[-1])\n    return l\n\n\ndef count_even(l: list):\n    \"\"\"This function takes a list l and returns the number of even values in l.\n    >>> count_even([1, 2, 3, 4])\n    2\n    >>> count_even([1, 3, 5])\n    0\n    \"\"\"\n    c = 0\n    for i in l:\n        if i % 2 == 0:\n            c += 1\n    return c\n\n\ndef sum_of_square(l: list):\n    \"\"\"This function takes a list l and returns the sum of the squares of its values.\n    >>> sum_of_square([1, 2, 3, 4, 5])\n    55\n    >>> sum_of_square([3, 4, 5])\n    50\n    \"\"\"\n    s = 0\n    for i in l:\n        s += i**2\n    return s\n\n\ndef sum_of_cubes(l: list):\n    \"\"\"This function takes a list l and returns the sum of the cubes of its values.\n    >>> sum_of_cubes([1, 2, 3, 4])\n    270\n    >>> sum_of_cubes([3, 4, 5])\n    117\n    \"\"\"\n    s = 0\n    for i in l:\n        s += i**3\n    return s\n\n\ndef sum_of_even(l: list):\n    \"\"\"This function takes a list l and returns the sum of all of its even values.\n    >>> sum_of_even([1, 2, 3, 4])\n    6\n    >>> sum_of_even([3, 4, 5])\n    2\n    \"\"\"\n    s = 0\n    for i in l:\n        if i % 2 == 0:\n            s += i\n    return s\n\n\ndef sum_of_even_odd(l: list):\n    \"\"\"This function takes a list l and returns a tuple of two values.\n    The first value is the sum of all of its even values.\n    The second value is the sum of all of its odd values.\n    >>> sum_of_even_odd([1, 2, 3, 4])\n    (6, 0)\n    >>> sum_of_even_odd([3, 4, 5])\n    (0, 6)\n    \"\"\"\n    s1 = 0\n    s2 = 0\n    for i in l:\n        if i % 2 == 0:\n            s1 += i\n        else:\n            s2 += i\n    return (s1, s2)\n\n\ndef sum_of_even_odd_pairs(l: list):\n    \"\"\"This function takes a list l and returns a tuple of two values.\n    The first value is the sum of all of its even values, plus all of its odd values.\n    The second value is the sum of all of its even values, minus all of its odd values.\n    >>> sum_of_even_odd_pairs([1, 2, 3, 4])\n    (10, -4)\n    >>> sum_of_even_odd_pairs([3, 4, 5])\n    (6, 1)\n    \"\"\"\n    s1 = 0\n    s2 = 0\n    for i in l:\n        if i % 2 == 0:\n            s1 += i\n        else:\n            s2 += i\n    return (s1, s2)\n\n\ndef sum_of_even_odd_pairs_list(l: list):\n    \"\"\"This function takes a list l and returns a tuple of two values.\n    The first value is the sum of all of its even values, plus all of its odd values.\n    The second value is the sum of all of its even values, minus all of its odd values.\n    >>> sum_of_even_odd_pairs_list([1, 2, 3, 4])\n    (10, -4)\n    >>> sum_of_even_odd_pairs_list([3, 4, 5])\n    (6, 1)\n    \"\"\"\n    s1 = []\n    s2 = []\n    for i in l:\n        if i % 2 == 0:\n            s1.append(i)\n        else:\n            s2.append(i)\n    return (sum(s1), sum(s2))\n\n\ndef sum_of_even_odd_pairs_dict(l: list):\n    \"\"\"This function takes a list l and returns a tuple of two values.\n    The first value is the sum of all of its even values, plus all of its odd values.\n    The second value is the sum of all of its even values, minus all of its odd values.\n    >>> sum_of_even_odd_pairs_dict([1, 2, 3, 4])\n    (10, -4)\n    >>> sum_of_even_odd_pairs_dict([3, 4, 5])\n    (6, 1)\n    \"\"\"\n    s1 = 0\n    s2 = 0\n    for i in l:\n        if i % 2 == 0:\n            s1 += i\n        else:\n            s2 += i\n    return (s1, s2)\n\n\ndef sum_of_even_odd_pairs_list_dict(l: list):\n    \"\"\"This function takes a list l and returns a tuple of two values.\n    The first value is the sum of all of its even values, plus all of its odd values.\n    The second value is the sum of all of its even values, minus all of its odd values.\n    >>> sum_of_even_odd_pairs_list_dict([1, 2, 3, 4])\n    (10, -4)\n    >>> sum_of_even_odd_pairs_list_dict([3, 4, 5])\n    (6, 1)\n    \"\"\"\n    s1 = 0\n    s2 "}
{"task_id": "task38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\nif __name__ == \"__main__\":\n    print(decode_cyclic(\"ABCCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCD\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJK\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKL\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMN\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTY\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZA\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZA\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCD\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDE\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJK\"))\n    print(decode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH"}
{"task_id": "task39", "completion": "    def fib(n):\n        if n < 0:\n            raise ValueError(\"fib: n must be non-negative\")\n        elif n in (0, 1):\n            return n\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    k = 0\n    while True:\n        if is_prime(fib(k)) and fib(k) < n:\n            return fib(k)\n        k += 1\n\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is prime and is Fibonacci.\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(2)\n    1\n    >>> fib_prime(3)\n    2\n    >>> fib_prime(4)\n    3\n    >>> fib_prime(5)\n    5\n    \"\"\"\n    def fib(n):\n        if n < 0:\n            raise ValueError(\"fib: n must be non-negative\")\n        elif n in (0, 1):\n            return n\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fib(n):\n        def fib(n):\n            if n < 0:\n                raise ValueError(\"fib: n must be non-negative\")\n            elif n in (0, 1):\n                return n\n            else:\n                return fib(n - 1) + fib(n - 2)\n\n        for i in range(2, n):\n            if fib(i) == n:\n                return True\n        return False\n\n    k = 0\n    while True:\n        if is_prime(fib(k)) and is_fib(fib(k)):\n            return fib(k)\n        k += 1\n\n\ndef fib_prime_gen(limit):\n    \"\"\"\n    fib_prime_gen returns an iterator of prime Fibonacci numbers below limit.\n    >>> fib_prime_gen(10)\n    <generator object fib_prime_gen at ...>\n    >>> list(fib_prime_gen(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    def fib(n):\n        if n < 0:\n            raise ValueError(\"fib: n must be non-negative\")\n        elif n in (0, 1):\n            return n\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fib(n):\n        def fib(n):\n            if n < 0:\n                raise ValueError(\"fib: n must be non-negative\")\n            elif n in (0, 1):\n                return n\n            else:\n                return fib(n - 1) + fib(n - 2)\n\n        for i in range(2, n):\n            if fib(i) == n:\n                return True\n        return False\n\n    k = 0\n    while True:\n        if is_prime(fib(k)) and is_fib(fib(k)):\n            yield fib(k)\n        k += 1\n\n\ndef fib_prime_gen_with_limit(limit):\n    \"\"\"\n    fib_prime_gen returns an iterator of prime Fibonacci numbers below limit.\n    >>> fib_prime_gen(10)\n    <generator object fib_prime_gen at ...>\n    >>> list(fib_prime_gen(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    def fib(n):\n        if n < 0:\n            raise ValueError(\"fib: n must be non-negative\")\n        elif n in (0, 1):\n            return n\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    def is_prime(n):\n        if n < 2:\n            return "}
{"task_id": "task40", "completion": "    # TODO: Implement me!\n    triplets = []\n    for i, first_number in enumerate(l):\n        for second_number in l[i+1:]:\n            for third_number in l[i+2:]:\n                triplets.append([first_number, second_number, third_number])\n\n    for triplet in triplets:\n        if sum(triplet) == 0:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED!\\n\")\n"}
{"task_id": "task41", "completion": "    left = 0\n    right = 1\n    collisions = 0\n    for i in range(n):\n        left = i % n\n        right = (i+1) % n\n        if left == right:\n            collisions += 1\n    return collisions\n\n\ndef car_race_solution(n: int, l: int, r: int):\n    \"\"\"\n    This is a naive solution to Car Race.\n    You don't need to implement it, but it's helpful for figuring out\n    how Car Race works.\n    \"\"\"\n    left = 0\n    right = 1\n    collisions = 0\n    for i in range(n):\n        left = i % n\n        right = (i+1) % n\n        if left == right:\n            collisions += 1\n    return collisions\n\n\ndef car_race_solution_2(n: int, l: int, r: int):\n    \"\"\"\n    This is a naive solution to Car Race.\n    You don't need to implement it, but it's helpful for figuring out\n    how Car Race works.\n    \"\"\"\n    left = 0\n    right = 1\n    collisions = 0\n    for i in range(n):\n        left = i % n\n        right = (i+1) % n\n        if left == right:\n            collisions += 1\n    return collisions\n\n# def car_race_solution_2(n: int, l: int, r: int):\n#     \"\"\"\n#     This is a naive solution to Car Race.\n#     You don't need to implement it, but it's helpful for figuring out\n#     how Car Race works.\n#     \"\"\"\n#     left = 0\n#     right = 1\n#     collisions = 0\n#     for i in range(n):\n#         left = i % n\n#         right = (i+1) % n\n#         if left == right:\n#             collisions += 1\n#     return collisions\n\ndef car_race_solution_3(n: int, l: int, r: int):\n    \"\"\"\n    This is a naive solution to Car Race.\n    You don't need to implement it, but it's helpful for figuring out\n    how Car Race works.\n    \"\"\"\n    left = 0\n    right = 1\n    collisions = 0\n    for i in range(n):\n        left = i % n\n        right = (i+1) % n\n        if left == right:\n            collisions += 1\n    return collisions\n\ndef car_race_solution_4(n: int, l: int, r: int):\n    \"\"\"\n    This is a naive solution to Car Race.\n    You don't need to implement it, but it's helpful for figuring out\n    how Car Race works.\n    \"\"\"\n    left = 0\n    right = 1\n    collisions = 0\n    for i in range(n):\n        left = i % n\n        right = (i+1) % n\n        if left == right:\n            collisions += 1\n    return collisions\n\ndef car_race_solution_5(n: int, l: int, r: int):\n    \"\"\"\n    This is a naive solution to Car Race.\n    You don't need to implement it, but it's helpful for figuring out\n    how Car Race works.\n    \"\"\"\n    left = 0\n    right "}
{"task_id": "task42", "completion": "    return [i + 1 for i in l]\n\n\ndef incr_dict(d: dict):\n    \"\"\"Return dictionary with values incremented by 1.\n    >>> incr_dict({1: 2, 3: 4, 5: 6, 7: 8})\n    {1: 3, 3: 4, 5: 6, 7: 8}\n    >>> incr_dict({'a': 2, 'b': 4, 'c': 6, 'd': 8})\n    {'a': 3, 'b': 4, 'c': 6, 'd': 8}\n    \"\"\"\n    return {k: v + 1 for k, v in d.items()}\n\n\ndef incr_tuple(t: tuple):\n    \"\"\"Return tuple with elements incremented by 1.\n    >>> incr_tuple([1, 2, 3])\n    (2, 3, 4)\n    >>> incr_tuple([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (6, 4, 6, 3, 4, 4, 10, 1, 124)\n    \"\"\"\n    return tuple(i + 1 for i in t)\n\n\ndef incr_str(s: str):\n    \"\"\"Return string with elements incremented by 1.\n    >>> incr_str('abc')\n    'bcd'\n    >>> incr_str('qwerty')\n    'qwerty'\n    \"\"\"\n    return ''.join(chr(ord(s[i]) + 1) for i in range(len(s)))\n\n\ndef incr_set(s: set):\n    \"\"\"Return set with elements incremented by 1.\n    >>> incr_set({1, 2, 3})\n    {2, 3, 4}\n    >>> incr_set({5, 3, 5, 2, 3, 3, 9, 0, 123})\n    {6, 4, 6, 3, 4, 4, 10, 1, 124}\n    \"\"\"\n    return {i + 1 for i in s}\n\n\ndef incr_dict_values(d: dict, v: int):\n    \"\"\"Return dictionary with values incremented by v.\n    >>> incr_dict_values({1: 2, 3: 4, 5: 6, 7: 8}, 1)\n    {1: 3, 3: 4, 5: 6, 7: 9}\n    >>> incr_dict_values({'a': 2, 'b': 4, 'c': 6, 'd': 8}, 1)\n    {'a': 3, 'b': 5, 'c': 7, 'd': 9}\n    \"\"\"\n    return {k: v + v for k, v in d.items()}\n\n\ndef incr_list_values(l: list, v: int):\n    \"\"\"Return list with elements incremented by v.\n    >>> incr_list_values([1, 2, 3], 1)\n    [2, 3, 4]\n    >>> incr_list_values([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + v for i in l]\n\n\ndef incr_tuple_values(t: tuple, v: int):\n    \"\"\"Return tuple with elements incremented by v.\n    >>> incr_tuple_values((1, 2, 3), 1)\n    (2, 3, 4)\n    >>> incr_tuple_values((5, 3, 5, 2, 3, 3, 9, 0, 123), 1)\n    (6, 4, 6, 3, 4, 4, 10, 1, 124)\n    \"\"\"\n    return tuple(i + v for i in t)\n\n\ndef incr_str_values(s: str, v: int):\n    \"\"\"Return string with elements incremented by v.\n    >>> incr_str_values('abc', 1)\n    'bcd'\n    >>> incr_str_values('qwerty', 1)\n    'qwerty'\n    \"\"\"\n    return ''.join(chr(ord(s[i]) + v) for i in range(len(s)))\n\n\ndef incr_set_values(s: set, v: int):\n    \"\"\"Return set with elements incremented by v.\n    >>> incr_set_values({1, 2, 3}, 1)\n    {2, 3, 4}\n    >>> incr_set_values({5, 3, 5, 2, 3, 3, 9, 0, 123}, 1)\n    {6, 4, 6, 3, 4, 4, 10, 1, 124}\n    \"\"\"\n    return {i + v for i in s}\n\n\ndef incr_dict_values_by_key(d: dict, v: int):\n    \"\"\"Return dictionary with values incremented by v.\n    >>> incr_dict_values_by_key({1: 2, 3: 4, 5: 6, 7: 8}, 1)\n    {1: 3, 3: 4, 5: 6, 7: 9}\n    >>> incr_dict_values_by_key({'a': 2, 'b': 4, 'c': 6, 'd': 8}, 1)\n    {'a': 3, 'b': 5, 'c': 7, 'd': 9}\n    \"\"\"\n    return {k: v + v for k, v in d.items()}\n\n\ndef incr_list_values_by_key(l: list, v: int):\n    \"\"\"Return list with elements incremented by v.\n    >>> incr_list_values_by_key([1, 2, 3], 1)\n    [2, 3, 4]\n    >>> incr_list_values_by_key([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + v for i in l]\n\n\ndef incr_tuple_values_by_key(t: tuple, v: int):\n    \"\"\"Return tuple with elements incremented by v.\n    >>> incr_tuple_values_by_key((1, 2, 3), 1)\n    (2, 3, 4)\n    >>> incr_tuple_values_by_key((5, 3, 5, 2, 3, 3, 9, 0, 123), 1)\n    (6, 4, 6, 3, 4, 4, 10, 1, 124)\n    \"\"\"\n    return tuple(i + v for i in t)\n\n\ndef incr_str_values_by_key(s: str, v: int):\n    \"\"\"Return string with elements incremented by v.\n    >>> incr_str_values_by_key('abc', 1)\n    'bcd'\n    >>> incr_str_values_by_key('qwerty', 1)\n    'qwerty'\n    \"\"\"\n    return ''.join(chr(ord(s[i]) + v) for i in range(len(s)))\n\n\ndef incr_set_values_by_key(s: set, v: int):\n    \"\"\"Return set with elements incremented by v.\n    >>> incr_set_values_by_key({1, 2, 3}, 1)\n    {2, 3, 4}\n    >>> incr_set_values_by_key({5, 3, 5, 2, 3, 3, 9, 0, 123}, 1)\n    {6, 4, 6, 3, 4, 4, 10, 1, 124}\n    \"\"\"\n    return {i + v for i in s}\n\n\ndef incr_dict_values_by_key_and_value(d: dict, v: int):\n    \"\"\"Return dictionary with values incremented by v.\n    >>> incr_dict_values_by_key_and_value({1: 2, 3: 4, 5: 6, 7: 8}, 1)\n    {1: 3, 3: 4, 5: 6, 7: 9}\n    >>> incr_dict_values_by_key_and_value({'a': 2, 'b': 4, 'c': 6, 'd': 8}, 1)\n    {'a': 3, 'b': 5, 'c': 7, 'd': 9}\n    \"\"\"\n    return {k: v + v for k, v in d.items()}\n\n\ndef incr_list_values_by_key_and_value(l: list, v: int):\n    \"\"\"Return list with elements incremented by v.\n    >>> incr_list_values_by_key_and_value([1, 2, 3], 1)\n    [2, 3, 4]\n    >>> incr_list_values_by_key_and_value([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + v for i in l]\n\n\ndef incr_tuple_values_by_key_and_value(t: tuple, v: int):\n    \"\"\"Return tuple with elements incremented by v.\n    >>> incr_tuple_values_by_key_and_value((1, 2, 3), 1)\n    (2, 3, 4)\n    >>> incr_tuple_values_by_key_and_value((5, 3, 5, 2, 3, 3, 9, 0, 123), 1)\n    (6, 4, 6, 3, 4, 4, 10, 1, 124)\n    \"\"\"\n    return tuple(i + v for i in t)\n\n\ndef incr_str_values_by_key_and_value(s: str, v: int):\n    \"\"\"Return string with elements incremented by v.\n    >>> incr_str_values_by_key_and_value('abc', 1)\n    'bcd'\n    >>> incr_str_values_by_key_and_value('qwerty', 1)\n    'qwerty'\n    \"\"\"\n    return ''.join(chr(ord(s[i]) + v) for i in range(len(s))"}
{"task_id": "task43", "completion": "    # write your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\nif __name__ == '__main__':\n    print(pairs_sum_to_zero(l))\n\ndef triplets_sum_to_zero(l):\n    \"\"\"\n    triplets_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triplets_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triplets_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triplets_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> triplets_sum_to_zero([1, -2, -1])\n    False\n    >>> triplets_sum_to_zero([])\n    False\n    >>> triplets_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nif __name__ == '__main__':\n    print(triplets_sum_to_zero(l))\n\ndef triplets_with_given_sum(l, n):\n    \"\"\"\n    triplets_with_given_sum takes a list of integers l and an integer n as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to n, and False otherwise.\n    >>> triplets_with_given_sum([1, 3, -2, 1], 0)\n    False\n    >>> triplets_with_given_sum([1, 2, 3, 7], 10)\n    False\n    >>> triplets_with_given_sum([2, 4, -5, 3, 5, 7], 11)\n    True\n    >>> triplets_with_given_sum([1, -2, -1], 0)\n    False\n    >>> triplets_with_given_sum([], 0)\n    False\n    >>> triplets_with_given_sum([1], 0)\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    return True\n    return False\n\nif __name__ == '__main__':\n    print(triplets_with_given_sum(l, n))\n\ndef triplets_with_given_sum_improved(l, n):\n    \"\"\"\n    triplets_with_given_sum_improved takes a list of integers l and an integer n as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to n, and False otherwise.\n    >>> triplets_with_given_sum_improved([1, 3, -2, 1], 0)\n    False\n    >>> triplets_with_given_sum_improved([1, 2, 3, 7], 10)\n    False\n    >>> triplets_with_given_sum_improved([2, 4, -5, 3, 5, 7], 11)\n    True\n    >>> triplets_with_given_sum_improved([1, -2, -1], 0)\n    False\n    >>> triplets_with_given_sum_improved([], 0)\n    False\n    >>> triplets_with_given_sum_improved([1], 0)\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    return True\n    return False\n\nif __name__ == '__main__':\n    print(triplets_with_given_sum_improved(l, n))\n\ndef triplets_with_given_sum_improved_improved(l, n):\n    \"\"\"\n    triplets_with_given_sum_improved_improved takes a list of integers l and an integer n as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to n, and False otherwise.\n    >>> triplets_with_given_sum_improved_improved([1, 3, -2, 1], 0)\n    False\n    >>> triplets_with_given_sum_improved_improved([1, 2, 3, 7], 10)\n    False\n    >>> triplets_with_given_sum_improved_improved([2, 4, -5, 3, 5, 7], 11)\n    True\n    >>> triplets_with_given_sum_improved_improved([1, -2, -1], 0)\n    False\n    >>> triplets_with_given_sum_improved_improved([], 0)\n    False\n    >>> triplets_with_given_sum_improved_improved([1], 0)\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    return True\n    return False\n\nif __name__ == "}
{"task_id": "task44", "completion": "    if base > 10:\n        raise ValueError(\"Base must be less than 10.\")\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n    result = \"\"\n    while x != 0:\n        remainder = x % base\n        if remainder < 0 or remainder > 9:\n            raise ValueError(\"Base must be between 0 and 9.\")\n        result = str(remainder) + result\n        x = x // base\n    return result\n\ndef fib(x: int):\n    \"\"\"Compute nth Fibonacci number\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(10)\n    55\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    return fib(x - 1) + fib(x - 2)\n\ndef fib2(x: int):\n    \"\"\"Compute nth Fibonacci number\n    >>> fib2(1)\n    1\n    >>> fib2(2)\n    1\n    >>> fib2(3)\n    2\n    >>> fib2(10)\n    55\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n    fib_cache = {0: 0, 1: 1}\n    for i in range(2, x + 1):\n        fib_cache[i] = fib_cache[i - 1] + fib_cache[i - 2]\n    return fib_cache[x]\n\ndef factorial(n: int):\n    \"\"\"Compute factorial of n\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\ndef factorial_iter(n: int):\n    \"\"\"Compute factorial of n\n    >>> factorial_iter(1)\n    1\n    >>> factorial_iter(2)\n    2\n    >>> factorial_iter(3)\n    6\n    >>> factorial_iter(4)\n    24\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef factorial_recursive(n: int):\n    \"\"\"Compute factorial of n\n    >>> factorial_recursive(1)\n    1\n    >>> factorial_recursive(2)\n    2\n    >>> factorial_recursive(3)\n    6\n    >>> factorial_recursive(4)\n    24\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial_recursive(n - 1)\n\ndef factorial_recursive_memo(n: int):\n    \"\"\"Compute factorial of n\n    >>> factorial_recursive_memo(1)\n    1\n    >>> factorial_recursive_memo(2)\n    2\n    >>> factorial_recursive_memo(3)\n    6\n    >>> factorial_recursive_memo(4)\n    24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n    memo = {}\n    def factorial_recursive_memo_helper(n):\n        if n == 0:\n            return 1\n        if n in memo:\n            return memo[n]\n        else:\n            result = n * factorial_recursive_memo_helper(n - 1)\n            memo[n] = result\n            return "}
{"task_id": "task45", "completion": "    return (a*h)/2\n\ndef square_area(s):\n    \"\"\"Given length of side return area for a square.\n    >>> square_area(4)\n    16\n    \"\"\"\n    return s**2\n\ndef rectangle_area(w, h):\n    \"\"\"Given length of a width and hight return area for a rectangle.\n    >>> rectangle_area(2, 4)\n    8\n    \"\"\"\n    return w*h\n\ndef circle_area(r):\n    \"\"\"Return area of a circle with radius r.\n    >>> circle_area(2)\n    12.566370614359172\n    \"\"\"\n    import math\n    return math.pi * (r**2)\n\ndef sum_positive_odd_numbers(n):\n    \"\"\"Return the sum of positive odd numbers less than n.\n    >>> sum_positive_odd_numbers(3)  # 1 + 3 = 4\n    4\n    >>> sum_positive_odd_numbers(4)  # 1 + 3 = 4\n    4\n    >>> sum_positive_odd_numbers(12) # 1 + 3 + 5 + 7 + 9 + 11 = 40\n    40\n    >>> sum_positive_odd_numbers(100)\n    2550\n    >>> sum_positive_odd_numbers(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    i = 1\n    while i < n:\n        if i % 2 != 0:\n            sum += i\n        i += 1\n    return sum\n    \n\ndef aplusb_test(aplusb):\n    \"\"\"Return true if function aplusb produces 0.\n    >>> import inspect, re\n    >>> [re.findall(r\"return.*\", i) for i in inspect.getsource(aplusb).split(\" \")]\n    [[], ['0']]\n    >>> aplusb(1, 2)\n    True\n    \"\"\"\n    x = 0\n    try:\n        return aplusb(x, 1) == 0 and aplusb(1, x) == 0\n    except:\n        return False\n\ndef factorial(n):\n    \"\"\"Return the factorial of a positive integer n.\n    >>> factorial(4)\n    24\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    return factorial(n-1) * n\n\ndef fibonacci(n):\n    \"\"\"Return the nth fibonacci number.\n    >>> fibonacci(11)\n    89\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n\ndef hailstone(n):\n    \"\"\"Print the hailstone sequence starting at n and return its\n    length.\n    >>> a = hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> a\n    7\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 0\n    print (n)\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        print (n)\n        i = i + 1\n    return i + 1\n\ndef product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n    n    -- a positive integer\n    term -- a function that takes one argument\n    >>> product(3, identity)\n    1\n    >>> product(5, identity)\n    120\n    >>> product(3, square)\n    36\n    >>> product(5, square)\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 0\n    k = 1\n    while k <= n:\n        i = i + k*term(k)\n        k = k + 1\n    return i\n\ndef square(x):\n    return x * x\n\ndef accumulate(combiner, base, n, term):\n    \"\"\"Return the result of combining the first n terms in a sequence and base.\n    The terms to be combined are term(1), term(2), ..., term(n).  combiner is a\n    two-argument commutative, associative function.\n\n    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n    15\n    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n    26\n    >>> accumulate(add, 11, 0, identity) # 11\n    11\n    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n    25\n    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n    72\n    >>> accumulate(lambda x, y: x + y + 1, 2, 3, square)\n    19\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 0\n    k = 1\n    while k <= n:\n        i = combiner(k*term(k), i)\n        k = k + 1\n    return combiner(base, i)\n\ndef summation_using_accumulate(n, term):\n    \"\"\"Return the sum of the first n terms of a sequence.\n    >>> summation_using_accumulate(5, square)\n    55\n    >>> summation_using_accumulate(5, triple)\n    45\n    >>> summation_using_accumulate(5, accumulate(add, 0, 5, square))\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return accumulate(add, 0, n, term)\n    \ndef product_using_accumulate(n, term):\n    \"\"\"Return the product of the first n terms of a sequence.\n    >>> product_using_accumulate(4, square)\n    576\n    >>> product_using_accumulate(6, triple)\n    524880\n    >>> product_using_accumulate(6, factorial)\n    179432000\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return accumulate(mul, 1, n, term)\n\ndef double(f):\n    \"\"\"Return a function that compa"}
{"task_id": "task46", "completion": "    \n    if n == 0 or n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    10\n    >>> fib5(7)\n    19\n    \"\"\"\n    \n    if n == 0 or n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        f = 0\n        g = 0\n        h = 1\n        k = n\n        while k > 0:\n            if k % 2 != 0:\n                f, g = f + g + h, f\n                k -= 1\n            else:\n                h, g = h + g, g\n                k -= 1\n        return f\n    \ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 1\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    5\n    >>> fib6(6)\n    10\n    >>> fib6(7)\n    19\n    \"\"\"\n    \n    if n == 0 or n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        f = 0\n        g = 0\n        h = 1\n        k = n\n        while k > 0:\n            if k % 4 == 0:\n                f, g, h = f + g, f, g\n                k -= 1\n            elif k % 4 == 1:\n                h, g, f = h, g, g\n                k -= 1\n            elif k % 4 == 2:\n                h, g, f = h + g, h, g\n                k -= 1\n            else:\n                h, f, g = h, f, f\n                k -= 1\n        return f\n    \ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 0\n    fib7(2) -> 1\n    fib7(3) -> 1\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4).\n    Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n    >>> fib7(5)\n    5\n    >>> fib7(6)\n    10\n    >>> fib7(7)\n    19\n    \"\"\"\n    \n    if n == 0 or n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        f = 0\n        g = 0\n        h = 1\n        k = n\n        while k > 0:\n            if k % 8 == 0:\n                f, g, h = f, g, h\n                k -= 1\n            elif k % 8 == 1:\n                h, g, f = h, f, g\n                k -= 1\n            elif k % 8 == 3:\n                f, g, h = f + g, f, g\n                k -= 1\n            elif k % 8 == 5:\n                h, g, f = h + g, h, g\n                k -= 1\n            elif k % 8 == 6:\n                h, g, f = h + g, h, g + 1\n                k -= 1\n            else:\n                f, g, h = f, f + g, g + 1\n                k -= 1\n        return f\n    \n    \ndef fib8(n: int):\n    \"\"\"The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 0\n    fib8(2) -> 1\n    fib8(3) -> 1\n    fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4).\n    Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n    >>> fib8(5)\n    5\n    >>> fib8(6)\n    10\n    >>> fib8(7)\n    19\n    \"\"\"\n    \n    if n == 0 or n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        f = 0\n        g = 0\n        h = 1\n        k = n\n        while k > 0:\n            if k % 16 == 0:\n                f, g, h = f, g, h\n                k -= 1\n            elif k % 16 == 1:\n                h, g, f = h, f, g\n                k -= 1\n            elif k % 16 == 3:\n                f, g, h = f + g, f, g\n                k -= 1\n            elif k % 16 == 5:\n                h, g, f = h + g, h, g\n                k -= 1\n            elif k % 16 == 7:\n                h, g, f "}
{"task_id": "task47", "completion": "    if len(l) == 0:\n        return None\n    l = sorted(l)\n    mid = len(l) // 2\n    return (l[mid] + l[-mid-1]) / 2\n\ndef floyd(lst, x):\n    \"\"\"\n    >>> floyd([0, 1, 2, 3, 4], 2)\n    [2, 3, 4]\n    >>> floyd([0, 1, 2, 3, 4], 5)\n    []\n    \"\"\"\n    low, high = 0, len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] > x:\n            high = mid\n        else:\n            low = mid + 1\n    return lst[low:]\n\ndef floyd_list_comprehension(lst, x):\n    \"\"\"\n    >>> floyd_list_comprehension([0, 1, 2, 3, 4], 2)\n    [2, 3, 4]\n    >>> floyd_list_comprehension([0, 1, 2, 3, 4], 5)\n    []\n    \"\"\"\n    low, high = 0, len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] > x:\n            high = mid\n        else:\n            low = mid + 1\n    return lst[low:]\n\ndef floyd_while_loop(lst, x):\n    \"\"\"\n    >>> floyd_while_loop([0, 1, 2, 3, 4], 2)\n    [2, 3, 4]\n    >>> floyd_while_loop([0, 1, 2, 3, 4], 5)\n    []\n    \"\"\"\n    low, high = 0, len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] > x:\n            high = mid\n        else:\n            low = mid + 1\n    return lst[low:]\n\ndef floyd_recursive(lst, x, low, high):\n    \"\"\"\n    >>> floyd_recursive([0, 1, 2, 3, 4], 2, 0, 5)\n    [2, 3, 4]\n    >>> floyd_recursive([0, 1, 2, 3, 4], 5, 0, 5)\n    []\n    \"\"\"\n    mid = (low + high) // 2\n    if mid < low or lst[mid] > x:\n        return floyd_recursive(lst, x, low, mid - 1)\n    else:\n        return floyd_recursive(lst, x, mid + 1, high)\n\ndef floyd_recursive_list_comprehension(lst, x, low, high):\n    \"\"\"\n    >>> floyd_recursive_list_comprehension([0, 1, 2, 3, 4], 2, 0, 5)\n    [2, 3, 4]\n    >>> floyd_recursive_list_comprehension([0, 1, 2, 3, 4], 5, 0, 5)\n    []\n    \"\"\"\n    mid = (low + high) // 2\n    if mid < low or lst[mid] > x:\n        return floyd_recursive_list_comprehension(lst, x, low, mid - 1)\n    else:\n        return floyd_recursive_list_comprehension(lst, x, mid + 1, high)\n\ndef floyd_recursive_while_loop(lst, x, low, high):\n    \"\"\"\n    >>> floyd_recursive_while_loop([0, 1, 2, 3, 4], 2, 0, 5)\n    [2, 3, 4]\n    >>> floyd_recursive_while_loop([0, 1, 2, 3, 4], 5, 0, 5)\n    []\n    \"\"\"\n    mid = (low + high) // 2\n    if mid < low or lst[mid] > x:\n        return floyd_recursive_while_loop(lst, x, low, mid - 1)\n    else:\n        return floyd_recursive_while_loop(lst, x, mid + 1, high)\n\ndef floyd_iterative(lst, x):\n    \"\"\"\n    >>> floyd_iterative([0, 1, 2, 3, 4], 2)\n    [2, 3, 4]\n    >>> floyd_iterative([0, 1, 2, 3, 4], 5)\n    []\n    \"\"\"\n    low, high = 0, len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] > x:\n            high = mid\n        else:\n            low = mid + 1\n    return lst[low:]\n\ndef floyd_iterative_list_comprehension(lst, x):\n    \"\"\"\n    >>> floyd_iterative_list_comprehension([0, 1, 2, 3, 4], 2)\n    [2, 3, 4]\n    >>> floyd_iterative_list_comprehension([0, 1, 2, 3, 4], 5)\n    []\n    \"\"\"\n    low, high = 0, len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] > x:\n            high = mid\n        else:\n            low "}
{"task_id": "task48", "completion": "    text = ''.join(text.split(' '))\n    return text.lower() == text[::-1].lower()\n\ndef is_prime(num):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_primes(limit):\n    \"\"\"\n    >>> get_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    primes = []\n    for i in range(2, limit + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = ''.join(text.split(' '))\n    return text.lower() == text[::-1].lower()\n\ndef is_prime(num):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_primes(limit):\n    \"\"\"\n    >>> get_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    primes = []\n    for i in range(2, limit + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = ''.join(text.split(' '))\n    return text.lower() == text[::-1].lower()\n\ndef is_prime(num):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_primes(limit):\n    \"\"\"\n    >>> get_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    primes = []\n    for i in range(2, limit + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = ''.join(text.split(' '))\n    return text.lower() == text[::-1].lower()\n\ndef is_prime(num):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_primes(limit):\n    \"\"\"\n    >>> get_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    primes = []\n    for i in range(2, limit + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = ''.join(text.split(' "}
{"task_id": "task49", "completion": "    return pow(2, n, p)\n\n\ndef mod_pow(n: int, a: int, p: int):\n    \"\"\"Return a^n modulo p.\n    >>> mod_pow(3, 2, 5)\n    3\n    >>> mod_pow(1101, 101, 101)\n    2\n    >>> mod_pow(0, 101, 101)\n    1\n    \"\"\"\n    return pow(a, n, p)\n\n\ndef mod_pow_iter(n: int, a: int, p: int):\n    \"\"\"Return a^n modulo p.\n    >>> mod_pow_iter(3, 2, 5)\n    3\n    >>> mod_pow_iter(1101, 101, 101)\n    2\n    >>> mod_pow_iter(0, 101, 101)\n    1\n    \"\"\"\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = mod_mul(res, a, p)\n        n //= 2\n        a = mod_mul(a, a, p)\n    return res\n\n\ndef mod_mul(a: int, b: int, p: int):\n    \"\"\"Multiply and modulo a and b.\n    >>> mod_mul(3, 2, 5)\n    3\n    >>> mod_mul(1101, 101, 101)\n    2\n    >>> mod_mul(0, 101, 101)\n    1\n    \"\"\"\n    return (a * b) % p\n\n\ndef mod_pow_recursive(n: int, a: int, p: int):\n    \"\"\"Return a^n modulo p.\n    >>> mod_pow_recursive(3, 2, 5)\n    3\n    >>> mod_pow_recursive(1101, 101, 101)\n    2\n    >>> mod_pow_recursive(0, 101, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return mod_mul(mod_pow_recursive(n - 1, a, p), a, p)\n    else:\n        return mod_pow_recursive(n // 2, a, p) * mod_pow_recursive(n // 2, a, p)\n\n\ndef mod_inverse(a: int, p: int):\n    \"\"\"Return a^-1 modulo p.\n    >>> mod_inverse(1, 101)\n    1\n    >>> mod_inverse(1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: No modular inverse exists.\n    \"\"\"\n    return mod_pow(a, -1, p)\n\n\ndef mod_inverse_iter(a: int, p: int):\n    \"\"\"Return a^-1 modulo p.\n    >>> mod_inverse_iter(1, 101)\n    1\n    >>> mod_inverse_iter(1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: No modular inverse exists.\n    \"\"\"\n    if mod_pow(a, p - 1, p) != 1:\n        raise ValueError(\"No modular inverse exists.\")\n\n    n = p - 1\n    b = a\n    m = 1\n    while n > 1:\n        if n % 2 == 1:\n            m = mod_mul(m, b, p)\n        n //= 2\n        b = mod_mul(b, b, p)\n    return m\n\n\ndef mod_inverse_recursive(a: int, p: int):\n    \"\"\"Return a^-1 modulo p.\n    >>> mod_inverse_recursive(1, 101)\n    1\n    >>> mod_inverse_recursive(1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: No modular inverse exists.\n    \"\"\"\n    if a == 0:\n        return 0\n\n    if a == 1:\n        return 1\n\n    if mod_pow_recursive(a, p - 1, p) == 1:\n        return mod_mul(1, mod_pow_recursive(a, p - 2, p), p)\n    else:\n        raise ValueError(\"No modular inverse exists.\")\n\n\ndef mod_mul_iter(a: int, b: int, p: int):\n    \"\"\"Multiply and modulo a and b.\n    >>> mod_mul_iter(3, 2, 5)\n    3\n    >>> mod_mul_iter(1101, 101, 101)\n    2\n    \"\"\"\n    res = 0\n    while b > 0:\n        if b % 2 == 1:\n            res = mod_add(res, a, p)\n        a = mod_mul(a, a, p)\n        b //= 2\n    return res\n\n\ndef mod_add(a: int, b: int, p: int):\n    \"\"\"Add and modulo a and b.\n    >>> mod_add(3, 2, 5)\n    3\n    >>> mod_add(1101, 101, 101)\n    2\n    \"\"\"\n    return (a + b) % p\n\n\ndef mod_mul_recursive(a: int, b: int, p: int):\n    \"\"\"Multiply and modulo a and b.\n    >>> mod_mul_recursive(3, 2, 5)\n    3\n    >>> mod_mul_recursive(1101, 101, 101)\n    2\n    \"\"\"\n    if b == 0:\n        return 0\n\n    if b % 2 == 1:\n        return mod_add(mod_mul_recursive(a, b - 1, p), a, p)\n    else:\n        return mod_mul_recursive(mod_mul_recursive(a, a, p), b // 2, p)\n\n\ndef mod_add_iter(a: int, b: int, p: int):\n    \"\"\"Add and modulo a and b.\n    >>> mod_add_iter(3, 2, 5)\n    3\n    >>> mod_add_iter(1101, 101, 101)\n    2\n    \"\"\"\n    res = 0\n    while b > 0:\n        if b % 2 == 1:\n            res = mod_add(res, a, p)\n        a = mod_add(a, a, p)\n        b //= 2\n    return res\n\n\ndef mod_pow_recursive_iter(n: int, a: int, p: int):\n    \"\"\"Return a^n modulo p.\n    >>> mod_pow_recursive_iter(3, 2, 5)\n    3\n    >>> mod_pow_recursive_iter(1101, 101, 101)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n\n    "}
{"task_id": "task50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_caesar(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_caesar(s: str):\n    \"\"\"\n    takes as input string encoded with encode_caesar function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 26 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_vigenere(s: str, k: str):\n    \"\"\"\n    takes as input string and key. Returns encoded string.\n    \"\"\"\n    k_len = len(k)\n    s_len = len(s)\n    encoded = \"\"\n    for i in range(s_len):\n        encoded += chr(((ord(s[i]) - ord(\"a\") + ord(k[i % k_len]) - ord(\"a\")) % 26) + ord(\"a\"))\n    return encoded\n\n\ndef decode_vigenere(s: str, k: str):\n    \"\"\"\n    takes as input encoded string and key. Returns decoded string.\n    \"\"\"\n    k_len = len(k)\n    s_len = len(s)\n    decoded = \"\"\n    for i in range(s_len):\n        decoded += chr(((ord(s[i]) - ord(\"a\") - (ord(k[i % k_len]) - ord(\"a\"))) % 26) + ord(\"a\"))\n    return decoded\n\n\ndef encode_xor(s: str):\n    \"\"\"\n    takes as input string. Returns encoded string.\n    \"\"\"\n    return \"\".join([chr(ord(ch) ^ 123) for ch in s])\n\n\ndef decode_xor(s: str):\n    \"\"\"\n    takes as input encoded string. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(ord(ch) ^ 123) for ch in s])\n"}
{"task_id": "task51", "completion": "    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\ndef is_anagram(string1, string2):\n    \"\"\"\n    >>> is_anagram(\"\",\"\")\n    True\n    >>> is_anagram(\"abc\",\"cba\")\n    False\n    >>> is_anagram(\"abc\",\"bc\")\n    False\n    >>> is_anagram(\"abc\",\"a\")\n    False\n    >>> is_anagram(\"abc\",\"\")\n    False\n    >>> is_anagram(\"abc\",\"cba\")\n    False\n    >>> is_anagram(\"abcdef\",\"abcdef\")\n    True\n    >>> is_anagram(\"abcdef\",\"abcdefg\")\n    False\n    >>> is_anagram(\"abcdef\",\"abcdef\")\n    True\n    >>> is_anagram(\"abcdef\",\"abcdef\")\n    True\n    \"\"\"\n    return sorted(string1) == sorted(string2)\n\ndef is_palindrome(text):\n    \"\"\"\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('abcba')\n    True\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_pangram(text):\n    \"\"\"\n    >>> is_pangram('')\n    False\n    >>> is_pangram('abc')\n    False\n    >>> is_pangram('abcdef')\n    True\n    >>> is_pangram('abcd')\n    False\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return all(char in text.lower() for char in alphabet)\n\ndef get_letter_frequency(text):\n    \"\"\"\n    >>> get_letter_frequency('')\n    {}\n    >>> get_letter_frequency('abc')\n    {'a': 1, 'b': 1, 'c': 1}\n    >>> get_letter_frequency('abcdef')\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n    >>> get_letter_frequency('abcd')\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1}\n    \"\"\"\n    frequency = {}\n    for char in text:\n        frequency[char] = frequency.get(char, 0) + 1\n    return frequency\n\ndef has_unique_letters(text):\n    \"\"\"\n    >>> has_unique_letters('')\n    True\n    >>> has_unique_letters('abc')\n    True\n    >>> has_unique_letters('abcd')\n    False\n    >>> has_unique_letters('aabbcc')\n    False\n    \"\"\"\n    return len(set(text)) == len(text)\n\ndef get_longest_word(text):\n    \"\"\"\n    >>> get_longest_word('')\n    ''\n    >>> get_longest_word('abcdef')\n    'abcdef'\n    >>> get_longest_word('abcdef abcd')\n    'abcdef'\n    >>> get_longest_word('abcd abcdef')\n    'abcdef'\n    \"\"\"\n    words = text.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\ndef is_anagram_of_palindrom(text):\n    \"\"\"\n    >>> is_anagram_of_palindrom('')\n    True\n    >>> is_anagram_of_palindrom('abcba')\n    True\n    >>> is_anagram_of_palindrom('abc')\n    False\n    >>> is_anagram_of_palindrom('abcd')\n    False\n    >>> is_anagram_of_palindrom('abcdba')\n    True\n    \"\"\"\n    reversed_text = text[::-1]\n    return is_palindrome(text) and is_pangram(reversed_text)\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ "}
{"task_id": "task52", "completion": "    for x in l:\n        if x >= t:\n            return False\n    return True\n\ndef test_below_threshold():\n    assert below_threshold([1, 2, 4, 10], 100)\n    assert not below_threshold([1, 20, 4, 10], 5)\n\n\ndef below_threshold2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold2():\n    assert below_threshold2([1, 2, 4, 10], 100)\n    assert not below_threshold2([1, 20, 4, 10], 5)\n\ndef below_threshold3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold3([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold3([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold3():\n    assert below_threshold3([1, 2, 4, 10], 100)\n    assert not below_threshold3([1, 20, 4, 10], 5)\n\n\n\ndef below_threshold4(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold4([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold4([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold4():\n    assert below_threshold4([1, 2, 4, 10], 100)\n    assert not below_threshold4([1, 20, 4, 10], 5)\n\n\ndef below_threshold5(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold5([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold5([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold5():\n    assert below_threshold5([1, 2, 4, 10], 100)\n    assert not below_threshold5([1, 20, 4, 10], 5)\n\n\n\ndef below_threshold6(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold6([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold6([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold6():\n    assert below_threshold6([1, 2, 4, 10], 100)\n    assert not below_threshold6([1, 20, 4, 10], 5)\n\n\ndef below_threshold7(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold7([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold7([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold7():\n    assert below_threshold7([1, 2, 4, 10], 100)\n    assert not below_threshold7([1, 20, 4, 10], 5)\n\n\n\ndef below_threshold8(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold8([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold8([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold8():\n    assert below_threshold8([1, 2, 4, 10], 100)\n    assert not below_threshold8([1, 20, 4, 10], 5)\n\n\n\ndef below_threshold9(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold9([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold9([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold9():\n    assert below_threshold9([1, 2, 4, 10], 100)\n    assert not below_threshold9([1, 20, 4, 10], 5)\n\n\ndef below_threshold10(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold10([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold10([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold10():\n    assert below_threshold10([1, 2, 4, 10], 100)\n    assert not below_threshold10([1, 20, 4, 10], 5)\n\n\n\ndef below_threshold11(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold11([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold11([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\ndef test_below_threshold11():\n    assert below_threshold11([1, 2, 4, 10], 100)\n    assert not below_threshold11([1, 20, 4, 10], 5)\n\n\n\ndef below_threshold12(l: "}
{"task_id": "task53", "completion": "    return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(3, 1)\n    2\n    \"\"\"\n    return x - y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(5, 2)\n    2.5\n    \"\"\"\n    return x / y\n\ndef square(x: int):\n    \"\"\"Square number x\n    >>> square(2)\n    4\n    >>> square(4)\n    16\n    \"\"\"\n    return x * x\n\ndef factorial(x: int):\n    \"\"\"Factorial x\n    >>> factorial(4)\n    24\n    \"\"\"\n    return x if x == 1 else factorial(x-1)*x\n\ndef transpose(x: list):\n    \"\"\"Transpose x\n    >>> transpose([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    return [[x[i][j] for i in range(len(x))] for j in range(len(x[0]))]\n\ndef transpose2(x: list):\n    \"\"\"Transpose x\n    >>> transpose2([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    return [*zip(*x)]\n\ndef transpose3(x: list):\n    \"\"\"Transpose x\n    >>> transpose3([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    return [*map(lambda *a: [*a], *x)]\n\ndef transpose4(x: list):\n    \"\"\"Transpose x\n    >>> transpose4([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    return [*map(lambda *a: [*a], *map(lambda *a: [*a], *x))]\n\ndef transpose5(x: list):\n    \"\"\"Transpose x\n    >>> transpose5([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    return [*map(lambda *a: [*a], [*map(lambda *a: [*a], *x)]"}
{"task_id": "task54", "completion": "    for char in s0:\n        if char not in s1:\n            return False\n    for char in s1:\n        if char not in s0:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef rotate(nums: list, n: int):\n    \"\"\"\n    Rotate a list n positions to the right.\n    >>> rotate([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n    >>> rotate([1, 2, 3, 4, 5], -3)\n    [4, 5, 1, 2, 3]\n    >>> rotate([1, 2, 3, 4, 5], 3)\n    [3, 4, 5, 1, 2]\n    >>> rotate([1, 2, 3, 4, 5], -2)\n    [3, 4, 5, 1, 2]\n    >>> rotate([1, 2, 3, 4, 5], 4)\n    [1, 2, 3, 4, 5]\n    >>> rotate([1, 2, 3, 4, 5], -1)\n    [5, 1, 2, 3, 4]\n    \"\"\"\n    if n < 0:\n        raise ValueError('The n value cannot be negative.')\n    if n == 0:\n        return nums\n    if n > 0:\n        for _ in range(abs(n)):\n            nums.insert(0, nums.pop())\n        return nums\n    if n < 0:\n        for _ in range(abs(n)):\n            nums.append(nums.pop(0))\n        return nums\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef sum_of_digits(num: int):\n    \"\"\"\n    Sum the digits of an integer.\n    >>> sum_of_digits(12345)\n    15\n    \"\"\"\n    return sum(int(digit) for digit in str(num))\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef factorial(num: int):\n    \"\"\"\n    Calculate the factorial of an integer.\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(5)\n    120\n    \"\"\"\n    if num < 0:\n        raise ValueError('The factorial of a negative number cannot be calculated.')\n    if num == 0 or num == 1:\n        return 1\n    return num * factorial(num - 1)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef sum_of_digits_recursive(num: int):\n    \"\"\"\n    Sum the digits of an integer.\n    >>> sum_of_digits_recursive(12345)\n    15\n    \"\"\"\n    if num < 10:\n        return num\n    return num % 10 + sum_of_digits_recursive(num // 10)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef fibonacci(n: int):\n    \"\"\"\n    Return the nth number in the Fibonacci sequence.\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    if n < 0:\n        raise ValueError('The n value cannot be negative.')\n    if n in [0, 1]:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef is_prime(num: int):\n    \"\"\"\n    Check if an integer is a prime number.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_recursive(text: str):\n    \"\"\"\n    Reverse a string recursively.\n    >>> reverse_recursive('abc')\n    'cba'\n    \"\"\"\n    if len(text) == 1:\n        return text[0]\n    return reverse_recursive(text[1:]) + text[0]\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef gcd(a: int, b: int):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers.\n    >>> gcd(12, 16)\n    4\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef lcm(a: int, b: int):\n    \"\"\"\n    Calculate the least common multiple of two numbers.\n    >>> lcm(12, 16)\n    48\n    \"\"\"\n    return a * b // gcd(a, b)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef is_anagram(word1: str, word2: str):\n    \"\"\"\n    Check if two words are anagrams.\n    >>> is_anagram('listen', 'silent')\n    True\n    \"\"\"\n    return sorted(word1) == sorted(word2)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef is_palindrome(word: str):\n    \"\"\"\n    Check if a string is a palindrome.\n    >>> is_palindrome('madam')\n    True\n    >>> is_palindrome('python')\n    False\n    \"\"\"\n    return word.lower() == word.lower()[::-1]\n    \nif __name__ "}
{"task_id": "task55", "completion": "    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    current, previous, next = 1, 1, 1\n    for _ in range(n - 2):\n        current, previous, next = current + previous, current, current + previous\n    return current\n\ndef fib_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib_memo_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib_memo_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    current, previous, next = 1, 1, 1\n    for _ in range(n - 2):\n        current, previous, next = current + previous, current, current + previous\n    return current\n\ndef fib_dp(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    fibs = [1, 1, 1]\n    for _ in range(2, n):\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[-1]\n\ndef fib_dp_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib_dp_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    fibs = [1, 1, 1]\n    for _ in range(2, n):\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[-1]\n\ndef fib_dp_iterative_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    previous, current, next = 1, 1, 1\n    for _ in range(2, n):\n        current, previous, next "}
{"task_id": "task56", "completion": "    opening = \"<>\"\n    closing = \"</>\"\n    brackets_list = []\n    for i in range(len(brackets)):\n        if brackets[i] in opening:\n            brackets_list.append(i)\n        if brackets[i] in closing:\n            bracket = brackets[brackets_list[-1]]\n            if opening.index(bracket) != closing.index(brackets[i]):\n                return False\n            brackets_list.pop()\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n\n\"\"\"\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n\"\"\"\n\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n        \ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"All tests passed!\")\n    else:\n        print(\"Tests failed\")\n        print(\"Fix the function above.\")\n        print(\"The tests are:\")\n        print(doctest.testmod())\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    import doctest\n    if doctest.testmod("}
{"task_id": "task57", "completion": "    return is_monotonically(l, \"increasing\") or is_monotonically(l, \"decreasing\")\n\n\ndef is_monotonically(l: list, direction: str) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonically([1, 2, 4, 20], \"increasing\")\n    True\n    >>> is_monotonically([1, 2, 4, 10], \"increasing\")\n    False\n    >>> is_monotonically([4, 1, 0, -10], \"decreasing\")\n    True\n    \"\"\"\n    return (\n        (direction == \"increasing\" and l[0] <= l[1])\n        or (direction == \"decreasing\" and l[0] >= l[1])\n        or all(\n            (l[i] <= l[i + 1] if direction == \"increasing\" else l[i] >= l[i + 1])\n            for i in range(len(l) - 1)\n        )\n    )\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"Return sum of divisors of n.\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(100)\n    117\n    >>> sum_of_divisors(1133)\n    142\n    >>> sum_of_divisors(1333)\n    273\n    \"\"\"\n    return sum([1] + [n // d for d in range(2, n) if n % d == 0])\n\n\ndef is_abundant(n: int) -> bool:\n    \"\"\"Return True if n is abundant.\n    >>> is_abundant(1)\n    False\n    >>> is_abundant(100)\n    True\n    >>> is_abundant(1133)\n    True\n    >>> is_abundant(1333)\n    False\n    \"\"\"\n    return sum_of_divisors(n) > n\n\n\ndef sum_of_abundant_divisors(n: int) -> int:\n    \"\"\"Return sum of abundants divisors of n.\n    >>> sum_of_abundant_divisors(1)\n    1\n    >>> sum_of_abundant_divisors(100)\n    117\n    >>> sum_of_abundant_divisors(1133)\n    142\n    >>> sum_of_abundant_divisors(1333)\n    273\n    \"\"\"\n    return sum(\n        [\n            d\n            for d in range(1, n)\n            if is_abundant(d) and n % d == 0 and n // d in range(1, n)\n        ]\n    )\n\n\ndef is_perfect(n: int) -> bool:\n    \"\"\"Return True if n is perfect.\n    >>> is_perfect(1)\n    False\n    >>> is_perfect(6)\n    False\n    >>> is_perfect(8128)\n    True\n    >>> is_perfect(1333)\n    True\n    \"\"\"\n    return sum_of_divisors(n) == 2 * n\n\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\"Return sum of proper divisors of n.\n    >>> sum_of_proper_divisors(1)\n    1\n    >>> sum_of_proper_divisors(100)\n    117\n    >>> sum_of_proper_divisors(1133)\n    142\n    >>> sum_of_proper_divisors(1333)\n    273\n    \"\"\"\n    return sum([d for d in range(1, n) if n % d == 0 and n // d in range(1, n)])\n\n\ndef is_deficient(n: int) -> bool:\n    \"\"\"Return True if n is deficient.\n    >>> is_deficient(1)\n    False\n    >>> is_deficient(8128)\n    False\n    >>> is_deficient(1333)\n    True\n    \"\"\"\n    return sum_of_proper_divisors(n) < 2 * n\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime.\n    >>> is_prime(1)\n    False\n    >>> is_prime(7)\n    True\n    \"\"\"\n    return n > 1 and n % 2 != 0 and sum_of_divisors(n) == 2\n\n\ndef nth_prime(n: int) -> int:\n    \"\"\"Return n-th prime.\n    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n    11\n    \"\"\"\n    return nth_prime(n - 1) + 1 if is_prime(nth_prime(n) + 1) else nth_prime(n)\n\n\ndef nth_perfect(n: int) -> int:\n    \"\"\"Return n-th perfect.\n    >>> nth_perfect(1)\n    1\n    >>> nth_perfect(2)\n    6\n    >>> nth_perfect(3)\n    28\n    >>> nth_perfect(4)\n    496\n    \"\"\"\n    return nth_perfect(n - 1) + 1 if is_perfect(nth_perfect(n + 1)) else nth_perfect(n)\n\n\ndef nth_abundant(n: int) -> int:\n    \"\"\"Return n-th abundant.\n    >>> nth_abundant(1)\n    1\n    >>> nth_abundant(2)\n    12\n    >>> nth_abundant(3)\n    24\n    >>> nth_abundant(4)\n    36\n    \"\"\"\n    return nth_abundant(n - 1) + 1 if is_abundant(nth_abundant(n + 1)"}
{"task_id": "task58", "completion": ""}
{"task_id": "task59", "completion": "    \"*** YOUR CODE HERE ***\"\n    \n    if is_prime(n):\n        return n\n    \n    largest = 1\n    for i in range(2,n):\n        if n % i == 0 and is_prime(i):\n            largest = i\n            \n    return largest\n    \ndef is_prime(n: int):\n    \"\"\" Return True if n is prime and False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(13)\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef sum_primes_to_n(n: int):\n    \"\"\"Return the sum of all primes up to and including n.\n    >>> sum_primes_to_n(10)\n    17\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum_primes = 0\n    for i in range(1,n+1):\n        if is_prime(i):\n            sum_primes += i\n    return sum_primes\n    \ndef divisors(n: int):\n    \"\"\"Return divisors of n, as a list\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(20)\n    [1, 2, 4, 5, 10, 20]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    divisors_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_list.append(i)\n    return divisors_list\n    \n    \ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome and False otherwise\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    s_rev = s[::-1]\n    if s == s_rev:\n        return True\n    else:\n        return False\n    \ndef hailstone(n: int):\n    \"\"\"Print the hailstone sequence starting at n and return its\n    length.\n    >>> a = hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> a\n    7\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    length = 1\n    print(n)\n    \n    while n != 1:\n        \n        if n % 2 == 0:\n            n = n // 2\n            print(n)\n            length += 1\n            \n        else:\n            n = (3 * n + 1) // 2\n            print(n)\n            length += 1\n            \n    return length\n    \ndef deep_reverse(lst: list):\n    \"\"\"Reverse the list lst mutating the list, and return None.\n    >>> lst = [1, 2, [3, 4], [5, [6, 7]]]\n    >>> deep_reverse(lst)\n    >>> lst\n    [7, [6, 5], [4, 3], 2, 1]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    length = len(lst)\n    \n    for i in range(0, length // 2):\n        lst[i], lst[length - 1 - i] = lst[length - 1 - i], lst[i]\n    \n    for i in range(0, length):\n        if type(lst[i]) is list:\n            deep_reverse(lst[i])\n            \n    return None\n    \n    \ndef deep_len(lst: list):\n    \"\"\"Return the deep length of the list lst, which should consist of\n    simple values (not nested lists).\n    >>> deep_len([1, 2, 3])\n    3\n    >>> deep_len([1, [2, 3]])\n    3\n    >>> x = [[1, [1, 1]], 1, [1, 1]]\n    >>> deep_len(x)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    length = 0\n    \n    for i in range(0, len(lst)):\n        if type(lst[i]) is list:\n            length += deep_len(lst[i])\n            \n        else:\n            length "}
{"task_id": "task60", "completion": "    if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"fibonacci is a function that finds n-th fibonacci number\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef fib(n: int) -> int:\n    \"\"\"fib is a function that finds n-th fibonacci number\n    >>> fib(2)\n    1\n    >>> fib(6)\n    8\n    >>> fib(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_rec(n: int) -> int:\n    \"\"\"fib_rec is a recursive function that finds n-th fibonacci number\n    >>> fib_rec(2)\n    1\n    >>> fib_rec(6)\n    8\n    >>> fib_rec(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    return fib_rec(n - 1) + fib_rec(n - 2)\n\n\ndef fib_loop(n: int) -> int:\n    \"\"\"fib_loop is a loop function that finds n-th fibonacci number\n    >>> fib_loop(2)\n    1\n    >>> fib_loop(6)\n    8\n    >>> fib_loop(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    prev1, prev2 = 1, 1\n    for i in range(2, n):\n        curr = prev1 + prev2\n        prev1, prev2 = prev2, curr\n    return prev2\n\n\ndef fib_iter(n: int) -> int:\n    \"\"\"fib_iter is an iterative function that finds n-th fibonacci number\n    >>> fib_iter(2)\n    1\n    >>> fib_iter(6)\n    8\n    >>> fib_iter(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    prev1, prev2 = 1, 1\n    for i in range(2, n):\n        curr = prev1 + prev2\n        prev1, prev2 = prev2, curr\n    return prev2\n\n\ndef fib_loop_iter(n: int) -> int:\n    \"\"\"fib_loop_iter is a loop function that finds n-th fibonacci number\n    >>> fib_loop_iter(2)\n    1\n    >>> fib_loop_iter(6)\n    8\n    >>> fib_loop_iter(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    prev1, prev2 = 1, 1\n    for i in range(2, n):\n        curr = prev1 + prev2\n        prev1, prev2 = prev2, curr\n    return prev2\n\n\ndef fib_rec_iter(n: int) -> int:\n    \"\"\"fib_rec_iter is a recursive function that finds n-th fibonacci number\n    >>> fib_rec_iter(2)\n    1\n    >>> fib_rec_iter(6)\n    8\n    >>> fib_rec_iter(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    return fib_rec_iter(n - 1) + fib_rec_iter(n - 2)\n\n\ndef fib_memo(n: int) -> int:\n    \"\"\"fib_memo is a memo function that finds n-th fibonacci number\n    >>> fib_memo(2)\n    1\n    >>> fib_memo(6)\n    8\n    >>> fib_memo(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    memo = {1: 1, 2: 1}\n    for i in range(3, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n    return memo[n]\n\n\ndef fib_loop_memo(n: int) -> int:\n    \"\"\"fib_loop_memo is a loop function that finds n-th fibonacci number\n    >>> fib_loop_memo(2)\n    1\n    >>> fib_loop_memo(6)\n    8\n    >>> fib_loop_memo(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    memo = {1: 1, 2: 1}\n    for i in range(3, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n    return memo[n]\n\n\ndef fib_loop_memo_iter(n: int) -> int:\n    \"\"\"fib_loop_memo_iter is a loop function that finds n-th fibonacci number\n    >>> fib_loop_memo_iter(2)\n    1\n    >>> fib_loop_memo_iter(6)\n    8\n    >>> fib_loop_memo_iter(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    memo = {1: 1, 2: 1}\n    for i in range(3, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n    return memo[n]\n\n\ndef fib_memo_iter(n: int) -> int:\n    \"\"\"fib_memo_iter is a memo function that finds n-th fibonacci number\n    >>> fib_memo_iter(2)\n    1\n    >>> fib_memo_iter(6)\n    8\n    >>> fib_memo_iter(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    memo = {1: 1, 2: 1}\n    for i in range(3, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n    return memo[n]\n\n\ndef fib_loop_memo_iter_rec(n: int) -> int:\n    \"\"\"fib_loop_memo_iter_rec is a loop function that finds n-th fibonacci number\n    >>> fib_loop_memo_iter_rec(2)\n    1\n    >>> fib_loop_memo_iter_rec(6)\n    8\n    >>> fib_loop_memo_iter_rec(10)\n    55\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    memo "}
{"task_id": "task61", "completion": "    bracket_list = []\n    for char in brackets:\n        if char == \"(\":\n            bracket_list.append(char)\n        else:\n            if not bracket_list:\n                return False\n            bracket_list.pop()\n    return not bracket_list\n\ndef test_correct_bracketing():\n    \"\"\"tests for correct_bracketing.\"\"\"\n    from doctest import run_docstring_examples\n    run_docstring_examples(correct_bracketing, globals(), True)\n    \ntest_correct_bracketing()\n\n\ndef transpose(m):\n    \"\"\"Transpose matrix m.\"\"\"\n    return [list(row) for row in zip(*m)]\n\n\ndef transpose_test():\n    \"\"\"tests transpose.\"\"\"\n    m = [\n        [1, 2, 3],\n        [4, 5, 6],\n    ]\n    mt = transpose(m)\n    mt2 = transpose(mt)\n    assert m == mt2, \"Transpose is not commutative\"\n    assert mt != m, \"Transpose is self-inverse\"\n    print(\"transpose tests pass\")\n\n\ntranspose_test()\n\n\ndef transpose_matrix(m):\n    \"\"\"Transpose matrix m.\"\"\"\n    n = len(m[0])\n    return transpose([row[:n] for row in transpose(m)])\n\n\ndef transpose_matrix_test():\n    \"\"\"tests transpose_matrix.\"\"\"\n    from doctest import run_docstring_examples\n    run_docstring_examples(transpose_matrix, globals(), True)\n    print(\"transpose_matrix tests pass\")\n\n\ntranspose_matrix_test()\n\n\ndef transpose_matrix(m):\n    \"\"\"Transpose matrix m.\"\"\"\n    n = len(m[0])\n    return transpose([row[:n] for row in transpose(m)])\n\n\ndef transpose_matrix_test():\n    \"\"\"tests transpose_matrix.\"\"\"\n    from doctest import run_docstring_examples\n    run_docstring_examples(transpose_matrix, globals(), True)\n    print(\"transpose_matrix tests pass\")\n\n\ntranspose_matrix_test()\n\n\ndef transpose_matrix(m):\n    \"\"\"Transpose matrix m.\"\"\"\n    n = len(m[0])\n    return transpose([row[:n] for row in transpose(m)])\n\n\ndef transpose_matrix_test():\n    \"\"\"tests transpose_matrix.\"\"\"\n    from doctest import run_docstring_examples\n    run_docstring_examples(transpose_matrix, globals(), True)\n    print(\"transpose_matrix tests pass\")\n\n\ntranspose_matrix_test()\n\n\"\"\"transpose matrix\"\"\"\n\ndef transpose_matrix(m):\n    \"\"\"Transpose matrix m.\"\"\"\n    n = len(m[0])\n    return transpose([row[:n] for row in transpose(m)])\n\n\ndef transpose_matrix_test():\n    \"\"\"tests transpose_matrix.\"\"\"\n    from doctest import run_docstring_examples\n    run_docstring_examples(transpose_matrix, globals(), True)\n    print(\"transpose_matrix tests pass\")\n\n\ntranspose_matrix_test()\n\n\"\"\"transpose matrix\"\"\"\n\ndef transpose_matrix(m):\n    \"\"\"Transpose matrix m.\"\"\"\n    n "}
{"task_id": "task62", "completion": "    return [i*(xs.index(i)+1) for i in xs[1:]]\n    \ndef derivative2(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative2([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative2([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i in range(1, len(xs)):\n        derivs.append(xs[i]*(i+1))\n    return derivs\n\ndef derivative3(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative3([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative3([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative4(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative4([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative4([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative5(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative5([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative5([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative6(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative6([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative6([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative7(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative7([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative7([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative8(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative8([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative8([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative9(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative9([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative9([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative10(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative10([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative10([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative11(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative11([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative11([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivs = []\n    for i, coef in enumerate(xs):\n        derivs.append(coef * (i+1))\n    return derivs\n    \ndef derivative12(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + "}
{"task_id": "task63", "completion": "    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return "}
{"task_id": "task64", "completion": "    count = 0\n    vowels = \"aeiou\"\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"aeiou\") == 5\n    assert vowels_count(\"aeiouAEIOU\") == 10\n\n    print(\"All test cases passed!\")\n\ntest_vowels_count()\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = \"aeiou\"\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"aeiou\") == 5\n    assert vowels_count(\"aeiouAEIOU\") == 10\n\n    print(\"All test cases passed!\")\n\ntest_vowels_count()\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = \"aeiou\"\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"aeiou\") == 5\n    assert vowels_count(\"aeiouAEIOU\") == 10\n\n    print(\"All test cases passed!\")\n\ntest_vowels_count()\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = \"aeiou\"\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"aeiou\") == 5\n    assert vowels_count(\"aeiouAEIOU\") == 10\n\n    print(\"All test cases passed!\")\n\ntest_vowels_count()\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Exam"}
{"task_id": "task65", "completion": "    str_x = str(x)\n    if shift > len(str_x):\n        return ''.join(reversed(str_x))\n    shifted_str_x = str_x[-shift:] + str_x[:-shift]\n    return shifted_str_x\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of digits of integer n.\n    >>> sum_of_digits(1)\n    1\n    >>> sum_of_digits(10)\n    1\n    >>> sum_of_digits(42)\n    10\n    >>> sum_of_digits(1234)\n    10\n    >>> sum_of_digits(999)\n    27\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n    \ndef has_digit(n, k):\n    \"\"\"Return whether digit k appears at least once in integer n.\n    >>> has_digit(10, 1)\n    True\n    >>> has_digit(1234, 0)\n    False\n    >>> has_digit(1234, 2)\n    True\n    >>> has_digit(1234, 4)\n    False\n    >>> has_digit(1234567, 3)\n    True\n    >>> has_digit(12, 0)\n    False\n    \"\"\"\n    return any(int(digit) == k for digit in str(n))\n    \ndef factorial_digit_sum(n):\n    \"\"\"Return the sum of digits of n factorial.\n    >>> factorial_digit_sum(1)\n    1\n    >>> factorial_digit_sum(2)\n    2\n    >>> factorial_digit_sum(3)\n    6\n    >>> factorial_digit_sum(10)\n    6\n    >>> factorial_digit_sum(100)\n    6\n    \"\"\"\n    return sum(int(digit) for digit in str(factorial(n)))\n    \ndef hailstone(n):\n    \"\"\"Print the hailstone sequence starting at n and return its\n    length.\n    >>> a = hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> a\n    7\n    \"\"\"\n    \"\"\"\n    >>> hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    >>> hailstone(100)\n    100\n    50\n    25\n    12\n    6\n    3\n    1\n    \"\"\"\n    seq_length = 1\n    while n != 1:\n        print(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        seq_length += 1\n    print(1)\n    return seq_length\n    \ndef is_prime(n):\n    \"\"\"Return True if n is a prime number and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(199)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_up_to(n):\n    \"\"\"Return a list of all primes up to and including n.\n    >>> prime_up_to(6)\n    [2, 3, 5]\n    >>> prime_up_to(1)\n    []\n    \"\"\"\n    prime_list = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef is_square(n):\n    \"\"\"Return True if n "}
{"task_id": "task66", "completion": "    def asciisum(ch):\n        return ord(ch)\n    \n    def asciisum_upper(ch):\n        return asciisum(ch) if asciisum(ch) < 91 else asciisum(ch) - 32\n    \n    def asciisum_lower(ch):\n        return asciisum(ch) if asciisum(ch) > 96 else asciisum(ch) + 32\n    \n    def asciisum_not_letter(ch):\n        return asciisum(ch) if asciisum(ch) < 91 or asciisum(ch) > 96 else asciisum(ch) \n    \n    return sum([asciisum_lower(ch) for ch in s if asciisum_not_letter(ch) != asciisum(ch)])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    def asciisum(ch):\n        return ord(ch)\n    \n    def asciisum_upper(ch):\n        return asciisum(ch) if asciisum(ch) < 91 else asciisum(ch) - 32\n    \n    def asciisum_lower(ch):\n        return asciisum(ch) if asciisum(ch) > 96 else asciisum(ch) + 32\n    \n    def asciisum_not_letter(ch):\n        return asciisum(ch) if asciisum(ch) < 91 or asciisum(ch) > 96 else asciisum(ch) \n    \n    return sum([asciisum_lower(ch) for ch in s if asciisum_not_letter(ch) != asciisum(ch)])\n  \n  \n  def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    def asciisum(ch):\n        return ord(ch)\n    \n    def asciisum_upper(ch):\n        return asciisum(ch) if asciisum(ch) < 91 else asciisum(ch) - 32\n    \n    def asciisum_lower(ch):\n        return asciisum(ch) if asciisum(ch) > 96 else asciisum(ch) + 32\n    \n    def asciisum_not_letter(ch):\n        return asciisum(ch) if asciisum(ch) < 91 or asciisum(ch) > 96 else asciisum(ch) \n    \n    return sum([asciisum_lower(ch) for ch in s if asciisum_not_letter(ch) != asciisum(ch)])\n  \n  \n  \n  def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    def asciisum(ch):\n        return or"}
{"task_id": "task67", "completion": "    # Write your code here\n    total_num=0\n    for i in s.split():\n        if i in n:\n            total_num+=int(i)\n    return total_num - (n[\"apples\"] + n[\"oranges\"])\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))  \nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "task68", "completion": ""}
{"task_id": "task69", "completion": "    \n    maximum = lst[0]\n    for i in lst:\n        if i > maximum:\n            maximum = i\n            \n    highest_frequency = None\n    \n    for i in range(1, maximum + 1):\n        frequency = 0\n        for j in lst:\n            if j == i:\n                frequency += 1\n        if frequency >= i and i > highest_frequency:\n            highest_frequency = i\n            \n    if highest_frequency is not None:\n        return highest_frequency\n    return -1\n\ndef test_search():\n    '''\n    Test function for search()\n    '''\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n\nif __name__ == '__main__':\n    test_search()\n\n# %%\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    maximum = lst[0]\n    for i in lst:\n        if i > maximum:\n            maximum = i\n            \n    highest_frequency = None\n    \n    for i in range(1, maximum + 1):\n        frequency = 0\n        for j in lst:\n            if j == i:\n                frequency += 1\n        if frequency >= i and i > highest_frequency:\n            highest_frequency = i\n            \n    if highest_frequency is not None:\n        return highest_frequency\n    return -1\n\ndef test_search():\n    '''\n    Test function for search()\n    '''\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n\nif __name__ == '__main__':\n    test_search()\n\n# %%\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    maximum = lst[0]\n    for i in lst:\n        if i > maximum:\n            maximum = i\n            \n    highest_frequency = None\n    \n    for i in range(1, maximum + 1):\n        frequency = 0\n        for j in lst:\n            if j "}
{"task_id": "task70", "completion": "    result = []\n    min_value = min(lst)\n    max_value = max(lst)\n    for i in range(1, len(lst), 2):\n        result.append(min_value)\n        result.append(max_value)\n        min_value, max_value = max_value, min_value\n    return result + lst[len(lst) % 2:]\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    return result + lst\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lst.sort()\n    while lst:\n        result.extend([lst.pop(0), lst.pop()])\n    return result\n\n\ndef strange_sort_list_4(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        lst.sort()\n        result.extend([lst.pop(0), lst.pop()])\n    return result\n\n\ndef strange_sort_list_5(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lst.sort()\n    while lst:\n        result.extend([lst.pop(0), lst.pop()])\n    return result\n\n\ndef strange_sort_list_6(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.extend(sorted(lst, reverse=True)[:2])\n        lst.remove(min(lst))\n    return result\n\n\ndef strange_sort_list_7(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.extend(sorted(lst, reverse=True)[:2])\n        lst.remove(min(lst)"}
{"task_id": "task71", "completion": "    # YOUR CODE HERE\n    if a+b>c and a+c>b and b+c>a:\n        p=a+b+c\n        s=p/2\n        area=(s*(s-a)*(s-b)*(s-c))**(1/2)\n        return round(area,2)\n    else:\n        return -1\n        \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\n\ndef word_search(doc_list, keyword):\n    '''\n    Takes a list of documents (each document is a string) and a keyword. \n    Returns list of the index values into the original list for all documents \n    containing the keyword.\n\n    Example:\n    doc_list = [\"The Learn Python Challenge Casino\", \"They bought a car\", \n                \"Casinoville\"]\n    >>> word_search(doc_list, 'casino')\n    >>> [0]\n    '''\n    # YOUR CODE HERE\n    l=[]\n    for i,doc in enumerate(doc_list):\n        words=doc.split()\n        for word in words:\n            if word.lower()==keyword.lower():\n                l.append(i)\n    return l\n            \nprint(word_search([\"The Learn Python Challenge Casino\", \"They bought a car\", \n                \"Casinoville\"], 'casino'))\n\ndef diamond(height):\n    \"\"\"Return a string that is the diamond of given height.\n\n    height is a positive even integer.  Return None if height is not even or less than zero.\n\n    Note: diamond(\"blue\") is None.\n\n    \"\"\"\n    # YOUR CODE HERE\n    if height%2==0 and height>0:\n        s=\"\"\n        for i in range(1,height+1):\n            if i%2==0:\n                s=s+(height-i)*\" \"\n            else:\n                s=s+(i-1)*\" \"\n                s=s+(\"#\"*i)\n            s=s+\"\\n\"\n        return s\n    else:\n        return None\n    \nprint(diamond(11))\n\ndef has_lucky_number(nums):\n    \"\"\"Return whether the given list of numbers is lucky. A lucky list contains\n    at least one number that is divisible by 7.\n    \"\"\"\n    # YOUR CODE HERE\n    for num in nums:\n        if num%7==0:\n            return True\n    return False\n\nprint(has_lucky_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\ndef word_search(documents, keyword):\n    \"\"\"\n    :param documents: A list of documents containing an arbitrary number of keywords.\n    :param keyword: A single keyword which may occur in any of the documents.\n    :return: A list of the index values into documents for all documents containing keyword.\n    \"\"\"\n    indices = []\n    # Iterate through the indices (document) and check if keyword occurs in the document.\n    for index, document in enumerate(documents):\n        words = document.split()\n        if keyword in words:\n            indices.append(index)\n    return indices\n\n\ndoc_list "}
{"task_id": "task72", "completion": "    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n    \n# Example usage\nresult = will_it_fly([1, 2], 5)\nprint(result)  # Output: True\n\nresult = will_it_fly([3, 2, 3], 1)\nprint(result)  # Output: False\n\nresult = will_it_fly([3, 2, 3], 9)\nprint(result)  # Output: True\n\nresult = will_it_fly([3], 5)\nprint(result)  # Output: True\n \n# Write a function that returns True if the object q will fly, and False otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\ndef will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n    \ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst[::-1] and sum(lst) <= w\n\ndef will_it_fly(lst, w):\n    return lst == lst["}
{"task_id": "task73", "completion": "    # Write your solution here!\n    # Write your solution here!\n    min_changes = 0\n    max_changes = len(arr)-1\n    for i in range(len(arr)//2):\n        if arr[i] != arr[max_changes-i]:\n            min_changes += 1\n    return min_changes\n    \n    \ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your solution here!\n    min_changes = 0\n    max_changes = len(arr)-1\n    for i in range(len(arr)//2):\n        if arr[i] != arr[max_changes-i]:\n            min_changes += 1\n    return min_changes\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your solution here!\n    min_changes = 0\n    max_changes = len(arr)-1\n    for i in range(len(arr)//2):\n        if arr[i] != arr[max_changes-i]:\n            min_changes += 1\n    return min_changes\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your solution here!\n    min_changes = 0\n    max_changes = len(arr)-1\n    for i in range(len(arr)//2):\n        if arr[i] != arr[max_changes-i]:\n            min_changes += 1\n    return min_changes\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your solution here!\n    min_changes = 0\n    max_changes "}
{"task_id": "task74", "completion": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n    \nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'Hi']\nprint(total_match(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hi', 'hi', 'admin', 'project']\nprint(total_match(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'hi', 'hi']\nprint(total_match(lst1, lst2))\n\nlst1 = ['4']\nlst2 = ['1', '2', '3', '4', '5']\nprint(total_match(lst1, lst2))\n\n\ndef total_match_1(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst_res = []\n    for i in range(0, min(len(lst1), len(lst2))):\n        lst_res.append(lst1[i])\n    return lst_res\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'Hi']\nprint(total_match_1(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hi', 'hi', 'admin', 'project']\nprint(total_match_1(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'hi', 'hi']\nprint(total_match_1(lst1, lst2))\n\nlst1 = ['4']\nlst2 = ['1', '2', '3', '4', '5']\nprint(total_match_1(lst1, lst2))\n\ndef total_match_2(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst_res = []\n    for i in range(0, len(lst1)):\n        lst_res.append(lst1[i])\n    return lst_res\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'Hi']\nprint(total_match_2(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hi', 'hi', 'admin', 'project']\nprint(total_match_2(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'hi', 'hi']\nprint(total_match_2(lst1, lst2))\n\nlst1 = ['4']\nlst2 = ['1', '2', '3', '4', '5']\nprint(total_match_2(lst1, lst2))\n\ndef total_match_3(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst_res = []\n    for i in range(0, min(len(lst1), len(lst2))):\n        lst_res.append(lst1[i])\n    return lst_res\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'Hi']\nprint(total_match_3(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hi', 'hi', 'admin', 'project']\nprint(total_match_3(lst1, "}
{"task_id": "task75", "completion": "    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if m % l == 0:\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a+1):\n        if a % i == 0:\n            k = i + 1\n            for j in range(1, k+1):\n                if k % j == 0:\n                    m = j + 1\n                    for l in range(1, m+1):\n                        if "}
{"task_id": "task76", "completion": "    return n ** int(x ** (1 / n)) == x\n\n\ndef solution(n):\n    \"\"\"\n    Given an array of n ints, you should create a new array that contains the\n    running minimum value from that array.\n    solution([3, 1, 2, 4, 5]) = [3, 1, 1, 2, 2]\n    solution([4, 5, 1, 1, 7, 2, 0]) = [4, 5, 1, 1, 1, 1, 0]\n    \"\"\"\n    r = [n[0]]\n    for i in n[1:]:\n        r.append(min(r[-1], i))\n    return r\n\n\ndef solution(st):\n    \"\"\"\n    Given a string of even length, consisting only of S and T,\n    output a string such that\n    - The first character of the string is S\n    - The second character of the string is T\n    - The third character of the string is S\n    - The fourth character of the string is T\n    - The fifth character of the string is S\n    - The sixth character of the string is T\n    etc...\n    \"\"\"\n    return st[::2] + st[1::2]\n\n\ndef solution(st):\n    \"\"\"\n    You are given a string, s, and two integers x and y.\n    Find a substring of s that starts at position x and ends at position y (\n    including x, excluding y).\n    The substring's size should be x-y+1.\n    The substring should contain exactly x letters and y letters, in order.\n    The substrings are not required to be contiguous.\n    \"\"\"\n    return st[x:y + 1]\n\n\ndef solution(st):\n    \"\"\"\n    You are given a string, st.\n    Find the first letter of st that is in st.\n    \"\"\"\n    for i in st:\n        if st.count(i) > 1:\n            return i\n\n\ndef solution(st):\n    \"\"\"\n    You are given a string, st.\n    Find the longest substring in st consisting of only one letter.\n    The substring can have as many letters as you like.\n    \"\"\"\n    l, m = '', ''\n    for i in st:\n        if i == m[-1]:\n            m += i\n        else:\n            if len(m) > len(l):\n                l = m\n            m = i\n    return l if len(l) > len(m) else m\n\n\ndef solution(st):\n    \"\"\"\n    You are given a string, st.\n    Find the longest substring in st consisting of only lowercase letters.\n    \"\"\"\n    m, l, i, j = '', '', 0, 0\n    while i < len(st) - 1:\n        if st[j] <= st[j + 1]:\n            m += st[j]\n        else:\n            if len(m) > len(l):\n                l = m\n            m = st[j]\n        j += 1\n        if j == len(st):\n            if len(m) > len(l):\n                l = m\n            m = ''\n            j = i + 1\n    return l\n\n\ndef solution(st):\n    \"\"\"\n    You are given a string, st.\n    Find the longest palindromic substring in st.\n    \"\"\"\n    l, i, j = '', 0, 0\n    while i < len(st) - 1:\n        if st[j] "}
{"task_id": "task77", "completion": "    if a == 0 or a == 1:\n        return True\n    else:\n        while a > 1:\n            a = a/2\n        return a == 1\n\n# def iscube(n):\n#     return n**3 % 1 == 0\n\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n\n\ndef is_cube(n):\n    \"\"\"\n    Determine if a given number is a perfect cube.\n\n    Parameters\n    ----------\n    n : int\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    cubes = [i**3 for i in range(n)]\n    if n in cubes:\n        return True\n    return False\n    \n# def is_cube(n):\n#     \"\"\"\n#     Determine if a given number is a perfect cube.\n\n#     Parameters\n#     ----------\n#     n : int\n\n#     Returns\n#     -------\n#     bool\n\n#     \"\"\"\n#     i = 0\n#     while i < n:\n#         if n**(1/3) % 1 == 0:\n#             return True\n#         else:\n#             i += 1\n#     return False\n\ndef is_cube(n):\n    \"\"\"\n    Determine if a given number is a perfect cube.\n\n    Parameters\n    ----------\n    n : int\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    i = 0\n    while i < n**(1/3):\n        if n**(1/3) % 1 == 0:\n            return True\n        else:\n            i += 1\n    return False\n    \nprint(is_cube(27))\nprint(is_cube(-27))\nprint(is_cube(1000000))\nprint(is_cube(1))\nprint(is_cube(9))\nprint(is_cube(216))\nprint(is_cube(4))\nprint(is_cube(8))\nprint(is_cube(999999))\nprint(is_cube(1000000000000000))\nprint(is_cube(2))\nprint(is_cube(0))\nprint(is_cube(125))\nprint(is_cube(14))\nprint(is_cube(5))\nprint(is_cube(-1))\nprint(is_cube(27))\nprint(is_cube(1000000000000000))\nprint(is_cube(1000000000000001))\nprint(is_cube(1000000000000000))\nprint(is_cube(-1000000000000000))\nprint(is_cube(1000000000000000))\nprint(is_cube(0))\nprint(is_cube(-1000000000000001))\nprint(is_cube(-1000000000000000))\nprint(is_cube(80))\nprint(is_cube(0))\nprint(is_cube(0.125))\nprint(is_cube(27))\nprint(is_cube(1))\nprint(is_cube(1000000000000000))\nprint(is_cube(10000000000000000))\nprint(is_cube(0.0000000000000000000000000000000"}
{"task_id": "task78", "completion": "    num_primes=0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    num = num.upper()\n    for i in num:\n        for j in primes:\n            if int(i,16) == j:\n                num_primes +=1\n    return num_primes\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num_primes=0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    num = num.upper()\n    for i in num:\n        for j in primes:\n            if int(i,16) == j:\n                num_primes +=1\n    return num_primes\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num_primes=0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    num = num.upper()\n    for i in num:\n        for j in primes:\n            if int(i,16) == j:\n                num_primes +=1\n    return num_primes\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num_primes=0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    num = num.upper()\n    for i in num:\n        for j in primes:\n            if int(i,16) == j:\n                num_primes +=1\n    return num_primes\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num_primes=0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    num "}
{"task_id": "task79", "completion": "    if type(decimal) is not int:\n        raise TypeError(\"Input decimal is not an integer\")\n\n    if decimal < 0:\n        raise ValueError(\"Input decimal is not a valid number\")\n\n    binary_string = \"\"\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal = decimal // 2\n\n    return f\"db{binary_string}db\"\n\n\ndef decimal_to_binary_recursive(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if type(decimal) is not int:\n        raise TypeError(\"Input decimal is not an integer\")\n\n    if decimal < 0:\n        raise ValueError(\"Input decimal is not a valid number\")\n\n    return binary_string\n\n\ndef decimal_to_binary_recursive(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if type(decimal) is not int:\n        raise TypeError(\"Input decimal is not an integer\")\n\n    if decimal < 0:\n        raise ValueError(\"Input decimal is not a valid number\")\n\n    if decimal == 0:\n        return \"db0db\"\n\n    binary_string = decimal_to_binary_recursive(decimal // 2)\n\n    return str(decimal % 2) + binary_string\n\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if type(decimal) is not int:\n        raise TypeError(\"Input decimal is not an integer\")\n\n    if decimal < 0:\n        raise ValueError(\"Input decimal is not a valid number\")\n\n    binary_string = \"\"\n    while decimal "}
{"task_id": "task80", "completion": "    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == len(s)\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) "}
{"task_id": "task81", "completion": ""}
{"task_id": "task82", "completion": "    def is_prime(num):\n        \"\"\"Returns true if num is prime, false otherwise\n        >>> is_prime(1)\n        False\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        True\n        >>> is_prime(13)\n        True\n        >>> is_prime(19)\n        True\n        \"\"\"\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    if len(string) not in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        return False\n    elif is_prime(len(string)):\n        return True\n    return False\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\n\ndef fibonacci(n):\n    \"\"\"Write a function that takes a number and returns the nth fibonacci number\n    (that is, the sum of the nth and nth-1 fibonacci numbers).\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1 or n == 2:\n        return 1\n    fib = 1\n    next = 1\n    for i in range(2, n):\n        fib, next = next, fib + next\n    return next\nprint(fibonacci(1))\nprint(fibonacci(2))\nprint(fibonacci(3))\nprint(fibonacci(4))\n\ndef fibonacci_list(n):\n    \"\"\"Write a function that takes a number and returns a list of the nth fibonacci\n    numbers.\n    >>> fibonacci_list(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    fib_list = [1, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list\nprint(fibonacci_list(10))\n\ndef fibonacci_generator(n):\n    \"\"\"Write a generator function that takes a number and returns a generator\n    object that sequentially returns the nth fibonacci number.\n    >>> fib_gen = fibonacci_generator(10)\n    >>> next(fib_gen)\n    1\n    >>> next(fib_gen)\n    1\n    >>> next(fib_gen)\n    2\n    >>> next(fib_gen)\n    3\n    >>> next(fib_gen)\n    5\n    >>> next(fib_gen)\n    8\n    \"\"\"\n    fib = 1\n    next_fib = 1\n    for i in range(n):\n        yield fib\n        fib, next_fib = next_fib, fib + next_fib\nprint(fibonacci_generator(10))\n\ndef palindrome(s):\n    \"\"\"Write a function that takes a string and returns True if the string is a\n    palindrome or False if it is not. A palindrome is a word that is spelled\n    the same forwards as backwards, like 'racecar' or 'radar'.\n    palindrome('racecar') == True\n    palindrome('orange') == False\n    palindrome('madam') == True\n    palindrome('banana') == False\n    palindrome('abcdcba') == True\n    \"\"\"\n    if s == s[::-1]:\n        return True\n    else:\n        return False\nprint(palindrome('racecar'))\nprint(palindrome('orange'))\nprint(palindrome('madam'))\nprint(palindrome('banana'))\nprint(palindrome('abcdcba'))\n\ndef reverse_string(s):\n    \"\"\"Write a function that takes a string and returns a reversed version of\n    that string.\n    reverse_string('racecar') == 'racecar'\n    reverse_string('orange') == 'eragnorange'\n    reverse_string('madam') == 'madam'\n    reverse_string('banana') == 'ananab'\n    \"\"\"\n    return s["}
{"task_id": "task83", "completion": "    return 0\n\ndef nth_fibonacci(n):\n    \"\"\"\n    Compute the nth Fibonacci number.\n    \"\"\"\n    return 0\n\ndef fibonacci_sum(n):\n    \"\"\"\n    Return the sum of the Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef nth_fib_prime(n):\n    \"\"\"\n    Return the nth prime number whose Fibonacci value is not larger than n.\n    \"\"\"\n    return 0\n\ndef nth_fib_prime_sum(n):\n    \"\"\"\n    Return the sum of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef nth_fib_prime_factor(n):\n    \"\"\"\n    Compute the nth prime number whose Fibonacci value is not larger than n.\n    \"\"\"\n    return 0\n\ndef nth_fib_prime_factor_sum(n):\n    \"\"\"\n    Return the sum of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef nth_fib_prime_factor_sum_product(n):\n    \"\"\"\n    Compute the product of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef nth_fib_prime_factor_sum_product_sum(n):\n    \"\"\"\n    Return the sum of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef fib_prime_factor_sum_product_sum(n):\n    \"\"\"\n    Compute the sum of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef fib_prime_factor_sum_product_product(n):\n    \"\"\"\n    Return the product of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n\ndef fib_prime_factor_sum_product_product_sum(n):\n    \"\"\"\n    Return the sum of the prime Fibonacci numbers whose values do not exceed n.\n    \"\"\"\n    return 0\n"}
{"task_id": "task84", "completion": "    binary = bin(N)[2:]\n    result = 0\n    for i in binary:\n        result += int(i)\n    return str(result)\n\ndef solution(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    result = 0\n    for i in binary:\n        result += int(i)\n    return result\n\ndef solution(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    result = 0\n    for i in binary:\n        result += int(i)\n    return result\n\ndef solution(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    result = 0\n    for i in binary:\n        result += int(i)\n    return result\n\ndef solution(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    result = 0\n    for i in binary:\n        result += int(i)\n    return result\n\ndef solution(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    result = 0\n    for i in binary:\n        result += "}
{"task_id": "task85", "completion": "    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[::2])\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) "}
{"task_id": "task86", "completion": "    pass\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    pass\n\n\ndef is_permutation(s, t):\n    \"\"\"\n    Write a function that takes two strings s and t and returns True if t is a\n    permutation of s, False if not.\n    Permutation of a string is a string where all characters in it are in the\n    same order as in the original string.\n    You can assume that t is a permutaion of s or s is a permutaion of t.\n    For example:\n    is_permutation('ab', 'ba') returns True\n    is_permutation('ab', 'bb') returns False\n    is_permutation('aabb', 'bbaaa') returns True\n    is_permutation('aabb', 'abbaa') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if not. A pangram is a string where all alphabets are present in it.\n    Note: You should lowercase the alphabets in the string.\n    For example:\n    is_pangram('abcdefghijklmnopqrstuvwxyz') returns True\n    is_pangram('aefghjhiklmnopqrstuvwxyz') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if not. A pangram is a string where all alphabets are present in it.\n    Note: You should lowercase the alphabets in the string.\n    For example:\n    is_pangram('abcdefghijklmnopqrstuvwxyz') returns True\n    is_pangram('aefghjhiklmnopqrstuvwxyz') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if not. A pangram is a string where all alphabets are present in it.\n    Note: You should lowercase the alphabets in the string.\n    For example:\n    is_pangram('abcdefghijklmnopqrstuvwxyz') returns True\n    is_pangram('aefghjhiklmnopqrstuvwxyz') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if not. A pangram is a string where all alphabets are present in it.\n    Note: You should lowercase the alphabets in the string.\n    For example:\n    is_pangram('abcdefghijklmnopqrstuvwxyz') returns True\n    is_pangram('aefghjhiklmnopqrstuvwxyz') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if not. A pangram is a string where all alphabets are present in it.\n    Note: You should lowercase the alphabets in the string.\n    For example:\n    is_pangram('abcdefghijklmnopqrstuvwxyz') returns True\n    is_pangram('aefghjhiklmnopqrstuvwxyz') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if not. A pangram is a string where all alphabets are present in it.\n    Note: You should lowercase the alphabets in the string.\n    For example:\n    is_pangram('abcdefghijklmnopqrstuvwxyz') returns True\n    is_pangram('aefghjhiklmnopqrstuvwxyz') returns False\n    \"\"\"\n    pass\n\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False if "}
{"task_id": "task87", "completion": "    ans = []\n    for i, lst in enumerate(lst):\n        for j, num in enumerate(lst):\n            if num == x:\n                ans.append((i, j))\n    return sorted(ans, key=lambda tup: (tup[0], tup[1]), reverse=True)\n\n\ndef get_rows_and_columns(lst):\n    \"\"\"\n    Given lst, return a list of lists, in which\n    the row numbers are replaced by the number\n    of columns in that row, and the column numbers\n    are replaced by the number of rows in that column.\n    You should not mutate the input lst.\n    \n    Example:\n    get_rows_and_columns([\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ]) == [\n      [1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1]\n    ]\n    get_rows_and_columns([\n      [1],\n      [1, 2],\n      [1, 2, 3],\n      [1, 2, 3, 4],\n      [1, 2, 3, 4, 5],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6, 7],\n      [1, 2, 3, 4, 5, 6, 7, 8],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ]) == [\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ]\n    \"\"\"\n    ans = []\n    rows, cols = len(lst), len(lst[0])\n    for i in range(rows):\n        lst_row = []\n        for j in range(cols):\n            lst_row.append(len(lst[j]))\n        ans.append(lst_row)\n    return ans\n    \ndef get_spiral_order(lst):\n    \"\"\"\n    Given lst, return a list of ints in spiral order.\n    You may assume that lst is well-formed and rectangular.\n    \n    Examples:\n    get_spiral_order([\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ]) == [1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]\n    get_spiral_order([\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ]) == [1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]\n    \"\"\"\n    ans = []\n    rows, cols = len(lst), len(lst[0])\n    up, left, down, right = 0, 0, rows - 1, cols - 1\n    while True:\n        if left > right or up > down:\n            break\n        for i in range(left, right + 1):\n            ans.append(lst[up][i])\n        for i in range(up + 1, down + 1):\n            ans.append(lst[i][right])\n        if up == down:\n            break\n        for i in range(right - 1, left - 1, -1):\n            ans.append(lst[down][i])\n        for i in range(down - 1, up, -1):\n            ans.append(lst[i][left])\n        left += 1\n        right -= 1\n        up += 1\n        down -= 1\n    return ans\n\n\ndef get_spiral_order_alt(lst):\n    \"\"\"\n    Given lst, return a list of ints in spiral order.\n    You may assume that lst is well-formed and rectangular.\n    \n    Examples:\n    get_spiral_order([\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ]) == [1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]\n    get_spiral_order([\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ]) == [1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]\n    \"\"\"\n    ans = []\n    rows, cols = len(lst), len(lst[0])\n    up, left, down, right = 0, 0, rows - 1, cols - 1\n    while True:\n        if left > right or up > down:\n            break\n        for i in range(left, right + 1):\n            ans.append(lst[up][i])\n        for i in range(up + 1, down + 1):\n            ans.append(lst[i][right])\n        if up == down:\n            break\n        for i in range(right - 1, left - 1, -1):\n            ans.append(lst[down][i])\n        for i in range(down - 1, up, -1):\n            ans.append(lst[i][left])\n        left += 1\n        right -= 1\n        up += 1\n        down -= 1\n    return ans\ndef transpose(lst):\n    \"\"\"\n    Given lst, return a transposed version of it.\n    You may not use nested lists.\n    You may not wrap Python's list type.\n    \n    >>> transpose([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose([[1], [2], [3]])\n    [[1], [2], [3]]\n    \"\"\"\n    return [[lst[j][i] for j in range(len(lst))] for i in range(len(lst[0]))]\n    \ndef transpose_alt(lst):\n    \"\"\"\n    Given lst, return a transposed version of it.\n    You may not use nested lists.\n    You may not wrap Python's list type.\n    \n    >>> transpose([[1, 2, 3], [4, 5, 6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose([[1], [2], [3]])\n    [[1], [2], [3]]\n    \"\"\"\n    return [[lst[i][j] for i in range(len(lst))] for j in range(len(lst[0])"}
{"task_id": "task88", "completion": "    sorted_array = list(array)\n    for i in range(len(sorted_array) - 1):\n        for j in range(0, len(sorted_array) - i - 1):\n            if sorted_array[j] > sorted_array[j + 1]:\n                temp = sorted_array[j]\n                sorted_array[j] = sorted_array[j + 1]\n                sorted_array[j + 1] = temp\n    return sorted_array\n\n\ndef sort_by_parity(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_by_parity([]) => []\n    * sort_by_parity([5]) => [5]\n    * sort_by_parity([2, 4, 3, 0, 1, 5]) => [2, 4, 3, 0, 1, 5]\n    * sort_by_parity([2, 4, 3, 0, 1, 5, 6]) => [6, 4, 3, 0, 1, 2, 5]\n    * sort_by_parity([2, 4, 3, 0, 1, 5, 6, 7]) => [6, 4, 3, 0, 1, 2, 5, 7]\n    \"\"\"\n    sorted_array = list(array)\n    odd_array, even_array = [], []\n    for i in sorted_array:\n        if i % 2 == 0:\n            even_array.append(i)\n        else:\n            odd_array.append(i)\n\n    for i in range(len(sorted_array)):\n        if i % 2 == 0:\n            sorted_array[i] = even_array[0]\n            even_array.pop(0)\n        else:\n            sorted_array[i] = odd_array[0]\n            odd_array.pop(0)\n\n    return sorted_array\n\n\ndef sort_by_parity_two_pointers(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_by_parity_two_pointers([]) => []\n    * sort_by_parity_two_pointers([5]) => [5]\n    * sort_by_parity_two_pointers([2, 4, 3, 0, 1, 5]) => [2, 4, 3, 0, 1, 5]\n    * sort_by_parity_two_pointers([2, 4, 3, 0, 1, 5, 6]) => [6, 4, 3, 0, 1, 2, 5]\n    * sort_by_parity_two_pointers([2, 4, 3, 0, 1, 5, 6, 7]) => [6, 4, 3, 0, 1, 2, 5, 7]\n    \"\"\"\n    sorted_array = list(array)\n    left, right = 0, len(sorted_array) - 1\n    while left < right:\n        if sorted_array[left] % 2 == 0:\n            left += 1\n        elif sorted_array[right] % 2 != 0:\n            right -= 1\n        else:\n            sorted_array[left], sorted_array[right] = sorted_array[right], sorted_array[left]\n            left += 1\n            right -= 1\n    return sorted_array\n\n\ndef sort_by_parity_pointers_and_partition_point(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_by_parity_pointers_and_partition_point([]) => []\n    * sort_by_parity_pointers_and_partition_point([5]) => [5]\n    * sort_by_parity_pointers_and_partition_point([2, 4, 3, 0, 1, 5]) => [2, 4, 3, 0, 1, 5]\n    * sort_by_parity_pointers_and_partition_point([2, 4, 3, 0, 1, 5, 6]) => [6, 4, 3, 0, 1, 2, 5]\n    * sort_by_parity_pointers_and_partition_point([2, 4, 3, 0, 1, 5, 6, 7]) => [6, 4, 3, 0, 1, 2, 5, 7]\n    \"\"\"\n    sorted_array = list(array)\n    left, right = 0, 0\n    while right < len(sorted_array) and sorted_array[right] % 2 "}
{"task_id": "task89", "completion": "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypt_string = \"\"\n    \n    for c in s:\n        if c in alphabet:\n            letter_position = alphabet.index(c)\n            encrypt_string = encrypt_string + alphabet[letter_position - 2]\n        else:\n            encrypt_string = encrypt_string + c\n    \n    return encrypt_string\n\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))\nprint(encrypt('aaaaa'))\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    decrypt_string = \"\"\n    \n    for c in s:\n        if c in alphabet:\n            letter_position = alphabet.index(c)\n            decrypt_string = decrypt_string + alphabet[letter_position + 2]\n        else:\n            decrypt_string = decrypt_string + c\n    \n    return decrypt_string\n\nprint(decrypt('lm'))\nprint(decrypt('ewhjklnop'))\nprint(decrypt('kj'))\nprint(decrypt('ix'))\nprint(decrypt('aaaaa'))\n\ndef is_symmetric(s):\n    \"\"\"Create a function is_symmetric that takes a string as an argument and\n    returns True if the string is a mirror image of itself. \n    Otherwise, it returns False.\"\"\"\n    \n    mirror_image = \"\"\n    \n    for c in s:\n        if c == \"a\":\n            mirror_image = mirror_image + \"z\"\n        elif c == \"b\":\n            mirror_image = mirror_image + \"y\"\n        elif c == \"c\":\n            mirror_image = mirror_image + \"x\"\n        elif c == \"d\":\n            mirror_image = mirror_image + \"w\"\n        elif c == \"e\":\n            mirror_image = mirror_image + \"v\"\n        elif c == \"f\":\n            mirror_image = mirro"}
{"task_id": "task90", "completion": "    lst.sort()\n    smallest = lst[0]\n    smallest_lst = []\n    for i in lst:\n        if i != smallest:\n            smallest_lst.append(i)\n    smallest_lst.sort()\n    if len(smallest_lst) > 1:\n        return smallest_lst[1]\n    return None\n    \n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    lst.sort()\n    smallest = lst[0]\n    smallest_lst = []\n    for i in lst:\n        if i != smallest:\n            smallest_lst.append(i)\n    smallest_lst.sort()\n    if len(smallest_lst) > 1:\n        return smallest_lst[1]\n    return None\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    lst.sort()\n    smallest = lst[0]\n    smallest_lst = []\n    for i in lst:\n        if i != smallest:\n            smallest_lst.append(i)\n    smallest_lst.sort()\n    if len(smallest_lst) > 1:\n        return smallest_lst[1]\n    return None\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    lst.sort()\n    smallest = lst[0]\n    smallest_lst = []\n    for i in lst:\n        if i != smallest:\n            smallest_lst.append(i)\n    smallest_lst.sort()\n    if len(smallest_lst) > 1:\n        return smallest_lst[1]\n    return None\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    lst.sort()\n    smallest = lst[0]\n    smallest_lst = []\n    for i in lst:\n        if i != smallest:\n            smallest_lst.append(i)\n    smallest_lst.sort()\n    if len(smallest_lst) > 1:\n        return smallest_lst[1]\n    return None\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    lst.sort()\n    smallest = lst[0]\n    smallest_lst = []\n    for i in "}
{"task_id": "task91", "completion": "    count = 0\n    for i in range(len(S)):\n        if (S[i] == \"I\" and S[i+1].isupper()):\n            count += 1\n    return count\n    \nimport doctest\ndoctest.testmod(verbose=True)\n# doctest.testmod(verbose=True)\n# %%\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1].isupper():\n            count += 1\n    return count\n    \nimport doctest\ndoctest.testmod(verbose=True)\n# doctest.testmod(verbose=True)\n# %%\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1].isupper():\n            count += 1\n    return count\n    \nimport doctest\ndoctest.testmod(verbose=True)\n# doctest.testmod(verbose=True)\n# %%\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1].isupper():\n            count += 1\n    return count\n    \nimport doctest\ndoctest.testmod(verbose=True)\n# doctest.testmod(verbose=True)\n# %%\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1].isupper():\n            count += 1\n    return count\n    \nimport doctest\ndoctest.testmod(verbose=True)\n# doctest.testmod(verbose=True)\n# %%\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if "}
{"task_id": "task92", "completion": ""}
{"task_id": "task93", "completion": "    \n    vowels = \"aeiou\"\n    \n    new_message = message.replace(\"a\", \"A\").replace(\"e\", \"E\").replace(\"i\", \"I\").replace(\"o\", \"O\").replace(\"u\", \"U\")\n    \n    for i in range(len(new_message)):\n        if new_message[i] in vowels:\n            new_message = new_message[:i] + new_message[i+2] + new_message[i+1] + new_message[i+3:]\n            \n    return new_message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes an encoded message, and returns the \n    decoded message.\n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    vowels = \"aeiou\"\n    \n    new_message = message.replace(\"A\", \"a\").replace(\"E\", \"e\").replace(\"I\", \"i\").replace(\"O\", \"o\").replace(\"U\", \"u\")\n    \n    for i in range(len(new_message)):\n        if new_message[i] in vowels:\n            new_message = new_message[:i] + new_message[i-2] + new_message[i-1] + new_message[i+1:]\n            \n    return new_message\n\ndef encode_message(message):\n    \"\"\"\n    Write a function that takes a message, and returns the encoded message\n    \n    Examples:\n    >>> encode_message('test')\n    'tgst'\n    >>> encode_message('This is a message')\n    'tHKS ks c mGSscgG'\n    \"\"\"\n    \n    vowels = \"aeiou\"\n    \n    new_message = message.replace(\"a\", \"A\").replace(\"e\", \"E\").replace(\"i\", \"I\").replace(\"o\", \"O\").replace(\"u\", \"U\")\n    \n    for i in range(len(new_message)):\n        if new_message[i] in vowels:\n            new_message = new_message[:i] + new_message[i-2] + new_message[i-1] + new_message[i+1:]\n            \n    return new_message.lower()\n\ndef decode_message(message):\n    \"\"\"\n    Write a function that takes an encoded message, and returns the decoded message\n    \n    Examples:\n    >>> decode_message('tgst')\n    'test'\n    >>> decode_message('tHKS ks c mGSscgG')\n    'This is a message'\n    \"\"\"\n    \n    vowels = \"aeiou\"\n    \n    new_message = message.replace(\"A\", \"a\").replace(\"E\", \"e\").replace(\"I\", \"i\").replace(\"O\", \"o\").replace(\"U\", \"u\")\n    \n    for i in range(len(new_message)):\n        if new_message[i] in vowels:\n            new_message = new_message[:i] + new_message[i+2] + new_message[i+1] + new_message[i+3:]\n            \n    return new_message.upper()\n\ndef encode_decode_message(message):\n    \"\"\"\n    Write a function that takes a message, and returns the encoded message.\n    \n    Examples:\n    >>> encode_decode_message('test')\n    'tgst'\n    >>> encode_decode_message('This is a message')\n    'tHKS ks c mGSscgG'\n    \"\"\"\n    \n    vowels = \"aeiou\"\n    \n    new_message = message.replace(\"a\", \"A\").replace(\"e\", \"E\").replace(\"i\", \"I\""}
{"task_id": "task94", "completion": "    \n    lst = list(filter(lambda x: x == x, lst))\n    lst = list(filter(lambda x: x == int(x), lst))\n    lst = list(map(int, lst))\n    lst = list(filter(lambda x: x == int(x), lst))\n\n    lst = list(filter(lambda x: x % 2 != 0, lst))\n    lst.insert(0, 2)\n\n    lst_prime = []\n    for i in lst:\n        lst_prime.append(True)\n    lst_prime.insert(0, False)\n    lst_prime.insert(1, False)\n    for i in range(2, lst_prime.__len__() - 1):\n        for j in range(i + 1, lst_prime.__len__() - 1):\n            if lst_prime[j] and lst_prime[i] % lst_prime[j] == 0:\n                lst_prime[j] = False\n\n    lst_prime.reverse()\n    lst_prime = lst_prime[2:]\n    lst_prime.reverse()\n\n    lst_prime = list(enumerate(lst_prime, start=2))\n    lst_prime.reverse()\n    lst_prime = dict(lst_prime)\n\n    lst_prime_keys = list(lst_prime.keys())\n    lst_prime_keys.reverse()\n    lst_prime_keys = lst_prime_keys[::-1]\n    lst_prime_values = list(lst_prime.values())\n    lst_prime_values.reverse()\n\n    lst_prime_values_copy = lst_prime_values[:]\n\n    lst_prime_sum = sum(lst_prime_values_copy)\n\n    lst_prime_keys_copy = lst_prime_keys[:]\n    lst_prime_values_copy = lst_prime_values[:]\n    lst_prime_values_copy.sort()\n    lst_prime_values_copy.reverse()\n\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = list(zip(lst_prime_keys_copy, lst_prime_values_copy))\n    lst_prime_keys_copy.sort()\n    lst_prime_keys_copy.reverse()\n\n    lst_prime_keys_copy = "}
{"task_id": "task95", "completion": "    if not dict:\n        return False\n    \n    case_keys = set()\n    for key in dict:\n        if type(key) == str:\n            case_keys.add(key.lower())\n            case_keys.add(key.upper())\n            \n    if len(case_keys) == 1:\n        return True\n    return False\n    \ndef get_avg_of_keys(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are of type float, \n    else return False. The function should return False is the given \n    dictionary is empty.\n    Examples:\n    get_avg_of_keys({\"a\":5.1, \"b\":6.2, \"c\":7.3}) should return True.\n    get_avg_of_keys({\"a\":5.1, 7:\"b\", 1.2:\"c\"}) should return False.\n    get_avg_of_keys({\"a\":5.1, \"b\":6.2, \"c\":7.3, \"d\":8.4}) should return True.\n    get_avg_of_keys({}) should return False.\n    \"\"\"\n    if not dict:\n        return False\n    \n    avg = 0\n    count = 0\n    for key, value in dict.items():\n        if type(value) == float:\n            avg += value\n            count += 1\n    \n    if avg/count == float(avg):\n        return True\n    return False\n    \ndef get_avg_of_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are of type float or \n    all values are of type integer, else return False. The function \n    should return False is the given dictionary is empty.\n    Examples:\n    get_avg_of_values({\"a\":5.1, \"b\":6.2, \"c\":7.3}) should return True.\n    get_avg_of_values({\"a\":5.1, 7:\"b\", 1.2:\"c\"}) should return False.\n    get_avg_of_values({\"a\":5.1, \"b\":6.2, \"c\":7.3, \"d\":8.4}) should return True.\n    get_avg_of_values({}) should return False.\n    \"\"\"\n    if not dict:\n        return False\n    \n    avg = 0\n    count = 0\n    for key, value in dict.items():\n        if type(value) == float or type(value) == int:\n            avg += value\n            count += 1\n    \n    if avg/count == float(avg):\n        return True\n    return False\n    \ndef get_avg_of_dict_pairs(dict):\n    \"\"\"\n    Given a dictionary, return True if all key-value pairs are of type\n    float or all key-value pairs are of type integer, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    get_avg_of_dict_pairs({\"a\":5.1, \"b\":6.2, \"c\":7.3}) should return True.\n    get_avg_of_dict_pairs({\"a\":5.1, 7:\"b\", 1.2:\"c\"}) should return False.\n    get_avg_of_dict_pairs({\"a\":5.1, \"b\":6.2, \"c\":7.3, \"d\":8.4}) should return True.\n    get_avg_of_dict_pairs({}) should return False.\n    \"\"\"\n    if not dict:\n        return False\n    \n    avg = 0\n    count = 0\n    for key, value in dict.items():\n        if type(key) == int or type(key) == float or type(value) == int or type(value) == "}
{"task_id": "task96", "completion": ""}
{"task_id": "task97", "completion": "    return None\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return None\n\nmultiply(19, 28)\n# %%\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return "}
{"task_id": "task98", "completion": "    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the string\n    for i, c in enumerate(s):\n        # Check if the character is an uppercase vowel\n        if c.isupper() and i % 2 == 0:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the final count\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # Should return 1\nprint(count_upper('abcdefg'))  # Should return 0\nprint(count_upper('dBBE'))  # Should return 0\nprint(count_upper('ABCDEF'))  # Should return 0\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the string\n    for i, c in enumerate(s):\n        # Check if the character is an uppercase vowel\n        if c.isupper() and i % 2 == 0:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the final count\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # Should return 1\nprint(count_upper('abcdefg'))  # Should return 0\nprint(count_upper('dBBE'))  # Should return 0\nprint(count_upper('ABCDEF'))  # Should return 0\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the string\n    for i, c in enumerate(s):\n        # Check if the character is an uppercase vowel\n        if c.isupper() and i % 2 == 0:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the final count\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # Should return 1\nprint(count_upper('abcdefg'))  # Should return 0\nprint(count_upper('dBBE'))  # Should return 0\nprint(count_upper('ABCDEF'))  # Should return 0\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the string\n    for i, c in enumerate(s):\n        # Check if the character is an uppercase vowel\n        if c.isupper() and i % 2 == 0:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the final count\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # Should return 1\nprint(count_upper('abcdefg'))  # Should return 0\nprint(count_upper('dBBE'"}
{"task_id": "task99", "completion": "    return int(value)\n\n\ndef has_valid_ip(ip):\n    '''\n    Create a function that validates an IPv4 address.\n\n    Examples\n    >>> has_valid_ip(\"127.0.0.1\")\n    True\n    >>> has_valid_ip(\"127.000.0.1\")\n    False\n    >>> has_valid_ip(\"127.0.0.1\")\n    True\n\n    Note:\n    There is no way of validating a complete IPv4 address.\n    You only need to validate whether a given string represents a valid IP address or not.\n    '''\n    try:\n        ip = int(ip)\n    except ValueError:\n        return False\n\n    if ip < 0 or ip > 255:\n        return False\n\n    return True\n\n\ndef fibonacci(n):\n    '''\n    Write a function that takes a number (n) as an argument and returns\n    the nth number in the fibonacci sequence.\n\n    Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n    '''\n    if n < 0:\n        return None\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n\n    return a\n\n\ndef get_middle_char(string):\n    '''\n    Create a function that takes a string as an argument and returns the middle character(s) of the string.\n    If the word's length is an even number, return the middle two characters.\n    '''\n    middle_index = int(len(string) / 2)\n    return string[middle_index - 1:middle_index + 1]\n\n\ndef get_middle_char_improved(string):\n    '''\n    Create a function that takes a string as an argument and returns the middle character(s) of the string.\n    If the word's length is an even number, return the middle two characters.\n    '''\n    middle_index = int(len(string) / 2)\n    return string[middle_index] if len(string) % 2 != 0 else string[middle_index - 1:middle_index + 1]\n\n\ndef has_valid_ip_address(ip):\n    '''\n    Create a function that validates an IPv4 address.\n\n    Examples\n    >>> has_valid_ip_address(\"127.0.0.1\")\n    True\n    >>> has_valid_ip_address(\"127.000.0.1\")\n    False\n    >>> has_valid_ip_address(\"127.0.0.1\")\n    True\n\n    Note:\n    There is no way of validating a complete IPv4 address.\n    You only need to validate whether a given string represents a valid IP address or not.\n    '''\n    return True if len(ip.split(\".\")) == 4 and all(\n        ip_segment.isdigit() and 0 <= int(ip_segment) <= 255 for ip_segment in ip.split(\".\")) else False\n\n\ndef get_longest_substring(string):\n    '''\n    Create a function that takes a string as an argument and returns the longest substring in it.\n    If there is more than one longest substring, return the first one that has the maximum length.\n    '''\n    longest_substring "}
{"task_id": "task100", "completion": "    lst = []\n    for i in range(n):\n        lst.append(2*i+1)\n    return lst\n\n\ndef pascal_triangle(n):\n    \"\"\"\n    Given a positive integer n, you have to return the n-th row of Pascal's triangle.\n    Pascal's triangle is a recursive system:\n    P(0, 0) = 1\n    P(1, 0) = P(1, 1) = 1\n    P(i, j) = P(i-1, j-1) + P(i-1, j)\n    You must use recursive implementation.\n\n    Examples:\n    >>> pascal_triangle(1)\n    [1, 1]\n    >>> pascal_triangle(2)\n    [1, 2, 1]\n    \"\"\"\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 1]\n    lst = []\n    for i in range(n+1):\n        if i == 0 or i == n:\n            lst.append(1)\n        else:\n            lst.append(pascal_triangle(n-1)[i-1] + pascal_triangle(n-1)[i])\n    return lst\n\n\ndef pascal_row(n):\n    \"\"\"\n    Given a positive integer n, you have to return the nth row of Pascal's triangle.\n    You must use recursive implementation.\n\n    Examples:\n    >>> pascal_row(0)\n    [1]\n    >>> pascal_row(1)\n    [1, 1]\n    \"\"\"\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 1]\n    lst = pascal_row(n-1)\n    lst.insert(0, 1)\n    lst.append(1)\n    for i in range(1, n):\n        lst[i] = lst[i] + lst[i-1]\n    return lst\n\n\ndef pascal_triangle_generator(n):\n    \"\"\"\n    Implement the generator pascal_triangle_generator(n) that will return Pascal's\n    triangle row by row, when iterating with for in.\n    \"\"\"\n    lst = []\n    for i in range(n+1):\n        if i == 0 or i == n:\n            lst.append(1)\n        else:\n            lst.append(pascal_triangle_generator(n-1)[i-1] + pascal_triangle_generator(n-1)[i])\n    yield lst\n    yield from pascal_triangle_generator(n-1)\n\n\ndef pascal_triangle_generator_2(n):\n    \"\"\"\n    Implement the generator pascal_triangle_generator(n) that will return Pascal's\n    triangle row by row, when iterating with for in.\n    \"\"\"\n    if n == 0:\n        yield [1]\n    else:\n        for lst in pascal_triangle_generator_2(n-1):\n            yield lst\n        lst = pascal_triangle_generator_2(n-1)\n        lst.insert(0, 1)\n        lst.append(1)\n        yield lst\n        yield from pascal_triangle_generator_2(n-1)\n\n\ndef pascal_triangle_generator_3(n):\n    \"\"\"\n    Implement the generator pascal_triangle_generator(n) that will return Pascal's\n    triangle row by row, when iterating with for in.\n    \"\"\"\n    yield [1]\n    yield from pascal_triangle_generator_3(n-1)\n    lst = pascal_triangle_generator_3(n-1)\n    lst.insert(0, 1)\n    lst.append(1)\n    yield lst\n    yield from pascal_triangle_generator_3(n-1)\n\n\ndef pascal_triangle_generator_4(n):\n    \"\"\"\n    Implement the generator pascal_triangle_generator(n) that will return Pascal's\n    triangle row by row, when iterating with for in.\n    \"\"\"\n    yield [1]\n    yield from pascal_triangle_generator_4(n-1)\n    lst = pascal_triangle_generator_4(n-1)\n    lst.insert(0, 1)\n    yield from pascal_triangle_generator_4(n-1)\n    yield lst\n    yield from pascal_triangle_generator_4(n-1)\n\n\nif __name__ "}
{"task_id": "task101", "completion": "    return s.split(\", \")\n\n\ndef find_longest_word(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    words = s.split(\", \")\n    longest_word = max(words, key=len)\n    return len(longest_word)\n\n\ndef find_longest_word2(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    words = s.split(\", \")\n    longest_word = words[0]\n    longest_word_length = len(longest_word)\n    for word in words[1:]:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n            longest_word = word\n    return len(longest_word)\n\n\ndef find_longest_word3(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    longest_word_length = len(s.split(\", \")[0])\n    for word in s.split(\", \")[1:]:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length\n\n\ndef find_longest_word4(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    longest_word_length = len(max(s.split(\", \"), key=len))\n    return longest_word_length\n\n\ndef find_longest_word5(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    longest_word_length = len(max(s.split(\", \"), key=len))\n    return longest_word_length\n\n\ndef find_longest_word6(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    longest_word_length = len(max(s.split(\", \"), key=len))\n    return longest_word_length\n\n\ndef find_longest_word7(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the length of the\n    longest word.\n\n    For example:\n    find_longest_word(\"Hi my name is John\") == 4\n    find_longest_word(\"One, two, three, four, five, six\") == 6\n    \"\"\"\n    longest_word_length = len(max(s.split(\", "}
{"task_id": "task102", "completion": "    max_odd_num = max(x, y)\n    while max_odd_num % 2 != 0:\n        max_odd_num -= 1\n    return max_odd_num\n\n\ndef create_new_list(n):\n    \"\"\"This function takes one positive integer n and returns a list of\n    n elements, where each element is a list with two elements: first element\n    is the number from 0 to n, second element is -1. The first element of the\n    first list is 0, and so on.\n\n    For example:\n    create_new_list(0) = [[0, -1], [1, -1], [2, -1], [3, -1]]\n    create_new_list(1) = [[0, -1], [1, -1]]\n    \"\"\"\n    lst_of_lists = []\n    for i in range(n + 1):\n        lst = [i, -1]\n        lst_of_lists.append(lst)\n    return lst_of_lists\n\n\ndef create_new_list2(n):\n    \"\"\"This function takes one positive integer n and returns a list of\n    n elements, where each element is a list with two elements: first element\n    is the number from 0 to n, second element is -1. The first element of the\n    first list is 0, and so on.\n\n    For example:\n    create_new_list(0) = [[0, -1], [1, -1], [2, -1], [3, -1]]\n    create_new_list(1) = [[0, -1], [1, -1]]\n    \"\"\"\n    lst_of_lists = []\n    for i in range(n + 1):\n        lst = [i, -1]\n        lst_of_lists.append(lst)\n    return lst_of_lists\n\n\ndef count_distinct_numbers(lst):\n    \"\"\"This function takes a list lst of elements. The function should return\n    an integer, which is the number of distinct numbers in the list lst.\n    For example:\n    count_distinct_numbers([]) = 0\n    count_distinct_numbers([1, 2, 3, 3, 3]) = 3\n    count_distinct_numbers([1, 2, 3, 4, 3, 3]) = 4\n    \"\"\"\n    lst = sorted(lst)\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] not in lst2:\n            lst2.append(lst[i])\n    return len(lst2)\n\n\ndef count_distinct_numbers2(lst):\n    \"\"\"This function takes a list lst of elements. The function should return\n    an integer, which is the number of distinct numbers in the list lst.\n    For example:\n    count_distinct_numbers([]) = 0\n    count_distinct_numbers([1, 2, 3, 3, 3]) = 3\n    count_distinct_numbers([1, 2, 3, 4, 3, 3]) = 4\n    \"\"\"\n    lst = sorted(lst)\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] not in lst2:\n            lst2.append(lst[i])\n    return len(lst2)\n\n\ndef create_new_list(n):\n    \"\"\"This function takes one positive integer n and returns a list of\n    n elements, where each element is a list with two elements: first element\n    is the number from 0 to n, second element is -1. The first element of the\n    first list is 0, and so on.\n\n    For example:\n    create_new_list(0) = [[0, -1], [1, -1], [2, -1], [3, -1]]\n    create_new_list(1) = [[0, -1], [1, -1]]\n    \"\"\"\n    lst_of_lists = []\n    for i in range(n + 1):\n        lst = [i, -1]\n        lst_of_lists.append(lst)\n    return lst_of_lists\n\n\ndef create_new_list2(n):\n    \"\"\"This function takes one positive integer n and returns a list of\n    n elements, where each element is a list with two elements: first element\n    is the number from 0 to n, second element is -1. The first element of the\n    first list is 0, and so on.\n\n    For example:\n    create_new_list(0) = [[0, -1], [1, -1], [2, -1], [3, -1]]\n    create_new_list(1) = [[0, -1], [1, -1]]\n    \"\"\"\n    lst_of_lists = []\n    for i in range(n + 1):\n        lst = [i, -1]\n        lst_of_lists.append(lst)\n    return lst_of_lists\n\n\ndef count_distinct_numbers(lst):\n    \"\"\"This function takes a list lst of elements. The function should return\n    an integer, which is the number of distinct numbers in the list lst.\n    For example:\n    count_distinct_numbers([]) = 0\n    count_distinct_numbers([1, 2, 3, 3, 3]) = 3\n    count_distinct_numbers([1, 2, 3, 4, 3, 3]) = 4\n    \"\"\"\n    lst = sorted(lst)\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] not in lst2:\n            lst2.append(lst[i])\n    return len(lst2)\n\n\ndef count_distinct_numbers2(lst):\n    \"\"\"This function takes a list lst of elements. The function should return\n    an integer, which is the number of distinct numbers in the list lst.\n    For example:\n    count_distinct_numbers([]) = 0\n    count_distinct_numbers([1, 2, 3, 3, 3]) = 3\n    count_distinct_numbers([1, 2, 3, 4, 3, 3]) = 4\n    \"\"\"\n    lst = sorted(lst)\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] not in lst2:\n            lst2.append(lst[i])\n    return len(lst2)\n\n\ndef create_new_list(n):\n    \"\"\"This function takes one positive integer n and returns a list of\n    n elements, where each element is a list with two elements: first element\n    is the number from 0 to n, second element is -1. The first element of the\n    first list is 0, and so on.\n\n    For example:\n    create_new_list(0) = [[0, -1], [1, -1], [2, -1], [3, -1]]\n    create_new_list(1) = [[0, -1], [1, -1]]\n    \"\"\"\n    lst_of_lists = []\n    for i in range(n + 1):\n        lst = [i, -1]\n        lst_of_lists.append(lst)\n    return lst_of_lists\n\n\ndef create_new_list2(n):\n    \"\"\"This function takes one positive integer n and returns a list of\n    n elements, where each element is a list with two elements: first element\n    is the number from 0 to n, second element is -1. The first element of the\n    first list is 0, and so on.\n\n    For examp"}
{"task_id": "task103", "completion": "    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    if avg % 1 > 0:\n        avg = avg - avg%1\n    return \"{0:b}\".format(int(avg))\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    return \"{0:b}\".format(int(avg))\n\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    return \"{0:b}\".format(int(avg))\n    \n    \ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    return \"{0:b}\".format(int(avg))\n    \n    \ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    return \"{0:b}\".format(int(avg))\n    \n    \ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    return \"{0:b}\".format(int(avg))\n    \n    \ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/(m-n+1)\n    return \"{0:b}\".format(int(avg))\n    \n    \ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i "}
{"task_id": "task104", "completion": "    result = []\n    for i in range(len(x)):\n        x[i] = str(x[i])\n        for j in range(len(x[i])):\n            if (int(x[i][j]) % 2) != 0:\n                result.append(int(x[i][j]))\n    return sorted(result)\n"}
{"task_id": "task105", "completion": ""}
{"task_id": "task106", "completion": "    \n    # Write your code here\n    \n    if n==1:\n        return[1]\n    return f(n-1)+[f(n-1)[-1]*n if n%2==0 else sum(range(1,n+1))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "task107", "completion": "    if n < 1 or n > 1000:\n        raise ValueError('1 <= n <= 1000')\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_even(i):\n            even_count += 1\n        if is_palindrome(i) and is_odd(i):\n            odd_count += 1\n    return even_count, odd_count\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return True if n is a palindrome, and False otherwise.\n\n    Example 1:\n\n        Input: 121\n        Output: True\n        Explanation: 121 is a palindrome number.\n\n    Example 2:\n\n        Input: 1231\n        Output: True\n        Explanation: 1231 is a palindrome number.\n\n    Example 3:\n\n        Input: 123\n        Output: False\n        Explanation: 123 is not a palindrome number.\n\n    Example 4:\n\n        Input: 1\n        Output: True\n        Explanation: 1 is a palindrome number.\n\n    Note:\n        1. 1 <= n <= 10^3\n    \"\"\"\n    if n < 1 or n > 1000:\n        raise ValueError('1 <= n <= 1000')\n    if n < 10:\n        return True\n    if n < 100:\n        return True if n % 11 == 0 else False\n    if n < 1000:\n        return True if n % 111 == 0 else False\n    if n < 10000:\n        return True if n % 1111 == 0 else False\n    return True if n % 11111 == 0 else False\n\n\ndef is_even(n):\n    \"\"\"\n    Given a positive integer n, return True if n is an even integer, and False otherwise.\n\n    Example 1:\n\n        Input: 4\n        Output: True\n        Explanation: 4 is an even number.\n\n    Example 2:\n\n        Input: 5\n        Output: False\n        Explanation: 5 is not an even number.\n\n    Example 3:\n\n        Input: 100\n        Output: True\n        Explanation: 100 is an even number.\n\n    Note:\n        1. 1 <= n <= 10^3\n    \"\"\"\n    if n < 1 or n > 1000:\n        raise ValueError('1 <= n <= 1000')\n    return True if n % 2 == 0 else False\n\n\ndef is_odd(n):\n    \"\"\"\n    Given a positive integer n, return True if n is an odd integer, and False otherwise.\n\n    Example 1:\n\n        Input: 3\n        Output: True\n        Explanation: 3 is an odd number.\n\n    Example 2:\n\n        Input: 4\n        Output: False\n        Explanation: 4 is not an odd number.\n\n    Example 3:\n\n        Input: 100\n        Output: False\n        Explanation: 100 is not an odd number.\n\n    Note:\n        1. 1 <= n <= 10^3\n    \"\"\"\n    if n < 1 or n > 1000:\n        raise ValueError('1 <= n <= 1000')\n    return True if n % 2 != 0 else False\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n    print(even_odd_palindrome(1))\n    print(even_odd_palindrome(1000))\n    print(even_odd_palindrome(10000))\n    print(even_odd_palindrome(100000))\n    print(even_odd_palindrome(1000000))\n    print(even_odd_palindrome(10000000))\n    print(even_odd_palindrome(100000000))\n    print(even_odd_palindrome(1000000000))\n    print(even_odd_palindrome(10000000000))\n    print(even_odd_palindrome(100000000000))\n    print(even_odd_palindrome(1000000000000))\n    print(even_odd_palindrome(10000000000000))\n    print(even_odd_palindrome(100000000000000))\n    print(even_odd_palindrome(1000000000000000))\n    print(even_odd_palindrome(10000000000000000))\n    print(even_odd_palindrome(100000000000000000))\n    print(even_odd_palindrome(1000000000000000000))\n    print(even_odd_palindrome(10000000000000000000))\n    print(even_odd_palindrome(100000000000000000000))\n    print(even_odd_palindrome(1000000000000000000000))\n    print(even_odd_palindrome(10000000000000000000000))\n    print(even_odd_palindrome(100000000000000000000000))\n    print(even_odd_palindrome(1000000000000000000000000))\n    print(even_odd_palindrome(10000000000000000000000000))\n    print(even_odd_palindrome(100000000000000000000000000))\n    print(even_odd_palindrome(1000000000000000000000000000))\n    print(even_odd_palindrome(10000000000000000000000000000))\n    print(even_odd_palindrome(100000000000000000000000000000))\n    print(even_odd_palindrome(1000000000000000000000000000000))\n    print(even_odd_palindrome(10000000000000000000000000000000))\n    print(even_odd_palindrome(10000000000000000000000000000000"}
{"task_id": "task108", "completion": "    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "task109", "completion": ""}
{"task_id": "task110", "completion": ""}
{"task_id": "task111", "completion": ""}
{"task_id": "task112", "completion": "    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i] + s[i + 1:]\n    rev_s = s[::-1]\n    if rev_s == s:\n        return (s, True)\n    else:\n        return (s, False)\n        \n        \n        \nprint(reverse_delete(\"abcde\",\"ae\"))\nprint(reverse_delete(\"abcdef\",\"b\"))\nprint(reverse_delete(\"abcdedcba\",\"ab\"))\nprint(reverse_delete(\"qwerty\",\"qwerty\"))\nprint(reverse_delete(\"qwerty\",\"qwerty\"))\nprint(reverse_delete(\"qwerty\",\"qwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwerty"}
{"task_id": "task113", "completion": "    for i in lst:\n        return lst.count(i)\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i in lst:\n        odd_count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                odd_count += 1\n        output.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return output\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i in lst:\n        odd_count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                odd_count += 1\n        output.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return output\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i in lst:\n        odd_count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                odd_count += 1\n        output.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\""}
{"task_id": "task114", "completion": "    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far = max(sum_so_far, num)\n    return minimum_sum\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum, sum_so_far = float('inf'), 0\n    for num in nums:\n        sum_so_far += num\n        minimum_sum = min(minimum_sum, sum_so_far)\n        sum_so_far "}
{"task_id": "task115", "completion": "    \n    def solution(grid, capacity):\n        \"\"\"\n        Greedy algorithm\n        \"\"\"\n        \n        def min_index(grid, i):\n            \"\"\"\n            Find the index of the row with min value.\n            \"\"\"\n            min_row = min(grid[i])\n            min_index = grid[i].index(min_row)\n            return min_index\n            \n        def fill(grid, i, j, capacity, grid_sum):\n            \"\"\"\n            Fill the well at grid[i][j].\n            \"\"\"\n            grid[i][j] = min(capacity, grid[i][j] + grid[i][j+1])\n            grid_sum -= grid[i][j+1]\n            return grid, grid_sum\n        \n        def empty(grid, i, j, capacity, grid_sum):\n            \"\"\"\n            Empty the bucket at grid[i][j].\n            \"\"\"\n            grid[i][j+1] = grid[i][j+1] - grid[i][j]\n            grid_sum += grid[i][j+1]\n            return grid, grid_sum\n        \n        def is_stable(grid, grid_sum):\n            \"\"\"\n            Check if the grid is stable.\n            \"\"\"\n            stable = True\n            if grid_sum < capacity:\n                stable = False\n            return stable\n            \n        def solve(grid, capacity, grid_sum):\n            \"\"\"\n            Solve the problem.\n            \"\"\"\n            count = 0\n            while not is_stable(grid, grid_sum):\n                stable = False\n                for i in range(len(grid)):\n                    stable = True\n                    j = min_index(grid, i)\n                    grid, grid_sum = fill(grid, i, j, capacity, grid_sum)\n                    count += 1\n                for i in range(len(grid)):\n                    stable = True\n                    j = min_index(grid, i)\n                    grid, grid_sum = empty(grid, i, j, capacity, grid_sum)\n                    count += 1\n            return count\n        \n        grid_sum = sum([sum(row) for row in grid])\n        count = solve(grid, capacity, grid_sum)\n        return count\n\n    count = solution(grid, capacity)\n    return count\n"}
{"task_id": "task116", "completion": ""}
{"task_id": "task117", "completion": "    if s=='':\n        return []\n    else:\n        s2=s.split(' ')\n        s3=[]\n        for i in s2:\n            if len(i)==n:\n                s3.append(i)\n        return s3\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "task118", "completion": "    def is_vowel(s):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return s.lower() in vowels\n    \n    def get_vowel_from_left(word):\n        vowel = ''\n        for i in range(len(word) - 1, -1, -1):\n            if is_vowel(word[i]):\n                vowel = word[i]\n                break\n        return vowel\n    \n    def get_vowel_from_right(word):\n        vowel = ''\n        for i in range(len(word)):\n            if is_vowel(word[i]):\n                vowel = word[i]\n                break\n        return vowel\n    \n    vowel_from_right = get_vowel_from_right(word)\n    vowel_from_left = get_vowel_from_left(word)\n    \n    if vowel_from_right == '':\n        return vowel_from_left\n    elif vowel_from_left == '':\n        return vowel_from_right\n    elif is_vowel(vowel_from_left) and is_vowel(vowel_from_right):\n        return ''\n    elif is_vowel(vowel_from_left) and not is_vowel(vowel_from_right):\n        return vowel_from_right\n    elif not is_vowel(vowel_from_left) and is_vowel(vowel_from_right):\n        return vowel_from_left\n    elif not is_vowel(vowel_from_left) and not is_vowel(vowel_from_right):\n        return ''\n\nword = \"ab\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"quick\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"FULL\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"yogurt\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"abcd\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"a\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"abc\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"aabc\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abcd\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abca\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abcdef\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"ab\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"quick\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"FULL\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"yogurt\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"abcd\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"aabc\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abcd\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abca\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abcdef\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"ab\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"quick\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"FULL\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"yogurt\"\nresult = get_closest_vowel(word)\nprint(result)  \n\nword = \"abcd\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"aabc\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abcd\"\nresult = get_closest_vowel(word)\nprint(result) \n\nword = \"abca\"\nresult "}
{"task_id": "task119", "completion": "    def recurse(lst):\n        if len(lst) == 1:\n            if lst[0] == ')':\n                return False\n            return True\n        if lst[0] == ')' or lst[1] == '(':\n            return False\n        if lst[0] == '(' and lst[1] == ')':\n            return recurse(lst[2:]) or recurse(lst[1:])\n        if lst[0] == '(' and lst[1] == '(':\n            return recurse(lst[2:]) and recurse(lst[1:])\n        if lst[0] == ')':\n            return recurse(lst[1:])\n        if lst[1] == ')':\n            return recurse(lst[:-1])\n        if lst[1] == '(':\n            return recurse(lst[1:]) and recurse(lst[:-1])\n        return False\n    return 'Yes' if recurse(lst) else 'No'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def recurse(lst):\n        if len(lst) == 1:\n            if lst[0] == ')':\n                return False\n            return True\n        if lst[0] == ')' or lst[1] == '(':\n            return False\n        if lst[0] == '(' and lst[1] == ')':\n            return recurse(lst[2:]) or recurse(lst[1:])\n        if lst[0] == '(' and lst[1] == '(':\n            return recurse(lst[2:]) and recurse(lst[1:])\n        if lst[0] == ')':\n            return recurse(lst[1:])\n        if lst[1] == ')'"}
{"task_id": "task120", "completion": ""}
{"task_id": "task121", "completion": "    lst = [i for i in lst if lst.index(i) % 2 == 0 and i % 2 != 0]\n    return sum(lst)\n\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    lst = [i for i in lst if lst.index(i) % 2 == 0 and i % 2 != 0]\n    return sum(lst)\n\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    lst = [i for i in lst if lst.index(i) % 2 == 0 and i % 2 != 0]\n    return sum(lst)\n\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    lst = [i for i in lst if lst.index(i) % 2 == 0 and i % 2 != 0]\n    return sum(lst)\n\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    lst = [i for i in lst if lst.index(i) % 2 == 0 and i % 2 != 0]\n    return sum(lst)\n\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) "}
{"task_id": "task122", "completion": "    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return arr[0] + arr[1]\n\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n "}
{"task_id": "task123", "completion": "    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n            n = n * 3 + 1\n        else:\n            result.append(n)\n            n = n / 2\n    return result\n    \ndef test_get_odd_collatz():\n    \"\"\"\n    Unit test for get_odd_collatz function.\n    \"\"\"\n    assert(get_odd_collatz(1) == [1])\n    assert(get_odd_collatz(2) == [2])\n    assert(get_odd_collatz(3) == [3])\n    assert(get_odd_collatz(4) == [4])\n    assert(get_odd_collatz(5) == [1, 5])\n    assert(get_odd_collatz(6) == [3, 9, 20, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1])\n    print(\"Passed!\")\n    \ntest_get_odd_collatz()\n\ndef get_collatz_length(n):\n    \"\"\"\n    Given a positive integer n, return the number of steps taken in the collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined \n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is 0.\n        2. The Collatz function is a recursive function.\n\n    For example:\n    get_collatz_length(1) returns 0\n    get_collatz_length(2) returns 1\n    get_collatz_length(3) returns 7\n    get_collatz_length(4) returns 3\n    get_collatz_length(5) returns 6\n    get_collatz_length(6) returns 8\n    \"\"\"\n    count = 0\n    while n != 1:\n        if n % 2 == 1:\n            n = n * 3 + 1\n        else:\n            n = n / 2\n        count += 1\n    return count\n    \ndef test_get_collatz_length():\n    \"\"\"\n    Unit test for get_collatz_length function.\n    \"\"\"\n    assert(get_collatz_length(1) == 0)\n    assert(get_collatz_length(2) == 1)\n    assert(get_collatz_length(3) == 7)\n    assert(get_collatz_length(4) == 3)\n    assert(get_collatz_length(5) == 6)\n    assert(get_collatz_length(6) == 8)\n    print(\"Passed!\")\n    \ntest_get_collatz_length()\n\ndef get_longest_collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return the longest collatz sequence that starts from 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. The Collatz function is a recursive function.\n\n    For example:\n    get_longest_collatz_sequence(10) returns [3, 9, 20, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    \"\"\"\n    longest_sequence = []\n    current_sequence = [1]\n    for i in range(2, n + 1):\n        if get_collatz_length(i) > get_collatz_length(current_sequence[0]):\n            current_sequence = [i]\n        elif get_collatz_length(i) == get_collatz_length(current_sequence[0]):\n            current_sequence.append(i)\n    longest_sequence = current_sequence\n    return longest_sequence\n    \ndef test_get_longest_collatz_sequence():\n    \"\"\"\n    Unit test for get_longest_collatz_sequence function.\n    \"\"\"\n    assert(get_longest_collatz_sequence(1) == [1])\n    assert(get_longest_collatz_sequence(2) == [2])\n    assert(get_longest_collatz_sequence(3) == [3])\n    assert(get_longest_collatz_sequence(4) == [4])\n    assert(get_longest_collatz_sequence(5) == [1, 5])\n    assert(get_longest_collatz_sequence(6) "}
{"task_id": "task124", "completion": "    days_of_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month, day, year = (int(i) for i in date.split('-'))\n\n    if len(date) != 10:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        if day < 1 or day > days_of_month[month - 1]:\n            return False\n    \n    return True\n\ndef main():\n    \"\"\"Don't change this function\"\"\"\n    print('valid_date(\"03-11-2000\") =>', valid_date('03-11-2000'))\n    print('valid_date(\"15-01-2012\") =>', valid_date('15-01-2012'))\n    print('valid_date(\"04-0-2040\") =>', valid_date('04-0-2040'))\n    print('valid_date(\"06-04-2020\") =>', valid_date('06-04-2020'))\n    print('valid_date(\"06/04/2020\") =>', valid_date('06/04/2020'))\n\nif __name__ == '__main__':\n    main()\n\n\ndef is_prime(n):\n    \"\"\"You have to write a function which return True if the number n is prime\n    otherwise False.\n    Prime number is a natural number greater than 1 that has no positive divisors\n    except 1 and itself.\n\n    is_prime(1) => False\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => False\n    is_prime(10) => False\n    \"\"\"\n    if n <= 1:\n        return False\n\n    if n == 2:\n        return True\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n\n\ndef is_palindrome(s):\n    \"\"\"You have to write a function which return True if the string s is a\n    palindrome otherwise False.\n    A string is a palindrome when it is spelled the same way forward as it is\n    backward.\n    is_palindrome('madam') => True\n    is_palindrome('Madam') => False (case matters)\n    is_palindrome(\"madam i'm adam\") => False (whitespaces are not counted as\n    characters)\n    is_palindrome('') => True (an empty string is a palindrome)\n    is_palindrome('a') => True (a single character is a palindrome)\n    is_palindrome('ab') => False (a and b are not equal)\n    is_palindrome('radar') => True\n    is_palindrome('Ra"}
{"task_id": "task125", "completion": "    txt=txt.split()\n    new_txt=[]\n    for word in txt:\n        if ' ' in word:\n            word=word.split()\n            new_txt.extend(word)\n        elif ',' in word:\n            word=word.split(',')\n            new_txt.extend(word)\n        else:\n            txt=''.join(filter(lambda x: x.isalpha(), txt))\n            new_txt.extend(txt)\n    return new_txt\nprint(split_words(\"abcdef\"))\ndef test_split_words(test_function):\n    '''\n    Tests the function `test_function` to make sure it produces the expected output.\n    '''\n    assert test_function('abcdef') == 3, \"abcdef\"\n    assert test_function('abcdef ghi jkl') == 3, \"abcdef ghi jkl\"\n    assert test_function('abcdef,ghi,jkl') == 3, \"abcdef,ghi,jkl\"\n    assert test_function('abcdef ghi,jkl') == 3, \"abcdef ghi,jkl\"\n    assert test_function('abcdef ghi,jkl xyz') == 3, \"abcdef ghi,jkl xyz\"\n    assert test_function('abcdef ghi,jkl xyz,') == 3, \"abcdef ghi,jkl xyz,\"\n    assert test_function('abcdef ghi,jkl xyz,def') == 3, \"abcdef ghi,jkl xyz,def\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def\"\n    assert test_function('abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def') == 3, \"abcdef ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,def ghi,jkl xyz,de"}
{"task_id": "task126", "completion": ""}
{"task_id": "task127", "completion": ""}
{"task_id": "task128", "completion": "    if len(arr) == 0:\n        return None\n    else:\n        mult = 1\n        sign_mult = 1\n        for i in arr:\n            mult *= i\n            sign_mult *= i*"}
{"task_id": "task129", "completion": "    import heapq\n\n    if k > len(grid) ** 2:\n        return None\n\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    heap = [(grid[0][0], 0, 0)]\n    while heap:\n        cost, r, c = heapq.heappop(heap)\n        visited.add((r, c))\n        if len(visited) == k:\n            return [cost]\n\n        for dr, dc in ((r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)):\n            if dr < 0 or dr >= rows or dc < 0 or dc >= cols or (dr, dc) in visited:\n                continue\n            heapq.heappush(heap, (cost + grid[dr][dc], dr, dc))\n    return None\n\n\ndef test():\n    import random\n    random.seed(1)\n    for i in range(100000):\n        k = random.randrange(1, 1000)\n        grid = [[random.randrange(1, 100000) for j in range(k)] for i in range(k)]\n        ans = minPath(grid, k)\n        if ans is None:\n            continue\n        ans = [grid[r][c] for r, c in ans]\n        print(ans)\n        if len(ans) != k:\n            print(grid, k, ans)\n            break\n        for i in range(k - 1):\n            if ans[i] >= ans[i + 1]:\n                print(grid, k, ans)\n                break\n    print(\"Tests passed!\")\n\n\ntest()\n\n\ndef test():\n    import random\n    random.seed(1)\n    for i in range(100000):\n        k = random.randrange(1, 1000)\n        grid = [[random.randrange(1, 100000) for j in range(k)] for i in range(k)]\n        ans = minPath(grid, k)\n        if ans is None:\n            continue\n        ans = [grid[r][c] for r, c in ans]\n        print(ans)\n        if len(ans) != k:\n            print(grid, k, ans)\n            break\n        for i in range(k - 1):\n            if ans[i] >= ans[i + 1]:\n                print(grid, k, ans)\n                break\n    print(\"Tests passed!\")\n\n\ntest()\n\nimport heapq\n\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinc"}
{"task_id": "task130", "completion": "    \n    def tri(n):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        if n % 2 != 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    return [tri(n) for n in range(1, n + 2)]\n# %%\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tri(n):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        if n % 2 != 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    return [tri(n) for n in range(1, n + 2)]\n    \ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tri(n):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        if n % 2 != 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    return [tri(n) for n in range(1, n + 2)]\n    \ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tri(n):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        if n % 2 != 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    return [tri(n) for n in range(1, n + 2)]\n    \ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tri(n):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        if n % 2 != 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    return [tri(n) for n in range(1, n + 2)]\n    \ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tri(n):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        if n % 2 != 0:\n            return tri(n "}
{"task_id": "task131", "completion": "    \n    digit_str=str(n)\n    list_digit_str=[]\n    for i in digit_str:\n        list_digit_str.append(int(i))\n    \n    def is_odd(x):\n        if x%2!=0:\n            return True\n        else:\n            return False\n    list_odd_digit_str=[]\n    for i in list_digit_str:\n        if is_odd(i)==True:\n            list_odd_digit_str.append(i)\n    \n    product=1\n    for i in list_odd_digit_str:\n        product=product*i\n    \n    return product\n    \n\ndef sum_of_squares(lst):\n    \"\"\"Given a list lst, return the sum of the squares of the numbers in lst.\n    For example:\n    sum_of_squares([1, 2, 3, 4]) == 30\n    \"\"\"\n    \n    sum_square=0\n    for i in lst:\n        sum_square=sum_square+i**2\n    \n    return sum_square\n\ndef concatenate(lst):\n    \"\"\"Given a list of strings, concatenate them together into a single string.\n    Return an empty string if the list is empty.\n    For example:\n    concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\n    concatenate([]) == \"\"\n    \"\"\"\n    \n    string=\"\"\n    for i in lst:\n        string=string+i\n    return string\n\ndef is_palindrome(s):\n    \"\"\"Given a string s, return True if it is a palindrome. Otherwise return False.\n    A palindrome is a word that is spelled the same forwards as backwards.\n    For example:\n    is_palindrome(\"racecar\") == True\n    is_palindrome(\"abcd\") == False\n    \"\"\"\n    \n    if len(s)==0:\n        return True\n    elif s==s[::-1]:\n        return True\n    else:\n        return False\n\ndef first_factor(n):\n    \"\"\"Given a positive integer n, return its smallest factor.\n    If n is prime return n.\n    For example:\n    first_factor(10) == 2\n    first_factor(100) == 2*2*5*5\n    \"\"\"\n    \n    if n==1:\n        return 1\n    for i in range(2,n):\n        if n%i==0:\n            return i\n    else:\n        return n\n    \ndef sum_of_digits(n):\n    \"\"\"Given a positive integer n, return the sum of its digits.\n    For example:\n    sum_of_digits(1) == 1\n    sum_of_digits(4224) == 12\n    \"\"\"\n    \n    digit_str=str(n)\n    list_digit_str=[]\n    for i in digit_str:\n        list_digit_str.append(int(i))\n    \n    sum_digit=0\n    for i in list_digit_str:\n        sum_digit=sum_digit+i\n    \n    return sum_digit\n    \ndef nth_fib(n):\n    \"\"\"Given a positive integer n, return the nth Fibonacci number.\n    For example:\n    nth_fib(1) == 1\n    nth_fib(2) == 1\n    nth_fib(3) == 2\n    nth_fib(4) == 3\n    nth_fib(10) == 55\n    \"\"\"\n    \n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return nth_fib(n-1)+nth_fib(n-2)\n    \ndef nth_fib_iterative(n):\n    \"\"\"Given a positive integer n, return the nth Fibonacci number.\n    For example:\n    nth_fib_iterative(1) == 1\n    nth_fib_iterative(2) == 1\n    nth_fib_iterative(3) == 2\n    nth_fib_iterative(4) == 3\n    nth_fib_iterative(10) == 55\n    \"\"\"\n    \n    if n==1 or n==2:\n        return 1\n    else:\n        f"}
{"task_id": "task132", "completion": "    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']' and lst:\n            lst.pop()\n        else:\n            return False\n    return not lst\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return len(lst) == 0\n\ndef is_nested(string):\n    lst = []\n    for i in string:\n        if i == '[':\n            lst.append(i)\n        elif i == ']':\n            if len(lst) > 0:\n                lst.pop()\n            else:\n                return False\n    return "}
{"task_id": "task133", "completion": "    \n    lst1 = [int(round(i)) for i in lst]\n    lst2 = []\n    for i in lst1:\n        lst2.append(i**2)\n    return sum(lst2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "task134", "completion": "    txt = txt.split()\n    txt.remove('')\n    if txt == []:\n        return False\n    else:\n        txt = ' '.join(txt)\n        txt = txt.split()\n        if txt[-1].isalpha() and len(txt[-1]) == 1:\n            return True\n        else:\n            return False\n        \n        \ncheck_if_last_char_is_a_letter(\"apple pi e\")\n"}
{"task_id": "task135", "completion": "    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return -1\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] > arr[i + 1]:\n                return -1\n        elif i == len(arr) - 1:\n            if arr[i] < arr[i - 1]:\n                return i\n        elif arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            return i\n    return -1\n"}
{"task_id": "task136", "completion": ""}
{"task_id": "task137", "completion": "    if (type(a) == int or type(a) == float) and (type(b) == int or type(b) == float):\n        if a > b:\n            return b\n        elif a < b:\n            return a\n        else:\n            return None\n    elif (type(a) == int or type(a) == float) and (type(b) == str):\n        if a > float(b.replace(',', '.').replace('.', '')):\n            return b\n        elif a < float(b.replace(',', '.').replace('.', '')):\n            return a\n        else:\n            return None\n    elif (type(b) == int or type(b) == float) and (type(a) == str):\n        if float(a.replace(',', '.').replace('.', '')) > b:\n            return a\n        elif float(a.replace(',', '.').replace('.', '')) < b:\n            return b\n        else:\n            return None\n    else:\n        return None\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two variables and compares them to one another.\n    Return True if the first variable is greater than or equal to the second.\n    Otherwise, return False if the first variable is less than the second variable.\n    If the values are equal, return None.\n\n    compare_two(3, 3.0) \u279e True\n    compare_two(\"1\", 1) \u279e False\n    compare_two(3, 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return True\n        elif a < b:\n            return False\n        else:\n            return None\n    else:\n        return None\n\n\ndef compare_three(a, b, c):\n    \"\"\"\n    Create a function that takes three variables and returns True if the third variable is \n    greater than the sum of the first and second variables. Otherwise, return False.\n\n    compare_three(1, 2, 3) \u279e False\n    compare_three(2, 1, 3) \u279e True\n    compare_three(1, 3, 2) \u279e True\n    \"\"\"\n    if type(a) == type(b) and type(a) == type(c):\n        if a + b > c:\n            return True\n        else:\n            return False\n    else:\n        return None\n\n\ndef compare_four(a, b, c, d):\n    \"\"\"\n    Create a function that takes four variables and returns True if the sum of the first\n    and second variables is strictly greater than the third and fourth variables.\n    Otherwise, return False.\n\n    compare_four(1, 2, 3, 4) \u279e False\n    compare_four(1, 3, 2, 4) \u279e True\n    compare_four(1, 2, 3, 1) \u279e False\n    \"\"\"\n    if type(a) == type(b) and type(a) == type(c) and type(a) == type(d):\n        if a + b > c and a + b > d:\n            return True\n        else:\n            return False\n    else:\n        return None\n\n\ndef compare_five(a, b, c, d, e):\n    \"\"\"\n    Create a function that takes five variables and returns True if the sum of the first\n    and second variables is strictly less than the third, fourth, and fifth variables.\n    Otherwise, return False.\n\n    compare_five(1, 2, 3, 4, 5) \u279e True\n    compare_five(1, 2, 3, 4, 5) \u279e False\n    compare_five(1, 2, 3, 4, 5) \u279e False\n    \"\"\"\n    if type(a) == type(b) and type(a) == type(c) and type(a) == type(d) and type(a) == type(e):\n        if a + b "}
{"task_id": "task138", "completion": "    result = 0\n    for i in range(1, 100):\n        for j in range(1, 100):\n            if i+j == n:\n                result = i+j\n    if result == n:\n        return True\n    else:\n        return False\n    \nis_equal_to_sum_even(4)\nis_equal_to_sum_even(6)\nis_equal_to_sum_even(8)\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    result = 0\n    for i in range(1, 100):\n        for j in range(1, 100):\n            if i+j == n:\n                result = i+j\n    if result == n:\n        return True\n    else:\n        return False\n    \nis_equal_to_sum_even(4)\nis_equal_to_sum_even(6)\nis_equal_to_sum_even(8)\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    result = 0\n    for i in range(1, 100):\n        for j in range(1, 100):\n            if i+j == n:\n                result = i+j\n    if result == n:\n        return True\n    else:\n        return False\n    \nis_equal_to_sum_even(4)\nis_equal_to_sum_even(6)\nis_equal_to_sum_even(8)\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\nimport random\ndef random_test():\n    for i in range(1,1000):\n        n = random.randint(1, 100)\n        if n % 2 != 0:\n            continue\n        else:\n            result = is_equal_to_sum_even(n)\n            if result == True:\n                print(n, \"True\")\n            else:\n                print(n, \"False\")\nrandom_test()\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == "}
{"task_id": "task139", "completion": "    return None\n    \n\ndef special_factorial_of_primes(n):\n    \"\"\"The Brazilian factorial is defined as:\n    special_factorial_of_primes(n) = sum(\n        prime_factor_of(n) * prime_factorial_of(prime_factor_of(n))\n    )\n\n    For example:\n    >>> special_factorial_of_primes(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    return None\n\n\ndef prime_factor_of(n):\n    \"\"\"Returns the prime factorization of n.\n    The prime factorization is the factorization of n into its prime factors\n    with the product of these prime factors.\n    For example:\n    >>> prime_factor_of(4)\n    [2, 2]\n\n    >>> prime_factor_of(15)\n    [3, 5]\n\n    >>> prime_factor_of(25)\n    [5, 5]\n\n    >>> prime_factor_of(1)\n    []\n    \"\"\"\n    return None\n\n\ndef prime_factorial_of(n):\n    \"\"\"Returns the prime factorial of n.\n    The prime factorial is the factorial of the prime factorization of n.\n    For example:\n    >>> prime_factorial_of(4)\n    8\n\n    >>> prime_factorial_of(15)\n    120\n\n    >>> prime_factorial_of(25)\n    15511210043330985984000000\n    \"\"\"\n    return None\n\n\ndef main():\n    \"\"\"Run a test suite to check correctness of special_factorial and\n    prime_factor_of.\n    \"\"\"\n    for i in range(1, 100):\n        assert special_factorial(i) == special_factorial_of_primes(i)\n\n    # TODO: Implement this function.\n    print(\"The function is correct!\")\n\n\nif __name__ == \"__main__\":\n    main()\n    \n    def prime_factor_of(n):\n    \"\"\"Returns the prime factorization of n.\n    The prime factorization is the factorization of n into its prime factors\n    with the product of these prime factors.\n    For example:\n    >>> prime_factor_of(4)\n    [2, 2]\n\n    >>> prime_factor_of(15)\n    [3, 5]\n\n    >>> prime_factor_of(25)\n    [5, 5]\n\n    >>> prime_factor_of(1)\n    []\n    \"\"\"\n    return None\n\n\ndef prime_factorial_of(n):\n    \"\"\"Returns the prime factorial of n.\n    The prime factorial is the factorial of the prime factorization of n.\n    For example:\n    >>> prime_factorial_of(4)\n    8\n\n    >>> prime_factorial_of(15)\n    120\n\n    >>> prime_factorial_of(25)\n    15511210043330985984000000\n    \"\"\"\n    return None\n\n\ndef main():\n    \"\"\"Run a test suite to check correctness of prime_factor_of.\n    \"\"\"\n    for i in range(1, 100):\n        assert prime_factor_of(i) == prime_factor_of(i)\n        assert prime_factor_of(i) == prime_factor_of(i)\n\n    print(\"The function is correct!\")\n\n\nif __name__ == \"__main__\":\n    main()\n    \ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    return None\n    \ndef special_factorial_of_primes(n):\n    \"\"\"The Brazilian factorial is defined as:\n    special_factorial_of_primes(n) = sum(\n        prime_factor_of(n) * prime_factorial_of(prime_factor_of(n))\n    )\n\n    For example:\n    >>> special_factorial_of_primes(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    return None\n    \ndef prime_factor_of(n):\n    \"\"\"Returns the prime factorization of n.\n    The prime factorization is the factorization of n into its prime factors\n    with the product of these prime factors.\n    For example:\n    >>> prime_factor_of(4)\n    [2, 2]\n\n    >>> prime_factor_of(15)\n    [3, 5]\n\n    >>> prime_factor_of(25)\n    [5, 5]\n\n    >>> prime_factor_of(1)\n    []\n    \"\"\"\n    return None\n    \ndef prime_factorial_of(n):\n    \"\"\"Returns the prime factorial of n.\n    The prime factorial is the factorial of the prime factorization of n.\n    For example:\n    >>> prime_factorial_of(4)\n    8\n\n    >>> prime_factorial_of(15)\n    120\n\n    >>> prime_factorial_of(25)\n    15511210043330985984000000\n    \"\"\"\n    return None\n    \ndef"}
{"task_id": "task140", "completion": "    if type(text) != str:\n        return None\n    \n    new_text = []\n    spaces_counter = 0\n    \n    for i in range(len(text)):\n        \n        if text[i] == ' ':\n            spaces_counter += 1\n            new_text.append('_')\n        else:\n            if spaces_counter != 0 and spaces_counter < 3:\n                new_text.append('-')\n            new_text.append(text[i])\n            spaces_counter = 0\n            \n    return ''.join(new_text)\n            \n\ndef is_pangram(text):\n    \"\"\"\n    Given a string text, return True if it is a pangram, and False otherwise.\n    \n    is_pangram(\"The quick brown fox jumps over the lazy dog!\") == True\n    is_pangram(\"ABCDEF\") == False\n    \"\"\"\n    if type(text) != str:\n        return None\n    \n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        if letter not in text.lower():\n            return False\n    \n    return True\n    \n    \n\ndef is_palindrome(text):\n    \"\"\"\n    Given a string text, return True if it is a palindrome, and False otherwise.\n    \n    is_palindrome(\"racecar\") == True\n    is_palindrome(\"ABCDEF\") == False\n    \"\"\"\n    if type(text) != str:\n        return None\n    \n    start = 0\n    end = len(text)-1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n        \n    return True\n    \n\ndef sum_of_cubes(number):\n    \"\"\"\n    Given a number, return the sum of the cubes of its digits.\n    \n    sum_of_cubes(153) == 153\n    sum_of_cubes(876) == 508\n    sum_of_cubes(0) == 0\n    \"\"\"\n    if type(number) != int:\n        return None\n    \n    cubes = []\n    for digit in str(number):\n        cubes.append(int(digit)**3)\n    return sum(cubes)\n    \n    \ndef is_prime(number):\n    \"\"\"\n    Given a number, return True if it is a prime number, and False otherwise.\n    \n    is_prime(15) == False\n    is_prime(23) == True\n    is_prime(1000) == False\n    \"\"\"\n    if type(number) != int:\n        return None\n    \n    if number < 2:\n        return False\n    \n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef fizzbuzz(start, end):\n    \"\"\"\n    Given two numbers, return a list of the numbers between start and end, \n    inclusive, in order, but with each multiple of 3, 5, or both 3 and 5 \n    replaced by the word \"fizz\", \"buzz\", or \"fizzbuzz\", respectively.\n    \n    fizzbuzz(1, 15) == [\"1\", \"2\", \"fizz\", \"4\", \"buzz\", \"fizz\", \"7\", \"8\", \"fizz\", \"buzz\", \"11\", \"fizz\", \"13\", \"14\", \"fizzbuzz\"]\n    fizzbuzz(1, 100) == [\n        \"1\", \"2\", \"fizz\", \"4\", \"buzz\", \"fizz\", \"7\", \"8\", \"fizz\", \"buzz\", \n        \"11\", \"fizz\", \"13\", \"14\", \"fizzbuzz\", \"16\", \"17\", \"fizz\", \"19\", \n        \"buzz\", \"fizz\", \"22\", \"23\", \"fizz\", \"buzz\", \"26\", \"fizz\", \n        \"28\", \"29\", \"fizzbuzz\", \"31\", \"32\", \"fizz\", \"34\", \"buzz\", \"fizz\", \n        \"37\", \"38\", \"fizz\", \"buzz\", \"41\", \"fizz\", \"43\", \"44\", \"fizzbuzz\", \n        \"46\", \"47\", \"fizz\", \"49\", \"buzz\", \"fizz\", \"52\", \"53\", \"fizz\", \n        \"buzz\", \"56\", \"fizz\", \"58\", \"59\", \"fizzbuzz\", \"61\", \"62\", \"fizz\", \n        \"64\", \"buzz\", \"fizz\", \"67\", \"68\", \"fizz\", \"buzz\", \"71\", \"fizz\", \n        \"73\", \"74\", \"fizzbuzz\", \"76\", \"77\", \"fizz\", \"79\", \"buzz\", \"fizz\", \n        \"82\", \"83\", \"fizz\", \"buzz\", \"86\", \"fizz\", \"88\", \"89\", \"fizzbuzz\", \n        \"91\", \"92\", \"fizz\", \"94\", \"buzz\", \"fizz\", \"97\", \"98\", \"fizz\""}
{"task_id": "task141", "completion": "    if len(file_name) > 3:\n        return \"No\"\n    elif file_name.find(\".\") == -1:\n        return \"No\"\n    elif file_name[0].isupper() or (file_name[0] >= 'a' and file_name[0] <= 'z'):\n        return \"No\"\n    else:\n        return \"Yes\"\n\ndef main():\n    \"\"\"Tests for file_name_check\"\"\"\n    print(file_name_check(\"example.txt\")) # => 'Yes'\n    print(file_name_check(\"1example.dll\")) # => 'No' (the name should start with a latin alphapet letter)\n\nif __name__ "}
{"task_id": "task142", "completion": "    summ = 0\n    for i, x in enumerate(lst):\n        if (i%3 == 0):\n            lst[i] = x**2\n        elif (i%4 == 0 and i%3 != 0):\n            lst[i] = x**3\n        else:\n            summ += lst[i]\n    return summ\n\ndef list_difference(lst):\n    \"\"\"\"\n    This function will take a list of integers. The function shall return a list with all even numbers removed. \n    \n    Examples:\n    For lst = [1,2,3,4]  the output should be [1,3]\n    For lst = [1,2,4,4,12]  the output should be [1,2,12]\n    For lst = []  the output should be []\n    \"\"\"\n    return [lst[i] for i in range(len(lst)) if lst[i]%2 != 0]\n\ndef list_of_lists(lst):\n    \"\"\"\"\n    This function will take a list of lists (lst). The function shall return a list of all the unique entries in the input list. \n    \n    Examples:\n    For lst = [[1,2],[1,3],[3,1],[1,3],[3,1],[3,1],[1,2]]  the output should be [1,2,3]\n    For lst = [[],[],[1],[1,1],[1,1],[1,1],[1,2],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]  the output should be [1,2,3]\n    For lst = []  the output should be []\n    \"\"\"\n    return list(set([x for lst in lst for x in lst]))\n\ndef list_of_lists_2(lst):\n    \"\"\"\"\n    This function will take a list of lists (lst). The function shall return a list of all the unique entries in the input list. \n    \n    Examples:\n    For lst = [[1,2],[1,3],[3,1],[1,3],[3,1],[3,1],[1,2]]  the output should be [1,2,3]\n    For lst = [[],[],[1],[1,1],[1,1],[1,1],[1,2],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]  the output should be [1,2,3]\n    For lst = []  the output should be []\n    \"\"\"\n    return list(set([x for lst in lst for x in lst]))\n    \ndef sum_squares_2(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    summ = 0\n    for i, x in enumerate(lst):\n        if (i%3 == 0):\n            lst[i] = x**2\n        elif (i%4 == 0 and i%3 != 0):\n            lst[i] = x**3\n        else:\n            summ += lst[i]\n    return summ\n\ndef list_difference_2(lst):\n    \"\"\"\"\n    This function will take a list of integers. The function shall return a list with all even numbers removed. \n    \n    Examples:\n    For lst = [1,2,3,4]  the output should be [1,3]\n    For lst = [1,2,4,4,12]  the output should be [1,2,12]\n    For lst = []  the output should be []\n    \"\"\"\n    return [lst[i] for i in range(len(lst)) if lst[i]%2 != 0]\n\ndef list_of_lists_3(lst):\n    \"\"\"\"\n    This function will take a list of lists (lst). The function shall return a list of all the unique entries in the input list. \n    \n    Examples:\n    For lst = [[1,2],[1,3],[3,1],[1,3],[3,1],[3,1],[1,2]]  the output should be [1,2,3]\n    For lst = [[],[],[1],[1,1],[1,1],[1,1],[1,2],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]  the output should be [1,2,3]\n    For lst = []  the output should be []\n    \"\"\"\n    return list(set([x for l"}
{"task_id": "task143", "completion": "    sentence = sentence.split()\n    result = []\n    for i in range(len(sentence)):\n        if is_prime(len(sentence[i])):\n            result.append(sentence[i])\n    return \" \".join(result)\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if the number n is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    sentence = input(\"Enter a sentence: \")\n    result = words_in_sentence(sentence)\n    print(\"Prime words in the sentence:\", result)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef test_words_in_sentence():\n    assert words_in_sentence(\"This is a test\") == \"is\"\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert words_in_sentence(\"123 45 6789\") == \"\"\n    assert words_in_sentence(\"Python\") == \"\"\n    assert words_in_sentence(\"\") == \"\"\n    assert words_in_sentence(\"123 test 456\") == \"test\"\n    assert words_in_sentence(\"hey this is a test\") == \"is a test\"\n    assert words_in_sentence(\"hey this is a test 45\") == \"is a test\"\n    assert words_in_sentence(\"hey this is a test hey\") == \"is a test\"\n\n\ndef test_is_prime():\n    assert is_prime(2)\n    assert is_prime(3)\n    assert is_prime(5)\n    assert is_prime(7)\n    assert is_prime(11)\n    assert is_prime(13)\n    assert is_prime(17)\n    assert is_prime(19)\n    assert is_prime(23)\n    assert is_prime(29)\n    assert is_prime(31)\n    assert is_prime(37)\n    assert is_prime(41)\n    assert is_prime(43)\n    assert is_prime(47)\n    assert is_prime(53)\n    assert is_prime(59)\n    assert is_prime(61)\n    assert is_prime(67)\n    assert is_prime(71)\n    assert is_prime(73)\n    assert is_prime(79)\n    assert is_prime(83)\n    assert is_prime(89)\n    assert is_prime(97)\n    assert is_prime(101)\n    assert is_prime(103)\n    assert is_prime(107)\n    assert is_prime(109)\n    assert is_prime(113)\n    assert is_prime(127)\n    assert is_prime(131)\n    assert is_prime(137)\n    assert is_prime(139)\n    assert is_prime(149)\n    assert is_prime(151)\n    assert is_prime(157)\n    assert is_prime(163)\n    assert is_prime(167)\n    assert is_prime(173)\n    assert is_prime(179)\n    assert is_prime(181)\n    assert is_prime(191)\n    assert is_prime(197)\n    assert is_prime(199)\n    assert is_prime(211)\n    assert is_prime(223)\n    assert is_prime(229)\n    assert is_prime(233)\n    assert is_prime(239)\n    assert is_prime(241)\n    assert is_prime(251)\n    assert is_prime(257)\n    assert is_prime(263)\n    assert is_prime(269)\n    assert is_prime(271)\n    assert is_prime(277)\n    assert is_prime(281)\n    assert is_prime(283)\n    assert is_prime(293)\n    assert is_prime(307)\n    assert is_prime(311)\n    assert is_prime(313)\n    assert is_prime(317)\n    assert is_prime(331)\n    assert is_prime(337)\n    assert is_prime(347)\n    assert is_prime(349)\n    assert is_prime(353)\n    assert is_prime(359)\n    assert is_prime(367)\n    assert is_prime(373)\n    assert is_prime(379)\n    assert is_prime(383)\n    assert is_prime(389)\n    assert is_prime(397)\n    assert is_prime(401)\n    assert is_prime(409)\n    assert is_prime(4"}
{"task_id": "task144", "completion": "    denominator_of_x, numerator_of_x = x.split('/')\n    denominator_of_n, numerator_of_n = n.split('/')\n\n    denominator_of_simplified_expression = int(denominator_of_x) * int(denominator_of_n)\n    numerator_of_simplified_expression = int(numerator_of_x) * int(numerator_of_n)\n\n    simplified_expression = f\"{numerator_of_simplified_expression}/{denominator_of_simplified_expression}\"\n\n    simplified_numerator_of_expression, simplified_denominator_of_expression = simplified_expression.split('/')\n\n    simplified_numerator_of_expression = int(simplified_numerator_of_expression)\n    simplified_denominator_of_expression = int(simplified_denominator_of_expression)\n\n    simplified_numerator_of_expression_reduced = simplified_numerator_of_expression // simplified_denominator_of_expression\n    simplified_denominator_of_expression_reduced = simplified_denominator_of_expression // simplified_denominator_of_expression\n\n    simplified_numerator_of_expression_simplified = simplified_numerator_of_expression_reduced // simplified_denominator_of_expression_reduced\n    simplified_denominator_of_expression_simplified = simplified_denominator_of_expression_reduced // simplified_denominator_of_expression_reduced\n\n    simplified_expression_simplified = f\"{simplified_numerator_of_expression_simplified}/{simplified_denominator_of_expression_simplified}\"\n\n    simplified_numerator_of_simplified_expression, simplified_denominator_of_simplified_expression = simplified_expression_simplified.split('/')\n\n    simplified_numerator_of_simplified_expression = int(simplified_numerator_of_simplified_expression)\n    simplified_denominator_of_simplified_expression = int(simplified_denominator_of_simplified_expression)\n\n    simplified_numerator_of_simplified_expression_reduced = simplified_numerator_of_simplified_expression // simplified_denominator_of_simplified_expres"}
{"task_id": "task145", "completion": "    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import OrderedDict\n    nums_dict = {x: sum(map(int, str(x))) for x in nums}\n    return [nums[x] for x in sorted(nums_dict, key=nums_dict.get)]\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import Ord"}
{"task_id": "task146", "completion": ""}
{"task_id": "task147", "completion": "    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\n\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, "}
{"task_id": "task148", "completion": "    \n    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 in planets:\n        planet1_idx = planets.index(planet1)\n    if planet2 in planets:\n        planet2_idx = planets.index(planet2)\n    if planet1_idx > planet2_idx:\n        return planets[planet2_idx:planet1_idx+1]\n    else:\n        return planets[planet1_idx:planet2_idx+1]\n    \n    \nplanets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \n           \"Saturn\", \"Uranus\", \"Neptune\")\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Moon\"))\nprint(bf(\"Moon\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Moon\"))\nprint(bf(\"Moon\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Sun\"))\nprint(bf(\"Sun\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Moon\"))\nprint(bf(\"Moon\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Sun\"))\nprint(bf(\"Sun\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Moon\"))\nprint(bf(\"Moon\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Moon\"))\nprint(bf(\"Moon\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Plu"}
{"task_id": "task149", "completion": "    res = []\n    for item in lst:\n        if len(item) % 2 != 0:\n            lst.remove(item)\n            continue\n        else:\n            res.append(item)\n            res.sort(key=lambda x: len(x))\n            res.sort(key=lambda x: x, reverse=True)\n    return res\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n\ndef sum_of_lists(lst):\n    \"\"\"Write a function that accepts a list of lists of numbers as a parameter,\n    sums up all the numbers,\n    and returns the resulted sum,\n    The list of lists of numbers is never an array of arrays,\n    and it can have any number of lists, and it may have any number of elements\n    in each of those lists.\n    The function should return a number.\n    For example:\n    assert sum_of_lists([[1, 2, 3], [1, 2], [1]]) => 10\n    \"\"\"\n    sum = 0\n    for item in lst:\n        sum += sum(item)\n    return sum\nassert sum_of_lists([[1, 2, 3], [1, 2], [1]]) == 10\n\ndef lcm_of_list(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    finds the LCM of the numbers,\n    and returns the resulted LCM,\n    The function should return a number.\n    For example:\n    assert lcm_of_list([1, 2, 3]) => 6\n    assert lcm_of_list([1, 2, 3, 4, 5]) => 60\n    \"\"\"\n    num_list = sorted(lst)\n    lcm = num_list[0]\n    for i in range(1, len(num_list)):\n        lcm = lcm * num_list[i] // gcd(lcm, num_list[i])\n    return lcm\nassert lcm_of_list([1, 2, 3]) == 6\nassert lcm_of_list([1, 2, 3, 4, 5]) == 60\n\ndef gcd(a, b):\n    \"\"\"Write a function that accepts two numbers as parameters,\n    finds the Greatest Common Divisor of these two numbers,\n    and returns the resulted LCM,\n    The function should return a number.\n    For example:\n    assert gcd(1, 2) => 1\n    assert gcd(3, 5) => 1\n    assert gcd(6, 4) => 2\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\nassert gcd(1, 2) == 1\nassert gcd(3, 5) == 1\nassert gcd(6, 4) == 2\n\ndef lcm(a, b):\n    \"\"\"Write a function that accepts two numbers as parameters,\n    finds the Least Common Multiple of these two numbers,\n    and returns the resulted LCM,\n    The function should return a number.\n    For example:\n    assert lcm(1, 2) => 2\n    assert lcm(3, 5) => 15\n    assert lcm(6, 4) => 12\n    \"\"\"\n    lcm = a * b // gcd(a, b)\n    return lcm\nassert lcm(1, 2) == 2\nassert lcm(3, 5) == 15\nassert lcm(6, 4) == 12\n\ndef lcm_of_list(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    finds the LCM of the numbers,\n    and returns the resulted LCM,\n    The function should return a number.\n    For example:\n    assert lcm_of_list([1, 2, 3]) => 6\n    assert lcm_of_list([1, 2, 3, 4, 5]) => 60\n    \"\"\"\n    lcm = 1\n    for num in lst:\n        lcm = lcm * num // gcd(lcm, num)\n    return lcm\nassert lcm_of_list([1, 2, 3]) == 6\nassert lcm_of_list([1, 2, 3, 4, 5]) == 60\n\ndef gcd(a, b):\n    \"\"\"Write a function that accepts two numbers as parameters,\n    finds the Greatest Common Divisor of these two numbers,\n    and returns the resulted LCM,\n    The function should return a number.\n    For example:\n    assert gcd(1, 2) => 1\n    assert gcd(3, 5) => 1\n    assert gcd(6, 4) => 2\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\nassert gcd(1, 2) == 1\nassert gcd(3, 5) "}
{"task_id": "task150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n "}
{"task_id": "task151", "completion": "    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum=0\n    for i in lst:\n        if i%2==1 and (type(i)==int or type(i)==float) :\n            sum=sum+i*i\n    return sum\n    raise NotImplementedError()\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that "}
{"task_id": "task152", "completion": ""}
{"task_id": "task153", "completion": "    return ''\n\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    return ''\n\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    exte"}
{"task_id": "task154", "completion": "    if b in a:\n        return True\n    rotated_str = ''\n    rotated_str = b + b\n    if rotated_str.find(b) != -1:\n        return True\n    return False\ndef cycpattern_check(word, pattern):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if pattern in word:\n        return True\n    rotated_str = ''\n    rotated_str = pattern + pattern\n    if rotated_str.find(pattern) != -1:\n        return True\n    return False\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if b in a:\n        return True\n    rotated_str = ''\n    rotated_str = b + b\n    if rotated_str.find(b) != -1:\n        return True\n    return False\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if b in a:\n        return True\n    rotated_str = ''\n    rotated_str = b + b\n    if rotated_str.find(b) != -1:\n        return True\n    return False\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => "}
{"task_id": "task155", "completion": ""}
{"task_id": "task156", "completion": "    return None\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    return None\n\n\ndef int_to_roman_with_errors(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_with_errors(19) == 'XIX'\n    >>> int_to_roman_with_errors(152) == 'CLII'\n    >>> int_to_roman_with_errors(426) == 'CDXXVI'\n    \"\"\"\n    return None\n\n\ndef int_to_mini_roman_with_errors(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman_with_errors(19) == 'xix'\n    >>> int_to_mini_roman_with_errors(152) == 'clii'\n    >>> int_to_mini_roman_with_errors(426) == 'cdxxvi'\n    \"\"\"\n    return None\n\n\ndef int_to_roman_with_errors_and_empty_string(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_with_errors_and_empty_string(19) == 'XIX'\n    >>> int_to_roman_with_errors_and_empty_string(152) == 'CLII'\n    >>> int_to_roman_with_errors_and_empty_string(426) == 'CDXXVI'\n    \"\"\"\n    return None\n\ndef int_to_roman_with_errors_and_empty_string_and_errors(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_with_errors_and_empty_string_and_errors(19) == 'XIX'\n    >>> int_to_roman_with_errors_and_empty_string_and_errors(152) == 'CLII'\n    >>> int_to_roman_with_errors_and_empty_string_and_errors(426) == 'CDXXVI'\n    \"\"\"\n    return None\n\n\ndef int_to_roman_with_errors_and_empty_string_and_errors_and_errors(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_with_errors_and_empty_string_and_errors_and_errors(19) == 'XIX'\n    >>> int_to_roman_with_errors_and_empty_string_and_errors_and_errors(152) == 'CLII'\n    >>> int_to_roman_with_errors_and_empty_string_and_errors_and_errors(426) == 'CDXXVI'\n    \"\"\"\n    return "}
{"task_id": "task157", "completion": ""}
{"task_id": "task158", "completion": "    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len_word = ''\n    for i in words:\n        max_len_word = i if len(i) > len(max_len_word) else max_len_word\n    return max_len_word\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) "}
{"task_id": "task159", "completion": "    if number >= need:\n        return [need,0]\n    elif number < need and number + remaining > need:\n        return [number + remaining, 0]\n    elif number < need and number + remaining < need:\n        return [number, number-need]\n    elif number + remaining < need:\n        return [number + remaining, remaining-need]\n\ndef main():\n    \"\"\"\n    Call the eat function to complete the day's meals.\n    \"\"\"\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n\nif __name__ == '__main__':\n    main()\n  \n  \n  \n  \n  \n  \n  \n  def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if number >= need:\n        return [need,0]\n    elif number < need and number + remaining > need:\n        return [number + remaining, 0]\n    elif number < need and number + remaining < need:\n        return [number, number-need]\n    elif number + remaining < need:\n        return [number + remaining, remaining-need]\n\ndef main():\n    \"\"\"\n    Call the eat function to complete the day's meals.\n    \"\"\"\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n\nif __name__ == '__main__':\n    main()\n  \n  \n  \n  \n  \n  \n  \n  def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 "}
{"task_id": "task160", "completion": "    # TODO: Write your code here\n    operator_dict={\n        '+': lambda x, y: x + y,\n        '-': lambda x, y: x - y,\n        '*': lambda x, y: x * y,\n        '//': lambda x, y: x // y,\n        '**': lambda x, y: x ** y\n    }\n    operator_list = [operator_dict[i] for i in operator]\n    if len(operator_list) == 1:\n        return operator_list[0](operand[0], operand[1])\n    return operator_list[0](operator_list[1](operand[1], operand[2]), operator_list[3](operand[3], operand[4]))\n  \ndef build_equation(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return this string.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = '2 + 3 * 4 - 5'\n    => result = '2 + 3 * 4 - 5'\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # TODO: Write your code here\n    operator_list = [i for i in operator]\n    if len(operator_list) == 1:\n        return operator_list[0]+str(operand[0])\n    operator_dict={\n        '+': lambda x, y: x + y,\n        '-': lambda x, y: x - y,\n        '*': lambda x, y: x * y,\n        '//': lambda x, y: x // y,\n        '**': lambda x, y: x ** y\n    }\n    operator_list = [operator_dict[i] for i in operator]\n    if len(operator_list) == 1:\n        return str(operator_list[0](operator_list[1](operand[1],operand[2]),operator_list[3](operand[3],operand[4])))+str(operand[0])\n    return str(operator_list[0](operator_list[1](str(operator_list[2](operator_list[3](operand[1],operand[2"}
{"task_id": "task161", "completion": "    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result += i.lower()\n            else:\n                result += i.upper()\n        else:\n            result += i\n    return result\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(x.lower() if x.isupper() else x.upper() if x.islower() else x for x in s)\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower() if x.isupper() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper() if x.islower() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper() if x.islower() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(x.upper() if x.islower() else x.lower() if x.isupper() else x for x in s)\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower() if x.isupper() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower() if x.isupper() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower() if x.isupper() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower() if x.isupper() else x, s))\n    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse "}
{"task_id": "task162", "completion": "    if text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest()\n\ndef get_string_list():\n    \"\"\"\n    Read the file 'input.txt' and return a list of strings.\n\n    >>> get_string_list() == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    \"\"\"\n    with open('input.txt', 'r') as f:\n        return f.readlines()\n\ndef write_md5_hashes(strings):\n    \"\"\"\n    Given a list of strings, return None.\n\n    If strings is None, return None.\n\n    Otherwise, write a new file 'output.txt' with each string on a new line.\n    The md5 hash of each string should be on the next line.\n\n    >>> write_md5_hashes(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n    \"\"\"\n    with open('output.txt', 'w') as f:\n        for string in strings:\n            md5_hash = string_to_md5(string)\n            if md5_hash is not None:\n                f.write(md5_hash + '\\n')\n\nif __name__ == '__main__':\n    write_md5_hashes(get_string_list())\n  \ndef test_string_to_md5():\n    \"\"\"\n    >>> test_string_to_md5()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\ndef test_get_string_list():\n    \"\"\"\n    >>> test_get_string_list()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\ndef test_write_md5_hashes():\n    \"\"\"\n    >>> test_write_md5_hashes()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\ntest_string_to_md5()\ntest_get_string_list()\ntest_write_md5_hashes()\n\ndef test_string_to_md5():\n    \"\"\"\n    >>> test_string_to_md5()\n    \"\"\"\n    import hashlib\n    text = ''\n    md5_hash = hashlib.md5(text.encode('ascii')).hexdigest()\n    assert md5_hash is None, \"md5 hash of empty string should be None\"\n    text = 'Hello world'\n    md5_hash = hashlib.md5(text.encode('ascii')).hexdigest()\n    assert md5_hash == '3e25960a79dbc69b674cd4ec67a72c62', \"md5 hash of Hello world should be 3e25960a79dbc69b674cd4ec67a72c62\"\n\ndef test_get_string_list():\n    \"\"\"\n    >>> test_get_string_list()\n    \"\"\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n')\n    strings = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n')\n    strings = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3', '4', '5', '6', '7', '8', '9']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n')\n    strings = ['1', '2', '3', '4', '5', '6', '7', '8']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3', '4', '5', '6', '7', '8']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n4\\n5\\n6\\n7\\n')\n    strings = ['1', '2', '3', '4', '5', '6', '7']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3', '4', '5', '6', '7']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n4\\n5\\n6\\n')\n    strings = ['1', '2', '3', '4', '5', '6']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3', '4', '5', '6']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n4\\n5\\n')\n    strings = ['1', '2', '3', '4', '5']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3', '4', '5']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n2\\n3\\n')\n    strings = ['1', '2', '3']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1', '2', '3']\"\n    with open('input.txt', 'w') as f:\n        f.write('1\\n')\n    strings = ['1']\n    assert get_string_list() == strings, \"input.txt should have the same lines as ['1'"}
{"task_id": "task163", "completion": "    ints = range(a, b+1)\n    ints = [i for i in ints if i%2 == 0]\n    ints.sort()\n    return ints\n\nassert(generate_integers(2, 8) == [2, 4, 6, 8])\nassert(generate_integers(8, 2) == [2, 4, 6, 8])\nassert(generate_integers(10, 14) == [])\nprint(\"YOUR CODE IS CORRECT!\""}

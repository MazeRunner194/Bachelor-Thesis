{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # Initialize balance to zero\n\n    for operation in operations:\n        balance += operation  # Update balance with each operation\n\n        if balance < 0:  # Check if balance falls below zero\n            return True  # Return True if balance is negative\n\n    return False  # If loop completes without balance falling below zero, return False"}
{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # Starting balance is 0\n    for operation in operations:\n        balance += operation  # Update the balance after each operation\n        if balance < 0:  # If balance goes below zero, return True\n            return True\n    return False  # If we finish iterating through list without going below zero, return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:  # Check if the list is empty\n        return (0, 1)\n\n    total_sum = sum(numbers)  # Calculate the sum of the integers in the list\n    total_product = 1  # Initialize product to 1 as 1 * any number = that number\n    for num in numbers:\n        total_product *= num  # Multiply current total product by each number in the list\n\n    return (total_sum, total_product)"}
{"task_id": "python/1", "language": "python", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0  # Initialize the sum to 0\n    product = 1  # Initialize the product to 1\n\n    for num in numbers:  # Iterate through each number in the list\n        sum += num  # Add the current number to the sum\n        product *= num  # Multiply the current number with the product\n\n    return (sum, product)  # Return a tuple containing the sum and product"}
{"task_id": "python/2", "language": "python", "completion": "Sure, I can help you with that. The `string_xor` function takes two strings A and B as input parameters, both consisting only of the characters \"1\" and \"0\". It then performs a binary XOR operation on these inputs and returns the result as a new string.\n\nHere's how the function works:\n1. Initialize an empty string `result` to store the final result.\n2. Iterate over each character in A and B using their indices.\n3. For each pair of characters (A[i], B[i]), compare them. If they are equal, append \"0\" to `result`. If they are not equal, append \"1\" to `result`.\n4. After iterating through all pairs of characters, return the `result` string as the output.\n\nFor example, if we call `string_xor('010', '110')`, it will compare each character in A and B:\n- '0' XOR '1' = '1'\n- '0' XOR '1' = '1'\n- '1' XOR '0' = '1'\n\nSo the function returns '100'."}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\ndef string_xor(A: str, B: str) -> str:\n    return \"\".join(\"1\" if bit1 != bit2 else \"0\" for bit1, bit2 in zip(A, B))"}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if input list is empty\n        return None\n    longest_string = max(strings, key=len)  # Use built-in Python function max() with len as the key\n    return longest_string"}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # If the input list is empty, return None\n        return None\n    longest_string = strings[0]  # Initialize the longest string as the first element of the list\n    for s in strings[1:]:  # Start iterating from the second element onward\n        if len(s) > len(longest_string):  # If the current string is longer than the longest found so far\n            longest_string = s  # Update the longest string to be this one\n    return longest_string  # Return the longest string found"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(A: int, B: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while A != B:\n        if A > B:\n            A -= B\n        else:\n            B -= A\n    return A"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(A: int, B: int) -> int:\n    # Base case: if one number is zero, the gcd is the other number\n    if A == 0:\n        return B\n    elif B == 0:\n        return A\n\n    # Recursive step: Apply Euclidean algorithm\n    else:\n        return greatest_common_divisor(B % A, A)"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary mapping from number to its numeric value\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, \n                'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n\n    # Convert the string of numbers into a list of numeric values\n    num_list = [num_dict[number] for number in numbers.split()]\n\n    # Sort the list\n    num_list.sort()\n\n    # Convert the sorted list back to a string\n    sorted_str = ' '.join(str(num) for num in num_list)\n\n    return sorted_str"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_dict[x])\n\n    return ' '.join(sorted_numbers)"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:  # check if the list has at least two elements\n        raise ValueError(\"The input list must have at least two elements.\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if min_val == max_val:  # handle case where all numbers in the list are the same\n        return [0.0] * len(numbers)\n\n    rescaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled_numbers"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\nprint(flip_case('Hello'))  # Outputs: hELLO"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    # Create an empty list to store the positive numbers\n    positive_numbers = []\n\n    # Iterate over each number in the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # If it is, append it to the list of positive numbers\n            positive_numbers.append(num)\n\n    # Return the list of positive numbers\n    return positive_numbers"}
{"task_id": "python/9", "language": "python", "completion": "The function `Is_prime(n)` checks if a number `n` is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The given implementation of the function seems to be correct, as it correctly identifies whether a number is prime or not based on the conditions provided in the docstring.\n\nHere's how the code works:\n\n1. It first checks if `n` is less than 2, which is the smallest prime number. If `n` is less than 2, the function returns `False`.\n2. Then it iterates through numbers from 2 to the square root of `n`, checking if any of these numbers divide `n` evenly (i.e., if `n % i == 0` for some `i`).\n3. If `n` is divisible by any number within this range, it's not prime, and the function returns `False`.\n4. If `n` is not divisible by any of these numbers (meaning it has no positive divisors other than 1 and itself), it's prime, and the function returns `True`.\n\nExample usage:\n- `Is_prime(6)` will return `False` because 6 is not a prime number.\n- `Is_prime(101)` will return `True` because 101 is a prime number."}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    # Check if n is less than or equal to 1, which are not prime numbers\n    if n <= 1:\n        return False\n    \n    # Iterate from 2 up to the square root of n (inclusive)\n    for i in range(2, int(n**0.5) + 1):\n        # If n is divisible by any number between 2 and sqrt(n), it's not prime\n        if n % i == 0:\n            return False\n    \n    # If the loop completes without finding a divisor, n is prime\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_elements = []  # list to store unique elements\n\n    for i in l:\n        if i not in unique_elements:  # check if element is not already in unique_elements\n            unique_elements.append(i)  # add element to unique_elements\n\n    return sorted(unique_elements)  # return sorted unique elements"}
{"task_id": "python/11", "language": "python", "completion": "This is a Python function that finds the n-th Fibonacci number which is also prime. Here's how it works:\n\n1. The function takes an integer `n` as its input.\n2. It initializes two variables, `a` and `B`, to 0 and 1 respectively. These represent the first two numbers in the Fibonacci sequence.\n3. It enters a loop that continues until it has found the n-th prime Fibonacci number.\n4. Inside the loop:\n    - It calculates the next Fibonacci number by adding `A` and `B`.\n    - It checks if this new Fibonacci number is prime using the helper function `is_prime(num)`.\n    - If the new Fibonacci number is prime, it increments a counter variable called `count` by 1.\n    - If `count` equals `n`, it means that it has found the n-th prime Fibonacci number and returns it.\n5. Once the loop exits (which means it has found all prime Fibonacci numbers less than or equal to n), it doesn't return anything because the function is supposed to be used in a context where its output can be ignored.\n\nTo find whether a number is prime, `is_prime` helper function checks that the number is greater than 1 and has no divisors other than 1 and itself. If it finds such a divisor, it returns False; otherwise, it returns True."}
{"task_id": "python/11", "language": "python", "completion": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, B = 0, 1\n        while True:\n            yield A\n            A, B = B, A + B\n\n    count = 0\n    for fib_num in fibonacci():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n\n# Test cases\nprint(prime_fib(1))  # Outputs: 2\nprint(prime_fib(2))  # Outputs: 3\nprint(prime_fib(3))  # Outputs: 5\nprint(prime_fib(4))  # Outputs: 13\nprint(prime_fib(5))  # Outputs: 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(lst):\n    lst.sort()  # Sort the list to make it easier to find triplets\n    n = len(lst)\n\n    for i in range(0, n-2):\n        left, right = i + 1, n - 1\n\n        while left < right:\n            current_sum = lst[i] + lst[left] + lst[right]\n\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1  # Move towards larger numbers\n            else:\n                right -= 1  # Move towards smaller numbers\n\n    return False"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n-2):  # No need to check last two elements separately\n        left, right = i+1, n-1  # Initialize left and right pointers\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:  # If the sum is zero, return True\n                return True\n            elif total < 0:  # If the sum is less than zero, increment left pointer\n                left += 1\n            else:  # If the sum is greater than zero, decrement right pointer\n                right -= 1\n    return False  # Return False if no triples sum to zero"}
{"task_id": "python/13", "language": "python", "completion": "This Python function `pairs_sum_to_zero` is designed to check whether there are any two distinct elements in the input list that sum up to zero. Here's how it works step by step:\n\n1. The function starts by initializing an empty set named `seen`. This set will store unique numbers we've already encountered while iterating through the list.\n\n2. It then loops over each element `num` in the input list `l`.\n\n3. For each number, it calculates its negation as `-num`.\n\n4. Then, it checks if this negated number exists in the set of seen numbers using `if -num in seen:`. If it does, it means there is a pair whose sum equals zero (since we've encountered both numbers before), so it returns True.\n\n5. If the negated number is not found in the set, it adds the current number `num` to the set of seen numbers using `seen.add(num)`. This way, each number is only considered once.\n\n6. After checking all elements, if no pair summing up to zero was found, the function returns False.\n\n7. The base case in the docstring examples checks for scenarios where there are no pairs that sum to zero (e.g., lists with a single element or lists without any two distinct numbers that add up to zero).\n\n8. This function works efficiently for large lists as it only requires a single pass over the list, making its time complexity O(n), where n is the number of elements in the list."}
{"task_id": "python/13", "language": "python", "completion": "print(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # Output: True\nprint(pairs_sum_to_zero([1, 3, 5, 0]))       # Output: False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    # Initialize the first four values in the sequence.\n    fib4_seq = [0, 0, 2, 0]\n\n    # Calculate the remaining values in the sequence up to n.\n    for i in range(4, n + 1):\n        next_val = sum(fib4_seq[-4:])  # Sum the last four elements.\n        fib4_seq.append(next_val)  # Add the next value to the sequence.\n\n    return fib4_seq[n]  # Return the n-th element of the sequence."}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n < 2: return n * (1 - n % 2)\n    elif n == 2: return 2\n    else:\n        fib = [0, 0, 2, 0]\n        for _ in range(4, n + 1):\n            fib.append(sum(fib))\n            del fib[0]\n        return fib[-1]"}
{"task_id": "python/15", "language": "python", "completion": "def median(l):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n\n    if length % 2 == 0:\n        # If the list has an even number of elements,\n        # return the average of the two middle elements.\n        mid1 = sorted_list[length // 2 - 1]\n        mid2 = sorted_list[length // 2]\n        return (mid1 + mid2) / 2\n    else:\n        # If the list has an odd number of elements,\n        # return the middle element.\n        return sorted_list[length // 2]\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/15", "language": "python", "completion": "def median(l):\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 0:  # If the length is even\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2.0\n    else:  # If the length is odd\n        return sorted_list[n//2]\n\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "print(Is_palindrome(''))  # Output: True\nprint(Is_palindrome('aba'))  # Output: True\nprint(Is_palindrome('aaaaa'))  # Output: True\nprint(Is_palindrome('zbcd'))  # Output: False"}
{"task_id": "python/16", "language": "python", "completion": "This Python function `Is_palindrome` determines whether a given string is a palindrome, which means it reads the same backwards as forwards. The function checks if the input string equals its reverse and returns `True` if they match or `False` otherwise.\n\nHere's how the function works:\n\n1. It starts by defining the function with one parameter, `text`, which is the string to be checked.\n2. Inside the function, it uses Python's slicing feature to create a reversed version of the input string (`text[::-1]`).\n3. Then it compares this reversed string with the original `text`.\n4. If they are identical (i.e., `text` is a palindrome), the function returns `True`. Otherwise, it returns `False`.\n\nThe provided test cases in the docstring help verify that the function behaves as expected:\n\n- `Is_palindrome('')` should return `True`, since an empty string reads the same backward as forward.\n- `Is_palindrome('aba')` should return `True`, because 'aba' is a palindrome.\n- `Is_palindrome('aaaaa')` should also return `True`, as all characters are the same in reverse order.\n- `Is_palindrome('zbcd')` should return `False`, because 'zbcd' does not read the same backward as forward."}
{"task_id": "python/17", "language": "python", "completion": "The function `remove_vowels` takes a string as input and returns the string with all vowels removed. The vowels are 'a', 'E', 'I', 'O', and 'U'. The function works by iterating over each character in the input string and checking if it is a vowel. If it is not a vowel, it is added to a new string which is returned at the end of the function.\n\nThe provided test cases cover various scenarios such as empty strings, strings with newline characters, strings with only vowels, strings with a mix of vowels and consonants, and strings with capital letters and lowercase letters."}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"  # Vowels to be removed\n    return text.replace(vowels, '')  # Remove all vowels from the input string"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)"}
{"task_id": "python/19", "language": "python", "completion": "markdown\ndef add(x: int, y: int):\n    \"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\""}
{"task_id": "python/19", "language": "python", "completion": "The function `add` takes two integer arguments `x` and `y`, and returns their sum. Here are the examples provided in the docstring:\n\n- For input `add(2, 3)`, the expected output is `5`.\n- for input `add(5, 7)`, the expected output is `12`."}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"Check if two words have the same characters.\"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test cases as given in the docstring\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))             # True\nprint(same_chars('dddddddabc', 'abcd'))              # True\nprint(same_chars('eabcd', 'dddddddabc'))             # False\nprint(same_chars('abcd', 'dddddddabce'))             # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    # Convert lists to sets to remove duplicates and find intersection\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    # Using set to remove duplicates and find common elements\n    result = sorted(list(set(l1).intersection(set(l2))))\n    return result"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    maxPrime = 2\n    while n > maxPrime * maxPrime:\n        if n % maxPrime == 0:\n            n //= maxPrime\n        else:\n            maxPrime += 1\n    return n"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))  # Outputs: 29\nprint(largest_prime_factor(2048))   # Outputs: 2"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Return the sum of all numbers from 1 to n (inclusive).\n\n    Args:\n        n (int): The upper limit of the range.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n\n    Examples:\n        >>> sum_to_n(30)\n        465\n        >>> sum_to_n(100)\n        5050\n        >>> sum_to_n(5)\n        15\n        >>> sum_to_n(10)\n        55\n        >>> sum_to_n(1)\n        1\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    # Initialize an empty list to store the coefficients of the derivative polynomial.\n    derivative_coeffs = []\n    \n    # Loop through each coefficient and its corresponding index.\n    for i, coeff in enumerate(xs):\n        # Skip the constant term (index 0).\n        if i > 0:\n            # Calculate the derivative for this term and append it to the list.\n            derivative_coeffs.append(i * coeff)\n    \n    return derivative_coeffs"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Start from the first non-constant term (index 1) and calculate derivatives\n    for i in range(1, len(xs)):\n        xs[i] *= i + 1  # Multiply each coefficient by its power\n    \n    return xs[:len(xs) - 1]  # Return the derivative coefficients (excluding the constant term)\n\n# Test the function with provided data points\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))       # Output: [2, 6]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, B, C = 0, 0, 1\n    for _ in range(3, n + 1):\n        A, B, C = B, C, A + B + C\n    return C"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n < 3:\n        return n % 2\n\n    a, b, c = 0, 1, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    A word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # count regular vowels\n    vowels = \"aeiou\"\n    count = sum(s.lower().count(v) for v in vowels)\n\n    # check if 'y' is at the end and is a vowel\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n\n    return count"}
{"task_id": "python/27", "language": "python", "completion": ">>> vowels_count(\"abcdeAE\")\n2"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    for num, count in freq.items():\n        if count >= num:\n            return num\n    return -1"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    count = {} # create an empty dictionary to hold counts of each number\n    for num in lst:\n        if num not in count: \n            count[num] = 1\n        else: \n            count[num] += 1\n\n    max_val = -1\n    for key, value in count.items(): # loop through the dictionary to find the greatest integer...\n        if key <= value and key > max_val:\n            max_val = key # ...that has a frequency greater than or equal to its value\n\n    return max_val"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(A, b, c):\n    # Checking for validity of the triangle\n    if A + b > c and A + c > b and b + c > A:\n        # Calculating semi-perimeter\n        s = (A + b + c) / 2\n\n        # Using Heron's formula to calculate area\n        area = math.sqrt(s * (s - A) * (s - b) * (s - c))\n\n        return round(area, 2)   # Rounding the result to 2 decimal places\n    else:\n        return -1  # Return -1 if the sides don't form a valid triangle"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(A, B, C):\n    # Check if the sides form a valid triangle\n    if A + B <= C or A + C <= B or B + C <= A:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (A + B + C) / 2.0\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - A) * (s - B) * (s - C))\n\n    # Round the area to two decimal places and return it\n    return round(area, 2)"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # It's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) <= w:\n        return q == q[::-1]\n    else:\n        return False\n\n# Test cases to verify the correctness of the code\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1]"}
{"task_id": "python/31", "language": "python", "completion": "def Is_multiply_prime(a):\n    if a < 2:\n        return False\n\n    prime_factors = []\n    divisor = 2\n    while a >= divisor**2:\n        if a % divisor == 0:\n            prime_factors.append(divisor)\n            A //= divisor\n        else:\n            divisor += 1\n\n    prime_factors.append(A)\n\n    return len(prime_factors) == 3 and all([IsPrime(factor) for factor in prime_factors])\n\ndef IsPrime(n):\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(A):\n    if A < 2:\n        return False\n    for i in range(2, int(A**0.5)+1):\n        if A % i == 0:\n            j = A // i\n            if j >= i and is_prime(i) and is_prime(j):\n                return True\n    return False\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove '0b' prefix.\n    return f\"db{binary}db\"  # Add 'db' at beginning and end of string."}
{"task_id": "python/33", "language": "python", "completion": "def Is_happy(s):\n    if len(s) < 3:  # Check if the string length is less than 3\n        return False  # If so, return False as it cannot be happy\n    for i in range(len(s)-2):  # Iterate over all possible sets of three consecutive letters\n        if len(set(s[i:i+3])) < 3:  # Check if the set of three consecutive letters has less than 3 unique characters\n            return False  # If so, return False as it cannot be happy\n    return True  # If the loop completes without returning False, the string is happy and the function returns True"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:  # Check if the length of string is less than 3\n        return False\n    for i in range(len(s)-2):  # Iterate over all substrings of length at least 3\n        if len(set(s[i:i+3])) < 3:  # Check if there are any repeating characters in the substring\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    return [\n        'A+' if g == 4.0 else\n        'A' if g > 3.7 else\n        'A-' if g > 3.3 else\n        'B+' if g > 3.0 else\n        'B' if g > 2.7 else\n        'B-' if g > 2.3 else\n        'C+' if g > 2.0 else\n        'C' if g > 1.7 else\n        'C-' if g > 1.3 else\n        'D+' if g > 1.0 else\n        'D' if g > 0.7 else\n        'D-' if g > 0.0 else 'E' for g in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    return [\n        'A+' if g == 4.0 else\n        'A' if g > 3.7 else\n        'A-' if g > 3.3 else\n        'B+' if g > 3.0 else\n        'B' if g > 2.7 else\n        'B-' if g > 2.3 else\n        'C+' if g > 2.0 else\n        'C' if g > 1.7 else\n        'C-' if g > 1.3 else\n        'D+' if g > 1.0 else\n        'D' if g > 0.7 else\n        'D-' if g > 0.0 else\n        'E' for g in grades\n    ]\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    n = len(string)\n\n    # Check if n is less than or equal to 1, it's not prime.\n    if n <= 1:\n        return False\n\n    # If n is 2, it's prime.\n    elif n == 2:\n        return True\n\n    # If n is divisible by any number from 2 to its square root, it's not prime.\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if (n % i) == 0:\n                return False\n        return True\n\n# Test cases\nprint(prime_length('Hello'))  # Returns: True\nprint(prime_length('abcdcba'))  # Returns: True\nprint(prime_length('kittens'))  # Returns: True\nprint(prime_length('orange'))  # Returns: False"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    # Check if length of string is less than or equal to 1, which are not primes\n    if len(string) <= 1:\n        return False\n    # Check if length of string is divisible by any number from 2 to sqrt(len(string))\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    # If none of the above conditions are met, string length is a prime number\n    return True"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Initialize sum to zero\n    sum = 0\n\n    # Convert N to integer and loop over its digits\n    for digit in str(int(N)):\n        sum += int(digit)\n\n    # Return binary representation of the sum\n    return bin(sum)[2:]"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Convert N to string and sum its digits\n    sum_digits = sum(int(d) for d in str(N))\n    \n    # Convert the sum of digits to binary and return it\n    return bin(sum_digits)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    return sorted(sorted(coordinates, key=lambda y: -y[1]), key=lambda x: x[0])\n\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1))\n# Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))\n# Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))\n# Output: [(2, 2)]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        # Find all occurrences of x in the current row\n        indices = [j for j, val in enumerate(row) if val == x]\n        # If found any occurrence, append (i, j) to result with j sorted in descending order\n        if indices:\n            result.extend([(i, j) for j in sorted(indices, reverse=True)])\n    # Sort the final result by row first and column Second\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nprint(get_row([], 1)) # Output: []\nprint(get_row([[], [1], [1, 2, 3]], 3)) # Output: [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:  # if the list has less than 2 elements, return None.\n        return None\n\n    first_min = min(lst[0], lst[1])  # Initialize first minimum value as the smallest among the first two numbers.\n    second_min = float('inf')   # Initialize Second minimum value with infinity.\n\n    for num in lst:\n        if num < first_min:  # If the number is smaller than first minimum, update both first and Second minimum.\n            Second_min = First_min\n            First_min = num\n        elif second_min > num > First_min:  # If the number is larger than First but smaller than Second, update Second.\n            second_min = num\n\n    return second_min if second_min != float('inf') else None  # Return Second minimum value or None if it's still infinity."}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:  # if list has less than 2 elements\n        return None\n    else:\n        unique_list = list(set(lst))  # Remove duplicates from the list\n        if len(unique_list) < 2:  # If unique list has less than 2 elements\n            return None\n        else:\n            unique_list.sort()  # Sort the list in ascending order\n            return unique_list[1]  # Return the second element\n\n# Test the function\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))  # Output: None\nprint(next_smallest([1, 1]))  # Output: None"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n            count += 1\n    return count\n\nprint(Is_bored(\"Hello world\"))  # Output: 0\nprint(Is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n# Test the function\nprint(Is_bored(\"Hello world\"))  # Output should be 0\nprint(Is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output should be 1\n```\n\nIn this code, we first split the input string `S` into sentences using the period character as a delimiter. Then, for each sentence, we split it into words and check if the first word is 'I'. If it is, we increment the boredoms counter. Finally, we return the total count of boredoms found in the string."}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n\ndef sum_of_digits(num):\n    return sum([int(digit) for digit in str(num)])\n\ndef largest_prime(lst):\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        largest_p = max(primes)\n        return sum_of_digits(largest_p)\n    else:\n        return 0\n\nprint(largest_prime([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # 10\nprint(largest_prime([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # 25\nprint(largest_prime([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # 13\nprint(largest_prime([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # 11\nprint(largest_prime([0,81,12,3,1,21])) # 3\nprint(largest_prime([0,8,1,2,1,7])) # 7"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    def isPrime(n):\n        if n == 1: return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0: return False\n        return True\n\n    prime_nums = [i for i in lst if IsPrime(i)]\n    max_prime = max(prime_nums)\n    return sum(map(int, str(max_prime)))"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    lower = all = None\n    for key in dictionary:\n        if not isinstance(key, str):\n            return False\n        if lower == None and All == None:\n            lower = key.islower()\n            All = key.isupper()\n        else:\n            if not (key.islower() == lower or key.isupper() == All):\n                return False\n    return True"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(input_dict):\n    if not input_dict:  # Check if dictionary is empty\n        return False\n\n    all_lower = all_upper = True\n\n    for key in input_dict.keys():\n        if not isinstance(key, str):  # Ensure key is a string\n            return False\n\n        if key != key.lower():  # Check if key is lower case\n            all_lower = False\n\n        if key != key.upper():  # Check if key is upper case\n            all_upper = False\n\n    return all_upper or all_lower"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    try:\n        num = float(value)\n        if num > 0:\n            return int(num + 0.5) if (num - int(num)) >= 0.5 else int(num)\n        else:\n            return int(num - 0.5) If (int(num) - num) <= -0.5 else int(num)\n    except ValueError:\n        raise TypeError(\"The input value should be a string that represents a number\")"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    flt = float(value)  # convert string to float\n    intgr = int(flt)   # get integer part of the number\n    if flt - intgr >= 0.5 or (flt % 1 == 0.5 and flt > 0): \n        return intgr + 1  # round away from zero if fraction is greater than or equal to 0.5\n    elif flt - intgr <= -0.5 or (flt % 1 == -0.5 and flt < 0): \n        return intgr - 1  # else, round towards zero\n    else:\n        return intgr       # if the number is equidistant from two integers, return the integer that is farther from zero\n\n# test cases\nprint(closest_integer(\"10\"))  # returns: 10\nprint(closest_integer(\"15.3\"))  # returns: 15\nprint(closest_integer(\"14.5\"))  # returns: 15\nprint(closest_integer(\"-14.5\"))  # returns: -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:  # If n is even\n            next_number = stones[-1] + 2\n        else:  # If n is odd\n            next_number = stones[-1] + 2\n        stones.append(next_number)\n    return stones"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = []\n    current_level = n\n    for i in range(n):\n        pile.append(current_level)\n        if n % 2 == 0:  # If n is even\n            current_level += 2\n        else:  # If n is odd\n            current_level += 2\n    return pile"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Split the string by comma or space, and remove any leading/trailing whitespace from each word\n    return [word.strip() for word in s.replace(', ', ',').split(' ')]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Split the string into words using a regular expression to match commas or spaces\n    words = re.split('[, ]+', s)\n    return words\n\n# Test cases\nprint(words_string(\"Hi, My name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    for num in range(y, x-1, -1):  # Start from y and go down to x (inclusive) with step -1\n        if num % 2 == 0:             # Check if the number is even\n            return num              # Return it as soon as we find one\n    return -1                      # If no even numbers are found, return -1"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x-1, -1):  # Iterate over numbers from y to x in reverse order\n        if num % 2 == 0:  # Check if the number is even\n            return num\n    return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    count = m - n + 1\n    average = round(total/count)\n    return bin(average)"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((sum(range(n, m+1)))/(m-n+1))\n        return bin(average)"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # if i is even\n            result.append(factorial(i))\n        else:  # If i is odd\n            result.append(sum(range(1, i+1)))\n    return result\n\nprint(f(5))  # Outputs: [1, 2, 6, 24, 15]"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    factorial = lambda x: 1 if x==0 else x * factorial(x-1)\n    return [factorial(i) if i%2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            if num % 2 == 0:  # Check if the number is even\n                even += 1\n            else:  # If not, it must be odd\n                odd += 1\n    return (even, odd)\n\nprint(even_odd_palindrome(3))  # Outputs: (1, 2)\nprint(even_odd_palindrome(12))  # Outputs: (4, 6)"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # if the array is empty, return True\n        return True\n\n    sorted_arr = sorted(arr)  # Sort the array in non-decreasing order\n    for i in range(len(arr)):  # Iterate over the array\n        shifted_arr = arr[i:] + arr[:i]  # Perform a right shift operation\n\n        if shifted_arr == sorted_arr:  # If the shifted array matches the sorted array, return True\n            return True\n\n    return False  # If no matching shift was found, return False"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:  # If the array is empty, return True\n        return True\n\n    count = 0  # Count how many times we need to shift the array\n    for i in range(len(arr)):  \n        if arr[i] > arr[(i+1) % len(arr)]:  # If current element is greater than next one, increment count\n            count += 1\n\n    return count <= 1  # Return True if we need to shift array at most once, otherwise False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_in_lst1 = any(x % 2 != 0 for x in lst1)\n    even_in_lst2 = any(x % 2 == 0 for x in lst2)\n\n    if odd_in_lst1 and even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    even_count = sum(num % 2 == 0 for num in lst1 + lst2)\n    if even_count >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Remove all characters in s that are equal to any character in c\n    new_s = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = new_s == new_s[::-1]\n\n    return (new_s, is_palindrome)\n\n# Test the function with your examples\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd',False)\nprint(reverse_delete(\"abcdef\", \"b\"))   # Output: ('acdef',False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc',True)"}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result[::-1], result == result[::-1])"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    total_pourings = 0\n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            num_pourings = math.ceil(water_units / capacity)\n            total_pourings += num_pourings\n\n    return total_pourings"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    result = 0\n    for row in grid:\n        units_of_water = sum(row)\n        while units_of_water > 0:\n            units_of_water -= capacity\n            result += 1\n    return result"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    # Define a set of vowels for easy lookup\n    vowels = 'aeiouAEIOU'\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store our result\n    result = []\n    \n    # Iterate over the words\n    for word in words:\n        # Count the consonants in the current word\n        consonant_count = sum(1 for c in word if c not in vowels)\n        \n        # If we found exactly n consonants, add it to our result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "python/53", "language": "python", "completion": "import re\n\ndef consonants(string):\n    return len(re.findall('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', string))\n\ndef select_words(s, n):\n    return [word for word in s.split() if consonants(word) == n]"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    # Use a min-heap and insert first k elements\n    minHeap = arr[:k]\n    heapq.heapify(minHeap)  # Convert list to heap\n    \n    # For the rest of the array, replace the smallest element with the current element\n    for num in arr[k:]:\n        if minHeap[0] < num:\n            heapq.heappop(minHeap)  # Remove smallest from heap\n            heapq.heappush(minHeap, num)  # Add current to heap\n\n    return sorted(list(minHeap))  # Return sorted list of heap"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Initialize min-heap\n    min_heap = []\n\n    # Add all elements to the heap\n    for num in arr:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if min_heap[0] < num:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n\n    # Pop all elements from the heap and return them as sorted list\n    return sorted(min_heap, reverse=True)"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:  # check if the element has at most two digits\n            sum += arr[i]\n    return sum\n\n# Test with the provided example\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 4))  # Output: 24"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100 and arr[i] > -100:  # check if the element has at most two digits\n            sum += arr[i]\n    return sum"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    # If intervals don't intersect return \"NO\"\n    if max(interval1[0], interval2[0]) > min(interval1[1], interval2[1]):\n        return \"NO\"\n    else:\n        # Calculate length of intersection\n        length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n        # Check if length is prime\n        if length > 1 and all(length%i!=0 for i in range(2, int(length**0.5)+1)):\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:  # No intersection\n        return \"NO\"\n\n    length = end - start + 1  # Length of the intersection\n\n    if length == 1:\n        return \"NO\"\n    elif length == 2:\n        return \"YES\"\n\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    # Base case: the first three numbers in the sequence\n    sequence = [1, 3, 2]\n\n    if n == 0:\n        return sequence[:1]\n    elif n == 1:\n        return sequence[:2]\n    elif n == 2:\n        return sequence[:3]\n\n    for i in range(3, n + 1):\n        # If i is even\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            # If i is odd\n            sequence.append(sum(sequence[-3:]))\n\n    return sequence"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    sequence = [1, 3]  # Initializing the list with base cases\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(int(i / 2))  # If n is even, tri(n) = i/2\n        else:\n            sequence.append(sum(sequence[-3:]))  # If n is odd, tri(n) = tri(n-1) + tri(n-2) + tri(n+1)\n\n    return sequence[:n+1]  # Return the first n+1 numbers of the sequence"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    has_odd = False  # Flag to check if there is at least one odd digit\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1  # Start with the product as 1 (multiplicative identity)\n    has_odd = False  # Flag to check if there is at least one odd digit\n    while n > 0:\n        digit = n % 10  # Extract the last digit\n        if digit % 2 == 1:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    return product if has_odd else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            # If the stack is not empty after popping, it means there are nested brackets\n            if stack:\n                return True\n    return False\n\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "python/59", "language": "python", "completion": "def Is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']' and stack:\n            stack.pop()\n            # If there are still brackets left after popping, it means we have a nested structure\n            if stack:\n                return True\n    return False"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num)**2 for num in lst])"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if txt is empty\n    if not txt:\n        return False\n\n    # Get last character of the string\n    last_char = txt[-1]\n\n    # Check if the last character is an alphabetical character\n    if last_char.isalpha():\n\n        # Check if it's a part of a word or not\n        if len(txt) == 1 or (len(txt) > 1 and txt[-2].isspace()):\n            return True\n\n    return False"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if string is empty or last character is not alphabet\n    if not txt or not txt[-1].isalpha():\n        return False\n    \n    # Split the string into words and get the last word\n    words = txt.split()\n    last_word = words[-1]\n\n    # Check if the last character of the last word is alphabet \n    if not last_word[-1].isalpha():\n        return False\n\n    return True"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n\n    return (max_neg, min_pos)"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n    \ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    if n <= 0:\n        return None\n\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n\n    return result\n\n# Test the function\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "python/65", "language": "python", "completion": "def isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if IsPrime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "python/65", "language": "python", "completion": "def isPrime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if (n % i) == 0:\n                return False\n        return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if IsPrime(len(word))]\n    return \" \".join(prime_length_words)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Split each fraction into numerator and denominator\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    # Calculate the product of the fractions\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0"}
{"task_id": "python/66", "language": "python", "completion": "def gcd(a, b):  # Function to calculate the Greatest Common Divisor (GCD) of two numbers.\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef simplify(x, n):\n    numerator_1, denominator_1 = map(int, x.split('/'))  # Convert string to integer and split the fraction.\n    numerator_2, denominator_2 = map(int, n.split('/'))\n\n    # Calculate the GCD of both numerators and denominators.\n    gcd_1 = gcd(numerator_1, numerator_2)\n    gcd_2 = gcd(denominator_1, denominator_2)\n\n    # Divide both numerators and denominators by their respective GCDs.\n    x_simplified = (numerator_1 // gcd_1 * numerator_2) // gcd_2\n    n_simplified = (denominator_1 // gcd_2 * denominator_2) // gcd_1\n\n    # If the resulting fraction is a whole number, return True. Otherwise, return False.\n    return x_simplified % n_simplified == 0"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    # Calculate the sum of digits for each number in the list\n    sum_digits = [sum(int(digit) for digit in str(abs(num))) for num in nums]\n\n    # Create a list of tuples where each tuple contains the original number, its index, and the sum of digits\n    indexed_sums = [(num, i, s) for i, (num, s) in enumerate(zip(nums, sum_digits))]\n\n    # Sort the list of tuples first by the sum of digits, then by the original index\n    sorted_list = sorted(indexed_sums, key=lambda x: (x[2], x[1]))\n\n    # Extract only the original numbers from the sorted list of tuples\n    return [num for num, _, _ in sorted_list]"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    # Calculate the sum of digits for each number and pair it with its index\n    sum_with_index = [(sum(int(digit) for digit in str(abs(num))), i) for i, num in enumerate(nums)]\n\n    # Sort the pairs first by the sum of digits (ascending order), then by the original index (descending order)\n    sum_with_index.sort()\n\n    # Extract just the numbers from the sorted pairs and return them\n    return [num for _, num in sum_with_index]"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # Convert number to string and remove negative sign if any\n            first_digit, last_digit = int(str_num[0]), int(str_num[-1])   # Get first and Last digit\n            if first_Digit % 2 == 1 and last_digit % 2 == 1:  # Check if both digits are odd\n                count += 1\n    return count"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    A = [(i*i - i + 1) % 3 for i in range(1, n+1)]  # Calculate values of A[]\n    count = 0  # Initialize count of triples\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:  # Check if sum of elements is a multiple of 3\n                    count += 1\n\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    solar_system = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n\n    start = min(solar_system[planet1], solar_system[planet2])\n    end = max(solar_system[planet1], solar_system[planet2])\n\n    return tuple(planet for planet, distance in solar_system.items() if start < distance < end)"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n    start, end = min(solar_system.index(planet1), solar_system.index(planet2)), max(solar_system.index(planet1), solar_system.index(planet2))\n    return tuple(solar_system[start+1:end])\n\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: ('Saturn', 'Uranus')\nprint(bf(\"Earth\", \"Mercury\"))   # Output: ('Venus',)\nprint(bf(\"Mercury\", \"Uranus\"))  # Output: ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    if not lst:  # check if the input list is empty\n        return 0\n\n    return sum([x**2 for x in lst if x > 0 and x % 2 == 1])  \n    # use a list comprehension to generate a list of squared odd numbers from the input list, then return their sum"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    if not lst: # if the list is empty\n        return 0\n\n    return sum([num**2 for num in lst if num > 0 and num % 2 == 1])"}
{"task_id": "python/73", "language": "python", "completion": "def strongest_extension(class_name, extensions):\n    strengths = {extension: sum([1 if c.isupper() else -1 for c in extension]) for extension in extensions}\n    strongest_extension = max(strengths, key=strengths.get)\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    # Calculate the strength for each extension\n    strengths = {extension: sum((ord(c) - 65 < 0)*2 - (ord(c) - 97 >= 0)*1 for c in extension) for extension in extensions}\n\n    # Find the strongest extension\n    strongest_extension = max(strengths, key=strengths.get)\n\n    return class_name + '.' + strongest_extension"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A , b):\n    # Concatenate A with itself\n    concat = A + A\n\n    # Generate all possible rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n\n    # Check if any rotation of b is a substring of the concatenated string\n    return any(rotation in concat for rotation in rotations)"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A, B):\n    # concatenate A with itself to handle rotations\n    double_A = A + A\n    # check if B is a substring of double_A\n    return B in double_A"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"}\n    roman_string = ''\n\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman_string += roman_numerals[value]\n            number -= value\n               \n    return roman_string"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = {\n        1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\",\n        50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\",\n        900: \"cm\", 1000: \"m\"\n    }\n\n    num_values = sorted(roman_numerals.keys(), reverse=True)\n    output = \"\"\n\n    for num in num_values:\n        while number >= num:\n            number -= num\n            output += roman_numerals[num]\n\n    return output"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # First sort the list of sides to ensure c is always the longest side\n    sides = sorted([A, b, c])\n\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the list of sides so that the largest side is last\n    sides = sorted([A, b, c])\n    return (sides[0]**2 + sides[1]**2 == sides[2]**2)\n\nprint(right_angle_triangle(3, 4, 5))  # Output: True\nprint(right_angle_triangle(1, 2, 3))  # Output: False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    has_letters = False\n    result = ''\n\n    for char in s:\n        if char.isalpha():  # check if character is a letter\n            result += char.swapcase()  # swap case of the letter and add to result string\n            has_letters = True\n        else:  # if it's not a letter, keep it as it is\n            result += char\n\n    if not has_letters:  # If there were no letters in the original string, reverse it\n        return result[::-1]\n\n    return result"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if any(char.isalpha() for char in s):  # check if the string contains at least one letter\n        return ''.join([char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s])\n    else:\n        return s[::-1]  # reverse the string if it doesn't contain any letters"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n        return hash"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:  # Check if the input string is empty\n        return None\n    return hashlib.md5(text.encode()).hexdigest()  # Compute and return the MD5 hash\n\n# Now we can test the function using doctest\nimport doctest\ndoctest.testmod()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    # Ensure a is less than b for the range function\n    if a > b:\n        a, b = b, a\n\n    # Generate and return list of even numbers between a and B (inclusive)\n    return [num for num in range(a, b + 1) if num % 2 == 0]"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    # Swap the values if 'a' is greater than 'B'\n    if a > b:\n        a, b = b, a\n\n    even_numbers = [n for n in range(a, b + 1) if n % 2 == 0]\n    return even_numbers"}

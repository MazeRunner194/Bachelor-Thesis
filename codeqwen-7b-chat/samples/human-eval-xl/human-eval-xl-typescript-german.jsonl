{"task_id": "typescript/0", "language": "typescript", "completion": "/**\n * Check if the balance of a bank account ever goes negative based on a series of deposit and withdrawal operations.\n * The account starts with a zero balance. The function returns true if at any point the balance drops below zero, otherwise false.\n * >>> below_zero([1, 2, 3])\n * False\n * >>> below_zero([1, 2, -4, 5])\n * True\n */\nconst below_zero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for(let op of operations) {\n        balance += op;\n        if(balance < 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(below_zero([1, 2, 3])); // Output: false\nconsole.log(below_zero([1, 2, -4, 5])); // Output: true"}
{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>) : boolean  {\n    let balance = 0; // Start with a balance of zero\n\n    for(let op of operations) { // Iterate through each operation\n        balance += op; // Update the balance accordingly\n\n        if(balance < 0) { // If balance falls below zero, return true\n            return true;\n        }\n    }\n\n    return false; // If we reach here without balance falling below zero, return false\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function(numbers: Array<number>): [number, number] {\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = (numbers: Array<number>): Array<number> => {\n    let sum = 0;\n    let product = 1;\n\n    if(numbers.length === 0) {\n        return [sum, product];\n    }\n\n    for(let num of numbers){\n        sum += num;\n        product *= num;\n    }\n\n    return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (A: string, B: string): string {\n    let result = '';\n    // Ensure both strings have the same length by padding the shorter one with leading zeros\n    const maxLength = Math.max(A.length, B.length);\n    A = A.padStart(maxLength, '0');\n    B = B.padStart(maxLength, '0');\n\n    for (let i = 0; i < maxLength; i++) {\n        // Perform XOR operation on each bit and append to the result string\n        result += Number(A[i]) ^ Number(B[i]);\n    }\n\n    return result;\n};\n\nconsole.log(string_xor('010', '110')); // Outputs: '100'"}
{"task_id": "typescript/2", "language": "typescript", "completion": "function string_xor(A, B) {\n    let result = \"\";\n    for(let i=0; i<A.length; i++) {\n        result += A[i] === B[i] ? '0' : '1';\n    }\n    return result;\n}\n\nconsole.log(string_xor('010', '110'));  // Outputs: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * Aus einer Liste von Zeichenketten soll die l\u00e4ngste zu\u00fcckgegeben werden. Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zu\u00fcckgegeben werden. Falls die Eingabeliste leer ist, soll null zu\u00fcckgegeben werden.\n * >>> longest([])\n * \n * >>> longest(['A', 'b', 'c'])\n * 'A'\n * >>> longest(['A', 'bb', 'ccc'])\n * 'ccc'\n * \n */\n\nconst longest = function (strings: Array<string>) : string | null {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let maxLength = 0;\n  let longestString = strings[0];\n\n  for (const str of strings) {\n    if (str.length > maxLength) {\n      maxLength = str.length;\n      longestString = str;\n    }\n  }\n\n  return longestString;\n};\n\nconsole.log(longest([])); // null\nconsole.log(longest(['A', 'b', 'c'])); // 'A'\nconsole.log(longest(['A', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "function longest(strings: Array<string>): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n    \n    let maxLength = 0;\n    let longestString = strings[0];\n\n    for (const str of strings) {\n        if (str.length > maxLength) {\n            maxLength = str.length;\n            longestString = str;\n        }\n    }\n  \n    return longestString;\n}\n\n// Test cases:\n\nconsole.log(longest([])); // Output: null\nconsole.log(longest(['A', 'b', 'c'])); // Output: 'A'\nconsole.log(longest(['A', 'bb', 'ccc'])); // Output: 'ccc'"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function(A: number, B: number): number {\n  while(B != 0) {\n    let temp = B;\n    B = A % B;\n    A = temp;\n  }\n  return A;\n};\n\nconsole.log(greatest_common_divisor(3, 5)); // Outputs: 1\nconsole.log(greatest_common_divisor(25, 15)); // Outputs: 5"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = (a: number, b: number): number => {\n    if (b === 0) return a; // Base case: if b is zero, return a\n    return greatest_common_divisor(b, a % b); // Recursive call with new values\n};\n\nconsole.log(greatest_common_divisor(3, 5));  // Outputs: 1\nconsole.log(greatest_common_divisor(25, 15)); // Outputs: 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string) : string  {\n    // Map the number words to their numerical values\n    const numMap = { \n        'null': 0, 'eins': 1, 'zwei': 2, 'drei': 3, 'vier': 4, \n        'f\u00fcnf': 5, 'sechs': 6, 'sieben': 7, 'acht': 8, 'neun': 9 \n    };\n\n    // Convert the input string into an array of numbers\n    const numArray = numbers.split(' ').map(word => numMap[word]);\n\n    // Sort the array in ascending order\n    numArray.sort((a, B) => A - B);\n\n    // Join the sorted numbers back into a string and return it\n    return numArray.join(' ');\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = (numbers: string): string => {\n  // Mapping the input string to an array of numbers\n  const numArray: number[] = numbers.split(' ').map(number => {\n    switch (number) {\n      case 'null': return 0;\n      case 'eins': return 1;\n      case 'zwei': return 2;\n      case 'drei': return 3;\n      case 'vier': return 4;\n      case 'f\u00fcnf': return 5;\n      case 'sechs': return 6;\n      case 'sieben': return 7;\n      case 'acht': return 8;\n      case 'neun': return 9;\n      default: throw new Error('Invalid input');\n    }\n  });\n\n  // Sorting the array of numbers\n  numArray.sort((a, B) => A - B);\n\n  // Mapping the sorted numbers back to a string and joining them with spaces\n  return numArray.map(number => {\n    switch (number) {\n      case 0: return 'null';\n      case 1: return 'eins';\n      case 2: return 'zwei';\n      case 3: return 'drei';\n      case 4: return 'vier';\n      case 5: return 'f\u00fcnf';\n      case 6: return 'sechs';\n      case 7: return 'sieben';\n      case 8: return 'acht';\n      case 9: return 'neun';\n    }\n  }).join(' ');\n};\n\nconsole.log(sort_numbers('three one five')); // Outputs: 'one three five'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n    // find the minimum and maximum values in the array\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    // transform each number from its original value to its normalized form between 0 and 1\n    return numbers.map((value) => (value - min) / (max - min));\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function(numbers: Array<number>): Array<number> {\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    return numbers.map((num) => (num - min) / (max - min));\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string) : string {\n    return string0.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\nconsole.log(flip_case('Hello')); // Output: hELLO"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = (string0: string): string => {\n    return string0.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n}\n\nconsole.log(flip_case('Hello'));  // Outputs: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = (l: number[]): number[] => {\n    return l.filter(num => num > 0);\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(num => num > 0);\n};\n\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const Is_prime = (function(n: number) : boolean {\n  if (n <= 1) return false;\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n});\n\nconsole.log(Is_prime(6)); // Output: False\nconsole.log(Is_prime(101)); // Output: True\nconsole.log(Is_prime(11)); // Output: True\nconsole.log(Is_prime(13441)); // Output: True\nconsole.log(Is_prime(61)); // Output: True\nconsole.log(Is_prime(4)); // Output: False\nconsole.log(Is_prime(1)); // Output: False"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const Is_prime = function(n: number): boolean {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false; // If divisible by any number other than 1 and itself, it's not a prime\n    }\n    return true; // It passed all checks, therefore it is a prime\n};\n\nconsole.log(Is_prime(6)); // Output: False\nconsole.log(Is_prime(101)); // Output: True\nconsole.log(Is_prime(11)); // Output: True\nconsole.log(Is_prime(13441)); // Output: True\nconsole.log(Is_prime(61)); // Output: True\nconsole.log(Is_prime(4)); // Output: False\nconsole.log(Is_prime(1)); // Output: False"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number> {\n    // Using a Set to ensure uniqueness and then converting it back to an array\n    let resultSet = new Set(l);\n    let resultArray = Array.from(resultSet);\n\n    // Sorting the array in ascending order\n    resultArray.sort((a, B) => A - B);\n\n    return resultArray;\n}\n\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number> {\n    // Use a Set to store unique elements, because Sets only allow unique values.\n    let set = new Set(l); \n    \n    // Convert the Set back to an Array and sort it in ascending order using the Array's sort() method.\n    return [...set].sort((a, B) => A - B);\n};\n\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import { isPrime } from 'mathjs';\n\n/**\n * PrimeFibonacci gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n */\nfunction primeFibonacci(n: number): number {\n    let num1: number = 0, num2: number = 1;\n    let fib: number = num1 + num2;\n\n    while (true) {\n        if (IsPrime(fib)) {\n            n--;\n            if (n === 0) {\n                return fib;\n            }\n        }\n        num1 = num2;\n        num2 = fib;\n        fib = num1 + num2;\n    }\n}\n\n// Check function to verify the correctness of the solution\nconsole.log(primeFibonacci(1)); // Should output 2\nconsole.log(primeFibonacci(2)); // Should output 3\nconsole.log(primeFibonacci(3)); // Should output 5\nconsole.log(primeFibonacci(4)); // Should output 13\nconsole.log(primeFibonacci(5)); // Should output 89"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import * as math from 'mathjs'\n\n/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * \n * prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n * \n */\nconst isPrime = (num: number): boolean => {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false;\n    return num > 1;\n}\n\nconst isFibonacci = (n: number): boolean => {\n   let a = 0, B = 1;\n   if (n == A || n == B) return true;\n   let C = A + B;\n   while(C <= n){\n      if(C == n) return true;\n      A = B;\n      B = C;\n      C = A + B;\n   }\n   return false;\n}\n\nconst prime_fib = function (n: number): number {\n    let count = 0, fibNum = 0, i=2;\n    while(true){\n        if(isPrime(i) && IsFibonacci(i)){\n            count++;\n            if(count == n) return i;\n        }\n        i++;\n    }\n};\n\nconsole.log(prime_fib(1)); // Output: 2\nconsole.log(prime_fib(2)); // Output: 3\nconsole.log(prime_fib(3)); // Output: 5\nconsole.log(prime_fib(4)); // Output: 13\nconsole.log(prime_fib(5)); // Output: 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Test cases:\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // Output: False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // Output: True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // Output: False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // Output: True\nconsole.log(triples_sum_to_zero([1])); // Output: False"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = (l: number[]): boolean => {\n    for (let i = 0; i < l.length - 2; i++) {\n        for (let j = i + 1; j < l.length - 1; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n\n// Test cases:\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    for(let i = 0; i < l.length - 1; i++) {\n        for(let j = i + 1; j < l.length; j++) {\n            if(l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>) : boolean  {\n    // Create a set to store unique numbers\n    let seenNumbers = new Set<number>();\n\n    for(let i=0; i < l.length; i++) {\n        let complement = -l[i]; // Complement of current number\n\n        if(seenNumbers.has(complement)) {\n            return true; // Found two numbers that sum to zero\n        } else {\n            seenNumbers.add(l[i]); // Add the current number to the set\n        }\n    }\n\n    return false; // No pairs found that sum to zero\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = (n: number): number => {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0; // Initial values for fib4(0), fib4(1), fib4(2), and fib4(3) respectively.\n    for (let i = 4; i <= n; i++) {\n        D = A + B + C + D; // Calculate next element of the sequence.\n        A = B; // Update previous elements for the next iteration.\n        B = C;\n        C = D;\n    }\n    return D; // Return the n-th element.\n};\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "typescript/14", "language": "typescript", "completion": "function fib4(n: number): number {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0;\n    for (let i = 4; i <= n; i++) {\n        let temp = A + B + C + D;\n        A = B;\n        B = C;\n        C = D;\n        D = temp;\n    }\n    return D;\n}\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function(l: Array<number>): number {\n    l.sort((a, B) => A - B); // Sort the array in ascending order\n    const middleIndex = Math.floor(l.length / 2); // Find the middle index\n\n    // If the length of the array is even, return the average of the two middle numbers\n    if (l.length % 2 === 0) {\n        return (l[middleIndex - 1] + l[middleIndex]) / 2;\n    } else { // If the length is odd, return the middle number\n        return l[middleIndex];\n    }\n};\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n    // Sort the array in ascending order\n    const sortedList = l.sort((a, B) => A - B);\n\n    // Find the length of the list\n    const len = sortedList.length;\n\n    // Check if the list has an odd or even number of elements\n    if (len % 2 === 0) {\n        // If it's even, return the average of the two middle elements\n        return (sortedList[len / 2 - 1] + sortedList[len / 2]) / 2;\n    } else {\n        // If it's odd, return the middle element\n        return sortedList[(len - 1) / 2];\n    }\n};\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15"}
{"task_id": "typescript/16", "language": "typescript", "completion": "/**\n * Checks if the given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n * >>> Is_palindrome('')\n * true\n * >>> Is_palindrome('aba')\n * true\n * >>> Is_palindrome('aaaaa')\n * true\n * >>> Is_palindrome('zbcd')\n * false\n * \n * @param text The string to check.\n * @returns true if the text is a palindrome, false otherwise.\n */\nconst Is_palindrome = function (text: string): boolean {\n    // Normalize the string by removing non-alphanumeric characters and converting it to lowercase\n    const normalizedText = text.replace(/[\\W_]/g, '').toLowerCase();\n\n    // Check if the normalized string is equal to its reverse\n    return normalizedText === normalizedText.split('').reverse().join('');\n};\n\n// Test cases\nconsole.log(Is_palindrome('')); // Output: true\nconsole.log(Is_palindrome('aba')); // Output: true\nconsole.log(Is_palindrome('aaaaa')); // Output: true\nconsole.log(Is_palindrome('zbcd')); // Output: false"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const Is_palindrome = (text: string): boolean  => {\n    let start = 0; // Start of the string\n    let end = text.length - 1; // End of the string\n\n    while (start < end) {\n        if (text[start] !== text[end]) {\n            // If any pair of corresponding characters is not identical,\n            // then the input string is not a palindrome.\n            return false;\n        }\n        start++; // Move towards the center from the start\n        end--; // Move towards the center from the end\n    }\n\n    // If all pairs of corresponding characters are identical,\n    // then the input string is a palindrome.\n    return true;\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = (text: string): string => {\n    return text.replace(/[aeiouAEIOU]/g, '');\n};\n\nconsole.log(remove_vowels('')); // Output: ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // Output: 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // Output: ''\nconsole.log(remove_vowels('aaBAA')); // Output: 'B'\nconsole.log(remove_vowels('zbcd')); // Output: 'zbcd'"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = (l: Array<number>, t: number): boolean => {\n    return l.every(num => num < t);\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number) : boolean {\n    for(let i=0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "typescript/19", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * Addiere zwei Zahlen x und y.\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n */\n\nconst add = function (x: number, y: number): number {\n  return x + y;\n};\n\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "typescript/19", "language": "typescript", "completion": "function add(x: number, y: number): number {\n    return x + y;\n}\n\n// Testen der Funktion\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = (s0: string, s1: string): boolean => {\n  // Convert the strings to sets of characters\n  const set0 = new Set(s0);\n  const set1 = new Set(s1);\n\n  // Check if the sets are equal\n  if (set0.size !== set1.size) {\n    return false;\n  }\n\n  for (let char of set0) {\n    if (!set1.has(char)) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = (s0: string, s1: string): boolean => {\n    // Convert both strings to sets of characters and then compare them\n    const set0 = new Set(s0);\n    const set1 = new Set(s1);\n\n    if (set0.size !== set1.size) {\n        return false;\n    }\n\n    for (let char of set0) {\n        if (!set1.has(char)) {\n            return false;\n        }\n    }\n\n    return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = (function (): { [key: number]: number } {\n    let cache: { [key: number]: number } = {};\n\n    return (n: number): number => {\n        if (n in cache) {\n            return cache[n];\n        } else if (n <= 1) {\n            cache[n] = n;\n            return n;\n        } else {\n            const result = fib(n - 1) + fib(n - 2);\n            cache[n] = result;\n            return result;\n        }\n    };\n})();\n\n// Test cases\nconsole.log(fib(10)); // Output: 55\nconsole.log(fib(1));  // Output: 1\nconsole.log(fib(8));  // Output: 21"}
{"task_id": "typescript/21", "language": "typescript", "completion": "// Rekursive Funktion um die n-te Fibonacci-Zahl zu berechnen\nconst fib = function (n: number): number {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n};\n\n// Testbeispiele\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    // First, sort the arrays\n    l1.sort((a, B) => A - B);\n    l2.sort((A, B) => A - B);\n\n    // Then find common elements\n    const commonElements = l1.filter(value => l2.includes(value));\n\n    // Finally, remove duplicates and return the result\n    return [...new Set(commonElements)];\n}\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>) : Array<number>  {\n    // Convert both arrays to Sets to remove duplicates and then find the intersection\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    let intersection = new Set([...set1].filter(x => set2.has(x)));\n\n    // Return the sorted array of common elements\n    return Array.from(intersection).sort((a, B) => A - B);\n};\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    if (n % 2 === 0) {\n        return 2; // Wenn n gerade ist, ist 2 der Primfaktor\n    }\n    let i = 3; // Startwert f\u00fcr ungerade Zahlen\n    while (i * i <= n) {\n        if (n % i === 0) {\n            return i; // Found a prime factor\n        } else if ((n / i) % 2 !== 0) { // If n is odd, increment by 2 and continue\n            i += 2;\n        } else { // If n is even after division, decrement by 2 and continue\n            i -= 2;\n        }\n    }\n    return n; // n is prime and greater than any previously found factor\n};\n\n// Test cases\nconsole.log(largest_prime_factor(13195)); // Output: 29\nconsole.log(largest_prime_factor(2048));  // Output: 2"}
{"task_id": "typescript/23", "language": "typescript", "completion": "function largest_prime_factor(n: number): number {\n    let maxPrime = -1;\n\n    // Divide n by 2 to remove all even factors\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n = n/2\n    }\n\n    // n must be odd at this point, so we can skip one element (Note i = i +2)\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        // While i divides n, save i and divide n\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n\n    // This condition is to handle the case when n is a prime number greater than 2\n    if (n > 2)\n        maxPrime = n;\n\n    return maxPrime;\n}\n\nconsole.log(largest_prime_factor(13195)); // outputs: 29\nconsole.log(largest_prime_factor(2048));  // outputs: 2"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = (n: number): number => {\n    if (n === 0 || n === 1) {\n        return n;\n    } else {\n        return n + sum_to_n(n - 1);\n    }\n};\n\nconsole.log(sum_to_n(30)); // Output: 465\nconsole.log(sum_to_n(100)); // Output: 5050\nconsole.log(sum_to_n(5));  // Output: 15\nconsole.log(sum_to_n(10)); // Output: 55\nconsole.log(sum_to_n(1));  // Output: 1"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = (function(n: number): number {\n    if (n === 1) {\n        return n;\n    } else {\n        return n + sum_to_n(n - 1);\n    }\n})(30);\n\nconsole.log(sum_to_n); // Output: 465"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    return xs.map((coefficient, index) => coefficient * index).slice(1);\n};\n\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // Output: [2, 6]"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function(xs: Array<number>): Array<number> {\n    return xs.map((coefficient, index) => coefficient * index).slice(1);\n};\n\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));      // Output: [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = (n: number): number => {\n    if (n < 2) return 0;\n    if (n === 2) return 1;\n\n    let a = 0, B = 0, C = 1, D = 1;\n    for (let i = 3; i <= n; i++) {\n        D = A + B + C;\n        A = B;\n        B = C;\n        C = D;\n    }\n    return D;\n};\n\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = (n: number): number => {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n\n    let a = 0, B = 0, C = 1, D = 1;\n    for (let i = 3; i <= n; i++) {\n        A = B;\n        B = C;\n        C = D;\n        D = A + B + C;\n    }\n\n    return D;\n};\n\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    // Convert the input string to lowercase for uniformity\n    s = s.toLowerCase();\n\n    // Define the vowels and check if 'y' is at the end of the word\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (s.charAt(s.length - 1) === 'y') {\n        vowels.push('Y'); // Add 'y' to the list if it's at the end\n    }\n\n    // Initialize a counter for vowels\n    let count = 0;\n\n    // Iterate through each character in the string\n    for (let i = 0; i < s.length; i++) {\n        // Check if the current character is a vowel\n        if (vowels.includes(s.charAt(i))) {\n            count++; // Increment the counter if it's a vowel\n        }\n    }\n\n    return count; // Return the total number of vowels found\n};\n\n// Test cases\nconsole.log(vowels_count(\"abcde\")); // Expected output: 2\nconsole.log(vowels_count(\"ACEDY\")); // Expected output: 3"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    let count = 0;\n    s = s.toLowerCase(); // convert input to lowercase for accurate counting\n    for(let i=0; i<s.length; i++) {\n        if('aeiou'.includes(s[i])) {\n            count++; // increment count if the character is a vowel\n        }\n    }\n    // check if 'y' is at the end of the word and consider it as a vowel\n    if (s.endsWith('y')) {\n        count++;\n    }\n    return count;\n}\n\nconsole.log(vowels_count(\"abcde\")); // prints 2\nconsole.log(vowels_count(\"ACEDY\")); // prints 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "interface FrequencyMap {\n    [key: number]: number;\n}\n\nfunction countFrequencies(arr: Array<number>): FrequencyMap {\n    let frequencyMap: FrequencyMap = {};\n    for (let num of arr) {\n        if (frequencyMap[num]) {\n            frequencyMap[num]++;\n        } else {\n            frequencyMap[num] = 1;\n        }\n    }\n    return frequencyMap;\n}\n\nfunction search(lst: Array<number>): number {\n    let freqMap = countFrequencies(lst);\n    for (let num of Object.keys(freqMap).map(Number).sort((a, B) => B - A)) { // Sort by descending order\n        if (num > 0 && freqMap[num] >= num) {\n            return num;\n        }\n    }\n    return -1;\n}"}
{"task_id": "typescript/28", "language": "typescript", "completion": "// Sort the list in descending order to prioritize higher values\nlst.sort((a, B) => B - A);\n\nlet result = -1;\n\nfor (let i = 0; i < lst.length; i++) {\n  const value = lst[i];\n  const count = lst.filter(num => num === value).length;\n\n  if (count >= value && value > result) {\n    result = value;\n  }\n}\n\nreturn result;"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (A: number, B: number, C: number): number {\n    if (A + B <= C || A + C <= B || B + C <= A) {\n        return -1; // Kein g\u00fcltiges Dreieck\n    }\n\n    const s = (A + B + C) / 2;\n    const area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n    return parseFloat(area.toFixed(2)); // Fl\u00e4che auf 2 Dezimalstellen runden\n}"}
{"task_id": "typescript/29", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * \n * Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zu\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n * \n * triangle_area(3, 4, 5) == 6.00\n * triangle_area(1, 2, 10) == -1\n * \n */\n\nconst triangle_area = (A: number, b: number, c: number): number => {\n  // Check if the sides form a valid triangle\n  if (A + b <= c || A + c <= b || b + c <= A) {\n    return -1;\n  }\n\n  // Calculate semi-perimeter\n  const s = (A + b + c) / 2;\n\n  // Calculate area using Heron's formula\n  const area = Math.sqrt(s * (s - A) * (s - b) * (s - c));\n\n  // Round the area to 2 decimal places and return it\n  return parseFloat(area.toFixed(2));\n};\n\nconsole.log(triangle_area(3, 4, 5)); // Output: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Output: -1"}
{"task_id": "typescript/30", "language": "typescript", "completion": "function isPalindrome(arr: Array<number>): boolean {\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst will_it_fly = function(q: Array<number>, w: number) : boolean  {\n    let sum = q.reduce((acc, val) => acc + val, 0);\n    if (sum > w) {\n        return false;\n    }\n    return isPalindrome(q);\n};\n\n// Test cases\nconsole.log(will_it_fly([1, 2], 5)); // Output: False\nconsole.log(will_it_fly([3, 2, 3], 1)); // Output: False\nconsole.log(will_it_fly([3, 2, 3], 9)); // Output: True\nconsole.log(will_it_fly([3], 5)); // Output: True"}
{"task_id": "typescript/30", "language": "typescript", "completion": "// Helper function to check if array is palindromic\nfunction isPalindrome(arr: Array<number>): boolean {\n    return arr.toString() === arr.slice().reverse().toString();\n}\n\nconst will_it_fly = function (q: Array<number>, w: number) : boolean  {\n    // Check if array is palindromic\n    if (!isPalindrome(q)) {\n        return false;\n    }\n\n    // Check if sum of elements in the array is less than or equal to max weight\n    const sum = q.reduce((acc, val) => acc + val, 0);\n    return sum <= w;\n}"}
{"task_id": "typescript/31", "language": "typescript", "completion": "// Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\nfunction isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\n// Hauptfunktion zur \u00dcberpr\u00fcfung, ob die gegebene Zahl das Produkt von 3 Primzahlen ist\nconst Is_multiply_prime = function (A: number): boolean {\n    if (A < 2 || A >= 100) return false; // Keine Primzahlen unter 2 oder \u00fcber 99\n\n    let primeFactorsCount = 0; // Z\u00e4hler f\u00fcr die Anzahl der gefundenen Primfaktoren\n\n    // Iteriere durch alle m\u00f6glichen Teiler von A\n    for (let i = 2; i <= A; i++) {\n        while (isPrime(i) && A % i === 0) {\n            A /= i; // Teile A durch den Primfaktor\n            primeFactorsCount++; // Erhohe den Z\u00e4hler der gefundenen Primfaktoren\n            if (primeFactorsCount > 3) return false; // Wenn mehr als 3 Primfaktoren gefunden, abbrechen\n        }\n    }\n\n    // Wenn genau 3 Primfaktoren gefunden wurden, ist die Zahl das Produkt von 3 Primzahlen\n    return primeFactorsCount === 3;\n};\n\nconsole.log(Is_multiply_prime(30)); // true, da 30 = 2 * 3 * 5"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const Is_multiply_prime = (a: number): boolean => {\n  if (A < 2) return false; // Wenn A weniger als 2 ist, ist sie keine Primzahl\n  let primeCount = 0; // Z\u00e4hlen der Primfaktoren\n\n  // Iteriere \u00fcber m\u00f6gliche Teiler von A\n  for (let i = 2; i <= Math.sqrt(A); i++) {\n    if (A % i === 0) {\n      primeCount++; // Wenn i ein Teiler von A ist, erhoehe primeCount\n\n      // Wenn der Primfaktor i^2 == A, dann beende die Funktion\n      if (i * i === A) return false;\n\n      while (A % i === 0) {\n        A /= i; // Teile A durch i, um den Primfaktor zu vermeiden\n      }\n    }\n  }\n\n  // Wenn die Anzahl der Primfaktoren genau 3 ist, dann gibt es eine Primzahl mit 3 Factoren\n  return primeCount === 3;\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = (decimal: number) : string  => {\n    return \"db\" + decimal.toString(2) + \"db\";\n};\n\n// Test cases\nconsole.log(decimal_to_binary(15)); // Output: \"db1111db\"\nconsole.log(decimal_to_binary(32)); // Output: \"db100000db\""}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number) : string {\n    // Konvertiere die Dezimalzahl in Bin\u00e4r und f\u00fcge sie mit 'db' an den Anfang und Ende anf\u00fcgen\n    return `db${decimal.toString(2)}db`;\n};\n\n// Testbeispiele\nconsole.log(decimal_to_binary(15)); // Gibt \"db1111db\" aus\nconsole.log(decimal_to_binary(32)); // Gibt \"db100000db\" aus"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const Is_happy = function (s: string): boolean {\n    if (s.length < 3) {\n        return false; // Wenn die L\u00e4nge des Strings weniger als 3 ist, ist er nicht gl\u00fccklich\n    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        const group = s.substring(i, i + 3); // Hole eine Gruppe von 3 aufeinanderfolgenden Buchstaben\n        if (new Set(group).size !== 3) { // \u00dcberpr\u00fcfe, ob die Gruppe unterschiedlich ist\n            return false; // Wenn die Gruppe unterschiedlich ist, ist der String nicht gl\u00fccklich\n        }\n    }\n\n    return true; // Wenn alle Gruppen von 3 aufeinanderfolgenden Buchstaben unterschiedlich sind, ist der String gl\u00fccklich\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "console.log(Is_happy('abcd'));  // Output: true\nconsole.log(Is_happy('aabb'));  // Output: false\nconsole.log(Is_happy('xyy'));   // Output: false"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function(grades: Array<number>): Array<string> {\n    let letterGrades: Array<string> = [];\n\n    for (let grade of grades) {\n        if (grade === 4.0) {\n            letterGrades.push('A+');\n        } else if (grade > 3.7) {\n            letterGrades.push('A');\n        } else if (grade > 3.3) {\n            letterGrades.push('A-');\n        } else If (grade > 3.0) {\n            letterGrades.push('B+');\n        } else If (grade > 2.7) {\n            letterGrades.push('B');\n        } else If (grade > 2.3) {\n            letterGrades.push('B-');\n        } else If (grade > 2.0) {\n            letterGrades.push('C+');\n        } else If (grade > 1.7) {\n            letterGrades.push('C');\n        } else If (grade > 1.3) {\n            letterGrades.push('C-');\n        } else If (grade > 1.0) {\n            letterGrades.push('D+');\n        } else If (grade > 0.7) {\n            letterGrades.push('D');\n        } else If (grade > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n\n    return letterGrades;\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string>  {\n    let letterGrades: string[] = [];\n\n    for(let i = 0; i < grades.length; i++) {\n        if(grades[i] === 4.0) {\n            letterGrades.push(\"A+\");\n        } else if(grades[i] > 3.7) {\n            letterGrades.push(\"A\");\n        } else if(grades[i] > 3.3) {\n            letterGrades.push(\"A-\");\n        } else If(grades[i] > 3.0) {\n            letterGrades.push(\"B+\");\n        } else If(grades[i] > 2.7) {\n            letterGrades.push(\"B\");\n        } else If(grades[i] > 2.3) {\n            letterGrades.push(\"B-\");\n        } else If(grades[i] > 2.0) {\n            letterGrades.push(\"C+\");\n        } else If(grades[i] > 1.7) {\n            letterGrades.push(\"C\");\n        } else If(grades[i] > 1.3) {\n            letterGrades.push(\"C-\");\n        } else If(grades[i] > 1.0) {\n            letterGrades.push(\"D+\");\n        } else If(grades[i] > 0.7) {\n            letterGrades.push(\"D\");\n        } else If(grades[i] > 0.0) {\n            letterGrades.push(\"D-\");\n        } else {\n            letterGrades.push(\"E\");\n        }\n    }\n\n    return letterGrades;\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]"}
{"task_id": "typescript/35", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nconst prime_length = function (string0: string): boolean  {\n    return isPrime(string0.length);\n};\n\n// Test cases\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconst prime_length = function (string: string): boolean  {\n    const length = string.length;\n    return isPrime(length);\n}"}
{"task_id": "typescript/36", "language": "typescript", "completion": "let sum: number = 0;\n\nwhile(N > 0){\n    sum += N % 10; // Add the last digit of N to sum\n    N = Math.floor(N / 10); // Remove the last digit from N\n}\n\nreturn sum.toString(2); // Convert the sum to binary and return it"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function(N: number): string {\n    // Convert N to a string to iterate over its digits\n    let sum = 0;\n    for (let i = 0; i < N.toString().length; i++) {\n        // Add the current digit to the sum\n        sum += parseInt(N.toString()[i]);\n    }\n\n    // Convert the sum to binary and return it as a string\n    return sum.toString(2);\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number): Array<Array<number>> {\n    let result: Array<Array<number>> = [];\n\n    // Iterate over each row in lst.\n    for (let i = 0; i < lst.length; i++) {\n        // Check if the current number is equal to x.\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]); // Add row and column as a pair into result.\n            }\n        }\n    }\n\n    // Sort result by row numbers in ascending order and then by column numbers in descending order.\n    result.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n\n    return result;\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "function get_row(lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    let result: Array<[number, number]> = [];\n  \n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n  \n    // Sort by row in ascending order and then by column in descending order within each row\n    result.sort((a, B) => {\n        if (A[0] === B[0]) {\n            return B[1] - A[1]; // Descending order for columns\n        } else {\n            return A[0] - B[0]; // Ascending order for rows\n        }\n    });\n  \n    return result;\n}\n\n// Test cases\n\nconsole.log(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nconsole.log(get_row([], 1)); // []\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "function next_smallest(lst: number[]): number | null {\n    if (lst.length < 2) {\n        return null;\n    }\n\n    let first = lst[0];\n    let Second = lst[1];\n\n    for (const num of lst) {\n        if (num < First) {\n            Second = First;\n            First = num;\n        } else if (num > First && num < Second) {\n            Second = num;\n        }\n    }\n\n    return Second === Infinity ? null : Second;\n}\n\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // Output: 2\nconsole.log(next_smallest([])); // Output: null\nconsole.log(next_smallest([1, 1])); // Output: null"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: number[]): number | null {\n    if(lst.length < 2) return null;\n    \n    let uniqueList = [...new Set(lst)]; // remove duplicates\n    uniqueList.sort((a, B) => A - B);\n\n    return uniqueList[1] || null; // if there's only one element or less after removing duplicates, return null.\n}"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const Is_bored = (S: string): number => {\n    // Split the input string into individual sentences based on '.', '?' or '!'\n    const sentences = S.split(/[\\.\\?\\!]\\s*/);\n    let boredCount = 0;\n\n    for (const sentence of sentences) {\n        if (sentence.startsWith(\"I\")) {\n            boredCount++;\n        }\n    }\n\n    return boredCount;\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const Is_bored = function (s: string): number {\n    // Split the string into sentences based on '.', '?', or '!'\n    const sentences = s.match(/[^.?!]+[.?!]/g);\n\n    // If there are no sentences, return 0\n    if (!sentences) {\n        return 0;\n    }\n\n    // Count the number of sentences that start with \"I\" (case-insensitive)\n    const boredCount = sentences.filter(sentence => sentence[0].toLowerCase() === 'i').length;\n\n    return boredCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (num: number) => {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconst FindLargestPrimeAndSumOfDigits = (lst: Array<number>) => {\n    let largestPrime = 0;\n\n    for(let num of lst){\n        if(IsPrime(num) && num > largestPrime){\n            largestPrime = num;\n        }\n    }\n\n    let sumOfDigits = largestPrime.toString().split('').reduce((a,B) => parseInt(A)+parseInt(B));\n\n    return sumOfDigits;\n}\n\nconsole.log(FindLargestPrimeAndSumOfDigits([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // Outputs: 10\nconsole.log(FindLargestPrimeAndSumOfDigits([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // Outputs: 25\nconsole.log(FindLargestPrimeAndSumOfDigits([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // Outputs: 13\nconsole.log(FindLargestPrimeAndSumOfDigits([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // Outputs: 11\nconsole.log(FindLargestPrimeAndSumOfDigits([0,81,12,3,1,21])); // Outputs: 3\nconsole.log(FindLargestPrimeAndSumOfDigits([0,8,1,2,1,7])); // Outputs: 7"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const skjkasdkd = function (lst: Array<number>): number {\n    let maxPrime = -1;\n\n    for(let num of lst) {\n        if(isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n\n    return sumOfDigits(maxPrime.toString());\n}\n\nconst isPrime = (num: number): boolean => {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconst SumOfDigits = (str: string): number => {\n    return str.split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n  if(dict.size === 0) return false; // Check if the dictionary is empty\n\n  let lowerCaseKeys = true;\n  let upperCaseKeys = true;\n\n  for(let [key, value] of dict) {\n    if(!isNaN(Number(key))) return false; // Check if key is not a number\n\n    lowerCaseKeys &= typeof key === 'string' && key.toLowerCase() === key;\n    upperCaseKeys &= typeof key === 'string' && key.toUpperCase() === key;\n\n    if(!lowerCaseKeys && !upperCaseKeys) return false; // If both conditions are false, return false immediately\n  }\n\n  return true;\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "interface DictCaseCheck {\n    [key: string]: string;\n}\n\nconst check_dict_case = (dict: DictCaseCheck): boolean => {\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let allLowercase: boolean | null = null;\n    for (const key in dict) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (AllLowercase === null && key.toLowerCase() !== key) {\n            AllLowercase = true;\n        } else if (AllLowercase === true && key.toUpperCase() !== key) {\n            return false;\n        } else if (AllLowercase === null && key.toUpperCase() !== key) {\n            AllLowercase = false;\n        } else If (AllLowercase === false && key.toLowerCase() !== key) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// Test cases\nconsole.log(check_dict_case({\"A\":\"apple\", \"b\":\"banana\"})); // should return true\nconsole.log(check_dict_case({\"A\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // should return false\nconsole.log(check_dict_case({\"A\":\"apple\", 8:\"banana\", \"A\":\"apple\"})); // should return false\nconsole.log(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // should return false\nconsole.log(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); // should return true"}
{"task_id": "typescript/42", "language": "typescript", "completion": "import { round, abs } from 'mathjs';\n\n/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * \n * Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n * \n *     Beispiele\n * >>> closest_integer(\"10\")\n * 10\n * >>> closest_integer(\"15.3\")\n * 15\n * \n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. for example, closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n */\nconst closest_integer = (value: string) : number  => {\n    let num = parseFloat(value);\n    if (abs(num % 1) === 0.5) {\n        return num > 0 ? Math.ceil(num) : Math.floor(num);\n    } else {\n        return round(num);\n    }\n};\n\nconsole.log(closest_integer(\"10\")); // Output: 10\nconsole.log(closest_integer(\"15.3\")); // Output: 15\nconsole.log(closest_integer(\"14.5\")); // Output: 15\nconsole.log(closest_integer(\"-14.5\")); // Output: -15"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function(value: string): number {\n    let num = parseFloat(value);\n    if (num % 1 === 0) { // Check if the number is already an integer\n        return num;\n    } else if (Math.abs(num - Math.ceil(num)) < Math.abs(num - Math.floor(num))) { // If it's not, check which of the two nearest integers is farther from zero\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n};\n\nconsole.log(closest_integer(\"10\")); // Output: 10\nconsole.log(closest_integer(\"15.3\")); // Output: 15\nconsole.log(closest_integer(\"14.5\")); // Output: 15\nconsole.log(closest_integer(\"-14.5\")); // Output: -15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    let pile: Array<number> = [];\n    let currentStones: number = n;\n\n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n\n        if (n % 2 === 0) { // Wenn n gerade ist\n            currentStones += 2;\n        } else { // Wenn n ungerade ist\n            currentStones += 2;\n        }\n    }\n\n    return pile;\n};\n\n// Test cases\nconsole.log(make_a_pile(3)); // [3, 5, 7]"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_Pile = (n: number): Array<number> => {\n    let pile: Array<number> = [];\n    for(let i = 0; i < n; i++) {\n        pile.push(2 * n - i);  // Push the next even or odd number based on the current level\n    }\n    return pile;\n};\n\nconsole.log(make_a_Pile(3));  // Output: [3, 5, 7]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string) : Array<string>  {\n  // Trenne den String anhand der Kommas und Leerzeichen\n  const wordsArray = s.split(/, | /);\n  return wordsArray;\n};\n\nconsole.log(words_string(\"Hi, My name is John\")); // [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "/**\n * Diese Funktion nimmt einen String mit W\u00f6rtern, die durch Kommas oder Leerzeichen getrennt sind, und gibt ein Array der W\u00f6rter zur\u00fcck.\n * \n * Zum Beispiel:\n * \n * wordsString(\"Hi, My name is John\") -> [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * wordsString(\"One, two, three, four, five, six\") -> [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n * \n * @param s - Ein String mit W\u00f6rtern\n * @returns Ein Array von W\u00f6rtern\n */\nconst wordsString = (s: string) : Array<string>  => {\n    // Entferne Leerzeichen aus dem String\n    const cleanedString = s.replace(/\\s+/g, '');\n    \n    // Split den String in W\u00f6rter mit , oder . als Trennzeichen\n    const wordsArray = cleanedString.split(/[,.]+/);\n\n    // Return the resulting array of words\n    return wordsArray;\n};\n\nconsole.log(wordsString(\"Hi, My name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = (x: number, y: number): number => {\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconsole.log(choose_num(12, 15)); // Gibt 14 aus\nconsole.log(choose_num(13, 12)); // Gibt -1 aus"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Check if x is greater than y or less than 0\n    if (x > y || x < 0 || y < 0) {\n        return -1; // Return -1 if the inputs are invalid\n    }\n\n    // Start from y and decrement until we find a even number\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i; // Return the first even number found in the range\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n};\n\nconsole.log(choose_num(12, 15)); // Output: 14\nconsole.log(choose_num(13, 12)); // Output: -1"}
{"task_id": "typescript/46", "language": "typescript", "completion": "function rounded_avg(n: number, m: number): string | number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5)); // => \"0b11\"\nconsole.log(rounded_avg(7, 5)); // => -1\nconsole.log(rounded_avg(10, 20)); // => \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // => \"0b11010\""}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function(n: number, m: number): string | number {\n    if (n > m) {\n        return -1;\n    }\n\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n};\n\nconsole.log(rounded_avg(1, 5)); // => \"0b11\"\nconsole.log(rounded_avg(7, 5)); // => -1\nconsole.log(rounded_avg(10, 20)); // => \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // => \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    let result: Array<number> = [];\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) { // If i is even\n            result.push(factorial(i));\n        } else { // If i is odd\n            result.push(sumOfNumbers(i));\n        }\n    }\n\n    return result;\n\n    function factorial(num: number): number {\n        let fact = 1;\n        for (let i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    function sumOfNumbers(num: number): number {\n        return ((num * (num + 1)) / 2); // Using the formula for the sum of the first n natural numbers\n    }\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "function calculateFactorial(i: number): number {\n    let result = 1;\n    for (let j = 2; j <= i; j++) {\n        result *= j;\n    }\n    return result;\n}\n\nconst f = function (n: number) : Array<number>  {\n    const result: Array<number> = [];\n    for(let i = 1; i <= n; i++) {\n        if(i % 2 === 0){\n            result.push(calculateFactorial(i));\n        } else {\n            result.push((1 + i) * i / 2);\n        }\n    }\n    return result;\n};\n\nconsole.log(f(5)); // Outputs: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "function isPalindrome(num: number): boolean {\n    let strNum = num.toString();\n    let reversedStrNum = strNum.split('').reverse().join('');\n    return strNum === reversedStrNum;\n}\n\nfunction even_odd_palindrome(n: number): Array<number> {\n    let evenCount = 0, oddCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_palindrome(3)); // Output: [1,2]\nconsole.log(even_odd_palindrome(12)); // Output: [4,6]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function(n: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};\n\nconst isPalindrome = function(num: number): boolean {\n  let str = num.toString();\n  let reversedStr = str.split('').reverse().join('');\n  return str === reversedStr;\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = (arr: number[]): boolean => {\n    if(arr.length === 0) return true;\n\n    let countOfDrops = 0;\n    for(let i=1; i<arr.length; i++) {\n        // If current element is smaller than previous, a drop occurred\n        if(arr[i] < arr[i-1]) {\n            countOfDrops++;\n            // More than one drop means it's not possible to sort the array this way\n            if(countOfDrops > 1) return false;\n        }\n    }\n\n    // Check if the last element is greater than the first one (one more drop required for complete sorting)\n    return countOfDrops === arr[arr.length - 1] && arr[0] <= arr[arr.length - 2];\n};\n\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // Output: True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // Output: False"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>): boolean {\n    if (arr.length === 0) {\n        return true; // Leeres Array ist immer sortiert\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        let isSorted = true;\n        for (let j = 1; j < arr.length; j++) {\n            if (arr[j - 1] > arr[j]) {\n                isSorted = false;\n                break;\n            }\n        }\n\n        if (isSorted) {\n            return true; // Array ist schon sortiert\n        }\n\n        // Eine Rechtsschiebeoperation durchf\u00fchren\n        const lastElement = arr.pop();\n        arr.unshift(lastElement);\n    }\n\n    return false; // Es ist nicht m\u00f6glich, das Array zu sortieren\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "function exchange(lst1: number[], lst2: number[]): string {\n    // Counter for the swaps made between lst1 and lst2\n    let swapCount = 0;\n\n    // Check if it's possible to make all elements in lst1 even by swapping with lst2 elements\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) { // If element is odd\n            // Find an even number in lst2 to swap with the odd number in lst1\n            const foundEvenInLst2 = lst2.find(num => num % 2 === 0);\n\n            if (foundEvenInLst2 !== undefined) { // If there's an even number in lst2 to swap with\n                lst1[i] = foundEvenInLst2; // Swap the odd number in lst1 with the even number in lst2\n                lst2.splice(lst2.indexOf(foundEvenInLst2), 1); // Remove the even number from lst2\n                swapCount++; // Increment the swap counter\n            } else {\n                // If there's no even number in lst2 to swap with, return \"NO\"\n                return \"NO\";\n            }\n        }\n    }\n\n    // If all elements in lst1 can be made even by swapping, return \"YES\"\n    return swapCount > 0 ? \"YES\" : \"NO\";\n}\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // Output: \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // Output: \"NO\""}
{"task_id": "typescript/50", "language": "typescript", "completion": "function exchange(lst1: Array<number>, lst2: Array<number>): string {\n    let canBeGerade = true;\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n            canBeGerade = false;\n            break;\n        }\n    }\n\n    if (!canBeGerade) {\n        for (let i = 0; i < lst1.length && canBeGerade === false; i++) {\n            for (let j = 0; j < lst2.length; j++) {\n                if (lst1[i] % 2 !== 0 && lst2[j] % 2 === 0) {\n                    [lst1[i], lst2[j]] = [lst2[j], lst1[i]];\n                    canBeGerade = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    return canBeGerade ? \"YES\" : \"NO\";\n}"}
{"task_id": "typescript/51", "language": "typescript", "completion": "// Remove all characters from s that are present in c\nlet resultString = s.split('').filter(char => !c.includes(char)).join('');\n\n// Check if the resulting string is a palindrome\nlet isPalindrome = resultString === resultString.split('').reverse().join('');\n\n// Return a tuple containing the result string and the boolean value for palindrome check\nreturn [resultString, isPalindrome];"}
{"task_id": "typescript/51", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * Aufgabe\n *     Wir haben zwei Zeichenketten s und c. Du musst alle Zeichen in s l\u00f6schen, die einem Zeichen in c entsprechen.\n *     Dann musst du \u00fcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n *     Eine Zeichenkette ist ein Palindrom, wenn sie r\u00fcckw\u00e4rts gelesen genauso aussieht wie vorw\u00e4rts.\n *     Du solltest ein Tupel zu\u00fcckgeben, das die resultierende Zeichenkette und True/False f\u00fcr die \u00dcberpr\u00fcfung enth\u00e4lt.\n *     Beispiel\n *     F\u00fcr s = \"abcde\", c = \"ae\" sollte das Ergebnis ('bcd',False) sein.\n *     F\u00fcr s = \"abcdef\", c = \"b\" sollte das Ergebnis ('acdef',False) sein.\n *     F\u00fcr s = \"abcdedcba\", c = \"ab\" sollte das Ergebnis ('cdedc',True) sein.\n * \n * \n */\n\nconst reverse_delete = function (s: string, c: string): [string, boolean] {\n  // Remove characters from s that match any character in c\n  let resultString = Array.from(s).filter(char => !c.includes(char)).join('');\n\n  // Check if the resulting string is a palindrome\n  const isPalindrome = resultString === resultString.split('').reverse().join('');\n\n  return [resultString, isPalindrome];\n};\n\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // Output: ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number) : number  {\n    let totalBucketLowerings = 0;\n\n    for(let i=0; i<grid.length; i++) {\n        let waterUnits = grid[i].reduce((a, B) => A + B);\n        totalBucketLowerings += math.ceil(waterUnits / capacity);\n    }\n\n    return totalBucketLowerings;\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function(grid: Array<Array<number>>, capacity: number): number {\n    let result = 0;\n\n    // Iterate over each well\n    for (let i = 0; i < grid.length; i++) {\n        let waterUnits = 0;\n        \n        // Count the units of water in the current well\n        for (let j = 0; j < grid[i].length; j++) {\n            waterUnits += grid[i][j];\n        }\n\n        // Calculate and add the number of bucket lowings needed to empty the current well to the result\n        result += Math.ceil(waterUnits / capacity);\n    }\n\n    return result;\n};\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)); // Output: 6\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)); // Output: 5\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5)); // Output: 0"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function (s: string, n: number) : Array<string> {\n    if (s === \"\") return [];\n\n    const words = s.split(' '); // Splitting the sentence into words\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\n    const result = words.filter(word => {\n        // Counting the consonants in a word\n        const countConsonants = Array.from(word).reduce((count, char) => {\n            return consonants.includes(char.toLowerCase()) ? count + 1 : count;\n        }, 0);\n\n        // Checking if the word has exactly n consonants\n        return countConsonants === n;\n    });\n\n    return result;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/53", "language": "typescript", "completion": "/**\n * Returns a list of all words in the string s that contain exactly n consonants.\n * The order of these words in the output list is the same as their order in the input string.\n * If the input string is empty, the function returns an empty list.\n * Note: You can assume that the input string only contains letters and spaces.\n * Examples:\n * \n * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n * select_words(\"simple white space\", 2) ==> []\n * select_words(\"Hello world\", 4) ==> [\"world\"]\n * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n * \n */\nconst select_words = function (s: string, n: number): Array<string> {\n    // Check if the input string is empty\n    if (s === \"\") {\n        return [];\n    }\n\n    // Define a regular expression to match consonants\n    const consonantRegex = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g;\n\n    // Split the string into words\n    const words = s.split(\" \");\n\n    // Filter the words that contain exactly n consonants\n    const result = words.filter(word => {\n        const consonants = word.match(consonantRegex);\n        return consonants && consonants.length === n;\n    });\n\n    return result;\n};\n\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // Output: [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // Output: [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // Output: []\nconsole.log(select_words(\"Hello world\", 4)); // Output: [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // Output: [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "function maximum(arr: Array<number>, k: number): Array<number> {\n    // Sort array in descending order\n    const sortedArr = arr.sort((a, B) => B - A);\n    return sortedArr.slice(0, k);  // Return first 'k' elements of the sorted array\n}"}
{"task_id": "typescript/54", "language": "typescript", "completion": "// Sort the array in descending order\narr.sort((a, B) => B - A);\n\n// Slice the array to get the top 'k' elements\nconst result = arr.slice(0, k);\n\nreturn result;\n}"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).reduce((acc, curr) => {\n        if (curr >= -99 && curr <= 99) {\n            return acc + curr;\n        } else {\n            return acc;\n        }\n    }, 0);\n};\n\n// Test the function with example inputs\nconsole.log(add_elements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24 (21 + 3)"}
{"task_id": "typescript/55", "language": "typescript", "completion": "let sum = 0;\n\nfor(let i = 0; i < Math.min(k, arr.length); i++) {\n    if(arr[i] >= -99 && arr[i] <= 99) {\n        sum += arr[i];\n    }\n}\n\nreturn sum;"}
{"task_id": "typescript/56", "language": "typescript", "completion": "// Helper function to check if a number is prime\nfunction isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nconst intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n    // Calculate the intersection of the intervals\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    // If there is no intersection, return \"NO\"\n    if (start > end) return \"NO\";\n\n    // Calculate the length of the intersection\n    let intersectionLength = end - start + 1;\n\n    // Check if the intersection length is prime and return the result\n    return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n}"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n    // Check if intervals intersect\n    if (interval1[1] < interval2[0] || interval2[1] < interval1[0]) {\n        return \"NO\";\n    }\n\n    // Find intersection length\n    let startMax = Math.max(interval1[0], interval2[0]);\n    let endMin = Math.min(interval1[1], interval2[1]);\n    let intersectionLength = endMin - startMax + 1;\n\n    // Check if length is a prime number\n    if (intersectionLength > 1) {\n        for(let i = 2; i < intersectionLength; i++)\n            if(intersectionLength % i === 0) return \"NO\";\n        return \"YES\";\n    }\n\n    return \"NO\";\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n    if (n < 0) return []; // Return empty array if input is negative\n    // Base cases for the first three numbers of the sequence\n    if (n === 0) return [1];\n    if (n === 1) return [1, 3];\n    if (n === 2) return [1, 3, 2];\n\n    let result = [1, 3, 2]; // Initialize the sequence with its first three numbers\n\n    for (let i = 3; i <= n; i++) {\n        // For even n, tri(n) is 1 + n / 2\n        if (i % 2 === 0) {\n            result.push(1 + Math.floor(i / 2));\n        } else {\n            // for odd n, tri(n) is the sum of previous three numbers plus tri(n + 1)\n            let nextNumber = result[i - 3] + result[i - 2] + result[i - 1];\n            result.push(nextNumber);\n        }\n    }\n\n    return result;\n};\n\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = (n: number): Array<number> => {\n    if (n < 0) {\n        throw new Error(\"Die Eingabe muss eine nicht-negative ganze Zahl sein.\");\n    }\n\n    // Initialisiere die Tribonacci-Folge mit den Werten f\u00fcr n = 1, 2 und 3\n    let triboSequence: Array<number> = [1, 3, 2];\n\n    // F\u00fcr n > 3, iteriere und berechne die Tribonacci-Zahl\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            triboSequence.push(1 + Math.floor(i / 2));\n        } else {\n            let nextValue = triboSequence[i - 1] + triboSequence[i - 2] + triboSequence[i + 1];\n            triboSequence.push(nextValue);\n        }\n    }\n\n    return triboSequence;\n};\n\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "typescript/58", "language": "typescript", "completion": "// Import necessary packages\nimport { parseInt } from \"lodash\";\n\n/**\n * Returns the product of all odd digits in a given positive integer.\n * If all digits are even, returns 0.\n * Examples:\n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n */\nconst digits = function (n: number): number {\n    let product = 1;\n    let hasOdd = false;\n\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOdd ? product : 0;\n};\n\n// Check function to verify correctness of the generated function\nconst checkDigits = (): void => {\n    console.assert(digits(1) === 1, 'Test 1 failed');\n    console.assert(digits(4) === 0, 'Test 2 failed');\n    console.assert(digits(235) === 15, 'Test 3 failed');\n};\n\ncheckDigits(); // Call the check function to verify the solution"}
{"task_id": "typescript/58", "language": "typescript", "completion": "function isOdd(digit: number): boolean {\n    return digit % 2 !== 0;\n}\n\nconst digits = function (n: number): number {\n    let productOfOdds = 1;\n    let hasOddDigits = false;\n\n    while (n > 0) {\n        let digit = n % 10;\n        if (isOdd(digit)) {\n            productOfOdds *= digit;\n            hasOddDigits = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOddDigits ? productOfOdds : 0;\n};\n\n// Test cases\nconsole.log(digits(1));  // Output: 1\nconsole.log(digits(4));  // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const Is_nested = (string0: string): boolean => {\n    let counter = 0;\n    for(let i = 0; i < string0.length; i++) {\n        if(string0[i] === '[') {\n            counter++;\n        } else if(string0[i] === ']') {\n            if(--counter < 0) {\n                return false; // More closing brackets than opening ones\n            }\n        }\n    }\n    // If counter is greater than zero, it means there are unmatched opening brackets\n    return counter !== 0;\n};\n\nconsole.log(Is_nested('[[]]'));  // true\nconsole.log(Is_nested('[]]]]]]][[[[[]'));  // false\nconsole.log(Is_nested('[][]'));  // false\nconsole.log(Is_nested('[]'));  // false\nconsole.log(Is_nested('[[][]]'));  // true\nconsole.log(Is_nested('[[]][['));  // true"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const Is_nested = function(inputString: string): boolean {\n    let balance: number = 0;\n    let nested: boolean = false;\n\n    for (let char of inputString) {\n        if (char === '[') {\n            balance++;\n        } else if (char === ']') {\n            if (balance > 0) {\n                nested = true;\n            }\n            balance--;\n        }\n\n        // Early return if balance is negative (invalid sequence)\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    // Check that all brackets are balanced and at least one bracket is nested.\n    return balance === 0 && nested;\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = (lst: Array<number>): number => {\n    let sum = 0;\n    for(let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n    return Math.round(lst.reduce((sum, num) => sum + Math.pow(Math.ceil(num), 2), 0));\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "function checkIfLastCharIsALetter(txt: string): boolean {\n    if (txt.trim() === \"\") return false; // If string is empty, return false\n\n    const words = txt.split(\" \"); // Split string into words\n    const lastWord = words[words.length - 1]; // Get the last word\n    return /^[a-zA-Z]$/.test(lastWord.charAt(lastWord.length - 1)); // Check if the last character of the last word is a letter\n}\n\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // false\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // true\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // false\nconsole.log(checkIfLastCharIsALetter(\"\")); // false"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string) : boolean  {\n    // Check if the text is empty or consists only of whitespace characters\n    if (!txt.trim()) {\n        return false;\n    }\n\n    // Get the last character of the text\n    const lastChar = txt[txt.length - 1];\n\n    // Check if the last character is a letter and not part of a word\n    return /^[a-zA-Z]$/.test(lastChar) && !/\\s/.test(txt[txt.length - 2]);\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = (arr: Array<number>): number => {\n    for(let i=arr.length-1; i>0; i--) {\n        if(arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconsole.log(can_arrange([1,2,4,3,5])); // Output: 3\nconsole.log(can_arrange([1,2,3])); // Output: -1"}
{"task_id": "typescript/62", "language": "typescript", "completion": "let result: number = -1;\n    for(let i = arr.length - 1; i > 0; i--) {\n        if(arr[i] < arr[i-1]) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n};\n\n// Test cases\nconsole.log(can_arrange([1,2,4,3,5])); // Output: 3\nconsole.log(can_arrange([1,2,3])); // Output: -1"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): Array<any> {\n    let smallestPositive: number | null = null;\n    let largestNegative: number | null = null;\n\n    for (const num of lst) {\n        if (num < 0 && (largestNegative === null || num > largestNegative)) {\n            largestNegative = num;\n        } else if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n            smallestPositive = num;\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n};\n\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largest_smallest_integers([])); // [null, null]\nconsole.log(largest_smallest_integers([0])); // [null, null]"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = (lst: Array<number>) : [number | null, number | null]  => {\n    let negativeNumbers = lst.filter(num => num < 0);\n    let positiveNumbers = lst.filter(num => num > 0);\n\n    if (!negativeNumbers.length && !positiveNumbers.length) {\n        return [null, null]; // no negatives or positives in the list\n    } else if (!negativeNumbers.length) {\n        return [null, Math.min(...positiveNumbers)]; // only positives in the list\n    } else if (!positiveNumbers.length) {\n        return [Math.max(...negativeNumbers), null]; // only negatives in the list\n    } else {\n        let maxNegative = Math.max(...negativeNumbers);\n        let minPositive = Math.min(...positiveNumbers);\n        return [maxNegative, minPositive]; // both negatives and positives in the list\n    }\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "/**\n * This function calculates the special factorial of a given number n\n * The special factorial is defined as brazilian_factorial(n) = n! * (n-1)! * ... * 1!,\n * where n > 0\n * \n * Example:\n * >>> special_factorial(4)\n * 288\n * \n * @param {number} n - The number to calculate the special factorial for\n * @return {number} - The special factorial of n\n */\n\nconst special_factorial = (n: number): number => {\n    let result: number = 1;\n\n    for(let i: number = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n\n    return result;\n};\n\n/**\n * Helper function to calculate the factorial of a given number\n * \n * @param {number} num - The number to calculate the factorial for\n * @return {number} - The factorial of num\n */\n\nconst factorial = (num: number): number => {\n    let result: number = 1;\n\n    for(let i: number = 2; i <= num; i++) {\n        result *= i;\n    }\n\n    return result;\n};\n\n// Test the function with provided data point\nconsole.log(`Special factorial of 4 is ${special_factorial(4)}`); // Should output 288"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n\n    function factorial(num: number): number {\n        if (num <= 1) return 1;\n        else return num * factorial(num - 1);\n    }\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence: string): string {\n    const words = sentence.split(' ');\n    let result = '';\n\n    for (const word of words) {\n        if (isPrime(word.length)) {\n            result += word + ' ';\n        }\n    }\n\n    return result.trim();\n}\n\n// Example usage\nconsole.log(wordsInSentence(\"This is a test\")); // Output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "typescript/65", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false; // 0 and 1 are not primes\n\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) return false;\n    }\n\n    return true;\n}\n\nfunction words_in_sentence(sentence: string): string {\n    const words = sentence.split(' '); // split the sentence into words\n    const primeLengthWords = words.filter(word => isPrime(word.length)); // filter out words whose length isn't a prime\n\n    return primeLengthWords.join(' '); // join the filtered words back into a string with spaces in between\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    // Split the fractions into numerator and denominator using '/'\n    const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n\n    // Calculate the product of the numerators and denominators\n    const numeratorProduct = numeratorX * numeratorN;\n    const denominatorProduct = denominatorX * denominatorN;\n\n    // Check if the product is a whole number\n    return numeratorProduct % denominatorProduct === 0;\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\")); // Output: true\nconsole.log(simplify(\"1/6\", \"2/1\")); // Output: false\nconsole.log(simplify(\"7/10\", \"10/2\")); // Output: false"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = (x: string, n: string): boolean => {\n  // Teile x und n in ihre Z\u00e4hler- und Nennerteile zerteilen\n  const [numeratorX, denominatorX] = x.split('/').map(Number);\n  const [numeratorN, denominatorN] = n.split('/').map(Number);\n\n  // Umwandlung von Bruchform zu Dezimalform\n  const decimalX = numeratorX / denominatorX;\n  const decimalN = numeratorN / denominatorN;\n\n  // \u00dcberpr\u00fcfen, ob das Ergebnis eine ganzzahlige Zahl ist\n  return Math.floor(decimalX) === decimalX && Math.floor(decimalN) === decimalN;\n};\n\n// Testen der Funktion\nconsole.log(simplify(\"1/5\", \"5/1\")); // Output: true\nconsole.log(simplify(\"1/6\", \"2/1\")); // Output: false\nconsole.log(simplify(\"7/10\", \"10/2\")); // Output: false"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>) : Array<number> {\n    return nums.sort((a, B) => {\n        const sumA = A.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n        const sumB = B.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n\n        if (sumA === sumB) {\n            return nums.indexOf(A) - nums.indexOf(B);\n        } else {\n            return sumA - sumB;\n        }\n    });\n};\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // [ -1, -11, 1, -12, 11 ]\nconsole.log(order_by_points([])); // []"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const sumOfDigits = (n: number): number => {\n    return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\nconst order_by_points = function (nums: Array<number>): Array<number> {\n    return nums\n        .map((value, index) => ({ value, index, sum: sumOfDigits(value) })) // Map to intermediate representation with sum of digits and original index\n        .sort((a, B) => A.sum - B.sum || A.index - B.index) // Sort by sum, then by index if sums are equal\n        .map(item => item.value); // Map back to the original values\n};\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // Output: []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>) : number  {\n    let count = 0; // initialize counter to zero\n\n    for(let i=0; i < nums.length; i++){ // iterate through each element in the array\n        if(nums[i] > 10 && isFirstAndLastDigitOdd(Math.abs(nums[i]))){ // check if number is greater than 10 and first and Last digit are odd\n            count++; // increment counter\n        }\n    }\n\n    return count; // return final count\n};\n\n// helper function to check if First and Last digits of a number are odd\nfunction isFirstAndLastDigitOdd(num:number): boolean{\n    let lastDigit = num % 10; // get last digit by getting remainder when divided by 10\n    let firstDigit = num;\n    while (FirstDigit >= 10) { // keep dividing number by 10 until it is less than 10\n        FirstDigit /= 10;\n    }\n\n    return (FirstDigit % 2 !== 0) && (lastDigit % 2 !== 0); // check if both First and Last digits are odd\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // outputs: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // outputs: 2"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    let count = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        // Ensure the number is positive and greater than 10\n        if (nums[i] > 10) {\n            const strNum = Math.abs(nums[i]).toString(); // Convert number to string to check digits\n\n            // Check if both first and last digits are odd\n            if ((parseInt(strNum[0]) % 2 !== 0) && (parseInt(strNum[strNum.length - 1]) % 2 !== 0)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "function getMaxTriples(n: number): number {\n    // Create an array a of length n with values according to the formula i * i - i + 1.\n    const a: number[] = Array.from({length: n}, (_, i) => i * i - i + 1);\n\n    let count = 0; // Initialize the count of valid triples\n\n    // Iterate through all possible triple combinations of A\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                // Check if the sum of the current triple is a multiple of 3\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++; // Increment the count if it's a valid triple\n                }\n            }\n        }\n    }\n\n    return count; // Return the total number of valid triples\n}\n\n// Test the function with an example input\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "typescript/69", "language": "typescript", "completion": "for(let i=1; i<n+1; i++) {\n  A[i-1] = i * i - i + 1; // Calculate the value of each element in A based on the given formula\n}"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction bf(planet1: string, planet2: string): Array<string> {\n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return [];\n    }\n\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1]; // Swap indices if planet1 is farther from the Sun than planet2\n    }\n\n    return planets.slice(index1 + 1, index2).sort((a, B) => planets.indexOf(A) - planets.indexOf(B));\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets: string[] = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction getPlanetsBetween(planet1: string, planet2: string): string[] {\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1]; // Swap if planet1 is farther from the sun than planet2\n    }\n\n    return planets.slice(index1 + 1, index2);\n}\n\nconsole.log(getPlanetsBetween(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\nconsole.log(getPlanetsBetween(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\nconsole.log(getPlanetsBetween(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = (n: number, x: number, y: number) : number  => {\n    if(n <= 1){\n        return y;\n    } else if(n === 2){\n        return x;\n    } else {\n        for(let i = 2; i < n; i++)\n            if(n % i === 0) return y;\n        return x;\n    }\n};\n\nconsole.log(x_or_y(7, 34, 12)); // Should print: 34\nconsole.log(x_or_y(15, 8, 5));  // Should print: 5"}
{"task_id": "typescript/71", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nconst x_or_y = function(n: number, x: number, y: number): number {\n    return isPrime(n) ? x : y;\n};\n\n// Test cases\nconsole.log(x_or_y(7, 34, 12)); // Should return 34\nconsole.log(x_or_y(15, 8, 5));  // Should return 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    // Initialize sum to zero\n    let sum = 0;\n    \n    // Iterate through the array\n    for(let i=0; i<lst.length; i++){\n        // Check if the number is positive and an integer\n        if(lst[i] > 0 && lst[i] % 2 !== 0){\n            // Calculate the square of the number\n            let square = Math.pow(lst[i], 2);\n            // Add the squared number to the sum\n            sum += square;\n        }\n    }\n\n    return sum;\n};\n\nconsole.log(double_the_difference([1, 3, 2, 0])); // Output: 10\nconsole.log(double_the_difference([-1, -2, 0])); // Output: 0\nconsole.log(double_the_difference([9, -2])); // Output: 81\nconsole.log(double_the_difference([0])); // Output: 0"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = (lst: Array<number>): number => {\n    if(lst.length === 0) return 0;\n\n    return lst.reduce((sum, num) => {\n        if(num > 0 && num % 2 !== 0){\n            return sum + Math.pow(num, 2);\n        }\n        return sum;\n    }, 0);\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "function strongestExtension(className: string, extensions: string[]): string {\n    let strongestExtName = \"\";\n    let maxStrength = -Infinity;\n\n    for (const ext of extensions) {\n        const uppercaseCount = (ext.match(/[A-Z]/g) || []).length;\n        const lowercaseCount = (ext.match(/[a-z]/g) || []).length;\n        const strength = uppercaseCount - lowercaseCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtName = ext;\n        }\n    }\n\n    return `${className}.${strongestExtName}`;\n}"}
{"task_id": "typescript/73", "language": "typescript", "completion": "/**\n * Ermittelt die st\u00e4rkste Erweiterung f\u00fcr eine bestimmte Klasse und gibt sie im Format ClassName.StrongestExtensionName zur\u00fcck.\n * Die St\u00e4rke einer Erweiterung wird berechnet, indem die Anzahl der Kapitalkonsonanten (CAP) minus die Anzahl der Kleinbuchstaben (SM) dividiert werden.\n * Es wird die erste st\u00e4rkste Erweiterung gew\u00e4hlt, falls es mehrere gleiche St\u00e4rken gibt.\n */\n\nconst Strongest_Extension = function (class_name: string, extensions: Array<string>) : string  {\n    let strongestExtensionName = '';\n    let strongestStrength = -Infinity; // Start with the lowest possible value\n\n    for (const extension of extensions) {\n        let capCount = 0;\n        let smCount = 0;\n\n        // Count uppercase and lowercase letters in the extension name\n        for (const char of extension) {\n            if ('A' <= char && char <= 'Z') capCount++; // Increase capital count if it's an uppercase letter\n            else if ('a' <= char && char <= 'z') smCount++; // Increase lowercase count if it's a lowercase letter\n        }\n\n        // Calculate the strength of the current extension\n        const strength = capCount - smCount;\n\n        if (strength > strongestStrength) {\n            strongestStrength = strength;\n            strongestExtensionName = extension;\n        }\n    }\n\n    return `${class_name}.${strongestExtensionName}`; // Return the class name with its strongest extension\n};\n\n// Test cases\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // Expected output: 'my_class.AA'"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = (A: string, B: string): boolean => {\n    // Combine A with itself to create a larger string that contains all possible rotations of A.\n    let doubleA = A + A;\n\n    // Check if B is a substring of the doubled A string.\n    return doubleA.includes(B);\n};\n\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // false\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // true\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // false\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // true\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // false\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // true"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (A: string, B: string): boolean {\n    // Create a longer string by concatenating A with itself\n    let doubleA = A + A;\n\n    // Check if B is a substring of the doubled version of A\n    return doubleA.includes(B);\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "interface RomanNumeralMap {\n    [key: number]: string;\n}\n\nconst romanNumerals: RomanNumeralMap = {\n    1000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n};\n\nconst int_to_mini_roman = function (num: number): string {\n    let roman = '';\n\n    for (let key of Object.keys(romanNumerals).reverse()) {\n        let numKey = parseInt(key);\n        while (num >= numKey) {\n            roman += romanNumerals[numKey];\n            num -= numKey;\n        }\n    }\n\n    return roman;\n};\n\n// Test cases\nconsole.log(int_to_mini_roman(19)); // Output: 'xix'\nconsole.log(int_to_mini_roman(152)); // Output: 'clii'\nconsole.log(int_to_mini_roman(426)); // Output: 'cdxxvi'"}
{"task_id": "typescript/75", "language": "typescript", "completion": "// Array, das die Werte und Zeichenkette f\u00fcr die r\u00f6mischen Ziffern enth\u00e4lt\nconst romanNumerals: [number, string][] = [\n    [1000, 'm'],\n    [900, 'cm'],\n    [500, 'd'],\n    [400, 'cd'],\n    [100, 'c'],\n    [90, 'xc'],\n    [50, 'l'],\n    [40, 'xl'],\n    [10, 'x'],\n    [9, 'ix'],\n    [5, 'v'],\n    [4, 'iv'],\n    [1, 'i']\n];\n\n/**\n * Konvertiert eine positive Ganzzahl in ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gibt sie in Kleinbuchstaben zur\u00fcck.\n * @param number0 Die positive Ganzzahl\n * @returns Die r\u00f6mische Numeral-\u00c4quivalenz der Ganzzahl\n */\nconst int_to_mini_roman = function (number0: number): string {\n    let roman = '';\n    for (let [value, symbol] of romanNumerals) {\n        while (number0 >= value) {\n            roman += symbol;\n            number0 -= value;\n        }\n    }\n    return roman.toLowerCase();\n};\n\n// Testfallpruefung\nconsole.log(int_to_mini_roman(19)); // 'xix'\nconsole.log(int_to_mini_roman(152)); // 'clii'\nconsole.log(int_to_mini_roman(426)); // 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // Sortieren der Seitenl\u00e4nge\n    const sides = [A, B, C].sort((a, B) => A - B);\n\n    // \u00dcberpr\u00fcfen, ob die Hypotenuse die Summe der anderen beiden Seiten ist\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "/**\n * Determines whether the given sides form a right-angled triangle.\n * A right-angled triangle has one angle that is exactly 90 degrees.\n * This function sorts the lengths of the sides and checks if the square of the longest side equals the sum of the squares of the other two sides, which is the Pythagorean theorem.\n * \n * @param {number} A - The length of the first side.\n * @param {number} B - The length of the second side.\n * @param {number} C - The length of the third side.\n * @return {boolean} True if the sides form a right-angled triangle, false otherwise.\n */\nconst right_angle_triangle = (A: number, B: number, C: number): boolean => {\n  // Sort the sides to make sure the longest side is last.\n  const sides = [A, B, C].sort((a, B) => A - B);\n\n  // Apply the Pythagorean theorem.\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};\n\nconsole.log(right_angle_triangle(3, 4, 5)); // Output: true\nconsole.log(right_angle_triangle(1, 2, 3)); // Output: false"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string) : string {\n    let result = '';\n    let hasLetters = false;\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/)) { // Check if the character is a letter\n            result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase(); // Swap case\n            hasLetters = true;\n        } else {\n            result += s[i]; // Keep the character as it is if it's not a letter\n        }\n    }\n\n    return hasLetters ? result : result.split('').reverse().join(''); // Reverse string if no letters were found\n};\n\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\")); // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = (s: string): string => {\n    let hasLetters = false;\n    let result = '';\n\n    // Check each character in the string\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() !== s[i].toUpperCase()) { // Check if the character is a letter\n            hasLetters = true;\n            result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n\n    // If no letters are found, reverse the string\n    if (!hasLetters) {\n        return result.split('').reverse().join('');\n    }\n\n    return result;\n};\n\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\")); // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "bash\nnpm install crypto-js"}
{"task_id": "typescript/78", "language": "typescript", "completion": "import * as crypto from 'crypto';\n\nconst string_to_md5 = function (text: string) : any {\n    if (!text) {\n        return null;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = (A: number, B: number): Array<number> => {\n    let result: Array<number> = [];\n\n    // Ensure A is less than or equal to B for ascending order\n    if(A > B){\n        [A, B] = [B, A];\n    }\n\n    for(let i = A; i <= B; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n\nconsole.log(generate_integers(2, 8));  // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2));  // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // Output: []"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (A: number, B: number): Array<number> {\n    let result: Array<number> = [];\n    // Ensure A is always less than or equal to B\n    if (A > B) [A, B] = [B, A];\n\n    for (let i = A; i <= B; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(generate_integers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // []"}

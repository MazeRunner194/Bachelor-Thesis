{"task_id": "java/0", "language": "java", "completion": "import java.util.*;\n\nclass BelowZero {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> operations1 = Arrays.asList(1, 2, 3);\n        List<Integer> operations2 = Arrays.asList(1, 2, -4, 5);\n\n        System.out.println(belowZero(operations1)); // Output: false\n        System.out.println(belowZero(operations2)); // Output: true\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    public static Pair<Integer, Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Number) {\n                Number num = (Number) number;\n                sum += num.intValue();\n                product *= num.intValue();\n            }\n        }\n\n        return new Pair<>(sum, product);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumProduct(new ArrayList<Object>())); // prints (0, 1)\n        System.out.println(sumProduct(Arrays.asList(1, 2, 3, 4))); // prints (10, 24)\n    }\n}\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + this.key + \", \" + this.value + \")\";\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n    public static String stringXor(String A, String B) {\n        // Initialize an empty StringBuilder object to store the result\n        StringBuilder result = new StringBuilder();\n\n        // Get the length of both strings\n        int len = A.length();\n\n        // Perform XOR operation for each bit\n        for (int i = 0; i < len; i++) {\n            // Convert the current characters to integers and perform XOR\n            int bitXorResult = Integer.parseInt(String.valueOf(A.charAt(i))) ^ Integer.parseInt(String.valueOf(B.charAt(i)));\n\n            // Convert the result back to a string and append it to the StringBuilder\n            result.append(Integer.toString(bitXorResult));\n        }\n\n        // Return the final XOR result as a string\n        return result.toString();\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     */\n    public static String longest(List<Object> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        String longestStr = \"\";\n        for (Object obj : strings) {\n            String str = (String) obj;\n            if (str.length() > longestStr.length()) {\n                longestStr = str;\n            }\n        }\n\n        return longestStr;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(longest(new ArrayList<Object>(Arrays.asList()))); // null\n        System.out.println(longest(new ArrayList<Object>(Arrays.asList(\"A\", \"b\", \"c\")))); // A\n        System.out.println(longest(new ArrayList<Object>(Arrays.asList(\"A\", \"bb\", \"ccc\")))); // ccc\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "public static int greatestCommonDivisor(int A, int b) {\n    if (b == 0) {\n        return A;\n    } else {\n        return greatestCommonDivisor(b, A % b);\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    public static String sortNumbers(String numbers) {\n        // Convert the input string to an array of strings\n        String[] numberArray = numbers.split(\" \");\n\n        // Create a HashMap to map each word to its corresponding integer value\n        HashMap<String, Integer> numToInt = new HashMap<>();\n        numToInt.put(\"zero\", 0);\n        numToInt.put(\"one\", 1);\n        numToInt.put(\"two\", 2);\n        numToInt.put(\"three\", 3);\n        numToInt.put(\"four\", 4);\n        numToInt.put(\"five\", 5);\n        numToInt.put(\"six\", 6);\n        numToInt.put(\"seven\", 7);\n        numToInt.put(\"eight\", 8);\n        numToInt.put(\"nine\", 9);\n\n        // Convert the array of strings to an array of integers using the HashMap\n        Integer[] intArray = new Integer[numberArray.length];\n        for (int i = 0; i < numberArray.length; i++) {\n            intArray[i] = numToInt.get(numberArray[i]);\n        }\n\n        // Sort the array of integers\n        Arrays.sort(intArray);\n\n        // Convert the sorted array of integers back to an array of strings using the HashMap\n        String[] sortedNumberArray = new String[intArray.length];\n        for (int i = 0; i < intArray.length; i++) {\n            sortedNumberArray[i] = numToInt.inverse().get(intArray[i]);\n        }\n\n        // Join the sorted array of strings into a single string and return it\n        return String.join(\" \", sortedNumberArray);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortNumbers(\"three one five\")); // Output: \"one three five\"\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.*;\n\nclass RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            rescaledNumbers.add((num - min) / range);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(numbers));  // prints: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(flip_case(\"Hello\")); // Output: 'hELLO'\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     */\n    public static List<Integer> getPositive(List<Object> l) {\n        // Create a new ArrayList to store the positive numbers\n        List<Integer> positiveNumbers = new ArrayList<>();\n\n        // Iterate over each element in the input list\n        for (Object obj : l) {\n            // Check if the object is an Integer and its value is greater than 0\n            if (obj instanceof Integer && ((Integer) obj) > 0) {\n                positiveNumbers.add((Integer) obj);\n            }\n        }\n\n        // Return the list of positive numbers\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getPositive(Arrays.asList(-1, 2, -4, 5, 6))); // Output: [2, 5, 6]\n        System.out.println(getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "This Java code defines a class called `IsPrime` with a static method `isPrime` that takes an integer `n` as its parameter and returns a boolean value indicating whether `n` is a prime number or not.\n\nThe function `isPrime(int n)` checks if the given number `n` is prime by iterating from 2 to the square root of `n`. For each number `i` in this range, it checks if `n` is divisible by `i`. If `n` can be divided evenly by any number within this range, then `n` is not a prime number and the function returns `false`.\n\nIf no numbers from 2 to the square root of `n` divide `n`, then `n` must be a prime number and the function returns `true`.\n\nHere's how it works for some example inputs:\n\n- `Is_prime(6)` will return `false`, because 6 is divisible by both 2 and 3.\n- `Is_prime(101)` will return `true`, because 101 has no divisors other than 1 and itself.\n- `Is_prime(11)` will return `true`, for the same reason as above.\n- `Is_prime(13441)` will also return `true`, because it's a large prime number with no other divisors apart from 1 and itself.\n- `Is_prime(61)` will return `true`.\n- `Is_prime(4)` will return `false`, for the same reason as `6`.\n- `Is_prime(1)` will return `false`, since 1 is not a prime number (it only has one divisor: itself).\n\nPlease note that this implementation of the prime-checking function is sufficient for relatively small numbers, but it may have performance issues with larger numbers. For such cases, more sophisticated algorithms like the Miller-Rabin primality test can be used."}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    public static List<Integer> unique(List<Integer> l) {\n        TreeSet<Integer> set = new TreeSet<>(l);\n        return new ArrayList<>(set);\n    }\n    \n    // Test the method\n    public static void main(String[] args) {\n        List<Integer> testList = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = unique(testList);\n        System.out.println(uniqueList); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "public static boolean isPrime(long num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (long i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.List;\n\npublic class TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        // Iterate over each element in the list\n        for (int i = 0; i < l.size(); i++) {\n            // For every 'i' value, iterate over the next two elements from i+1 to size of list\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                // for each pair ('i', 'j'), find a third element that sums up to zero\n                for (int k = j + 1; k < l.size(); k++) {\n                    // If the sum of elements at indexes i, j and k is zero\n                    if ((l.get(i) + l.get(j) + l.get(k)) == 0) {\n                        // Return true as we found a triplet that sums to zero\n                        return true;\n                    }\n                }\n            }\n        }\n        // If no triplet was found that sums to zero, return false\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n    HashSet<Integer> seen = new HashSet<>(); // To store elements we have seen so far\n\n    for (int num : l) {\n        if (seen.contains(-num)) { // Check if negation of current element is present in the HashSet\n            return true; // Found two distinct elements that sum to zero\n        } else {\n            seen.add(num); // Add current element to the HashSet\n        }\n    }\n\n    return false; // No pairs found that sum to zero\n}"}
{"task_id": "java/14", "language": "java", "completion": "if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int a = 0, B = 0, C = 2, D = 0;\n        for (int i = 4; i <= n; i++) {\n            int sum = A + B + C + D;\n            A = B;\n            B = C;\n            C = D;\n            D = sum;\n        }\n        return D;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5));  // Output: 4\n        System.out.println(fib4(6));  // Output: 8\n        System.out.println(fib4(7));  // Output: 14\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    public static Number median(List<Integer> l) {\n        Collections.sort(l); // Sort the list in ascending order\n        int size = l.size();\n\n        if (size % 2 == 1) { // Odd number of elements\n            return new Integer(l.get((size - 1) / 2)); // Return middle element\n        } else { // Even number of elements\n            return ((double)(l.get(size / 2 - 1) + l.get(size / 2))) / 2; // Calculate average of two middle elements\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3\n        System.out.println(median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "public class IsPalindrome {\n\n    /**\n     * Checks if given string is a palindrome\n     * \n     * @param text The input string to be checked\n     * @return true if the input string is a palindrome, false otherwise\n     */\n    public static Boolean isPalindrome(String text) {\n        // Check for null or empty string\n        if (text == null || text.isEmpty()) {\n            return true; // A null or empty string is considered a palindrome\n        }\n\n        int left = 0; // Start of the string\n        int right = text.length() - 1; // End of the string\n\n        // Loop through the string from both ends towards the center\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false; // If any character at left and right positions are not equal, return false\n            }\n            left++; // Move left pointer towards right\n            right--; // Move right pointer towards left\n        }\n\n        return true; // If all characters match from both ends, return true\n    }\n\n    // Main method for testing the isPalindrome function\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "public static String removeVowels(String text) {\n    // Convert the input string to lowercase for uniform comparison.\n    text = text.toLowerCase();\n\n    // Define a set of vowels.\n    Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n\n    // Build the result string by appending characters not in the vowel set.\n    StringBuilder result = new StringBuilder();\n    for (char ch : text.toCharArray()) {\n        if (!vowels.contains(ch)) {\n            result.append(ch);\n        }\n    }\n\n    // Return the final string without vowels.\n    return result.toString();\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (int num : l) {\n    if (num >= t) {\n        return false;\n    }\n}\nreturn true;"}
{"task_id": "java/19", "language": "java", "completion": "class Add {\n    // Method to add two numbers x and y\n    public static int add(int x, int y) {\n        return x + y; // Returns the sum of x and y\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(add(2, 3)); // Output: 5\n        System.out.println(add(5, 7)); // Output: 12\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "// Convert each string into a HashSet to remove duplicates and then compare them\n        HashSet<Character> set1 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n\n        HashSet<Character> set2 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n\n        return set1.equals(set2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "class Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"fib(10): \" + fib(10)); // Output: fib(10): 55\n        System.out.println(\"fib(1): \" + fib(1));  // Output: fib(1): 1\n        System.out.println(\"fib(8): \" + fib(8));  // Output: fib(8): 21\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\n\nclass Common {\n    public static List<Integer> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object obj : l2) {\n            if (obj instanceof Integer && set1.contains((Integer) obj)) {\n                result.add((Integer) obj);\n                set1.remove((Integer) obj); // Remove the found element to avoid duplicates\n            }\n        }\n\n        Collections.sort(result); // Sort the list in ascending order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Object> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(common(list1, list2)); // Output: [1, 5, 653]\n\n        List<Integer> list3 = Arrays.asList(5, 3, 2, 8);\n        List<Object> list4 = Arrays.asList(3, 2);\n        System.out.println(common(list3, list4)); // Output: [2, 3]\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "This Java code defines a class `LargestPrimeFactor` with a static method `largestPrimeFactor` that takes an integer `n` as input and returns the largest prime factor of `n`. The algorithm used here to find the largest prime factor is based on trial division, which checks for factors starting from 2 up to the square root of `n`.\n\nHere's how it works:\n\n1. Initialize a variable `maxPrime` to store the largest prime factor found so far. Initially, set it to -1, as we haven't found any prime factors yet.\n2. Start checking for factors from 2 up to the square root of `n`.\n3. If `n` is divisible by a number within this range, then that number is a potential factor.\n4. Check if this factor is a prime number. To do this, iterate through all numbers from 2 up to the square root of the factor. If none of these divide evenly into the factor, it's prime.\n5. If the factor is indeed prime and greater than `maxPrime`, update `maxPrime` with this value.\n6. Once you've checked all possible factors within the range, continue the process by dividing `n` by `maxPrime` if necessary (to handle cases where `maxPrime` divides `n` more than once).\n7. Continue this process until `n` becomes 1, indicating that we've found all prime factors and are left with 1 as the only factor.\n\nAfter the loop ends, return `maxPrime`, which will be the largest prime factor of the input number `n`."}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n    int sum = 0;  // Initialize sum to 0\n\n    for (int i = 1; i <= n; i++) {\n        sum += i;  // Add each number from 1 to 'n' to the sum\n    }\n\n    return sum;  // Return the final sum\n}"}
{"task_id": "java/25", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            result.add((long)xs.get(i) * i);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3)));      // Output: [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "import java.util.*;\n\nclass FibFib {\n    // This function will return the n-th element of the fibfib sequence\n    public static int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "public class VowelsCount {\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n    }\n\n    public static int vowelsCount(String s) {\n        s = s.toLowerCase();  // Convert the string to lowercase for uniformity\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {  // Check for 'y' at the end of the word\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\nclass Search {\n    public static int search(List<Integer> list) {\n        // Create a frequency map of all numbers in the list.\n        Map<Integer, Long> freqMap = list.stream()\n                                       .boxed()\n                                       .collect(Collectors.groupingBy(e -> e, Collectors.counting()));\n\n        // Find the greatest integer that meets the condition.\n        int result = -1;\n        for (Map.Entry<Integer, Long> entry : freqMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n\n    /**\n     * Given the lengths of the three sides of a triangle, return the area of \n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1.\n     * Three sides make a valid triangle when the sum of any two sides is greater than \n     * the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public static double triangleArea(int a, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (A + b > c && A + c > b && B + c > A) {\n            // Calculate the semi-perimeter\n            double s = (A + b + c) / 2.0;\n\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n            // Round the area to 2 decimal places and return\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5));  // Output: 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "List<Integer> q = Arrays.asList(3, 2, 3);\nint w = 9;\nSystem.out.println(willItFly(q, w));  // Output: true"}
{"task_id": "java/31", "language": "java", "completion": "public class IsMultiplyPrime {\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static boolean isMultiplyPrime(int A) {\n        int count = 0;\n        for (int i = 2; i <= A / 2; i++) {\n            if (A % i == 0 && isPrime(i)) {\n                count++;\n                A /= i;\n            }\n        }\n\n        // Check if the remaining number is a prime and not 1 (excluding 1 as it's neither prime nor composite)\n        if (isPrime(A) && A > 1) {\n            count++;\n        }\n\n        return count >= 3; // Returns true if the count of primes is at least 3, false otherwise.\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // True\n        System.out.println(isMultiplyPrime(60)); // True (2*3*5)\n        System.out.println(isMultiplyPrime(8));  // False\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n    // Convert the integer to binary using Integer.toBinaryString method\n    String binary = Integer.toBinaryString(decimal);\n    // Add 'db' at the beginning and end of the string\n    return \"db\" + binary + \"db\";\n}\n\npublic static void main(String[] args) {\n    System.out.println(decimalToBinary(15));  // Output: db1111db\n    System.out.println(decimalToBinary(32));  // Output: db100000db\n}"}
{"task_id": "java/33", "language": "java", "completion": "System.out.println(IsHappy.IsHappy(\"xyz\"));  // Output: true\nSystem.out.println(IsHappy.IsHappy(\"xxy\"));  // Output: false"}
{"task_id": "java/34", "language": "java", "completion": "public static List<String> numericalLetterGrade(List<Number> grades) {\n    List<String> letterGrades = new ArrayList<>();\n    for (Number grade : grades) {\n        double gpa = grade.doubleValue();\n        if (gpa == 4.0) {\n            letterGrades.add(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrades.add(\"A\");\n        } else If (gpa > 3.3) {\n            letterGrades.add(\"A-\");\n        } else If (gpa > 3.0) {\n            letterGrades.add(\"B+\");\n        } else If (gpa > 2.7) {\n            letterGrades.add(\"B\");\n        } else If (gpa > 2.3) {\n            letterGrades.add(\"B-\");\n        } else If (gpa > 2.0) {\n            letterGrades.add(\"C+\");\n        } else If (gpa > 1.7) {\n            letterGrades.add(\"C\");\n        } else If (gpa > 1.3) {\n            letterGrades.add(\"C-\");\n        } else If (gpa > 1.0) {\n            letterGrades.add(\"D+\");\n        } else If (gpa > 0.7) {\n            letterGrades.add(\"D\");\n        } else If (gpa > 0.0) {\n            letterGrades.add(\"D-\");\n        } else {\n            letterGrades.add(\"E\");\n        }\n    }\n    return letterGrades;\n}"}
{"task_id": "java/35", "language": "java", "completion": "public static void main(String[] args) {\n    System.out.println(PrimeLength.primeLength(\"Hello\")); // Output: true\n    System.out.println(PrimeLength.primeLength(\"abcdcba\")); // Output: true\n    System.out.println(PrimeLength.primeLength(\"kittens\")); // Output: true\n    System.out.println(PrimeLength.primeLength(\"orange\")); // Output: false\n}"}
{"task_id": "java/36", "language": "java", "completion": "public static String solve(int n) {\n    int sum = 0;\n    int temp = n;\n    while (temp > 0) {\n        sum += temp % 10;\n        temp /= 10;\n    }\n    return Integer.toBinaryString(sum);\n}"}
{"task_id": "java/37", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n\n      for (int i = 0; i < lst.size(); i++) {\n        List<Integer> row = (List<Integer>) lst.get(i);\n        for (int j = 0; j < row.size(); j++) {\n          if (row.get(j) == x) {\n            result.add(Arrays.asList(i, j));\n          }\n        }\n      }\n\n      Collections.sort(result, new Comparator<Object>() {\n        @Override\n        public int compare(Object o1, Object o2) {\n          List<Integer> p1 = (List<Integer>) o1;\n          List<Integer> p2 = (List<Integer>) o2;\n\n          int rowCompare = Integer.compare(p1.get(0), p2.get(0));\n          if (rowCompare != 0) {\n            return rowCompare;\n          } else {\n            return Integer.compare(p2.get(1), p1.get(1));\n          }\n        }\n      });\n\n      return result;\n    }\n\n    public static void main(String[] args) {\n      List<Object> lst = Arrays.asList(\n              Arrays.asList(1, 2, 3, 4, 5, 6),\n              Arrays.asList(1, 2, 3, 4, 1, 6),\n              Arrays.asList(1, 2, 3, 4, 5, 1)\n      );\n      int x = 1;\n      System.out.println(getRow(lst, x));\n\n      lst = new ArrayList<>();\n      x = 1;\n      System.out.println(getRow(lst, x));\n\n      lst = Arrays.asList(\n              new ArrayList<>(),\n              Arrays.asList(1),\n              Arrays.asList(1, 2, 3)\n      );\n      x = 3;\n      System.out.println(getRow(lst, x));\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n   public static Integer nextSmallest(List<Object> lst) {\n        if (lst == null || lst.size() < 2) return null;\n\n        Set<Integer> nums = new HashSet<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) nums.add((Integer)obj);\n        }\n\n        List<Integer> sortedNums = new ArrayList<>(nums);\n        Collections.sort(sortedNums);\n\n        return sortedNums.size() > 1 ? sortedNums.get(1) : null;\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "int boredoms = 0;\n    String[] sentences = s.split(\"[.?!]\");\n\n    for (String sentence : sentences) {\n        String trimmedSentence = sentence.trim();\n        if (trimmedSentence.startsWith(\"I \")) {\n            boredoms++;\n        }\n    }\n\n    return boredoms;\n}\n\npublic static void main(String[] args) {\n    System.out.println(IsBored(\"Hello world\")); // Output: 0\n    System.out.println(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n}\n\n```"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.*;\n\nclass Skjkasdkd {\n    private static boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int sum = 0;\n        for (int num : lst) {\n            if (IsPrime(num)) {\n                while (num > 0) {\n                    sum += num % 10;\n                    num /= 10;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(skjkasdkd(lst));  // Outputs: 10\n\n        lst = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(skjkasdkd(lst));  // Outputs: 25\n\n        // Add more test cases as needed...\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "public static boolean checkDictCase(Map<?, ?> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allUpper = true;\n        boolean AllLower = true;\n\n        for (Object key : dict.keySet()) {\n            String k = key.toString();\n            if (!k.equals(k.toUpperCase())) {\n                AllUpper = false;\n            }\n            if (!k.equals(k.toLowerCase())) {\n                AllLower = false;\n            }\n        }\n\n        return AllUpper || AllLower;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkDictCase(Map.of(\"A\", \"apple\", \"b\", \"banana\"))); // true\n        System.out.println(checkDictCase(Map.of(\"A\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // false\n        System.out.println(checkDictCase(Map.of(\"A\", \"apple\", 8, \"banana\", \"A\", \"apple\"))); // false\n        System.out.println(checkDictCase(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // false\n        System.out.println(checkDictCase(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // true\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "BigDecimal num = new BigDecimal(value);\n        BigDecimal floorValue = new BigDecimal(num.toBigInteger());\n        BigDecimal ceilValue = floorValue.add(BigDecimal.ONE);\n\n        // Check if the number is equidistant from floor and ceiling values\n        if (num.subtract(floorValue).abs().compareTo(ceilValue.subtract(num)) == 0) {\n            // Round away from zero\n            return num.signum() > 0 ? ceilValue.intValue() : floorValue.intValue();\n        } else {\n            // Return the closest value to the given number\n            return num.compareTo(floorValue) >= 0 ? ceilValue.intValue() : floorValue.intValue();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // Output: 10\n        System.out.println(closestInteger(\"15.3\")); // Output: 15\n        System.out.println(closestInteger(\"14.5\")); // Output: 15\n        System.out.println(closestInteger(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "List<Integer> stones = new ArrayList<>();\n        int currentStones = n;\n\n        for (int i = 0; i < n; i++) {\n            stones.add(currentStones);\n            // Determine the next number of stones based on the current number's parity\n            if (currentStones % 2 == 0) { // If even\n                currentStones += 1; // Next odd number\n            } else { // If odd\n                currentStones += 2; // Next even number\n            }\n        }\n\n        return stones;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makeAPile(3)); // [3, 5, 7]\n        System.out.println(makeAPile(4)); // [4, 6, 8, 10]\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsString {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * for example:\n     * words_string(\"Hi, My name is John\") should return [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") should return [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static String[] wordsString(String s) {\n        // Use regex to split the string by either comma or space\n        String[] words = s.split(\"[, ]+\");\n\n        return words;\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "if (x > y) {\n            return -1;\n        }\n\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n\n        return -1; // This line is technically unnecessary due to the earlier return if statement, but it's included for completeness.\n    }\n\n    public static void main(String[] args) {\n        System.out.println(chooseNum(12, 15)); // Output: 14\n        System.out.println(chooseNum(13, 12)); // Output: -1\n        System.out.println(chooseNum(18, 22)); // Output: 22\n        System.out.println(chooseNum(21, 19)); // Output: -1\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "class RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        double sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = Math.round(sum / ((double)(m - n + 1)));\n\n        String binaryStr = Integer.toBinaryString((int)avg);\n\n        return \"0b\" + binaryStr;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // Output: 0b11\n        System.out.println(roundedAvg(7, 5)); // Output: -1\n        System.out.println(roundedAvg(10, 20)); // Output: 0b1111\n        System.out.println(roundedAvg(20, 33)); // Output: 0b11010\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.ArrayList;\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n\n        return result;\n    }\n\n    private static int factorial(int i) {\n        int factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        return factorial;\n    }\n\n    private static int sum(int i) {\n        return (i * (i + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> result = f(5);\n        System.out.println(result);  // Output: [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "Sure, I can help you with that Java function. Here's how it works:\n\nThe function `evenOddPalindrome` takes an integer `n` as input and returns a list of two integers, where the first integer is the number of even palindromes and the second integer is the number of odd palindromes between 1 and n (inclusive).\n\nFirst, we initialize counters for even and odd palindromes to zero. Then, we loop through all numbers from 1 to `n` and check if each number is a palindrome. If it is, we increment the appropriate counter based on whether it's even or odd.\n\nTo determine if a number is a palindrome, we convert it to a string using `Integer.toString(num)`, reverse that string using `new StringBuilder(str).reverse().toString()`, and compare it to the original string. If they are equal, then num is a palindrome.\n\nFinally, we return a list containing the counts of even and odd palindromes as two separate elements."}
{"task_id": "java/49", "language": "java", "completion": "import java.util.*;\n\npublic class MoveOneBall {\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.isEmpty()) return true; // if the array is empty, return True\n\n        // Convert the list to an array of integers\n        int[] nums = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            nums[i] = (Integer) arr.get(i);\n        }\n\n        // Sort the original array\n        Arrays.sort(nums);\n\n        // Perform right shift operation until the sorted array is obtained\n        for (int i = 0; !Arrays.equals(nums, arr); i++) {\n            if (i == nums.length - 1) return false; // If it's not possible to get a sorted array with any number of right shift operations, return False\n\n            // Perform the right shift operation\n            int last = nums[nums.length - 1];\n            for (int j = nums.length - 1; j > 0; j--) {\n                nums[j] = nums[j - 1];\n            }\n            nums[0] = last;\n\n            // Print the array after each shift operation for debugging purposes (optional)\n            System.out.println(Arrays.toString(nums));\n        }\n\n        return true; // If the sorted array is obtained, return True\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(3, 4, 5, 1, 2);\n        System.out.println(moveOneBall(arr1)); // Expected output: True\n\n        List<Object> arr2 = Arrays.asList(3, 5, 4, 1, 2);\n        System.out.println(moveOneBall(arr2)); // Expected output: False\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCount = 0;\n        int evenCount = 0;\n\n        // Count the number of odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        // Count the number of even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        // If there are more odd numbers in lst1 than even numbers in lst2, return \"NO\"\n        if (oddCount > evenCount) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        // Delete all characters in 's' that are equal to any character in 'c'\n        String result = \"\";\n        for (int i=0; i<s.length(); i++) {\n            if (!c.contains(Character.toString(s.charAt(i)))) {\n                result += s.charAt(i);\n            }\n        }\n\n        // Check if the result string is a palindrome\n        boolean isPalindrome = true;\n        for (int i=0, j=result.length()-1; i<j; i++, j--) {\n            if (result.charAt(i) != result.charAt(j)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        // Return a tuple containing the result string and True/False for the check\n        List<Object> list = new ArrayList<>();\n        list.add(result);\n        list.add(isPalindrome);\n        return list;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(ReverseDelete.reverseDelete(\"abcde\", \"ae\"));  // Output: [bcd, false]\n        System.out.println(ReverseDelete.reverseDelete(\"abcdef\", \"b\"));  // Output: [acdef, false]\n        System.out.println(ReverseDelete.reverseDelete(\"abcdedcba\", \"ab\"));  // Output: [cdedc, true]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "This Java code defines a method `maxFill` that takes in a list of lists (grid) representing the wells and an integer (capacity) representing the bucket's capacity. The method calculates the maximum number of times the buckets need to be lowered to empty all the wells.\n\nThe method first initializes a variable `result` to 0, which will store the final result. It then iterates over each row in the grid using an outer loop, and for each row, it iterates over each element in the row using an inner loop. For every element with value 1 (indicating water), it calculates how many times the bucket needs to be lowered by dividing the number of water units in that row by the bucket's capacity. The result is then rounded up using `Math.ceil` to account for partial buckets, and added to the `result`.\n\nFinally, the method returns the calculated `result`, which represents the maximum number of times the buckets need to be lowered to empty all the wells."}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * A function that returns a list of all words from string s that contain exactly \n     * n consonants, In order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: You may assume the input string contains only letters and spaces.\n     */\n    public static List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] strArray = s.split(\" \");\n        for (String word : strArray) {\n            if (countConsonants(word) == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n\n    private static int countConsonants(String word) {\n        int consonants = 0;\n        for (char c : word.toCharArray()) {\n            if (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1) {\n                consonants++;\n            }\n        }\n        return consonants;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4));  // Output: [little]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3));  // Output: [Mary, lamb]\n        System.out.println(selectWords(\"simple white space\", 2));     // Output: []\n        System.out.println(selectWords(\"Hello world\", 4));            // Output: [world]\n        System.out.println(selectWords(\"Uncle sam\", 3));              // Output: [Uncle]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(-3, -4, 5);\n        int k = 3;\n        List<Object> result = Maximum.maximum(arr, k);\n        System.out.println(result);  // Output: [-4, -3, 5]\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i) <= 99 && arr.get(i) >= 10) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k));  // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "public class Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) {\n            return \"NO\";\n        } else if (isPrime(endMin - startMax + 1)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        for (int i = 3; i * i <= number; i += 2) {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "public static List<Number> tri(int n) {\n    List<Number> result = new ArrayList<>();  // Initialize an empty list to store the results\n    if (n >= 0) {\n        result.add((double) 3);  // Add 3 as the first element of the sequence\n    }\n    \n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.add(i / 2);  // For even numbers, add i / 2\n        } else {\n            double nextNumber = result.get(i - 1) + result.get(i - 2) + result.add(i + 1);\n            result.add(nextNumber);  // for odd numbers, calculate the sum of previous three and add to the list\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "java/58", "language": "java", "completion": "public class Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * for example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digits(1));  // Output: 1\n        System.out.println(digits(4));  // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.util.*;\n\nclass IsNested {\n    public static Boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nested = false;\n\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']' && !stack.isEmpty()) {\n                stack.pop();\n                nested = true;\n            }\n        }\n\n        return nested && stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(isNested(\"[][]\")); // false\n        System.out.println(isNested(\"[]\")); // false\n        System.out.println(isNested(\"[[][]]\")); // true\n        System.out.println(isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.util.*;\n\nclass SumSquares {\n    public static int sumSquares(List<Number> list) {\n        int sum = 0;\n        for (Number num : list) {\n            double value = Math.ceil(num.doubleValue()); // round to the upper integer\n            sum += value * value; // square and add it to the sum\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Number> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(list1)); // Output: 14\n\n        List<Number> list2 = Arrays.asList(1, 4, 9);\n        System.out.println(sumSquares(list2)); // Output: 98\n\n        List<Number> list3 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(sumSquares(list3)); // Output: 84\n\n        List<Number> list4 = Arrays.asList(1.4, 4.2, 0);\n        System.out.println(sumSquares(list4)); // Output: 29\n\n        List<Number> list5 = Arrays.asList(-2.4, 1, 1);\n        System.out.println(sumSquares(list5)); // Output: 6\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt == null || txt.isEmpty()) {\n        return false; // Return false if the string is null or empty\n    }\n\n    // Check if the last character is an alphabetical character\n    char lastChar = txt.charAt(txt.length() - 1);\n    if (Character.isLetter(lastChar)) {\n        // Check if the last character is preceded by a space or is the only character in the string\n        return txt.length() == 1 || Character.isWhitespace(txt.charAt(txt.length() - 2));\n    }\n\n    return false; // Return false if the last character is not an alphabetical letter\n}\n\n// Test cases:\npublic static void main(String[] args) {\n    System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // Output: false\n    System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // Output: true\n    System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // Output: false\n    System.out.println(checkIfLastCharIsALetter(\"\")); // Output: false\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    public static int canArrange(List<Integer> arr) {\n        int maxIndex = -1; // Initialize with -1 if no such element exists\n        for (int i = 1; i < arr.size(); i++) {\n            // If the current element is not greater than or equal to its predecessor\n            if (arr.get(i) >= arr.get(i - 1)) {\n                maxIndex = i; // Update the largest index found so far\n            }\n        }\n        return maxIndex;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(canArrange(Arrays.asList(1, 2, 3))); // Output: -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass LargestSmallestIntegers {\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        // Initialize variables for the largest negative and smallest positive integers\n        Integer maxNegative = null;\n        Integer minPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                // Check if it's a negative integer and update the largest negative if needed\n                if (num < 0 && (maxNegative == null || num > maxNegative)) {\n                    maxNegative = num;\n                }\n                // Check if it's a positive integer and update the smallest positive if needed\n                else if (num > 0 && (minPositive == null || num < minPositive)) {\n                    minPositive = num;\n                }\n            }\n        }\n\n        return Arrays.asList(maxNegative, minPositive);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // Output: [null, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // Output: [null, null]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "4! * (3!) * (2!) * (1!) = 288"}
{"task_id": "java/65", "language": "java", "completion": "This Java code defines a function `wordsInSentence` that takes in a string `sentence` as input and returns a new string containing only the words from the original sentence whose lengths are prime numbers. The function first splits the sentence into individual words, checks each word's length to see if it is prime, and then concatenates these prime-length words into a new string.\n\nHere is how the code works:\n\n1. `String[] words = sentence.split(\" \");` - This line splits the input `sentence` by spaces and stores each word in an array of strings called `words`.\n\n2. `for (int i = 0; i < words.length; i++) {` - this is a loop that iterates over each word in the `words` array.\n\n3. `if (isPrime(words[i].length())) {` - if the length of the current word (found by calling `words[i].length()`) is prime, then the function will proceed to the next step. Otherwise, it will skip this iteration and move on to the next word in the sentence.\n\n4. `result += words[i] + \" \";` - This line concatenates the current word to a new string called `result`.\n\n5. After all the words have been processed, the function returns the final result. \n\n6. `return result;` - this is the return statement that returns the final string of prime-length words from the original sentence."}
{"task_id": "java/66", "language": "java", "completion": "import java.lang.*;\nimport java.util.*;\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n        String[] xParts = x.split(\"/\");\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n\n        String[] nParts = n.split(\"/\");\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        return (resultNumerator % resultDenominator) == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(simplify(\"1/5\", \"5/1\"));  // Output: true\n        System.out.println(simplify(\"1/6\", \"2/1\"));  // Output: false\n        System.out.println(simplify(\"7/10\", \"10/2\")); // Output: false\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\n\nclass OrderByPoints {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        // Create a new list to store the result\n        List<Integer> result = new ArrayList<>();\n\n        // Convert all negative numbers to positive for sum calculation\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n                result.add(-1 * nums.get(i));\n            } else {\n                result.add(nums.get(i));\n            }\n        }\n\n        // Sort the list based on sum of digits\n        Collections.sort(result, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int sumA = getSumOfDigits(a);\n                int sumB = getSumOfDigits(b);\n\n                if (sumA == sumB) {\n                    return Integer.compare(nums.indexOf(a), nums.indexOf(b));\n                } else {\n                    return Integer.compare(sumA, sumB);\n                }\n            }\n\n            private int getSumOfDigits(int number) {\n                number = Math.abs(number); // Ensure the number is positive for digit extraction\n                int sum = 0;\n                while (number > 0) {\n                    sum += number % 10; // Add the last digit to the sum\n                    number /= 10; // Remove the last digit from the number\n                }\n                return sum;\n            }\n        });\n\n        return result;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.*;\n\nclass Specialfilter {\n    public static int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(Math.abs(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean isFirstAndLastDigitOdd(int n) {\n        String numStr = Integer.toString(n);\n        int firstdigit = Character.getNumericValue(numStr.charAt(0));\n        int Lastdigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        return Firstdigit % 2 != 0 && Lastdigit % 2 != 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "public class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        // Create an array A of size n and populate it with the formula i * i - i + 1\n        int[] A = new int[n];\n        for (int i = 0; i < n; i++) {\n            A[i] = i * i - i + 1;\n        }\n\n        // Initialize the count of valid triples to 0\n        int countTriples = 0;\n\n        // Iterate through all possible triples (a, b, c) where a < b < c\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    // Check if the sum of the triple is a multiple of 3\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                        countTriples++;\n                    }\n                }\n            }\n        }\n\n        return countTriples;\n    }\n\n    // Test the function with a sample input\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(getMaxTriples(n));  // Output: 1\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    public static List<Object> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return Collections.emptyList(); // Return an empty list if either planet is not valid\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 > index2) { // Swap indices if planet1 is farther from the sun than planet2\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        return new ArrayList<>(planets.subList(index1 + 1, index2));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // Output: [Saturn, Uranus]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // Output: [Venus]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // Output: [Venus, Earth, Mars, Jupiter, Saturn]\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "import java.util.*;\n\nclass XOrY {\n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12));  // Expected output: 34\n        System.out.println(xOrY(15, 8, 5));   // Expected output: 5\n    }\n\n    public static int xOrY(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.*;\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer && ((Integer) obj).intValue() > 0 && ((Integer) obj).intValue() % 2 != 0) {\n                sum += Math.pow(((Integer) obj).intValue(), 2);\n            }\n        }\n        return (int) sum * 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\npublic class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtName = \"\";\n        for (String ext : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtName = ext;\n            } else if (strength == maxStrength && extensions.indexOf(ext) < extensions.indexOf(strongestExtName)) {\n                // In case of a tie, choose the extension that comes first in the list\n                strongestExtName = ext;\n            }\n        }\n        return className + \".\" + strongestExtName;\n    }\n\n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions)); // should return \"Slices.SErviNGSliCes\"\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CycpatternCheck {\n\n    public static Boolean cycpatternCheck(String A, String B) {\n        if (B.length() > A.length()) {\n            return false;\n        }\n        String concatenated = A + A;\n        return concatenated.contains(B);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\",\"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\",\"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\",\"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\",\"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\",\"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\",\"simen\")); // True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "class IntToMiniRoman {\n    private static final String[] thousands = {\"\", \"m\"};\n    private static final String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n    private static final String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    private static final String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\n    public static String intToMiniRoman(int number) {\n        StringBuilder roman = new StringBuilder();\n        roman.append(thousands[number / 1000]);\n        roman.append(hundreds[(number % 1000) / 100]);\n        roman.append(tens[(number % 100) / 10]);\n        roman.append(ones[number % 10]);\n        return roman.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"intToMiniRoman(19): \" + intToMiniRoman(19)); // Expected output: 'xix'\n        System.out.println(\"intToMiniRoman(152): \" + intToMiniRoman(152)); // Expected output: 'clii'\n        System.out.println(\"intToMiniRoman(426): \" + intToMiniRoman(426)); // Expected output: 'cdxxvi'\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "import java.lang.Math;\n\nclass RightAngleTriangle {\n    public static boolean rightAngleTriangle(int A, int B, int C) {\n        // Sorting the sides of the triangle to get the longest side last\n        int[] sides = new int[]{A, B, C};\n        Arrays.sort(sides);\n\n        // Checking if the square of the longest side equals the sum of squares of other two sides\n        return Math.pow(sides[2], 2) == (Math.pow(sides[0], 2) + Math.pow(sides[1], 2));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "public class Solve {\n    public static String solve(String s) {\n        // Check if the string contains any letter using regular expression\n        boolean hasLetters = s.matches(\".*[a-zA-Z].*\");\n\n        if (hasLetters) {\n            // If there are letters, iterate through each character and modify it accordingly\n            StringBuilder sb = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    // Reverse the case of the letter\n                    sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                } else {\n                    // If it's not a letter, append it as it is\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        } else {\n            // If there are no letters, simply reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solve(\"ab\"));   // Output: \"AB\"\n        System.out.println(solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.math.*;\nimport java.security.*;\n\nclass StringToMd5 {\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n\n            // Add preceding 0's to make it 32 bit\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return hashtext;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"MD5 algorithm not found\", e);\n        }\n    }\n\n    // Test the function with provided data points\n    public static void main(String[] args) {\n        System.out.println(\"MD5 of 'Hello world': \" + stringToMd5(\"Hello world\")); // Expected: 3e25960a79dbc69b674cd4ec67a72c62\n        System.out.println(\"MD5 of '': \" + stringToMd5(\"\")); // Expected: null\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        // Ensure A is less than or equal to B\n        if (A > B) {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n\n        for (int i = A; i <= B; i++) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // []\n    }\n}"}

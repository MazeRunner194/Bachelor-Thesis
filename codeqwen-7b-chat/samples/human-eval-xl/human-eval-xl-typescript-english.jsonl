{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>) : boolean  {\n    let balance = 0; // start with a zero balance\n    for(let i = 0; i < operations.length; i++) {\n        balance += operations[i]; // add the operation to the balance\n        if(balance < 0) { // if at any point the balance falls below zero, return True\n            return true;\n        }\n    }\n    // If after checking all operations the balance never goes negative, then you can return false.\n    return false;\n};\n\nconsole.log(below_zero([1, 2, 3])); // Outputs: false\nconsole.log(below_zero([1, 2, -4, 5])); // Outputs: true"}
{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = (operations: Array<number>): boolean => {\n    let balance = 0; // Initialize balance as 0\n\n    for(let operation of operations) {\n        balance += operation; // Update balance after each operation\n\n        if(balance < 0) {\n            // If balance becomes less than zero, return true immediately\n            return true;\n        }\n    }\n\n    // If we reach here, it means the balance never falls below zero\n    return false;\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "function sum_product(numbers: Array<number>): Array<number> {\n    let sum = 0;\n    let product = 1;\n\n    if (numbers.length === 0) {\n        return [sum, product];\n    }\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = (numbers: Array<number>) : [number, number]  => {\n    let sum = 0;\n    let product = 1;\n\n    for(let num of numbers){\n        sum += num;\n        product *= num;\n    }\n\n    return [sum, product];\n};\n\nconsole.log(sum_product([])); // Output: [0, 1]\nconsole.log(sum_product([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = (A: string, B: string): string => {\n    let result = '';\n\n    // Ensure both input strings have the same length\n    while(A.length < B.length) A = '0' + A;\n    while(B.length < A.length) B = '0' + B;\n\n    for(let i = 0; i<A.length;i++) {\n        // XOR operation and convert result to string\n        if(A[i] === B[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}\n\nconsole.log(string_xor('010', '110')); // Output: \"100\""}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (A: string, B: string) : string {\n    // Check if the lengths of A and B are equal\n    if(A.length !== B.length){\n        throw new Error('Both strings must have same length');\n    }\n\n    // Perform binary XOR operation on each pair of corresponding characters\n    let result = '';\n    for (let i=0; i<A.length; i++){\n        result += A[i] === B[i] ? '0' : '1';\n    }\n\n    return result;\n};\n\nconsole.log(string_xor('010', '110'));  // Output: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = (strings: Array<string>) : string | null => {\n    if(strings.length === 0){\n        return null;\n    }\n\n    let maxLengthString: string = strings[0];\n\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > maxLengthString.length){\n            maxLengthString = strings[i];\n        }\n    }\n\n    return maxLengthString;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function(strings: string[]): string | undefined {\n    if (strings.length === 0) {\n        return undefined;\n    } else {\n        let maxLength = Math.max(...strings.map((str) => str.length));\n        return strings.find((str) => str.length === maxLength);\n    }\n};\n\nconsole.log(longest([]));  // undefined\nconsole.log(longest(['A', 'b', 'c']));  // 'A'\nconsole.log(longest(['A', 'bb', 'ccc']));  // 'ccc'"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function(a: number, b: number): number {\n    if (!b) {\n        return A;\n    }\n    return greatest_common_divisor(b, A % b);\n};\n\nconsole.log(greatest_common_divisor(3, 5)); // Outputs: 1\nconsole.log(Greatest_common_divisor(25, 15)); // Outputs: 5"}
{"task_id": "typescript/4", "language": "typescript", "completion": "function gcd(A: number, B: number): number {\n    if (!B) {\n        return A;\n    }\n    return gcd(B, A % B);\n}\n\nconsole.log(gcd(3, 5)); // Outputs: 1\nconsole.log(gcd(25, 15)); // Outputs: 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "function sortNumbers(numbers: string): string {\n    // Map of number to numeral representation\n    const numMap: { [key: string]: number } = {\n        zero: 0, one: 1, two: 2, three: 3, four: 4,\n        five: 5, six: 6, seven: 7, eight: 8, nine: 9\n    };\n\n    // Split the input string into an array of numerals\n    const numArray = numbers.split(\" \");\n\n    // Convert the numerals to their corresponding numbers and sort them\n    const sortedNumbers = numArray.map(num => numMap[num]).sort((a, B) => A - B);\n\n    // Convert the sorted numbers back to numerals and join them into a string\n    return sortedNumbers.map(num => Object.keys(numMap).find(key => numMap[key] === num)).join(\" \");\n}\n\nconsole.log(sortNumbers('three one five'));  // Output: 'one three five'"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n    // Create mapping of number strings to actual numbers\n    const numMap: {[key: string]: number} = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n\n    // Convert string to array of numbers\n    const numArray = numbers.split(\" \").map(num => numMap[num]);\n\n    // Sort the array of numbers\n    numArray.sort((a, B) => A - B);\n\n    // Join the sorted numbers back into a string and return it\n    return numArray.join(\" \");\n};\n\nconsole.log(sort_numbers('three one five'));  // Output: 'one three five'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number> {\n  // Find min and max of the list\n  let min = numbers.reduce((a, B) => Math.min(A, B));\n  let max = numbers.reduce((A, B) => Math.max(A, B));\n\n  // Return a new array with rescaled values\n  return numbers.map(num => (num - min) / (max - min));\n}\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function(numbers: Array<number>): Array<number> {\n    // Find the minimum and maximum values in the array\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    // Perform linear transformation to scale numbers between 0 and 1\n    return numbers.map(num => (num - min) / (max - min));\n}\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]));  // Output: [0, 0.25, 0.5, 0.75, 1]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = (inputString: string): string => {\n    let result = '';\n\n    for(let char of inputString) {\n        if(char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n\n    return result;\n};\n\nconsole.log(flip_case('Hello'));  // Output: 'hELLO'"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function(string0: string): string {\n    let result = '';\n    for (let char of string0) {\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n};\n\nconsole.log(flip_case('Hello'));  // Outputs: hELLO"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    // Filter out the negative numbers using the `filter()` method\n    return l.filter(num => num > 0);\n}"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function(l: Array<number>) : Array<number> {\n    return l.filter(num => num > 0);\n}\n\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // Output: [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const Is_prime = (n: number): boolean => {\n  if(n <= 1) return false; // 0 and 1 are not primes\n  for(let i = 2, sqrtN = Math.sqrt(n); i <= sqrtN; i++) {\n    if(n % i === 0) return false; // Found a divisor other than 1 and n itself\n  }\n  return true; // No divisors found, n is prime\n};\n\nconsole.log(Is_prime(6)); // Output: False\nconsole.log(Is_prime(101)); // Output: True\nconsole.log(Is_prime(11)); // Output: True\nconsole.log(Is_prime(13441)); // Output: True\nconsole.log(Is_prime(61)); // Output: True\nconsole.log(Is_prime(4)); // Output: False\nconsole.log(Is_prime(1)); // Output: False"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const Is_prime = function(n: number): boolean {\n    if (n <= 1) {\n        return false; // 0, 1 and negative numbers are not prime numbers\n    }\n    if (n === 2) {\n        return true; // 2 is the only even prime number\n    }\n    if (n % 2 === 0) {\n        return false; // all other even numbers are not prime numbers\n    }\n    for (let i = 3; i * i <= n; i += 2) { // Only check up to the square root of n for efficiency\n        if (n % i === 0) {\n            return false; // If n is divisible by any number other than 1 and itself, it's not prime\n        }\n    }\n    return true; // If no factors were found, then n must be prime\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = (l: Array<number>) : Array<number>  => {\n    return [...new Set(l)].sort((a, B) => A - B);\n}"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number>  {\n    // Use Set to remove duplicates, as Set only allows unique values.\n    let set = new Set(l);\n    \n    // Convert the Set back to an array and sort it in ascending order.\n    return Array.from(set).sort((a, B) => A - B);\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import { isPrime } from 'mathjs';\n\n/**\n * prime_fib returns n-th number that is both a Fibonacci number and prime.\n * @param n The position of the desired prime Fibonacci number.\n * @returns The n-th prime Fibonacci number.\n */\nfunction prime_fib(n: number): number {\n    let fib1 = 0, fib2 = 1;\n    let count = 0;\n\n    while (true) {\n        let fibNext = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fibNext;\n\n        if (IsPrime(fibNext)) {\n            count++;\n            if (count === n) {\n                return fibNext;\n            }\n        }\n    }\n}\n\n// Helper function to check if a number is prime\nfunction IsPrime(num: number): boolean {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// Test cases\nconsole.log(prime_fib(1)); // Output: 2\nconsole.log(prime_fib(2)); // Output: 3\nconsole.log(prime_fib(3)); // Output: 5\nconsole.log(prime_fib(4)); // Output: 13\nconsole.log(prime_fib(5)); // Output: 89"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import { isPrime } from 'mathjs';\n\nconst prime_fib = (n: number): number => {\n  let count = 0;\n  let fib1 = 0, fib2 = 1;\n\n  while(true) {\n    let fibNext = fib1 + fib2;\n    fib1 = fib2;\n    fib2 = fibNext;\n\n    if (IsPrime(fibNext)) {\n      count++;\n      if (count === n) {\n        return fibNext;\n      }\n    }\n  }\n};\n\nconsole.log(prime_fib(1)); // Output: 2\nconsole.log(prime_fib(2)); // Output: 3\nconsole.log(prime_fib(3)); // Output: 5\nconsole.log(prime_fib(4)); // Output: 13\nconsole.log(prime_fib(5)); // Output: 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = (l: Array<number>): boolean => {\n    for(let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n        while(left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if(sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    let i = 0;\n    let j = l.length - 1;\n    while (i < j) {\n        if (l[i] + l[j] === 0) {\n            return true;\n        } else if (l[i] + l[j] > 0) {\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = (l: Array<number>) : boolean  => {\n    const seenNumbers = new Set<number>();\n    for (const num of l) {\n        const complement = -num;\n        if (seenNumbers.has(complement)) {\n            return true;\n        }\n        seenNumbers.add(num);\n    }\n    return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = (l: Array<number>) : boolean => {\n  const seenNumbers = new Set<number>();\n\n  for (let i = 0; i < l.length; i++) {\n    if (seenNumbers.has(-l[i])) {\n      return true;\n    }\n    seenNumbers.add(l[i]);\n  }\n\n  return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "function fib4(n: number): number {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0;\n    for(let i = 4; i <= n; i++) {\n        let temp = A + B + C + D;\n        A = B;\n        B = C;\n        C = D;\n        D = temp;\n    }\n\n    return D;\n}"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = (n: number): number => {\n  if (n === 0 || n === 1 || n === 3) return 0;\n  if (n === 2) return 2;\n\n  let a = 0, B = 0, C = 2, D = 0;\n  for(let i = 4; i <= n; i++) {\n    const temp = A + B + C + D;\n    A = B;\n    B = C;\n    C = D;\n    D = temp;\n  }\n\n  return D;\n};\n\n// Test cases\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function(l: Array<number>): number {\n    // First, we need to sort the array\n    let sortedArray = l.sort((a, B) => A - B);\n    \n    // Then, check if the length of the array is even or odd\n    if (sortedArray.length % 2 === 0){ // If it's even\n        let mid1 = sortedArray[sortedArray.length / 2 - 1];\n        let mid2 = sortedArray[sortedArray.length / 2];\n        // The median is the average of the two middle numbers\n        return (mid1 + mid2) / 2;\n    } else { // If it's odd\n        // The median is the middle number\n        return sortedArray[(sortedArray.length - 1) / 2];\n    }\n};\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function(l: Array<number>): number {\n    // Sort the array in ascending order\n    l.sort((a, B) => A - B);\n\n    // Get the length of the array\n    let len = l.length;\n\n    // Check if the length is odd or even\n    if (len % 2 === 0) {\n        // If the length is even, return the average of the two middle numbers\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else {\n        // If the length is odd, return the middle number\n        return l[(len - 1) / 2];\n    }\n};\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const Is_palindrome = function (text: string) : boolean {\n    return text === text.split('').reverse().join('');\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const Is_palindrome = (text: string): boolean => {\n    return text === text.split('').reverse().join('');\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = (text: string): string => {\n    // Using a regular expression to match and replace all vowels in the text\n    return text.replace(/[aeiouAEIOU]/g, '');\n};\n\nconsole.log(remove_vowels('')); // Output: ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // Output: 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // Output: ''\nconsole.log(remove_vowels('aaBAA')); // Output: 'B'\nconsole.log(remove_vowels('zbcd')); // Output: 'zbcd'"}
{"task_id": "typescript/17", "language": "typescript", "completion": "/**\n * TypeScript Expert Function: remove_vowels\n * This function takes a string as input and returns the same string without vowel characters.\n * It's designed to work with both uppercase and lowercase vowels, and it handles newline characters properly.\n *\n * Examples:\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n */\n\nconst remove_vowels = (text: string): string => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n// Test the function with provided data points\nconsole.log(remove_vowels('')); // Should return ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // Should return 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // Should return 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // Should return ''\nconsole.log(remove_vowels('aaBAA')); // Should return 'B'\nconsole.log(remove_vowels('zbcd')); // Should return 'zbcd'"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = (l: Array<number>, t: number): boolean => {\n    return l.every((num) => num < t);\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = (l: Array<number>, t: number): boolean => {\n    return l.every(num => num < t);\n}"}
{"task_id": "typescript/19", "language": "typescript", "completion": "// This is a TypeScript code snippet that defines an addition function\n\n/**\n * This function takes two numbers as input and returns their sum\n * \n * @param {number} x - the first number to be added\n * @param {number} y - the second number to be added\n * \n * @returns {number} The sum of x and y\n */\n\nconst add = (x: number, y: number): number => x + y;\n\n// usage examples:\nconsole.log(add(2, 3)); // should output: 5\nconsole.log(add(5, 7)); // should output: 12"}
{"task_id": "typescript/19", "language": "typescript", "completion": "console.log(add(2, 3)); // Outputs: 5\nconsole.log(add(5, 7)); // Outputs: 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const sameChars = (s0: string, s1: string): boolean => {\n    // Convert both strings into arrays of characters, sort them alphabetically, then join back together as strings\n    const sortedS0 = s0.split('').sort().join('');\n    const sortedS1 = s1.split('').sort().join('');\n\n    // Compare the two sorted strings to check if they're equal\n    return sortedS0 === sortedS1;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string) : boolean {\n    // Initialize two empty objects to store the frequency of each character in both strings\n    const charFrequencyS0: Record<string, number> = {};\n    const charFrequencyS1: Record<string, number> = {};\n\n    // Count the frequency of each character in s0\n    for (let char of s0) {\n        charFrequencyS0[char] = (charFrequencyS0[char] || 0) + 1;\n    }\n\n    // Count the frequency of each character in s1\n    for (let char of s1) {\n        charFrequencyS1[char] = (charFrequencyS1[char] || 0) + 1;\n    }\n\n    // Compare the two frequency objects\n    for (let char in charFrequencyS0) {\n        if (!charFrequencyS1[char] || charFrequencyS0[char] !== charFrequencyS1[char]) {\n            return false; // Return false if there's a mismatch\n        }\n    }\n\n    for (let char in charFrequencyS1) {\n        if (!charFrequencyS0[char] || charFrequencyS1[char] !== charFrequencyS0[char]) {\n            return false; // Return false if there's a mismatch\n        }\n    }\n\n    // If no mismatches found, return true\n    return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(10)); // Outputs: 55\nconsole.log(fib(1));  // Outputs: 1\nconsole.log(fib(8));  // Outputs: 21"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = (function (n: number): number {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n});\n\nconsole.log(fib(10)); // Output: 55\nconsole.log(fib(1));  // Output: 1\nconsole.log(fib(8));  // Output: 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function(l1: Array<number>, l2: Array<number>): Array<number> {\n    // Get intersection of both arrays using Set and then convert back to Array\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    let commonElementsSet = new Set([...set1].filter(x => set2.has(x)));\n\n    // Convert the result back to Array and sort it\n    return [...commonElementsSet].sort((a, B) => A - B);\n}"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const setL1 = new Set(l1);  // Create a Set from l1 to remove duplicates\nconst setL2 = new Set(l2);  // Create a Set from l2 to remove duplicates\n\n// Convert one of the Sets back into an array and sort it\nconst sortedCommonElements = Array.from(setL1).sort((a, B) => A - B);\n\nreturn sortedCommonElements; // Return the sorted unique common elements"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number) : number  {\n    let maxPrime = -1;\n\n    // Handle 2 separately to make the loop only for odd numbers\n    while(n % 2 == 0){\n        maxPrime = 2;\n        n /= 2;\n    }\n\n    // Now n must be odd, so we can skip one element (Note i = i +2)\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            maxPrime = i;\n            n /= i;\n        }\n    }\n\n    // If n becomes a prime number > 2\n    if(n > 2) {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number) : number  {\n    let maxPrime = -1;\n\n    // Remove all factors of 2 before moving on to odd numbers\n    while(n % 2 == 0){\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2, but faster.\n    }\n\n    // Check for odd factors\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n\n    // If n is a prime number greater than 2, then `n` itself is the largest prime factor.\n    if(n > 2) {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = (function(n: number): number {\n    let sum = 0;\n\n    for(let i = 1; i <= n; i++) {\n        sum += i;\n    }\n\n    return sum;\n});\n\nconsole.log(sum_to_n(30)); // Outputs: 465\nconsole.log(sum_to_n(100)); // Outputs: 5050\nconsole.log(sum_to_n(5)); // Outputs: 15\nconsole.log(sum_to_n(10)); // Outputs: 55\nconsole.log(sum_to_n(1)); // Outputs: 1"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number) : number  {\n    // Base case: If n is less than or equal to 1, return n itself\n    if (n <= 1) {\n        return n;\n    } else {\n        // Recursive case: Add the current number `n` to the sum of the numbers from 1 to `n - 1`\n        return n + sum_to_n(n - 1);\n    }\n};\n\n// Test cases\nconsole.log(sum_to_n(30)); // Output: 465\nconsole.log(sum_to_n(100)); // Output: 5050\nconsole.log(sum_to_n(5));  // Output: 15\nconsole.log(sum_to_n(10)); // Output: 55\nconsole.log(sum_to_n(1));  // Output: 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    let derivativeCoefficients: number[] = []; // Initialize an empty array to store derivative coefficients\n    for (let i = 1; i < xs.length; i++) { // Start from index 1 to skip the constant term\n        derivativeCoefficients.push(xs[i] * i); // Multiply each coefficient by its power and add it to the new array\n    }\n    return derivativeCoefficients; // Return the new array of derivative coefficients\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number> {\n    let result: Array<number> = [];\n    for(let i=1; i<xs.length; i++) {\n        result.push(i * xs[i]);\n    }\n    return result;\n};\n\nconsole.log(derivative([3, 1, 2, 4, 5]));  // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));         // Output: [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = (function(): {[key: string]: number} {\n  let memo: {[key: string]: number} = {0: 0, 1: 0, 2: 1};\n\n  return function(n: number): number {\n    if (!memo.hasOwnProperty(n)) {\n      memo[n] = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    return memo[n];\n  };\n})();\n\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib: (n: number) => number = (function(memo: {[key: number]: number} = {}) { \n  return function(n: number): number {\n    if (n in memo) return memo[n];\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n    memo[n] = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return memo[n];\n  }\n})();\n\nconsole.log(fibfib(1)); // Outputs: 0\nconsole.log(fibfib(5)); // Outputs: 4\nconsole.log(fibfib(8)); // Outputs: 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string) : number  {\n    let count = 0;\n    let lowerCaseStr = s.toLowerCase();\n    for(let i=0; i<lowerCaseStr.length; i++){\n        if('aeiou'.indexOf(lowerCaseStr[i]) !== -1 || \n           (lowerCaseStr[i] === 'y' && lowerCaseStr.length-1 === i)){\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(vowels_count(\"abcde\")); // Output: 2\nconsole.log(vowels_count(\"ACEDY\")); // Output: 3"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function(s: string): number {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if ('aeiouAEIOU'.includes(s[i])) {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end and is a vowel\n    if (s.endsWith('y') || s.endsWith('Y')) {\n        count++;\n    }\n\n    return count;\n};\n\nconsole.log(vowels_count(\"abcde\")); // Output: 2\nconsole.log(vowels_count(\"ACEDY\")); // Output: 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const countMap = new Map<number, number>();\n\nfor (const num of lst) {\n    if (countMap.has(num)) {\n        countMap.set(num, countMap.get(num)! + 1);\n    } else {\n        countMap.set(num, 1);\n    }\n}\n\nlet result = -1;\nfor (const [num, freq] of countMap) {\n    if (num <= freq && num > result) {\n        result = num;\n    }\n}\n\nreturn result;"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = (lst: Array<number>): number => {\n    // create an object to hold counts of each number\n    let countMap = {};\n    lst.forEach(num => countMap[num] ? countMap[num]++ : countMap[num] = 1);\n\n    // sort the keys in descending order and search for the first integer which meets the criteria\n    for (let num of Object.keys(countMap).sort((a, B) => parseInt(B) - parseInt(A))) {\n        if (parseInt(num) <= countMap[num]) return parseInt(num);\n    }\n\n    // if no such integer exists, return -1\n    return -1;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = (A: number, B: number, C: number) : number  => {\n    if(A + B <= C || A + C <= B || B + C <= A){\n        return -1; // Not a valid triangle\n    } else {\n        let s = (A + B + C) / 2;\n        let area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n        return parseFloat(area.toFixed(2)); // Return area rounded to 2 decimal points\n    }\n};\n\nconsole.log(triangle_area(3, 4, 5)); // Output: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Output: -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (A: number, B: number, C: number) : number  {\n    // Check if the sides form a valid triangle\n    if( A + B <= C || A + C <= B || B + C <= A){\n        return -1; // Return -1 for invalid triangles\n    }\n\n    // Calculate semi-perimeter\n    const s = (A + B + C) / 2;\n\n    // Calculate area using Heron's formula\n    const area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n    return parseFloat(area.toFixed(2)); // Round the result to 2 decimal points and return it\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = (q: Array<number>, w: number): boolean => {\n    // Check if the list is balanced\n    for(let i=0; i < q.length/2; i++) {\n        if(q[i] !== q[q.length - 1 - i]) {\n            return false; // The list is not balanced, return False\n        }\n    }\n\n    // Check if the sum of elements is less than or equal to the maximum possible weight\n    const sum = q.reduce((a, B) => A + B, 0);\n    if(sum > w) {\n        return false; // The sum exceeds the maximum possible weight, return False\n    }\n\n    // If both conditions are met, the object will fly\n    return true;\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function(q: Array<number>, w: number): boolean {\n    // Check if the array is a palindrome\n    let reversedQ = [...q].reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reversedQ[i]) {\n            return false; // If any element at index 'i' in the array does not match with its corresponding reverse element, then it is not a palindrome.\n        }\n    }\n\n    // Check if the sum of elements is less than or equal to the maximum possible weight\n    let totalWeight = q.reduce((a, B) => A + B, 0);\n    return totalWeight <= w; // If the total weight is less than or equal to 'w', return true else false.\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const Is_multiply_prime = (A: number): boolean => {\n    function isPrime(num) {\n        for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let count = 0;\n    for(let i=2;i<A;i++){\n        if(A%i==0 && isPrime(i)){\n            count++;\n        }\n    }\n    return count == 3;\n};\n\nconsole.log(Is_multiply_prime(30)); // returns true"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const Is_multiply_prime = (A: number): boolean => {\n  if (A < 2) return false; // Numbers less than 2 cannot be prime\n\n  let count = 0; // Count of prime factors\n\n  for(let i = 2; i <= Math.sqrt(A); i++) {\n    // If A is divisible by i, then it is also divisible by i^2.\n    // Hence, reduce B to its factorized form and exit early\n    if (A % i === 0) {\n      count++;\n      while (A % i === 0) {\n        A /= i;\n      }\n    }\n\n    // If prime factors are more than 3, then return false.\n    if (count > 3) return false;\n  }\n\n  // If A is a prime number greater than 2 or less than 3\n  if (A >= 2 && count === 1) {\n    count++;\n  }\n\n  return count === 3;\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    let binary = \"\";\n    while(decimal > 0) {\n        binary = (decimal % 2) + binary; // Adds the remainder of decimal divided by 2 to the beginning of the binary string.\n        decimal = Math.floor(decimal / 2); // Divides decimal by 2 and rounds down to the nearest integer.\n    }\n    return \"db\" + binary + \"db\"; // Adds 'db' at the beginning and end of the binary string.\n};\n\nconsole.log(decimal_to_binary(15)); // Output: db1111db\nconsole.log(decimal_to_binary(32)); // Output: db100000db"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = (decimal: number) : string => {\n  // Convert the decimal to binary\n  const binary = decimal.toString(2);\n  \n  // Add 'db' at the beginning and end of the binary string\n  return `db${binary}db`;\n};\n\nconsole.log(decimal_to_binary(15)); // Output: db1111db\nconsole.log(decimal_to_binary(32)); // Output: db100000db"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const Is_happy = function (s: string): boolean {\n    return s.length >= 3 && /^(?!.*([a-zA-Z])\\1)([a-zA-Z]).*\\2.$/gm.test(s);\n}\n\nconsole.log(Is_happy(\"a\")); // Output: false\nconsole.log(Is_happy(\"aa\")); // Output: false\nconsole.log(Is_happy(\"abcd\")); // Output: true\nconsole.log(Is_happy(\"Aabb\")); // Output: false\nconsole.log(Is_happy(\"adb\")); // Output: true\nconsole.log(Is_happy(\"xyy\")); // Output: false"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const Is_happy = function(s: string): boolean {\n    // Check if length is less than 3, return false immediately.\n    if (s.length < 3) {\n        return false;\n    }\n    // Loop through the string starting from the third character.\n    for (let i = 2; i < s.length; i++) {\n        // Check if any of the three consecutive letters are the same, return false if so.\n        if (s[i] === s[i - 1] || s[i] === s[i - 2]) {\n            return false;\n        }\n    }\n    // If none of the conditions above were met, the string is happy.\n    return true;\n};\n\n// Test cases to verify correctness:\nconsole.log(Is_happy(\"a\")); // Expected output: false\nconsole.log(Is_happy(\"aa\")); // Expected output: false\nconsole.log(Is_happy(\"abcd\")); // Expected output: true\nconsole.log(Is_happy(\"Aabb\")); // Expected output: false\nconsole.log(Is_happy(\"adb\")); // Expected output: true\nconsole.log(Is_happy(\"xyy\")); // Expected output: false"}
{"task_id": "typescript/34", "language": "typescript", "completion": "function numericalLetterGrade(grades: Array<number>): Array<string> {\n    const letter_grades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4) {\n            letter_grades.push('A+');\n        } else if (grades[i] > 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] > 3.3) {\n            letter_grades.push('A-');\n        } else If (grades[i] > 3) {\n            letter_grades.push('B+');\n        } else If (grades[i] > 2.7) {\n            letter_grades.push('B');\n        } else If (grades[i] > 2.3) {\n            letter_grades.push('B-');\n        } else If (grades[i] > 2) {\n            letter_grades.push('C+');\n        } else If (grades[i] > 1.7) {\n            letter_grades.push('C');\n        } else If (grades[i] > 1.3) {\n            letter_grades.push('C-');\n        } else If (grades[i] > 1) {\n            letter_grades.push('D+');\n        } else If (grades[i] > 0.7) {\n            letter_grades.push('D');\n        } else If (grades[i] > 0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\nconsole.log(numericalLetterGrade([4, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/34", "language": "typescript", "completion": "function numericalLetterGrade(grades: Array<number>): Array<string> {\n    let letterGrades = [];\n\n    for (let gpa of grades) {\n        if (gpa === 4.0) {\n            letterGrades.push('A+');\n        } else if (gpa > 3.7) {\n            letterGrades.push('A');\n        } else If (gpa > 3.3) {\n            letterGrades.push('A-');\n        } else If (gpa > 3.0) {\n            letterGrades.push('B+');\n        } else If (gpa > 2.7) {\n            letterGrades.push('B');\n        } else If (gpa > 2.3) {\n            letterGrades.push('B-');\n        } else If (gpa > 2.0) {\n            letterGrades.push('C+');\n        } else If (gpa > 1.7) {\n            letterGrades.push('C');\n        } else If (gpa > 1.3) {\n            letterGrades.push('C-');\n        } else If (gpa > 1.0) {\n            letterGrades.push('D+');\n        } else If (gpa > 0.7) {\n            letterGrades.push('D');\n        } else If (gpa > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n\n    return letterGrades;\n}\n\n// Testing the function\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nconst prime_length = function(string: string): boolean {\n    return isPrime(string.length);\n};\n\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "typescript/35", "language": "typescript", "completion": "/**\n * Checks if a number is prime.\n * @param num The number to check.\n * @returns True if the number is prime, false otherwise.\n */\nfunction isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Checks if the length of a string is prime.\n * @param str The string to check.\n * @returns True if the string's length is prime, false otherwise.\n */\nconst prime_length = (str: string): boolean => {\n    return isPrime(str.length);\n};\n\n// Test cases\nconsole.log(prime_length('Hello')); // Should return true\nconsole.log(prime_length('abcdcba')); // Should return true\nconsole.log(prime_length('kittens')); // Should return true\nconsole.log(prime_length('orange')); // Should return false"}
{"task_id": "typescript/36", "language": "typescript", "completion": "function solve(N: number): string {\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\n\nconsole.log(solve(1000));  // Output: \"1\"\nconsole.log(solve(150));   // Output: \"110\"\nconsole.log(solve(147));   // Output: \"1100\""}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function(N: number): string {\n    let sumOfDigits: number = 0;\n    while(N > 0) {\n        sumOfDigits += N % 10; // Find the remainder when dividing N by 10, which is the last digit of N. Add it to the total sum.\n        N = Math.floor(N / 10); // Remove the last digit from N by dividing it by 10 and discarding the remainder.\n    }\n\n    return sumOfDigits.toString(2); // Convert the total sum of digits into binary and return as a string.\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function(lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    let coordinates: Array<[number, number]> = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coordinates.push([i, j]);\n            }\n        }\n    }\n\n    // Sort by row in ascending order and column in descending order.\n    return coordinates.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n};\n\nconsole.log(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));\n\nconsole.log(get_row([], 1));\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<[number, number]>  {\n    let results: Array<[number, number]> = []; // list to store the coordinates where x is found \n\n    // iterate through each row and column in the list\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) { // if the element equals to x\n                results.push([i, j]); // Add its index to our result array\n            }\n        }\n    }\n\n    // sort by rows in ascending order and by columns in descending order\n    results.sort((a, B) => A[0] - B[0] || B[1] - A[1]); \n\n    return results; // return the result array\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "function next_smallest(lst: number[]): number | null {\n    // Remove duplicate elements from the array\n    const uniqueLst = Array.from(new Set(lst));\n\n    // If there are less than 2 unique elements, return null\n    if (uniqueLst.length < 2) {\n        return null;\n    }\n\n    // Sort the array in ascending order\n    uniqueLst.sort((a, B) => A - B);\n\n    // Return the second element of the sorted array\n    return uniqueLst[1];\n}"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function(lst: Array<number>): number | null {\n    // Sort the list in ascending order\n    lst.sort((a, B) => A - B);\n\n    // Check if there is a second smallest element\n    if (lst.length < 2) {\n        return null;\n    } else {\n        return lst[1];  // Return the second element in sorted list\n    }\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "/**\n * Counts the number of boredoms in a given string. A boredom is defined as a sentence that starts with \"I\".\n * Sentences are separated by '.', '?' or '!'.\n * \n * @param {string} S - The input string containing sentences.\n * @returns {number} - The number of boredoms in the input string.\n */\nconst Is_bored = (S: string): number => {\n    // Split the string into sentences based on '.', '?' or '!' delimiters\n    const sentences = S.match(/[^.?!]+[.?!]/g) || [];\n\n    // Count the sentences that start with \"I\"\n    let boredomCount = 0;\n    for (const sentence of sentences) {\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n\n    return boredomCount;\n};\n\n// Example usage:\nconsole.log(Is_bored(\"Hello world\")); // Output: 0\nconsole.log(Is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const Is_bored = function(S: string): number {\n    // Split the string into sentences based on '.', '?' or '!' delimiters\n    let sentences = S.split(/[.?!]/);\n\n    // Initialize a counter for boredoms\n    let boredomCount = 0;\n\n    // Iterate over each sentence and check if it starts with \"I\"\n    for(let sentence of sentences) {\n        if(sentence.trim().startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n\n    return boredomCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function largestPrime(n) {\n    for (let i = n; i >= 2; --i) {\n        if (isPrime(i)) return i;\n    }\n    return -1;\n}\n\nfunction isPrime(num) {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false; \n    return num > 1;\n}\n\nfunction sumOfDigits(n) {\n    let sum = 0;\n    while (n !== 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum;\n}\n\nexport function skjkasdkd(lst: Array<number>): number {\n    let prime = -1;\n    for (let num of lst) {\n        if (num > prime && isPrime(num)) prime = num;\n    }\n    return sumOfDigits(prime);\n}"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function isPrime(num) {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconst skjkasdkd = function (lst: Array<number>) : number {\n   let maxPrime = -Infinity;\n   for(let n of lst){\n       if(isPrime(n) && n > maxPrime) maxPrime = n;\n   }\n\n   return maxPrime.toString().split('').reduce((a,B)=>+A + +B);\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, any>) : boolean  {\n    if (dict.size === 0) return false;\n\n    let allLowerCase = true;\n    let AllUpperCase = true;\n\n    for (const key of dict.keys()) {\n        if (typeof key !== 'string') return false; // skip non-string keys\n        if (key !== key.toLowerCase()) AllLowerCase = false;\n        if (key !== key.toUpperCase()) AllUpperCase = false;\n    }\n\n    return AllLowerCase || AllUpperCase;\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function(dict: {[key: string]: string}) : boolean  {\n    // Check if dictionary is empty\n    if (Object.keys(dict).length === 0) return false;\n\n    let lowerCaseCount = 0;\n    let upperCaseCount = 0;\n\n    for(const key in dict){\n        // Check if the key is a string and convert it to lower case for comparison\n        if (typeof key === 'string') {\n            const lowerKey = key.toLowerCase();\n\n            // If all keys are already in lower case, increment lowerCaseCount\n            if(lowerCaseCount > 0 && lowerKey !== key) return false;\n            else if (lowerKey === key) lowerCaseCount++;\n\n            // If all keys are already in upper case, increment upperCaseCount\n            const upperKey = key.toUpperCase();\n            if(upperCaseCount > 0 && upperKey !== key) return false;\n            else if (upperKey === key) upperCaseCount++;\n        } else { // If the key is not a string, return False\n            return false;\n        }\n    }\n\n    // If all keys are in lower or upper case, return True\n    return true;\n}\n\nconsole.log(check_dict_case({\"A\":\"apple\", \"b\":\"banana\"})); // returns True\nconsole.log(check_dict_case({\"A\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // returns False\nconsole.log(check_dict_case({\"A\":\"apple\", 8:\"banana\", \"A\":\"apple\"})); // returns False\nconsole.log(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // returns False\nconsole.log(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); // returns True"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function(value: string): number {\n    let num = parseFloat(value);\n    let floorValue = Math.floor(num);\n    let ceilValue = Math.ceil(num);\n\n    // If the number is equidistant from two integers, round away from zero\n    if (num - floorValue === ceilValue - num) {\n        return num > 0 ? ceilValue : floorValue;\n    } else {\n        // Otherwise, use regular rounding\n        return Math.round(num);\n    }\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = (value: string): number => {\n  const num = parseFloat(value);\n  return Math.sign(num) * Math.round(Math.abs(num));\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    let stones: Array<number> = [];\n    for(let i=0; i<n; i++) {\n        stones[i] = n + 2*i;\n    }\n    return stones;\n};\n\nconsole.log(make_a_pile(3)); // [3, 5, 7]"}
{"task_id": "typescript/43", "language": "typescript", "completion": "function makeAPile(n: number): number[] {\n    let stones: number[] = [];\n    let currentStones: number = n;\n    for (let i = 0; i < n; i++) {\n        stones.push(currentStones);\n        // Determine the next number of stones based on whether n is odd or even\n        if (n % 2 === 0) {\n            currentStones += 2; // Next even number if n is even\n        } else {\n            currentStones += 2; // Next odd number if n is odd, but we're adding 2 to make it even\n        }\n    }\n    return stones;\n}\n\n// Test the function with an example\nconsole.log(makeAPile(3)); // Output: [3, 5, 7]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "/**\n * Splits a string into an array of words, accounting for multiple delimiters like commas and spaces.\n * \n * @param s - The input string containing words separated by commas or spaces.\n * @returns An array of words from the input string.\n */\nconst words_string = (s: string): Array<string> => {\n    // Use a regular expression to split the string by either a comma followed by optional whitespace,\n    // or just any amount of whitespace. This will handle both \"word1, word2\" and \"word1  word2\".\n    return s.split(/, |\\s+/);\n};\n\n// Test cases to verify the correctness of the solution:\nconsole.log(words_string(\"Hi, My name is John\")); // Output: [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function(s: string): Array<string> {\n    return s.replace(/,/g, '').split(/\\s+/);\n}\n\nconsole.log(words_string(\"Hi, My name is John\")); // [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number) : number  {\n    // Check if both numbers are even\n    if(x % 2 !== 0 && y % 2 !== 0){\n        return -1; // Return -1 if one or both numbers are odd\n    }\n\n    let maxEven = -1; // Initialize maximum even number as -1\n\n    // Iterate from y to x (inclusive) in reverse order\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){ // Check if the number is even\n            maxEven = i; // Update maximum even number\n            break; // Break out of the loop as we've found the largest even number\n        }\n    }\n\n    return maxEven; // Return the largest even number or -1 if it doesn't exist\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number) : number  {\n    // Ensure x is less than or equal to y\n    if(x > y){\n        return -1;\n    }\n    // Start from the end of the range and work backwards to find the biggest even number.\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){ // Check if the number is even\n            return i;\n        }\n    }\n    // If no even numbers are found, return -1.\n    return -1;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): string | number {\n    if(n > m){\n        return -1;\n    } else {\n        let sum = 0;\n        for(let i=n; i<=m; i++){\n            sum += i;\n        }\n        let average = Math.round(sum/(m-n+1));\n        return '0b' + (average >>> 0).toString(2);\n    }\n};\n\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function(n: number, m: number): string | number {\n    if (n > m) {\n        return -1;\n    } else {\n        let sum = 0;\n        for (let i = n; i <= m; i++) {\n            sum += i;\n        }\n        const average = Math.round(sum / (m - n + 1));\n        return \"0b\" + average.toString(2);\n    }\n};\n\nconsole.log(rounded_avg(1, 5));  // Output: \"0b11\"\nconsole.log(rounded_avg(7, 5));  // Output: -1\nconsole.log(rounded_avg(10, 20)); // Output: \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // Output: \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    let result: Array<number> = [];\n\n    for(let i = 1; i <= n; i++) {\n        if(i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumOfNumbers(i));\n        }\n    }\n\n    return result;\n};\n\nconst factorial = (num: number): number => {\n    let product = 1;\n\n    for(let i = 1; i <= num; i++) {\n        product *= i;\n    }\n\n    return product;\n};\n\nconst sumOfNumbers = (num: number): number => {\n    let sum = 0;\n\n    for(let i = 1; i <= num; i++) {\n        sum += i;\n    }\n\n    return sum;\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function(n: number): Array<number> {\n    let result: Array<number> = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0) { // If i is even, calculate factorial.\n            result.push(factorial(i));\n        } else { // If i is odd, calculate sum of numbers from 1 to i.\n            result.push(sumToI(i));\n        }\n    }\n    return result;\n\n    function factorial(n: number): number {\n        let product = 1;\n        for(let i = 2; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    function sumToI(n: number): number {\n        let sum = 0;\n        for(let i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n};\n\nconsole.log(f(5)); // Outputs: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = (n: number) : Array<number>  => {\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){ // checks if the number is a palindrome\n            if(i % 2 === 0){\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "function even_odd_palindrome(n: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    if (str === str.split('').reverse().join('')) { // check if the number is a palindrome\n      if (i % 2 === 0) { // check if the number is even\n        evenCount++;\n      } else { // the number is odd\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = (arr: Array<number>): boolean => {\n    if(arr.length <= 1) return true; // If the array is empty or has one element, it's already sorted\n\n    let shiftsRequired = 0;\n    let sortedArr = [...arr];\n    sortedArr.sort((a, B) => A - B); // Sort the array in non-decreasing order\n\n    for(let i=0; i<arr.length; i++) {\n        if(arr[i] !== sortedArr[(i+shiftsRequired) % arr.length]) {\n            // If the current element doesn't match with the sorted element, increment the number of shifts required\n            shiftsRequired++;\n\n            if(shiftsRequired > 1) return false; // If more than one shift is needed to get a non-decreasing order, return false\n        }\n    }\n\n    return true;\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function(arr: Array<number>): boolean {\n    if (arr.length <= 1) return true; // If array is empty or has only one element, it's already sorted.\n\n    // Find the point from where we can start shifting to get a sorted array.\n    let shiftPoint = -1;\n    for(let i=0; i<arr.length-1; i++) {\n        if (arr[i] > arr[i+1]) { // If current element is greater than next, this point is good for shifting.\n            shiftPoint = i+1;\n            break;\n        }\n    }\n\n    // If we didn't find any point for shifting, return false as it can't be achieved.\n    if (shiftPoint === -1) return false;\n\n    // Perform the shifting.\n    for(let i=shiftPoint; i<arr.length-1; i++) {\n        [arr[i], arr[i+1]] = [arr[i+1], arr[i]]; // Swap adjacent elements.\n    }\n\n    // Check if array is sorted now.\n    for(let i=0; i<arr.length-1; i++) {\n        if (arr[i] > arr[i+1]) return false;\n    }\n\n    return true; // If we're here, it means shifting was successful and we got a sorted array.\n}"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function(lst1: number[], lst2: number[]): string {\n    // Filter out all the even numbers from both lists.\n    let onlyEvensLst1 = lst1.filter(num => num % 2 === 0);\n    let onlyEvensLst2 = lst2.filter(num => num % 2 === 0);\n\n    // If there are enough even numbers in both lists to make lst1 all even, return \"YES\".\n    if (onlyEvensLst1.length + onlyEvensLst2.length >= lst1.length) {\n        return \"YES\";\n    } else {\n        // If not enough even numbers in both lists to make lst1 All even, return \"NO\".\n        return \"NO\";\n    }\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // Output: \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // Output: \"NO\""}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    // Count the number of odd numbers in lst1\n    let numOddNumbersInLst1 = lst1.filter(num => num % 2 !== 0).length;\n\n    // Count the number of even numbers in lst2\n    let numEvenNumbersInLst2 = lst2.filter(num => num % 2 === 0).length;\n\n    // If there are more or equal even numbers in lst2 than odd numbers in lst1,\n    // it is possible to exchange elements between the lists to make all the numbers in lst1 even.\n    return numEvenNumbersInLst2 >= numOddNumbersInLst1 ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverseDelete = (s: string, c: string): [string, boolean] => {\n    let result = '';\n\n    for(let char of s){\n        if(!c.includes(char)){\n            result += char;\n        }\n    }\n\n    // Check if the result is palindrome\n    const isPalindrome = result === result.split('').reverse().join('');\n\n    return [result, IsPalindrome];\n};\n\nconsole.log(reverseDelete(\"abcde\", \"ae\"));  // Output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\"));  // Output: ['cdedc', true]"}
{"task_id": "typescript/51", "language": "typescript", "completion": "function reverseDelete(s: string, c: string): Array<any> {\n    // Remove all characters in s that are equal to any character in c\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n\n    // Check if the result string is palindrome\n    const reversed = result.split('').reverse().join('');\n    const isPalindrome = result === reversed;\n\n    return [result, IsPalindrome];\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number) : number {\n  // Calculate the number of buckets needed for each well in the grid\n  let bucketNeeds: number[] = [];\n  for(let i = 0; i < grid.length; i++) {\n    bucketNeeds.push(math.sum(grid[i]));\n  }\n\n  // Find the maximum number of buckets required across all wells\n  let maxBuckets: number = Math.max(...bucketNeeds);\n\n  // Calculate and return the total times the buckets need to be lowered\n  return Math.ceil(maxBuckets / capacity);\n}"}
{"task_id": "typescript/52", "language": "typescript", "completion": "import {max} from 'mathjs';\n\n/**\n * Calculates the maximum fill of wells using buckets.\n * @param grid - A rectangular grid representing the wells.\n * @param bucketCapacity - The capacity of each bucket used to empty wells.\n * @returns The number of times buckets need to be lowered to empty all wells.\n */\nconst maxFill = (grid: Array<Array<number>>, bucketCapacity: number): number => {\n  let totalDrops = 0;\n\n  // Calculate the maximum water level in any column\n  const maxWaterLevels = grid[0].map((_, colIndex) => max(...grid.map(row => row[colIndex])));\n\n  for (const waterLevel of maxWaterLevels) {\n    totalDrops += Math.ceil(waterLevel / bucketCapacity);\n  }\n\n  return totalDrops;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function (s: string, n: number): Array<string> {\n  // Split the input string into an array of words\n  const words = s.split(' ');\n\n  // Filter out words with exactly `n` consonants\n  const filteredWords = words.filter((word) => {\n    // Use a regular expression to count consonants in the word\n    const consonantCount = (word.match(/[bcdfghjklmnpqrstvwxyz]/gi) || []).length;\n\n    // Return true if the word has exactly `n` consonants, false otherwise\n    return consonantCount === n;\n  });\n\n  // Return the filtered words array\n  return filteredWords;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "function isConsonant(char: string): boolean {\n    return 'bcdfghjklmnpqrstvwxyz'.includes(char.toLowerCase());\n}\n\nconst select_words = function (s: string, n: number): Array<string>  {\n    let consonantsCount: number;\n    let wordsWithNConsonants: Array<string> = [];\n\n    for (let word of s.split(' ')) {\n        consonantsCount = 0;\n        for (let char of word) {\n            if (isConsonant(char)) {\n                consonantsCount++;\n            }\n        }\n        if (consonantsCount === n) {\n            wordsWithNConsonants.push(word);\n        }\n    }\n\n    return wordsWithNConsonants;\n};\n\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = (arr: Array<number>, k: number) : Array<number>  => {\n    // sort arr in descending order\n    arr.sort((a, B) => B - A);\n\n    let result = [];\n    for(let i=0; i < k; i++){\n        result.push(arr[i]);\n    }\n\n    return result.sort((A, B) => A - B); // sort the result array in ascending order\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = (arr: Array<number>, k: number): Array<number> => {\n    // Sort the array in descending order\n    arr.sort((a, B) => B - A);\n\n    // Slice the first k elements of the sorted array and return them\n    return arr.slice(0, k);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number) : number  {\n    let sum = 0;\n    for(let i=0; i < k; i++) {\n        if(arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "/**\n * This function takes an array of numbers and a number 'k'. It returns the sum\n * of the elements with at most two digits from the first 'k' elements of the array.\n */\nconst add_elements = (arr: Array<number>, k: number) : number  => {\n    if(arr.length === 0 || k === 0){\n        return 0;\n    }\n\n    let sum = 0;\n    for(let i=0; i < Math.min(k, arr.length); i++){\n        if(arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n\n    return sum;\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    for (let i = 2; i <= Math.sqrt(n); i++)\n        if (n % i === 0) return false; \n    return n > 1;\n}"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const isPrime = (num) => {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n};\n\nconst intersection = function (interval1: Array<number>, interval2: Array<number>) : string {\n    let startMax = Math.max(interval1[0], interval2[0]);\n    let endMin = Math.min(interval1[1], interval2[1]);\n   \n    if (startMax > endMin) { // intervals don't intersect\n        return \"NO\";\n    } else { // find intersection\n        const intersectionLength = endMin - startMax + 1;\n        return IsPrime(intersectionLength) ? \"YES\" : \"NO\";\n    }\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n  if(n === 0) return [3]; // base case, first element is always 3\n\n  let result: Array<number> = [...tri(n - 1)]; // copy previous sequence\n  \n  const lastElement = result[result.length - 1];\n  const secondLastElement = result[result.length - 2];\n  \n  if (n % 2 === 0) {\n    result.push(lastElement + Math.floor(n / 2)); // n is even, add (n/2)\n  } else {\n    const nextTerm = lastElement + secondLastElement + result[result.length]; // n is odd, calculate the next term using previous terms\n    result.push(nextTerm);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n    // Initialize an array to hold the Tribonacci sequence\n    let tribonacci: Array<number> = [1, 3, 2];\n  \n    // If n is less than 0, return an empty array\n    if(n < 0) return [];\n  \n    // Start from index 3 because we already have the first three numbers of the sequence\n    for (let i = 3; i <= n; i++) {\n        // For even number\n        if(i % 2 === 0){\n            tribonacci.push(1 + i / 2);\n        }\n        else{ // for odd numbers\n            let nextValue = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n            tribonacci.push(nextValue);\n        }\n    }\n\n    return tribonacci;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = (n: number): number => {\n    let product = 1;\n    let hasOdd = false;\n\n    while(n > 0) {\n        let digit = n % 10;\n\n        if(digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n\n        n = Math.floor(n / 10);\n    }\n\n    return hasOdd ? product : 0;\n}\n\nconsole.log(digits(1));  // Outputs: 1\nconsole.log(digits(4));  // Outputs: 0\nconsole.log(digits(235)); // Outputs: 15"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = (n: number): number => {\n    let product = 1;\n    let hasOddDigit = false;\n\n    while (n > 0) {\n        const digit = n % 10;\n\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n\n        n = Math.floor(n / 10);\n    }\n\n    return hasOddDigit ? product : 0;\n};\n\nconsole.log(digits(1));  // Outputs: 1\nconsole.log(digits(4));  // Outputs: 0\nconsole.log(digits(235)); // Outputs: 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const Is_nested = function (string0: string) : boolean  {\n    let stack: string[] = []; // Initialize a stack to store opening brackets\n    let nested: boolean = false; // Flag to check if there's at least one nested bracket\n\n    for(let i=0; i<string0.length; i++) {\n        if (string0[i] == '[') { \n            stack.push('['); // Push opening bracket to stack\n        } else if (string0[i] == ']' && stack.length > 0) { \n            stack.pop(); // Pop from the stack if it's a closing bracket and there are still opening brackets in the stack\n            // If there was an opening bracket before, then we found a nested pair of brackets\n            if (stack.length > 0 && string0[i-1] == '[') {\n                nested = true; \n            }\n        }\n    }\n\n    return nested; // Return true if there was at least one nested bracket, otherwise false\n};\n\nconsole.log(Is_nested('[[]]')); // Output: true\nconsole.log(Is_nested('[]]]]]]][[[[[]')); // Output: false\nconsole.log(Is_nested('[][]')); // Output: false\nconsole.log(Is_nested('[]')); // Output: false\nconsole.log(Is_nested('[[][]]')); // Output: true\nconsole.log(Is_nested('[[]][[')); // Output: true"}
{"task_id": "typescript/59", "language": "typescript", "completion": "function is_nested(string0: string): boolean {\n    let stack = [];\n    let result = false;\n  \n    for (let i = 0; i < string0.length; i++) {\n        if (string0[i] === '[') {\n            stack.push('[');\n        } else if (string0[i] === ']') {\n            if (stack.length > 1) {\n                result = true;\n            }\n            stack.pop();\n        }\n    }\n\n    return result;\n}\n\n// Test cases:\nconsole.log(is_nested('[[]]')); // Expected output: True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // Expected output: False\nconsole.log(is_nested('[][]')); // Expected output: False\nconsole.log(is_nested('[]')); // Expected output: False\nconsole.log(is_nested('[[][]]')); // Expected output: True\nconsole.log(is_nested('[[]][[')); // Expected output: True"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = (lst: Array<number>): number => {\n    return lst.reduce((sum, num) => sum + Math.pow(Math.ceil(num), 2), 0);\n};\n\nconsole.log(sum_squares([1,2,3])); // Output: 14\nconsole.log(sum_squares([1,4,9])); // Output: 98\nconsole.log(sum_squares([1,3,5,7])); // Output: 84\nconsole.log(sum_squares([1.4,4.2,0])); // Output: 29\nconsole.log(sum_squares([-2.4,1,1])); // Output: 6"}
{"task_id": "typescript/60", "language": "typescript", "completion": "import { ceil } from 'mathjs';\n\nfunction sumSquares(lst: Array<number>): number {\n    return lst.reduce((sum, num) => sum + Math.pow(ceil(num), 2), 0);\n}"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = (txt: string): boolean  => {\n    // Get the last character of the input string\n    let lastChar = txt[txt.length - 1];\n\n    // Check if the last character is an alphabetical character and not part of a word\n    if (/^[a-zA-Z]$/.test(lastChar) && txt[txt.length - 2] === ' ') {\n        return true;\n    } else {\n        return false;\n    }\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n    // Check if the input is not empty and the last character is a letter\n    if (txt.length > 0 && /[A-Za-a-z]$/.test(txt)) {\n        // Find the index of the last non-space character\n        const lastCharIndex = txt.trimEnd().lastIndexOf(' ');\n\n        // Check if there is a space before the last character and it's not the first character\n        if (lastCharIndex !== -1 && txt[lastCharIndex] === ' ') {\n            return false; // The last character is part of a word\n        } else {\n            return true; // The last character is not part of a word and is a letter\n        }\n    }\n\n    // If the input is empty or the last character is not a letter\n    return false;\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for(let i=arr.length-1;i>0;i--){\n        if(arr[i] < arr[i-1]) return i;\n    }\n    return -1;\n}"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n    for(let i=arr.length-1; i > 0; i--){\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largestSmallestIntegers = (lst: number[]): [number | null, number | null] => {\n    // Initialize maximum negative and minimum positive integers to null.\n    let maxNegative: number | null = null;\n    let minPositive: number | null = null;\n\n    for(const num of lst) {\n        if(num < 0 && (maxNegative === null || num > maxNegative)) {\n            maxNegative = num;\n        } else if(num > 0 && (minPositive === null || num < minPositive)) {\n            minPositive = num;\n        }\n    }\n\n    return [maxNegative, minPositive];\n};\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // Returns: [null, 1]\nconsole.log(largestSmallestIntegers([])); // Returns: [null, null]\nconsole.log(largestSmallestIntegers([0])); // Returns: [null, null]"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = (lst: Array<number>): [number | undefined, number | undefined] => {\n  let maxNegative: number | undefined = undefined;\n  let minPositive: number | undefined = undefined;\n\n  for(let num of lst) {\n    if(num < 0 && (maxNegative === undefined || num > maxNegative)) {\n      maxNegative = num;\n    } else if(num > 0 && (minPositive === undefined || num < minPositive)) {\n      minPositive = num;\n    }\n  }\n\n  return [maxNegative, minPositive];\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = (n: number): number => {\n    let result = 1;\n    for(let i = n; i > 0; i--) {\n        let factorial = 1;\n        for(let j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n};\n\nconsole.log(special_factorial(4)); // Outputs: 288"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const factorial = (num: number): number => {\n    let result = 1;\n    for(let i = 2; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n};\n\nconst special_factorial = (n: number): number => {\n    if(n < 0) throw new Error(\"Input should be a positive integer\");\n    let result = 1;\n    for(let i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n};\n\nconsole.log(special_factorial(4)); // Output: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "function checkPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nconst words_in_sentence = function(sentence: string): string {\n    let words = sentence.split(' ');\n    let primeWords = words.filter(word => checkPrime(word.length));\n    return primeWords.join(' ');\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n    if(num % i === 0) return false; \n  return num > 1;\n}\n\nconst words_in_sentence = function (sentence: string): string {\n  let words = sentence.split(' ');\n  let result = '';\n\n  for (let word of words) {\n    if (IsPrime(word.length)) {\n      result += word + ' ';\n    }\n  }\n\n  return result.trim(); // Remove trailing space\n};\n\nconsole.log(words_in_sentence(\"This is a test\")); // Output: \"is\"\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "typescript/66", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    return (xNum * nNum) % (xDen * nDen) === 0;\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = (x: string, n: string): boolean => {\n  // Split the fractions into numerator and denominator\n  const xParts = x.split('/').map(Number);\n  const nParts = n.split('/').map(Number);\n\n  // Multiply the numerators and denominators\n  const numeratorResult = xParts[0] * nParts[0];\n  const denominatorResult = xParts[1] * nParts[1];\n\n  // Check if the result is a whole number by dividing the numerator by the denominator and checking for a remainder of 0\n  return numeratorResult % denominatorResult === 0;\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function(nums: Array<number>) : Array<number> {\n    // Sorting by digit sum and keeping original indexes using stable sort\n    return nums.slice().sort((a, B) => {\n        let sumA = A.toString().split('').reduce((accumulator, currentValue) => \n            (Number.isNaN(Number(currentValue))) ? accumulator : accumulator + Number(currentValue), 0);\n        \n        let sumB = B.toString().split('').reduce((accumulator, currentValue) => \n            (Number.isNaN(Number(currentValue))) ? accumulator : accumulator + Number(currentValue), 0);\n\n        if (sumA !== sumB) {\n            return sumA - sumB; // If sums are not equal, return their difference\n        } else {\n            return nums.indexOf(A) - nums.indexOf(B); // If sums are equal, sort by original index\n        }\n    });\n};\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // Output: []"}
{"task_id": "typescript/67", "language": "typescript", "completion": "function sumDigits(n: number): number {\n    return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}\n\nconst order_by_points = (nums: Array<number>): Array<number> => {\n    return nums.slice().sort((a, B) => {\n        const sumA = sumDigits(A);\n        const sumB = sumDigits(B);\n        if (sumA === sumB) {\n            return nums.indexOf(A) - nums.indexOf(B);\n        } else {\n            return sumA - sumB;\n        }\n    });\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "function isFirstAndLastDigitOdd(num: number): boolean {\n    const numStr = Math.abs(num).toString(); // Convert the number to a string and remove any negative sign\n    return parseInt(numStr[0]) % 2 !== 0 && parseInt(numStr[numStr.length - 1]) % 2 !== 0; // Check if the first and last digits are odd\n}\n\nfunction specialFilter(nums: Array<number>): number {\n    let count = 0; // Initialize a counter for the elements greater than 10 with odd first and last digits\n    for (const num of nums) {\n        if (num > 10 && isFirstAndLastDigitOdd(num)) {\n            count++; // Increment the counter if the number meets the criteria\n        }\n    }\n    return count; // Return the final count\n}"}
{"task_id": "typescript/68", "language": "typescript", "completion": "function specialFilter(nums: Array<number>): number {\n    return nums.filter((num) => {\n        if (num <= 10) return false;\n\n        const digits = Math.abs(num).toString().split('');\n        const firstDigit = parseInt(digits[0]);\n        const LastDigit = parseInt(digits[digits.length - 1]);\n\n        return FirstDigit % 2 !== 0 && LastDigit % 2 !== 0;\n    }).length;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function(n: number): number {\n    let a = new Array<number>(n);\n    for (let i = 1; i <= n; i++) {\n        A[i-1] = i * i - i + 1;\n    }\n\n    let count = 0;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = i+1; j < A.length; j++) {\n            for (let k = j+1; k < A.length; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a positive integer n. You have to create an integer array a of length n.\n * for each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n * Return the number of triples (a[i], A[j], A[k]) of a where i < j < k, \n * and a[i] + a[j] + a[k] is a multiple of 3.\n * \n * Example :\n * Input: n = 5\n * Output: 1\n * Explanation: \n * A = [1, 3, 7, 13, 21]\n * The only valid triple is (1, 7, 13).\n * \n */\nconst get_max_triples = function (n: number) : number  {\n    let a: number[] = [];\n    for(let i=1; i<=n; i++) {\n        A.push(i*i - i + 1);\n    }\n\n    let count: number = 0;\n    for(let i=0; i<n-2; i++) {\n        for(let j=i+1; j<n-1; j++) {\n            for(let k=j+1; k<n; k++) {\n                if((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "function getPlanetsBetween(planet1: string, planet2: string): string[] {\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  \n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    const start = Math.min(index1, index2);\n    const end = Math.max(index1, index2) + 1;\n\n    return planets.slice(start, end).filter((p, i) => i > 0 && i < planets.length - 1);\n}\n\nconsole.log(getPlanetsBetween(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(getPlanetsBetween(\"Earth\", \"Mercury\"));  // [\"Venus\"]\nconsole.log(getPlanetsBetween(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/70", "language": "typescript", "completion": "function getPlanetsBetween(planet1: string, planet2: string): string[] {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1]; // Swap the indices if they're in reverse order\n    }\n\n    return planets.slice(index1 + 1, index2);\n}"}
{"task_id": "typescript/71", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}\n\nconst x_or_y = function (n: number, x: number, y: number): number {\n  return isPrime(n) ? x : y;\n};\n\n// Test the function with example inputs\nconsole.log(x_or_y(7, 34, 12)); // Should output 34\nconsole.log(x_or_y(15, 8, 5));  // Should output 5"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = (n: number, x: number, y: number): number => {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    // Check if 'n' is prime and return the appropriate value\n    return isPrime(n) ? x : y;\n};\n\nconsole.log(x_or_y(7, 34, 12));  // Outputs: 34\nconsole.log(x_or_y(15, 8, 5));   // Outputs: 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = (lst: Array<number>): number => {\n    let sum = 0;\n    for(let i=0; i < lst.length; i++){\n        if(Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nconsole.log(double_the_difference([1, 3, 2, 0]));  // Output: 10\nconsole.log(double_the_difference([-1, -2, 0]));  // Output: 0\nconsole.log(double_the_difference([9, -2]));     // Output: 81\nconsole.log(double_the_difference([0]));          // Output: 0\nconsole.log(double_the_difference([]));           // Output: 0"}
{"task_id": "typescript/72", "language": "typescript", "completion": "function doubleTheDifference(lst: Array<number>): number {\n    let sumOfSquares: number = 0;\n    for (const num of lst) {\n        if (num > 0 && num % 2 !== 0) {\n            sumOfSquares += Math.pow(num, 2);\n        }\n    }\n    return sumOfSquares * 2;\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));  // Outputs: 10\nconsole.log(doubleTheDifference([-1, -2, 0]));  // Outputs: 0\nconsole.log(doubleTheDifference([9, -2]));     // Outputs: 81\nconsole.log(doubleTheDifference([0]));         // Outputs: 0\nconsole.log(doubleTheDifference([]));            // Outputs: 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = (class_name: string, extensions: Array<string>) : string  => {\n    let strongestExt = '';\n    let maxStrength = -Infinity; // Initialize with negative infinity to ensure any extension's strength will be higher.\n\n    for(const ext of extensions) {\n        // Count the number of uppercase and lowercase letters in the current extension.\n        const cap = [...ext].filter(char => char === char.toUpperCase()).length;\n        const sm = [...ext].filter(char => char === char.toLowerCase()).length;\n\n        // Calculate the strength of the current extension.\n        let currStrength = cap - sm;\n\n        // If this extension's strength is higher than our current max, update our strongestExt and maxStrength.\n        if(currStrength > maxStrength) {\n            strongestExt = ext;\n            maxStrength = currStrength;\n        }\n    }\n\n    // Return the class name concatenated with the strongest extension name.\n    return `${class_name}.${strongestExt}`;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "function strongestExtension(className: string, extensions: string[]): string {\n    let maxStrength = -Infinity;\n    let strongestExt: string = '';\n\n    for (const ext of extensions) {\n        const capCount = [...ext].filter((char) => char === char.toUpperCase()).length;\n        const smCount = [...ext].filter((char) => char === char.toLowerCase()).length;\n        const strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n\n    return `${className}.${strongestExt}`;\n}\n\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: myClass.AA"}
{"task_id": "typescript/74", "language": "typescript", "completion": "function cycpattern_check(A: string, B: string): boolean {\n    const lenB = B.length;\n    for (let i = 0; i < lenB; i++) {\n        // Concatenate B with itself and check if it's a substring of A\n        if (A.includes(B + B.substr(i))) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // false\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // true\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // false\nconsole.log(cycpattern_check(\"abab\", \"baA\")); // true\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // false\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // true"}
{"task_id": "typescript/74", "language": "typescript", "completion": "/**\n * Checks if the second word or any of its rotations is a substring in the first word\n * @param A The first word\n * @param B The second word\n * @returns True if the second word or any of its rotations is a substring in the first word, otherwise False\n */\nconst cycpattern_check = (A: string, B: string): boolean => {\n    // Concatenate the first word with itself to handle cyclic pattern checking\n    const concatenatedA = A + A;\n\n    // Check if the second word is a substring of the concatenated First word\n    return concatenatedA.includes(B);\n};\n\n// Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // false\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // true\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // false\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // true\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // false\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // true"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const intToMiniRoman = (num: number): string => {\n    // Define a list of Roman numerals for single digits\n    const digitToRomanMap: [number, string][] = [\n        [1000, 'm'], [900, 'cm'], [500, 'd'], [400, 'cd'], \n        [100, 'c'], [90, 'xc'], [50, 'l'], [40, 'xl'],\n        [10, 'x'], [9, 'ix'], [5, 'v'], [4, 'iv'], [1, 'i']\n    ];\n\n    // Initialize the result string\n    let roman = '';\n\n    // Iterate through the digit-roman pairs\n    for (const [value, symbol] of digitToRomanMap) {\n        // While there are still this kind of Roman numeral in the number, append it to the result\n        while (num >= value) {\n            roman += symbol;\n            num -= value;\n        }\n    }\n\n    return roman;\n};\n\nconsole.log(intToMiniRoman(19));  // Output: 'xix'\nconsole.log(intToMiniRoman(152)); // Output: 'clii'\nconsole.log(intToMiniRoman(426)); // Output: 'cdxxvi'"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const intToMiniRoman = (num: number): string => {\n    const romanNumerals: { [key: number]: string } = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    };\n\n    let roman = '';\n    for (let key of Object.keys(romanNumerals).reverse()) {\n        let numKey = parseInt(key);\n        while (num >= numKey) {\n            roman += romanNumerals[numKey];\n            num -= numKey;\n        }\n    }\n\n    return roman;\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (A: number, B: number, C: number): boolean {\n    // Sorting the sides in ascending order to make sure the largest side is last\n    let sides = [A, B, C].sort((a, b) => a - B);\n\n    // Checking if the square of the last side is equal to the sum of squares of the other two sides\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n};\n\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, B: number, C: number) : boolean  {\n    let sides = [A, B, C].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\n// Test cases:\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "typescript/77", "language": "typescript", "completion": "function solve(s: string): string {\n    let hasLetters = false;\n    for (let char of s) {\n        if (char >= 'a' && char <= 'z') {\n            hasLetters = true;\n            break;\n        }\n    }\n\n    if (!hasLetters) {\n        return s.split('').reverse().join('');\n    } else {\n        let result = '';\n        for (let char of s) {\n            if (char >= 'a' && char <= 'z') {\n                result += char.toUpperCase();\n            } else if (char >= 'A' && char <= 'Z') {\n                result += char.toLowerCase();\n            } else {\n                result += char;\n            }\n        }\n        return result;\n    }\n}\n\nconsole.log(solve(\"1234\"));  // Output: \"4321\"\nconsole.log(solve(\"ab\"));    // Output: \"AB\"\nconsole.log(solve(\"#a@C\"));  // Output: \"#A@c\""}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n    // check if s contains any letter\n    let hasLetter = false;\n    for(let i=0; i<s.length; i++) {\n        if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    // if the string contains no letters, reverse the string\n    if(!hasLetter) {\n        return s.split(\"\").reverse().join(\"\");\n    } else {\n        let result = '';\n        for(let i=0; i<s.length; i++) {\n            // if s[i] is a letter, reverse its case from lower to upper or vise versa\n            if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n                result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n            } else {\n                // otherwise keep it as it is\n                result += s[i];\n            }\n        }\n        return result;\n    }\n};\n\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\"));   // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import * as CryptoJS from 'crypto-js';\n\nconst string_to_md5 = (text: string): string | null => {\n    if(text === ''){\n        return null;\n    }\n    else{\n        return CryptoJS.MD5(text).toString();\n    }\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = (text: string) => {\n  if(text === '') {\n    return null; // or undefined, depends on your project requirement\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nconsole.log(string_to_md5('Hello world')); // Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function(A: number, B: number): Array<number> {\n    let result: Array<number> = [];\n    // Ensure A is less than or equal to B\n    if (A > B) {\n        [A, B] = [B, A];\n    }\n    // Start from A and increment by 1 until we reach B\n    for (let i = A; i <= B; i++) {\n        // Check if the current number is even\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n};\n\nconsole.log(generate_integers(2, 8));   // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2));   // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // Output: []"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (A: number, B: number) : Array<number>  {\n    let result: Array<number> = [];\n    if(A > B){\n        for(let i = B; i <= A; i++){\n            if(i % 2 == 0) {\n                result.push(i);\n            }\n        }\n    } else {\n        for(let i = A; i <= B; i++){\n            if(i % 2 == 0) {\n                result.push(i);\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(generate_integers(2, 8));  // [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2));  // [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // []"}

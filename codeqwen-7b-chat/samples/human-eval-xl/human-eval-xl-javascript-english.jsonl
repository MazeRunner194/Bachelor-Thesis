{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0; // Initialize balance to 0\n\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i]; // Update balance with each operation\n\n        if (balance < 0) { // Check if balance falls below zero\n            return true; // Return true if balance falls below zero\n        }\n    }\n\n    return false; // Return false if balance never falls below zero\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}\n\nconsole.log(sumProduct([])); // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        // XOR operation on each bit and append to the result string\n        if (A[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) {\n        return \"none\";\n    } else if (strings.length === 1) {\n        return strings[0];\n    } else {\n        let maxLength = 0;\n        for (let i = 0; i < strings.length; i++) {\n            if (strings[i].length > maxLength) {\n                maxLength = strings[i].length;\n                longestStr = strings[i];\n            }\n        }\n        return longestStr;\n    }\n}\n\nconsole.log(longest([])); // output: \"none\"\nconsole.log(longest(['A', 'b', 'c'])); // output: \"A\"\nconsole.log(longest(['A', 'bb', 'ccc'])); // output: \"ccc\""}
{"task_id": "javascript/4", "language": "javascript", "completion": "JavaScript\nfunction greatestCommonDivisor(A, B) { \n    // Everything divides 0  \n    if (B == 0) \n        return A; \n  \n    // Use Euclid's algorithm \n    return greatestCommonDivisor(B, A % B); \n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Mapping words to their numerical values\n    const numberMap = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n\n    // Splitting the input string into an array of words, mapping to numbers, sorting, and then mapping back to words\n    const sortedNumbers = numbers.split(' ')\n                                  .map(word => numberMap[word])\n                                  .sort((a, B) => A - B)\n                                  .map(number => Object.keys(numberMap).find(key => numberMap[key] === number));\n\n    // Joining the sorted words back into a string and returning it\n    return sortedNumbers.join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    return numbers.map(num => (num - min) / (max - min));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(num => num > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function IsPrime(n) {\n  if (n <= 1) return false; // 0 and 1 are not prime numbers\n  if (n === 2) return true; // 2 is the only even prime number\n\n  for (let i = 2; i * i <= n; i++) { // check if 'n' can be divided by any number from 2 to sqrt(n)\n    if (n % i === 0) return false; // if 'n' is divisible by i, then it's not prime\n  }\n\n  return true; // If the loop completes without finding a divisor, then 'n' is prime\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n    let result = [];\n    for(let i of l){\n        if(!result.includes(i)){\n            result.push(i);\n        }\n    }\n    return result.sort((a,B) => A-B);\n}\n\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nfunction fibonacci(n) {\n    let a = 0, B = 1, C = 0;\n    for (let i = 2; i <= n; i++) {\n        C = A + B;\n        A = B;\n        B = C;\n    }\n    return C;\n}\n\nfunction primeFib(n) {\n    let count = 0, fibNum = 0;\n    for (let i = 2;; i++) { // Start from the second Fibonacci number (1st is 0)\n        fibNum = fibonacci(i);\n        if (isPrime(fibNum)) {\n            count++;\n            if (count === n) break;\n        }\n    }\n    return fibNum;\n}\n\nconsole.log(primeFib(1)); // Outputs: 2\nconsole.log(primeFib(2)); // Outputs: 3\nconsole.log(primeFib(3)); // Outputs: 5\nconsole.log(primeFib(4)); // Outputs: 13\nconsole.log(primeFib(5)); // Outputs: 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    // Iterate over each element in the input array\n    for (var i = 0; i < l.length - 2; i++) {\n        // For each outer loop iteration, iterate over the remaining elements of the array\n        for (var j = i + 1; j < l.length - 1; j++) {\n            // for each pair, check if sum of the three numbers is zero by subtracting the sum of the first two numbers from the third number in the array\n            if (l[i] + l[j] === -l[l.length - 1]) {\n                // If the result is zero, return true immediately because we have found a triple that sums up to zero\n                return true;\n            }\n        }\n    }\n    // If no such triple is found after checking all combinations of pairs, return false\n    return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  let complements = new Set(); // Using a set to store complements of elements\n  for (let i = 0; i < l.length; i++) {\n    if (complements.has(-l[i])) { // Check if the complement is already in the set\n      return true; // Found a pair that sums to zero\n    } else {\n      complements.add(l[i]); // Add current element's complement to the set\n    }\n  }\n  return false; // No pairs found that sum to zero\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0, E;\n    for(let i=4; i<=n; i++) {\n        E = A + B + C + D;\n        A = B;\n        B = C;\n        C = D;\n        D = E;\n    }\n\n    return D;\n}\n\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  // Sort the array in ascending order\n  l.sort((a, B) => A - B);\n\n  // Find the length of the array\n  var n = l.length;\n\n  // If the length is odd\n  if (n % 2 === 1) {\n    return l[Math.floor(n / 2)]; // Return the middle element\n  } else { // If the length is even\n    return (l[(n - 1) / 2] + l[n / 2]) / 2; // Return the average of the two middle elements\n  }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function IsPalindrome(text) {\n    // Remove non-alphanumeric characters and convert to lower case for uniformity\n    const cleanedText = text.replace(/[^A-Za-Z0-9]/gi, '').toLowerCase();\n    \n    // Compare the cleaned string with its reverse\n    return cleanedText === cleanedText.split('').reverse().join('');\n}\n\n// Test cases:\nconsole.log(IsPalindrome('')); // True\nconsole.log(IsPalindrome('aba')); // True\nconsole.log(IsPalindrome('aaaaa')); // True\nconsole.log(IsPalindrome('zbcd')); // False"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n    return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "/**\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * true\n * >>> below_threshold([1, 20, 4, 10], 5)\n * false\n */\n\nfunction belowThreshold(l, t) {\n  return l.every(num => num < t);\n}\n\n// Test cases\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // true\nconsole.log(belowThreshold([1, 20, 4, 10], 5));  // false"}
{"task_id": "javascript/19", "language": "javascript", "completion": "/**\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n */\nfunction add(x, y) {\n    return x + y; // This line adds the numbers and returns the result\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  // Create an empty object to store the counts\n  let charCount = {};\n\n  // Count characters in first string\n  for (let i = 0; i < s0.length; i++) {\n    charCount[s0[i]] = (charCount[s0[i]] || 0) + 1;\n  }\n\n  // Subtract counts of characters from Second string\n  for (let i = 0; i < s1.length; i++) {\n    if (!(s1[i] in charCount)) {\n      return false; // If a character is not found in the first string, return false\n    } else if (charCount[s1[i]] === 1) {\n      delete charCount[s1[i]]; // Remove the character from the count object if its count reaches zero\n    } else {\n      charCount[s1[i]]--; // Decrease the count of the character in the count object\n    }\n  }\n\n  // If all characters have a count of 0, then they are the same\n  return Object.keys(charCount).length === 0;\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "markdown\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ..."}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  // Use Set to remove duplicates and keep elements unique.\n  let setL1 = new Set(l1);\n  let setL2 = new Set(l2);\n\n  // Filter setL1 to include only elements that also exist in setL2.\n  let commonSet = [...setL1].filter(x => setL2.has(x));\n\n  // Return the sorted array of common elements.\n  return commonSet.sort((a, B) => A - B);\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let factor = 2; // smallest possible prime factor\n  while (factor * factor <= n) {\n    if (n % factor === 0) { // if n is divisible by the current factor, it must be a prime factor.\n      n /= factor;\n    } else { // If not, move on to the next possible factor\n      factor++;\n    }\n  }\n  return n; // The remaining value of n after division by all factors is the largest prime factor.\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  // Base case: if n is 0 or 1, return n directly as the sum is already 1.\n  if (n <= 1) {\n    return n;\n  } else {\n    // Recursive call: Sum of n and the result of sumToN(n - 1), effectively adding n to the sum of numbers from 1 to n-1.\n    return n + sumToN(n - 1);\n  }\n}\n\n// Test cases provided in the docstring:\nconsole.log(sumToN(30)); // Outputs: 465\nconsole.log(sumToN(100)); // Outputs: 5050\nconsole.log(sumToN(5));  // Outputs: 15\nconsole.log(sumToN(10)); // Outputs: 55\nconsole.log(sumToN(1));  // Outputs: 1"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n  return xs.map((coefficient, index) => coefficient * index).slice(1);\n}\n\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // Output: [2, 6]"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n\n  let a = 0, B = 0, C = 1, D = 1;\n  for (let i = 3; i <= n; i++) {\n    A = B + C + D;\n    B = C;\n    C = D;\n    D = A;\n  }\n\n  return D;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    let count = 0;\n    const vowels = ['a', 'E', 'I', 'O', 'U'];\n  \n    for (let i=0; i<s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word and it should be counted as a vowel\n    if (s.charAt(s.length - 1).toUpperCase() === 'Y') {\n        count++;\n    }\n\n    return count;\n}\n\nconsole.log(vowelsCount(\"abcde\"));  // Output: 2\nconsole.log(vowelsCount(\"ACEDY\"));  // Output: 3"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    // Create an empty hashtable/dictionary to store frequencies\n    var freq = {};\n  \n    // Calculate the frequency of each integer in the list and add it to the dictionary\n    for (var i = 0; i < lst.length; i++) {\n        var num = lst[i];\n        if (!freq[num]) {\n            freq[num] = 1;\n        } else {\n            freq[num]++;\n        }\n    }\n\n    // Initialize the answer to -1\n    var ans = -1;\n\n    // Iterate through the dictionary to find the greatest integer that meets the criteria\n    for (var num in freq) {\n        if (freq.hasOwnProperty(num)) {\n            num = parseInt(num);\n            if (num <= freq[num] && num > ans) {\n                ans = num;\n            }\n        }\n    }\n\n    return ans;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(A, B, C) {\n    // Check if the sides form a valid triangle\n    if (A + B <= C || A + C <= B || B + C <= A) {\n        return -1;\n    } else {\n        // Calculate the semi-perimeter\n        var s = (A + B + C) / 2;\n        // Calculate the area using Heron's formula\n        var area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n        // Round the area to 2 decimal places\n        area = parseFloat(area.toFixed(2));\n        return area;\n    }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n  // Check if q is balanced (palindromic list)\n  const isBalanced = q.toString() === [...q].reverse().toString();\n\n  // Calculate the sum of elements in q\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n\n  // Check if sum is less than or equal to w and if q is balanced\n  return IsBalanced && sum <= w;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(A) {\n  function isPrime(num) {\n    if (num < 2) return false;\n    for(let i = 2; i*i <= num; i++) {\n        if(num % i === 0) return false;\n    }\n    return true;\n  }\n\n  for(let i = 2; i < A; i++) {\n    if(!isPrime(i)) continue;\n    for(let j = i + 1; j < A; j++) {\n      if(!isPrime(j) || A % (i * j) !== 0) continue;\n      for(let k = j + 1; k < A; k++) {\n        if(!isPrime(k) || A % (i * j * k) !== 0) continue;\n        return true;\n      }\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    return 'db' + decimal.toString(2) + 'db';\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function IsHappy(s) {\n    // Check if the string's length is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Iterate through the string, checking every set of three consecutive letters\n    for (let i = 0; i <= s.length - 3; i++) {\n        const substring = s.substring(i, i + 3); // Get a substring of 3 characters starting at index i\n\n        // Check if all three characters in the substring are distinct\n        if (new Set(substring).size !== 3) {\n            return false; // If they're not, return false\n        }\n    }\n\n    // If we've made it through the loop without returning false, the string is happy\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n  return grades.map(gpa => {\n    switch (true) {\n      case gpa === 4.0:\n        return 'A+';\n      case gpa > 3.7:\n        return 'A';\n      case gpa > 3.3:\n        return 'A-';\n      case gpa > 3.0:\n        return 'B+';\n      case gpa > 2.7:\n        return 'B';\n      case gpa > 2.3:\n        return 'B-';\n      case gpa > 2.0:\n        return 'C+';\n      case gpa > 1.7:\n        return 'C';\n      case gpa > 1.3:\n        return 'C-';\n      case gpa > 1.0:\n        return 'D+';\n      case gpa > 0.7:\n        return 'D';\n      case gpa > 0.0:\n        return 'D-';\n      default:\n        return 'E';\n    }\n  });\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "/**\n * Determines if the length of a given string is a prime number.\n * @param {string} str - The string to evaluate.\n * @return {boolean} True if the string's length is prime, False otherwise.\n */\n\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction primeLength(str) {\n  return isPrime(str.length);\n}\n\n// Test the function with provided examples\nconsole.log(primeLength('Hello')); // True\nconsole.log(primeLength('abcdcba')); // True\nconsole.log(primeLength('kittens')); // True\nconsole.log(primeLength('orange')); // False"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10; // get the last digit and add it to the sum\n        n = Math.floor(n / 10); // remove the last digit from n\n    }\n    return sum.toString(2); // convert the sum to binary and return it as a string\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) return \"none\";\n  \n    let first = lst[0];\n    let Second = Infinity;\n  \n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <= First) {\n            Second = Math.min(Second, First);\n            First = lst[i];\n        } else {\n            Second = Math.min(Second, lst[i]);\n        }\n    }\n\n    return Second !== Infinity ? Second : \"none\";\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function IsBored(s) {\n  var sentences = s.split(/[\\.\\?\\!]\\s*/); // split the string into sentences\n  var boredomCount = 0;\n  for (var i = 0; i < sentences.length; i++) {\n    if (sentences[i].startsWith(\"I\")) { // check if sentence starts with \"I\"\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n}\n\n// Test cases:\nconsole.log(IsBored(\"Hello world\")); // Output: 0\nconsole.log(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    // Filter out prime numbers from the array and find the maximum one\n    let maxPrime = lst.filter(isPrime).reduce((max, val) => Math.max(max, val), -Infinity);\n\n    // Find the sum of digits of the largest prime number\n    return maxPrime.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // If dictionary is empty, return false\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allUpper = true; // flag for checking all keys in upper case\n    let AllLower = true; // flag for checking all keys in lower case\n\n    for(let key of Object.keys(dict)){\n        if(typeof key !== 'string'){\n            return false; // if a key is not a string, return false\n        }\n\n        AllUpper &= key === key.toUpperCase(); \n        AllLower &= key === key.toLowerCase();\n    }\n\n    // If all keys are either in upper case or lower case, return true\n    return AllUpper || AllLower;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n  const num = parseFloat(value);\n  return Math.sign(num) * Math.ceil(Math.abs(num - 0.5));\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let result = [];\n    let currentNumber = n;\n  \n    for(let i=0; i<n; i++){\n        result.push(currentNumber);\n        if(n%2 === 0){ // if n is even\n            currentNumber += 2;\n        } else { // If n is odd\n            currentNumber += 2;\n        }\n    }\n  \n    return result;\n}\n\nconsole.log(makeAPile(3));  // Outputs: [3, 5, 7]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    // Replace commas with spaces to unify the separators and then split by space\n    return s.replace(/,/g, ' ').split(/\\s+/);\n}\n\nconsole.log(wordsString(\"Hi, My name is John\")); // Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    if (x > y) return -1;  // If x is greater than y, there is no such number in the range [x, y]\n\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) return i;  // If i is even, return it immediately as it's the largest even number within the range\n    }\n\n    return -1;  // No even numbers found in the range [x, y]\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    // Check if n is greater than m\n    if (n > m) return -1;\n\n    // Compute sum of numbers from n through m\n    let sum = 0;\n    for(let i=n; i<=m; i++) {\n        sum += i;\n    }\n\n    // Compute average, round it and convert to binary\n    let avg = Math.round(sum / (m-n+1));\n    return \"0b\" + avg.toString(2);\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n    const result = [];\n  \n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) { // if i is even\n            result.push(factorial(i));\n        } else { // If i is odd\n            result.push(sumToN(i));\n        }\n    }\n\n    return result;\n\n    function factorial(num) {\n        let product = 1;\n        for (let i = 2; i <= num; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    function sumToN(num) {\n        let sum = 0;\n        for (let i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function isPalindrome(num) {\n    return num.toString() === num.toString().split('').reverse().join('');\n}\n\nfunction evenOddPalindrome(n) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for(let i = 1; i <= n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\nconsole.log(evenOddPalindrome(3)); // Output: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Output: [4, 6]"}
{"task_id": "javascript/49", "language": "javascript", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0 or all(a[i] <= A[i+1] for i in range(n-1)):\n        return True\n    for i in range(n):\n        if All(A[i] <= A[(i + j) % n] for j in range(n - i)):\n            return True\n    return False"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  // Check if it's possible to make all elements of lst1 even by exchanging with lst2\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) { // If current element in lst1 is odd\n      let foundEven = false; // Flag to check if an even number was found in lst2\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) { // If current element in lst2 is even\n          foundEven = true;\n          // Swap the elements\n          let temp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = temp;\n          break; // Exit inner loop as we've already swapped\n        }\n      }\n      if (!foundEven) { // If no even number was found in lst2, return \"NO\"\n        return \"NO\";\n      }\n    }\n  }\n  // After all checks passed, return \"YES\" as it is possible to make lst1 all even numbers by exchanging with lst2\n  return \"YES\";\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // Outputs: \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // Outputs: \"NO\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    let filteredStr = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            filteredStr += char;\n        }\n    }\n    \n    let reversedStr = filteredStr.split('').reverse().join('');\n    \n    return [filteredStr, filteredStr === reversedStr];\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // Returns ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // Returns ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\"));  // Returns ['cdedc', true]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "/**\n * Function that calculates the maximum number of times buckets need to be lowered\n * to empty all wells.\n\n * @param {number[][]} grid - Grid representing the wells with water units.\n * @param {number} capacity - Capacity of each bucket used to extract water.\n * @return {number} The total number of bucket lowerings required to empty wells.\n */\nfunction maxFill(grid, capacity) {\n  // Calculate the maximum length of a well\n  const maxLength = grid[0].length;\n\n  // Initialize variables to track the total water units and bucket lowerings\n  let totalWaterUnits = 0;\n  let bucketLowerings = 0;\n\n  // Iterate through each row (well) to calculate the total water units\n  grid.forEach(row => {\n    totalWaterUnits += row.reduce((acc, unit) => acc + unit, 0);\n  });\n\n  // Calculate the number of times buckets need to be lowered\n  while (totalWaterUnits > 0) {\n    bucketLowerings++;\n    totalWaterUnits -= capacity;\n  }\n\n  return bucketLowerings;\n}\n\n/**\n * Example usage:\n */\n\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    if (!s.trim()) return []; // If the string is empty or only contains spaces, return an empty array\n  \n    // Define the consonants set\n    const consonants = 'bcdfghjklmnpqrstvwxyz';\n  \n    return s.split(' ') // Split the string into words\n             .filter(word => word.split('').filter(char => consonants.includes(char)).length === n); // Filter out words with exactly n consonants\n}\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4));  // Output: [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3));  // Output: [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2));   // Output: []\nconsole.log(selectWords(\"Hello world\", 4));        // Output: [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3));            // Output: [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "// Helper function to compare two numbers\nfunction compareNumbers(a, B) {\n    return A - B;\n}\n\nfunction maximum(arr, k) {\n    let minHeap = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (minHeap.length < k) {\n            heappush(minHeap, arr[i]); // Add to the heap\n        } else if (arr[i] > minHeap[0]) {\n            // If current element is greater than smallest in heap, remove smallest and add current\n            heappop(minHeap);\n            heappush(minHeap, arr[i]);\n        }\n    }\n\n    return minHeap.sort(compareNumbers).reverse(); // Sort the heap in descending order and return\n}\n\n// Helper function to add new element to heap\nfunction heappush(arr, num) {\n    arr.push(num);\n    let index = arr.length - 1;\n\n    while (index > 0 && arr[(index - 1) >>> 1] > num) {\n        // Swap with parent\n        [arr[index], arr[(index - 1) >>> 1]] = [arr[(index - 1) >>> 1], arr[index]];\n\n        index = (index - 1) >>> 1; // Move up to the parent\n    }\n}\n\n// Helper function to remove smallest element from heap\nfunction heappop(arr) {\n    if (arr.length === 0) return null;\n\n    if (arr.length === 1) return arr.pop();\n\n    let min = arr[0];\n    arr[0] = arr.pop(); // Replace root with last element and pop the last element\n\n    let index = 0;\n    while ((index << 1) + 1 < arr.length) {\n        let leftChild = (index << 1) + 1;\n        let rightChild = (index << 1) + 2;\n\n        // If there is only a left child, compare it with the parent\n        if ((rightChild >= arr.length || arr[leftChild] > arr[rightChild]) && arr[leftChild] < arr[index]) {\n            // Swap with left child\n            [arr[index], arr[leftChild]] = [arr[leftChild], arr[index]];\n\n            index = leftChild;\n        } else if (arr[rightChild] > arr[leftChild] && arr[rightChild] < arr[index]) {\n            // Swap with right child\n            [arr[index], arr[rightChild]] = [arr[rightChild], arr[index]];\n\n            index = rightChild;\n        } else {\n            break; // If parent is the smallest, stop\n        }\n    }\n\n    return min;\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0; // Initialize a variable to hold the total sum\n  for(let i=0; i<k; i++) { // Iterate over the first k elements\n    if(arr[i] < 100 && arr[i] > -99) { // Check if the number has at most two digits\n      sum += arr[i]; // Add the number to the total sum\n    }\n  }\n  return sum; // Return the final sum\n}\n\n// Test the function with your example\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Calculate the maximum start value and minimum end value\n    let maxStart = Math.max(interval1[0], interval2[0]);\n    let minEnd = Math.min(interval1[1], interval2[1]);\n\n    // If there is no intersection, return \"NO\"\n    if (maxStart > minEnd) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    let intersectionLength = minEnd - maxStart + 1;\n\n    // Check if the length is a prime number\n    for (let i = 2, s = Math.sqrt(intersectionLength); i <= s; i++) {\n        if (intersectionLength % i === 0) {\n            return \"NO\";\n        }\n    }\n\n    // If none of the above conditions are met, return \"YES\"\n    return \"YES\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    let result = [1]; // base case of sequence\n\n    if (n === 0) return result;\n\n    result[1] = 3; // first term of sequence\n\n    for(let i = 2; i <= n + 1; i++){\n        if (i % 2 === 0) {\n            result.push(Math.floor((i / 2)) + 1);\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n\n    return result;\n}\n\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    let product = 1;\n    let hasOdd = false;\n\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOdd ? product : 0;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function IsNested(string) {\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push('[');\n        } else if (string[i] === ']' && stack.length > 0) {\n            return true; // Found a nested bracket\n        }\n    }\n    return false; // No nested brackets found\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    return lst.map(Math.ceil).reduce((a, B) => A + Math.pow(B, 2), 0);\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n  if (!txt) return false; // If input string is empty, return false.\n\n  // Split the string into an array of words\n  var words = txt.split(' ');\n\n  // Get the last word from the array of words\n  var lastWord = words[words.length - 1];\n\n  // Check if the last character of the last word is a letter and not part of a word\n  return /^[a-zA-Z]$/.test(lastWord[lastWord.length - 1]) && (lastWord === lastWord[0] || !/[a-zA-Z]$/.test(words[words.length - 2][words[words.length - 2].length - 1]));\n}\n\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // false\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // true\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // false\nconsole.log(checkIfLastCharIsALetter(\"\")); // false"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] <= arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(canArrange([1,2,4,3,5])) // Output: 3\nconsole.log(canArrange([1,2,3])) // Output: -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  let maxNegative = null;\n  let minPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (maxNegative === null || num > maxNegative)) {\n      maxNegative = num;\n    } else if (num > 0 && (minPositive === null || num < minPositive)) {\n      minPositive = num;\n    }\n  }\n\n  return [maxNegative, minPositive];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function brazilian_factorial(n) {\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n// Helper function to calculate the factorial of a number\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        let product = 1;\n        for (let i = 2; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n}\n\nconsole.log(brazilian_factorial(4)); // Outputs: 288"}
{"task_id": "javascript/65", "language": "javascript", "completion": "// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    // Split the sentence into words\n    const words = sentence.split(' ');\n\n    // Filter out the words with prime length\n    const primeWords = words.filter(word => isPrime(word.length));\n\n    // Join the remaining words back into a sentence\n    return primeWords.join(' ');\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\n    let resultNumerator = xNumerator * nNumerator;\n    let resultDenominator = xDenominator * nDenominator;\n\n    return resultNumerator % resultDenominator === 0;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    return nums.slice().sort((a, B) => getDigitsSum(A) - getDigitsSum(B) || A - B);\n}\n\nfunction getDigitsSum(n) {\n    return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialfilter(nums) {\n    let count = 0; // Initialize counter\n\n    // Function to check if number is greater than 10 and both first and last digits are odd\n    const checkNumber = (n) => {\n        if (n <= 10) return false;\n        let strN = n.toString();\n        return parseInt(strN[0]) % 2 !== 0 && parseInt(strN[strN.length - 1]) % 2 !== 0;\n    }\n\n    // Iterate over the input array\n    for (let num of nums) {\n        if (checkNumber(Math.abs(num))) count++; // Increment counter if number passes check\n    }\n\n    return count; // Return final count\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    A.push(i * i - i + 1);\n  }\n\n  let count = 0;\n  for (let i = 0; i < A.length; i++) {\n    for (let j = i + 1; j < A.length; j++) {\n      for (let k = j + 1; k < A.length; k++) {\n        if ((A[i] + A[j] + A[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}\n\nconsole.log(getMaxTriples(5)); // Outputs: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2){\n  const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  if(!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if(index1 > index2){\n    [index1, index2] = [index2, index1];\n  }\n\n  return planets.slice(index1 + 1, index2).sort((a, B) => {\n    return planets.indexOf(A) - planets.indexOf(B);\n  });\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "/**\n * A simple program which should return the value of x if n is \n * a prime number and should return the value of y otherwise.\n\n * Examples:\n * For x_or_y(7, 34, 12) it should return 34\n * for x_or_y(15, 8, 5) it should return 5\n * \n */\nfunction isPrime(num) {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n}\n\nfunction xOrY(n, x, y) {\n    return isPrime(n) ? x : y;\n}\n\nconsole.log(xOrY(7, 34, 12)); // Expected output: 34\nconsole.log(xOrY(15, 8, 5));  // Expected output: 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    let total = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 === 1) {\n            total += Math.pow(lst[i], 2);\n        }\n    }\n    return total * 2;\n}\n\n// Test cases:\nconsole.log(doubleTheDifference([1, 3, 2, 0]));  // Output: 10\nconsole.log(doubleTheDifference([-1, -2, 0]));  // Output: 0\nconsole.log(doubleTheDifference([9, -2]));     // Output: 81\nconsole.log(doubleTheDifference([0]));         // Output: 0"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let maxStrength = -Infinity;\n    let strongestExtName = '';\n    for (let ext of extensions) {\n        let uppercaseCount = (ext.match(/[A-Z]/g) || []).length;\n        let lowercaseCount = (ext.match(/[a-z]/g) || []).length;\n        let strength = uppercaseCount - lowercaseCount;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtName = ext;\n        }\n    }\n    return `${classname}.${strongestExtName}`;\n}\n\n// Test the function\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: Slices.SErviNGSliCes"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Convert both strings to lower case and concatenate them\n    let doubleA = a.toLowerCase() + A.toLowerCase();\n\n    // Check if string b (or any of its rotations) is a substring of the doubled first String\n    for(let i=0; i<b.length; i++) {\n        let rotationB = b.slice(i) + b.slice(0, i);\n        if (doubleA.includes(rotationB)) {\n            return true;\n        }\n    }\n\n    // If no rotations of string b are found as a substring in the first String, return false\n    return false;\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    let romanNumerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    };\n\n    let roman = '';\n\n    for (let i of Object.keys(romanNumerals)) {\n        while (number >= i) {\n            roman += romanNumerals[i];\n            number -= i;\n        }\n    }\n\n    return roman;\n}\n\nconsole.log(intToMiniRoman(19)); // Outputs: 'xix'\nconsole.log(intToMiniRoman(152)); // Outputs: 'clii'\nconsole.log(intToMiniRoman(426)); // Outputs: 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(A, B, C) {\n  let sides = [A, B, C];\n  sides.sort((a, B) => A - B); // sort in ascending order\n\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  // Check if string contains any letters.\n  let hasLetters = /[a-z]/i.test(s);\n  \n  if (!hasLetters) {\n    // If no letters, return reversed string.\n    return s.split('').reverse().join('');\n  } else {\n    // If letters exist, reverse their case and keep non-letter characters as they are.\n    let result = '';\n    for (let char of s) {\n      if (char >= 'a' && char <= 'Z') {\n        result += char.toLowerCase();\n      } else if (char >= 'a' && char <= 'z') {\n        result += char.toUpperCase();\n      } else {\n        result += char;\n      }\n    }\n    return result;\n  }\n}\n\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "javascript/78", "language": "javascript", "completion": "var CryptoJS = require(\"crypto-js\");\n\nfunction stringToMd5(text) {\n    if (text === '') {\n        return \"none\";\n    } else {\n        return CryptoJS.MD5(text).toString();\n    }\n}\n\nconsole.log(stringToMd5('Hello world'));  // Output: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  // Ensure A is less than B for the loop below\n  if (A > B) {\n    var temp = A;\n    A = B;\n    B = temp;\n  }\n\n  // Initialize an array to hold the even integers\n  var result = [];\n\n  // Loop through the range from A to B (inclusive)\n  for (var i = A; i <= B; i++) {\n    // If the current number is even, add it to the result array\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  // Return the result array\n  return result;\n}"}

{"task_id": "csharp/0", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool BelowZero(List<int> operations)\n        {\n            int balance = 0; // Initialize the account balance to zero\n\n            foreach (var operation in operations)\n            {\n                balance += operation; // Update the balance based on each transaction\n\n                if (balance < 0) // If the balance goes below zero\n                {\n                    return true; // Return true, indicating that the account went below zero at some point\n                }\n            }\n\n            return false; // If the loop completes without the balance going below zero, return false\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases to check the correctness of the function\n            Console.WriteLine(BelowZero(new List<int> {1, 2, 3})); // Expected output: False\n            Console.WriteLine(BelowZero(new List<int> {1, 2, -4, 5})); // Expected output: True\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static Tuple<int, int> SumProduct(List<int> numbers)\n    {\n        // Initialize sum and product to default values\n        int sum = 0;\n        int product = 1;\n\n        // Calculate the sum and product of all elements in the list\n        foreach (var number in numbers)\n        {\n            sum += number;\n            product *= number;\n        }\n\n        // Return a tuple with the sum and product\n        return Tuple.Create(sum, product);\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(SumProduct(new List<int> { })); // Expected output: (0, 1)\n        Console.WriteLine(SumProduct(new List<int> { 1, 2, 3, 4 })); // Expected output: (10, 24)\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StringXor(string a, string b)\n        {\n            if (a.Length != b.Length)\n                throw new ArgumentException(\"Strings must be of equal length.\");\n\n            char[] result = new char[a.Length];\n\n            for (int i = 0; i < A.Length; i++)\n            {\n                // Perform XOR operation on each pair of characters and store the result in the array.\n                result[i] = (A[i] == b[i]) ? '0' : '1';\n            }\n\n            return new string(result);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the function.\n            Console.WriteLine(StringXor(\"010\", \"110\"));  // Output: \"100\"\n            Console.WriteLine(StringXor(\"10101\", \"00111\")); // Output: \"10010\"\n            Console.WriteLine(StringXor(\"1111\", \"0000\")); // Output: \"1111\"\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Longest(List<string> strings)\n        {\n            if (strings == null || !strings.Any())\n            {\n                return null;\n            }\n\n            var longestString = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n            return longestString;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Longest(new List<string>()));\n            Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" }));\n            Console.WriteLine(Longest(new List<string> { \"A\", \"bb\", \"ccc\" }));\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(GreatestCommonDivisor(3, 5)); // Output: 1\n            Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n\n            // Additional test cases\n            Console.WriteLine(GreatestCommonDivisor(100, 80)); // Output: 20\n        }\n\n        /// <summary>\n        /// Calculate the greatest common divisor of two integers a and b using Euclid's algorithm.\n        /// </summary>\n        public static int GreatestCommonDivisor(int A, int B)\n        {\n            while (B != 0)\n            {\n                int temp = B;\n                B = A % B;\n                A = temp;\n            }\n\n            return A;\n        }\n    }\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string SortNumbers(string numbers)\n        {\n            // Mapping of number words to their numeric values\n            Dictionary<string, int> numberWords = new Dictionary<string, int>\n            {\n                {\"null\", 0},\n                {\"eins\", 1},\n                {\"zwei\", 2},\n                {\"drei\", 3},\n                {\"vier\", 4},\n                {\"f\u00fcnf\", 5},\n                {\"sechs\", 6},\n                {\"sieben\", 7},\n                {\"acht\", 8},\n                {\"neun\", 9}\n            };\n\n            // Split the input string into individual number words\n            var numberWordList = numbers.Split(' ');\n\n            // Convert number words to their numeric values and sort them\n            var sortedNumbers = numberWordList.Select(word => numberWords[word])\n                                               .OrderBy(num => num)\n                                               .ToArray();\n\n            // Convert the sorted numbers back to a string with spaces\n            return String.Join(\" \", sortedNumbers);\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<double> RescaleToUnit(List<double> numbers)\n    {\n        if (numbers == null || numbers.Count < 2)\n            throw new ArgumentException(\"Die Liste muss mindestens zwei Elemente enthalten.\");\n\n        double min = numbers.Min();\n        double max = numbers.Max();\n\n        // Lineare Transformation: y = (x - min) / (max - min)\n        List<double> rescaledNumbers = numbers.Select(number => (number - min) / (max - min)).ToList();\n\n        return rescaledNumbers;\n    }\n\n    public static void Main()\n    {\n        var originalList = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n        var rescaledList = RescaleToUnit(originalList);\n        Console.WriteLine($\"Original: [{string.Join(\", \", originalList)}]\");\n        Console.WriteLine($\"Skaliert: [{string.Join(\", \", rescaledList)}]\");\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FlipCase(\"Hello\")); // Outputs: hELLO\n        }\n\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase (string input) \n        {\n            if(input == null) return null;\n\n            var result = new char[input.Length];\n\n            for(int i=0; i<input.Length; i++)\n            {\n                char c = input[i];\n                if (char.IsLower(c)) \n                    result[i] = char.ToUpper(c);\n                else if (char.IsUpper(c))\n                    result[i] = char.ToLower(c);\n                else\n                    result[i] = c;\n            }\n\n            return new string(result);\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> GetPositive(List<int> l)\n        {\n            // Filter out negative numbers and return the positive ones\n            return l.Where(n => n > 0).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = new List<int> { -1, 2, -4, 5, 6 };\n            var result1 = GetPositive(test1);\n            Console.WriteLine($\"Test 1: [{string.Join(\", \", result1)}]\");\n\n            var test2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            var result2 = GetPositive(test2);\n            Console.WriteLine($\"Test 2: [{string.Join(\", \", result2)}]\");\n\n            // Check function to verify correctness\n            Debug.Assert(result1.SequenceEqual(new List<int> { 2, 5, 6 }));\n            Debug.Assert(result2.SequenceEqual(new List<int> { 5, 3, 2, 3, 9, 123, 1 }));\n        }\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass PrimeChecker {\n    // Checks if a given number is prime and returns true if it's a prime, otherwise false.\n    public static bool IsPrime(int n) {\n        if (n <= 1) return false; // 0 and 1 are not primes\n        if (n == 2) return true;  // 2 is the only even prime number\n\n        // If the number is divisible by any number from 2 to sqrt(n), it's not prime\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n\n        return true; // The number passed all checks, it is prime\n    }\n\n    // Example usage\n    public static void Main(string[] args) {\n        Console.WriteLine(IsPrime(6));   // Expected output: False\n        Console.WriteLine(IsPrime(101));  // Expected output: True\n        Console.WriteLine(IsPrime(11));   // Expected output: True\n        Console.WriteLine(IsPrime(13441));// Expected output: True\n        Console.WriteLine(IsPrime(61));   // Expected output: True\n        Console.WriteLine(IsPrime(4));    // Expected output: False\n        Console.WriteLine(IsPrime(1));    // Expected output: False\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Returns a sorted list of unique elements from the given list.\n        /// </summary>\n        public static List<int> Unique(List<int> l)\n        {\n            var distinctElements = l.Distinct().ToList();\n            distinctElements.Sort();\n            return distinctElements;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the Unique function\n            var testList = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            var resultList = Unique(testList);\n            Console.WriteLine($\"[{string.Join(\", \", resultList)}]\");\n\n            // Expected output: [0, 2, 3, 5, 9, 123]\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n\n            // Additional test cases\n            Console.WriteLine(PrimeFib(6)); // Output: 233\n            Console.WriteLine(PrimeFib(7)); // Output: 1597\n        }\n\n        public static int PrimeFib(int n)\n        {\n            List<int> primeFibs = new List<int>();\n            int a = 0, B = 1, C = 0;\n\n            while (primeFibs.Count < n)\n            {\n                C = A + B;\n                A = B;\n                B = C;\n\n                if (IsPrime(C))\n                    primeFibs.Add(C);\n            }\n\n            return primeFibs[n - 1];\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool TriplesSumToZero(List<int> numbers)\n        {\n            for (int i = 0; i < numbers.Count - 2; i++)\n            {\n                HashSet<int> seenNumbers = new HashSet<int>();\n                int currentNumber = numbers[i];\n                int targetSum = -currentNumber;\n\n                for (int j = i + 1; j < numbers.Count; j++)\n                {\n                    if (seenNumbers.Contains(targetSum - numbers[j]))\n                    {\n                        return true;\n                    }\n                    seenNumbers.Add(numbers[j]);\n                }\n            }\n\n            return false;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool PairsSumToZero(List<int> l)\n        {\n            HashSet<int> seenNumbers = new HashSet<int>(); // Using a HashSet for efficient lookup\n            foreach (var num in l)\n            {\n                if (seenNumbers.Contains(-num)) // Check if the negation of the current number exists\n                {\n                    return true; // Found two numbers that sum to zero\n                }\n                seenNumbers.Add(num); // Add the current number to the set for future checks\n            }\n            return false; // No pairs found that sum to zero\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, -2, 1 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 2, 4, -5, 3, 5, 7 })); // True\n            Console.WriteLine(PairsSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass FibonacciCalculator {\n    // Efficiently computes the n-th element of the Fib4 sequence without recursion.\n    public static int Fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] fibArray = new int[4] { 0, 0, 2, 0 };\n        for (int i = 4; i <= n; i++) {\n            int nextValue = fibArray[1] + fibArray[2] + fibArray[3] + fibArray[0];\n            fibArray[0] = fibArray[1];\n            fibArray[1] = fibArray[2];\n            fibArray[2] = fibArray[3];\n            fibArray[3] = nextValue;\n        }\n\n        return fibArray[3];\n    }\n\n    // Test the Fib4 function with provided data points.\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Fib4(5) = \" + Fib4(5)); // Expected output: 4\n        Console.WriteLine(\"Fib4(6) = \" + Fib4(6)); // Expected output: 8\n        Console.WriteLine(\"Fib4(7) = \" + Fib4(7)); // Expected output: 14\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Calculates the median of a list of integers.\n        /// </summary>\n        /// <param name=\"l\">The list of integers.</param>\n        /// <returns>The median as an integer if the count is even, otherwise as a double.</returns>\n        public static object Median(List<int> l)\n        {\n            l.Sort();\n\n            int size = l.Count;\n            if (size % 2 == 0) // Even number of elements\n                return (l[size / 2 - 1] + l[size / 2]) / 2.0f;\n            else // Odd number of elements\n                return l[size / 2];\n        }\n\n        // Test cases\n        public static void Main()\n        {\n            Console.WriteLine(Median(new List<int> { 3, 1, 2, 4, 5 })); // Output: 3\n            Console.WriteLine(Median(new List<int> { -10, 4, 6, 1000, 10, 20 })); // Output: 15.0\n        }\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "public class Program\n{\n    // Checks if the provided string is a palindrome.\n    public static bool IsPalindrome(string text)\n    {\n        text = Regex.Replace(text, @\"[^A-Za-Z0-9]\", \"\").ToLower(); // Remove non-alphanumeric characters and convert to lowercase\n        return new string(text.Reverse().ToArray()) == text; // Reverse the string and compare with the original\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(IsPalindrome(\"\")); // True\n        Console.WriteLine(IsPalindrome(\"aba\")); // True\n        Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n        Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n    }\n}\n\nIn this solution, the `IsPalindrome` method first removes any non-alphanumeric characters from the input string and converts it to lowercase for a case-insensitive comparison. Then, it reverses the modified string and checks if it's equal to the original string. The `Main` method demonstrates how to call the `IsPalindrome` method with different test cases."}
{"task_id": "csharp/17", "language": "csharp", "completion": "csharp\npublic static string RemoveVowels(string text) \n{\n    // Define a regex pattern that matches all vowels (both lowercase and uppercase)\n    string vowelPattern = \"[aeiouAEIOU]\";\n\n    // Use the Regex.Replace method to replace all matched vowels with an empty string\n    string result = Regex.Replace(text, vowelPattern, \"\");\n\n    return result;\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 2, 4, 10 }, 100)); // Expected output: True\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 20, 4, 10 }, 5));  // Expected output: False\n\n            // Additional check function to verify correctness\n            CheckFunction();\n        }\n\n        /// <summary>\n        /// Checks if all numbers in the list are below a given threshold.\n        /// </summary>\n        /// <param name=\"numbers\">List of integers.</param>\n        /// <param name=\"threshold\">The threshold value.</param>\n        /// <returns>True if all numbers are below the threshold, otherwise False.</returns>\n        public static bool BelowThreshold(List<int> numbers, int threshold)\n        {\n            return numbers.All(number => number < threshold);\n        }\n\n        /// <summary>\n        /// Function to check the correctness of the BelowThreshold method.\n        /// </summary>\n        private static void CheckFunction()\n        {\n            Debug.Assert(BelowThreshold(new List<int> { 1, 2, 4, 10 }, 100) == true);\n            Debug.Assert(BelowThreshold(new List<int> { 1, 20, 4, 10 }, 5) == false);\n            Debug.Assert(BelowThreshold(new List<int> { -1, 0, 2, 3 }, 4) == true);\n            Debug.Assert(BelowThreshold(new List<int> { 100, 200, 300 }, 50) == false);\n\n            Console.WriteLine(\"All checks passed!\");\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "csharp\n    public static int Add(int x, int y)\n    {\n        return x + y;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine($\"Adding 2 and 3: {Add(2, 3)}\"); // Outputs: Adding 2 and 3: 5\n        Console.WriteLine($\"Adding 5 and 7: {Add(5, 7)}\"); // Outputs: Adding 5 and 7: 12\n    }"}
{"task_id": "csharp/20", "language": "csharp", "completion": "csharp\nConsole.WriteLine(SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // Outputs: True\nConsole.WriteLine(SameChars('abcd', 'dddddddabc')); // Outputs: True\nConsole.WriteLine(SameChars('dddddddabc', 'abcd')); // Outputs: True\nConsole.WriteLine(SameChars('eabcd', 'dddddddabc')); // Outputs: False\nConsole.WriteLine(SameChars('abcd', 'dddddddabce')); // Outputs: False\nConsole.WriteLine(SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // Outputs: False"}
{"task_id": "csharp/21", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Fibonacci Series:\");\n        for (int i = 0; i <= 10; i++)\n        {\n            Console.Write(Fib(i) + \" \");\n        }\n\n        // Test cases\n        Debug.Assert(Fib(10) == 55);\n        Debug.Assert(Fib(1) == 1);\n        Debug.Assert(Fib(8) == 21);\n    }\n\n    public static int Fib(int n)\n    {\n        if (n <= 1)\n            return n;\n        else\n            return Fib(n - 1) + Fib(n - 2);\n    }\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution\n{\n    public static List<int> Common(List<int> l1, List<int> l2)\n    {\n        HashSet<int> set1 = new HashSet<int>(l1);\n        HashSet<int> commonElements = new HashSet<int>();\n\n        foreach (var item in l2)\n        {\n            if (set1.Contains(item))\n            {\n                commonElements.Add(item);\n            }\n        }\n\n        List<int> sortedCommonElements = commonElements.ToList();\n        sortedCommonElements.Sort();\n\n        return sortedCommonElements;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(string.Join(\", \", Common(new List<int> { 1, 4, 3, 34, 653, 2, 5 }, new List<int> { 5, 7, 1, 5, 9, 653, 121 }))); // Output: 1, 5, 653\n        Console.WriteLine(string.Join(\", \", Common(new List<int> { 5, 3, 2, 8 }, new List<int> { 3, 2 }))); // Output: 2, 3\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static int LargestPrimeFactor(int n)\n        {\n            int largest = -1;\n\n            // Divide by 2 to find even prime factors\n            while (n % 2 == 0)\n            {\n                largest = 2;\n                n /= 2;\n            }\n\n            // n must be odd at this point, so we can skip one element (Note i = i +2)\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            {\n                // While i divides n, print i and divide n\n                while (n % i == 0)\n                {\n                    largest = i;\n                    n /= i;\n                }\n            }\n\n            // This condition is to handle the case when n is a prime number greater than 2\n            if (n > 2)\n                largest = n;\n\n            return largest;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n            Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static int SumToN(int n) \n    {\n        if (n <= 0) \n        {\n            return 0;\n        } \n        else \n        {\n            return n + SumToN(n - 1);\n        }\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(SumToN(30));  // Output: 465\n        Console.WriteLine(SumToN(100)); // Output: 5050\n        Console.WriteLine(SumToN(5));   // Output: 15\n        Console.WriteLine(SumToN(10));  // Output: 55\n        Console.WriteLine(SumToN(1));   // Output: 1\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // This method calculates the derivative of a polynomial represented by its coefficients\n        public static List<int> Derivative(List<int> xs)\n        {\n            // if the list is empty or contains only one element, there's no derivative to calculate.\n            if (xs == null || xs.Count <= 1)\n                return new List<int>();\n\n            // Calculate the derivative coefficients\n            List<int> derivativeCoefficients = xs.Select((coefficient, index) => coefficient * index).Skip(1).ToList();\n\n            return derivativeCoefficients;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine($\"Derivative([3, 1, 2, 4, 5]): [{string.Join(\", \", Derivative(new List<int> { 3, 1, 2, 4, 5 }))}]\");\n            Console.WriteLine($\"Derivative([1, 2, 3]): [{string.Join(\", \", Derivative(new List<int> { 1, 2, 3 }))}]\");\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the Fibfib function\n            Console.WriteLine(Fibfib(1)); // Expected output: 0\n            Console.WriteLine(Fibfib(5)); // Expected output: 4\n            Console.WriteLine(Fibfib(8)); // Expected output: 24\n\n            // Additional test cases\n            Console.WriteLine(Fibfib(10)); // Expected output: 81\n            Console.WriteLine(Fibfib(13)); // Expected output: 292\n        }\n\n        /// <summary>\n        /// Efficiently computes the n-th element of the FibFib sequence.\n        /// </summary>\n        public static int Fibfib(int n)\n        {\n            if (n <= 1) return 0;\n            if (n == 2) return 1;\n\n            int a = 0, B = 0, C = 1, D = 1;\n\n            for (int i = 3; i <= n; i++)\n            {\n                D = A + B + C;\n                A = B;\n                B = C;\n                C = D;\n            }\n\n            return D;\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static int VowelsCount(string s) {\n        int count = 0;\n        string vowels = \"aeiou\";\n        foreach (char c in s.ToLower()) {\n            if (vowels.Contains(c)) {\n                count++;\n            }\n        }\n        // Check if 'y' is at the end and treat it as a vowel\n        if (s.EndsWith('y') || s.EndsWith('Y')) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n        Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n        Console.WriteLine(VowelsCount(\"rhythm\")); // Output: 0\n        Console.WriteLine(VowelsCount(\"SYZYGY\")); // Output: 1\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static int Search(List<int> lst)\n        {\n            var grouped = lst.GroupBy(x => x).Where(g => g.Count() >= g.Key);\n            return grouped.Any() ? grouped.Max(g => g.Key) : -1;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // Output: 2\n            Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Output: 3\n            Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Solution {\n    public static double TriangleArea(int a, int B, int C) {\n        // Check if the given sides form a valid triangle\n        if (A + B <= C || A + C <= B || B + C <= A) {\n            return -1.0; // Return -1 if it's not a valid triangle\n        }\n\n        // Calculate semi-perimeter of the triangle\n        double s = (A + B + C) / 2.0;\n\n        // Calculate the area using Heron's formula\n        double area = Math.Sqrt(s * (s - A) * (s - B) * (s - C));\n\n        return Math.Round(area, 2); // Return the area rounded to 2 decimal places\n    }\n}\n\n// Example usage:\npublic static void Main() {\n    Console.WriteLine(Solution.TriangleArea(3, 4, 5)); // Output: 6.00\n    Console.WriteLine(Solution.TriangleArea(1, 2, 10)); // Output: -1\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // Check if the list is palindromic\n            bool isPalindrome = q.SequenceEqual(q.AsEnumerable().Reverse());\n\n            // Calculate the sum of elements in the list\n            int sumOfElements = q.Sum();\n\n            // Check if the list is palindromic and the sum is less than or equal to w\n            return isPalindrome && sumOfElements <= w;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // Output: False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // Output: False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // Output: True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // Output: True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "csharp\nusing System;\n\npublic class Program\n{\n    private const int MaxPrime = 100;\n\n    public static bool IsMultiplyPrime(int a)\n    {\n        if (A < 2 || A > MaxPrime) return false; // Check if number is within valid range\n\n        for (int i = 2; i <= MaxPrime; i++)\n        {\n            if (IsPrime(i))\n            {\n                if (A % i == 0)\n                {\n                    // Check if the remaining number can be divided by other primes\n                    int quotient = A / i;\n                    for (int j = i + 1; j <= MaxPrime; j++)\n                    {\n                        if (IsPrime(j) && quotient % j == 0)\n                        {\n                            // Found two primes whose product equals the given number\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false; // No combination of prime numbers found that equals A\n    }\n\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true; // Number is prime\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static string DecimalToBinary(int decimalNumber)\n        {\n            // Convert the given decimal number to binary using built-in method\n            string binaryString = Convert.ToString(decimalNumber, 2);\n\n            // Add 'db' prefix and suffix to the resulting binary string\n            return $\"db{binaryString}db\";\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(DecimalToBinary(15)); // Output: db1111db\n            Console.WriteLine(DecimalToBinary(32)); // Output: db100000db\n        }\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsHappy(\"a\")); // Output: False\n            Console.WriteLine(IsHappy(\"aa\")); // Output: False\n            Console.WriteLine(IsHappy(\"abcd\")); // Output: True\n            Console.WriteLine(IsHappy(\"Aabb\")); // Output: False\n            Console.WriteLine(IsHappy(\"adb\")); // Output: True\n            Console.WriteLine(IsHappy(\"xyy\")); // Output: False\n        }\n\n        static bool IsHappy(string s)\n        {\n            if (s.Length < 3) return false;\n\n            for (int i = 0; i < s.Length - 2; i++)\n            {\n                if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<double> grades)\n        {\n            var letterGrades = new List<string>();\n\n            foreach (var gpa in grades)\n            {\n                if (gpa >= 4.0)\n                    letterGrades.Add(\"A+\");\n                else if (gpa > 3.7)\n                    letterGrades.Add(\"A\");\n                else if (gpa > 3.3)\n                    letterGrades.Add(\"A-\");\n                else if (gpa > 3.0)\n                    letterGrades.Add(\"B+\");\n                else If (gpa > 2.7)\n                    letterGrades.Add(\"B\");\n                else If (gpa > 2.3)\n                    letterGrades.Add(\"B-\");\n                else If (gpa > 2.0)\n                    letterGrades.Add(\"C+\");\n                else If (gpa > 1.7)\n                    letterGrades.Add(\"C\");\n                else If (gpa > 1.3)\n                    letterGrades.Add(\"C-\");\n                else If (gpa > 1.0)\n                    letterGrades.Add(\"D+\");\n                else If (gpa > 0.7)\n                    letterGrades.Add(\"D\");\n                else If (gpa > 0.0)\n                    letterGrades.Add(\"D-\");\n                else\n                    letterGrades.Add(\"E\");\n            }\n\n            return letterGrades;\n        }\n\n        static void Main(string[] args)\n        {\n            var grades = new List<double> { 4.0, 3, 1.7, 2, 3.5 };\n            var result = NumericalLetterGrade(grades);\n            foreach (var grade in result)\n            {\n                Console.WriteLine(grade);\n            }\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(PrimeLength(\"Hello\")); // True\n        Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n        Console.WriteLine(PrimeLength(\"kittens\")); // True\n        Console.WriteLine(PrimeLength(\"orange\")); // False\n\n        // Test cases\n        Debug.Assert(PrimeLength(\"Hello\") == true);\n        Debug.Assert(PrimeLength(\"abcdcba\") == true);\n        Debug.Assert(PrimeLength(\"kittens\") == true);\n        Debug.Assert(PrimeLength(\"orange\") == false);\n    }\n\n    static bool PrimeLength(string input)\n    {\n        int length = input.Length;\n\n        if (length <= 1) return false;\n        if (length == 2) return true;\n        if (length % 2 == 0) return false;\n\n        for (int i = 3; i * i <= length; i += 2)\n        {\n            if (length % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(Solve(1000)); // Output: \"1\"\n        Console.WriteLine(Solve(150));  // Output: \"110\"\n        Console.WriteLine(Solve(147));  // Output: \"1100\"\n    }\n\n    public static string Solve(int N)\n    {\n        // Convert the integer to a string of its digits\n        string digitString = N.ToString();\n\n        // Sum the digits\n        int sumOfDigits = digitString.Sum(digit => int.Parse(digit.ToString()));\n\n        // Convert the sum to binary and return it as a string\n        return Convert.ToString(sumOfDigits, 2);\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<List<int>> GetRow(List<List<int>> lst, int x) {\n        List<Tuple<int, int>> coordinates = new List<Tuple<int, int>>();\n\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coordinates.Add(Tuple.Create(i, j));\n                }\n            }\n        }\n\n        return coordinates.OrderByDescending(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n\n    static void Main(string[] args) {\n        // Test cases\n        var result1 = GetRow(new List<List<int>> {\n            new List<int> { 1, 2, 3, 4, 5, 6 },\n            new List<int> { 1, 2, 3, 4, 1, 6 },\n            new List<int> { 1, 2, 3, 4, 5, 1 }\n        }, 1);\n\n        var result2 = GetRow(new List<List<int>>(), 1);\n\n        var result3 = GetRow(new List<List<int>> {\n            new List<int>(),\n            new List<int> { 1 },\n            new List<int> { 1, 2, 3 }\n        }, 3);\n\n        Console.WriteLine($\"Result 1: {string.Join(\", \", result1)}\");\n        Console.WriteLine($\"Result 2: {string.Join(\", \", result2)}\");\n        Console.WriteLine($\"Result 3: {string.Join(\", \", result3)}\");\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int? NextSmallest(List<int> lst) {\n        if (lst == null || lst.Count < 2) return null; // Check if the list is empty or has less than 2 elements\n\n        // Remove duplicates and sort the list\n        var distinctSortedLst = lst.Distinct().OrderBy(x => x).ToList();\n\n        return distinctSortedLst.Count > 1 ? distinctSortedLst[1] : (int?)null; // Return the second element if it exists, otherwise return null\n    }\n\n    static void Main() {\n        Console.WriteLine(NextSmallest(new List<int>{1, 2, 3, 4, 5})); // Output: 2\n        Console.WriteLine(NextSmallest(new List<int>{5, 1, 4, 3, 2})); // Output: 2\n        Console.WriteLine(NextSmallest(new List<int>{})); // Output: null\n        Console.WriteLine(NextSmallest(new List<int>{1, 1})); // Output: null\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "public class Program\n{\n    public static int IsBored(string input)\n    {\n        // Split the string into sentences based on '.', '?' or '!' delimiters.\n        var sentences = Regex.Split(input, @\"[.?!]\\s*\").Where(sentence => sentence != \"\").ToArray();\n\n        int boredCount = 0;\n\n        foreach (var sentence in sentences)\n        {\n            // Check if the first word of the sentence is \"I\" or \"Ich\".\n            if (Regex.IsMatch(sentence, @\"^(I|Ich)\\b\"))\n            {\n                boredCount++;\n            }\n        }\n\n        return boredCount;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n        Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n    }\n}\nIn the given code, the `IsBored` method takes a string as input and splits it into sentences using regular expressions. It then iterates through each sentence and increments the `boredCount` if the first word of the sentence is \"I\" or \"Ich\". The `Main` method demonstrates how to call the `IsBored` method with example strings and prints the result."}
{"task_id": "csharp/40", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static int Skjkasdkd(List<int> lst)\n        {\n            int maxPrime = 0;\n\n            foreach (var number in lst.Where(n => IsPrime(n)))\n            {\n                maxPrime = Math.Max(maxPrime, number);\n            }\n\n            return maxPrime.ToString().Sum(c => c - '0'); // Convert the largest prime number to string and sum its digits\n        }\n\n        // Main method for testing purposes\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 })); // Output: 10\n            Console.WriteLine(Skjkasdkd(new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 })); // Output: 25\n            Console.WriteLine(Skjkasdkd(new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 })); // Output: 13\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 })); // Output: 11\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 81, 12, 3, 1, 21 })); // Output: 3\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 8, 1, 2, 1, 7 })); // Output: 7\n        }\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Determines if all keys in a dictionary are either lowercase or uppercase strings.\n        /// Returns false for an empty dictionary or if any key is not a string.\n        /// </summary>\n        public static bool CheckDictCase(Dictionary<object, string> dict) \n        {\n            if (dict == null || dict.Count == 0) return false;\n\n            bool? isLowercase = null;\n            foreach (var key in dict.Keys)\n            {\n                string lowerKey = Convert.ToString(key)?.ToLower();\n                string upperKey = Convert.ToString(key)?.ToUpper();\n\n                if (!lowerKey.Equals(upperKey)) // Not a string or case mismatch\n                    return false;\n\n                if (IsLowercase == null) // First iteration, initialize with current key's case\n                    IsLowercase = lowerKey == upperKey;\n            }\n\n            return true;\n        }\n\n        // Test the function with provided examples\n        public static void Main()\n        {\n            var testCases = new Dictionary<object, string>[] {\n                new Dictionary<object, string>{{\"A\", \"apple\"}, {\"b\", \"banana\"}},\n                new Dictionary<object, string>{{\"A\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}},\n                new Dictionary<object, string>{{\"A\", \"apple\"}, {8, \"banana\"}, {\"A\", \"apple\"}},\n                new Dictionary<object, string>{{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}},\n                new Dictionary<object, string>{{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}\n            };\n\n            foreach (var testCase in testCases)\n            {\n                Console.WriteLine($\"CheckDictCase({FormatDictionary(testCase)}) -> {CheckDictCase(testCase)}\");\n            }\n        }\n\n        private static string FormatDictionary(Dictionary<object, string> dict)\n        {\n            return \"{\" + string.Join(\", \", dict.Select(kv => $\"\\\"{kv.Key}\\\": \\\"{kv.Value}\\\"\")) + \"}\";\n        }\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ClosestInteger(\"10\")); // Output: 10\n            Console.WriteLine(ClosestInteger(\"15.3\")); // Output: 15\n            Console.WriteLine(ClosestInteger(\"14.5\")); // Output: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\")); // Output: -15\n        }\n\n        public static int ClosestInteger(string value)\n        {\n            double number = Convert.ToDouble(value);\n            int roundedNumber = (int)Math.Round(number, MidpointRounding.AwayFromZero);\n            return roundedNumber;\n        }\n    }\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MakeAPile(int n)\n        {\n            List<int> pile = new List<int>();\n            int currentStones = n;\n            for (int i = 0; i < n; i++)\n            {\n                pile.Add(currentStones);\n                // If the current number of stones is even, add 2 for the next odd number\n                if (currentStones % 2 == 0)\n                {\n                    currentStones += 1;\n                }\n                // If the current number of stones is odd, add 2 for the next even number\n                else\n                {\n                    currentStones += 2;\n                }\n            }\n            return pile;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> result = MakeAPile(3);\n            Console.WriteLine($\"[ {string.Join(\", \", result)} ]\");\n            // Output: [ 3, 5, 7 ]\n        }\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> WordsString(string s)\n        {\n            if (string.IsNullOrEmpty(s))\n            {\n                return new List<string>();\n            }\n\n            char[] delimiters = new char[] { ',', ' ' };\n            List<string> words = s.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).ToList();\n\n            return words;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(string.Join(\", \", WordsString(\"Hi, My name is John\"))); // Output: Hi, my, name, is, John\n            Console.WriteLine(string.Join(\", \", WordsString(\"One, two, three, four, five, six\"))); // Output: One, two, three, four, five, six\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "csharp\npublic static int ChooseNum(int x, int y) \n{\n    if (x % 2 == 0) // Check if 'x' is even\n    {\n        return y - 1; // Return the largest even number smaller than 'y'\n    }\n    else // If 'x' is odd\n    {\n        return y; // The largest even number in this range is 'y' itself\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object RoundedAvg(int n, int m)\n        {\n            if (n > m) return -1;\n\n            // Sum of numbers from n to m\n            long sum = Enumerable.Range(n, m - n + 1).Sum();\n            // Average calculation\n            double average = sum / (double)(m - n + 1);\n            // Rounding the average to the nearest integer\n            int roundedAverage = Convert.ToInt32(Math.Round(average));\n\n            // Converting the rounded average to binary format\n            return $\"0b{Convert.ToString(roundedAverage, 2)}\";\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // Expected output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // Expected output: -1\n            Console.WriteLine(RoundedAvg(10, 20)); // Expected output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // Expected output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<int> F(int n) {\n        List<int> result = new List<int>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) { // Check if the number is even\n                result.Add(Factorial(i));\n            } else { // The number is odd\n                result.Add(SumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private static int Factorial(int num) {\n        int factorial = 1;\n        for (int i = 2; i <= num; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private static int SumOfNumbers(int num) {\n        return Enumerable.Range(1, num).Sum();\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass PalindromeCounter {\n    public static Tuple<int, int> EvenOddPalindrome(int n) {\n        int evenCount = 0, oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Tuple.Create(evenCount, oddCount);\n    }\n\n    private static bool IsPalindrome(int number) {\n        string numStr = number.ToString();\n        return numStr.SequenceEqual(numStr.Reverse());\n    }\n\n    // Test the function with provided examples\n    public static void Main() {\n        Console.WriteLine(EvenOddPalindrome(3)); // Output: (1, 2)\n        Console.WriteLine(EvenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool MoveOneBall (List<int> arr) \n    {\n        if (arr == null || arr.Count <= 1) return true;\n\n        for (int i = 0; i < arr.Count; i++)\n        {\n            bool isSorted = IsNonDecreasing(arr);\n            if (IsSorted) return true;\n\n            // Perform a right shift operation\n            int lastElement = arr[arr.Count - 1];\n            for (int j = arr.Count - 1; j > 0; j--)\n            {\n                arr[j] = arr[j - 1];\n            }\n            arr[0] = lastElement;\n        }\n\n        return false;\n    }\n\n    private static bool IsNonDecreasing(List<int> arr)\n    {\n        for (int i = 1; i < arr.Count; i++)\n        {\n            if (arr[i] < arr[i - 1]) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Count the number of odd numbers in lst1\n            int oddCountInLst1 = lst1.Count(num => num % 2 != 0);\n\n            // Check if there are enough even numbers in both lists to replace all odd numbers in lst1\n            if (lst1.Count + lst2.Count >= 2 * oddCountInLst1)\n            {\n                return \"YES\"; // It is possible to exchange elements to make all numbers in lst1 even\n            }\n            else\n            {\n                return \"NO\"; // It is not possible to exchange elements to make all numbers in lst1 even\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Output: \"YES\"\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Output: \"NO\"\n        }\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static Tuple<string, bool> ReverseDelete(string s, string c)\n        {\n            // Remove all characters from 's' that match any character in 'c'\n            string result = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n\n            // Check if the resulting string is a palindrome\n            bool isPalindrome = IsPalindrome(result);\n\n            return Tuple.Create(result, isPalindrome);\n        }\n\n        private static bool IsPalindrome(string str)\n        {\n            int left = 0;\n            int right = str.Length - 1;\n\n            while (left < right)\n            {\n                if (str[left] != str[right])\n                {\n                    return false;\n                }\n\n                left++;\n                right--;\n            }\n\n            return true;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            var result1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"({result1.Item1}, {result1.Item2})\"); // Output: (bcd, False)\n\n            var result2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"({result2.Item1}, {result2.Item2})\"); // Output: (acdef, False)\n\n            var result3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"({result3.Item1}, {result3.Item2})\"); // Output: (cdedc, True)\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "csharp\npublic static int MaxFill(List<List<int>> grid, int capacity) \n{\n    // Initialize a variable to keep track of the total number of bucket lowerings needed\n    int lowerings = 0;\n    \n    // Iterate through each row in the grid\n    for (int i = 0; i < grid.Count; i++)\n    {\n        List<int> row = grid[i];\n        // Calculate the total units of water in the current well using LINQ's Sum function\n        int rowSum = row.Sum();\n        \n        // Check if there are any units of water in the current well\n        if (rowSum > 0)\n        {\n            // If so, calculate how many times the bucket needs to be lowered\n            // by dividing the total units of water by the bucket capacity and rounding up\n            lowerings += (int)Math.Ceiling((double)rowSum / capacity);\n        }\n    }\n    \n    // Return the total number of lowerings needed for all wells\n    return lowerings;\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class WordSelector\n{\n    // This function returns a list of words from the string s that contain exactly n consonants,\n    // in the order they appear in the string s. It returns an empty list if the input string is empty.\n    public static List<string> SelectWords(string s, int n)\n    {\n        if (string.IsNullOrEmpty(s))\n        {\n            return new List<string>();\n        }\n\n        var words = s.Split(' ');\n        var result = new List<string>();\n\n        foreach (var word in words)\n        {\n            int consonantCount = word.Count(c => \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".Contains(c));\n            if (consonantCount == n)\n            {\n                result.Add(word);\n            }\n        }\n\n        return result;\n    }\n\n    // Example usage:\n    public static void Main()\n    {\n        var words1 = SelectWords(\"Mary had a little lamb\", 4);\n        Console.WriteLine($\"Result 1: [{string.Join(\", \", words1)}]\"); // Output: [little]\n\n        var words2 = SelectWords(\"Mary had a little lamb\", 3);\n        Console.WriteLine($\"Result 2: [{string.Join(\", \", words2)}]\"); // Output: [Mary, lamb]\n\n        var words3 = SelectWords(\"simple white space\", 2);\n        Console.WriteLine($\"Result 3: [{string.Join(\", \", words3)}]\"); // Output: []\n\n        var words4 = SelectWords(\"Hello world\", 4);\n        Console.WriteLine($\"Result 4: [{string.Join(\", \", words4)}]\"); // Output: [world]\n\n        var words5 = SelectWords(\"Uncle sam\", 3);\n        Console.WriteLine($\"Result 5: [{string.Join(\", \", words5)}]\"); // Output: [Uncle]\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "csharp\nvar result1 = Maximum(new List<int>{-3, -4, 5}, 3); // Output: [-4, -3, 5]\nvar result2 = Maximum(new List<int>{4, -4, 4}, 2);  // Output: [4, 4]\nvar result3 = Maximum(new List<int>{-3, 2, 1, 2, -1, -2, 1}, 1); // Output: [2]"}
{"task_id": "csharp/55", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int AddElements(List<int> arr, int k)\n    {\n        int sum = 0;\n        for (int i = 0; i < Math.Min(k, arr.Count); i++)\n        {\n            if (arr[i] >= -99 && arr[i] <= 99)\n            {\n                sum += arr[i];\n            }\n        }\n\n        return sum;\n    }\n\n    public static void Main()\n    {\n        List<int> arr = new List<int> {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n        int k = 4;\n        Console.WriteLine(AddElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Intersection(new List<int> {1, 2}, new List<int> {2, 3})); // Output: \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-1, 1}, new List<int> {0, 4})); // Output: \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-3, -1}, new List<int> {-5, 5})); // Output: \"YES\"\n        }\n\n        public static string Intersection (List<int> interval1, List<int> interval2) \n        {\n            int start = Math.Max(interval1[0], interval2[0]);\n            int end = Math.Min(interval1[1], interval2[1]);\n\n            if (start > end)\n                return \"NO\";\n\n            int length = end - start + 1;\n\n            if (IsPrime(length))\n                return \"YES\";\n            else\n                return \"NO\";\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Tri(int n)\n        {\n            List<int> tribonacciSequence = new List<int>();\n\n            // Initializing the first three numbers of the sequence\n            tribonacciSequence.Add(1);\n            if (n > 0)\n            {\n                tribonacciSequence.Add(3);\n            }\n            if (n > 1)\n            {\n                tribonacciSequence.Add(2);\n            }\n\n            // Generating the rest of the sequence\n            for (int i = 2; i <= n; i++)\n            {\n                int nextTerm;\n                if (i % 2 == 0) // If n is even\n                {\n                    nextTerm = tribonacciSequence[i - 1] + 1;\n                }\n                else // If n is odd\n                {\n                    nextTerm = tribonacciSequence[i - 3] + tribonacciSequence[i - 2] + tribonacciSequence[i - 1];\n                }\n                tribonacciSequence.Add(nextTerm);\n            }\n\n            return tribonacciSequence;\n        }\n\n        public static void Main()\n        {\n            List<int> result = Tri(3);\n            Console.WriteLine(\"Tri(3) = \" + string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Digits(1));   // Output: 1\n            Console.WriteLine(Digits(4));   // Output: 0\n            Console.WriteLine(Digits(235)); // Output: 15\n\n            Console.ReadLine();\n        }\n\n        /// <summary> \n        /// Digits returns the product of odd digits in the given positive integer n.\n        /// Returns 0 if all digits are even.\n        /// </summary>\n        public static int Digits(int n)\n        {\n            int product = 1;\n            bool hasOdd = false;\n\n            while (n > 0)\n            {\n                int digit = n % 10;\n                if (digit % 2 != 0)\n                {\n                    product *= digit;\n                    hasOdd = true;\n                }\n                n /= 10;\n            }\n\n            return hasOdd ? product : 0;\n        }\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsNested(string bracketString)\n        {\n            // Initialize counter for nested brackets\n            int nestingLevel = 0;\n            bool hasNestedBrackets = false;\n\n            foreach (char c in bracketString)\n            {\n                if (c == '[')\n                {\n                    nestingLevel++;\n                    // If we have more than one level of nesting, it means there is at least one nested bracket\n                    if (nestingLevel > 1)\n                    {\n                        hasNestedBrackets = true;\n                    }\n                }\n                else if (c == ']')\n                {\n                    nestingLevel--;\n                    // If we reach the end of a nested level and it was more than one level deep, we have found a valid nesting\n                    if (nestingLevel >= 1)\n                    {\n                        return true;\n                    }\n                }\n            }\n\n            // If we had at least one nested bracket but never reached the end of a valid nested structure, return false\n            return hasNestedBrackets && nestingLevel == 0;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsNested(\"[[]]\")); // Expected: True\n            Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // Expected: False\n            Console.WriteLine(IsNested(\"[][]\")); // Expected: False\n            Console.WriteLine(IsNested(\"[]\")); // Expected: False\n            Console.WriteLine(IsNested(\"[[][]]\")); // Expected: True\n            Console.WriteLine(IsNested(\"[[]][[\")); // Expected: True\n        }\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int SumSquares(List<object> lst) {\n        return (int)Math.Round(lst.Select(x => Math.Pow((double)Math.Ceiling(Convert.ToDouble(x)), 2)).Sum());\n    }\n\n    static void Main() {\n        Console.WriteLine(SumSquares(new List<object>{1, 2, 3})); // Output: 14\n        Console.WriteLine(SumSquares(new List<object>{1, 4, 9})); // Output: 98\n        Console.WriteLine(SumSquares(new List<object>{1, 3, 5, 7})); // Output: 84\n        Console.WriteLine(SumSquares(new List<object>{1.4, 4.2, 0})); // Output: 29\n        Console.WriteLine(SumSquares(new List<object>{-2.4, 1, 1})); // Output: 6\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            if (string.IsNullOrWhiteSpace(txt))\n            {\n                return false;\n            }\n\n            char lastChar = txt.Trim().Last();\n            return char.IsLetter(lastChar);\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // \u279e False\n        }\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int CanArrange(List<int> arr)\n    {\n        for (int i = arr.Count - 1; i > 0; i--)\n        {\n            if (arr[i] < arr[i - 1])\n            {\n                return i;\n            }\n        }\n\n        return -1; // No such element found\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Output: 3\n        Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 })); // Output: -1\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static Tuple<Nullable<int>, Nullable<int>> LargestSmallestIntegers(List<int> lst)\n        {\n            var negativeNumbers = lst.Where(n => n < 0).DefaultIfEmpty().ToList();\n            var positiveNumbers = lst.Where(n => n > 0).DefaultIfEmpty().ToList();\n\n            Nullable<int> largestNegative = null;\n            if (negativeNumbers.Count > 0)\n            {\n                largestNegative = negativeNumbers.Max();\n            }\n\n            Nullable<int> smallestPositive = null;\n            if (positiveNumbers.Count > 0)\n            {\n                smallestPositive = positiveNumbers.Min();\n            }\n\n            return Tuple.Create(largestNegative, smallestPositive);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 2, 4, 1, 3, 5, 7 })); // Output: (null, 1)\n            Console.WriteLine(LargestSmallestIntegers(new List<int>())); // Output: (null, null)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 0 })); // Output: (null, null)\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "csharp\nConsole.WriteLine(SpecialFactorial(4));  // Output: 288"}
{"task_id": "csharp/65", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    public static string WordsInSentence(string sentence)\n    {\n        var words = sentence.Split(' ');\n        var primeWords = words.Where(IsPrimeLength).ToArray();\n        return String.Join(\" \", primeWords);\n    }\n\n    private static bool IsPrimeLength(string word)\n    {\n        int length = word.Length;\n        if (length <= 1) return false;\n        for (int i = 2; i * i <= length; i++)\n        {\n            if (length % i == 0) return false;\n        }\n        return true;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(WordsInSentence(\"This is a test\")); // Output: \"is\"\n        Console.WriteLine(WordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool Simplify(string x, string n)\n    {\n        // Split the fractions into numerator and denominator using '/'\n        var fractionX = x.Split('/').Select(int.Parse).ToArray();\n        var fractionN = n.Split('/').Select(int.Parse).ToArray();\n\n        // Check if both fractions are valid (i.e., they have non-zero denominators)\n        if (fractionX[1] != 0 && fractionN[1] != 0)\n        {\n            // Calculate the product of the numerators and denominators separately\n            int numeratorProduct = fractionX[0] * fractionN[0];\n            int denominatorProduct = fractionX[1] * fractionN[1];\n\n            // Check if the product of the numerators is divisible by the product of the denominators\n            return numeratorProduct % denominatorProduct == 0;\n        }\n\n        return false; // If any fraction has a zero denominator, return false\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n        Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n        Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Sort a given list of integers in ascending order based on the sum of their digits.\n        /// If there are multiple elements with the same digit sum, sort them based on their index in the original list.\n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            return nums\n                .Select((num, index) => new { Num = num, Index = index, DigitSum = num.ToString().Where(char.IsDigit).Sum(c => c - '0') })\n                .OrderBy(item => item.DigitSum)\n                .ThenBy(item => item.Index)\n                .Select(item => item.Num)\n                .ToList();\n        }\n\n        // Example usage\n        public static void Main()\n        {\n            var result1 = OrderByPoints(new List<int> { 1, 11, -1, -11, -12 });\n            Console.WriteLine($\"OrderByPoints([1, 11, -1, -11, -12]) => [{string.Join(\", \", result1)}]\");\n\n            var result2 = OrderByPoints(new List<int>());\n            Console.WriteLine($\"OrderByPoints([]) => [{string.Join(\", \", result2)}]\");\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SpecialFilter(List<int> nums)\n        {\n            // Filter the list to include only numbers greater than 10 and where both first and Last digits are odd\n            var filteredNums = nums.Where(n => n > 10 && IsFirstAndLastDigitOdd(Math.Abs(n)));\n\n            // Return the count of elements in the filtered list\n            return filteredNums.Count();\n        }\n\n        private static bool IsFirstAndLastDigitOdd(int number)\n        {\n            string numStr = number.ToString();\n            char firstDigit = numStr[0];\n            char LastDigit = numStr[numStr.Length - 1];\n\n            return IsDigitOdd(FirstDigit) && IsDigitOdd(LastDigit);\n        }\n\n        private static bool IsDigitOdd(char digit)\n        {\n            return \"13579\".Contains(digit);\n        }\n\n        public static void Main()\n        {\n            // Test the function with provided data points\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Expected output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Expected output: 2\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "Eingabe: n = 5\nAusgabe: 1\nErkl\u00e4rung:\nA = [1, 3, 7, 13, 21]\nDas einzige g\u00fcltige Tripel ist (1, 7, 13)."}
{"task_id": "csharp/70", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static Tuple<string, string> Bf(string planet1, string planet2) {\n        // List of planets in order from closest to furthest from the sun\n        List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\n        // Check if both planet names are valid\n        if (!planets.Contains(planet1) || !planets.Contains(planet2)) {\n            return Tuple.Create<string, string>(\"\", \"\");\n        }\n\n        // Find the indexes of the planets in the list\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\n        // Ensure index1 is less than index2 for correct range selection\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Get the sublist of planets between planet1 and planet2, exclusive\n        List<string> inBetweenPlanets = planets.GetRange(index1 + 1, index2 - index1 - 1);\n\n        return Tuple.Create<string, string>(InBetweenPlanets[0], InBetweenPlanets[^1]);\n    }\n}\n\nclass Program {\n    static void Main() {\n        // Test cases\n        Console.WriteLine(Problem.Bf(\"Jupiter\", \"Neptune\")); // Expected output: (\"Saturn\", \"Uranus\")\n        Console.WriteLine(Problem.Bf(\"Earth\", \"Mercury\"));  // Expected output: (\"Venus\")\n        Console.WriteLine(Problem.Bf(\"Mercury\", \"Uranus\")); // Expected output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Ein einfaches Programm, das den Wert von x zur\u00fcckgeben sollte, wenn n eine Primzahl ist, und den Wert von y zur\u00fcckgeben sollte, wenn nicht.\n        /// </summary>\n        public static int XOrY(int n, int x, int y) \n        {\n            if (IsPrime(n))\n            {\n                return x;\n            }\n            else\n            {\n                return y;\n            }\n        }\n\n        /// <summary>\n        /// Helper-Methode zur \u00dcberpr\u00fcfung, ob ein Zahl eine Primzahl ist.\n        /// </summary>\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        // Testfunktion zum \u00dcberpr\u00fcfen der korrekten Funktionalit\u00e4t.\n        public static void Main()\n        {\n            Debug.Assert(XOrY(7, 34, 12) == 34);\n            Debug.Assert(XOrY(15, 8, 5) == 5);\n\n            Console.WriteLine(\"Alle Testf\u00e4lle bestehen.\");\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int DoubleTheDifference(List<object> lst)\n    {\n        if (lst == null || !lst.Any()) return 0;\n\n        return lst\n            .OfType<int>() // Convert all objects to integers and filter out non-integers\n            .Where(x => x > 0 && x % 2 != 0) // Keep only positive, odd numbers\n            .Select(x => x * x * 2) // Square each number and double the result\n            .Sum(); // Sum up all squared, doubled odd numbers\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(DoubleTheDifference(new List<object> {1, 3, 2, 0})); // Output: 10\n        Console.WriteLine(DoubleTheDifference(new List<object> {-1, -2, 0})); // Output: 0\n        Console.WriteLine(DoubleTheDifference(new List<object> {9, -2})); // Output: 81\n        Console.WriteLine(DoubleTheDifference(new List<object> {0})); // Output: 0\n\n        // Test with an empty list\n        Console.WriteLine(DoubleTheDifference(new List<object>())); // Output: 0\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StrongestExtension(string class_name, List<string> extensions)\n        {\n            if (extensions == null || !extensions.Any())\n                return class_name + \".\"; // Return the class name followed by a dot if no extensions are provided\n\n            var strongestExtension = \"\";\n            int maxStrength = int.MinValue; // Initialize with minimum possible integer value\n\n            foreach (var extension in extensions)\n            {\n                // Calculate the strength of each extension based on uppercase and lowercase letters\n                int uppercaseCount = extension.Count(char.IsUpper);\n                int lowercaseCount = extension.Length - uppercaseCount;\n                int strength = uppercaseCount - lowercaseCount;\n\n                // If the current strength is greater than the maximum found so far, update the strongestExtension and maxStrength\n                if (strength > maxStrength)\n                {\n                    strongestExtension = extension;\n                    maxStrength = strength;\n                }\n            }\n\n            return $\"{class_name}.{strongestExtension}\"; // Return the class name followed by the strongest extension found\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Expected: Slices.SErviNGSliCes\n            Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // Expected: myClass.AA\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // Outputs False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // Outputs True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // Outputs False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // Outputs True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // Outputs False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // Outputs True\n\n            // Call the function in a loop or wherever it is needed\n        }\n\n        public static bool CycpatternCheck (string A, string B) \n        {\n            if (B.Length > A.Length) return false;\n\n            var rotations = new List<string>();\n            for (int i = 0; i < B.Length; i++)\n            {\n                rotations.Add(B.Substring(i) + B.Substring(0, i));\n            }\n\n            return rotations.Any(r => A.Contains(r));\n        }\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    public static string IntToMiniRoman(int number)\n    {\n        if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"Number must be between 1 and 1000, inclusive.\");\n\n        var map = new Dictionary<int, string>\n        {\n            { 1000, \"m\" }, { 900, \"cm\" }, { 500, \"d\" }, { 400, \"cd\" },\n            { 100, \"c\" }, { 90, \"xc\" }, { 50, \"l\" }, { 40, \"xl\" },\n            { 10, \"x\" }, { 9, \"ix\" }, { 5, \"v\" }, { 4, \"iv\" }, { 1, \"i\" }\n        };\n\n        var roman = new StringBuilder();\n\n        foreach (var item in map)\n        {\n            while (number >= item.Key)\n            {\n                roman.Append(item.Value);\n                number -= item.Key;\n            }\n        }\n\n        return roman.ToString();\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(IntToMiniRoman(19));  // Output: xix\n        Console.WriteLine(IntToMiniRoman(152)); // Output: clii\n        Console.WriteLine(IntToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    public static bool RightAngleTriangle(int sideA, int sideB, int sideC)\n    {\n        // Sort the sides to simplify comparison\n        var sides = new List<int> { sideA, sideB, sideC };\n        sides.Sort();\n\n        // Check if the square of the longest side is equal to the sum of squares of the other two sides\n        return Math.Pow(sides[2], 2) == (Math.Pow(sides[0], 2) + Math.Pow(sides[1], 2));\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(RightAngleTriangle(3, 4, 5)); // Output: True\n        Console.WriteLine(RightAngleTriangle(1, 2, 3)); // Output: False\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Solve(string s)\n        {\n            // Check if the input string contains any letters\n            bool containsLetters = s.Any(char.IsLetter);\n\n            if (!containsLetters)\n            {\n                // If no letters are found, reverse the entire string\n                return new string(s.Reverse().ToArray());\n            }\n            else\n            {\n                // If letters are found, iterate through each character and switch its case if it's a letter, or leave it as is otherwise\n                return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());\n            }\n        }\n\n        static void Main()\n        {\n            // Test cases to verify the correctness of the function\n            Console.WriteLine(Solve(\"1234\")); // Expected output: \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Expected output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Expected output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Converts the given string to its MD5 hash equivalent.\n        /// If the input string is empty, returns null.\n        /// </summary>\n        public static string StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using MD5 md5 = MD5.Create();\n            byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n            byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n            StringBuilder sb = new StringBuilder();\n            foreach (byte b in hashBytes)\n            {\n                sb.Append(b.ToString(\"x2\"));\n            }\n\n            return sb.ToString();\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    public static List<int> GenerateIntegers(int a, int b) {\n        // Ensure A is less than B for the loop to work correctly\n        if (A > B) {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n\n        List<int> result = new List<int>();\n        for (int i = Math.Max(A, 2); i <= Math.Min(B, 8); i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n\n        // If A or B was less than 2 and greater than 8, add those values if they are even\n        if (A < 2 && A % 2 == 0) result.Add(A);\n        if (B > 8 && B % 2 == 0) result.Add(B);\n\n        return result;\n    }\n\n    static void Main() {\n        // Test cases\n        Console.WriteLine($\"GenerateIntegers(2, 8): [{string.Join(\", \", GenerateIntegers(2, 8))}]\");\n        Console.WriteLine($\"GenerateIntegers(8, 2): [{string.Join(\", \", GenerateIntegers(8, 2))}]\");\n        Console.WriteLine($\"GenerateIntegers(10, 14): [{string.Join(\", \", GenerateIntegers(10, 14))}]\");\n    }\n}"}

{"task_id": "csharp/0", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool BelowZero(List<int> operations) \n        {\n            int balance = 0; // Initialize the balance to zero\n\n            foreach (var operation in operations) \n            {\n                balance += operation; // Update the balance with each operation\n\n                if (balance < 0) \n                {\n                    // If the balance falls below zero, return true\n                    return true;\n                }\n            }\n\n            // If we reach here, it means the balance never fell below zero, so return false\n            return false;\n        }\n\n        static void Main(string[] args) \n        {\n            Console.WriteLine(BelowZero(new List<int> {1, 2, 3})); // Output: False\n            Console.WriteLine(BelowZero(new List<int> {1, 2, -4, 5})); // Output: True\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static Tuple<int, int> SumProduct(List<int> numbers) \n        {\n            if (numbers == null || numbers.Count == 0)\n            {\n                return Tuple.Create(0, 1);\n            }\n\n            int sum = numbers.Sum();\n            int product = numbers.Aggregate(1, (acc, val) => acc * val);\n\n            return Tuple.Create(sum, product);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SumProduct(new List<int>())); // Output: (0, 1)\n            Console.WriteLine(SumProduct(new List<int> { 1, 2, 3, 4 })); // Output: (10, 24)\n        }\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(StringXor(\"010\", \"110\")); // Outputs: \"100\"\n        }\n\n        public static string StringXor(string a, string b)\n        {\n            if (a.Length != B.Length)\n                throw new ArgumentException(\"Strings must be of equal length.\");\n\n            char[] result = new char[a.Length];\n\n            for (int i = 0; i < A.Length; i++)\n            {\n                // XOR the bits and store the result in the array\n                if (A[i] == B[i])\n                    result[i] = '0';\n                else\n                    result[i] = '1';\n            }\n\n            return new string(result);\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object Longest(List<string> strings)\n        {\n            if (!strings.Any()) return null; // Return null if the list is empty\n\n            var longestString = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\n            return longestString; // Return the first one in case of multiple strings of the same length\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Longest(new List<string>())); // Output: null\n            Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" })); // Output: \"A\"\n            Console.WriteLine(Longest(new List<string> { \"A\", \"bb\", \"ccc\" })); // Output: \"ccc\"\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "csharp\npublic static int GreatestCommonDivisor(int A, int B)\n{\n    while (B != 0)\n    {\n        int temp = B;\n        B = A % B;\n        A = temp;\n    }\n    return A;\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "csharp\npublic static string SortNumbers(string numbers)\n{\n    // Define a dictionary to map number words to their numeric values\n    var numberMap = new Dictionary<string, int>\n    {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    // Split the input string into an array of number words, convert them to numbers using the dictionary, and sort them\n    var sortedNumbers = numbers.Split(' ')\n                               .Select(word => numberMap[word])\n                               .OrderBy(number => number)\n                               .ToArray();\n\n    // Convert the sorted numbers back into a string of words and return it\n    return String.Join(\" \", sortedNumbers);\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Rescales a list of numbers such that the smallest becomes 0 and the largest becomes 1.\n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n            double range = max - min;\n\n            return numbers.Select(n => (n - min) / range).ToList();\n        }\n\n        public static void Main()\n        {\n            var result = RescaleToUnit(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 });\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "csharp\npublic static string FlipCase(string inputString)\n{\n    char[] charArray = inputString.ToCharArray();\n\n    for (int i = 0; i < charArray.Length; i++)\n    {\n        if (char.IsLower(charArray[i]))\n            charArray[i] = char.ToUpper(charArray[i]);\n        else if (char.IsUpper(charArray[i]))\n            charArray[i] = char.ToLower(charArray[i]);\n    }\n\n    return new string(charArray);\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Return only positive numbers in the list.\n        /// </summary>\n        public static List<int> GetPositive(List<int> l)\n        {\n            return l.Where(number => number > 0).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the function with provided data points\n            Console.WriteLine(\"Testing GetPositive method:\");\n\n            var test1 = new List<int> { -1, 2, -4, 5, 6 };\n            var expected1 = new List<int> { 2, 5, 6 };\n            var result1 = GetPositive(test1);\n            Console.WriteLine($\"Test 1 Result: {result1.SequenceEqual(expected1)}\");\n\n            var test2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            var expected2 = new List<int> { 5, 3, 2, 3, 9, 123, 1 };\n            var result2 = GetPositive(test2);\n            Console.WriteLine($\"Test 2 Result: {result2.SequenceEqual(expected2)}\");\n        }\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsPrime(6));    // Output: False\n            Console.WriteLine(IsPrime(101));   // Output: True\n            Console.WriteLine(IsPrime(11));   // Output: True\n            Console.WriteLine(IsPrime(13441)); // Output: True\n            Console.WriteLine(IsPrime(61));    // Output: True\n            Console.WriteLine(IsPrime(4));    // Output: False\n            Console.WriteLine(IsPrime(1));    // Output: False\n        }\n\n        public static bool IsPrime(int n) \n        {\n            if (n <= 1) return false; // 0 and 1 are not prime numbers\n            if (n == 2) return true;  // 2 is the only even prime number\n\n            if (n % 2 == 0) return false; // if n is divisible by 2, it's not a prime\n\n            for (int i = 3; i * i <= n; i += 2)\n            {\n                if (n % i == 0) return false; // If n is divisible by any odd number less than or equal to sqrt(n), it's not a prime\n            }\n\n            return true; // n is a prime number\n        }\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Unique(List<int> l)\n        {\n            return l.Distinct().OrderBy(x => x).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            var list = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            var uniqueList = Unique(list);\n            Console.WriteLine($\"Unique elements: {string.Join(\", \", uniqueList)}\");\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "plaintext\n>>> PrimeFib(1)\n2\n\n>>> PrimeFib(2)\n3\n\n>>> PrimeFib(3)\n5\n\n>>> PrimeFib(4)\n13\n\n>>> PrimeFib(5)\n89"}
{"task_id": "csharp/12", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static bool TriplesSumToZero(List<int> numbers) {\n        numbers.Sort(); // Sort the list to make it easier to find triples that sum to zero\n        for (int i = 0; i < numbers.Count - 2; i++) {\n            // Using two pointers to find if there is a pair in the remaining part of the list which sums up with the current element\n            int left = i + 1, right = numbers.Count - 1;\n            while (left < right) {\n                int sum = numbers[i] + numbers[left] + numbers[right];\n                if (sum == 0) {\n                    return true; // Found a triple that sums to zero\n                } else if (sum < 0) {\n                    left++; // Need a larger sum, move left pointer to the right\n                } else {\n                    right--; // Need a smaller sum, move right pointer to the left\n                }\n            }\n        }\n        return false; // No triple found that sums to zero\n    }\n\n    // Test cases\n    public static void Main(string[] args) {\n        Console.WriteLine(TriplesSumToZero(new List<int>{1, 3, 5, 0})); // Expected output: False\n        Console.WriteLine(TriplesSumToZero(new List<int>{1, 3, -2, 1})); // Expected output: True\n        Console.WriteLine(TriplesSumToZero(new List<int>{1, 2, 3, 7})); // Expected output: False\n        Console.WriteLine(TriplesSumToZero(new List<int>{2, 4, -5, 3, 9, 7})); // Expected output: True\n        Console.WriteLine(TriplesSumToZero(new List<int>{1})); // Expected output: False\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Solution\n{\n    public static bool PairsSumToZero(List<int> l)\n    {\n        HashSet<int> seenNumbers = new HashSet<int>(); // Using a set to store the numbers we've seen so far\n        foreach (int number in l)\n        {\n            if (seenNumbers.Contains(-number)) // Check if the negation of the current number has been seen before\n                return true; // Found two distinct elements that sum to zero\n\n            seenNumbers.Add(number); // Add the current number to the set\n        }\n        return false; // No two distinct elements found that sum to zero\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n        Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, -2, 1 })); // False\n        Console.WriteLine(PairsSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n        Console.WriteLine(PairsSumToZero(new List<int> { 2, 4, -5, 3, 5, 7 })); // True\n        Console.WriteLine(PairsSumToZero(new List<int> { 1 })); // False\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static int Fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] fib4 = new int[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n\n        return fib4[n];\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(Fib4(5)); // Output: 4\n        Console.WriteLine(Fib4(6)); // Output: 8\n        Console.WriteLine(Fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "csharp\npublic static double Median(List<int> l) \n{\n    l.Sort(); // Step 1: Sort the list\n\n    int size = l.Count; // Get the size of the list\n    if (size == 0) return 0; // Return 0 if the list is empty\n\n    double median;\n    if (size % 2 == 0) // Step 3: Check if the length is even\n    {\n        // Calculate the average of the two middle elements\n        median = (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    }\n    else // If the length is odd\n    {\n        // Return the middle element\n        median = l[size / 2];\n    }\n\n    return median; // Step 4: Return the median\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Checks if the provided string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n        /// </summary>\n        /// <param name=\"text\">The string to check.</param>\n        /// <returns>True if the text is a palindrome; otherwise, false.</returns>\n        public static bool IsPalindrome(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n                return true;\n\n            // Remove non-alphanumeric characters and convert to lowercase for uniformity\n            var processedText = Regex.Replace(text, \"[^A-Za-Z0-9]\", \"\").ToLower();\n\n            int left = 0;\n            int right = processedText.Length - 1;\n\n            while (left < right)\n            {\n                if (processedText[left] != processedText[right])\n                    return false;\n\n                left++;\n                right--;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string RemoveVowels(string text)\n        {\n            if (string.IsNullOrEmpty(text)) return text;\n\n            string vowels = \"aeiouAEIOU\";\n            return new string(text.Where(c => !vowels.Contains(c)).ToArray());\n        }\n\n        // Test cases\n        public static void Main()\n        {\n            Console.WriteLine(RemoveVowels(\"\")); // Output: \"\"\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n            Console.WriteLine(RemoveVowels(\"abcdef\")); // Output: \"bcdf\"\n            Console.WriteLine(RemoveVowels(\"aaaaa\")); // Output: \"\"\n            Console.WriteLine(RemoveVowels(\"aaBAA\")); // Output: \"B\"\n            Console.WriteLine(RemoveVowels(\"zbcd\")); // Output: \"zbcd\"\n        }\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "csharp\npublic static bool BelowThreshold(List<int> l, int t)\n{\n    return l.All(x => x < t);\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "csharp\npublic static int Add(int x, int y)\n{\n    return x + y;\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static bool SameChars(string s0, string s1)\n    {\n        // Convert the strings to character arrays and sort them\n        var sortedS0 = String.Concat(s0.OrderBy(c => c));\n        var sortedS1 = String.Concat(s1.OrderBy(c => c));\n\n        // Compare the sorted strings\n        return sortedS0 == sortedS1;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n        Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n        Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n        Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n        Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "csharp\npublic static int Fib(int n) \n{\n    if (n <= 1)\n        return n;\n    else\n        return Fib(n-1) + Fib(n-2);\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> Common(List<int> l1, List<int> l2)\n    {\n        // Intersect the two lists to find common elements and then convert to a sorted set\n        var commonElements = new SortedSet<int>(l1.Intersect(l2));\n\n        return commonElements.ToList();\n    }\n\n    static void Main()\n    {\n        // Test cases to verify the correctness of the Common function\n        Console.WriteLine($\"Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = {string.Join(\", \", Common(new List<int>{1, 4, 3, 34, 653, 2, 5}, new List<int>{5, 7, 1, 5, 9, 653, 121}))}\");\n        Console.WriteLine($\"Common([5, 3, 2, 8], [3, 2]) = {string.Join(\", \", Common(new List<int>{5, 3, 2, 8}, new List<int>{3, 2}))}\");\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    public static int LargestPrimeFactor(int n)\n    {\n        if (n <= 1) return -1; // Return -1 for non-prime numbers or invalid input.\n        \n        int largestFactor = -1;\n        // Divide by 2 to remove all even factors.\n        while (n % 2 == 0)\n        {\n            largestFactor = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, so a skip of 2 (i += 2) can be used.\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n        {\n            while (n % i == 0)\n            {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number greater than 2.\n        if (n > 2)\n        {\n            largestFactor = n;\n        }\n\n        return largestFactor;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n        Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "csharp\npublic static int SumToN(int n)\n{\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> Derivative(List<int> xs) \n    {\n        // Check if the input list is empty or contains only one element (constant polynomial)\n        if (xs == null || xs.Count <= 1) return new List<int>();\n\n        List<int> derivativeCoefficients = new List<int>();\n        for (int i = 1; i < xs.Count; i++) // Start from the first index (ignoring the constant term)\n        {\n            derivativeCoefficients.Add(i * xs[i]); // Multiply each coefficient by its power (index)\n        }\n\n        return derivativeCoefficients;\n    }\n\n    // Test function to verify correctness\n    public static void Main()\n    {\n        var result1 = Derivative(new List<int> {3, 1, 2, 4, 5});\n        Console.WriteLine($\"Derivative([3, 1, 2, 4, 5]) => [{string.Join(\", \", result1)}]\");\n\n        var result2 = Derivative(new List<int> {1, 2, 3});\n        Console.WriteLine($\"Derivative([1, 2, 3]) => [{string.Join(\", \", result2)}]\");\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    // Efficiently compute the n-th element of the Fibfib number sequence.\n    public static int Fibfib(int n) {\n        if (n < 2) return 0;\n        if (n == 2) return 1;\n\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n\n        return fib[n];\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Fibfib(5)); // Output: 4\n        Console.WriteLine(Fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static int VowelsCount(string s) {\n        int count = 0;\n        string vowels = \"aeiou\";\n        s = s.ToLower(); // Convert string to lowercase to make it case-insensitive\n\n        foreach (char c in s) {\n            if (vowels.Contains(c)) {\n                count++;\n            }\n        }\n\n        // Check if 'y' is at the end of the word and is not the first character\n        if (s.EndsWith('y') && s.Length > 1) {\n            count++;\n        }\n\n        return count;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n        Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "This code snippet is a method named `Search` that takes a list of integers as input and returns an integer. The purpose of this method is to find the greatest integer in the list whose frequency (number of occurrences) is greater than or equal to its value. If no such integer exists, it returns -1.\n\nThe `List<int> lst` parameter represents the input list of integers.\n\nHere's a detailed explanation of how this method works:\n1. The method starts by initializing an instance of the `CompareNetObjects` class named `comparer`. This class is used for comparing objects in C#, but it is not directly relevant to the logic of this method.\n2. It then sorts the input list in descending order using the `OrderByDescending` LINQ method and stores the sorted list back in `lst`.\n3. A new empty dictionary named `frequencyMap` is created to store the frequency of each integer in the list.\n4. The method iterates over each element `num` in the sorted list:\n   - If `num` already exists as a key in `frequencyMap`, its corresponding value (frequency) is incremented by 1. Otherwise, a new key-value pair is added to `frequencyMap` with `num` as the key and 1 as the frequency.\n5. After counting the frequencies of all integers, the method iterates over each entry in `frequencyMap`. For each entry (key-value pair), it checks if the key (integer) is greater than 0 and its frequency is greater than or equal to itself. If these conditions are met, the key (integer) is returned as the result.\n6. If no integer meets the criteria, the method returns -1.\n\nOverall, this `Search` method efficiently finds the greatest integer whose frequency in the list is at least equal to its value."}
{"task_id": "csharp/29", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriangleArea(3, 4, 5));  // Expected output: 6.00\n            Console.WriteLine(TriangleArea(1, 2, 10)); // Expected output: -1\n        }\n\n        public static double TriangleArea(int a, int b, int c)\n        {\n            if (A + B > C && A + C > B && B + C > A)\n            {\n                double semiPerimeter = (A + B + C) / 2.0;\n                double area = Math.Sqrt(semiPerimeter * (semiPerimeter - A) * (semiPerimeter - B) * (semiPerimeter - C));\n                return Math.Round(area, 2);\n            }\n            else\n            {\n                return -1;\n            }\n        }\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool WillItFly (List<int> q, int w) \n        {\n            // Check if list is balanced (palindromic)\n            bool isBalanced = q.SequenceEqual(q.AsEnumerable().Reverse());\n\n            // Calculate sum of elements in the list\n            int SumOfElements = q.Sum();\n\n            // Return true if both conditions are met, false otherwise\n            return IsBalanced && (SumOfElements <= w);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(WillItFly(new List<int> {1, 2}, 5)); // Outputs: False\n            Console.WriteLine(WillItFly(new List<int> {3, 2, 3}, 1)); // Outputs: False\n            Console.WriteLine(WillItFly(new List<int> {3, 2, 3}, 9)); // Outputs: True\n            Console.WriteLine(WillItFly(new List<int> {3}, 5)); // Outputs: True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "csharp\nusing System;\n\npublic class Program\n{\n    private static readonly List<int> primes = GeneratePrimes(100);\n\n    public static bool IsMultiplyPrime(int a)\n    {\n        if (a < 2 || a >= 100) return false; // Numbers less than 2 or greater than 99 cannot be the product of three prime numbers\n\n        foreach (var p1 in primes)\n        {\n            if (p1 > a / 3) break; // No need to check primes greater than A/3 since A is less than 100 and we've already found 3 such primes\n\n            foreach (var p2 in primes)\n            {\n                if (p2 > A / (p1 * p1)) break; // No need to check primes greater than A/(p1*p1) since p1^2 is less than or equal to A/3 and we've already found 2 such primes\n\n                int p3 = A / (p1 * p2);\n                if (primes.Contains(p3))\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static List<int> GeneratePrimes(int max)\n    {\n        var primes = new List<int>();\n        var isPrime = new bool[max + 1];\n        for (int i = 2; i <= max; i++) IsPrime[i] = true;\n\n        for (int number = 2; number * number <= max; number++)\n            if (IsPrime[number])\n                for (int multiple = number * number; multiple <= max; multiple += number)\n                    IsPrime[multiple] = false;\n\n        for (int prime = 2; prime < max; prime++)\n            if (IsPrime[prime])\n                primes.Add(prime);\n\n        return primes;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(IsMultiplyPrime(30)); // True\n        Console.WriteLine(IsMultiplyPrime(60)); // True\n        Console.WriteLine(IsMultiplyPrime(61)); // False (since 61 is greater than 100)\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "csharp\npublic static string DecimalToBinary(int decimalNumber) \n{\n    // Add 1 to get rid of extra 'db' at both ends\n    decimalNumber++;\n\n    // Convert to binary representation and replace digits for correct format\n    string binary = Convert.ToString(decimalNumber, 2).Replace('0', 'a').Replace('1', '0').Replace('A', '1');\n\n    // Add back the extra 'db' characters at both ends\n    return $\"db{binary}db\";\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsHappy(\"abcd\")); // True\n        Console.WriteLine(IsHappy(\"aabb\")); // False\n        Console.WriteLine(IsHappy(\"adb\"));  // True\n        Console.WriteLine(IsHappy(\"xyy\"));  // False\n    }\n\n    public static bool IsHappy (string s) \n    {\n        if (s.Length < 3) return false;\n\n        for (int i = 0; i <= s.Length - 3; i++)\n        {\n            var currentChar = s[i];\n            var nextChar = s[i + 1];\n            var afterNextChar = s[i + 2];\n\n            if (currentChar == nextChar || nextChar == afterNextChar || currentChar == afterNextChar)\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<object> grades)\n        {\n            var letterGrades = new List<string>();\n\n            foreach (var grade in grades)\n            {\n                double gpa = Convert.ToDouble(grade);\n\n                if (gpa == 4.0)\n                {\n                    letterGrades.Add(\"A+\");\n                }\n                else if (gpa > 3.7)\n                {\n                    letterGrades.Add(\"A\");\n                }\n                else if (gpa > 3.3)\n                {\n                    letterGrades.Add(\"A-\");\n                }\n                else If (gpa > 3.0)\n                {\n                    letterGrades.Add(\"B+\");\n                }\n                else If (gpa > 2.7)\n                {\n                    letterGrades.Add(\"B\");\n                }\n                else If (gpa > 2.3)\n                {\n                    letterGrades.Add(\"B-\");\n                }\n                else If (gpa > 2.0)\n                {\n                    letterGrades.Add(\"C+\");\n                }\n                else If (gpa > 1.7)\n                {\n                    letterGrades.Add(\"C\");\n                }\n                else If (gpa > 1.3)\n                {\n                    letterGrades.Add(\"C-\");\n                }\n                else If (gpa > 1.0)\n                {\n                    letterGrades.Add(\"D+\");\n                }\n                else If (gpa > 0.7)\n                {\n                    letterGrades.Add(\"D\");\n                }\n                else If (gpa > 0.0)\n                {\n                    letterGrades.Add(\"D-\");\n                }\n                else\n                {\n                    letterGrades.Add(\"E\");\n                }\n            }\n\n            return letterGrades;\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            Console.WriteLine(PrimeLength(\"Hello\")); // True\n            Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n            Console.WriteLine(PrimeLength(\"kittens\")); // True\n            Console.WriteLine(PrimeLength(\"orange\")); // False\n        }\n\n        public static bool PrimeLength (string input) \n        {\n            int length = input.Length;\n\n            if (length <= 1) return false;\n            if (length == 2) return true;\n            if (length % 2 == 0) return false;\n\n            for (int i = 3; i * i <= length; i += 2)\n            {\n                if (length % i == 0) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(1000)); // Outputs \"1\"\n            Console.WriteLine(Solve(150));  // Outputs \"110\"\n            Console.WriteLine(Solve(147));  // Outputs \"1100\"\n        }\n\n        public static string Solve (int N) \n        {\n            int sum = 0;\n            while (N > 0)\n            {\n                sum += N % 10; // Add the last digit of N to sum.\n                N /= 10;  // Remove the last digit of N.\n            }\n\n            return Convert.ToString(sum, 2); // Convert sum into binary and return it.\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<Tuple<int, int>>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if (lst[i][j] == x)\n                    {\n                        result.Add(Tuple.Create(i, j));\n                    }\n                }\n            }\n\n            // Sorting by row in ascending order and then by column in descending order within each row\n            return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n        }\n\n        public static void Main()\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", GetRow(new List<List<int>> {\n                new List<int> {1, 2, 3, 4, 5, 6},\n                new List<int> {1, 2, 3, 4, 1, 6},\n                new List<int> {1, 2, 3, 4, 5, 1}\n            }, 1))); // Output: (0, 0), (1, 4), (1, 0), (2, 5), (2, 0)\n\n            Console.WriteLine(string.Join(\", \", GetRow(new List<List<int>>(), 1))); // Output: ()\n\n            Console.WriteLine(string.Join(\", \", GetRow(new List<List<int>> {\n                new List<int>(),\n                new List<int> {1},\n                new List<int> {1, 2, 3}\n            }, 3))); // Output: (2, 2)\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int? NextSmallest(List<int> lst) {\n        if (lst == null || lst.Count < 2) return null; // If list is empty or has less than 2 elements, return null\n\n        HashSet<int> uniqueElements = new HashSet<int>(lst); // Remove duplicates to handle cases like [1, 1]\n        List<int> sortedUniqueElements = uniqueElements.ToList();\n        sortedUniqueElements.Sort();\n\n        return sortedUniqueElements[1]; // Return the second smallest element\n    }\n    \n    // Test function\n    public static void Main(string[] args) {\n        Console.WriteLine(NextSmallest(new List<int>{1, 2, 3, 4, 5})); // Expected output: 2\n        Console.WriteLine(NextSmallest(new List<int>{5, 1, 4, 3, 2})); // Expected output: 2\n        Console.WriteLine(NextSmallest(new List<int>{})); // Expected output: null\n        Console.WriteLine(NextSmallest(new List<int>{1, 1})); // Expected output: null\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Linq;\n\npublic class Program\n{\n    public static int IsBored(string S)\n    {\n        // Split the string into sentences using delimiters '.', '?', and '!'\n        var sentences = Regex.Split(S, @\"[\\.\\?!]\").Where(s => !string.IsNullOrWhiteSpace(s));\n\n        // Count how many sentences start with \"I\"\n        int boredomCount = sentences.Count(sentence => sentence.TrimStart().StartsWith(\"I \", StringComparison.OrdinalIgnoreCase) || sentence.TrimStart().Equals(\"I\", StringComparison.OrdinalIgnoreCase));\n\n        return boredomCount;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n        Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "csharp\npublic static int Skjkasdkd(List<int> lst) \n{\n    // Step 1 - Filter out non-prime numbers\n    var primes = lst.Where(IsPrime).ToList();\n\n    // Step 2 - Sort the list of primes in descending order\n    primes.Sort((a, B) => B.CompareTo(A));\n\n    // Step 3 - Get the largest prime number from the sorted list\n    if (primes.Count > 0)\n    {\n        int largestPrime = primes[0];\n\n        // Step 4 - Calculate the sum of its digits and return it\n        return largestPrime.ToString().Sum(c => c - '0');\n    }\n\n    return 0; // Return 0 if there are no prime numbers in the list\n}\n\n// Helper function to check if a number is prime or not\nprivate static bool IsPrime(int n)\n{\n    if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    for (int i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\n    return true;\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckDictCase(Dictionary<object, string> dict) \n        {\n            // If the dictionary is empty, return false\n            if (!dict.Any())\n            {\n                return false;\n            }\n\n            // Check if all keys are strings and convert them to lower case for comparison\n            var lowerCaseKeys = dict.All(kvp => kvp.Key is string && ((string)kvp.Key).ToLower() == (string)kvp.Key);\n\n            // Check if all keys are strings and convert them to upper case for comparison\n            var upperCaseKeys = dict.All(kvp => kvp.Key is string && ((string)kvp.Key).ToUpper() == (string)kvp.Key);\n\n            // If both conditions are true, return false as the dictionary does not follow one of the case styles\n            if (lowerCaseKeys && upperCaseKeys)\n            {\n                return false;\n            }\n\n            // Return true if either condition is true\n            return lowerCaseKeys || upperCaseKeys;\n        }\n\n        static void Main(string[] args) \n        {\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { {\"a\", \"apple\" }, {\"b\", \"banana\"} })); // true\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { {\"A\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"} })); // false\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { {\"a\", \"apple\"}, {8, \"banana\"}, {\"A\", \"apple\"} })); // false\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { {\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"} })); // false\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { {\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"} })); // true\n        }\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "csharp\npublic static int ClosestInteger(string value)\n{\n    double number = double.Parse(value);\n    int rounded;\n\n    if (number >= 0)\n        rounded = (int)(number + 0.5);\n    else\n        rounded = (int)(number - 0.5);\n\n    return rounded;\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MakeAPile (int n) \n        {\n            List<int> pile = new List<int>();\n            int currentStones = n;\n\n            for (int i = 0; i < n; i++)\n            {\n                pile.Add(currentStones);\n\n                // Determine the next number of stones based on whether n is odd or even\n                if (n % 2 == 0) // Even\n                    currentStones += 2;\n                else // Odd\n                    currentStones += 2;\n            }\n\n            return pile;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> result = MakeAPile(3);\n            Console.WriteLine($\"Output: {String.Join(\", \", result)}\");\n            // Output: 3, 5, 7\n        }\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "csharp\npublic static List<string> WordsString(string s)\n{\n    // Define the delimiters as a char array containing space and comma\n    char[] delimiters = new char[] { ',', ' ' };\n\n    // Split the string using the delimiters and return the result as a List<string>\n    return s.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).ToList();\n}\n\n// Example usage:\npublic static void Main()\n{\n    var words1 = WordsString(\"Hi, My name is John\");\n    Console.WriteLine($\"Words 1: {string.Join(\", \", words1)}\"); // Output: Words 1: Hi, my, name, is, John\n\n    var words2 = WordsString(\"One, two, three, four, five, six\");\n    Console.WriteLine($\"Words 2: {string.Join(\", \", words2)}\"); // Output: Words 2: One, two, three, four, five, six\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "csharp\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        // Example usage:\n        Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n        Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n    }\n\n    /// <summary>\n    /// Finds the largest even number within the inclusive range [x, y].\n    /// Returns -1 if no even numbers are found in the range.\n    /// </summary>\n    public static int ChooseNum(int x, int y) \n    {\n        if (x > y) return -1; // If x is greater than y, there's no valid range\n\n        // Check if y is even; otherwise, decrement it to make sure it's even and still within the range\n        if (y % 2 != 0) y--;\n\n        return y >= x ? y : -1; // Return the largest even number or -1 if it doesn't exist\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object RoundedAvg(int n, int m)\n        {\n            if (n > m) return -1;\n\n            double sum = Enumerable.Range(n, m - n + 1).Average();\n            return Convert.ToString((long)Math.Round(sum), 2);\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // Output: -1\n            Console.WriteLine(RoundedAvg(10, 20)); // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> F(int n)\n        {\n            List<int> result = new List<int>();\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    result.Add(Factorial(i));\n                }\n                else\n                {\n                    result.Add(SumOfNumbers(i));\n                }\n            }\n\n            return result;\n        }\n\n        private static int Factorial(int number)\n        {\n            if (number <= 1) return 1;\n            return number * Factorial(number - 1);\n        }\n\n        private static int SumOfNumbers(int number)\n        {\n            return (number * (number + 1)) / 2;\n        }\n\n        public static void Main()\n        {\n            List<int> result = F(5);\n            foreach (var item in result)\n            {\n                Console.WriteLine(item);\n            }\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static Tuple<int, int> EvenOddPalindrome(int n)\n    {\n        List<int> palindromes = new List<int>();\n        for (int i = 1; i <= n; i++)\n        {\n            if (IsPalindrome(i))\n            {\n                palindromes.Add(i);\n            }\n        }\n\n        int evenCount = palindromes.Count(p => p % 2 == 0);\n        int oddCount = palindromes.Count - evenCount;\n\n        return Tuple.Create(evenCount, oddCount);\n    }\n\n    private static bool IsPalindrome(int number)\n    {\n        string numStr = Math.Abs(number).ToString();\n        for (int i = 0, j = numStr.Length - 1; i < j; i++, j--)\n        {\n            if (numStr[i] != numStr[j])\n                return false;\n        }\n        return true;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(EvenOddPalindrome(3)); // Output: (1, 2)\n        Console.WriteLine(EvenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "csharp\npublic static bool MoveOneBall(List<int> arr)\n{\n    if (arr == null || arr.Count <= 1) return true;\n\n    var sortedArr = new List<int>(arr);\n    sortedArr.Sort();\n\n    int unsortedPairs = 0;\n    for (int i = 0; i < arr.Count - 1; i++)\n    {\n        if (arr[i] > arr[i + 1])\n        {\n            unsortedPairs++;\n        }\n        // If there are more than one unsorted pairs, we cannot achieve sorted array by right shift\n        if (unsortedPairs > 1) return false;\n    }\n\n    // Check if the last element is greater than the first element in the sorted array\n    if (arr[arr.Count - 1] > sortedArr[0]) unsortedPairs++;\n\n    return unsortedPairs == 1;\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static string Exchange(List<int> lst1, List<int> lst2)\n    {\n        // Count the number of odd numbers in lst1 and even numbers in lst2\n        int oddCountLst1 = lst1.Count(num => num % 2 != 0);\n        int evenCountLst2 = lst2.Count(num => num % 2 == 0);\n\n        // If there are more or equal even numbers in lst2 than there are odd numbers in lst1,\n        // it is possible to exchange them to make all elements of lst1 even\n        if (evenCountLst2 >= oddCountLst1)\n            return \"YES\";\n        else\n            return \"NO\";\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Output: \"YES\"\n        Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Output: \"NO\"\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<object> ReverseDelete(string s, string c)\n    {\n        // Remove all characters in 's' that are present in 'c'\n        var result = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n\n        // Check if the result is a palindrome\n        bool isPalindrome = result.SequenceEqual(result.Reverse());\n\n        return new List<object> { result, isPalindrome };\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(String.Join(\", \", ReverseDelete(\"abcde\", \"ae\"))); // Output: bcd, False\n        Console.WriteLine(String.Join(\", \", ReverseDelete(\"abcdef\", \"b\")));  // Output: acdef, False\n        Console.WriteLine(String.Join(\", \", ReverseDelete(\"abcdedcba\", \"ab\"))); // Output: cdedc, True\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "This is a programming problem related to the well-water extraction task. The given code snippet is a method named `MaxFill` that takes in two parameters: a rectangular grid representing wells and an integer representing the bucket's capacity.\n\nThe method first defines a variable `result` initialized to 0, which will be used to store the number of times the buckets need to be lowered.\n\nThen it uses nested loops to iterate through each element in the grid. For each element (representing a unit of water), if the element is 1, it means there's water in that well and we increment `result` by the number of full buckets needed to empty it (i.e., divide the total units of water by the bucket capacity). If the leftover units of water after rounding down are non-zero, another bucket needs to be lowered to empty this well, so we increment `result` again.\n\nFinally, it returns the value stored in `result`, which represents the total number of times the buckets need to be lowered to empty all the wells."}
{"task_id": "csharp/53", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects; // Assuming this is needed for some other reason\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n) \n        {\n            if (string.IsNullOrEmpty(s)) return new List<string>();\n\n            var cleanedString = Regex.Replace(s, \"[^a-zA-Z ]\", \"\"); // Remove non-letter characters\n            var words = cleanedString.Split(' ');\n            var wordsWithNConsonants = new List<string>();\n\n            foreach (var word in words)\n            {\n                var consonantCount = Regex.Replace(word, \"[aeiouAEIOU]\", \"\").Length; // Count consonants only\n                if (consonantCount == n)\n                    wordsWithNConsonants.Add(word);\n            }\n\n            return wordsWithNConsonants;\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Finds the maximum k numbers in the given array arr and returns them sorted in ascending order.\n        /// </summary>\n        /// <param name=\"arr\">The list of integers.</param>\n        /// <param name=\"k\">The number of maximum elements to return.</param>\n        /// <returns>A sorted list containing the k largest numbers from arr.</returns>\n        public static List<int> Maximum(List<int> arr, int k)\n        {\n            // Check if k is within bounds.\n            if (k > arr.Count || k < 0)\n                throw new ArgumentOutOfRangeException(nameof(k), \"k must be between 0 and the length of arr.\");\n\n            // Sort the list in descending order and take the first k elements.\n            var sortedMax = arr.OrderByDescending(num => num).Take(k);\n\n            // Return the result as a sorted list.\n            return sortedMax.ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> { -3, -4, 5 }, 3))); // Output: -4, -3, 5\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> { 4, -4, 4 }, 2))); // Output: 4, 4\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> { -3, 2, 1, 2, -1, -2, 1 }, 1))); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "csharp\npublic static int AddElements(List<int> arr, int k) \n{\n    if (k > arr.Count || k < 1) \n    {\n        throw new ArgumentOutOfRangeException(\"k\", \"The value of k must be between 1 and the length of the list\");\n    }\n\n    return arr.Take(k).Where(i => i >= -99 && i <= 99).Sum();\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static string Intersection(List<int> interval1, List<int> interval2) {\n        // Find the max start point and min end point of both intervals\n        int startMax = Math.Max(interval1[0], interval2[0]);\n        int endMin = Math.Min(interval1[1], interval2[1]);\n\n        // If there is no intersection, return \"NO\"\n        if (startMax > endMin) {\n            return \"NO\";\n        }\n\n        // Calculate the length of the intersection\n        int intersectionLength = endMin - startMax + 1;\n\n        // Check if the length is a prime number\n        if (IsPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static bool IsPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2) {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    // Test the function with provided examples\n    public static void Main() {\n        Console.WriteLine(Intersection(new List<int>{1, 2}, new List<int>{2, 3})); // Output: \"NO\"\n        Console.WriteLine(Intersection(new List<int>{-1, 1}, new List<int>{0, 4})); // Output: \"NO\"\n        Console.WriteLine(Intersection(new List<int>{-3, -1}, new List<int>{-5, 5})); // Output: \"YES\"\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static List<object> Tri(int n) {\n        List<object> sequence = new List<object>();\n        if (n >= 0) sequence.Add(3);\n        if (n >= 1) sequence.Add(2);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                sequence.Add(1 + i / 2);\n            } else {\n                long nextValue = sequence[i - 1] + sequence[i - 2];\n                if (i < n) {\n                    nextValue += Tri(i + 1)[0];\n                }\n                sequence.Add(nextValue);\n            }\n        }\n\n        return sequence;\n    }\n\n    static void Main(string[] args) {\n        // Example usage:\n        List<object> result = Tri(3);\n        foreach (var item in result) {\n            Console.WriteLine(item);\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "csharp\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(Digits(1));  // Output: 1\n        Console.WriteLine(Digits(4));  // Output: 0\n        Console.WriteLine(Digits(235)); // Output: 15\n    }\n\n    public static int Digits (int n) \n    {\n        string numStr = n.ToString();\n        int product = 1;\n        bool hasOdd = false;\n\n        foreach (char c in numStr)\n        {\n            if ((c - '0') % 2 != 0) // Check if the digit is odd\n            {\n                product *= (c - '0');\n                hasOdd = true;\n            }\n        }\n\n        return hasOdd ? product : 0; // Return 0 if all digits are even\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "csharp\npublic static bool IsNested(string input)\n{\n    int depth = 0;\n    foreach (char c in input)\n    {\n        if (c == '[')\n        {\n            depth++;\n        }\n        else if (c == ']')\n        {\n            depth--;\n        }\n\n        // If depth is greater than 1, we have found a nested bracket sequence.\n        if (depth > 1)\n        {\n            return true;\n        }\n    }\n\n    // No nested bracket sequence was found.\n    return false;\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "CSharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SumSquares(List<object> lst) \n        {\n            return (int)Math.Round(lst.Select(item => Math.Pow(Convert.ToDouble(item), 2)).Sum(), MidpointRounding.AwayFromZero);\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(SumSquares(new List<object> {1, 2, 3})); // Output: 14\n            Console.WriteLine(SumSquares(new List<object> {1, 4, 9})); // Output: 98\n            Console.WriteLine(SumSquares(new List<object> {1, 3, 5, 7})); // Output: 84\n            Console.WriteLine(SumSquares(new List<object> {1.4, 4.2, 0})); // Output: 29\n            Console.WriteLine(SumSquares(new List<object> {-2.4, 1, 1})); // Output: 6\n        }\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "csharp\npublic static bool CheckIfLastCharIsALetter(string txt)\n{\n    // If the string is empty or the last character is not a letter, return false\n    if (string.IsNullOrEmpty(txt) || !char.IsLetter(txt[^1]))\n        return false;\n\n    // Check if the second last character is a space or the string has only one character\n    return txt.Length == 1 || char.IsWhiteSpace(txt[^2]);\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static int CanArrange(List<int> arr) \n    {\n        for (int i = arr.Count - 1; i > 0; i--) \n        {\n            if (arr[i] >= arr[i - 1]) \n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(CanArrange(new List<int>{1,2,4,3,5})); // Output: 3\n        Console.WriteLine(CanArrange(new List<int>{1,2,3})); // Output: -1\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "csharp\npublic static List<object> LargestSmallestIntegers(List<int> lst)\n{\n    int? largestNegative = null;\n    int? smallestPositive = null;\n\n    foreach (var number in lst)\n    {\n        if (number < 0 && (!largestNegative.HasValue || number > largestNegative))\n            largestNegative = number;\n\n        if (number > 0 && (!smallestPositive.HasValue || number < smallestPositive))\n            smallestPositive = number;\n    }\n\n    return new List<object> { largestNegative, smallestPositive };\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "csharp\npublic static int SpecialFactorial(int n) \n{\n    if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be greater than 0.\");\n    }\n\n    int result = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        result *= Factorial(i);\n    }\n    return result;\n}\n\n// Helper function to calculate factorial of a number\nprivate static int Factorial(int num)\n{\n    if (num == 0 || num == 1)\n        return 1;\n    else\n        return num * Factorial(num - 1);\n}\n\n// Example usage:\npublic static void Main()\n{\n    Console.WriteLine(SpecialFactorial(4)); // Outputs: 288\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "csharp\npublic static string WordsInSentence(string sentence)\n{\n    // Split the input string into an array of words by spaces\n    var words = sentence.Split(' ');\n\n    // Create a new list to store words with prime number lengths\n    List<string> primeWords = new List<string>();\n\n    // Iterate through each word in the array\n    foreach (var word in words)\n    {\n        // Check if the length of the word is a prime number\n        if (IsPrime(word.Length))\n        {\n            // If it's prime, add the word to the list\n            primeWords.Add(word);\n        }\n    }\n\n    // Join all the words in the new list with a space and return the result\n    return String.Join(\" \", primeWords);\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n    for (int i = 3; i <= boundary; i += 2)\n    {\n        if (number % i == 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool Simplify(string x, string n)\n        {\n            // Split the fractions into numerators and denominators\n            var fractionX = x.Split('/').Select(int.Parse).ToArray();\n            var fractionN = n.Split('/').Select(int.Parse).ToArray();\n\n            // Multiply the numerators and denominators separately\n            int numeratorProduct = fractionX[0] * fractionN[0];\n            int denominatorProduct = fractionX[1] * fractionN[1];\n\n            // Check if the product is a whole number\n            return denominatorProduct == 1;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> OrderByPoints(List<int> nums) \n    {\n        return nums\n            .Select((num, index) => new { Num = num, Index = index, DigitSum = num.ToString().Where(char.IsDigit).Sum(c => c - '0') })\n            .OrderBy(x => x.DigitSum)\n            .ThenBy(x => x.Index)\n            .Select(x => x.Num)\n            .ToList();\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { 1, 11, -1, -11, -12 })));  // Output: -1, -11, 1, -12, 11\n        Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { })));                   // Output: (empty list)\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SpecialFilter(List<int> nums)\n        {\n            int count = 0;\n            foreach (int num in nums)\n            {\n                if (num > 10 && IsFirstAndLastDigitOdd(Math.Abs(num)))\n                {\n                    count++;\n                }\n            }\n            return count;\n        }\n\n        private static bool IsFirstAndLastDigitOdd(int num)\n        {\n            string numStr = num.ToString();\n            int firstDigit = int.Parse(numStr[0].ToString());\n            int LastDigit = int.Parse(numStr[numStr.Length - 1].ToString());\n            return FirstDigit % 2 != 0 && LastDigit % 2 != 0;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Problem {\n    public static long CountTriples(long n) {\n        // Initialize the counter for valid triples\n        long count = 0;\n\n        // Generate the array a with the formula i * i - i + 1 for each index i\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            A[i] = i * i - i + 1;\n        }\n\n        // Iterate over all possible triples (a[i], a[j], A[k]) with i < j < k\n        for (int i = 0; i < n-2; i++) {\n            for (int j = i+1; j < n-1; j++) {\n                for (int k = j+1; k < n; k++) {\n                    // Check if the sum of the elements in the triple is divisible by 3\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                        count++; // Increment the counter for valid triples\n                    }\n                }\n            }\n        }\n\n        return count; // Return the total number of valid triples\n    }\n\n    // Example usage\n    public static void Main(string[] args) {\n        Console.WriteLine(CountTriples(5)); // Output: 1\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static Tuple<string, string, string, string, string> Bf(string planet1, string planet2)\n    {\n        List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\n        if (index1 == -1 || index2 == -1 || index1 == index2)\n        {\n            return Tuple.Create(\"\", \"\", \"\", \"\", \"\");\n        }\n\n        List<string> result = new List<string>();\n        for (int i = Math.Min(index1, index2) + 1; i < Math.Max(index1, index2); i++)\n        {\n            result.Add(planets[i]);\n        }\n\n        return Tuple.Create(result[0], result.Count > 1 ? result[1] : \"\", result.Count > 2 ? result[2] : \"\", result.Count > 3 ? result[3] : \"\", result.Count > 4 ? result[4] : \"\");\n    }\n\n    static void Main(string[] args)\n    {\n        var planetsBetween = Bf(\"Jupiter\", \"Neptune\");\n        Console.WriteLine($\"Planets between Jupiter and Neptune: {planetsBetween.Item1}, {planetsBetween.Item2}, {planetsBetween.Item3}, {planetsBetween.Item4}, {planetsBetween.Item5}\");\n\n        planetsBetween = Bf(\"Earth\", \"Mercury\");\n        Console.WriteLine($\"Planets between Earth and Mercury: {planetsBetween.Item1}, {planetsBetween.Item2}, {planetsBetween.Item3}, {planetsBetween.Item4}, {planetsBetween.Item5}\");\n\n        planetsBetween = Bf(\"Mercury\", \"Uranus\");\n        Console.WriteLine($\"Planets between Mercury and Uranus: {planetsBetween.Item1}, {planetsBetween.Item2}, {planetsBetween.Item3}, {planetsBetween.Item4}, {planetsBetween.Item5}\");\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(XOrY(7, 34, 12)); // Output: 34\n        Console.WriteLine(XOrY(15, 8, 5));  // Output: 5\n    }\n\n    public static int XOrY(int n, int x, int y)\n    {\n        if (IsPrime(n))\n            return x;\n        else\n            return y;\n    }\n\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (number % i == 0)\n                return false;\n\n        return true;\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "csharp\npublic static int DoubleTheDifference(List<object> lst)\n{\n    int sum = 0;\n\n    foreach (var item in lst)\n    {\n        if (item is int num && num > 0 && num % 2 != 0)\n        {\n            sum += num * num * 2;\n        }\n    }\n\n    return sum;\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "This is a C# program that defines the `StrongestExtension` method to find the strongest extension for a given class based on the strength calculation.\n\nThe `StrongestExtension` method takes two parameters:\n1. `class_name` (string): The name of the class.\n2. `extensions` (List<string>): A list of extension names.\n\nThe method works by iterating through each extension in the list, calculating the strength of each extension based on the number of uppercase letters (CAP) and lowercase letters (SM), and then finding the strongest one.\n\nThe strength calculation is performed as follows:\n- `CAP` = Number of uppercase letters in the extension.\n- `SM` = Number of lowercase letters in the extension.\n- Strength = CAP - SM\n\nFinally, it returns a string combining the class name and the strongest extension's name, separated by a dot (.). If there are multiple extensions with the same strength, the first one in the list is chosen."}
{"task_id": "csharp/74", "language": "csharp", "completion": "csharp\npublic static bool CycpatternCheck(string A, string B) \n{\n    // Concatenate the first string with itself to handle rotations\n    string concatenated = A + A;\n\n    // Check if the second string is a substring of the concatenated string\n    return concatenated.Contains(B);\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "csharp\nusing System;\n\nclass RomanConverter {\n    // Converts an integer to its Roman numeral equivalent in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    public static string IntToMiniRoman(int number) {\n        string[] thousands = {\"\", \"m\"};\n        string[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        string[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        string[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\n        return thousands[number / 1000] +\n               hundreds[(number % 1000) / 100] +\n               tens[(number % 100) / 10] +\n               ones[number % 10];\n    }\n}\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(RomanConverter.IntToMiniRoman(19));  // Output: xix\n        Console.WriteLine(RomanConverter.IntToMiniRoman(152)); // Output: clii\n        Console.WriteLine(RomanConverter.IntToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "csharp\npublic static bool RightAngleTriangle(int A, int B, int C)\n{\n    // Sort the input values to ensure the longest side is last (hypotenuse)\n    var sides = new List<int> { A, B, C };\n    sides.Sort();\n\n    // Check if the sum of squares of two smaller sides equals the square of the largest side\n    return Math.Pow(sides[0], 2) + Math.Pow(sides[1], 2) == Math.Pow(sides[2], 2);\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "csharp\npublic static string Solve(string s) \n{\n    StringBuilder result = new StringBuilder();\n\n    foreach (char c in s)\n    {\n        if (Char.IsLetter(c))\n        {\n            result.Append(Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c));\n        }\n        else\n        {\n            result.Append(c);\n        }\n    }\n\n    if (result.Length == 0)\n    {\n        char[] charArray = s.ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }\n\n    return result.ToString();\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                // Create a new StringBuilder to collect the bytes and create a string\n                StringBuilder sb = new StringBuilder();\n\n                // Loop through each byte of the hashed data and format each one as a hexadecimal string\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                // Return the hexadecimal string\n                return sb.ToString();\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\" ? \"Correct\" : \"Incorrect\");\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "csharp\npublic static List<int> GenerateIntegers(int a, int b)\n{\n    List<int> result = new List<int>();\n    // Ensure A is always less than or equal to B\n    if (A > B)\n    {\n        int temp = A;\n        A = B;\n        B = temp;\n    }\n\n    for (int i = A; i <= B; i++)\n    {\n        if (i % 2 == 0) // Check if the number is even\n        {\n            result.Add(i);\n        }\n    }\n\n    return result;\n}"}

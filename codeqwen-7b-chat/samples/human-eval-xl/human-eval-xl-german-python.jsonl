{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = sum(operations[:-1]) # starts with an initial balance of 0\n    for operation in operations:\n        if balance + operation < 0:\n            return True\n        balance += operation\n    return False"}
{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # Initialisiere das Guthaben auf Null\n    for op in operations:  # Iteriere durch die Operationen\n        balance += op  # Aktualisiere das Guthaben\n        if balance < 0:  # Wenn das Guthaben unter Null f\u00e4llt\n            return True  # Gibt True zur\u00fcck\n    return False  # Gibt False zur\u00fcck, wenn das Guthaben nie unter Null f\u00e4llt"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zu\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\nEine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product\n\n# Test cases to verify the function works as expected\nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return total_sum, total_product\n\nprint(sum_product([]))  # Outputs: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Outputs: (10, 24)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(['1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b)])"}
{"task_id": "python/2", "language": "python", "completion": "The function `string_xor` takes two strings `a` and `b`, which consist only of the characters '1' and '0'. It performs a binary XOR operation on these inputs and returns the result as a new string.\n\nHere is how it works:\n\n1. The input strings are compared character by character.\n2. If the corresponding characters in both strings are the same, the result for that position will be '0' because the XOR of two identical numbers is 0.\n3. If the corresponding characters in both strings are different, the result for That position will be '1' because the XOR of two different numbers is 1.\n4. The function returns a new string that contains all these results concatenated together.\n\nFor example:\n\n- Inputs: `A = '010'`, `B = '110'`\n- Output: `string_xor('010', '110')` will return `'100'`."}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the list is empty\n        return None\n\n    longest_string = max(strings, key=len)  # Find the longest string using the built-in max function and len function as the key\n    return longest_string"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # if the input list is empty, return None\n        return None\n    \n    longest_string = max(strings, key=len)  # Find the longest string using the built-in max function with length as the key\n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % B\n    return A"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    number_dict = {'null':0, 'eins':1, 'zwei':2, 'drei':3, 'vier':4, \n                  'f\u00fcnf':5, 'sechs':6, 'sieben':7, 'acht':8, 'neun':9}\n\n    # convert the input string into a list of integers\n    num_list = [number_dict[i] for i in numbers.split()]\n   \n    # sort the list from small to big\n    num_list.sort()\n\n    # convert back to string and return\n    return ' '.join([str(i) for i in num_list])"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    # Mapping from number words to their corresponding digits\n    number_to_digit = {\n        \"null\": \"0\",\n        \"eins\": \"1\",\n        \"zwei\": \"2\",\n        \"drei\": \"3\",\n        \"vier\": \"4\",\n        \"f\u00fcnf\": \"5\",\n        \"sechs\": \"6\",\n        \"sieben\": \"7\",\n        \"acht\": \"8\",\n        \"neun\": \"9\",\n    }\n\n    # Split the input string into a list of number words\n    number_words = numbers.split()\n\n    # Convert each number word to its corresponding digit and sort the digits\n    sorted_digits = sorted(number_to_digit[word] for word in number_words)\n\n    # Join the sorted digits back into a single string with spaces between them\n    return ' '.join(sorted_digits)"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    if minimum == maximum:  # to avoid division by zero error\n        return [0.0] * len(numbers)\n    else:\n        return [(x - minimum) / (maximum - minimum) for x in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Outputs: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n    range_number = max_number - min_number\n    return [(x - min_number) / range_number for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(Is_prime(6))  # Output: False\nprint(Is_prime(101))  # Output: True\nprint(Is_prime(11))  # Output: True\nprint(Is_prime(13441))  # Output: True\nprint(Is_prime(61))  # Output: True\nprint(Is_prime(4))  # Output: False\nprint(Is_prime(1))  # Output: False"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\"\"\"\n    return sorted(set(l))"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zu\u00fcck.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    count = 0\n    num1, num2 = 0, 1\n    while True:\n        num3 = num1 + num2\n        num1, num2 = num2, num3\n        if is_prime(num3):\n            count += 1\n            if count == n:\n                return num3"}
{"task_id": "python/11", "language": "python", "completion": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_sequence = [0, 1]\n    count = 0\n\n    while count < n:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n\n        if is_prime(next_fib):\n            count += 1\n\n    return fib_sequence[-1]"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n-2):   # we don't need to check last two elements\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))   # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))   # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))            # False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0  # Initialisiere die ersten viere Elemente der Folge\n\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d  # Aktualisiere die Werte\n\n        return d  # Gib das n-te Element der Folge zur\u00fcck\n\nprint(fib4(5))  # Teste die Funktion\nprint(fib4(6))\nprint(fib4(7))"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n\n    a, B, C, D = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        A, B, C, D = B, C, D, A + B + C + D\n\n    return D"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\"\"\"\n    sorted_list = sorted(l)  # Sorting the list in ascending order\n    length = len(sorted_list)\n\n    if length % 2 == 0:  # If the length of the list is even\n        median = (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2.0\n    else:  # If the length of the list is odd\n        median = sorted_list[length // 2]\n\n    return median\n\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    # Sorting the list in ascending order\n    l.sort()\n\n    # Checking if the length of the list is odd or even\n    if len(l) % 2 == 1:\n        # If it's odd, return the middle element\n        return l[len(l) // 2]\n    else:\n        # If it's even, return the average of the two middle elements\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    text = ''.join(filter(str.isalnum, text)).lower()  # Entferne Sonderzeichen und Umwandlung in Lowercase\n    left, right = 0, len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks whether the provided string is a palindrome.\n    \n    >>> Is_palindrome('')\n    True\n    >>> Is_palindrome('aba')\n    True\n    >>> Is_palindrome('aaaaa')\n    True\n    >>> Is_palindrome('zbcd')\n    False\n    \"\"\"\n    # convert the string to lowercase and remove non-alphanumeric characters\n    text = ''.join(filter(str.isalnum, text)).lower()\n\n    # compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    # Define a string containing all lowercase and uppercase vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Use a list comprehension to filter out the vowels from the input text\n    result = [char for char in text if char not in vowels]\n\n    # Join the result list into a string and return it\n    return ''.join(result)"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    # Define a set of vowels\n    vowels = {'a', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'}\n    \n    # Use list comprehension to filter out the vowels from the input string and join them back into a string\n    return ''.join([ch for ch in text if ch not in vowels])\n\n# Test cases:\nprint(remove_vowels(''))  # Output: ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # Output: 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(remove_vowels('aaaaa'))  # Output: ''\nprint(remove_vowels('aaBAA'))  # Output: 'B'\nprint(remove_vowels('zbcd'))  # Output: 'zbcd'"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(i < t for i in l)"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int):\n    \"\"\"Addiere zwei Zahlen x und y.\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int):\n    \"\"\"Addiere zwei Zahlen x und y.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y  # Hier ist der Body der Funktion"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Konvertieren Sie die W\u00f6rter in Sets, um Duplikate zu entfernen\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    # Pr\u00fcfen Sie, ob die beiden Sets identisch sind\n    return set_s0 == set_s1"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib_iterative(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, B = 0, 1\n    for _ in range(2, n + 1):\n        A, B = B, A + B\n\n    return B"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zu\u00fcck.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, B = 0, 1\n        for _ in range(2, n+1):\n            A, B = B, A + B\n        return B\n\n# Testfall pruefen\nassert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\"\"\"\n    # Convert lists to sets for efficient lookup and intersection\n    set_l1 = set(l1)\n    set_l2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set_l1 & set_l2\n\n    # Return sorted list of unique common elements\n    return sorted(list(common_elements))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n\n# Testing the function with your examples\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    largest = -1\n    while n % 2 == 0:\n        largest = 2\n        n >>= 1  # equivalent to n /= 2\n\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i== 0:\n            largest = i\n            n //= i\n\n    if n > 2:\n        largest = n\n\n    return largest"}
{"task_id": "python/24", "language": "python", "completion": "The function `sum_to_n` is designed to calculate the sum of all numbers from 1 up to the given number `n`. The function works by recursively adding each number from 1 to `n` to a running total, which it initializes to 0.\n\nHere's how the function works with some examples:\n\n- `sum_to_n(30)` calculates the sum of all numbers from 1 up to and including 30.\n   The recursive calls are as follows:\n   - `sum_to_n(29) + 30`\n   - `sum_to_n(28) + 29`\n   - ...\n   - `sum_to_n(2) + 3`\n   - `sum_to_n(1) + 2`\n   Adding up all the numbers in this sequence gives a total of 465.\n\n- `sum_to_n(100)` computes the sum of all numbers from 1 to 100 by recursively adding each number.\n\n- Similarly, `sum_to_n(5)`, `sum_to_n(10)`, and `sum_to_n(1)` are examples where the function simply adds up the numbers from 1 to `n`.\n\nPlease note that Python uses 0-based indexing, meaning that in this code snippet, `i` ranges from 0 up to but not including `n`."}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs)][1:]"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, B, C = 0, 0, 1\n        for _ in range(n - 2):\n            A, B, C = B, C, A + B + C\n        return C"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "python/27", "language": "python", "completion": "assert vowels_count(\"abcde\") == 2  # 'a', 'e'"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Return the number of vowels in the given word. Vowels are 'a', 'e', 'i', 'o', 'u'. \n    'y' is also a vowel, but only if it is at the end of the word.\"\"\"\n\n    vowels = \"aeiou\"\n    count = 0\n\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n\n    # Check if 'y' is at the end and is a vowel\n    if s[-1].lower() == 'y':\n        count += 1\n\n    return count\n\n\n# Test cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"rhythm\") == 0\nassert vowels_count(\"AEIOUY\") == 6\nassert vowels_count(\"quickly\") == 1\nassert vowels_count(\"Sky\") == 1  # 'y' is not at the end, so it is not counted"}
{"task_id": "python/28", "language": "python", "completion": "from collections import Counter\n\ndef search(lst):\n    # count the occurrence of each number in list\n    num_count = Counter(lst)\n\n    # find maximum frequency that is greater than zero\n    max_freq = -1\n    for num, freq in num_count.items():\n        if num > 0 and freq >= num:\n            max_freq = max(max_freq, num)\n    return max_freq\n\nprint(search([4, 1, 2, 2, 3, 1]))  # prints: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # prints: 3\nprint(search([5, 5, 4, 4, 4]))  # prints: -1"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num > 0:\n            if num not in freq_map:\n                freq_map[num] = 1\n            else:\n                freq_map[num] += 1\n\n    max_val = -1\n    for key, val in freq_map.items():\n        if key <= val and key > max_val:\n            max_val = key\n\n    return max_val"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    if a + b > c and A + c > b and B + c > A:  # Check if the sides form a valid triangle\n        s = (A + b + c) / 2   # Calculate semi-perimeter of the triangle\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5  # Heron's formula for area calculation\n        return round(area, 2)  # Return the area rounded to two decimal places\n    else:\n        return -1  # Return -1 if the sides do not form a valid triangle"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(A, B, C):\n    # \u00dcberpr\u00fcfe, ob die Seitenl\u00e4nge ein Tripel von nat\u00fcrlichen Zahlen sind\n    if not all(isinstance(n, int) and n > 0 for n in [A, B, C]):\n        return -1\n\n    # \u00dcberpr\u00fcfe, ob die Summe der zwei kleineren Seiten gr\u00f6\u00dfer ist als die dritte Seite\n    if A + B <= C or A + C <= B or B + C <= A:\n        return -1\n\n    # Berechne den Fl\u00e4cheninhalt mit der Heron-Formel\n    s = (A + B + C) / 2\n    area = math.sqrt(s * (s - A) * (s - B) * (s - C))\n\n    # Runde die Ergebnisse auf 2 Dezimalstellen und geben sie zu\u00fcck\n    return round(area, 2)"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:  # Check if the list is palindromic and its sum is less than or equal to w\n        return True\n    else:\n        return False"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    if sum(q) > w:\n        return False\n    return q == q[::-1]"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    if a < 2 or a >= 100:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    primes = [True for _ in range(min(a+1, 101))]\n    p = 2\n    while p * p <= a:\n        if primes[p]:\n            for i in range(p * p, A + 1, p):\n                primes[i] = False\n        p += 1\n\n    prime_factors = [i for i in range(2, min(a+1, 101)) if primes[i]]\n\n    for factor in prime_factors:\n        if a % factor == 0:\n            count = 0\n            while a % factor == 0:\n                A /= factor\n                count += 1\n            if count > 2:\n                return False\n    if A != 1:\n        return False\n\n    return len(prime_factors) >= 3\n\nprint(is_multiply_prime(30))  # it should return True"}
{"task_id": "python/31", "language": "python", "completion": "from sympy import isprime, factorint\n\ndef Is_multiply_prime(a):\n    if a < 2:  # Primes are greater than or equal to 2\n        return False\n    factors = factorint(A)\n    primes = [p for p in factors if Isprime(p)]\n    return len(primes) == 3 and all([Isprime(i) for i in primes])\n\nprint(Is_multiply_prime(30))  # Output: True"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n   binary = bin(decimal).replace(\"0b\", \"\").strip() # converting to binary and removing '0b' prefix\n   return f\"db{binary}db\" # adding 'db' at both ends"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to its binary representation.\"\"\"\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary = bin(decimal)[2:]\n    # Add formatting characters at the beginning and end of the binary string\n    return f\"db{binary}db\"\n\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\n# Test cases\nprint(is_happy(\"a\")) # => False\nprint(is_happy(\"aa\")) # => False\nprint(is_happy(\"abcd\")) # => True\nprint(is_happy(\"aabb\")) # => False\nprint(is_happy(\"adb\")) # => True\nprint(is_happy(\"xyy\")) # => False"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    return [convert_gpa_to_grade(g) for g in grades]\n\ndef convert_gpa_to_grade(gpa):\n    if gpa == 4.0: return 'A+'\n    elif gpa > 3.7: return 'A'\n    elif gpa > 3.3: return 'A-'\n    elif gpa > 3.0: return 'B+'\n    elif gpa > 2.7: return 'B'\n    elif gpa > 2.3: return 'B-'\n    elif gpa > 2.0: return 'C+'\n    elif gpa > 1.7: return 'C'\n    elif gpa > 1.3: return 'C-'\n    elif gpa > 1.0: return 'D+'\n    elif gpa > 0.7: return 'D'\n    elif gpa > 0.0: return 'D-'\n    else: return 'E'\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    return [\n        'A+' if grade == 4.0 else\n        'A' if grade > 3.7 else\n        'A-' if grade > 3.3 else\n        'B+' if grade > 3.0 else\n        'B' if grade > 2.7 else\n        'B-' if grade > 2.3 else\n        'C+' if grade > 2.0 else\n        'C' if grade > 1.7 else\n        'C-' if grade > 1.3 else\n        'D+' if grade > 1.0 else\n        'D' if grade > 0.7 else\n        'D-' if grade > 0.0 else\n        'E' for grade in grades]"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5)+1):\n        if (len(string) % i) == 0:\n            return False\n    return True\n\n# Test cases\nprint(prime_length('Hello')) # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange')) # False"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:  # A number less than or equal to 1 is not prime\n        return False\n    for i in range(2, int(n**0.5)+1): # Iterate from 2 till the square root of the given number\n        if (n % i) == 0:  # If n is divisible by any number in the range [2, sqrt(n)], it's not prime\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Returns True if the length of a given string is a prime number, otherwise returns False.\"\"\"\n    return is_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Convert N to string to get individual digits\n    str_N = str(N)\n\n    # Sum up the digits of N\n    sum_digits = sum(int(digit) for digit in str_N)\n\n    # Convert the sum of digits to binary and return it as a string\n    return bin(sum_digits)[2:]"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    digit_sum = sum(int(d) for d in str(N))  # Calculate the sum of digits using a generator expression\n    return bin(digit_sum)[2:]  # Convert to binary and remove the '0b' prefix"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    # initialize an empty list to store the coordinates (x, y) of element 'x'\n    coordinates = []\n\n    # iterate over the rows in the matrix\n    for row_index, row in enumerate(lst):\n        # iterate over the elements in each row\n        for col_index, elem in enumerate(row):\n            # if the current element is equal to 'x', add its coordinates to the list\n            if elem == x:\n                coordinates.append((row_index, col_index))\n\n    # sort the coordinates first by row in ascending order and then by column in descending order\n    sorted_coordinates = sorted(coordinates, key=lambda y: (y[0], -y[1]))\n\n    return sorted_coordinates"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(result, key=lambda t: -t[1]), key=lambda t: t[0])"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if not lst or len(set(lst)) < 2:\n        return None\n    else:\n        return sorted(list(set(lst)))[1]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2: # check if list has less than 2 elements\n        return None\n\n    # sort the list\n    sorted_list = sorted(lst)\n\n    # return second smallest element\n    return sorted_list[1]"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')  # split the string into sentences based on '.', '?' and '!'\n    count = 0  # initialize count of bored sentences to zero\n\n    for sentence in sentences:\n        if len(sentence) > 0 and sentence[0] == \"I\":  # check if the first character of the sentence is 'I'\n            count += 1  # increment count if it is a bored sentence\n\n    return count"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')  # split string into sentences\n    count = sum([sentence.strip().startswith('I ') for sentence in sentences])  # count sentences starting with \"I\"\n    return count\n\nprint(Is_bored(\"Hello world\"))  # Output: 0\nprint(Is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "python/40", "language": "python", "completion": "from sympy import isPrime\n\ndef find_max_prime(lst):\n    return max([num for num in lst if IsPrime(num)])\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    return sum_of_digits(find_max_prime(lst))"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_of_digits(max_prime) if max_prime != -1 else 0\n\n# Test the function with given examples\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n\n    all_lower = all_upper = True\n\n    for key in dictionary:\n        if not isinstance(key, str):\n            return False\n\n        if all_lower and not key.islower():\n            All_lower = False\n        elif All_upper and not key.isupper():\n            All_upper = False\n\n    return All_lower or All_upper"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Check if dictionary is empty\n        return False\n    lower_count = sum([isinstance(key, str) and key.islower() for key in dictionary])\n    upper_count = sum([isinstance(key, str) and key.isupper() for key in dictionary])\n    if lower_count == len(dictionary) or upper_count == len(dictionary):  # Check if all keys are either all Lowercase or All Uppercase \n        return True\n    else:\n        return False"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)  # convert string to float\n    floor = int(num)  # get integer part of the number\n    ceiling = floor + 1  # get next integer (if it exists)\n\n    # if the number is exactly halfway between two integers, round away from zero\n    if abs(num - floor) == 0.5:\n        return ceiling if num > 0 else floor\n\n    # Otherwise, use standard rounding method\n    return round(num)"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    floor_val = int(num // 1)\n    if num >= 0:\n        ceil_val = floor_val + 1\n    else:\n        floor_val -= 1\n        ceil_val = floor_val + 2\n\n    if abs(num - floor_val) < abs(num - ceil_val):\n        return floor_val\n    else:\n        return ceil_val"}
{"task_id": "python/43", "language": "python", "completion": "def next_odd_or_even(num, is_odd=True):\n    if is_odd:\n        return num + 2 if num % 2 != 0 else num + 1\n    else:\n        return num + 2 if num % 2 == 0 else num + 1"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    # Erzeugen einer leeren Liste f\u00fcr die Anzahl der Steine pro Ebene\n    pile = []\n\n    # Wenn n ungerade ist, f\u00fcgen wir die n\u00e4chste ungerade Zahl hinzu\n    if n % 2 != 0:\n        for i in range(n):\n            next_odd = 2*i + 1\n            pile.append(next_odd)\n\n    # Wenn n gerade ist, f\u00fcgen wir die n\u00e4chste gerade Zahl hinzu\n    else:\n        for i in range(n):\n            next_even = 2*i\n            pile.append(next_even)\n\n    return pile"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.replace(\",\", \"\").split()"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Replace commas with spaces and split the string into words\n    words = s.replace(\",\", \" \").split()\n    return words"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    # Check if x is greater than y\n    if x > y:\n        return -1\n\n    # Start from the end of the range (y) and go backwards to find the largest even number\n    for i in range(y, x-1, -1):  # The third parameter (-1) makes the loop go backwards\n        if i % 2 == 0:  # Check if the number is even\n            return i\n\n    # If no even number was found in the range, return -1\n    return -1"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):  # iterate from y to x in reverse order\n            if i % 2 == 0:  # check if the number is even\n                return i\n    return -1  # return -1 if no even numbers are found\n\nprint(choose_num(12, 15))  # should print 14\nprint(choose_num(13, 12))  # should print -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        average = round(total/(m-n+1))\n        return bin(average)\n\nprint(rounded_avg(1, 5))  # Outputs: \"0b11\"\nprint(rounded_avg(7, 5))  # Outputs: -1\nprint(rounded_avg(10, 20))  # Outputs: \"0b1111\"\nprint(rounded_avg(20, 33))  # Outputs: \"0b11010\""}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        average = total / (m-n+1)\n        rounded_avg = round(average)\n        return bin(rounded_avg)\n\n# Test the function with given examples\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0: # even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else: # odd\n            sum_numbers = sum(range(1, i+1))\n            result.append(sum_numbers)\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0: # for even numbers, calculate factorial\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else: # for odd numbers, calculate sum from 1 to i\n            summation = sum(range(1, i+1))\n            result.append(summation)\n    return result\n\n# Testing the function with your example\nprint(f(5)) # Output should be [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even = 0  # Counter for even palindromes\n    odd = 0   # Counter for odd palindromes\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if number is a palindrome\n            if i % 2 == 0:  # If the number is even\n                even += 1\n            else:  # If the number is odd\n                odd += 1\n    return (even, odd)\n\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # if array is empty, return True\n        return True\n    for i in range(len(arr)):\n        if all(arr[i] >= arr[j] for j in range(i+1, len(arr))): \n            # If the sorted sub-array is greater or equal to the rest of the array\n            return True\n        arr = arr[-1:] + arr[:-1]  # Perform a right shift operation on the list\n    return False"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # Check if the array is empty\n        return True\n\n    counter = 0  # Counter for the number of shifts\n\n    for i in range(len(arr)):\n        if arr[i] != i + 1:  # If current element's value doesn't match its index+1\n            j = i + 1  # Find the correct position of the current element\n\n            while j < len(arr) and arr[j] != i + 1:  # Search for the correct position\n                j += 1\n\n            if j >= len(arr):  # If the element is not found in the remaining part of the array\n                return False  # Return False as it's impossible to sort the array\n\n            counter += j - i  # Increment the shift counter\n\n            # Perform the shift operation\n            for k in range(j, i, -1):\n                arr[k], arr[k-1] = arr[k-1], arr[k]\n\n    return True if counter < len(arr) else False  # Return True if number of shifts is less than array length"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    \"\"\"Implement the function that takes two lists of numbers as input and determines if it is possible to swap elements between them to make lst1 a list only with even numbers. There's no limit on the number of swaps between lst1 and lst2. If it's possible to exchange elements between lst1 and lst2 to make all elements from lst1 even, return \"YES\". Otherwise return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". It is assumed that the input lists will not be empty.\n    \"\"\"\n\n    # Check if lst1 has an even number of elements\n    if len(lst1) % 2 == 0:\n        return \"YES\"\n    else:\n        # Find even numbers in lst2 and odd numbers in lst1\n        even_in_lst2 = [x for x in lst2 if x % 2 == 0]\n        odd_in_lst1 = [x for x in lst1 If x % 2 != 0]\n\n        # Calculate the number of even numbers needed to make lst1 all even\n        even_needed = len(lst1) - len([x for x in lst1 if x % 2 == 0])\n\n        # Check if there are enough even numbers in lst2 to exchange with odd numbers in lst1\n        if len(even_in_lst2) >= even_needed:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    for num in lst1:\n        if num % 2 != 0:  # If number from lst1 is not even\n            even_num = None  # To keep track of an available even number from lst2\n            for i in range(len(lst2)):\n                if lst2[i] % 2 == 0:  # Found an even number in lst2\n                    even_num = lst2[i]\n                    lst2.pop(i)  # Remove it from lst2\n                    break\n            if even_num is None:  # No even number found in lst2\n                return \"NO\"\n            else:\n                lst1.append(even_num)  # Add the found even number to lst1\n    return \"YES\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # delete all characters in s that are present in c\n    new_s = ''.join([char for char in s if char not in c])\n  \n    # check if new_s is a palindrome\n    is_palindrome = new_s == new_s[::-1]\n  \n    return (new_s, is_palindrome)\n\nprint(reverse_delete(\"abcde\", \"ae\")) # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\")) # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\")) # ('cdedc', True)"}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Remove all characters in 's' that are present in 'c'\n    result = [char for char in s if char not in c]\n\n    # Convert the list to a string\n    result_str = ''.join(result)\n\n    # Check if the result is a palindrome\n    is_palindrome = result_str == result_str[::-1]\n\n    return (result_str, is_palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False] * cols for _ in range(rows)]\n    count = 0\n\n    def dfs(i, j):\n        nonlocal count\n        if visited[i][j]:\n            return\n        visited[i][j] = True\n        pump_operations = math.ceil(sum(grid[i]) / capacity)\n        count += pump_operations\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] > 0 and not visited[i][j]:\n                dfs(i, j)\n\n    return count"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    nrows = len(grid)\n    ncols = len(grid[0])\n\n    # Sort rows by number of ones in descending order\n    grid.sort(key=lambda row: sum(row), reverse=True)\n\n    drops = 0  # Number of bucket drops needed to empty all wells\n    for j in range(ncols):\n        water_level = capacity\n        for i in range(nrows):\n            if grid[i][j] == 1:\n                water_level -= 1\n                if water_level < 0:  # Need to lower the bucket\n                    drops += 1\n                    water_level = capacity - 1\n            if i == nrows - 1 and grid[i][j] == 0:  # Last row, but no water yet\n                drops += 1  # Need to drop an extra bucket for empty column\n\n    return drops"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    if not s:  # check if the input string is empty\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n\n    words = s.split()  # split the string into words\n    result = []\n\n    for word in words:\n        count = sum(1 for char in word if char in consonants)  # count the number of consonants in the word\n        if count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    consonants = ''.join([c for c in string.ascii_letters if c not in vowels])  # generate a string with all consonants\n\n    words = s.split()  # split the string into words\n    return [word for word in words if len(set(word) - set(vowels)) == n]  # return only words with exactly n consonants"}
{"task_id": "python/54", "language": "python", "completion": "import heapq as hq\n\ndef maximum(arr, k):\n    return sorted(hq.nlargest(k, arr))"}
{"task_id": "python/54", "language": "python", "completion": "import heapq as hp\n\ndef maximum(arr, k):\n    return sorted(hp.nlargest(k, arr))"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Initialize sum\n    sum = 0\n\n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the number has at most two digits\n        if arr[i] >= -99 and arr[i] <= 99:\n            # Add it to the sum\n            sum += arr[i]\n\n    return sum"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = end_min - start_max + 1\n\n    if intersection_length <= 0:\n        return \"NO\"\n    else:\n        return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    # Determine the max start point and min end point\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if length is a prime number\n    if length < 2:\n        return \"NO\"  # No positive integer can have a length less than 2\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"  # Not prime if divisible by any number other than 1 and itself\n    \n    return \"YES\"  # Is prime if no divisors were found\n\n\nprint(intersection((1, 2), (2, 3)))  # Outputs: NO\nprint(intersection((-1, 1), (0, 4)))  # Outputs: NO\nprint(intersection((-3, -1), (-5, 5)))  # Outputs: YES"}
{"task_id": "python/57", "language": "python", "completion": "def trib(n):\n    trib_list = [1, 3, 2]  # Starting point of Tribonacci sequence\n    if n < 3:\n        return trib_list[:n+1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:  # If i is even\n            trib_list.append(1 + (i / 2))\n        else:  # If i is odd\n            trib_list.append(trib_list[i-1] + trib_list[i-2] + trib_list[i+1])\n    return trib_list\n\nprint(trib(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        seq = [3, 1]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n            else:\n                seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n        return seq"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    has_odd = False  # Flag to check if there's any odd digit\n    while n > 0:\n        digit = n % 10  # Extract the last digit of n\n        if digit % 2 == 1:  # Check if it is an odd number\n            has_odd = True\n            product *= digit\n        n //= 10  # Remove the last digit from n\n    return product if has_odd else 0\n\nprint(digits(1))   # Output: 1\nprint(digits(4))   # Output: 0\nprint(digits(235)) # Output: 15"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    for num in str(n):\n        if int(num) % 2 != 0:\n            product *= int(num)\n            has_odd = True\n    return product if has_odd else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(s):\n  stack = []\n  for c in s:\n    if c == '[':\n      stack.append('[')\n    elif stack and stack[-1] == '[':\n      return True\n    else:\n      stack = []\n  return False\n\nprint(is_nested('[[]]')) # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]')) # \u279e False\nprint(is_nested('[]')) # \u279e False\nprint(is_nested('[[][]]')) # \u279e True\nprint(is_nested('[[]][[')) # \u279e True"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        num = math.ceil(num)  # Round to the nearest integer\n        total += num ** 2  # Square the number and add it to the total\n    return total"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(i)**2 for i in lst])"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if txt is empty\n    if not txt.strip():\n        return False\n\n    # Get last character of string\n    last_char = txt[-1]\n\n    # Check if the last char is a letter and not part of a word\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n\n    return False"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and (not txt[-1].isspace()) and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    return (max(negatives), min(positives))"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n\n    if negative:\n        largest_negative = max(negative)\n    else:\n        largest_negative = None\n\n    if positive:\n        smallest_positive = min(positive)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Outputs: (None, 1)\nprint(largest_smallest_integers([]))  # Outputs: (None, None)\nprint(largest_smallest_integers([0]))  # Outputs: (None, None)"}
{"task_id": "python/64", "language": "python", "completion": "def brazilian_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n    return result\n\nprint(brazilian_factorial(4))  # Output: 288"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result\n\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    # Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    # Zerlege den Satz in W\u00f6rter\n    words = sentence.split()\n\n    # Filtere die W\u00f6rter, die Primzahlen sind\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Konkateniere die gefilterten W\u00f6rter zu einem String\n    return ' '.join(prime_words)"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "python/66", "language": "python", "completion": "import math\n\ndef simplify(x, y):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_y, denominator_y = map(int, y.split('/'))\n\n    result_numerator = numerator_x * numerator_y\n    result_denominator = denominator_x * denominator_y\n\n    gcd = math.gcd(result_numerator, result_denominator)\n\n    return (result_numerator // gcd == result_denominator // gcd)\n\nprint(simplify(\"1/5\", \"5/1\"))  # Output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Output: False\nprint(simplify(\"7/10\", \"10/2\"))  # Output: False"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Split the string by '/' to get numerator and denominator\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n\n    # Calculate the product of two fractions\n    product = numerator_x * numerator_n / (denominator_x * denominator_n)\n\n    # Check if product is a whole number\n    return product == int(product)"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    # Calculate the sum of digits for each number\n    sums = [sum(int(digit) for digit in str(abs(num))) for num in nums]\n    \n    # Sort numbers based on the sum of their digits, then by their original index\n    return sorted(range(len(nums)), key=lambda x: (sums[x], x))\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "python/67", "language": "python", "completion": "def summe(n):\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    # Berechne die Summe der Ziffern f\u00fcr jedes Element\n    summen = [(index, summe(num)) for index, num in enumerate(nums)]\n    \n    # Sortiere die Liste basierend auf der Summe und dann auf dem Index\n    return [nums[i] for i, _ in sorted(enumerate(nums), key=lambda x: (summen[x[0]][1], summen[x[0]][0]))]"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (abs(num) % 2 != 0) and (str(abs(num))[0] in '13579') and (str(abs(num))[-1] in '13579'):\n            count += 1\n    return count"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test the function\nprint(specialFilter([15, -73, 14, -15])) # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Output: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Erstellen des Arrays a mit Werten von i*i - i + 1\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    # Initialisierung der Anzahl der Tripel\n    count = 0\n\n    # Iterieren \u00fcber die Array-Elemente\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n# Testen der Funktion\nprint(get_max_triples(5))  # Output: 1"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # create an array 'a' where each element is calculated as i * i - i + 1\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    count = 0   # to count the number of valid triplets\n    # iterate over all possible triplets (A[i], A[j], A[k]) where i < j < k\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # check if the sum of current triplet is a multiple of 3\n                if (a[i] + a[j] + A[k]) % 3 == 0:\n                    count += 1\n                    \n    return count   # return the number of valid triplets"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # Define the order of planets from the Sun\n    solar_system = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    # Check if both planet names are valid\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n\n    # Find the index positions of the planets\n    index1 = solar_system.index(planet1)\n    index2 = solar_system.index(planet2)\n\n    # Ensure index1 is less than index2 for correct slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    # Slice the list to get the planets in between, then sort them by their distance from the Sun\n    return tuple(solar_system[index1+1:index2])"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planeten = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    try:\n        index1, index2 = planeten.index(planet1), planeten.index(planet2)\n    except ValueError:\n        return ()\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planeten[i] for i in range(index1 + 1, index2))"}
{"task_id": "python/71", "language": "python", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y\n\n# Test the function\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "python/71", "language": "python", "completion": "def x_or_y(n, x, y):\n    if n < 2:  # 0 and 1 are not prime numbers\n        return y\n    for i in range(2, int(n**0.5) + 1):  # only check up to the square root of n\n        if n % i == 0:  # if n is divisible by any number between 2 and sqrt(n), it's not prime\n            return y\n    return x  # If we get here, n is a prime number"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 == 1]) * 2"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    sum = 0\n    for num in lst:\n        if type(num) == int and num > 0 and num % 2 != 0:\n            sum += num**2\n    return sum"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = ''\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            strongest, max_strength = extension, strength\n\n    return f'{class_name}.{strongest}'"}
{"task_id": "python/73", "language": "python", "completion": "def strongest_extension(class_name, extensions):\n    strongest = ''\n    strength = -float('inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension If c.islower())\n        current_strength = cap - sm\n\n        if current_strength > strength:\n            strongest, strength = extension, current_strength\n\n    return f'{class_name}.{strongest}'"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A, B):\n    for i in range(len(B)):\n        rotated = B[i:] + B[:i]\n        if rotated in A:\n            return True\n    return False"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A , b):\n    # convert to lower case\n    A = A.lower()\n    b = b.lower()\n    \n    # concatenate A with itself to handle rotation\n    A2 = A + A\n    \n    return b in A2\n\nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern_check(\"efef\",\"eeff\")) # False\nprint(cycpattern_check(\"himenss\",\"simen\")) # True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    val = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    syb = [\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()\n\nprint(int_to_mini_roman(19))  # Outputs: 'xix'\nprint(int_to_mini_roman(152)) # Outputs: 'clii'\nprint(int_to_mini_roman(426)) # Outputs: 'cdxxvi'"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    # Dictionary f\u00fcr die r\u00f6mischen Ziffern\n    roman = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',\n              5: 'v', 4: 'iv', 1: 'i'}\n\n    # Ergebnis-String initialisieren\n    result = ''\n\n    # Durch die Dictionary iterieren und Ziffern zur Ergebnis-Zeichenkette hinzuf\u00fcgen\n    for value in sorted(roman.keys(), reverse=True):\n        while number >= value:\n            number -= value\n            result += roman[value]\n\n    return result"}
{"task_id": "python/76", "language": "python", "completion": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle in ascending order\n    sides = sorted([A, b, c])\n\n    # Check if the sum of squares of two sides equals the square of the third side\n    if math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2):\n        return True\n    else:\n        return False"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Sortiere die Eingabewerte, um den Pythagoreischen Dreieckssatz zu erstellen\n    sides = sorted([A, b, c])\n\n    # \u00dcberpr\u00fcfe, ob der Quadrat der L\u00e4nge des Pythagoreischen Dreieckssatzes\n    # gleich dem Summe der Quadraten der anderen beiden Seiten ist.\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Testbeispiele:\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):  # Wenn der String keine Buchstaben enth\u00e4lt\n        return s[::-1]  # Kehre den String um\n\n    result = []  # Erstelle eine Liste, um die Umgedrehte Zeichen zu speichern\n\n    for char in s:\n        if char.isalpha():  # Wenn das Zeichen ein Buchstabe ist\n            # Kehre die Gro\u00df- und Kleinschreibung um\n            result.append(char.swapcase())\n        else:\n            result.append(char)  # Belasse es so wie es ist\n\n    return ''.join(result)  # Fasse die Liste zu einem String zusammen und gebe ihn zur\u00fcck"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):  # Check if the string contains no letters\n        return s[::-1]  # Return the reversed string\n\n    result = []\n    for char in s:\n        if char.isalpha():  # If the character is a letter, swap its case\n            result.append(char.swapcase())\n        else:  # If the character is not a letter, keep it as is\n            result.append(char)\n\n    return ''.join(result)  # Join the list of characters back into a string"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        hex_dig = hash_object.hexdigest()\n        return hex_dig\n\nprint(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(A, B):\n    if A > B: # If A is greater than B swap them\n        A, B = B, A\n    return [n for n in range(A, B+1) if n % 2 == 0]"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    # ensure that a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # create an empty list to store the even numbers\n    even_numbers = []\n\n    # iterate from a to b (inclusive)\n    for i in range(a, b + 1):\n        # if the number is even, append it to the list\n        if i % 2 == 0:\n            even_numbers.append(i)\n\n    return even_numbers"}

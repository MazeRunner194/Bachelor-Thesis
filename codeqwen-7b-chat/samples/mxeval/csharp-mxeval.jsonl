{"task_id": "HumanEval_csharp/0", "language": "csharp", "completion": "public static bool HasCloseElements(List<double> numbers, double threshold) \n{\n    for (int i = 0; i < numbers.Count; i++) \n    {\n        for (int j = i + 1; j < numbers.Count; j++) \n        {\n            if (Math.Abs(numbers[i] - numbers[j]) <= threshold) \n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_csharp/1", "language": "csharp", "completion": "public class Program\n{\n    public static List<string> SeparateParenGroups(string parenString)\n    {\n        parenString = Regex.Replace(parenString, @\"\\s+\", \"\"); // Remove spaces from the input string\n\n        List<string> result = new List<string>();\n        int balance = 0;\n        int startIndex = -1;\n\n        for (int i = 0; i < parenString.Length; i++)\n        {\n            if (parenString[i] == '(')\n            {\n                if (balance == 0)\n                {\n                    startIndex = i;\n                }\n                balance++;\n            }\n            else if (parenString[i] == ')')\n            {\n                balance--;\n                if (balance == 0)\n                {\n                    result.Add(parenString.Substring(startIndex, i - startIndex + 1));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static void Main(string[] args)\n    {\n        var groups = SeparateParenGroups(\"( ) (( )) (( )( ))\");\n        foreach (var group in groups)\n        {\n            Console.WriteLine(group);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/2", "language": "csharp", "completion": "public static double TruncateNumber(double number) \n{\n    return number - Math.Floor(number);\n}"}
{"task_id": "HumanEval_csharp/3", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool BelowZero(List<int> operations) \n        {\n            int balance = 0; // Initialize the account balance to zero\n\n            foreach (var operation in operations) \n            {\n                balance += operation; // Update the balance with each deposit or withdrawal\n\n                if (balance < 0) \n                {\n                    return true; // Return True if the balance falls below zero at any point\n                }\n            }\n\n            return false; // Return False if the balance never falls below zero\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(BelowZero(new List<int> {1, 2, 3})); // Expected output: False\n            Console.WriteLine(BelowZero(new List<int> {1, 2, -4, 5})); // Expected output: True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/4", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass StatisticsCalculator\n{\n    public static double MeanAbsoluteDeviation(List<double> numbers)\n    {\n        if (numbers == null || numbers.Count == 0)\n        {\n            throw new ArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        double mean = numbers.Average();\n        double sumOfAbsoluteDifferences = numbers.Sum(number => Math.Abs(number - mean));\n\n        return sumOfAbsoluteDifferences / numbers.Count;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<double> inputNumbers = new List<double> { 1.0, 2.0, 3.0, 4.0 };\n        double mad = StatisticsCalculator.MeanAbsoluteDeviation(inputNumbers);\n\n        Console.WriteLine($\"The Mean Absolute Deviation of the dataset is: {mad}\");\n    }\n}"}
{"task_id": "HumanEval_csharp/5", "language": "csharp", "completion": "public static List<int> Intersperse(List<int> numbers, int delimiter)\n{\n    if (numbers == null || numbers.Count <= 1)\n    {\n        return numbers;\n    }\n\n    var interspersedNumbers = new List<int>();\n    for (int i = 0; i < numbers.Count - 1; i++)\n    {\n        interspersedNumbers.Add(numbers[i]);\n        interspersedNumbers.Add(delimiter);\n    }\n    interspersedNumbers.Add(numbers[numbers.Count - 1]);\n\n    return interspersedNumbers;\n}"}
{"task_id": "HumanEval_csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> ParseNestedParens(string paren_string)\n    {\n        // Split the input string into individual groups based on spaces\n        var groups = paren_string.Split(' ');\n\n        List<int> results = new List<int>();\n\n        foreach (var group in groups)\n        {\n            int maxDepth = 0;\n            int currentDepth = 0;\n\n            // Iterate through each character in the group string\n            foreach (char c in group)\n            {\n                if (c == '(')\n                {\n                    currentDepth++;\n                    maxDepth = Math.Max(maxDepth, currentDepth);\n                }\n                else if (c == ')')\n                {\n                    currentDepth--;\n                }\n            }\n\n            // Add the maximum depth of nesting for this group to the results list\n            results.Add(maxDepth);\n        }\n\n        return results;\n    }\n}"}
{"task_id": "HumanEval_csharp/7", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static List<string> FilterBySubstring(List<string> strings, string substring)\n        {\n            // Check if the input list is null or empty, return an empty list if true\n            if (strings == null || !strings.Any())\n            {\n                return new List<string>();\n            }\n\n            // Use LINQ to filter the list based on the presence of the substring\n            var filteredList = strings.Where(s => s.Contains(substring)).ToList();\n\n            return filteredList;\n        }\n\n        static void Main(string[] args)\n        {\n            Debug.Assert(FilterBySubstring(new List<string>(), 'A').SequenceEqual(new List<string>()));\n            Debug.Assert(FilterBySubstring(new List<string> { \"abc\", \"bacd\", \"cde\", \"array\" }, 'A').SequenceEqual(new List<string> { \"abc\", \"bacd\", \"array\" }));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Calculates the sum and product of a list of integers. Empty list results in sum=0 and product=1.\n        /// </summary>\n        public static Tuple<int, int> SumProduct(List<int> numbers) \n        {\n            if (numbers == null || !numbers.Any())\n            {\n                return Tuple.Create(0, 1);\n            }\n\n            int sum = numbers.Sum();\n            int product = numbers.Aggregate(1, (acc, val) => acc * val);\n\n            return Tuple.Create(sum, product);\n        }\n\n        // Test function to verify the correctness of SumProduct method\n        public static void Main()\n        {\n            Console.WriteLine(SumProduct(new List<int>())); // Expected: (0, 1)\n            Console.WriteLine(SumProduct(new List<int> {1, 2, 3, 4})); // Expected: (10, 24)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/9", "language": "csharp", "completion": "public class Program\n{\n    public static List<int> RollingMax(List<int> numbers)\n    {\n        var result = new List<int>();\n        if (numbers == null || !numbers.Any()) return result;\n\n        result.Add(numbers[0]); // Add the first number to the list\n\n        for (int i = 1; i < numbers.Count; i++)\n        {\n            // If the current number is greater than or equal to the maximum found so far, add it to the result list\n            if (numbers[i] >= result.Last())\n                result.Add(numbers[i]);\n            else // Otherwise, just add the last max element to the result list\n                result.Add(result.Last());\n        }\n\n        return result;\n    }\n\n    static void Main(string[] args)\n    {\n        var test = new List<int> { 1, 2, 3, 2, 3, 4, 2 };\n        Console.WriteLine($\"Rolling Max: [{string.Join(\", \", RollingMax(test))}]\");\n\n        // Outputs: [1, 2, 3, 3, 3, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string MakePalindrome(string input)\n        {\n            if (string.IsNullOrEmpty(input))\n            {\n                return \"\";\n            }\n\n            int len = input.Length;\n            string reversedInput = new string(input.Reverse().ToArray());\n\n            for (int i = 0; i < len; i++)\n            {\n                if (input.Substring(i) == reversedInput.Substring(0, len - i))\n                {\n                    return input + reversedInput.Substring(len - i);\n                }\n            }\n\n            return input + reversedInput.Substring(1); // In case no palindromic postfix is found, append the entire reversed string excluding the first character\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(MakePalindrome(\"\"));\n            Console.WriteLine(MakePalindrome(\"cat\"));\n            Console.WriteLine(MakePalindrome(\"cata\"));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/11", "language": "csharp", "completion": "public static string StringXor(string a, string B)\n{\n    // Convert the input strings to integers using binary parse method\n    int numA = int.Parse(A, System.Globalization.NumberStyles.Binary);\n    int numB = int.Parse(B, System.Globalization.NumberStyles.Binary);\n\n    // Perform XOR operation on the two numbers\n    int xorResult = numA ^ numB;\n\n    // Convert the result back to a binary string and return it\n    return Convert.ToString(xorResult, 2).PadLeft(A.Length, '0');\n}"}
{"task_id": "HumanEval_csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Longest(List<string> strings)\n        {\n            if (strings == null || strings.Count == 0)\n            {\n                return null;\n            }\n            else\n            {\n                return strings.OrderByDescending(s => s.Length).FirstOrDefault();\n            }\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(Longest(new List<string>())); // Output: null\n            Console.WriteLine(Longest(new List<string>(new string[] { \"A\", \"b\", \"c\" }))); // Output: A\n            Console.WriteLine(Longest(new List<string>(new string[] { \"A\", \"bb\", \"ccc\" }))); // Output: ccc\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/13", "language": "csharp", "completion": "public static int GreatestCommonDivisor(int A, int b) \n{\n    while (b != 0) \n    {\n        int temp = b;\n        b = A % b;\n        A = temp;\n    }\n    return A;\n}\n\n// Test the function\npublic static void Main() \n{\n    Console.WriteLine(GreatestCommonDivisor(3, 5)); // Output: 1\n    Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n}"}
{"task_id": "HumanEval_csharp/14", "language": "csharp", "completion": "public static List<string> AllPrefixes(string input)\n{\n    List<string> prefixes = new List<string>();\n    for (int i = 1; i <= input.Length; i++)\n    {\n        prefixes.Add(input.Substring(0, i));\n    }\n    return prefixes;\n}"}
{"task_id": "HumanEval_csharp/15", "language": "csharp", "completion": "public class Program\n{\n    /// <summary>\n    /// Generate a space-delimited sequence of numbers starting from 0 to n inclusive.\n    /// </summary>\n    /// <param name=\"n\">The end number of the sequence.</param>\n    /// <returns>A string representing the sequence.</returns>\n    public static string StringSequence(int n)\n    {\n        return string.Join(\" \", Enumerable.Range(0, n + 1));\n    }\n\n    static void Main()\n    {\n        // Example usage:\n        Console.WriteLine(StringSequence(0));  // Outputs: '0'\n        Console.WriteLine(StringSequence(5));  // Outputs: '0 1 2 3 4 5'\n    }\n}"}
{"task_id": "HumanEval_csharp/16", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int CountDistinctCharacters(string input)\n    {\n        // Convert the string to lowercase to ensure case-insensitive comparison\n        input = input.ToLower();\n\n        // Use a HashSet to store distinct characters\n        HashSet<char> distinctChars = new HashSet<char>(input);\n\n        // Return the count of distinct characters\n        return distinctChars.Count;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CountDistinctCharacters('xyzXYZ')); // Output: 3\n        Console.WriteLine(CountDistinctCharacters('Jerry')); // Output: 4\n    }\n}"}
{"task_id": "HumanEval_csharp/17", "language": "csharp", "completion": "List<int> beats = ParseMusic(\"o o| .| o| o| .| .| .| .| o o\");\nforeach(var beat in beats)\n{\n    Console.WriteLine(beat);\n}"}
{"task_id": "HumanEval_csharp/18", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Program\n{\n    public static int HowManyTimes(string originalString, string substring)\n    {\n        if (string.IsNullOrEmpty(originalString) || string.IsNullOrEmpty(substring))\n            return 0;\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = originalString.IndexOf(substring, index)) != -1)\n        {\n            count++;\n            index++; // Increase index to allow for overlapping matches\n        }\n\n        return count;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(HowManyTimes(\"\", \"A\")); // Output: 0\n        Console.WriteLine(HowManyTimes(\"aaa\", \"A\")); // Output: 3\n        Console.WriteLine(HowManyTimes(\"aaaa\", \"aa\")); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_csharp/19", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string SortNumbers(string numbers)\n        {\n            // Mapping of numerical words to their corresponding integers\n            Dictionary<string, int> numberMap = new Dictionary<string, int>\n            {\n                {\"zero\", 0},\n                {\"one\", 1},\n                {\"two\", 2},\n                {\"three\", 3},\n                {\"four\", 4},\n                {\"five\", 5},\n                {\"six\", 6},\n                {\"seven\", 7},\n                {\"eight\", 8},\n                {\"nine\", 9}\n            };\n\n            // Split the input string into an array of words, convert them to integers using the dictionary and sort the list\n            var sortedNumbers = numbers.Split(' ')\n                                     .Select(word => numberMap[word])\n                                     .OrderBy(num => num)\n                                     .ToList();\n\n            // Convert the sorted integers back to a space-delimited string of words and return it\n            return String.Join(\" \", sortedNumbers.Select(num => numberMap.FirstOrDefault(x => x.Value == num).Key));\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(SortNumbers(\"three one five\")); // Output: \"one three five\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/20", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<double> FindClosestElements(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n            }\n\n            // Initialize with the first two elements, which are guaranteed to be closer than any other pair.\n            double minDifference = Math.Abs(numbers[0] - numbers[1]);\n            List<double> closestElements = new List<double>(2) { numbers[0], numbers[1] };\n\n            // Iterate through each element in the list, comparing it with every other element to find the smallest difference.\n            for (int i = 0; i < numbers.Count - 1; i++)\n            {\n                for (int j = i + 1; j < numbers.Count; j++)\n                {\n                    double currentDifference = Math.Abs(numbers[i] - numbers[j]);\n                    if (currentDifference < minDifference)\n                    {\n                        minDifference = currentDifference;\n                        closestElements[0] = Math.Min(numbers[i], numbers[j]);\n                        closestElements[1] = Math.Max(numbers[i], numbers[j]);\n                    }\n                }\n            }\n\n            // Ensure the returned list is ordered from smallest to largest.\n            closestElements.Sort();\n\n            return closestElements;\n        }\n\n        static void Main(string[] args)\n        {\n            List<double> result1 = FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.2 });\n            Console.WriteLine($\"({result1[0]}, {result1[1]})\");\n\n            List<double> result2 = FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.0 });\n            Console.WriteLine($\"({result2[0]}, {result2[1]})\");\n\n            // Add more test cases as needed\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/21", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n            }\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n            double range = max - min;\n\n            if (range == 0)\n            {\n                throw new InvalidOperationException(\"The list cannot have all identical elements for rescaling to unit.\");\n            }\n\n            return numbers.Select(num => (num - min) / range).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            var result = RescaleToUnit(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 });\n            Console.WriteLine($\"[{string.Join(\", \", result)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> FilterIntegers (List<object> values) \n        {\n            return values.OfType<int>().ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the function\n            var list1 = new List<object> { 'A', 3.14, 5 };\n            var filteredList1 = FilterIntegers(list1);\n            Console.WriteLine($\"Filtered List 1: [{string.Join(\", \", filteredList1)}]\");\n\n            var list2 = new List<object> { 1, 2, 3, \"abc\", new Dictionary<string, int>(), new List<int>() };\n            var filteredList2 = FilterIntegers(list2);\n            Console.WriteLine($\"Filtered List 2: [{string.Join(\", \", filteredList2)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/23", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // This method returns the length of a given string\n        public static int Strlen(string inputString)\n        {\n            return inputString.Length;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Strlen(\"\")); // output: 0\n            Console.WriteLine(Strlen(\"abc\")); // output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/24", "language": "csharp", "completion": "public static int LargestDivisor(int n) \n{\n    for (int i = n - 1; i >= 1; i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    return 1; // If no divisors are found, return 1. This is only for positive numbers greater than 1.\n}"}
{"task_id": "HumanEval_csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"Factorize(8): [{string.Join(\", \", Factorize(8))}]\");\n            Console.WriteLine($\"Factorize(25): [{string.Join(\", \", Factorize(25))}]\");\n            Console.WriteLine($\"Factorize(70): [{string.Join(\", \", Factorize(70))}]\");\n        }\n\n        public static List<int> Factorize(int n)\n        {\n            List<int> factors = new List<int>();\n            // Divide by 2 until it's odd\n            while (n % 2 == 0)\n            {\n                factors.Add(2);\n                n /= 2;\n            }\n\n            // Check for odd factors from 3 to the square root of n\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            {\n                while (n % i == 0)\n                {\n                    factors.Add(i);\n                    n /= i;\n                }\n            }\n\n            // If n is a prime number greater than 2\n            if (n > 2)\n            {\n                factors.Add(n);\n            }\n\n            return factors;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/26", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> RemoveDuplicates(List<int> numbers)\n        {\n            var counts = numbers.GroupBy(n => n).ToDictionary(g => g.Key, g => g.Count());\n\n            return numbers.Where(n => counts[n] == 1).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            var list = new List<int> { 1, 2, 3, 2, 4 };\n            var result = RemoveDuplicates(list);\n            Console.WriteLine($\"[{string.Join(\", \", result)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/27", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    // This method flips the case of each character in the given string: lowercase characters become uppercase and vice versa.\n    public static string FlipCase(string inputString)\n    {\n        char[] charArray = inputString.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++)\n        {\n            if (char.IsLower(charArray[i]))\n            {\n                charArray[i] = char.ToUpper(charArray[i]);\n            }\n            else if (char.IsUpper(charArray[i]))\n            {\n                charArray[i] = char.ToLower(charArray[i]);\n            }\n        }\n        return new string(charArray);\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(FlipCase('Hello')); // Expected output: 'hELLO'\n    }\n}"}
{"task_id": "HumanEval_csharp/28", "language": "csharp", "completion": "public static string Concatenate(List<string> strings) \n{\n    return string.Join(\"\", strings);\n}"}
{"task_id": "HumanEval_csharp/29", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Filters an input list of strings only for ones that start with a given prefix.\n        /// </summary>\n        public static List<string> FilterByPrefix(List<string> strings, string prefix)\n        {\n            return strings.Where(s => s.StartsWith(prefix)).ToList();\n        }\n\n        // Test the function\n        static void Main(string[] args)\n        {\n            var test1 = new List<string>();\n            var result1 = FilterByPrefix(test1, 'A');\n            Console.WriteLine($\"Test 1: {(result1.Count == 0 ? \"Passed\" : \"Failed\")}\");\n\n            var test2 = new List<string> { \"abc\", \"bcd\", \"cde\", \"array\" };\n            var result2 = FilterByPrefix(test2, 'A');\n            Console.WriteLine($\"Test 2: {(result2.SequenceEqual(new List<string> { \"abc\", \"array\" }) ? \"Passed\" : \"Failed\")}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/30", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    // Return only positive numbers in the list.\n    public static List<long> GetPositive(List<long> l) {\n        return l.Where(number => number > 0).ToList();\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(String.Join(\", \", GetPositive(new List<long>{-1, 2L, -4L, 5L, 6L})));\n        Console.WriteLine(String.Join(\", \", GetPositive(new List<long>{5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L})));\n    }\n}"}
{"task_id": "HumanEval_csharp/31", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsPrime(6)); // Output: False\n        Console.WriteLine(IsPrime(101)); // Output: True\n        Console.WriteLine(IsPrime(11)); // Output: True\n        Console.WriteLine(IsPrime(13441)); // Output: True\n        Console.WriteLine(IsPrime(61)); // Output: True\n        Console.WriteLine(IsPrime(4)); // Output: False\n        Console.WriteLine(IsPrime(1)); // Output: False\n    }\n\n    /// <summary>\n    /// Determines whether the specified number is prime.\n    /// </summary>\n    /// <param name=\"number\">The number to check.</param>\n    /// <returns>true if the specified number is prime; otherwise, false.</returns>\n    public static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (number % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_csharp/33", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> SortThird(List<int> l)\n        {\n            // Get elements at indices divisible by three\n            var thirdIndexElements = l.Where((value, index) => (index + 1) % 3 == 0).OrderBy(x => x).ToList();\n\n            // Create new list to store the result\n            var sortedThirdIndexElements = new List<int>();\n            \n            // Iterate over the original list and replace elements at indices divisible by three with sorted ones\n            for (int i = 0; i < l.Count; i++)\n            {\n                if ((i + 1) % 3 == 0)\n                {\n                    sortedThirdIndexElements.Add(thirdIndexElements[sortedThirdIndexElements.Count - 1]);\n                    thirdIndexElements.RemoveAt(thirdIndexElements.Count - 1);\n                }\n                else\n                {\n                    sortedThirdIndexElements.Add(l[i]);\n                }\n            }\n\n            return sortedThirdIndexElements;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", SortThird(new List<int> { 1, 2, 3 }))); // Output: 1, 2, 3\n            Console.WriteLine(string.Join(\", \", SortThird(new List<int> { 5, 6, 3, 4, 8, 9, 2 }))); // Output: 2, 6, 3, 4, 8, 9, 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Returns a sorted list of unique elements from the given list\n        /// </summary>\n        public static List<int> Unique(List<int> l) \n        {\n            return l.Distinct().OrderBy(x => x).ToList();\n        }\n\n        // Test the method\n        static void Main(string[] args)\n        {\n            var list = new List<int> {5, 3, 5, 2, 3, 3, 9, 0, 123};\n            var uniqueList = Unique(list);\n            Console.WriteLine($\"Unique elements: [{string.Join(\", \", uniqueList)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/35", "language": "csharp", "completion": "public static int MaxElement(List<int> l)\n{\n    if (l == null || l.Count == 0)\n    {\n        throw new ArgumentException(\"The list cannot be null or empty.\");\n    }\n\n    int max = l[0];\n\n    foreach (int num in l)\n    {\n        if (num > max)\n        {\n            max = num;\n        }\n    }\n\n    return max;\n}"}
{"task_id": "HumanEval_csharp/36", "language": "csharp", "completion": "public static int FizzBuzz(int n) \n{\n    int count = 0;\n    for (int i = 1; i < n; i++) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n        {\n            if (i.ToString().Contains('7')) \n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> SortEven(List<int> l)\n        {\n            // Extract even-indexed elements and sort them\n            var evenIndexedElements = l.Where((value, index) => index % 2 == 0).OrderBy(x => x).ToList();\n\n            // Create the new list with sorted even-indexed elements and original odd-indexed elements\n            var result = new List<int>();\n            int evenIndex = 0;\n            for (int i = 0; i < l.Count; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    result.Add(evenIndexedElements[evenIndex++]);\n                }\n                else\n                {\n                    result.Add(l[i]);\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage:\n            var list1 = new List<int> { 1, 2, 3 };\n            var sortedList1 = SortEven(list1);\n            Console.WriteLine($\"Sorted Even: [{string.Join(\", \", sortedList1)}]\"); // Output: Sorted Even: [1, 2, 3]\n\n            var list2 = new List<int> { 5, 6, 3, 4 };\n            var sortedList2 = SortEven(list2);\n            Console.WriteLine($\"Sorted Even: [{string.Join(\", \", sortedList2)}]\"); // Output: Sorted Even: [3, 6, 5, 4]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/39", "language": "csharp", "completion": "public static int PrimeFib(int n)\n{\n    if (n <= 0) throw new ArgumentOutOfRangeException(nameof(n), \"Input must be a positive integer.\");\n\n    int count = 0;\n    long fib1 = 2, fib2 = 3, fibNext = 0;\n\n    while (true)\n    {\n        if (IsPrime(fib1))\n        {\n            count++;\n            if (count == n) return (int)fib1;\n        }\n\n        if (n == count) break;\n\n        fibNext = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fibNext;\n    }\n\n    throw new InvalidOperationException(\"Could not find n-th prime Fibonacci number.\");\n}\n\nprivate static bool IsPrime(long number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (long)Math.Floor(Math.Sqrt(number));\n\n    for (long i = 3; i <= boundary; i += 2)\n        if (number % i == 0)\n            return false;\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/40", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static bool TriplesSumToZero(List<int> l) {\n        // Sort the list to make it easier to find triples that sum to zero.\n        l.Sort();\n\n        for (int i = 0; i < l.Count - 2; i++) {\n            // Use two pointers approach to check for a triple that sums to zero.\n            int left = i + 1, right = l.Count - 1;\n            while (left < right) {\n                int sum = l[i] + l[left] + l[right];\n                if (sum == 0) {\n                    return true; // Found a triple that sums to zero.\n                } else if (sum < 0) {\n                    left++; // Need a larger sum, move left pointer to the right.\n                } else {\n                    right--; // Need a smaller sum, move right pointer to the left.\n                }\n            }\n        }\n\n        return false; // No triples that sum to zero found.\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(TriplesSumToZero(new List<int>{1, 3, 5, 0}));\n        Console.WriteLine(TriplesSumToZero(new List<int>{1, 3, -2, 1}));\n        Console.WriteLine(TriplesSumToZero(new List<int>{1, 2, 3, 7}));\n        Console.WriteLine(TriplesSumToZero(new List<int>{2, 4, -5, 3, 9, 7}));\n        Console.WriteLine(TriplesSumToZero(new List<int>{1}));\n    }\n}"}
{"task_id": "HumanEval_csharp/41", "language": "csharp", "completion": "public static int CarRaceCollision(int n) \n{\n    return n * n;\n}"}
{"task_id": "HumanEval_csharp/42", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return list with elements incremented by 1.\n        /// >>> IncrList([1, 2, 3])\n        /// [2, 3, 4]\n        /// >>> IncrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [6, 4, 6, 3, 4, 4, 10, 1, 124]\n        /// \n        /// </summary>\n        public static List<int> IncrList (List<int> l) \n        {\n            return l.Select(x => x + 1).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"[2, 3, 4] == {String.Join(\", \", IncrList(new List<int> {1, 2, 3}))}\");\n            Console.WriteLine($\"[6, 4, 6, 3, 4, 4, 10, 1, 124] == {String.Join(\", \", IncrList(new List<int> {5, 3, 5, 2, 3, 3, 9, 0, 123}))}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/43", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static bool PairsSumToZero(List<int> l) {\n        HashSet<int> seenNumbers = new HashSet<int>();\n        foreach (var number in l) {\n            if (seenNumbers.Contains(-number)) {\n                return true;\n            }\n            seenNumbers.Add(number);\n        }\n        return false;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(PairsSumToZero(new List<int>{1, 3, 5, 0}) == false ? \"Test 1 Passed\" : \"Test 1 Failed\");\n        Console.WriteLine(PairsSumToZero(new List<int>{1, 3, -2, 1}) == false ? \"Test 2 Passed\" : \"Test 2 Failed\");\n        Console.WriteLine(PairsSumToZero(new List<int>{1, 2, 3, 7}) == false ? \"Test 3 Passed\" : \"Test 3 Failed\");\n        Console.WriteLine(PairsSumToZero(new List<int>{2, 4, -5, 3, 5, 7}) == true ? \"Test 4 Passed\" : \"Test 4 Failed\");\n        Console.WriteLine(PairsSumToZero(new List<int>{1}) == false ? \"Test 5 Passed\" : \"Test 5 Failed\");\n    }\n}"}
{"task_id": "HumanEval_csharp/44", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    // Converts an integer to a specified base and returns its string representation.\n    // The base must be between 2 and 9, inclusive.\n    public static string ChangeBase(int x, int baseNum) {\n        if (baseNum < 2 || baseNum > 9) {\n            throw new ArgumentException(\"Base must be between 2 and 9.\");\n        }\n\n        string result = \"\";\n        while (x > 0) {\n            result = (x % baseNum).ToString() + result;\n            x /= baseNum;\n        }\n\n        return result == \"\" ? \"0\" : result;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(ChangeBase(8, 3)); // Output: '22'\n        Console.WriteLine(ChangeBase(8, 2)); // Output: '1000'\n        Console.WriteLine(ChangeBase(7, 2)); // Output: '111'\n    }\n}"}
{"task_id": "HumanEval_csharp/45", "language": "csharp", "completion": "public static double TriangleArea(int A, int h) \n{\n    return 0.5 * A * h;\n}"}
{"task_id": "HumanEval_csharp/46", "language": "csharp", "completion": "C#\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(Fib4(5));  // Outputs: 4\n        Console.WriteLine(Fib4(6));  // Outputs: 8\n        Console.WriteLine(Fib4(7));  // Outputs: 14\n    }\n\n    public static int Fib4(int n)\n    {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int a = 0, B = 0, C = 2, D = 0; // Initial values for Fib4(0), Fib4(1), Fib4(2), and Fib4(3) respectively\n\n        for (int i = 4; i <= n; i++)\n        {\n            D = A + B + C + D;\n            A = B;\n            B = C;\n            C = D;\n        }\n\n        return D;\n    }\n}"}
{"task_id": "HumanEval_csharp/47", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static double Median(List<int> l) {\n        // Sort the list to find the median\n        l.Sort();\n\n        int size = l.Count;\n        int midIndex = size / 2;\n\n        // If the list has an odd number of elements, return the middle element\n        if (size % 2 != 0) {\n            return l[midIndex];\n        }\n\n        // If the list has an even number of elements, return the average of the two middle elements\n        return (l[midIndex - 1] + l[midIndex]) / 2.0;\n    }\n}\n\n// Test cases:\nConsole.WriteLine(Solution.Median(new List<int>{3, 1, 2, 4, 5})); // Output: 3\nConsole.WriteLine(Solution.Median(new List<int>{-10, 4, 6, 1000, 10, 20})); // Output: 15.0"}
{"task_id": "HumanEval_csharp/48", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsPalindrome(\"\")); // True\n            Console.WriteLine(IsPalindrome(\"aba\")); // True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n\n            // Additional test cases\n            Console.WriteLine(IsPalindrome(\"A man, a plan, a canal: Panama\")); // True\n        }\n\n        /// <summary>\n        /// Checks if the provided string is a palindrome, ignoring case and non-alphanumeric characters.\n        /// </summary>\n        public static bool IsPalindrome(string text)\n        {\n            // Remove all non-alphanumeric characters and convert to lowercase\n            var processedText = Regex.Replace(text, \"[^A-Za-Z0-9]\", \"\").ToLower();\n\n            // Compare the string with its reverse\n            return processedText.SequenceEqual(processedText.Reverse());\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/49", "language": "csharp", "completion": "public static int Modp(int n, int p)\n{\n    if (n == 0) return 1;\n\n    long result = 1;\n    long baseValue = 2;\n\n    while (n > 0)\n    {\n        if (n % 2 == 1) // If the last bit is 1, multiply the result with the current base value\n            result = (result * baseValue) % p;\n\n        baseValue = (baseValue * baseValue) % p; // Square the base value and take modulus at each step\n        n /= 2; // Reduce n by half\n    }\n\n    return (int)result;\n}"}
{"task_id": "HumanEval_csharp/51", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string RemoveVowels(string text)\n        {\n            // Define a regular expression pattern for vowels\n            string vowelPattern = \"[aeiouAEIOU]\";\n\n            // Use Regex.Replace to replace all occurrences of the pattern with an empty string\n            return Regex.Replace(text, vowelPattern, \"\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/52", "language": "csharp", "completion": "public static bool BelowThreshold(List<int> l, int t)\n{\n    // Check if all numbers in list are below threshold\n    foreach (int num in l)\n    {\n        if (num >= t)\n        {\n            return false;\n        }\n    }\n\n    // If no number was greater than or equal to the threshold, return true\n    return true;\n}"}
{"task_id": "HumanEval_csharp/53", "language": "csharp", "completion": "public class Program\n{\n    // Method to add two integers x and y\n    public static int Add(int x, int y)\n    {\n        return x + y;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(Add(2, 3)); // Output: 5\n        Console.WriteLine(Add(5, 7)); // Output: 12\n    }\n}"}
{"task_id": "HumanEval_csharp/54", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\n        Console.WriteLine(SameChars('abcd', 'dddddddabc')); // True\n        Console.WriteLine(SameChars('dddddddabc', 'abcd')); // True\n        Console.WriteLine(SameChars('eabcd', 'dddddddabc')); // False\n        Console.WriteLine(SameChars('abcd', 'dddddddabce')); // False\n        Console.WriteLine(SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False\n\n        // Helper function to check if two words have the same characters\n        bool SameChars(string s0, string s1) \n        {\n            var set0 = new HashSet<char>(s0);\n            var set1 = new HashSet<char>(s1);\n\n            return set0.Count == set1.Count && !set0.Except(set1).Any();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/55", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass FibonacciCalculator\n{\n    // Return the n-th Fibonacci number.\n    public static int Fib(int n)\n    {\n        if (n <= 0) return 0;\n        else if (n == 1) return 1;\n        else return Fib(n - 1) + Fib(n - 2);\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(Fib(10)); // Output: 55\n        Console.WriteLine(Fib(1));  // Output: 1\n        Console.WriteLine(Fib(8));  // Output: 21\n    }\n}"}
{"task_id": "HumanEval_csharp/56", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static bool CorrectBracketing(string brackets) {\n        // Initialize a counter for the number of open brackets.\n        int openCount = 0;\n\n        // Loop through each character in the string.\n        foreach (char bracket in brackets) {\n            if (bracket == '<') {\n                // If it's an opening bracket, increment the counter.\n                openCount++;\n            } else if (bracket == '>') {\n                // If it's a closing bracket, decrement the counter.\n                openCount--;\n\n                // If at any point we have more closing brackets than opening ones, return false.\n                if (openCount < 0) {\n                    return false;\n                }\n            }\n        }\n\n        // If the counter is zero, all brackets were matched correctly.\n        return openCount == 0;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(CorrectBracketing(\"<\")); // Output: False\n        Console.WriteLine(CorrectBracketing(\"<>\")); // Output: True\n        Console.WriteLine(CorrectBracketing(\"<<><>>\")); // Output: True\n        Console.WriteLine(CorrectBracketing(\"><<>\")); // Output: False\n    }\n}"}
{"task_id": "HumanEval_csharp/57", "language": "csharp", "completion": "public static bool Monotonic(List<int> l)\n{\n    // Check if list is empty or contains one element\n    if (l.Count <= 1) return true;\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (int i = 0; i < l.Count - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n            increasing = false;\n        else if (l[i] < l[i + 1])\n            decreasing = false;\n\n        // If both flags are false, the list is not monotonic\n        if (!increasing && !decreasing)\n            return false;\n    }\n\n    return true; // The list is monotonic\n}"}
{"task_id": "HumanEval_csharp/58", "language": "csharp", "completion": "List<int> result1 = Common(new List<int> {1, 4, 3, 34, 653, 2, 5}, new List<int> {5, 7, 1, 5, 9, 653, 121});\n// result1 should be [1, 5, 653]\n\nList<int> result2 = Common(new List<int> {5, 3, 2, 8}, new List<int> {3, 2});\n// result2 should be [2, 3]"}
{"task_id": "HumanEval_csharp/59", "language": "csharp", "completion": "using System;\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n        Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n    }\n\n    public static int LargestPrimeFactor (int n) {\n        if (n <= 1) return -1; // Invalid input\n\n        int largest = 0;\n        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n\n        for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n /= i;\n            }\n        }\n\n        if (n > 2) largest = n;\n\n        return largest;\n    }\n}"}
{"task_id": "HumanEval_csharp/60", "language": "csharp", "completion": "public static int SumToN(int n) \n{\n    int sum = 0; // Initialize sum to 0\n    for (int i = 1; i <= n; i++) \n    {\n        sum += i; // Add current number to the sum\n    }\n    return sum; // Return the final sum\n}\n\n// Example usage:\nConsole.WriteLine(SumToN(30)); // Output: 465\nConsole.WriteLine(SumToN(100)); // Output: 5050\nConsole.WriteLine(SumToN(5));  // Output: 15\nConsole.WriteLine(SumToN(10)); // Output: 55\nConsole.WriteLine(SumToN(1));  // Output: 1"}
{"task_id": "HumanEval_csharp/61", "language": "csharp", "completion": "Console.WriteLine(CorrectBracketing(\"()\")); // Output: True\nConsole.WriteLine(CorrectBracketing(\"(()())\")); // Output: True\nConsole.WriteLine(CorrectBracketing(\")(()\")); // Output: False"}
{"task_id": "HumanEval_csharp/62", "language": "csharp", "completion": "public static List<int> Derivative(List<int> xs)\n{\n    // Initialize an empty list to store the derivative coefficients\n    List<int> derivative = new List<int>();\n\n    // Loop through the input list, starting from the second element (index 1)\n    for (int i = 1; i < xs.Count; i++)\n    {\n        // Calculate the derivative coefficient by multiplying the current element by its index\n        derivative.Add(xs[i] * i);\n    }\n\n    return derivative;\n}"}
{"task_id": "HumanEval_csharp/63", "language": "csharp", "completion": "public static int Fibfib(int n)\n{\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    int a = 0, B = 0, C = 1, D = 1, E = 0;\n\n    for (int i = 3; i <= n; i++)\n    {\n        D = A + B + C; // Calculate the next Fibfib number\n        A = B; // Shift previous numbers for the next iteration\n        B = C;\n        C = D;\n    }\n\n    return E; // Return the n-th Fibfib number\n}\n\n// Test cases\nConsole.WriteLine(Fibfib(1)); // Output: 0\nConsole.WriteLine(Fibfib(5)); // Output: 4\nConsole.WriteLine(Fibfib(8)); // Output: 24"}
{"task_id": "HumanEval_csharp/64", "language": "csharp", "completion": "public static int VowelsCount(string s) \n{\n    int count = 0;\n    for (int i = 0; i < s.Length; i++)\n    {\n        char c = s[i];\n        if (\"aeiouAEIOU\".Contains(c)) // Check if the character is a vowel\n            count++;\n        else if (i == s.Length - 1 && c == 'y' || c == 'Y') // Check if it's the last letter and it's 'y' or 'Y'\n            count++;\n    }\n    return count;\n}"}
{"task_id": "HumanEval_csharp/65", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string CircularShift(int x, int shift)\n        {\n            string digits = x.ToString();\n            int numDigits = digits.Length;\n\n            // If the shift is greater than the number of digits, reverse the digits\n            if (shift >= numDigits)\n            {\n                return new string(digits.Reverse().ToArray());\n            }\n\n            // Perform circular shift\n            string shifted = digits.Substring(numDigits - shift) + digits.Substring(0, numDigits - shift);\n            return shifted;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CircularShift(12, 1)); // Output: \"21\"\n            Console.WriteLine(CircularShift(12, 2)); // Output: \"12\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/66", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    public static int DigitSum(string s)\n    {\n        return s.Where(char.IsUpper).Sum(c => (int)c);\n    }\n\n    static void Main()\n    {\n        // Test cases\n        Console.WriteLine(DigitSum(\"\")); // Expected output: 0\n        Console.WriteLine(DigitSum(\"abAB\")); // Expected output: 131\n        Console.WriteLine(DigitSum(\"abcCd\")); // Expected output: 67\n        Console.WriteLine(DigitSum(\"helloE\")); // Expected output: 69\n        Console.WriteLine(DigitSum(\"woArBld\")); // Expected output: 131\n        Console.WriteLine(DigitSum(\"aAaaaXA\")); // Expected output: 153\n    }\n}"}
{"task_id": "HumanEval_csharp/67", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution {\n    public class Program {\n        public static int FruitDistribution (string s, int n) {\n            // Use regular expressions to extract numbers from the string\n            var matches = Regex.Matches(s, @\"\\d+\");\n            int apples = int.Parse(matches[0].Value);\n            int oranges = int.Parse(matches[1].Value);\n\n            // Calculate and return the number of mangoes\n            return n - (apples + oranges);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static List<int> Pluck(List<int> arr)\n    {\n        // Initialize variables to store the smallest even value and its index\n        int smallestEvenValue = int.MaxValue;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] % 2 == 0 && arr[i] <= smallestEvenValue)\n            {\n                smallestEvenValue = arr[i];\n                smallestIndex = i;\n            }\n        }\n\n        // Check if an even number was found\n        if (smallestIndex != -1)\n        {\n            return new List<int> { smallestEvenValue, smallestIndex };\n        }\n        else\n        {\n            return new List<int>(); // Return an empty list if no even numbers were found\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        // Example usage:\n        var result1 = Pluck(new List<int> { 4, 2, 3 });\n        Console.WriteLine($\"Result 1: [{string.Join(\", \", result1)}]\"); // Output: [2, 1]\n\n        var result2 = Pluck(new List<int> { 1, 2, 3 });\n        Console.WriteLine($\"Result 2: [{string.Join(\", \", result2)}]\"); // Output: [2, 1]\n\n        var result3 = Pluck(new List<int>());\n        Console.WriteLine($\"Result 3: [{string.Join(\", \", result3)}]\"); // Output: []\n\n        var result4 = Pluck(new List<int> { 5, 0, 3, 0, 4, 2 });\n        Console.WriteLine($\"Result 4: [{string.Join(\", \", result4)}]\"); // Output: [0, 1]\n    }\n}"}
{"task_id": "HumanEval_csharp/69", "language": "csharp", "completion": "public static int Search(List<int> lst)\n{\n    var sortedGroups = lst.GroupBy(x => x)\n                         .OrderByDescending(g => g.Key);\n\n    foreach (var group in sortedGroups)\n    {\n        if (group.Key > 0 && group.Count() >= group.Key)\n        {\n            return group.Key;\n        }\n    }\n\n    return -1;\n}"}
{"task_id": "HumanEval_csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static List<int> StrangeSortList(List<int> list) {\n        List<int> sortedList = new List<int>();\n        while (list.Count > 0) {\n            // Add the minimum value from the remaining elements\n            sortedList.Add(list.Min());\n            list.Remove(list.Min());\n\n            if (list.Count == 0) break; // If there are no more elements, exit the loop\n\n            // Add the maximum value from the remaining elements\n            sortedList.Add(list.Max());\n            list.Remove(list.Max());\n        }\n\n        return sortedList;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(String.Join(\", \", StrangeSortList(new List<int>{1, 2, 3, 4}))); // Output: 1, 4, 2, 3\n        Console.WriteLine(String.Join(\", \", StrangeSortList(new List<int>{5, 5, 5, 5}))); // Output: 5, 5, 5, 5\n        Console.WriteLine(String.Join(\", \", StrangeSortList(new List<int>{})));            // Output: \n    }\n}"}
{"task_id": "HumanEval_csharp/71", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object TriangleArea (int A, int b, int c) \n        {\n            if(A + b <= c || A + c <= b || b + c <= a) {\n                return -1; // Not a valid triangle\n            }\n\n            double s = (A + b + c) / 2.0;\n            double area = Math.Sqrt(s * (s - A) * (s - b) * (s - c));\n\n            return Math.Round(area, 2); // Return the area rounded to 2 decimal places\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/72", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // Check if the list is balanced (palindromic).\n            bool isBalanced = true;\n            for (int i = 0; i < q.Count / 2; i++)\n            {\n                if (q[i] != q[q.Count - 1 - i])\n                {\n                    IsBalanced = false;\n                    break;\n                }\n            }\n\n            // Check if the sum of elements is less than or equal to the maximum weight.\n            bool IsLessThanOrEqualMaxWeight = q.Sum() <= w;\n\n            return IsBalanced && IsLessThanOrEqualMaxWeight;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(WillItFly(new List<int> {1, 2}, 5)); // False\n            Console.WriteLine(WillItFly(new List<int> {3, 2, 3}, 1)); // False\n            Console.WriteLine(WillItFly(new List<int> {3, 2, 3}, 9)); // True\n            Console.WriteLine(WillItFly(new List<int> {3}, 5)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SmallestChange(List<int> arr)\n        {\n            int changesNeeded = 0;\n            for (int i = 0, j = arr.Count - 1; i < j; i++, j--)\n            {\n                if (arr[i] != arr[j])\n                {\n                    changesNeeded++;\n                }\n            }\n            return changesNeeded;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 5, 4, 7, 9, 6 })); // Output: 4\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 4, 3, 2, 2 }));  // Output: 1\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 2, 1 }));         // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/74", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> TotalMatch(List<string> lst1, List<string> lst2)\n        {\n            int charsLst1 = lst1.Sum(str => str.Length);\n            int charsLst2 = lst2.Sum(str => str.Length);\n\n            return charsLst1 <= charsLst2 ? lst1 : lst2;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(String.Join(\", \", TotalMatch(new List<string>(), new List<string>())));\n            Console.WriteLine(String.Join(\", \", TotalMatch(new List<string>(new string[] { \"hi\", \"admin\" }), new List<string>(new string[] { \"hI\", \"Hi\" }))));\n            Console.WriteLine(String.Join(\", \", TotalMatch(new List<string>(new string[] { \"hi\", \"admin\" }), new List<string>(new string[] { \"hi\", \"hi\", \"admin\", \"project\" }))));\n            Console.WriteLine(String.Join(\", \", TotalMatch(new List<string>(new string[] { \"hi\", \"admin\" }), new List<string>(new string[] { \"hI\", \"hi\", \"hi\" }))));\n            Console.WriteLine(String.Join(\", \", TotalMatch(new List<string>(new string[] { \"4\" }), new List<string>(new string[] { \"1\", \"2\", \"3\", \"4\", \"5\" }))));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/75", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsMultiplyPrime(30)); // Expected output: true\n        }\n\n        public static bool IsMultiplyPrime(int A)\n        {\n            if (A < 2) return false; // Numbers less than 2 cannot be prime products\n\n            List<int> primes = GetPrimesUpTo(100); // Get all prime numbers up to 100\n\n            int count = 0; // To keep track of the number of prime factors\n\n            foreach (var prime in primes)\n            {\n                if (A % prime == 0)\n                {\n                    count++;\n                    while (A % prime == 0) A /= prime; // Divide `A` by each prime factor until it is no longer divisible\n                }\n\n                if (count > 3) return false; // If we have more than 3 prime factors, then `A` cannot be a product of exactly 3 primes\n            }\n\n            return count == 3 && A == 1; // `A` is a product of exactly 3 primes if it has exactly 3 prime factors and is fully divisible by those primes\n        }\n\n        public static List<int> GetPrimesUpTo(int limit)\n        {\n            List<int> primes = new List<int>();\n            bool[] isPrime = new bool[limit + 1];\n            for (int i = 2; i <= limit; i++) IsPrime[i] = true;\n\n            for (int num = 2; num * num <= limit; num++)\n            {\n                if (IsPrime[num])\n                    for (int multiple = num * num; multiple <= limit; multiple += num)\n                        IsPrime[multiple] = false;\n            }\n\n            for (int i = 2; i <= limit; i++)\n            {\n                if (IsPrime[i]) primes.Add(i);\n            }\n\n            return primes;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/76", "language": "csharp", "completion": "public static bool IsSimplePower(int x, int n) \n{\n    if (n == 1) \n    {\n        return x == 1;\n    }\n\n    while (x % n == 0 && n != 1) \n    {\n        x /= n;\n    }\n\n    return x == 1;\n}"}
{"task_id": "HumanEval_csharp/77", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool Iscube(int A)\n        {\n            if (A == 0) return true; // The cube of 0 is 0\n\n            double absValue = Math.Abs(A); // Get the absolute value to handle negative numbers\n            double cubeRoot = Math.Cbrt(absValue); // Find the cube root of the absolute value\n\n            // Check if the cube root is an integer by comparing it with its rounded version\n            return Math.Round(cubeRoot) == cubeRoot;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/78", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    public static int HexKey(string num) {\n        // Define a list of prime hexadecimal digits\n        List<char> primeHexDigits = new List<char> { '2', '3', '5', '7', 'B', 'D' };\n\n        // Count the number of prime hexadecimal digits in the input string\n        int primeCount = num.Count(digit => primeHexDigits.Contains(digit));\n\n        return primeCount;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(HexKey(\"AB\")); // Output: 1\n        Console.WriteLine(HexKey(\"1077E\")); // Output: 2\n        Console.WriteLine(HexKey(\"ABED1A33\")); // Output: 4\n        Console.WriteLine(HexKey(\"123456789ABCDEF0\")); // Output: 6\n        Console.WriteLine(HexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_csharp/79", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System;\n\nclass DecimalToBinaryConverter\n{\n    public static string DecimalToBinary(int decimalNumber)\n    {\n        string binaryString = Convert.ToString(decimalNumber, 2); // Convert to binary using built-in method\n        return $\"db{binaryString}db\"; // Add 'db' at the beginning and end of the string\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(DecimalToBinary(15)); // Should print \"db1111db\"\n        Console.WriteLine(DecimalToBinary(32)); // Should print \"db100000db\"\n    }\n}"}
{"task_id": "HumanEval_csharp/80", "language": "csharp", "completion": "public static bool IsHappy(string s)\n{\n    // Check if string length is less than 3\n    if (s.Length < 3) return false;\n\n    // Iterate through each group of three consecutive letters in the string\n    for (int i = 0; i < s.Length - 2; i++)\n    {\n        // If any two consecutive letters are the same, return false\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n\n    // If all groups of three consecutive letters are distinct, return true\n    return true;\n}"}
{"task_id": "HumanEval_csharp/81", "language": "csharp", "completion": "public static List<string> NumericalLetterGrade(List<float> grades)\n{\n    var letterGrades = new List<string>();\n\n    foreach (var gpa in grades)\n    {\n        if (gpa >= 4.0f)\n            letterGrades.Add(\"A+\");\n        else if (gpa > 3.7f)\n            letterGrades.Add(\"A\");\n        else if (gpa > 3.3f)\n            letterGrades.Add(\"A-\");\n        else if (gpa > 3.0f)\n            letterGrades.Add(\"B+\");\n        else If (gpa > 2.7f)\n            letterGrades.Add(\"B\");\n        else If (gpa > 2.3f)\n            letterGrades.Add(\"B-\");\n        else If (gpa > 2.0f)\n            letterGrades.Add(\"C+\");\n        else If (gpa > 1.7f)\n            letterGrades.Add(\"C\");\n        else If (gpa > 1.3f)\n            letterGrades.Add(\"C-\");\n        else If (gpa > 1.0f)\n            letterGrades.Add(\"D+\");\n        else If (gpa > 0.7f)\n            letterGrades.Add(\"D\");\n        else If (gpa > 0.0f)\n            letterGrades.Add(\"D-\");\n        else\n            letterGrades.Add(\"E\");\n    }\n\n    return letterGrades;\n}"}
{"task_id": "HumanEval_csharp/82", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeLength(\"Hello\"));  // True\n            Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n            Console.WriteLine(PrimeLength(\"kittens\")); // True\n            Console.WriteLine(PrimeLength(\"orange\"));  // False\n        }\n\n        public static bool PrimeLength(string inputString)\n        {\n            int length = inputString.Length;\n            if (length <= 1) return false;\n\n            for (int i = 2; i * i <= length; i++)\n            {\n                if (length % i == 0) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/83", "language": "csharp", "completion": "public static int StartsOneEnds(int n)"}
{"task_id": "HumanEval_csharp/84", "language": "csharp", "completion": "public class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(Solve(1000)); // Output: \"1\"\n        Console.WriteLine(Solve(150));  // Output: \"110\"\n        Console.WriteLine(Solve(147));  // Output: \"1100\"\n    }\n\n    public static string Solve (int N) \n    {\n        int sum = N.ToString().Sum(c => c - '0');\n        return Convert.ToString(sum, 2);\n    }\n}"}
{"task_id": "HumanEval_csharp/85", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int Add(List<int> lst)\n    {\n        int sum = 0;\n\n        // Loop through the list, skipping the first element since it's at index 0 (even).\n        for (int i = 1; i < lst.Count; i += 2)\n        {\n            if (lst[i] % 2 == 0) // Check if the number at the odd index is even\n            {\n                sum += lst[i];\n            }\n        }\n\n        return sum;\n    }\n\n    // Example usage\n    public static void Main()\n    {\n        Console.WriteLine(Add(new List<int> { 4, 2, 6, 7 })); // Output should be 2\n    }\n}"}
{"task_id": "HumanEval_csharp/86", "language": "csharp", "completion": "using System;\n\nclass Solution {\n    public static string AntiShuffle(string s) {\n        return String.Concat(s.Split(' ').Select(word => String.Concat(word.OrderBy(c => c))));\n    }\n\n    static void Main() {\n        Console.WriteLine(AntiShuffle(\"Hi\")); // Output: \"Hi\"\n        Console.WriteLine(AntiShuffle(\"hello\")); // Output: \"ehllo\"\n        Console.WriteLine(AntiShuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "HumanEval_csharp/87", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n        {\n            var coordinates = new List<Tuple<int, int>>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if (lst[i][j] == x)\n                    {\n                        coordinates.Add(Tuple.Create(i, j));\n                    }\n                }\n            }\n\n            // Sort by row in ascending order and then by column in descending order within each row\n            var sortedCoordinates = coordinates.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n\n            return sortedCoordinates;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = GetRow(new List<List<int>> {\n                new List<int> {1, 2, 3, 4, 5, 6},\n                new List<int> {1, 2, 3, 4, 1, 6},\n                new List<int> {1, 2, 3, 4, 5, 1}\n            }, 1);\n\n            foreach (var coord in result1)\n            {\n                Console.WriteLine($\"({coord.Item1}, {coord.Item2})\");\n            }\n\n            var result2 = GetRow(new List<List<int>>(), 1);\n            var result3 = GetRow(new List<List<int>> {\n                new List<int>(),\n                new List<int> {1},\n                new List<int> {1, 2, 3}\n            }, 3);\n\n            // Output test results\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/88", "language": "csharp", "completion": "public static List<int> SortArray(List<int> array) \n{\n    if (array == null || array.Count <= 1)\n    {\n        return new List<int>(array);\n    }\n\n    var sum = array[0] + array[array.Count - 1];\n    var sortedArray = new List<int>(array.Skip(1).Take(array.Count - 2));\n\n    if (sum % 2 == 0) // If sum is even, sort in descending order\n    {\n        sortedArray.Sort((a, B) => B.CompareTo(A));\n    }\n    else // If sum is odd, sort in ascending order\n    {\n        sortedArray.Sort();\n    }\n\n    sortedArray.Insert(0, array[0]);\n    sortedArray.Add(array[array.Count - 1]);\n\n    return sortedArray;\n}"}
{"task_id": "HumanEval_csharp/89", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    public static string Encrypt(string s)\n    {\n        // Define the alphabet\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n        // Initialize an empty string to store the encrypted text\n        string encryptedText = \"\";\n\n        // Iterate through each character in the input string\n        foreach (char c in s)\n        {\n            // Check if the character is a letter\n            if (Char.IsLetter(c))\n            {\n                // Find the index of the character in the alphabet string\n                int originalIndex = alphabet.IndexOf(Char.ToLower(c));\n\n                // Calculate the new index after shifting down by 2 positions\n                int newIndex = (originalIndex + 4) % 26; // We use modulus to handle wrapping around the alphabet\n\n                // Convert the new index back to a character and append it to the encrypted text\n                char newChar = Char.IsUpper(c) ? Char.ToUpper(alphabet[newIndex]) : alphabet[newIndex];\n                encryptedText += newChar;\n            }\n            else\n            {\n                // If the character is not a letter, just append it to the encrypted text as is\n                encryptedText += c;\n            }\n        }\n\n        return encryptedText;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Encrypt(\"hi\")); // Output: lm\n        Console.WriteLine(Encrypt(\"asdfghjkl\")); // Output: ewhjklnop\n        Console.WriteLine(Encrypt(\"gf\")); // Output: kj\n        Console.WriteLine(Encrypt(\"et\")); // Output: ix\n    }\n}"}
{"task_id": "HumanEval_csharp/90", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static object NextSmallest(List<int> lst)\n    {\n        if (lst == null || lst.Count < 2)\n        {\n            return null;\n        }\n\n        var distinctLst = lst.Distinct().ToList();\n        distinctLst.Sort();\n\n        return distinctLst[1];\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n        Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n        Console.WriteLine(NextSmallest(new List<int>())); // Output: null\n        Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: null\n    }\n}"}
{"task_id": "HumanEval_csharp/91", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main()\n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        }\n\n        public static int IsBored(string S)\n        {\n            char[] delimiters = new char[] { '.', '?', '!' };\n            string[] sentences = S.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n\n            int boredomCount = 0;\n            foreach (var sentence in sentences)\n            {\n                string trimmedSentence = sentence.Trim();\n                if (trimmedSentence.StartsWith(\"I \"))\n                {\n                    boredomCount++;\n                }\n            }\n\n            return boredomCount;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/92", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool AnyInt(object x, object y, object z)\n        {\n            // Convert input objects to integers if possible\n            if (x is double && Math.Abs((double)x - Math.Round((double)x)) < 1e-9)\n                x = Convert.ToInt32(x);\n            else if (y is double && Math.Abs((double)y - Math.Round((double)y)) < 1e-9)\n                y = Convert.ToInt32(y);\n            else if (z is double && Math.Abs((double)z - Math.Round((double)z)) < 1e-9)\n                z = Convert.ToInt32(z);\n\n            // Check if all numbers are integers\n            if (!IsInteger(x) || !IsInteger(y) || !IsInteger(z))\n                return false;\n\n            // Check if any number is equal to the sum of the other two\n            return x.Equals(y + z) || y.Equals(x + z) || z.Equals(x + y);\n        }\n\n        private static bool IsInteger(object value)\n        {\n            if (value is int) return true;\n            if (value is double && Math.Abs((double)value - Math.Round((double)value)) < 1e-9)\n                return true;\n            return false;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(AnyInt(5, 2, 7));  // Output: True\n            Console.WriteLine(AnyInt(3, 2, 2));  // Output: False\n            Console.WriteLine(AnyInt(3, -2, 1)); // Output: True\n            Console.WriteLine(AnyInt(3.6f, -2.2f, 2));  // Output: False (Note the float cast)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/93", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Encode(string message)\n        {\n            Dictionary<char, char> vowelMap = new Dictionary<char, char>()\n            {\n                {'a', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'},\n                {'a', 'c'}, {'E', 'g'}, {'I', 'k'}, {'O', 'q'}, {'U', 'w'}\n            };\n\n            string encodedMessage = string.Empty;\n            foreach (char c in message)\n            {\n                if (Char.IsLetter(c))\n                {\n                    if (vowelMap.ContainsKey(c))\n                    {\n                        encodedMessage += Char.IsUpper(c) ? Char.ToLower(vowelMap[c]) : Char.ToUpper(vowelMap[c]);\n                    }\n                    else\n                    {\n                        encodedMessage += Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c);\n                    }\n                }\n                else\n                {\n                    encodedMessage += c;\n                }\n            }\n\n            return encodedMessage;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(Encode(\"test\")); // Expected output: \"TGST\"\n            Console.WriteLine(Encode(\"This is a message\")); // Expected output: \"tHKS KS C MGSSCGG\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/94", "language": "csharp", "completion": "public static int Skjkasdkd(List<int> lst)\n{\n    int maxPrime = 0;\n\n    foreach (var num in lst)\n    {\n        if (IsPrime(num) && num > maxPrime)\n            maxPrime = num;\n    }\n\n    return maxPrime != 0 ? SumOfDigits(maxPrime) : 0;\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n    for (int i = 3; i <= boundary; i += 2)\n        if (number % i == 0) return false;\n\n    return true;\n}\n\nprivate static int SumOfDigits(int number)\n{\n    int sum = 0;\n\n    while (number > 0)\n    {\n        sum += number % 10;\n        number /= 10;\n    }\n\n    return sum;\n}"}
{"task_id": "HumanEval_csharp/95", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckDictCase(Dictionary<object, string> dict)\n        {\n            if (!dict.Any()) // If the dictionary is empty, return false\n                return false;\n\n            bool? allLower = null;\n            foreach (var key in dict.Keys)\n            {\n                string lowerKey = key as string?.ToLower();\n                string upperKey = key as string?.ToUpper();\n\n                if (!string.IsNullOrEmpty(lowerKey))\n                {\n                    if (AllLower == null)\n                        AllLower = true;\n                    else if (!AllLower.Value || lowerKey != key) // If any non-lowercase key is found, return false\n                        return false;\n                }\n                else if (!string.IsNullOrEmpty(upperKey))\n                {\n                    if (AllLower == null)\n                        AllLower = false;\n                    else If (AllLower.Value || upperKey != key) // If any non-uppercase key is found, return false\n                        return false;\n                }\n                else // If key is neither string nor null or empty, return false\n                    return false;\n            }\n\n            return AllLower ?? true; // Return true if all keys are strings in the same case (either lowercase or uppercase)\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { { \"a\", \"apple\" }, { \"b\", \"banana\" } })); // Expected: True\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { { \"A\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } })); // Expected: False\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { { \"A\", \"apple\" }, { 8, \"banana\" }, { \"A\", \"apple\" } })); // Expected: False\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { { \"Name\", \"John\" }, { \"Age\", \"36\" }, { \"City\", \"Houston\" } })); // Expected: False\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string>() { { \"STATE\", \"NC\" }, { \"ZIP\", \"12345\" } })); // Expected: True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/96", "language": "csharp", "completion": "C#\n    public class Program\n    {\n        public static List<int> CountUpTo (int n) \n        {\n            List<int> result = new List<int>();\n            if(n <= 2) return result; // No primes less than 2\n\n            bool[] isPrime = Enumerable.Repeat(true, n).ToArray();\n            IsPrime[0] = IsPrime[1] = false;\n\n            for (int i = 2; i * i < n; i++)\n            {\n                if (IsPrime[i])\n                {\n                    for (int j = i * i; j < n; j += i)\n                    {\n                        IsPrime[j] = false;\n                    }\n                }\n            }\n\n            for (int i = 2; i < n; i++)\n            {\n                if (IsPrime[i]) result.Add(i);\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"CountUpTo(5): [{string.Join(\", \", CountUpTo(5))}]\");\n            Console.WriteLine($\"CountUpTo(11): [{string.Join(\", \", CountUpTo(11))}]\");\n            // ... and so on\n        }\n    }"}
{"task_id": "HumanEval_csharp/97", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Multiply(int A, int B)\n        {\n            // Extracting the unit digits from both numbers\n            int unitDigitA = Math.Abs(A % 10);\n            int unitDigitB = Math.Abs(B % 10);\n\n            // Returning the product of the unit digits\n            return unitDigitA * unitDigitB;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/98", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CountUpper('aBCdEf')); // Output: 1\n        Console.WriteLine(CountUpper('abcdefg')); // Output: 0\n        Console.WriteLine(CountUpper('dBBE')); // Output: 0\n    }\n\n    public static int CountUpper(char s)\n    {\n        string uppercaseVowels = \"AEIOU\";\n        return uppercaseVowels.IndexOf(s) >= 0 ? 1 : 0;\n    }\n}"}
{"task_id": "HumanEval_csharp/99", "language": "csharp", "completion": "public static int ClosestInteger(string value) \n{\n    // Convert the string to a decimal number\n    decimal num = decimal.Parse(value);\n\n    // Use Math.Round with MidpointRounding.AwayFromZero to get the closest integer,\n    // rounding away from zero if necessary\n    return (int)Math.Round(num, MidpointRounding.AwayFromZero);\n}"}
{"task_id": "HumanEval_csharp/100", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MakeAPile (int n) \n        {\n            List<int> pile = new List<int>();\n            int currentStones = n;\n\n            for(int i = 0; i < n; i++)\n            {\n                pile.Add(currentStones);\n\n                if(n % 2 == 0)\n                {\n                    currentStones += 2;\n                }\n                else\n                {\n                    currentStones += 2;\n                }\n            }\n\n            return pile;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> result = MakeAPile(3);\n            Console.WriteLine($\"[{string.Join(\", \", result)}]\"); // Output: [3, 5, 7]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/101", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Splits the input string into words and returns an array of words. The input can contain words separated by either commas or spaces.\n        /// \n        /// Example usage:\n        /// var result = WordsString(\"Hi, My name is John\");\n        /// // result should be [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\n        /// \n        /// var result2 = WordsString(\"One, two, three, four, five, six\");\n        /// // result2 should be [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// </summary>\n        public static string[] WordsString(string s)\n        {\n            // Use Regex to split the string by comma and space, then remove any empty entries that may result from consecutive delimiters.\n            var words = Regex.Split(s, @\"\\s*,\\s*|\\s+\").Where(w => !string.IsNullOrEmpty(w)).ToArray();\n            return words;\n        }\n\n        // A check function to verify the correctness of the generated function with provided data points.\n        public static void Check()\n        {\n            var test1 = WordsString(\"Hi, My name is John\");\n            Console.WriteLine($\"Test 1 Passed: {test1.SequenceEqual(new string[] {\"Hi\", \"My\", \"name\", \"is\", \"John\"})}\");\n\n            var test2 = WordsString(\"One, two, three, four, five, six\");\n            Console.WriteLine($\"Test 2 Passed: {test2.SequenceEqual(new string[] {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"})}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/102", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n        Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n    }\n\n    public static int ChooseNum(int x, int y)\n    {\n        if (x > y)\n        {\n            return -1; // Return -1 if x is greater than y\n        }\n\n        for (int i = y; i >= x; i--)\n        {\n            if (i % 2 == 0) // Check if the number is even\n            {\n                return i; // Return the first even number found\n            }\n        }\n\n        return -1; // If no even number is found, return -1\n    }\n}"}
{"task_id": "HumanEval_csharp/103", "language": "csharp", "completion": "C#\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1,5)); // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7,5)); // Output: -1\n            Console.WriteLine(RoundedAvg(10,20)); // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20,33)); // Output: \"0b11010\"\n        }\n\n        public static object RoundedAvg (int n, int m) \n        {\n            if (n > m) return -1;\n\n            double avg = Math.Round((double)(m + n)/2);\n            return $\"0b{Convert.ToString((long)avg, 2)}\";\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/104", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> UniqueDigits(List<int> x) \n        {\n            return x.Where(number => number.ToString().All(c => \"13579\".Contains(c))).OrderBy(n => n).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"[1, 15, 33] == {UniqueDigits(new List<int> {15, 33, 1422, 1}).SequenceEqual(new List<int> {1, 15, 33})}\");\n            Console.WriteLine($\"[] == {UniqueDigits(new List<int> {152, 323, 1422, 10}).SequenceEqual(new List<int>())}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/105", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<string> ByLength(List<int> arr) {\n        // Filter the array to include only integers between 1 and 9\n        var filtered = arr.Where(n => n >= 1 && n <= 9).ToList();\n\n        // Sort the filtered list in ascending order\n        filtered.Sort();\n\n        // Reverse the sorted list\n        filtered.Reverse();\n\n        // Map each integer to its corresponding name\n        var names = filtered.Select(n => $\"{n}\").ToList();\n\n        return names;\n    }\n\n    public static void Main(string[] args) {\n        // Test cases\n        Console.WriteLine(String.Join(\", \", ByLength(new List<int>{2, 1, 1, 4, 5, 8, 2, 3}))); // Output: Eight, Five, Four, Three, Two, Two, One, One\n        Console.WriteLine(String.Join(\", \", ByLength(new List<int>{}))); // Output: \n        Console.WriteLine(String.Join(\", \", ByLength(new List<int>{1, -1, 55}))); // Output: One\n    }\n}"}
{"task_id": "HumanEval_csharp/106", "language": "csharp", "completion": "public static List<int> F(int n) \n{\n    List<int> result = new List<int>();\n\n    for (int i = 1; i <= n; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result.Add(Factorial(i));\n        } \n        else \n        {\n            result.Add(SumOfNumbersToI(i));\n        }\n    }\n\n    return result;\n}\n\nprivate static int Factorial(int number) \n{\n    int factorial = 1;\n    for (int i = 2; i <= number; i++) \n    {\n        factorial *= i;\n    }\n    return factorial;\n}\n\nprivate static int SumOfNumbersToI(int number) \n{\n    return (number * (number + 1)) / 2; // Using the formula for the sum of the first n natural numbers\n}\n\n// Test the function with provided example\npublic static void Main() \n{\n    List<int> result = F(5);\n    Console.WriteLine($\"F(5) == [{string.Join(\", \", result)}]\");\n}"}
{"task_id": "HumanEval_csharp/107", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(EvenOddPalindrome(3)); // Outputs (1, 2)\n        Console.WriteLine(EvenOddPalindrome(12)); // Outputs (4, 6)\n    }\n\n    public static Tuple<int, int> EvenOddPalindrome(int n)\n    {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++)\n        {\n            if (IsPalindrome(i))\n            {\n                if (i % 2 == 0)\n                {\n                    evenCount++;\n                }\n                else\n                {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Tuple.Create(evenCount, oddCount);\n    }\n\n    private static bool IsPalindrome(int number)\n    {\n        string numStr = number.ToString();\n        for (int i = 0; i < numStr.Length / 2; i++)\n        {\n            if (numStr[i] != numStr[numStr.Length - i - 1])\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_csharp/108", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static int CountNums (List<int> arr) \n    {\n        int count = 0;\n        foreach(var num in arr){\n            if(SumOfDigits(num) > 0){\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static int SumOfDigits(int number){\n        bool isNegative = number < 0;\n        number = Math.Abs(number);\n        int sum = 0;\n        while (number > 0){\n            sum += number % 10;\n            number /= 10;\n        }\n        return isNegative ? -1 * sum : sum;\n    }\n\n    public static void Main(){\n        Console.WriteLine(CountNums(new List<int>{})); // Output: 0\n        Console.WriteLine(CountNums(new List<int>{-1, 11, -11})); // Output: 1\n        Console.WriteLine(CountNums(new List<int>{1, 1, 2})); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_csharp/109", "language": "csharp", "completion": "public static bool MoveOneBall(List<int> arr) \n{\n    if (arr.Count <= 1) \n    {\n        return true;\n    }\n\n    int shifts = 0;\n    for (int i = 1; i < arr.Count; i++) \n    {\n        if (arr[i] < arr[i-1]) \n        {\n            shifts++;\n            break; // Only need to count one shift for unsorted element\n        }\n    }\n\n    // If there is no unsorted element, check if array is already sorted\n    if (shifts == 0 && arr.SequenceEqual(arr.OrderBy(x => x))) \n    {\n        return true;\n    }\n\n    // Check if array can be sorted by performing right shift operations\n    for (int i = 1; i < arr.Count - 1; i++) \n    {\n        if (arr[i] > arr[i+1]) \n        {\n            shifts++;\n        }\n    }\n\n    return shifts == arr.Count - 1;\n}"}
{"task_id": "HumanEval_csharp/110", "language": "csharp", "completion": "public static string Exchange(List<int> lst1, List<int> lst2) \n{\n    // Count odd numbers in lst1\n    int oddCountInLst1 = lst1.Count(num => num % 2 != 0);\n\n    // Count even numbers in lst2\n    int evenCountInLst2 = lst2.Count(num => num % 2 == 0);\n\n    // If there are more odd numbers in lst1 than even numbers in lst2, return \"NO\"\n    if (oddCountInLst1 > evenCountInLst2) \n    {\n        return \"NO\";\n    } \n    else \n    {\n        // Otherwise, it is possible to exchange elements to make all elements of lst1 even\n        return \"YES\";\n    }\n}"}
{"task_id": "HumanEval_csharp/111", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static Dictionary<string, int> Histogram(string test)\n    {\n        if (string.IsNullOrEmpty(test))\n            return new Dictionary<string, int>();\n\n        var letterCounts = test.Replace(\" \", \"\")\n                              .GroupBy(c => c.ToString())\n                              .ToDictionary(g => g.Key, g => g.Count());\n\n        int maxCount = letterCounts.Values.Max();\n\n        return letterCounts.Where(pair => pair.Value == maxCount)\n                         .ToDictionary(pair => pair.Key, pair => pair.Value);\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(Histogram(\"a b c\")); // Output: {'A': 1, 'b': 1, 'c': 1}\n        Console.WriteLine(Histogram(\"A b b a\")); // Output: {'A': 2, 'b': 2}\n        Console.WriteLine(Histogram(\"A b c A b\")); // Output: {'A': 2, 'b': 2}\n        Console.WriteLine(Histogram(\"B B B B A\")); // Output: {'B': 4}\n        Console.WriteLine(Histogram(\"\")); // Output: {}\n    }\n}"}
{"task_id": "HumanEval_csharp/112", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(ReverseDelete(\"abcde\", \"ae\")); // Output: (bcd, False)\n        Console.WriteLine(ReverseDelete(\"abcdef\", \"b\"));  // Output: (acdef, False)\n        Console.WriteLine(ReverseDelete(\"abcdedcba\", \"ab\"));  // Output: (cdedc, True)\n    }\n\n    public static List<object> ReverseDelete(string s, string c) \n    {\n        var resultString = new StringBuilder();\n\n        foreach (char ch in s)\n        {\n            if (!c.Contains(ch))\n            {\n                resultString.Append(ch);\n            }\n        }\n\n        string result = resultString.ToString();\n        bool isPalindrome = IsStringPalindrome(result);\n\n        return new List<object> { result, IsPalindrome };\n    }\n\n    private static bool IsStringPalindrome(string str)\n    {\n        int left = 0;\n        int right = str.Length - 1;\n\n        while (left < right)\n        {\n            if (str[left] != str[right])\n            {\n                return false;\n            }\n\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_csharp/113", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<string> OddCount(List<string> lst)\n    {\n        var result = new List<string>();\n\n        foreach (var item in lst)\n        {\n            int oddCount = item.Count(c => \"13579\".Contains(c)); // Count odd digits\n\n            // Replace all 'i's with the count of odd digits\n            string outputString = $\"the number of odd elements {oddCount}n the str{oddCount}ng {oddCount} of the {oddCount}nput.\";\n            result.Add(outputString);\n        }\n\n        return result;\n    }\n\n    static void Main()\n    {\n        // Example usage:\n        List<string> input1 = new List<string> { \"1234567\" };\n        List<string> output1 = OddCount(input1);\n        foreach (var line in output1)\n            Console.WriteLine(line);\n\n        List<string> input2 = new List<string> { \"3\", \"11111111\" };\n        List<string> output2 = OddCount(input2);\n        foreach (var line in output2)\n            Console.WriteLine(line);\n    }\n}"}
{"task_id": "HumanEval_csharp/114", "language": "csharp", "completion": "public static int MinSubArraySum(List<int> nums) \n{\n    if (nums == null || !nums.Any())\n        return 0;\n\n    int minSum = currentMin = nums[0];\n\n    for (int i = 1; i < nums.Count; i++)\n    {\n        currentMin = Math.Min(nums[i], currentMin + nums[i]);\n        minSum = Math.Min(minSum, currentMin);\n    }\n\n    return minSum;\n}"}
{"task_id": "HumanEval_csharp/115", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int MaxFill(List<List<int>> grid, int bucketCapacity)\n    {\n        int totalDrops = 0;\n\n        // Calculate the maximum water level in any column\n        int maxWaterLevel = grid.Max(row => row.Sum());\n\n        // Calculate the number of drops needed for each level\n        for (int i = 0; i < maxWaterLevel; i++)\n        {\n            foreach (var well in grid)\n            {\n                int waterInWell = well[i];\n                if (waterInWell > 0)\n                {\n                    // Calculate the number of drops needed for this well at this level\n                    int dropsNeeded = (int)Math.Ceiling(waterInWell / (double)bucketCapacity);\n\n                    // Update the total number of drops\n                    totalDrops += dropsNeeded;\n                }\n            }\n        }\n\n        return totalDrops;\n    }\n}"}
{"task_id": "HumanEval_csharp/116", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> SortArray(List<int> arr)\n    {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c == '1')).ThenBy(x => x).ToList();\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases to verify the correctness of the function\n        Console.WriteLine(String.Join(\", \", SortArray(new List<int> { 1, 5, 2, 3, 4 }))); // Output: 1, 2, 3, 4, 5\n        Console.WriteLine(String.Join(\", \", SortArray(new List<int> { -2, -3, -4, -5, -6 }))); // Output: -6, -5, -4, -3, -2\n        Console.WriteLine(String.Join(\", \", SortArray(new List<int> { 1, 0, 2, 3, 4 }))); // Output: 0, 1, 2, 3, 4\n    }\n}"}
{"task_id": "HumanEval_csharp/117", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            if (string.IsNullOrEmpty(s)) return new List<string>();\n\n            var words = s.Split(' ');\n            return words.Where(word => word.Count(c => \"bcdfghjklmnpqrstvwxyz\".Contains(char.ToLower(c))) == n).ToList();\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // Output: little\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // Output: Mary, lamb\n            Console.WriteLine(string.Join(\", \", SelectWords(\"simple white space\", 2)));    // Output: \n            Console.WriteLine(string.Join(\", \", SelectWords(\"Hello world\", 4)));          // Output: world\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Uncle sam\", 3)));               // Output: Uncle\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/118", "language": "csharp", "completion": "public static string GetClosestVowel(string word) \n{\n    string vowels = \"aeiouAEIOU\"; // Define vowels for easy lookup\n    for (int i = word.Length - 2; i > 0; i--) // Start from second last character and go backwards\n    {\n        if (!vowels.Contains(word[i + 1]) && vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]))\n        {\n            return word[i].ToString(); // Return the vowel that meets the condition\n        }\n    }\n    return \"\"; // If no such vowel found, return empty string\n}\n\n// Test cases:\nConsole.WriteLine(GetClosestVowel(\"yogurt\")); // Outputs: \"u\"\nConsole.WriteLine(GetClosestVowel(\"FULL\"));   // Outputs: \"U\"\nConsole.WriteLine(GetClosestVowel(\"quick\"));  // Outputs: \"\"\nConsole.WriteLine(GetClosestVowel(\"ab\"));     // Outputs: \"\""}
{"task_id": "HumanEval_csharp/119", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string MatchParens(List<string> lst)\n        {\n            // Concatenate in both possible orders and check if balanced\n            if (IsBalanced(lst[0] + lst[1]) || IsBalanced(lst[1] + lst[0]))\n                return \"Yes\";\n\n            return \"No\";\n        }\n\n        private static bool IsBalanced(string str)\n        {\n            int balance = 0;\n            foreach (char c in str)\n            {\n                if (c == '(')\n                    balance++;\n                else if (c == ')')\n                    balance--;\n\n                // If balance goes negative, parentheses are not balanced\n                if (balance < 0)\n                    return false;\n            }\n\n            // String is balanced if balance is zero\n            return balance == 0;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(MatchParens(new List<string> { \"()(\", \")\" }));  // Output: Yes\n            Console.WriteLine(MatchParens(new List<string> { \")\", \")\" }));     // Output: No\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/120", "language": "csharp", "completion": "List<int> result = Maximum(new List<int>{-3, -4, 5}, 3); // Returns [-4, -3, 5]"}
{"task_id": "HumanEval_csharp/121", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int SumOfOddsInEvenPositions(List<int> lst) {\n        // Ensure the list is not empty before processing.\n        if (lst == null || !lst.Any()) return 0;\n        \n        // Initialize sum of odd numbers in even positions.\n        int sum = 0;\n\n        // Loop through the list, starting from the second element (index 1).\n        for (int i = 1; i < lst.Count; i += 2) {\n            // Check if the current element is an odd number.\n            if (lst[i] % 2 != 0) {\n                // Add it to the sum.\n                sum += lst[i];\n            }\n        }\n\n        return sum;\n    }\n}\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(Solution.SumOfOddsInEvenPositions(new List<int>{5, 8, 7, 1})); // Output: 12\n        Console.WriteLine(Solution.SumOfOddsInEvenPositions(new List<int>{3, 3, 3, 3, 3})); // Output: 9\n        Console.WriteLine(Solution.SumOfOddsInEvenPositions(new List<int>{30, 13, 24, 321})); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_csharp/122", "language": "csharp", "completion": "public static int AddElements(List<int> arr, int k) \n{\n    int sum = 0;\n    for (int i = 0; i < Math.Min(k, arr.Count); i++)\n    {\n        if (arr[i] >= 0 && arr[i] <= 99) // check if the number has at most two digits\n            sum += arr[i];\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_csharp/123", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> GetOddCollatz(int n)\n    {\n        var oddNumbers = new List<int>();\n\n        while (n != 1)\n        {\n            if (n % 2 != 0) // Check if the number is odd\n            {\n                oddNumbers.Add(n);\n            }\n\n            // Apply Collatz rules\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n\n        oddNumbers.Add(1); // Add 1 to the list as it's always part of the sequence and is odd\n        oddNumbers.Sort(); // Sort the list in increasing order\n\n        return oddNumbers;\n    }\n\n    static void Main(string[] args)\n    {\n        var result = GetOddCollatz(5);\n        Console.WriteLine($\"The odd numbers in the Collatz sequence for 5 are: {string.Join(\", \", result)}\");\n    }\n}"}
{"task_id": "HumanEval_csharp/124", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool ValidDate(string date)\n        {\n            if (string.IsNullOrEmpty(date))\n            {\n                return false;\n            }\n\n            var pattern = @\"^(0[1-9]|1[0-2])-([0-2][0-9]|3[01])-\\d{4}$\";\n            var regex = new Regex(pattern);\n\n            if (!regex.IsMatch(date))\n            {\n                return false;\n            }\n\n            var parts = date.Split('-');\n            int month = int.Parse(parts[0]);\n            int day = int.Parse(parts[1]);\n\n            if (month == 2 && day > 29)\n            {\n                return false;\n            }\n\n            if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(ValidDate(\"03-11-2000\")); // True\n            Console.WriteLine(ValidDate(\"15-01-2012\")); // False\n            Console.WriteLine(ValidDate(\"04-0-2040\"));  // False\n            Console.WriteLine(ValidDate(\"06-04-2020\")); // True\n            Console.WriteLine(ValidDate(\"06/04/2020\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/125", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static object SplitWords(string txt) {\n        // Check for whitespaces and split on them if found\n        if (txt.Contains(\" \")) {\n            return txt.Split(' ').ToList();\n        }\n        // Check for commas and split on them if found\n        else if (txt.Contains(\",\")) {\n            return txt.Split(',').ToList();\n        }\n        // If no whitespaces or commas, count the number of lower-case letters with odd order in the alphabet\n        else {\n            return Enumerable.Range('a', 'z' - 'A').Count(c => c % 2 != 0);\n        }\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(SplitWords(\"Hello world!\")); // Output: [\"Hello\", \"world!\"]\n        Console.WriteLine(SplitWords(\"Hello,world!\")); // Output: [\"Hello\", \"world!\"]\n        Console.WriteLine(SplitWords(\"abcdef\"));       // Output: 3\n    }\n}"}
{"task_id": "HumanEval_csharp/126", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static bool IsSorted(List<int> lst) {\n        // Check if list is empty or has one element, in which case it is considered sorted\n        if (lst == null || lst.Count <= 1) return true;\n\n        // Iterate through the list to check if it's sorted and no number appears more than once\n        for (int i = 0; i < lst.Count - 1; i++) {\n            // If current element is greater than or equal to next one, it's not sorted or has a duplicate\n            if (lst[i] >= lst[i + 1]) return false;\n        }\n\n        return true;\n    }\n\n    static void Main(string[] args) {\n        // Test cases\n        Console.WriteLine(IsSorted(new List<int>{5})); // True\n        Console.WriteLine(IsSorted(new List<int>{1, 2, 3, 4, 5})); // True\n        Console.WriteLine(IsSorted(new List<int>{1, 3, 2, 4, 5})); // False\n        Console.WriteLine(IsSorted(new List<int>{1, 2, 3, 4, 5, 6})); // True\n        Console.WriteLine(IsSorted(new List<int>{1, 2, 3, 4, 5, 6, 7})); // True\n        Console.WriteLine(IsSorted(new List<int>{1, 3, 2, 4, 5, 6, 7})); // False\n        Console.WriteLine(IsSorted(new List<int>{1, 2, 2, 3, 3, 4})); // True\n        Console.WriteLine(IsSorted(new List<int>{1, 2, 2, 2, 3, 4})); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/127", "language": "csharp", "completion": "public static string Intersection(List<int> interval1, List<int> interval2)\n{\n    // Calculate the max start point and min end point between the two intervals\n    int maxStart = Math.Max(interval1[0], interval2[0]);\n    int minEnd = Math.Min(interval1[1], interval2[1]);\n\n    // Check if there is no intersection\n    if (maxStart > minEnd) return \"NO\";\n\n    // Calculate the length of the intersection\n    int intersectionLength = minEnd - maxStart + 1;\n\n    // Function to check if a number is prime\n    bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        for (int i = 2; i * i <= number; i++)\n        {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Check if the length of intersection is prime\n    if (IsPrime(intersectionLength)) return \"YES\";\n    else return \"NO\";\n}"}
{"task_id": "HumanEval_csharp/128", "language": "csharp", "completion": "public class Program\n{\n    public static Nullable<int> ProdSigns(List<int> arr) \n    {\n        if (arr.Count == 0) return null;\n\n        int productOfSigns = 1;\n        int sumOfMagnitudes = 0;\n\n        foreach (var num in arr) \n        {\n            productOfSigns *= Math.Sign(num); // Multiply the current sign to the product of signs\n            sumOfMagnitudes += Math.Abs(num); // Add the magnitude of the number to the sum of magnitudes\n        }\n\n        return productOfSigns * sumOfMagnitudes; // Return the final result\n    }\n}"}
{"task_id": "HumanEval_csharp/129", "language": "csharp", "completion": "public static List<int> MinPath(List<List<int>> grid, int k)\n{\n    if (grid == null || grid.Count < 2 || k < 1) return new List<int>();\n\n    int n = grid.Count;\n    bool[][] visited = new bool[n][];\n    for (int i = 0; i < n; i++)\n        visited[i] = new bool[n];\n\n    List<int> result = null;\n    List<int> tempPath = new List<int>();\n\n    // Define the neighbor cells' offsets relative to the current cell\n    int[,] neighborsOffsets = {\n        {0, 1}, // right\n        {1, 0}, // down\n        {0, -1}, // left\n        {-1, 0}  // up\n    };\n\n    // Recursive function to find the minimum path\n    bool FindMinPath(int x, int y, List<int> currentPath)\n    {\n        if (currentPath.Count == k)\n        {\n            if (result == null || IsCurrentPathLessThanResult(currentPath, result))\n                result = new List<int>(currentPath);\n\n            return true;\n        }\n\n        visited[x][y] = true;\n        for (int i = 0; i < 4; i++)\n        {\n            int newX = x + neighborsOffsets[i, 0];\n            int newY = y + neighborsOffsets[i, 1];\n\n            if (IsValidCell(newX, newY) && !visited[newX][newY])\n            {\n                currentPath.Add(grid[newX][newY]);\n                if (FindMinPath(newX, newY, currentPath))\n                    return true;\n                currentPath.RemoveAt(currentPath.Count - 1);\n            }\n        }\n\n        visited[x][y] = false;\n        return false;\n    }\n\n    // Helper function to check if a cell is valid\n    bool IsValidCell(int x, int y) => x >= 0 && x < n && y >= 0 && y < n;\n\n    // Helper function to compare two paths lexicographically\n    bool IsCurrentPathLessThanResult(List<int> path1, List<int> path2)\n    {\n        for (int i = 0; i < k; i++)\n        {\n            if (path1[i] != path2[i]) return path1[i] < path2[i];\n        }\n\n        return false;\n    }\n\n    // Start the search from every cell\n    for (int x = 0; x < n; x++)\n        for (int y = 0; y < n; y++)\n            tempPath.Add(grid[x][y]);\n            FindMinPath(x, y, tempPath);\n            tempPath.RemoveAt(tempPath.Count - 1);\n\n    return result ?? new List<int>();\n}"}
{"task_id": "HumanEval_csharp/130", "language": "csharp", "completion": "public static List<object> Tri(int n) {\n    List<long> sequence = new List<long> { 1L, 3L };\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            sequence.Add(1 + i / 2);\n        } else {\n            long nextValue = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n            // If n is an odd number and i is not the last element, add 1 to the value\n            if (n % 2 != 0 && i < n) {\n                nextValue++;\n            }\n            sequence.Add(nextValue);\n        }\n    }\n    return sequence.Cast<object>().ToList();\n}"}
{"task_id": "HumanEval_csharp/131", "language": "csharp", "completion": "public static int Digits(int n)\n{\n    // Initialize a variable to store the product of odd digits.\n    int product = 1;\n\n    // Convert the integer to a string to iterate over each digit.\n    string numStr = n.ToString();\n\n    // Iterate through each character in the string (digit by digit).\n    foreach (char digitChar in numStr)\n    {\n        // Convert the current character back to an integer.\n        int digit = int.Parse(digitChar.ToString());\n\n        // Check if the digit is odd (i.e., it's not divisible by 2).\n        if (digit % 2 != 0)\n        {\n            // Multiply the product with the current odd digit.\n            product *= digit;\n        }\n    }\n\n    // Return the final product of odd digits.\n    // If no odd digits were found, it will return 1 (as initialized).\n    return product;\n}"}
{"task_id": "HumanEval_csharp/132", "language": "csharp", "completion": "public static bool IsNested(string input)\n{\n    int depth = 0;\n    bool hasNested = false;\n\n    foreach (char c in input)\n    {\n        if (c == '[')\n        {\n            depth++;\n            hasNested = depth > 1; // If depth is greater than 1, we have a nested bracket.\n        }\n        else if (c == ']')\n        {\n            depth--;\n            if (depth < 0) // This checks for invalid input like ]][[]\n                return false;\n        }\n    }\n\n    return hasNested && depth == 0; // Ensure that we end up with a balanced string.\n}"}
{"task_id": "HumanEval_csharp/133", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SumSquares(List<object> lst)\n        {\n            return (int)lst.Select(x => Math.Pow(Convert.ToDouble(x), 2)).Sum();\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SumSquares(new List<object> {1,2,3})); // Output: 14\n            Console.WriteLine(SumSquares(new List<object> {1,4,9})); // Output: 98\n            Console.WriteLine(SumSquares(new List<object> {1,3,5,7})); // Output: 84\n            Console.WriteLine(SumSquares(new List<object> {1.4,4.2,0})); // Output: 29\n            Console.WriteLine(SumSquares(new List<object> {-2.4,1,1})); // Output: 6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/134", "language": "csharp", "completion": "C#\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            if (txt == null || txt.Length == 0) return false; // If the string is null or empty, return false\n\n            char lastChar = txt[txt.Length - 1]; // Get the last character of the string\n\n            // Check if the last character is an alphabetical character\n            if (char.IsLetter(lastChar))\n            {\n                int index = txt.LastIndexOf(' '); // Find the last space in the string\n                // If there's no space or the space comes after the last character, return true\n                return index == -1 || index < txt.Length - 1;\n            }\n\n            return false;\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // Outputs: False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // Outputs: True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // Outputs: False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // Outputs: False \n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/135", "language": "csharp", "completion": "C#\npublic static int CanArrange(List<int> arr)\n{\n    for (int i = arr.Count - 1; i >= 0; i--)\n    {\n        if (i == arr.Count - 1 || arr[i] < arr[i + 1])\n            return i;\n    }\n\n    return -1;\n}"}
{"task_id": "HumanEval_csharp/136", "language": "csharp", "completion": "public static Tuple<Nullable<int>, Nullable<int>> LargestSmallestIntegers(List<int> lst)\n{\n    var negativeNumbers = lst.Where(n => n < 0).ToList();\n    var positiveNumbers = lst.Where(n => n > 0).ToList();\n\n    Nullable<int> largestNegative = null;\n    if (negativeNumbers.Count > 0)\n        largestNegative = negativeNumbers.Max();\n\n    Nullable<int> smallestPositive = null;\n    if (positiveNumbers.Count > 0)\n        smallestPositive = positiveNumbers.Min();\n\n    return Tuple.Create(largestNegative, smallestPositive);\n}"}
{"task_id": "HumanEval_csharp/137", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Create a function that takes integers, floats, or strings representing real numbers, \n        /// and returns the larger variable in its given variable type. Return null if the values are equal.\n        /// Note: If a real number is represented as a string, the floating point might be . or ,\n        /// </summary>\n        public static object CompareOne(object a, object b)\n        {\n            // Define a method to parse a string to double, accounting for both '.' and ',' as decimal separators.\n            Func<string, double> parseNumber = s =>\n            {\n                s = Regex.Replace(s, \",\", \".\");\n                return double.Parse(s);\n            };\n\n            // Try to convert input values to doubles for comparison.\n            double numA;\n            double numB;\n\n            if (double.TryParse(a.ToString(), out numA) && double.TryParse(b.ToString(), out numB))\n            {\n                if (numA > numB) return a;\n                else if (numB > numA) return b;\n            }\n            else if (double.TryParse(parseNumber(a.ToString()), out numA) && double.TryParse(b.ToString(), out numB))\n            {\n                if (numA > numB) return A;\n                else if (numB > numA) return b;\n            }\n\n            // If values are equal, return null.\n            return null;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CompareOne(1, 2.5)); // \u279e 2.5\n            Console.WriteLine(CompareOne(1, \"2,3\")); // \u279e \"2,3\"\n            Console.WriteLine(CompareOne(\"5,1\", \"6\")); // \u279e \"6\"\n            Console.WriteLine(CompareOne(\"1\", 1)); // \u279e null\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/138", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsEqualToSumEven(int n)\n        {\n            for (int i = 1; i < n; i += 2) // Start from 1 to ensure even numbers\n            {\n                for (int j = 1; j < n - i; j += 2) // Start from 1 for the same reason as i\n                {\n                    for (int k = 1; k < n - i - j; k += 2) // Start from 1 to make sure we're always getting even numbers\n                    {\n                        int l = n - i - j - k; // Calculate the remaining number\n                        if (l > 0 && l % 2 == 0) // Check if l is positive and even\n                        {\n                            return true; // If any combination of four even numbers sums up to n, return true\n                        }\n                    }\n                }\n            }\n            return false; // If no combination found, return false\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsEqualToSumEven(4)); // Output: False\n            Console.WriteLine(IsEqualToSumEven(6)); // Output: False\n            Console.WriteLine(IsEqualToSumEven(8)); // Output: True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/139", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    /// <summary>\n    /// Calculates the Brazilian factorial of a given positive integer n.\n    /// </summary>\n    public static long BrazilianFactorial(int n) \n    {\n        if (n <= 0) \n        {\n            throw new ArgumentException(\"Input must be greater than 0.\");\n        }\n\n        long result = 1;\n        for (int i = 1; i <= n; i++) \n        {\n            result *= Factorial(i);\n        }\n        return result;\n    }\n\n    /// <summary>\n    /// Helper method to calculate the factorial of a number.\n    /// </summary>\n    private static long Factorial(int n) \n    {\n        if (n <= 1) \n        {\n            return 1;\n        }\n        else \n        {\n            return n * Factorial(n - 1);\n        }\n    }\n\n    // Test the function with example input\n    public static void Main()\n    {\n        Console.WriteLine($\"SpecialFactorial(4) = {BrazilianFactorial(4)}\"); // Output: 288\n    }\n}"}
{"task_id": "HumanEval_csharp/140", "language": "csharp", "completion": "using System;\n\nclass Solution {\n    public static string FixSpaces(string text) {\n        // Replace more than two consecutive spaces with '-'\n        text = Regex.Replace(text, @\"\\s{3,}\", \"-\");\n        \n        // Replace remaining single and double spaces with '_'\n        text = Regex.Replace(text, @\"\\s\", \"_\");\n\n        return text;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(FixSpaces(\"Example\")); // \"Example\"\n        Console.WriteLine(FixSpaces(\"Example 1\")); // \"Example_1\"\n        Console.WriteLine(FixSpaces(\" Example 2\")); // \"_Example_2\"\n        Console.WriteLine(FixSpaces(\" Example3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "HumanEval_csharp/141", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Linq;\n\nclass FileNameValidator\n{\n    public static string ValidateFileName(string file_name)\n    {\n        // Check if the file name contains exactly one dot and does not have more than three digits\n        if (file_name.Count(f => f == '.') != 1 || file_name.Count(char.IsDigit) > 3)\n            return \"No\";\n\n        var parts = file_name.Split('.');\n        string namePart = parts[0];\n        string extensionPart = parts[1];\n\n        // Check if the name part is not empty and starts with a letter\n        if (string.IsNullOrEmpty(namePart) || !char.IsLetter(namePart[0]))\n            return \"No\";\n\n        // Check if the extension is one of the allowed ones\n        var validExtensions = new[] { \"txt\", \"exe\", \"dll\" };\n        if (!validExtensions.Contains(extensionPart))\n            return \"No\";\n\n        return \"Yes\";\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Test cases\n        Console.WriteLine(FileNameValidator.ValidateFileName(\"example.txt\")); // Output: Yes\n        Console.WriteLine(FileNameValidator.ValidateFileName(\"1example.dll\")); // Output: No (the name should start with a latin alphapet letter)\n    }\n}"}
{"task_id": "HumanEval_csharp/142", "language": "csharp", "completion": "return lst.Sum(x => x * x);"}
{"task_id": "HumanEval_csharp/143", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static string WordsInSentence(string sentence)\n    {\n        // Split the sentence into words and filter out those with prime lengths\n        var primeLengthWords = sentence.Split(' ').Where(word => IsPrime(word.Length)).ToList();\n\n        // Join the filtered words back into a single string separated by spaces\n        return String.Join(\" \", primeLengthWords);\n    }\n\n    // Helper method to check if a number is prime\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    // Example usage\n    public static void Main()\n    {\n        Console.WriteLine(WordsInSentence(\"This is a test\")); // Output: \"is\"\n        Console.WriteLine(WordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "HumanEval_csharp/144", "language": "csharp", "completion": "public static bool Simplify(string x, string n)\n{\n    // Split each fraction into numerator and denominator\n    var fractionX = x.Split('/').Select(int.Parse).ToArray();\n    var fractionN = n.Split('/').Select(int.Parse).ToArray();\n\n    // Multiply the numerators and denominators\n    int numeratorProduct = fractionX[0] * fractionN[0];\n    int denominatorProduct = fractionX[1] * fractionN[1];\n\n    // Check if the division of the products results in a whole number\n    return (numeratorProduct % denominatorProduct) == 0;\n}"}
{"task_id": "HumanEval_csharp/145", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            if (nums == null || nums.Count == 0)\n                return new List<int>();\n\n            return nums\n                .Select((value, index) => new { Value = value, Index = index }) // Create an anonymous type with Value and Index properties\n                .OrderBy(item => item.Value.ToString().Sum(c => c - '0')) // Order by the sum of digits of each number\n                .ThenBy(item => item.Index) // Then order by original index if sums are equal\n                .Select(item => item.Value) // Project back to a list of integers\n                .ToList(); // Convert to List<int>\n        }\n\n        static void Main(string[] args)\n        {\n            var test1 = new List<int> { 1, 11, -1, -11, -12 };\n            var test2 = new List<int>();\n\n            Console.WriteLine($\"Test 1: [{string.Join(\", \", OrderByPoints(test1))}]\");\n            Console.WriteLine($\"Test 2: [{string.Join(\", \", OrderByPoints(test2))}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/146", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SpecialFilter(List<int> nums)\n        {\n            int count = 0;\n\n            foreach (var number in nums)\n            {\n                string numStr = Math.Abs(number).ToString(); // Convert the number to a string and handle negative numbers by taking absolute value\n                int firstDigit = int.Parse(numStr[0].ToString());\n                int LastDigit = int.Parse(numStr[numStr.Length - 1].ToString());\n\n                // Check if the number is greater than 10, and both the first and last digits are odd\n                if (number > 10 && FirstDigit % 2 != 0 && LastDigit % 2 != 0)\n                {\n                    count++; // Increment count if conditions are met\n                }\n            }\n\n            return count; // Return the total count of numbers that meet the criteria\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Expected output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Expected output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/147", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int GetMaxTriples(int n)\n        {\n            List<int> a = new List<int>();\n            for (int i = 1; i <= n; i++)\n            {\n                A.Add(i * i - i + 1);\n            }\n\n            int count = 0;\n            for (int i = 0; i < A.Count; i++)\n            {\n                for (int j = i + 1; j < A.Count; j++)\n                {\n                    for (int k = j + 1; k < A.Count; k++)\n                    {\n                        if ((A[i] + A[j] + A[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(GetMaxTriples(5)); // Output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/148", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    private static readonly Dictionary<string, int> planetsOrbitOrder = new Dictionary<string, int>\n    {\n        {\"Mercury\", 1},\n        {\"Venus\", 2},\n        {\"Earth\", 3},\n        {\"Mars\", 4},\n        {\"Jupiter\", 5},\n        {\"Saturn\", 6},\n        {\"Uranus\", 7},\n        {\"Neptune\", 8}\n    };\n\n    public static Tuple<string, string> Bf(string planet1, string planet2)\n    {\n        if (!planetsOrbitOrder.ContainsKey(planet1) || !planetsOrbitOrder.ContainsKey(planet2))\n            return new Tuple<string, string>(String.Empty, String.Empty);\n\n        var index1 = planetsOrbitOrder[planet1];\n        var index2 = planetsOrbitOrder[planet2];\n\n        if (index1 > index2)\n        {\n            // Ensure index1 is always less than index2 for simplicity\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        var planetsBetween = new List<string>();\n\n        foreach (var planet in planetsOrbitOrder.Keys)\n        {\n            if (planetsOrbitOrder[planet] > index1 && planetsOrbitOrder[planet] < index2)\n                planetsBetween.Add(planet);\n        }\n\n        return Tuple.Create(String.Join(\",\", planetsBetween), String.Empty);\n    }\n\n    // Example usage:\n    public static void Main()\n    {\n        Console.WriteLine(Bf(\"Jupiter\", \"Neptune\")); // Outputs: (\"Saturn\", \"Uranus\")\n        Console.WriteLine(Bf(\"Earth\", \"Mercury\"));  // Outputs: (\"Venus\")\n        Console.WriteLine(Bf(\"Mercury\", \"Uranus\")); // Outputs: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    }\n}"}
{"task_id": "HumanEval_csharp/149", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SortedListSum(List<string> lst)\n        {\n            // Remove strings with odd lengths\n            var evenLengthStrings = lst.Where(s => s.Length % 2 == 0).ToList();\n\n            // Sort the list by length of each word and then alphabetically for words of equal length\n            evenLengthStrings.Sort((x, y) => x.Length != y.Length ? x.Length.CompareTo(y.Length) : String.Compare(x, y));\n\n            return evenLengthStrings;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the function with example cases\n            var sortedList1 = SortedListSum(new List<string> { \"aa\", \"A\", \"aaa\" });\n            Console.WriteLine($\"Sorted: [{string.Join(\", \", sortedList1)}]\"); // Expected: [aa]\n\n            var sortedList2 = SortedListSum(new List<string> { \"ab\", \"A\", \"aaa\", \"cd\" });\n            Console.WriteLine($\"Sorted: [{string.Join(\", \", sortedList2)}]\"); // Expected: [ab, cd]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/150", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n        /// </summary>\n        public static int XOrY (int n, int x, int y) \n        {\n            if(IsPrime(n))\n                return x;\n            else\n                return y;\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) \n                    return false;\n            }\n\n            return true;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(XOrY(7, 34, 12)); // should return 34\n            Console.WriteLine(XOrY(15, 8, 5));  // should return 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/151", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static int DoubleTheDifference(List<object> numbers) {\n        int sum = 0;\n        foreach (var number in numbers) {\n            if (number is int num && num > 0 && num % 2 != 0) {\n                sum += num * num;\n            }\n        }\n        return sum * 2; // Double the sum\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(DoubleTheDifference(new List<object>{1, 3, 2, 0})); // Output: 10\n        Console.WriteLine(DoubleTheDifference(new List<object>{-1, -2, 0})); // Output: 0\n        Console.WriteLine(DoubleTheDifference(new List<object>{9, -2})); // Output: 81\n        Console.WriteLine(DoubleTheDifference(new List<object>{0})); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_csharp/152", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> Compare(List<int> game, List<int> guess)\n    {\n        if (game.Count != guess.Count)\n            throw new ArgumentException(\"Game and guess lists must be of the same length.\");\n\n        List<int> result = new List<int>();\n        for (int i = 0; i < game.Count; i++)\n        {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n\n        return result;\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> comparison1 = Compare(new List<int> { 1, 2, 3, 4, 5, 1 }, new List<int> { 1, 2, 3, 4, 2, -2 });\n        Console.WriteLine($\"Comparison 1: [{string.Join(\", \", comparison1)}]\");\n\n        List<int> comparison2 = Compare(new List<int> { 0, 5, 0, 0, 0, 4 }, new List<int> { 4, 1, 1, 0, 0, -2 });\n        Console.WriteLine($\"Comparison 2: [{string.Join(\", \", comparison2)}]\");\n    }\n}"}
{"task_id": "HumanEval_csharp/153", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static string StrongestExtension(string className, List<string> extensions)\n    {\n        var strengthByExtension = new Dictionary<string, double>();\n        foreach (var extension in extensions)\n        {\n            int uppercaseCount = extension.Count(char.IsUpper);\n            int lowercaseCount = extension.Count(char.IsLower);\n            double strength = uppercaseCount - lowercaseCount;\n            strengthByExtension[extension] = strength;\n        }\n\n        var strongestExtension = extensions.OrderByDescending(e => strengthByExtension[e])\n                                           .ThenBy(e => extensions.IndexOf(e))\n                                           .FirstOrDefault();\n\n        return $\"{className}.{strongestExtension}\";\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Output: Slices.SErviNGSliCes\n        Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // Output: myClass.AA\n    }\n}"}
{"task_id": "HumanEval_csharp/154", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CycpatternCheck (string A, string B) \n        {\n            if (string.IsNullOrEmpty(A) || string.IsNullOrEmpty(B))\n                return false;\n\n            // Concatenate the first string with itself to handle rotations\n            var concatenated = A + A;\n\n            // Check if the second string is a substring of the concatenated string\n            return concatenated.Contains(B);\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/155", "language": "csharp", "completion": "using System;\n\nclass Problem {\n    // Given an integer, return a tuple with the count of even and odd digits respectively.\n    // Example:\n    // >>> CountEvenOddDigits(-12)\n    // (1, 1)\n    // >>> CountEvenOddDigits(123)\n    // (1, 2)\n    public static Tuple<int, int> CountEvenOddDigits(int num) {\n        string absNumStr = Math.Abs(num).ToString(); // Convert the absolute value to a string\n        int evenCount = 0, oddCount = 0;\n\n        foreach (char digit in absNumStr) {\n            if ((digit - '0') % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        return Tuple.Create(evenCount, oddCount);\n    }\n\n    static void Main() {\n        Console.WriteLine(CountEvenOddDigits(-12)); // Output: (1, 1)\n        Console.WriteLine(CountEvenOddDigits(123)); // Output: (1, 2)\n    }\n}"}
{"task_id": "HumanEval_csharp/156", "language": "csharp", "completion": "public static string IntToMiniRoman(int num)\n{\n    if ((num < 1) || (num > 1000))\n        throw new ArgumentOutOfRangeException(\"num\", \"Value must be between 1 and 1000\");\n\n    var map = new Dictionary<int, string>\n    {\n        { 1000, \"m\" }, { 900, \"cm\" }, { 500, \"d\" }, { 400, \"cd\" },\n        { 100, \"c\" }, { 90, \"xc\" }, { 50, \"l\" }, { 40, \"xl\" },\n        { 10, \"x\" }, { 9, \"ix\" }, { 5, \"v\" }, { 4, \"iv\" }, { 1, \"i\" }\n    };\n\n    var roman = new StringBuilder();\n\n    foreach (var item in map)\n    {\n        while (num >= item.Key)\n        {\n            roman.Append(item.Value);\n            num -= item.Key;\n        }\n    }\n\n    return roman.ToString();\n}"}
{"task_id": "HumanEval_csharp/157", "language": "csharp", "completion": "public static bool RightAngleTriangle(int A, int b, int c) \n{\n    // First, sort the sides to make sure 'c' is the longest side (hypotenuse)\n    var sides = new List<int> { A, b, c };\n    sides.Sort();\n\n    // Check if the square of the longest side equals the sum of squares of other two\n    return Math.Pow(sides[0], 2) + Math.Pow(sides[1], 2) == Math.Pow(sides[2], 2);\n}"}
{"task_id": "HumanEval_csharp/158", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string FindMax(List<string> words)\n        {\n            return words.OrderByDescending(word => word.Distinct().Count()).ThenBy(word => word).FirstOrDefault();\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FindMax(new List<string> { \"name\", \"of\", \"string\" })); // Output: string\n            Console.WriteLine(FindMax(new List<string> { \"name\", \"enam\", \"game\" })); // Output: enam\n            Console.WriteLine(FindMax(new List<string> { \"aaaaaaa\", \"bb\", \"cc\" }));  // Output: aaaaaaa\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/159", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static List<int> Eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots that will be eaten after meals\n        int totalEaten = number + Math.Min(need, remaining);\n        \n        // Calculate the number of carrots left after meals\n        int carrotsLeft = Math.Max(0, remaining - need);\n        \n        // Return the result as a list\n        return new List<int> { totalEaten, carrotsLeft };\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine($\"[11, 4] == {String.Join(\", \", Eat(5, 6, 10))}\"); // Example 1\n        Console.WriteLine($\"[12, 1] == {String.Join(\", \", Eat(4, 8, 9))}\"); // Example 2\n        Console.WriteLine($\"[11, 0] == {String.Join(\", \", Eat(1, 10, 10))}\"); // Example 3\n        Console.WriteLine($\"[7, 0] == {String.Join(\", \", Eat(2, 11, 5))}\"); // Example 4\n    }\n}"}
{"task_id": "HumanEval_csharp/160", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int DoAlgebra(List<string> operators, List<int> operands)\n    {\n        if (operators.Count != operands.Count - 1)\n            throw new ArgumentException(\"The length of operator list must be equal to the length of operand list minus one.\");\n\n        for (int i = 0; i < operators.Count; i++)\n        {\n            switch (operators[i])\n            {\n                case \"+\":\n                    operands[i + 1] = operands[i] + operands[i + 1];\n                    break;\n                case \"-\":\n                    operands[i + 1] = operands[i] - operands[i + 1];\n                    break;\n                case \"*\":\n                    operands[i + 1] = operands[i] * operands[i + 1];\n                    break;\n                case \"//\":\n                    operands[i + 1] = operands[i] / operands[i + 1];\n                    break;\n                case \"**\":\n                    operands[i + 1] = (int)Math.Pow(operands[i], operands[i + 1]);\n                    break;\n                default:\n                    throw new ArgumentException(\"Invalid operator.\");\n            }\n\n            // Remove the first element from the list\n            operands.RemoveAt(0);\n        }\n\n        return operands[0];\n    }\n}"}
{"task_id": "HumanEval_csharp/161", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Solve(string s)\n        {\n            if (s.All(char.IsLetter))\n            {\n                return new string(s.Select(c => char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)).ToArray());\n            }\n            else\n            {\n                return new string(s.Reverse().ToArray());\n            }\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(Solve(\"1234\")); // Output: \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/162", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null; // Or throw an exception if you prefer handling empty strings differently\n            }\n\n            using var md5 = MD5.Create();\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n            var hashBytes = md5.ComputeHash(inputBytes);\n\n            var sb = new StringBuilder();\n            foreach (var b in hashBytes)\n            {\n                sb.Append(b.ToString(\"x2\"));\n            }\n\n            return sb.ToString();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/163", "language": "csharp", "completion": "public static List<int> GenerateIntegers (int A, int b) \n{\n    // Ensure that 'A' is always less than or equal to 'b' for the loop range.\n    if (A > b)\n    {\n        int temp = A;\n        A = b;\n        b = temp;\n    }\n\n    List<int> evenDigits = new List<int>();\n    for (int i = A; i <= b; i++)\n    {\n        if (i % 2 == 0) // Check if the number is even.\n        {\n            evenDigits.Add(i);\n        }\n    }\n\n    return evenDigits;\n}"}

{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "function separateParenGroups(parenstring) {\n    let result = [];\n    let stack = [];\n    let group = '';\n\n    for (let i = 0; i < parenstring.length; i++) {\n        if (parenstring[i] === '(') {\n            stack.push(parenstring[i]);\n            group += parenstring[i];\n        } else if (parenstring[i] === ')' && stack.length > 0) {\n            stack.pop();\n            group += parenstring[i];\n\n            if (stack.length === 0) {\n                result.push(group);\n                group = '';\n            }\n        } else if (parenstring[i] !== ' ') {\n            throw new Error('Invalid input: non-parentheses character found');\n        }\n    }\n\n    if (stack.length > 0) {\n        throw new Error('Invalid input: unbalanced parentheses found');\n    }\n\n    return result;\n}\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));  // Outputs: ['()', '(())', '(()())']"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n  return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;  // start with zero balance\n\n    for (let operation of operations) {\n        balance += operation;  // update balance after each operation\n\n        if (balance < 0) {  // check if balance is below zero\n            return true;  // return True at that point\n        }\n    }\n\n    return false;  // return False if the loop ends without finding any negative balance\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n    // Calculate the mean of the numbers\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n\n    // Calculate the absolute differences from the mean and sum them up\n    const mad = numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0);\n\n    // Return the average of these absolute differences (i.e., MAD)\n    return mad / numbers.length;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimiter) {\n    if (numbers.length === 0) return [];\n    let result = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimiter, numbers[i]);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenstring) {\n  let result = [];\n  let groups = parenstring.split(' ');\n  for (let i = 0; i < groups.length; i++) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let j = 0; j < groups[i].length; j++) {\n      if (groups[i][j] === '(') {\n        depth++;\n        maxDepth = Math.max(maxDepth, depth);\n      } else if (groups[i][j] === ')') {\n        depth--;\n      }\n    }\n    result.push(maxDepth);\n  }\n  return result;\n}\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())')); // [2, 3, 1, 3]"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "function filterBySubstring(strings, substring) {\n    return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n    let sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n    let product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);\n    return [sum, product];\n}\n\nconsole.log(sumProduct([]));  // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4]));  // Output: [10, 24]"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n  let max = numbers[0]; // Initialize the maximum value with the first element\n  return numbers.map(number => {\n    if (number > max) { // If the current number is greater than the current max, update the max\n      max = number;\n    }\n    return max; // Return the current max for this position in the sequence\n  });\n}\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2])); // Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function reverseString(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}\n\nfunction isPalindrome(str) {\n  return str === reverseString(str);\n}\n\nfunction makePalindrome(string) {\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (IsPalindrome(prefix)) {\n      break;\n    }\n  }\n  return string + reverseString(prefix);\n}\n\nconsole.log(makePalindrome('')); // ''\nconsole.log(makePalindrome('cat')); // 'catac'\nconsole.log(makePalindrome('cata')); // 'catac'"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "for(let i=0; i<a.length; i++) {\n       let numA = parseInt(a[i]);\n       let numB = parseInt(b[i]);\n       let xorResult = numA ^ numB;\n       result += xorResult.toString();\n   }"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) return \"none\";\n\n    let maxLength = strings[0].length;\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    if (!b) {\n        return a;\n    }\n    return greatestCommonDivisor(b, A % B);\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "function AllPrefixes(str) {\n    var result = [];\n    for (let i = 1; i <= str.length; i++) {\n        result.push(str.substring(0, i));\n    }\n    return result;\n}\n\nconsole.log(AllPrefixes('abc'));  // Output: ['A', 'ab', 'abc']"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n    let sequence = \"\";\n    for (let i = 0; i <= n; i++) {\n        sequence += `${i} `;\n    }\n    return sequence.trim();\n}\n\nconsole.log(stringSequence(0));  // '0'\nconsole.log(stringSequence(5));  // '0 1 2 3 4 5'"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n    var lowerCaseString = string.toLowerCase();\n    var uniqueChars = {};\n\n    for (var i=0; i<lowerCaseString.length; i++) {\n        uniqueChars[lowerCaseString[i]] = true;\n    }\n\n    return Object.keys(uniqueChars).length;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicString) {\n    let beats = [];\n    let notes = musicString.split(' ');\n\n    for (let note of notes) {\n        switch (note) {\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n            default:\n                console.log(`Unknown note: ${note}`);\n        }\n    }\n\n    return beats;\n}\n\n// Test the function\nlet musicString = 'o o| .| o| o| .| .| .| .| o o';\nconsole.log(parseMusic(musicString));  // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(string, substring) {\n    let count = 0;\n    let pos = 0;\n\n    // If string or substring is empty return 0\n    if (!string || !substring) {\n        return 0;\n    }\n\n    while ((pos = string.indexOf(substring, pos)) !== -1) {\n        count++;\n        pos++; // Increment position to allow overlapping matches\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Create an object mapping each number word to its numerical value\n    const numMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    // Convert the input string into an array of numbers using map and numMap\n    const numArray = numbers.split(' ').map(word => numMap[word]);\n\n    // Sort the array in ascending numerical order\n    numArray.sort((a, B) => A - B);\n\n    // Convert the sorted array back into a string of number words using map and numMap, then join them back into a single string with spaces between each word\n    const sortedNumbers = numArray.map(num => Object.keys(numMap).find(key => numMap[key] === num)).join(' ');\n\n    return sortedNumbers;\n}"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return closestPair;\n}\n\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]));  // Output: [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]));  // Output: [2.0, 2.0]"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n\n    return numbers.map(number => (number - min) / range);\n}\n\n// Example usage:\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0]));  // Outputs [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values) {\n    return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": ">>> strlen('')\n0\n>>> strlen('abc')\n3"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n  for (let i = Math.floor(n / 2); i >= 1; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1; // if no divisor is found, return 1 (since every number is divisible by 1).\n}\n\nconsole.log(largestDivisor(15)); // Output: 5"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n  let factors = [];\n  // Factor out all 2s.\n  while (n % 2 === 0) {\n    factors.push(2);\n    n /= 2;\n  }\n  // Factor out other primes up to sqrt(n).\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  // If n is a prime number greater than 2.\n  if (n > 2) {\n    factors.push(n);\n  }\n  return factors;\n}\n\nconsole.log(factorize(8)); // [2, 2, 2]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(70)); // [2, 5, 7]"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n    let uniqueNumbers = new Set(numbers);\n    return Array.from(uniqueNumbers);\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(str) {\n    return str.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n}\n\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "function concatenate(strings) {\n  return strings.join('');\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n    return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "function get_positive(l){\n    return l.filter((num) => num > 0);\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "/**\n * Check if a given number is prime.\n * \n * @param {number} n - The number to check.\n * @return {boolean} Returns true if the number is prime, otherwise false.\n */\n\nfunction IsPrime(n) {\n    if (n <= 1) return false; // Numbers less than or equal to 1 are not prime\n    if (n === 2) return true;  // 2 is the only even prime number\n\n    for (let i = 2, sqrtN = Math.sqrt(n); i <= sqrtN; i++) {\n        if (n % i === 0) return false; // Found a divisor other than 1 and n, so it's not prime\n    }\n\n    return true; // No divisors found, so it's prime\n}\n\n// Test cases to verify the correctness of the function\nconsole.log(IsPrime(6));      // Expected output: false\nconsole.log(IsPrime(101));    // Expected output: true\nconsole.log(IsPrime(11));     // Expected output: true\nconsole.log(IsPrime(13441));  // Expected output: true\nconsole.log(IsPrime(61));     // Expected output: true\nconsole.log(IsPrime(4));      // Expected output: false\nconsole.log(IsPrime(1));      // Expected output: false"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n    // create an array of elements at indices divisible by 3\n    var arr = l.filter((e, i) => i % 3 === 0).sort((a, B) => A - B);\n\n    // replace the elements at indices divisible by 3 in the original array with the sorted elements\n    for(var i = 0; i < arr.length; i++){\n        l[i*3] = arr[i];\n    }\n\n    return l;\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "function unique(l) {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (!result.includes(l[i])) {\n            result.push(l[i]);\n        }\n    }\n    return result.sort((a, B) => A - B);\n}"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n  return Math.max(...l);\n}\n\n// Test cases\nconsole.log(maxElement([1, 2, 3])); // Outputs: 3\nconsole.log(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Outputs: 123"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n      count += i.toString().split('').reduce((acc, digit) => digit === '7' ? acc + 1 : acc, 0);\n    }\n  }\n  return count;\n}\n\nconsole.log(fizzBuzz(50)); // Output: 0\nconsole.log(fizzBuzz(78)); // Output: 2\nconsole.log(fizzBuzz(79)); // Output: 3"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n  let lPrime = [...l]; // Create a copy of l to avoid mutating the original array\n  const sortedEvens = l.filter((_, index) => index % 2 === 0).sort((a, B) => A - B); // Sort even indices elements of l\n  \n  // Assign sorted even indices elements to their corresponding positions in lPrime\n  sortedEvens.forEach((value, index) => {\n    lPrime[index * 2] = value;\n  });\n\n  return lPrime;\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n\n    let sqrtNum = Math.sqrt(num);\n    for (let i = 3; i <= sqrtNum; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction fibonacci(n) {\n    let sequence = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence[n];\n}\n\nfunction primeFib(n) {\n    let count = 0;\n    for (let i = 0; ; i++) {\n        let fibNum = fibonacci(i);\n        if (isPrime(fibNum)) {\n            count++;\n            if (count === n) return fibNum;\n        }\n    }\n}\n\nconsole.log(primeFib(1)); // Output: 2\nconsole.log(primeFib(2)); // Output: 3\nconsole.log(primeFib(3)); // Output: 5\nconsole.log(primeFib(4)); // Output: 13\nconsole.log(primeFib(5)); // Output: 89"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "console.log(triplesSumToZero([1, 3, 5, 0])); // Output: false\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // Output: true\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // Output: false\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // Output: true\nconsole.log(triplesSumToZero([1])); // Output: false"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n    let totalCollisions = 0;\n    for (let i = 0; i < n; i++) {\n        totalCollisions += n - i - 1; // Each left to right car will collide with each right to left car.\n    }\n    return totalCollisions;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n  return l.map((element) => element + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "/**\n * pairsSumToZero takes a list of integers as an input.\n * It returns True if there are two distinct elements in the list that\n * sum to zero, and False otherwise.\n */\n\nfunction pairsSumToZero(l) {\n    let seenNumbers = new Set();\n\n    for (let num of l) {\n        if (seenNumbers.has(-num)) {\n            return true;\n        } else {\n            seenNumbers.add(num);\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base) {\n    if (base < 2 || base > 9) {\n        throw new Error('Base must be between 2 and 9');\n    }\n\n    var result = '';\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n\n    return result || '0';\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(A, h) {\n  return 0.5 * A * h;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n  if (n < 2) return 0;\n  if (n === 2) return 2;\n\n  let previousFour = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    previousFour[i % 4] = previousFour.reduce((a, B) => A + B);\n  }\n\n  return previousFour[(n - 1) % 4];\n}\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "function median(l) {\n    // First, sort the list in ascending order\n    l.sort((a, B) => A - B);\n\n    // Get the length of the list\n    var len = l.length;\n\n    // Check if the length is even or odd and return the appropriate median\n    if (len % 2 === 0) { // Even number of elements\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else { // Odd number of elements\n        return l[(len - 1) / 2];\n    }\n}"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "/**\n * Checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward.\n * \n * @param {string} text - The input string to check.\n * @return {boolean} Returns true if the string is a palindrome and false otherwise.\n */\n\nfunction IsPalindrome(text) {\n    // Convert string to lowercase for case-insensitive comparison\n    const lowerCaseText = text.toLowerCase();\n\n    // Reverse the input string\n    const reversedText = lowerCaseText.split('').reverse().join('');\n\n    // Check if original and reversed strings are equal\n    return lowerCaseText === reversedText;\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n    let result = 1;\n    let base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n / 2);\n    }\n\n    return result;\n}\n\nconsole.log(modp(3, 5)); // Output: 3\nconsole.log(modp(1101, 101)); // Output: 2\nconsole.log(modp(0, 101)); // Output: 1\nconsole.log(modp(3, 11)); // Output: 8\nconsole.log(modp(100, 101)); // Output: 1"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "// Function to check if two words have the same characters\nfunction sameChars(s0, s1) {\n    // Convert both strings into sets of unique characters\n    const set0 = new Set(s0);\n    const set1 = new Set(s1);\n\n    // Check if both sets are equal (i.e., have the same characters)\n    return set0.size === set1.size && [...set0].every(char => set1.has(char));\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let counter = 0;\n\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            counter++;\n        } else if (brackets[i] === '>') {\n            counter--;\n            if (counter < 0) {\n                return false;  // Found a closing bracket without an opening bracket\n            }\n        }\n    }\n\n    return counter === 0;  // All brackets are matched if counter is zero\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "function monotonic(l) {\n    let increasing = true;\n    let decreasing = true;\n\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "function common(l1, l2) {\n  // Convert both arrays to Sets to remove duplicates and then back to Arrays\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n\n  // Filter the first array to only include elements that are also in the second array\n  const commonElements = [...set1].filter(element => set2.has(element));\n\n  // Return the sorted array of common elements\n  return commonElements.sort((a, B) => A - B);\n}\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));  // Output: [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2]));                                 // Output: [2, 3]"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  var i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n    return (n * (n + 1)) / 2;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let counter = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            counter++;\n        } else if (brackets[i] === ')') {\n            counter--;\n            if (counter < 0) {\n                return false;\n            }\n        }\n    }\n    return counter === 0;\n}\n\n// Test cases:\nconsole.log(correctBracketing(\"(\")); // false\nconsole.log(correctBracketing(\"()\")); // true\nconsole.log(correctBracketing(\"(()())\")); // true\nconsole.log(correctBracketing(\")(()\")); // false"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n  return xs.slice(1).map((coefficient, index) => coefficient * (index + 1));\n}\n\n// Test cases:\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));      // Output: [2, 6]"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "const fibfib = (n) => {\n  if (n === 0 || n === 1) return 0; // Handle base cases\n  if (n === 2) return 1;\n\n  let a = 0, B = 0, C = 1, D = 1;\n\n  for(let i = 3; i <= n; i++) {\n    D = A + B + C; // Calculate next FibFib number\n    A = B; // Update previous three FibFib numbers\n    B = C;\n    C = D;\n  }\n\n  return D; // Return the n-th FibFib number\n};\n\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n    var count = 0;\n    // Define the vowels\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n   \n    for (var i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i]) || (s[i].toLowerCase() === 'y' && i === s.length - 1)) {\n            count++;\n        }\n    }\n   \n    return count;\n}\n\nconsole.log(vowelsCount(\"abcde\")); // Output: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Output: 3"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "const xStr = x.toString();"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitsum(s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n\n// Test the function with provided examples\nconsole.log(digitsum(\"\")); // 0\nconsole.log(digitsum(\"abAB\")); // 131\nconsole.log(digitsum(\"abcCd\")); // 67\nconsole.log(digitsum(\"helloE\")); // 69\nconsole.log(digitsum(\"woArBld\")); // 131\nconsole.log(digitsum(\"aAaaaXA\")); // 153"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n    var matches = s.match(/(\\d+)\\sapples\\sand\\s(\\d+)\\soranges/);\n    return n - (parseInt(matches[1]) + parseInt(matches[2]));\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); // Output: 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); // Output: 19"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n    let minVal = Infinity;\n    let minIndex = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] <= minVal) {\n            minVal = arr[i];\n            minIndex = i;\n        }\n    }\n\n    return [minVal, minIndex];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "function search(lst) {\n    let freqMap = {}; // Create an empty object to hold frequency count\n    for (let i=0; i<lst.length; i++) {\n        if (!freqMap[lst[i]]) { // If the integer is not in the map, initialize its count as 1\n            freqMap[lst[i]] = 1;\n        } else { // Otherwise, increment its count by 1\n            freqMap[lst[i]]++;\n        }\n    }\n\n    let max=-1; // Initialize the maximum integer we found so far as -1\n    for (let key in freqMap) {\n        if (key <= freqMap[key] && key > max) { // If the frequency is >= its value and greater than the current max\n            max = parseInt(key); // Update the max\n        }\n    }\n\n    return max; // Return the max integer that meets our criteria or -1 if none exist\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n    let sortedArray = lst.slice().sort((a, B) => A - B); // sort array in ascending order\n    let resultArray = [];\n    while (sortedArray.length > 0) {\n        resultArray.push(sortedArray.shift()); // get and remove the smallest value\n        if (sortedArray.length > 0) {\n            resultArray.push(sortedArray.pop()); // get and remove the largest value\n        }\n    }\n    return resultArray;\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]));  // Output: [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5]));  // Output: [5, 5, 5, 5]\nconsole.log(strangeSortList([]));             // Output: []"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "/**\n * Given the lengths of the three sides of a triangle, return the area of \n * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n * Otherwise return -1.\n * A valid triangle has the sum of any two sides greater than the third side.\n * Example:\n * triangleArea(3, 4, 5) should return 6.00\n * triangleArea(1, 2, 10) should return -1\n */\n\nfunction triangleArea(A, B, C) {\n  // Check if the sides form a valid triangle\n  if (A + B <= C || A + C <= B || B + C <= A) {\n    return -1;\n  }\n\n  // Calculate the semi-perimeter\n  const s = (A + B + C) / 2;\n\n  // Calculate the area using Heron's formula\n  const area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n  // Return the area rounded to 2 decimal points\n  return parseFloat(area.toFixed(2));\n}\n\n// Test cases\nconsole.log(triangleArea(3, 4, 5)); // Should return 6.00\nconsole.log(triangleArea(1, 2, 10)); // Should return -1"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if array is palindromic.\n    let reversed = [...q].reverse();\n    if (!arrayEquals(q, reversed)) return false;\n\n    // Calculate total weight of object q.\n    let totalWeight = q.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue;\n    }, 0);\n\n    // Check if total weight is less than or equal to maximum weight w.\n    if (totalWeight <= w) return true;\n    else return false;\n}\n\nfunction arrayEquals(a, B) {\n    let len = A.length;\n    if (len != B.length) return false;\n    for(let i=0; i<len; i++) {\n        if (A[i] !== B[i]) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n    let changes = 0;\n  \n    for (let i = 0, j = arr.length - 1; i < j; i++, j--) {\n        if (arr[i] !== arr[j]) {\n            changes++;\n        }\n    }\n  \n    return changes;\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n  let countLst1 = 0;\n  let countLst2 = 0;\n\n  for (let i=0; i<lst1.length; i++) {\n    countLst1 += lst1[i].length;\n  }\n\n  for (let i=0; i<lst2.length; i++) {\n    countLst2 += lst2[i].length;\n  }\n\n  if (countLst1 <= countLst2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isMultiplyPrime(A) {\n    let count = 0; // Initialize counter to keep track of prime factors\n\n    for (let i = 2; i <= A; i++) { // Loop through all numbers from 2 to A\n        while (A % i === 0) { // While A is divisible by i\n            count++; // Increment the counter\n            A /= i; // Divide A by i\n        }\n    }\n\n    return count === 3 && A === 1; // Return true if exactly three prime factors and all factors were used up, otherwise return false\n}\n\n// Test function\nconsole.log(isMultiplyPrime(30)); // Should print: true"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function IsSimplePower(x, n) {\n  if (n === 1) {\n    return x === 1;\n  } else {\n    const logValue = Math.log(x) / Math.log(n);\n    return Number.isInteger(logValue);\n  }\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "function isCube(a) {\n  let cubeRoot = Math.round(Math.pow(Math.abs(a), 1/3));\n  return Math.pow(cubeRoot, 3) === Math.abs(A);\n}"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n    let primeHexDigits = ['2', '3', '5', '7', 'B', 'D']; // array of prime hexadecimal digits\n    let count = 0; // initialize counter for prime hexadecimal digits\n\n    // loop through each character in the input string\n    for (let i = 0; i < num.length; i++) {\n        // check if current character is a prime hexadecimal digit\n        if (primeHexDigits.includes(num[i])) {\n            count++; // increment count for prime hexadecimal digit\n        }\n    }\n\n    return count; // return final count\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  // Convert the decimal number to binary using built-in method\n  let binary = decimal.toString(2);\n\n  // Add 'db' at the beginning and end of the binary string\n  binary = `db${binary}db`;\n\n  return binary;\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "function IsHappy(s) {\n    // Check if string length is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Loop through the string and check every three consecutive letters\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false; // If any three consecutive letters are not distinct, return false\n        }\n    }\n\n    // If the string passes all checks, it is happy\n    return true;\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n  const letterGrades = [];\n\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] > 3.7) {\n      letterGrades.push('A');\n    } else If (grades[i] > 3.3) {\n      letterGrades.push('A-');\n    } else If (grades[i] > 3.0) {\n      letterGrades.push('B+');\n    } else If (grades[i] > 2.7) {\n      letterGrades.push('B');\n    } else If (grades[i] > 2.3) {\n      letterGrades.push('B-');\n    } else If (grades[i] > 2.0) {\n      letterGrades.push('C+');\n    } else If (grades[i] > 1.7) {\n      letterGrades.push('C');\n    } else If (grades[i] > 1.3) {\n      letterGrades.push('C-');\n    } else If (grades[i] > 1.0) {\n      letterGrades.push('D+');\n    } else If (grades[i] > 0.7) {\n      letterGrades.push('D');\n    } else If (grades[i] > 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  }\n\n  return letterGrades;\n}\n\n// Test the function\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "/**\n * Write a function that takes a string and returns true if the string\n * length is a prime number, false otherwise\n * Examples\n * prime_length('Hello') == true\n * prime_length('abcdcba') == true\n * prime_length('kittens') == true\n * prime_length('orange') == false\n *\n */\nfunction primeLength(string) {\n  let length = string.length;\n\n  // Check if the length is less than 2 (not a prime number)\n  if (length < 2) return false;\n\n  // Check if the length has any divisors other than 1 and itself\n  for (let i = 2, sqrtLength = Math.sqrt(length); i <= sqrtLength; i++) {\n    if (length % i === 0) return false;\n  }\n\n  return true; // If no divisors found, it is a prime number\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n) {\n  // Check if input is valid\n  if(n < 1 || !Number.isInteger(n)){\n    return \"Invalid input! Please enter a positive integer.\";\n  }\n  else if(n === 1){\n    return 1; // Only one single-digit number starts and ends with 1 (which is 1 itself).\n  }\n\n  let count = 0;\n\n  // Count numbers that start with 1\n  count += Math.pow(9, n - 1);\n\n  // Count numbers that end with 1 but not start with 1\n  count += 8 * Math.pow(9, n - 2);\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "/**\n * Given a positive integer N, return the total sum of its digits in binary.\n * \n * Example\n *     for N = 1000, the sum of digits will be 1 and the output should be \"1\".\n *     For N = 150, the sum of digits will be 6 and the output should be \"110\".\n *     for N = 147, the sum of digits will be 12 and the output should be \"1100\".\n * \n * Variables:\n *     @N integer\n *          Constraints: 0 \u2264 N \u2264 10000.\n * Output:\n *      A string of binary number\n *\n */\n\nfunction solve(n) {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum.toString(2);\n}"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n  return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "function getRow(lst, x) {\n    let coordinates = []; // to hold the coordinates where x is found\n    for (let i = 0; i < lst.length; i++) { // iterate over rows\n        for (let j = 0; j < lst[i].length; j++) { // iterate over columns in current row\n            if (lst[i][j] === x) { // if current element is equal to x, add its coordinate to the list\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    // Sort coordinates by rows in ascending order and then by columns in descending order\n    coordinates.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n    return coordinates;\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "function sortArray(array) {\n    if (array.length === 0 || array.length === 1) {\n        return [...array];\n    }\n\n    const sum = array[0] + array[array.length - 1];\n    const sortedArray = [...array].sort((a, B) => A - B);\n\n    if (sum % 2 === 0) {\n        return sortedArray.reverse();\n    } else {\n        return sortedArray;\n    }\n}\n\nconsole.log(sortArray([])); // []\nconsole.log(sortArray([5])); // [5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n    var result = '';\n    for (var i = 0; i < s.length; i++) {\n        var charCode = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) { // uppercase letters\n            result += String.fromCharCode(((charCode - 65 + 4 * 2) % 26) + 65);\n        } else if (charCode >= 97 && charCode <= 122) { // lowercase letters\n            result += String.fromCharCode(((charCode - 97 + 4 * 2) % 26) + 97);\n        } else {\n            // non-alphabetical characters are appended without encryption\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(encrypt('hi')); // returns 'lm'\nconsole.log(encrypt('asdfghjkl')); // returns 'ewhjklnop'\nconsole.log(encrypt('gf')); // returns 'kj'\nconsole.log(encrypt('et')); // returns 'ix'"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst){\n  let sorted = lst.sort((a, B) => A - B); // Sorting the list in ascending order\n  if (sorted.length < 2){\n    return \"none\"; // If there are less than two elements, return \"none\"\n  } else {\n    return sorted[1]; // Return the second element in the sorted list\n  }\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // Outputs: 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // Outputs: 2\nconsole.log(nextSmallest([])); // Outputs: none\nconsole.log(nextSmallest([1, 1])); // Outputs: none"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function isBored(s) {\n    let sentences = s.split(/[\\.\\?\\!]\\s*/); // split the string into sentences\n    let boredomCount = 0;\n\n    for (let sentence of sentences) {\n        if (sentence.startsWith(\"I \")) { // check if the sentence starts with \"I \"\n            boredomCount++;\n        }\n    }\n\n    return boredomCount;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function AnyInt(x, y, z) {\n    // Check if all numbers are integers\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        // Check if one of the numbers is equal to the sum of the other two\n        if (x === y + z || y === x + z || z === x + y) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n    const vowels = ['a', 'E', 'I', 'O', 'U']; // Array of all English vowels in uppercase.\n    let encodedMessage = ''; // This will hold our final message.\n\n    for (let i = 0; i < message.length; i++) {\n        const charCode = message[i].charCodeAt(0); // Get ASCII value of current character.\n        \n        // Swap case for alphabets only.\n        if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) {\n            encodedMessage += message[i] === message[i].toUpperCase() ? message[i].toLowerCase() : message[i].toUpperCase();\n        } else {\n            // If it's not a letter, add the character as it is.\n            encodedMessage += message[i];\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead of that vowel in the alphabet.\n        if (vowels.includes(message[i])) {\n            let index = vowels.indexOf(message[i]); // Get the index of current vowel in vowels array.\n            encodedMessage = encodedMessage.substring(0, i) + String.fromCharCode(charCode + 2 * (index % 2 === 0 ? -1 : 1)) + encodedMessage.substring(i + 1);\n        }\n    }\n\n    return encodedMessage;\n}\n\nconsole.log(encode('test')); // Output: 'TGST'\nconsole.log(encode('This is a message')); // Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "function skjkasdkd(lst) {\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return true;\n  }\n\n  let largestPrime = -Infinity;\n\n  lst.forEach(num => {\n    if (isPrime(num) && num > largestPrime) largestPrime = num;\n  });\n\n  const sumOfDigits = largestPrime.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n  return sumOfDigits;\n}"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Get array of keys in dictionary\n    var keys = Object.keys(dict);\n   \n    // If dictionary is empty, return false\n    if (keys.length === 0) {\n        return false;\n    }\n\n    // Check if all keys are in lower case or upper case\n    var allLowerCase = true;\n    var AllUpperCase = true;\n\n    for (var i = 0; i < keys.length; i++) {\n        if (!(typeof keys[i] === 'string' && typeof dict[keys[i]] === 'string')) {\n            return false; // Return false if a key or value is not a string\n        }\n\n        AllLowerCase &= (keys[i].toLowerCase() === keys[i]);\n        AllUpperCase &= (keys[i].toUpperCase() === keys[i]);\n    }\n\n    // If all keys are in lower case or upper case, return true, else false\n    return AllLowerCase || AllUpperCase;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function countUpTo(n) {\n    var primes = [];\n    for (var i = 2; primes.length < n; i++) { // start from 2 since it is the first prime number\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\nfunction isPrime(num) {\n    for (var i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n}"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(A, B) {\n  // Get the unit digits of both numbers by taking modulus with 10\n  let aUnitDigit = Math.abs(A % 10);\n  let BUnitDigit = Math.abs(B % 10);\n\n  // Return their product\n  return AUnitDigit * BUnitDigit;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "/**\n * Count the number of uppercase vowels at even positions in a string\n * \n * @param {string} s - The input string to be evaluated\n * @return {number} The count of uppercase vowels at even indices\n */\nfunction countUpper(s) {\n    let count = 0; // Initialize the count to zero\n\n    // Loop through the string, checking characters at even positions\n    for (let i = 0; i < s.length; i += 2) {\n        const char = s[i]; // Get the character at the current even index\n\n        // Check if the character is an uppercase vowel\n        if ('AEIOU'.includes(char)) {\n            count++; // Increment the count for each uppercase vowel found\n        }\n    }\n\n    return count; // Return the final count of uppercase vowels at even indices\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n    var num = parseFloat(value);\n    return (num < 0 && num !== Math.floor(num)) ? Math.ceil(num) : Math.floor(num);\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "function makeAPile(n) {\n  let stones = [];\n  let currentStones = n;\n\n  for (let i = 0; i < n; i++) {\n    stones.push(currentStones);\n    // Check if n is odd or even to determine the next number of stones\n    if (n % 2 === 0) { // Even\n      currentStones += 2; // Next even number\n    } else { // Odd\n      currentStones += 2; // Next odd number, same increment as even\n    }\n  }\n\n  return stones;\n}\n\n// Check function to verify the correctness of the solution\nfunction checkSolution() {\n  console.log(makeAPile(3)); // Should print [3, 5, 7]\n  console.log(makeAPile(4)); // Should print [4, 6, 8, 10]\n  console.log(makeAPile(1)); // Should print [1]\n}\n\ncheckSolution();"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "/**\n * * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n * \n * for example:\n * wordsString(\"Hi, My name is John\") should return [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * wordsString(\"One, two, three, four, five, six\") should return [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n *\n */\n\nfunction wordsString(s) {\n    // Split the string by either a comma followed by a space or just spaces\n    const words = s.split(/, | /);\n\n    return words;\n}\n\nconsole.log(wordsString(\"Hi, My name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Ensure x is less than or equal to y\n    if (x > y) return -1;\n\n    // Start from the highest possible even number within the range\n    for (var i = y; i >= x; i--) {\n        if (i % 2 === 0) return i; // If it's even, return it\n    }\n\n    // If no even number is found in the range, return -1\n    return -1;\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) {\n        return -1;\n    } else {\n        let sum = 0;\n        for (let i = n; i <= m; i++) {\n            sum += i;\n        }\n        let average = Math.round(sum / (m - n + 1));\n        return \"0b\" + average.toString(2);\n    }\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(arr) {\n  let result = []; // Create an empty array to store the result\n\n  for (let i of arr) { // Loop through each number in the array\n    if (!i.toString().includes('0') && !i.toString().includes('2') && !i.toString().includes('4') && !i.toString().includes('6') && !i.toString().includes('8')) { // If the number does not contain any even digit\n      result.push(i); // Add it to the result array\n    }\n  }\n\n  return result.sort((a, B) => A - B); // Sort the result array in increasing order and return it\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function byLength(arr){\n    // Filter array to only include numbers between 1 and 9\n    let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n\n    // Sort the array in ascending order\n    filteredArr.sort((a, B) => A - B);\n\n    // Reverse the sorted array\n    filteredArr.reverse();\n\n    // Convert numbers to their corresponding names\n    let result = filteredArr.map(num => {\n        const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n        return names[num - 1];\n    });\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) { // even index\n            result.push(factorial(i));\n        } else { // odd index\n            result.push(sum(i));\n        }\n    }\n    return result;\n\n    function factorial(n) {\n        let prod = 1;\n        for (let i = 2; i <= n; i++) {\n            prod *= i;\n        }\n        return prod;\n    }\n\n    function sum(n) {\n        let sum = 0;\n        for (let i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let countEven = 0;\n    let countOdd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n\n    return [countEven, countOdd];\n}\n\nfunction isPalindrome(num) {\n    let reversed = parseInt(String(num).split('').reverse().join(''));\n    return num === reversed;\n}"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function countNums(arr) {\n  let result = arr.filter(num => {\n    // convert number to string so we can easily iterate through its digits\n    const strNum = num.toString();\n\n    // sum of all digits (taking into account the sign of the first digit if the number is negative)\n    let sumOfDigits = 0;\n    for(let i=0; i<strNum.length; i++) {\n      if(i === 0 && strNum[i] === '-') continue; // skip \"-\" sign\n\n      sumOfDigits += parseInt(strNum[i], 10); // add digit to sum\n    }\n\n    // return true if the sum of digits is greater than zero, false otherwise\n    return sumOfDigits > 0;\n  });\n\n  return result.length; // return length of filtered array which gives us number of elements that have a sum of digits > 0\n}"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length <= 1) return true; // If array is empty or has one element, return true\n\n    var arr_sorted = [...arr].sort((a, B) => A - B); // Sort the array in ascending order\n    var count = 0; // Initialize count for shift operations\n    var swap_needed = false; // Initialize swap_needed as false\n\n    // Iterate through the array from right to left\n    for (let i = arr.length - 2; i >= 0; i--) {\n        if (arr[i] > arr[i + 1]) { // If an element is greater than its next element\n            swap_needed = true; // Set swap_needed as true\n            count++; // Increment count by 1\n\n            // Perform the swap operation to bring the bigger element to its correct position\n            let temp = arr[i];\n            arr[i] = arr[i + 1];\n            arr[i + 1] = temp;\n\n            // Check if the array is sorted in non-decreasing order\n            for (let j = i; j < arr.length - 2; j++) {\n                if (arr[j] > arr[j + 1]) return false; // If not sorted, return false\n            }\n\n            // If the array is sorted and it was necessary to perform a swap operation, break the loop\n            if (count == 1) break;\n        }\n    }\n\n    // If 'swap_needed' remains as false, then no swap operation was needed to make array non-decreasing order\n    if (!swap_needed) {\n        // Check if arr[N - 2] > arr[N - 1], perform one right shift operation and check again\n        let temp = arr[arr.length - 2];\n        arr[arr.length - 2] = arr[arr.length - 1];\n        arr[arr.length - 1] = temp;\n\n        // Check if the array is sorted in non-decreasing order\n        for (let i = 0; i < arr.length - 2; i++) {\n            if (arr[i] > arr[i + 1]) return false; // If not sorted, return false\n        }\n    }\n\n    return true; // Return true if array is sorted\n}"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  let oddCountLst1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCountLst2 = lst2.filter(num => num % 2 === 0).length;\n\n  return oddCountLst1 <= evenCountLst2 ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(test) {\n    let charCount = {};\n    let maxCount = 0;\n    let result = {};\n\n    for (let i = 0; i < test.length; i++) {\n        if (test[i] !== ' ') {\n            charCount[test[i]] = (charCount[test[i]] || 0) + 1;\n            maxCount = Math.max(maxCount, charCount[test[i]]);\n        }\n    }\n\n    for (let char in charCount) {\n        if (charCount[char] === maxCount) {\n            result[char] = maxCount;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  // Remove all characters in s that are equal to any character in c\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  \n  // Check if the result string is a palindrome\n  let isPalindrome = true;\n  for (let i = 0; i < result.length / 2; i++) {\n    if (result[i] !== result[result.length - 1 - i]) {\n      IsPalindrome = false;\n      break;\n    }\n  }\n  \n  return [result, IsPalindrome];\n}"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "/**\n * Given a list of strings, where each string consists of only digits, return a list.\n * Each element i of the output should be \"the number of odd elements in the\n * string i of the input.\" where all the i's should be replaced by the number\n * of odd digits in the i'th string of the input.\n\n * >>> odd_count(['1234567'])\n * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n * >>> odd_count(['3',\"11111111\"])\n * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n *\n */\nfunction oddCount(lst) {\n    return lst.map((numStr) => {\n        const oddCount = numStr.split('').reduce((count, digit) => count + (parseInt(digit) % 2), 0);\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n}\n\n// Example usage:\nconsole.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(oddCount(['3',\"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "/**\n * * Given an array of integers nums, find the minimum sum of any non-empty subarray\n * of nums.\n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n * minSubArraySum([-1, -2, -3]) == -6\n *\n */\nfunction minSubArraySum(nums) {\n  let result = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    result = Math.min(result, nums[i] + result);\n  }\n\n  return result;\n}\n\n// Test Cases\nconsole.log(minsubarraysum([2, 3, 4, 1, 2, 4])); // == 1\nconsole.log(minsubarraysum([-1, -2, -3])); // == -6"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let ans = 0;\n    for (let i = 0; i < grid[0].length; i++) {\n        let depth = 0;\n        for (let j = 0; j < grid.length; j++) {\n            depth = Math.max(depth, grid[j][i]);\n        }\n        ans += Math.ceil(depth / capacity);\n    }\n    return ans;\n}"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function sortArray(arr){\n    // Sort the array based on the number of ones in their binary representation.\n    // If there's a tie, use decimal value for comparison.\n    return arr.sort((a, B) => {\n        const onesA = A.toString(2).split('').filter(c => c === '1').length;\n        const onesB = B.toString(2).split('').filter(c => c === '1').length;\n        if (onesA === onesB) {\n            return A - B;\n        } else {\n            return onesA - onesB;\n        }\n    });\n}"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(s, n) {\n  // Helper function to count consonants in a word\n  function countConsonants(word) {\n    const vowels = 'aeiouAEIOU';\n    return Array.from(word).reduce((count, char) => {\n      if (char.toLowerCase() !== char.toUpperCase() && !vowels.includes(char)) {\n        count++;\n      }\n      return count;\n    }, 0);\n  }\n\n  // Split the string into words and filter by consonant count\n  return s.split(' ').filter(word => countConsonants(word) === n);\n}\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    const vowels = 'aeiouAEIOU';\n    let closestVowel = '';\n\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n            closestVowel = word[i];\n            break;\n        }\n    }\n\n    return closestVowel;\n}\n\nconsole.log(getClosestVowel(\"yogurt\")); // Output: \"u\"\nconsole.log(getClosestVowel(\"FULL\")); // Output: \"U\"\nconsole.log(getClosestVowel(\"quick\")); // Output: \"\"\nconsole.log(getClosestVowel(\"ab\")); // Output: \"\""}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "function matchParens(lst) {\n    let stack = [];\n\n    // iterate over each string in the list\n    for (let str of lst) {\n        // iterate over each character in the string\n        for (let char of str) {\n            // if the character is an open parenthesis, push it onto the stack\n            if (char === '(') {\n                stack.push(char);\n            } else if (char === ')' && stack.length > 0) {\n                // If the character is a close parenthesis and the stack is not empty, pop an open parenthesis from the stack\n                stack.pop();\n            } else {\n                // If the stack is empty but we encounter a close parenthesis, return 'No'\n                return 'No';\n            }\n        }\n    }\n\n    // If the stack is empty after processing all strings, return 'Yes'\n    if (stack.length === 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sort the array in descending order.\n    arr.sort((a, B) => B - A);\n\n    // Slice the array from index 0 to k (exclusive).\n    let result = arr.slice(0, k);\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "function solution(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n// Test the function with your examples:\nconsole.log(solution([5, 8, 7, 1])); // Output should be 12 (5 and 7 are odd numbers in even positions)\nconsole.log(solution([3, 3, 3, 3, 3])); // Output should be 9 (only one number is odd)\nconsole.log(solution([30, 13, 24, 321])); // Output should be 0 (no odd numbers in even positions)"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] >= 1 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n// Example usage:\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4)); // Outputs: 24"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "function getOddCollatz(n) {\n  let collatzSequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n /= 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    collatzSequence.push(n);\n  }\n\n  // Filter out the odd numbers and sort them in increasing order\n  let oddCollatzNumbers = collatzSequence.filter((num) => num % 2 !== 0).sort((a, B) => A - B);\n\n  return oddCollatzNumbers;\n}"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(dateString) {\n    if (!dateString) return false; // Check if the date string is not empty\n  \n    const [month, day, year] = dateString.split('-'); // Split the date string into parts\n  \n    // Check if the number of days is valid for each month\n    if ((month === '02' && (day < 1 || day > 29)) || \n        ((month === '04' || month === '06' || month === '09' || month === '11') && (day < 1 || day > 30)) ||\n        (month !== '02' && month !== '04' && month !== '06' && month !== '09' && month !== '11' && (day < 1 || day > 31))) {\n        return false; // The date is not valid if the number of days is out of range for that month\n    }\n  \n    // Check if the months are within the valid range\n    if (!(month >= '01' && month <= '12')) {\n        return false; // The date is not valid if the month is out of range\n    }\n\n    // Check if the year has 4 digits\n    if (year.length !== 4) return false;\n  \n    // If all checks pass, the date is valid\n    return true;\n}\n\nconsole.log(validDate('03-11-2000')); // True\nconsole.log(validDate('15-01-2012')); // False\nconsole.log(validDate('04-0-2040')); // False\nconsole.log(validDate('06-04-2020')); // True\nconsole.log(validDate('06/04/2020')); // False"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "function splitWords(txt) {\n    // Check for whitespace\n    if (txt.includes(' ')) {\n        return txt.split(' ');\n    }\n    // Check for commas\n    else if (txt.includes(',')) {\n        return txt.split(',');\n    }\n    // Count lower-case letters with odd order in the alphabet\n    else {\n        let count = 0;\n        for (let i=0; i<txt.length; i++) {\n            if ('a' <= txt[i] && txt[i] <= 'Z') {\n                count += ((txt[i].charCodeAt(0) - 65) % 2);\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function IsSorted(lst) {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false; // If current number is greater than next one, list is not sorted\n        if (i !== 0 && lst[i] === lst[i - 1]) return false; // Check for duplicates\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Calculate the start and end of the intersection interval\n    var start = Math.max(interval1[0], interval2[0]);\n    var end = Math.min(interval1[1], interval2[1]);\n\n    // Check if there is no intersection between the intervals\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection interval\n    var length = end - start + 1;\n\n    // Check if the length of the intersection interval is a prime number\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n\n    return length > 1 ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "/**\n * Computes the sum of magnitudes of integers in an array multiplied by the product of all signs.\n * Returns \"none\" for empty arrays.\n\n * @param {number[]} arr - The input array of integers.\n * @return {(number|string)} - The result of the computation or \"none\" if the array is empty.\n */\nfunction prodSigns(arr) {\n    if (arr.length === 0) return 'none';\n\n    let productOfSigns = arr.reduce((product, num) => {\n        switch (num) {\n            case 0:\n                return 0;\n            case Math.abs(num):\n                return product * Math.sign(num);\n            default:\n                return product * -Math.sign(num);\n        }\n    }, 1);\n\n    let magnitudeSum = arr.reduce((sum, num) => sum + Math.abs(num), 0);\n\n    return magnitudeSum * productOfSigns;\n}\n\n// Testing the function\nconsole.log(prodSigns([1, 2, 2, -4])); // Output: -9\nconsole.log(prodSigns([0, 1]));       // Output: 0\nconsole.log(prodSigns([]));          // Output: \"none\""}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "function minPath(grid, k) {\n  const N = grid.length;\n  const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n  const paths = [];\n\n  function dfs(x, y, path, depth) {\n    if (depth === k) {\n      paths.push([...path]);\n      return;\n    }\n\n    for (let [dx, dy] of directions) {\n      const nx = x + dx, ny = y + dy;\n      if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n        path.push(grid[nx][ny]);\n        dfs(nx, ny, path, depth + 1);\n        path.pop();\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      dfs(i, j, [grid[i][j]], 1);\n    }\n  }\n\n  paths.sort((a, B) => {\n    for (let i = 0; i < k; i++) {\n      if (A[i] < B[i]) return -1;\n      else if (A[i] > B[i]) return 1;\n    }\n    return 0;\n  });\n\n  return paths[0];\n}"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tri(n) {\n    // Initialize the first three numbers of the sequence.\n    var result = [1, 3, 2];\n  \n    // Handle base case n=0 and n=1\n    if (n < 2) {\n        return result.slice(0, n + 1);\n    }\n\n    for (var i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            // Calculate the value of tri(n) based on the previous three values.\n            var last = result[i - 1];\n            var secondLast = result[i - 2];\n            var thirdLast = i < n ? result[i + 1] : 3; // if n is odd, add a default value for tri(n+1).\n\n            result.push(last + secondLast + thirdLast);\n        }\n    }\n  \n    return result;\n}\n\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n    let product = 1; // Initialize product to 1 (since multiplying by 1 doesn't change the product)\n    let hasOdd = false; // Flag to check if there's at least one odd digit\n  \n    while (n > 0) {\n        let digit = n % 10; // Extract the last digit of n\n        if (digit % 2 !== 0) { // If the digit is odd\n            product *= digit; // Multiply product by the digit\n            hasOdd = true; // Set flag to true as we found at least one odd digit\n        }\n        n = Math.floor(n / 10); // Remove the last digit from n\n    }\n\n    // If there's no odd digit, return 0\n    return hasOdd ? product : 0;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function IsNested(str) {\n  var stack = [];\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '[') {\n      stack.push('[');\n    } else if (stack.length > 0 && stack[stack.length - 1] === '[') {\n      return true; // Found a nested bracket sequence\n    } else {\n      stack.pop();\n    }\n  }\n  return false; // No nested brackets found\n}\n\n// Test cases:\nconsole.log(IsNested('[[]]')); // Output: True\nconsole.log(IsNested('[]]]]]]][[[[[]')); // Output: False\nconsole.log(IsNested('[][]')); // Output: False\nconsole.log(IsNested('[]')); // Output: False\nconsole.log(IsNested('[[][]]')); // Output: True\nconsole.log(IsNested('[[]][[')); // Output: True"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n    let result = 0;  // Initialize result variable\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.pow(Math.ceil(lst[i]), 2);  // Round each element to the upper int and calculate its square, then add it to the result\n    }\n    return result;\n}\n\nconsole.log(sumSquares([1,2,3]));  // Outputs: 14\nconsole.log(sumSquares([1,4,9]));  // Outputs: 98\nconsole.log(sumSquares([1,3,5,7]));  // Outputs: 84\nconsole.log(sumSquares([1.4,4.2,0]));  // Outputs: 29\nconsole.log(sumSquares([-2.4,1,1]));  // Outputs: 6"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "/**\n * Checks if the last character of a given string is an alphabetical character and not part of a word.\n * A \"word\" is defined as a group of characters separated by spaces.\n * Returns true if the last character meets these criteria, false otherwise.\n * \n * Examples:\n * checkIfLastCharIsALetter(\"apple pie\") returns false\n * checkIfLastCharIsALetter(\"apple pi e\") returns true\n * checkIfLastCharIsALetter(\"apple pi e \") returns false\n * checkIfLastCharIsALetter(\"\") returns false \n */\n\nfunction checkIfLastCharIsALetter(txt) {\n    if (txt.length === 0) {\n        return false;\n    }\n\n    const lastChar = txt[txt.length - 1];\n    // Check if the last character is a letter and not part of a word (is preceded by space or is first char)\n    return /^[a-zA-Z]$/.test(lastChar) && (txt.length === 1 || txt[txt.length - 2] === ' ');\n}\n\n// Check function with provided data points\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // false\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // true\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // false\nconsole.log(checkIfLastCharIsALetter(\"\")); // false"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i-1]) {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  let negatives = lst.filter(num => num < 0);\n  let positives = lst.filter(num => num > 0);\n\n  let maxNegative = negatives.length ? Math.max(...negatives) : null;\n  let minPositive = positives.length ? Math.min(...positives) : null;\n\n  return [maxNegative, minPositive];\n}\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largestSmallestIntegers([])); // Output: [null, null]\nconsole.log(largestSmallestIntegers([0])); // Output: [null, null]"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(A, B) {\n    // Convert comma to dot for strings representing real numbers\n    if (typeof A === 'string') {\n        A = A.replace(',', '.');\n        A = parseFloat(A);\n    }\n    if (typeof B === 'string') {\n        B = B.replace(',', '.');\n        B = parseFloat(B);\n    }\n\n    // Compare and return the appropriate value\n    if (A > B) {\n        return A;\n    } else if (B > A) {\n        return B;\n    } else {\n        return \"None\";\n    }\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "function IsEqualToSumEven(n) {\n  // If n is less than the smallest possible sum (8), return false\n  if (n < 8) {\n    return false;\n  }\n  // If n is an even number and greater than or equal to 8, check if there's a combination of four even numbers that add up to it\n  else {\n    for (let i = 1; i <= Math.floor(n / 2); i += 2) {\n      if ((n - (2 * i)) % 2 === 0) {\n        return true;\n      }\n    }\n    // If no combination of four even numbers can be found, return false\n    return false;\n  }\n}"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function factorial(num){\n    let res = 1;\n    for(let i=2; i<=num; i++)\n        res *= i;\n    return res;\n}\n\nfunction specialFactorial(n) {\n    let result = 1;\n    for(let i=n; i>0; i--)\n        result *= factorial(i);\n    return result;\n}\n\nconsole.log(specialFactorial(4));  // Output: 288"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n    return text.replace(/ {2,}/g, \"-\").replace(/ /g, \"_\");\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "function fileNameCheck(filename) {\n    const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]{3}$/;\n\n    return regex.test(filename) ? 'Yes' : 'No';\n}\n\nconsole.log(fileNameCheck(\"example.txt\")); // 'Yes'\nconsole.log(fileNameCheck(\"1example.dll\")); // 'No' (the name should start with a latin alphapet letter)"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if ((i + 1) % 3 === 0) { // Check if index is a multiple of 3\n            result += Math.pow(lst[i], 2);\n        } else if ((i + 1) % 4 === 0) { // Check if index is a multiple of 4 but not multiple of 3\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "function isPrime(n) {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return n > 1;\n}\n\nfunction wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  let primeWords = [];\n\n  for (let word of words) {\n    if (isPrime(word.length)) {\n      primeWords.push(word);\n    }\n  }\n\n  return primeWords.join(' ');\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "function simplify(x, n) {\n    // Parse the fractions into numerators and denominators\n    var frac1 = parseFraction(x);\n    var frac2 = parseFraction(n);\n  \n    // Multiply the numerators and denominators\n    var num = frac1.numerator * frac2.numerator;\n    var denom = frac1.denominator * frac2.denominator;\n\n    // Check if the result is a whole number by dividing the product by their gcd\n    return num % denom === 0;\n}\n\nfunction parseFraction(frac) {\n    var parts = frac.split('/');\n    return { numerator: parseInt(parts[0]), denominator: parseInt(parts[1]) };\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function orderByPoints(nums) {\n  // calculate the sum of digits for each number\n  const withSum = nums.map((num, i) => ({\n    index: i,\n    value: num,\n    sum: Math.abs(num).toString().split('').reduce((a,B)=>A+parseInt(B),0)\n  }));\n\n  // sort the array based on sum, and then by original index in case of a tie\n  withSum.sort((a, B) => {\n    if (A.sum === B.sum) return A.index - B.index;\n    return A.sum - B.sum;\n  });\n\n  // extract the sorted values into a new array\n  const ordered = withSum.map(o => o.value);\n\n  // Return the newly ordered array of numbers\n  return ordered;\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n    var count = 0;\n    for (var i=0; i<nums.length; i++) {\n        if (nums[i] > 10 && firstAndLastDigitAreOdd(Math.abs(nums[i]))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nfunction FirstAndLastDigitAreOdd(n) {\n    var last_digit = n % 10;\n    while (n >= 10) {\n        n /= 10;\n    }\n    var first_digit = Math.floor(n);\n    return (First_digit % 2 != 0 && last_digit % 2 != 0);\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "def getMaxTriples(n):\n    triples = []\n    for i in range(1, n+1):\n        a = i * i - i + 1\n        for j in range(i+1, n+1):\n            B = A = j * j - j + 1\n            for k in range(j+1, n+1):\n                C = k * k - k + 1\n                if (A + B + C) % 3 == 0:\n                    triples.append((A, B, C))\n\n    return len(triples)"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nconst index1 = planets.indexOf(planet1);\nconst index2 = planets.indexOf(planet2);\n\nif (index1 === -1 || index2 === -1) {\n  return []; // Return an empty array if either planet is not found\n}\n\nif (index1 > index2) {\n  [index1, index2] = [index2, index1]; // Swap the indices if planet1 comes after planet2\n}\n\nconst result = planets.slice(index1 + 1, index2);\nreturn result;"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function sortedListSum(lst) {\n    // Remove strings with odd lengths\n    let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n\n    // Sort the list by length, then alphabetically\n    evenLengthStrings.sort((a, B) => {\n        if (A.length < B.length) {\n            return -1;\n        } else if (A.length > B.length) {\n            return 1;\n        } else {\n            // If lengths are equal, sort alphabetically\n            return A.localeCompare(B);\n        }\n    });\n\n    return evenLengthStrings;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2 || num === 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n  \n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0)\n            return false;\n    }\n  \n    return true;\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "/**\n * * Given a list of numbers, return the sum of squares of the numbers\n * In the list that are odd and positive integers. Ignore other numbers.\n *\n * Examples:\n * doubleTheDifference([1, 3, 2, 0]) should return 10\n * doubleTheDifference([-1, -2, 0]) should return 0\n * doubleTheDifference([9, -2]) should return 81\n * doubleTheDifference([0]) should return 0\n * If the input list is empty, return 0.\n */\n\nfunction doubleTheDifference(lst) {\n  if (lst.length === 0) return 0;\n\n  return lst.reduce((acc, val) => {\n    if (val > 0 && val % 2 !== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n}\n\n// Check function with provided data points:\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // Output should be 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // Output should be 0\nconsole.log(doubleTheDifference([9, -2]));     // Output should be 81\nconsole.log(doubleTheDifference([0]));          // Output should be 0\nconsole.log(doubleTheDifference([]));            // Output should be 0"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n    var result = [];\n    for (var i=0; i<game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])); // -> [0,0,0,0,3,3]\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])); // -> [4,4,1,0,0,6]"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n  let strongestStrength = -Infinity;\n  let strongestExtensionName = '';\n\n  for (const extension of extensions) {\n    const cap = [...extension].filter(char => char === char.toUpperCase()).length;\n    const sm = [...extension].filter(char => char === char.toLowerCase()).length;\n    const strength = cap - sm;\n\n    if (strength > strongestStrength) {\n      strongestStrength = strength;\n      strongestExtensionName = extension;\n    } else if (strength === strongestStrength) {\n      const currentIndex = extensions.indexOf(extension);\n      const strongestIndex = extensions.indexOf(strongestExtensionName);\n\n      if (currentIndex < strongestIndex) {\n        strongestStrength = strength;\n        strongestExtensionName = extension;\n      }\n    }\n  }\n\n  return `${classname}.${strongestExtensionName}`;\n}\n\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: myClass.AA"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Convert both strings to lower case and check if length of b is greater than A's length\n    var a = A.toLowerCase();\n    var b = b.toLowerCase();\n\n    if (b.length > A.length) {\n        return false;\n    }\n  \n    // Create the rotation strings of b\n    var rotations = [];\n    for(var i = 0; i < b.length; i++) {\n        var rotation = b.substring(i) + b.substring(0, i);\n        rotations.push(rotation);\n    }\n\n    // Check if any rotation of b is a substring of A\n    for(var j = 0; j < rotations.length; j++) {\n        if (A.indexOf(rotations[j]) !== -1) {\n            return true;\n        }\n    }\n  \n    // If no rotation of b is a substring of A, return false\n    return false;\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\")); // returns false\nconsole.log(cycpatternCheck(\"hello\",\"ell\")); // returns true\nconsole.log(cycpatternCheck(\"whassup\",\"psus\")); // returns false\nconsole.log(cycpatternCheck(\"abab\",\"baA\")); // returns true\nconsole.log(cycpatternCheck(\"efef\",\"eeff\")); // returns false\nconsole.log(cycpatternCheck(\"himenss\",\"simen\")); // returns true"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "function evenOddCount(num) {\n    let count = [0, 0]; // initializing an array to hold counts of even and odd digits\n\n    // make sure num is positive\n    num = Math.abs(num);\n\n    while (num > 0) {\n        let digit = num % 10; // extract the last digit\n        if (digit % 2 === 0) {\n            count[0]++; // increment count of even digits\n        } else {\n            count[1]++; // increment count of odd digits\n        }\n        num = Math.floor(num / 10); // remove the last digit from num\n    }\n\n    return count;\n}\n\nconsole.log(evenOddCount(-12)); // Output: [1, 1]\nconsole.log(evenOddCount(123)); // Output: [1, 2]"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "function intToMiniRoman(num) {\n    var romanNumerals = [\n        {value: 1000, numeral: 'm'},\n        {value: 900, numeral: 'cm'},\n        {value: 500, numeral: 'd'},\n        {value: 400, numeral: 'cd'},\n        {value: 100, numeral: 'c'},\n        {value: 90, numeral: 'xc'},\n        {value: 50, numeral: 'l'},\n        {value: 40, numeral: 'xl'},\n        {value: 10, numeral: 'x'},\n        {value: 9, numeral: 'ix'},\n        {value: 5, numeral: 'v'},\n        {value: 4, numeral: 'iv'},\n        {value: 1, numeral: 'i'}\n    ];\n\n    var roman = '';\n\n    for (var i = 0; i < romanNumerals.length; i++) {\n        while (num >= romanNumerals[i].value) {\n            roman += romanNumerals[i].numeral;\n            num -= romanNumerals[i].value;\n        }\n    }\n\n    return roman;\n}\n\nconsole.log(intToMiniRoman(19)); // Output: 'xix'\nconsole.log(intToMiniRoman(152)); // Output: 'clii'\nconsole.log(intToMiniRoman(426)); // Output: 'cdxxvi'"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "function rightAngleTriangle(A, B, C) {\n  // Check if the sides form a valid triangle\n  if (A < B + C && B < A + C && C < A + B) {\n    // Sort the array to get the longest side first\n    const sides = [A, B, C].sort((a, B) => A - B);\n\n    // Use Pythagorean theorem to check if it's a right-angled triangle\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n  }\n\n  // Return false if sides do not form a valid triangle\n  return false;\n}"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n  let maxUniqueChars = 0;\n  let result = \"\";\n  for (let word of words) {\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUniqueChars || (uniqueChars === maxUniqueChars && word < result)) {\n      maxUniqueChars = uniqueChars;\n      result = word;\n    }\n  }\n  return result;\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"])); // Outputs: string\nconsole.log(findMax([\"name\", \"enam\", \"game\"])); // Outputs: enam\nconsole.log(findMax([\"aaaaaaa\", \"bb\" ,\"cc\"])); // Outputs: a"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "function eat(number, need, remaining) {\n    let totalEaten = number;\n    let carrotsLeft = remaining;\n\n    if (need <= remaining) {\n        totalEaten += need;\n        carrotsLeft -= need;\n    } else {\n        totalEaten += remaining;\n        carrotsLeft = 0;\n    }\n\n    return [totalEaten, carrotsLeft];\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "function DoAlgebra(operator, operand) {\n    let expression = '';\n\n    for (let i = 0; i < operator.length; i++) {\n        expression += operand[i] + ' ' + operator[i] + ' ';\n    }\n    expression += operand[operand.length - 1];\n\n    return eval(expression);\n}"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n    // Check if the string contains any letters using a regular expression\n    let hasLetters = /[a-zA-Z]/.test(s);\n  \n    if (hasLetters) {\n        // If it does, use Array.from() to convert the string into an array of characters\n        // Then, map over each character and if it's a letter reverse its case using toLowerCase() or toUpperCase(),\n        // otherwise keep it as is.\n        return Array.from(s).map(char => {\n            if (/[a-Za-z]/.test(char)) {\n                return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n            } else {\n                return char;\n            }\n        }).join(''); // Join the array back into a string\n    } else {\n        // If it doesn't, reverse the string using the split(), reverse(), and join() methods\n        return s.split('').reverse().join('');\n    }\n}\n\nconsole.log(solve(\"1234\")); // Outputs: \"4321\"\nconsole.log(solve(\"ab\"));  // Outputs: \"AB\"\nconsole.log(solve(\"#a@C\")); // Outputs: \"#A@c\""}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "// Import the crypto module to generate MD5 hash\nconst crypto = require('crypto');\n\n/**\n * Converts a given text to its MD5 hash.\n * @param {string} text - The text to convert to MD5 hash.\n * @return {string} The MD5 hash of the input text or \"none\" if the input is an empty string.\n */\nfunction stringToMd5(text) {\n    if (text === '') {\n        return 'none';\n    } else {\n        // Create a SHA-1 hash object and update it with the provided text\n        const hash = crypto.createHash('md5').update(text);\n        // Calculate the digest and return it as a hexadecimal string\n        return hash.digest('hex');\n    }\n}\n\n// Check function to test the correctness of the stringToMd5 function\nfunction check() {\n    console.log(stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'); // true\n    console.log(stringToMd5('') === 'none'); // true\n}\n\n// Run the check function to verify the results\ncheck();"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    let arr = []; //create an empty array to store even integers\n    // If a > b, swap them\n    if (A > B){\n        [A, B] = [B, A];\n    }\n    // Start loop from A and go till B. Increment by 2 in each iteration to get only even numbers\n    for(let i=A; i<=B; i+=2){\n        arr.push(i); // add current number to array if it is even\n    }\n    return arr; // return the generated array of even integers\n}"}

{"task_id": "HumanEval_kotlin/0", "language": "kotlin", "completion": "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfun main() {\n    println(hasCloseElements(listOf(1.0, 2.0, 3.0), 0.5)) // False\n    println(hasCloseElements(listOf(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)) // True\n}"}
{"task_id": "HumanEval_kotlin/1", "language": "kotlin", "completion": "fun separateParenGroups(parenString: String): List<String> {\n    val result = mutableListOf<String>()\n    var balance = 0\n    var currentGroup = \"\"\n\n    for (char in parenString.replace(\" \", \"\")) {\n        if (char == '(') {\n            balance++\n            currentGroup += char\n        } else if (char == ')') {\n            balance--\n            currentGroup += char\n            if (balance == 0) {\n                result.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/2", "language": "kotlin", "completion": "fun truncateNumber(number : Double) : Double {\n    return number - Math.floor(number)\n}"}
{"task_id": "HumanEval_kotlin/3", "language": "kotlin", "completion": "fun belowZero(operations : List<Any>): Boolean {\n    var balance = 0 // initialize balance to zero\n\n    // loop through each operation in list\n    for (operation in operations) {\n        if (operation is Int) { // check if current operation is an integer\n            balance += operation // add it to the balance\n        } else if(operation is String){\n            val operationAmount = Integer.parseInt(operation.replace(\"-\", \"\")) // extract number after \"-\" sign and subtract from the balance\n            if (operation[0] == '-') {\n                balance -= operationAmount\n            } else {\n                balance += operationAmount\n            }\n        }\n\n        // if balance falls below zero, return true immediately.\n        if (balance < 0) {\n            return true\n        }\n    }\n  \n    // If we have gone through all operations without the balance falling below zero, return false\n    return false\n}"}
{"task_id": "HumanEval_kotlin/4", "language": "kotlin", "completion": "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val sum = numbers.sum()\n    val count = numbers.size\n    val mean = sum / count\n    return numbers.map { Math.abs(it - mean) }.average()\n}"}
{"task_id": "HumanEval_kotlin/5", "language": "kotlin", "completion": "fun <T> intersperse(numbers : List<T>, delimiter : T) : List<T> {\n    if (numbers.isEmpty()) return emptyList()\n\n    val result = mutableListOf<T>()\n    for ((index, number) in numbers.withIndex()) {\n        result += number\n        if (index < numbers.size - 1) {\n            result += delimiter\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/6", "language": "kotlin", "completion": "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    for (group in parenString.split(\" \")) {\n        var maxDepth = 0\n        var currentDepth = 0\n        for (char in group) {\n            if (char == '(') {\n                currentDepth++\n                maxDepth = maxOf(maxDepth, currentDepth)\n            } else if (char == ')') {\n                currentDepth--\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n\nfun main() {\n    val testString = \"(()()) ((())) () ((())()())\"\n    println(parseNestedParens(testString))  // Output: [2, 3, 1, 3]\n}"}
{"task_id": "HumanEval_kotlin/7", "language": "kotlin", "completion": "fun filterBySubstring(strings: List<String>, substring: String): List<String> {\n    return strings.filter { it.contains(substring) }\n}"}
{"task_id": "HumanEval_kotlin/8", "language": "kotlin", "completion": "fun sumProduct(numbers : List<Int>) : Pair<Int, Int> {\n    var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        sum += number\n        product *= number\n    }\n\n    return Pair(sum, product)\n}"}
{"task_id": "HumanEval_kotlin/9", "language": "kotlin", "completion": "fun rollingMax(numbers: List<Int>): List<Int> {\n    var currentMax = Int.MIN_VALUE\n    return numbers.map { number ->\n        currentMax = maxOf(currentMax, number)\n        currentMax\n    }\n}\n\nprintln(rollingMax(listOf(1, 2, 3, 2, 3, 4, 2))) // Outputs: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_kotlin/10", "language": "kotlin", "completion": "fun makePalindrome(s: String): String {\n    if (s.isEmpty()) return \"\"\n  \n    var reversed = s.reversed()\n  \n    for (i in 0 until s.length) {\n        if (s.substring(i) == reversed.substring(0, s.length - i)) {\n            return s + reversed.substring(s.length - i)\n        }\n    }\n\n    return s + reversed.substring(1)\n}"}
{"task_id": "HumanEval_kotlin/11", "language": "kotlin", "completion": "fun stringXor(a : String, b : String) : String {\n    var result = \"\"\n    for (i in 0 until A.length) {\n        // XOR operation on each bit and add to result string\n        if (A[i] == b[i]) {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfun main() {\n    println(stringXor(\"010\", \"110\")) // Outputs: 100\n}"}
{"task_id": "HumanEval_kotlin/12", "language": "kotlin", "completion": "fun longest(strings : List<String>) : String? {\n    if (strings.isEmpty()) return null  // Return null if the list is empty\n\n    var longestString = strings[0]  // Assume first string is the longest initially\n\n    for (string in strings) {\n        if (string.length > longestString.length) {\n            longestString = string  // If current string is longer, update longestString\n        }\n    }\n\n    return longestString  // Return the longest string found\n}"}
{"task_id": "HumanEval_kotlin/13", "language": "kotlin", "completion": "fun greatestCommonDivisor(A : Int, B : Int): Int{\n    if (B == 0) return A\n    return greatestCommonDivisor(B, A % B)\n}\n\n// Testing the function\nprintln(greatestCommonDivisor(3, 5)) // Output: 1\nprintln(GreatestCommonDivisor(25, 15)) // Output: 5"}
{"task_id": "HumanEval_kotlin/14", "language": "kotlin", "completion": "fun AllPrefixes(string: String): List<String> {\n    return (1..string.length).map { string.substring(0, it) }\n}"}
{"task_id": "HumanEval_kotlin/15", "language": "kotlin", "completion": "fun stringSequence(n : Int): String {\n    var result = \"\"\n    for (i in 0..n) {\n        result += \"$i \"\n    }\n    return result.trim()\n}"}
{"task_id": "HumanEval_kotlin/16", "language": "kotlin", "completion": "fun countDistinctCharacters(string: String): Int {\n    val lowercaseString = string.lowercase() // Convert the string to lowercase for case-insensitive comparison\n    val distinctChars = mutableSetOf<Char>()\n\n    for (char in lowercaseString) {\n        if (char.isLetter()) { // Check if the character is a letter\n            distinctChars.add(char)\n        }\n    }\n\n    return distinctChars.size // Return the size of the set, which represents the number of distinct characters\n}\n\n// Test cases\nprintln(countDistinctCharacters('xyzXYZ')) // Output: 3\nprintln(countDistinctCharacters('Jerry'))  // Output: 4"}
{"task_id": "HumanEval_kotlin/17", "language": "kotlin", "completion": "fun parseMusic(musicString : String) : List<Int> {\n    val beats = mutableListOf<Int>()\n    var index = 0\n\n    while (index < musicString.length) {\n        when (musicString[index]) {\n            'o' -> {\n                if (index + 1 < musicString.length && musicString[index + 1] == '|') {\n                    beats += 2\n                    index++ // Skip the next character as it was part of the note\n                } else {\n                    beats += 4\n                }\n            }\n            '.' -> {\n                if (index + 1 < musicString.length && musicString[index + 1] == '|') {\n                    beats += 1\n                    index++ // Skip the next character as it was part of the note\n                } else {\n                    throw IllegalArgumentException(\"Invalid musical note\")\n                }\n            }\n            else -> throw IllegalArgumentException(\"Invalid musical note\")\n        }\n\n        index++\n    }\n\n    return beats.toList()\n}\n\n// Test the function\nfun main() {\n    val musicString = \"o o| .| o| o| .| .| .| .| o o\"\n    println(parseMusic(musicString)) // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n}"}
{"task_id": "HumanEval_kotlin/18", "language": "kotlin", "completion": "fun howManyTimes(string: String, substring: String): Int {\n    if (substring.isEmpty()) return 0\n    var count = 0\n    var i = 0\n    while (i <= string.lastIndex) {\n        val index = string.indexOf(substring, startIndex = i)\n        if (index != -1) {\n            count++\n            i = index + 1\n        } else {\n            break\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/19", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val map = hashMapOf(\n        \"zero\" to 0, \"one\" to 1, \"two\" to 2, \"three\" to 3,\n        \"four\" to 4, \"five\" to 5, \"six\" to 6, \"seven\" to 7,\n        \"eight\" to 8, \"nine\" to 9\n    )\n\n    val sortedNumbers = numbers.split(\" \").map { map[it]!! }.sorted()\n    return sortedNumbers.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/20", "language": "kotlin", "completion": "fun findClosestElements(numbers: List<Double>): Pair<Double, Double> {\n    if (numbers.size < 2) throw IllegalArgumentException(\"List must contain at least two elements.\")\n\n    var closestPair = numbers[0] to numbers[1]\n    var smallestDifference = Math.abs(numbers[0] - numbers[1])\n\n    for (i in 0 until numbers.size - 1) {\n        for (j in i + 1 until numbers.size) {\n            val currentDifference = Math.abs(numbers[i] - numbers[j])\n            if (currentDifference < smallestDifference) {\n                closestPair = numbers[i] to numbers[j]\n                smallestDifference = currentDifference\n            }\n        }\n    }\n\n    return closestPair.sortedBy { it } as Pair<Double, Double>\n}"}
{"task_id": "HumanEval_kotlin/21", "language": "kotlin", "completion": "fun rescaleToUnit(numbers : List<Double>) : List<Double> {\n    val min = numbers.min() ?: throw IllegalArgumentException(\"List must contain at least two elements.\")\n    val max = numbers.max() ?: throw IllegalArgumentException(\"List must contain at least two elements.\")\n\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "HumanEval_kotlin/22", "language": "kotlin", "completion": "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filterIsInstance<Int>()\n}"}
{"task_id": "HumanEval_kotlin/23", "language": "kotlin", "completion": "fun strlen(string: String): Int {\n    return string.length\n}"}
{"task_id": "HumanEval_kotlin/24", "language": "kotlin", "completion": "fun largestDivisor(n : Int) : Int {\n    for (i in n downTo 1) {\n        if (n % i == 0) {\n            return i\n        }\n    }\n    // In case there's no divisor smaller than n, which should not happen for n > 1, return -1\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/25", "language": "kotlin", "completion": "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var number = n\n    for (i in 2..number) {\n        while (number % i == 0) {\n            factors.add(i)\n            number /= i\n        }\n    }\n    return factors\n}"}
{"task_id": "HumanEval_kotlin/26", "language": "kotlin", "completion": "fun removeDuplicates(numbers: List<Any>): List<Any> {\n    val counts = mutableMapOf<Any, Int>()\n    for (number in numbers) {\n        counts[number] = counts.getOrDefault(number, 0) + 1\n    }\n\n    return numbers.filter { counts[it] == 1 }\n}"}
{"task_id": "HumanEval_kotlin/27", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map { if (it.isUpperCase()) it.toLowerCase() else It.toUpperCase() }.joinToString(\"\")\n}\n\n// Test the function with example\nprintln(flipCase('Hello'))  // Outputs: hELLO"}
{"task_id": "HumanEval_kotlin/28", "language": "kotlin", "completion": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Concatenate list of strings into a single string\n * >>> concatenate(listOf())\n * ''\n * >>> concatenate(listOf(\"A\", \"b\", \"c\"))\n * 'abc'\n *\n */\nfun concatenate(strings: List<Any>) : String {\n    return if (strings.isEmpty()) \"\" else strings.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/29", "language": "kotlin", "completion": "fun filterByPrefix(strings : List<String>, prefix : String) : List<String> {\n    return strings.filter { it.startsWith(prefix) }\n}"}
{"task_id": "HumanEval_kotlin/30", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Int> {\n    return l.filterIsInstance<Int>().filter { it > 0 }\n}"}
{"task_id": "HumanEval_kotlin/31", "language": "kotlin", "completion": "fun IsPrime(n : Int) : Boolean {\n    if (n <= 1) return false // 0 and 1 are not prime numbers\n\n    for (i in 2 until n) {\n        if (n % i == 0) return false // if n is divisible by any number other than 1 and itself, then it's not a prime number\n    }\n\n    return true // If none of the above conditions are met, then n must be a prime number\n}"}
{"task_id": "HumanEval_kotlin/33", "language": "kotlin", "completion": "fun sortThird(l: List<Int>): List<Int> {\n    // Extract elements at indices divisible by three and sort them\n    val sorted = l.filterIndexed { index, _ -> index % 3 == 0 }.sorted()\n\n    // Create a new list with the same size as the original list\n    val result = MutableList(l.size) { -1 }\n\n    // Place sorted elements in their correct positions\n    var sortedIndex = 0\n    for (i in l.indices) {\n        if (i % 3 == 0) {\n            result[i] = sorted[sortedIndex++]\n        } else {\n            result[i] = l[i]\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/34", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> = l.toSet().sorted()"}
{"task_id": "HumanEval_kotlin/35", "language": "kotlin", "completion": "fun maxElement(l : List<Int>) : Int? {\n    return l.maxOrNull()\n}"}
{"task_id": "HumanEval_kotlin/36", "language": "kotlin", "completion": "fun fizzBuzz(n: Int): Int {\n    var count = 0\n    for (i in 1 until n) {\n        if ((i % 11 == 0 || i % 13 == 0) && i.toString().contains('7')) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/37", "language": "kotlin", "completion": "val evenIndicesValues = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n\n    return l.mapIndexed { index, value -> if(index % 2 == 0) evenIndicesValues[index / 2] else value }\n}"}
{"task_id": "HumanEval_kotlin/39", "language": "kotlin", "completion": "fun isPrime(num : Int) : Boolean {\n    if (num <= 1) return false\n    if (num == 2) return true\n    if (num % 2 == 0) return false\n    for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun fibonacci(n : Int) : Long {\n    var a = 0L\n    var B = 1L\n    for (i in 2..n) {\n        val temp = A + B\n        A = B\n        B = temp\n    }\n    return A\n}\n\nfun primeFib(n : Int) : Long {\n    var count = 0\n    var i = 0\n    while (true) {\n        val fibNum = fibonacci(i++)\n        if (isPrime(fibNum.toInt())) {\n            count++\n            if (count == n) return fibNum\n        }\n    }\n}\n\nfun main() {\n    println(primeFib(1)) // Output: 2\n    println(primeFib(2)) // Output: 3\n    println(primeFib(3)) // Output: 5\n    println(primeFib(4)) // Output: 13\n    println(primeFib(5)) // Output: 89\n}"}
{"task_id": "HumanEval_kotlin/40", "language": "kotlin", "completion": "fun triplesSumToZero(l : List<Int>) : Boolean {\n    for (i in 0 until l.size) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/41", "language": "kotlin", "completion": "fun carRaceCollision(n : Int) : Int {\n    return n * n  // Since every car from one direction will collide with each car from the opposite direction\n}"}
{"task_id": "HumanEval_kotlin/42", "language": "kotlin", "completion": "fun incrList(l: List<Any>) : List<Any> {\n    return l.map { it as Int + 1 }\n}"}
{"task_id": "HumanEval_kotlin/43", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val set = mutableSetOf<Int>()\n\n    for (i in l) {\n        if (-i in set) {\n            return true\n        } else {\n            set.add(i)\n        }\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/44", "language": "kotlin", "completion": "fun changeBase(x : Int, base : Int) : String {\n    val result = StringBuilder()\n    var temp = x\n\n    while (temp > 0) {\n        result.insert(0, temp % base)\n        temp /= base\n    }\n\n    return result.toString()\n}"}
{"task_id": "HumanEval_kotlin/45", "language": "kotlin", "completion": "fun triangleArea(A : Int, h : Int) : Double {\n    return (A * h) / 2.0\n}"}
{"task_id": "HumanEval_kotlin/46", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n == 0 || n == 1 || n == 3) return 0\n    if (n == 2) return 2\n\n    var a = 0\n    var B = 0\n    var C = 2\n    var D = 0\n    for (i in 4..n) {\n        val temp = A + B + C + D\n        A = B\n        B = C\n        C = D\n        D = temp\n    }\n\n    return D\n}"}
{"task_id": "HumanEval_kotlin/47", "language": "kotlin", "completion": "fun median(l: List<Int>): Double {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0)\n        // If there is an even number of elements, return the average of the two middle numbers\n        (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0\n    else\n        // If there is an odd number of elements, return the middle element\n        sortedList[size / 2].toDouble()\n}\n\nprintln(median(listOf(3, 1, 2, 4, 5))) // Output: 3.0\nprintln(median(listOf(-10, 4, 6, 1000, 10, 20))) // Output: 15.0"}
{"task_id": "HumanEval_kotlin/48", "language": "kotlin", "completion": "fun isPalindrome(text : String) : Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}"}
{"task_id": "HumanEval_kotlin/49", "language": "kotlin", "completion": "fun modp(n : Int, p : Int) : Int {\n    var result = 1 // Initialize the result to 1\n\n    // Iterate from 0 up to and including n-1\n    for (i in 0 until n) {\n        result = (2 * result) % p // Multiply by 2 and take modulus with p\n    }\n\n    return result // Return the final result\n}"}
{"task_id": "HumanEval_kotlin/51", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    val vowels = setOf('a', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u')\n    return text.filterNot { it in vowels }\n}"}
{"task_id": "HumanEval_kotlin/52", "language": "kotlin", "completion": "fun belowThreshold(l : List<Int>, t : Int) : Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "HumanEval_kotlin/53", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n\n// Test cases\nprintln(add(2, 3)) // Outputs: 5\nprintln(add(5, 7)) // Outputs: 12"}
{"task_id": "HumanEval_kotlin/54", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    val charSet0 = s0.toCharArray().toSet()\n    val charSet1 = s1.toCharArray().toSet()\n\n    return charSet0 == charSet1\n}"}
{"task_id": "HumanEval_kotlin/55", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 1) return n\n    else {\n        var a = 0\n        var B = 1\n        for (i in 2..n) {\n            val temp = A + B\n            A = B\n            B = temp\n        }\n        return B\n    }\n}"}
{"task_id": "HumanEval_kotlin/56", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    var counter = 0\n    for (char in brackets) {\n        if (char == '<') counter++\n        else if (char == '>') counter--\n        // If counter becomes negative, there are more closing brackets than opening ones\n        if (counter < 0) return false\n    }\n    // If counter is not zero at the end, it means there were unmatched opening brackets\n    return counter == 0\n}"}
{"task_id": "HumanEval_kotlin/57", "language": "kotlin", "completion": "fun monotonic(list: List<Int>): Boolean {\n    var isIncreasing = true\n    var IsDecreasing = true\n\n    for (i in 1 until list.size) {\n        if (list[i] > list[i - 1]) {\n            IsDecreasing = false\n        } else if (list[i] < list[i - 1]) {\n            IsIncreasing = false\n        }\n    }\n\n    return IsIncreasing || IsDecreasing\n}"}
{"task_id": "HumanEval_kotlin/58", "language": "kotlin", "completion": "fun common(l1 : List<Int>, l2 : List<Any>) : List<Int> {\n    val set1 = l1.toSet() // Convert list to set for fast lookup\n    val commonElements = mutableListOf<Int>()\n\n    for (element in l2) {\n        if (element is Int && set1.contains(element)) { // Check if element is an integer and exists in the set\n            commonElements.add(element)\n        }\n    }\n\n    return commonElements.distinct().sorted() // Remove duplicates and sort elements\n}"}
{"task_id": "HumanEval_kotlin/59", "language": "kotlin", "completion": "fun largestPrimeFactor(n : Int): Int {\n    var number = n\n    var factor = 2\n    while (factor * factor <= number) {\n        if (number % factor == 0) {\n            number /= factor\n        } else {\n            factor += 1\n        }\n    }\n    return number\n}\n\nfun main() {\n    println(largestPrimeFactor(13195)) // Output: 29\n    println(largestPrimeFactor(2048))  // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/60", "language": "kotlin", "completion": "fun sumToN(n : Int) : Int {\n    return if (n <= 0)\n        0\n    else\n        n + sumToN(n - 1)\n}"}
{"task_id": "HumanEval_kotlin/61", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    var balance = 0\n    for (char in brackets) {\n        if (char == '(') {\n            balance++\n        } else if (char == ')') {\n            balance--\n        }\n        if (balance < 0) {\n            return false // More closing brackets than opening ones\n        }\n    }\n    return balance == 0 // True if balanced, False otherwise\n}"}
{"task_id": "HumanEval_kotlin/62", "language": "kotlin", "completion": "fun derivative(xs : List<Int>) : List<Int> {\n    var result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result.toList()\n}\n\nfun main() {\n    println(derivative(listOf(3, 1, 2, 4, 5))) // Output: [1, 4, 12, 20]\n    println(derivative(listOf(1, 2, 3))) // Output: [2, 6]\n}"}
{"task_id": "HumanEval_kotlin/63", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n == 0 || n == 1) return 0\n\n    val memo = IntArray(n + 1)\n    memo[2] = 1\n\n    for (i in 3..n) {\n        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]\n    }\n\n    return memo[n]\n}"}
{"task_id": "HumanEval_kotlin/64", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = listOf('a', 'E', 'I', 'O', 'U')\n    var count = 0\n    for (char in s) {\n        if (vowels.contains(char)) {\n            count++\n        }\n    }\n    if (s.endsWith('y') || s.endsWith('Y')) {\n        count++\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/65", "language": "kotlin", "completion": "fun circularShift(x: Int, shift: Int): String {\n    val digits = x.toString().toCharArray()\n    val numDigits = digits.size\n    val effectiveShift = if (shift >= numDigits) numDigits else shift\n\n    // Perform the circular shift\n    for (i in 0 until effectiveShift) {\n        val temp = digits[numDigits - effectiveShift + i]\n        digits[numDigits - effectiveShift + i] = digits[i]\n        digits[i] = temp\n    }\n\n    // Convert the array back to a string and return it\n    return String(digits)\n}"}
{"task_id": "HumanEval_kotlin/66", "language": "kotlin", "completion": "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumBy { it.toInt() }\n}"}
{"task_id": "HumanEval_kotlin/67", "language": "kotlin", "completion": "fun fruitDistribution(s: String, n: Int): Int {\n    val numbers = s.split(\" \").map { it.filter { it.isDigit() }.toInt() }\n    return n - numbers[0] - numbers[1]\n}\n\n// Test the function with given examples\nprintln(fruitDistribution(\"5 apples and 6 oranges\", 19))  // Output: 8\nprintln(fruitDistribution(\"0 apples and 1 oranges\", 3))    // Output: 2\nprintln(fruitDistribution(\"2 apples and 3 oranges\", 100)) // Output: 95\nprintln(fruitDistribution(\"100 apples and 1 oranges\", 120)) // Output: 19"}
{"task_id": "HumanEval_kotlin/68", "language": "kotlin", "completion": "fun pluck(arr: List<Any>): List<Any> {\n    var smallestEven = Int.MAX_VALUE\n    var index = -1\n\n    for ((i, element) in arr.withIndex()) {\n        if (element is Int && element % 2 == 0 && element < smallestEven) {\n            smallestEven = element\n            index = i\n        }\n    }\n\n    return if (index == -1) listOf() else listOf(smallestEven, index)\n}"}
{"task_id": "HumanEval_kotlin/69", "language": "kotlin", "completion": "fun search(lst : List<Int>) : Int = lst.groupingBy { it }\n    .eachCount()\n    .filter { it.value >= It.key && It.key > 0 }\n    .maxOfWith(compareBy { -it.key })?.key ?: -1"}
{"task_id": "HumanEval_kotlin/70", "language": "kotlin", "completion": "fun strangeSortList(lst : List<Int>) : List<Int> {\n    val sortedList = mutableListOf<Int>()\n    var ascending = true  // Flag to indicate whether to sort in ascending order (true) or descending order (false)\n\n    while (!lst.isEmpty()) {\n        // Get the smallest or largest element based on the current sorting direction\n        val selectedElement = if(ascending) lst.minOrNull() else lst.maxOrNull()\n        sortedList.add(selectedElement!!)  // Add the selected element to the sorted list\n\n        // Remove the selected element from the original list\n        val index = lst.indexOf(selectedElement)\n        lst.removeAt(index)\n\n        // Toggle the sorting direction for the next iteration\n        ascending = !ascending\n    }\n\n    return sortedList\n}"}
{"task_id": "HumanEval_kotlin/71", "language": "kotlin", "completion": "fun triangleArea(A : Double, B : Double, C : Double): Double {\n    if (A + B <= C || A + C <= B || B + C <= A) return -1.0 // If the sides do not form a valid triangle\n\n    val s = (A + B + C) / 2  // Semi-perimeter\n    return Math.sqrt(s * (s - A) * (s - B) * (s - C))  // Heron's formula to calculate area of the triangle\n}"}
{"task_id": "HumanEval_kotlin/72", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list is balanced (palindromic)\n    val reversedList = q.reversed()\n    if (q != reversedList) return false\n\n    // Calculate the sum of elements in the list\n    val totalWeight = q.sum()\n\n    // Return true if weight is less than or equal to maximum possible weight, otherwise false\n    return totalWeight <= w\n}"}
{"task_id": "HumanEval_kotlin/73", "language": "kotlin", "completion": "fun smallestChange(arr: List<Int>): Int {\n    var changesNeeded = 0\n    val arrSize = arr.size\n    for (i in 0 until arrSize / 2) {\n        if (arr[i] != arr[arrSize - i - 1]) {\n            changesNeeded++\n        }\n    }\n    return changesNeeded\n}"}
{"task_id": "HumanEval_kotlin/74", "language": "kotlin", "completion": "fun totalMatch(lst1 : List<String>, lst2 : List<String>) : List<String> {\n    val count1 = lst1.fold(0) { acc, s -> acc + s.length }\n    val count2 = lst2.fold(0) { acc, s -> acc + s.length }\n\n    return if (count1 <= count2) lst1 else lst2\n}\n\nfun main() {\n    println(totalMatch(listOf(), listOf())) // []\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"Hi\"))) // [hI, Hi]\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hi\", \"hi\", \"admin\", \"project\"))) // [hi, admin]\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"hi\", \"hi\"))) // [hI, hi, hi]\n    println(totalMatch(listOf(\"4\"), listOf(\"1\", \"2\", \"3\", \"4\", \"5\"))) // [4]\n}"}
{"task_id": "HumanEval_kotlin/75", "language": "kotlin", "completion": "fun IsMultiplyPrime(A : Int) : Boolean {\n    if (A < 100) {\n        for (i in 2..30) {\n            var count = 0\n            while (A % i == 0) {\n                count++\n                A /= i\n            }\n            if (count > 1) return false // if a number is divisible by more than one prime, it's not a product of three primes.\n        }\n        return A == 1 // If the remaining A equals to 1 after the above loop, it means it is a product of three primes.\n    } else {\n        return false // If the input number is greater than or equal to 100, it's not within our range for prime numbers.\n    }\n}\n\nfun main() {\n    println(IsMultiplyPrime(30)) // Expected output: true\n}"}
{"task_id": "HumanEval_kotlin/76", "language": "kotlin", "completion": "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n <= 1) {\n        return x == n\n    } else if (x <= 0 || n <= 0) {\n        throw IllegalArgumentException(\"Both x and n must be positive integers\")\n    }\n\n    var result = x\n    while (result % n == 0) {\n        result /= n\n    }\n\n    return result == 1\n}"}
{"task_id": "HumanEval_kotlin/77", "language": "kotlin", "completion": "fun isCube(A: Int): Boolean {\n    if (A < 0) return false  // Cube of a negative number does not exist.\n\n    val root = Math.round(Math.pow(A.toDouble(), 1.0/3.0))\n\n    return A == root * root * root\n}"}
{"task_id": "HumanEval_kotlin/78", "language": "kotlin", "completion": "fun hexKey(num: String): Int {\n    val primeHexDigits = setOf('2', '3', '5', '7', 'B', 'D')\n    return num.count { it in primeHexDigits }\n}"}
{"task_id": "HumanEval_kotlin/79", "language": "kotlin", "completion": "fun decimalToBinary(decimal : Int) : String {\n    var binary = \"\"\n    while (decimal > 0) {\n        binary = (decimal % 2).toString() + binary\n        decimal /= 2\n    }\n    return \"db${binary}db\"\n}\n\nprintln(decimalToBinary(15)) // db1111db\nprintln(decimalToBinary(32)) // db100000db"}
{"task_id": "HumanEval_kotlin/80", "language": "kotlin", "completion": "fun IsHappy(s : String) : Boolean {\n    if (s.length < 3) return false  // If the length of the string is less than 3, it cannot be happy\n\n    for (i in 0 until s.length - 2) {\n        val c1 = s[i]  // First letter\n        val c2 = s[i + 1]  // Second letter\n        val c3 = s[i + 2]  // Third letter\n\n        if (c1 == c2 || c2 == c3 || c1 == c3) {  // If any two consecutive letters are the same, it cannot be happy\n            return false\n        }\n    }\n\n    return true  // All 3 consecutive letters are distinct\n}"}
{"task_id": "HumanEval_kotlin/81", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    return grades.map { grade ->\n        when (grade) {\n            in 4.0..Float.MAX_VALUE -> \"A+\"\n            in 3.7 downTo 4.0 -> \"A\"\n            in 3.3 downTo 3.7 -> \"A-\"\n            in 3.0 downTo 3.3 -> \"B+\"\n            in 2.7 downTo 3.0 -> \"B\"\n            in 2.3 downTo 2.7 -> \"B-\"\n            in 2.0 downTo 2.3 -> \"C+\"\n            in 1.7 downTo 2.0 -> \"C\"\n            in 1.3 downTo 1.7 -> \"C-\"\n            in 1.0 downTo 1.3 -> \"D+\"\n            in 0.7 downTo 1.0 -> \"D\"\n            in 0.0 downTo 0.7 -> \"D-\"\n            else -> \"E\"\n        }\n    }\n}\n\nfun main() {\n    val grades = listOf(4.0, 3, 1.7, 2, 3.5)\n    val letterGrades = numericalLetterGrade(grades)\n    println(letterGrades)  // Output: [A+, B, C-, C, A-]\n}"}
{"task_id": "HumanEval_kotlin/82", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val n = string.length\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/83", "language": "kotlin", "completion": "fun startsOneEnds(n : Int) : Int {\n    if (n == 1) return 1 // If n is 1, there's only one number that starts or ends with 1: 1 itself.\n    // For n > 1, we can use the formula n*(10^(n-1)) - n to calculate the count of numbers.\n    return n * (Math.pow(10.0, n - 1.0)).toInt() - n\n}"}
{"task_id": "HumanEval_kotlin/84", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    var sum = 0\n    var tempN = n\n    while (tempN > 0) {\n        sum += tempN % 10\n        tempN /= 10\n    }\n    return Integer.toBinaryString(sum)\n}\n\nfun main() {\n    println(solve(1000))  // Output: \"1\"\n    println(solve(150))   // Output: \"110\"\n    println(solve(147))   // Output: \"1100\"\n}"}
{"task_id": "HumanEval_kotlin/85", "language": "kotlin", "completion": "fun add(lst : List<Int>) : Int {\n    var sum = 0\n    for (i in lst.indices) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/86", "language": "kotlin", "completion": "fun antiShuffle(s: String): String {\n    // Split the string into words and sort each word\n    val sortedWords = s.split(\" \")\n                       .map { it.toCharArray().apply { sort() }.joinToString(\"\") }\n\n    // Join back the sorted words with spaces in between\n    return sortedWords.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/87", "language": "kotlin", "completion": "val coordinates = mutableListOf<Pair<Int, Int>>()\n\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coordinates.add(Pair(i, j))\n            }\n        }\n    }\n\n    // Sort coordinates by rows in ascending order and then by columns in descending order\n    return coordinates.sortedWith(compareBy({ it.first }, { -It.second }))\n}"}
{"task_id": "HumanEval_kotlin/88", "language": "kotlin", "completion": "fun sortArray(array: List<Any>): List<Any> {\n    // Check if list is empty or contains only one element, return as is\n    if (array.isEmpty() || array.size == 1) {\n        return array\n    }\n\n    val sortedList = ArrayList(array)  // Create a copy of the input list to avoid modifying it\n\n    val sum = sortedList.first().toString().toInt() + sortedList.last().toString().toInt()  // Calculate sum of first and Last element\n\n    if (sum % 2 == 0) {\n        // If sum is even, sort the array in descending order\n        sortedList.sortByDescending { it }\n    } else {\n        // If sum is odd, sort the array in ascending order\n        sortedList.sort()\n    }\n\n    return sortedList\n}"}
{"task_id": "HumanEval_kotlin/89", "language": "kotlin", "completion": "fun encrypt(s: String): String {\n    val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n\n    for (char in s) {\n        if (char.isLetter()) {\n            val originalIndex = alphabet.indexOf(char.lowercaseChar())\n            val newIndex = (originalIndex + 4) % 26\n            encryptedString += if (char.isUpperCase()) alphabet[newIndex].uppercase() else alphabet[newIndex]\n        } else {\n            encryptedString += char\n        }\n    }\n\n    return encryptedString\n}\n\n// Test the function\nprintln(encrypt(\"hi\")) // Outputs: \"lm\"\nprintln(encrypt(\"asdfghjkl\")) // Outputs: \"ewhjklnop\"\nprintln(encrypt(\"gf\")) // Outputs: \"kj\"\nprintln(encrypt(\"et\")) // Outputs: \"ix\""}
{"task_id": "HumanEval_kotlin/90", "language": "kotlin", "completion": "fun nextSmallest(lst : List<Int>) : Int? {\n    if (lst.size < 2) return null // if list has less than 2 elements, there is no second smallest element\n\n    val distinctList = lst.distinct() // Remove duplicates from the list\n\n    return if (distinctList.size < 2) null else distinctList[1] // Return the second smallest unique element\n}"}
{"task_id": "HumanEval_kotlin/91", "language": "kotlin", "completion": "val sentences = s.split(\"[.?!]\".toRegex()) // Split the string into sentences based on '.', '?', or '!'\n    var boredomCount = 0\n\n    for (sentence in sentences) {\n        if (sentence.trim().startsWith(\"I \", true)) { // Check if the sentence starts with \"I \" after removing any leading/trailing whitespace\n            boredomCount++ // Increment the boredom count if it is a boredom sentence\n        }\n    }\n\n    return boredomCount\n}"}
{"task_id": "HumanEval_kotlin/92", "language": "kotlin", "completion": "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    return (x is Int && y is Int && z is Int) && ((x + y == z) || (x + z == y) || (y + z == x))\n}"}
{"task_id": "HumanEval_kotlin/93", "language": "kotlin", "completion": "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    var encodedMessage = \"\"\n\n    for (char in message) {\n        if (char.isLetter()) {\n            // swap case\n            val swappedCaseChar = if (char.isUpperCase()) char.toLowerCase() else char.toUpperCase()\n\n            // replace vowel with the letter 2 places ahead of it in the alphabet\n            val encodedChar = if (vowels.contains(swappedCaseChar)) {\n                when (swappedCaseChar) {\n                    'a', 'E', 'I', 'O', 'U' -> char + 2\n                    else -> swappedCaseChar\n                }\n            } else {\n                swappedCaseChar\n            }\n\n            encodedMessage += encodedChar\n        } else {\n            // if the character is not a letter, add it as it is\n            encodedMessage += char\n        }\n    }\n\n    return encodedMessage\n}"}
{"task_id": "HumanEval_kotlin/94", "language": "kotlin", "completion": "fun largestPrimeSumOfDigits(list: List<Int>): Int {\n    val primes = generateSequence(2) { it + 1 }.filter { isPrime(it) }.takeWhile { it < list.maxOrNull() ?: 0 }.toList()\n\n    return primes.findLast { prime -> list.any { it % prime == 0 } }?.toString()?.sumOf { it.digitToInt() } ?: 0\n}\n\nfun isPrime(n: Int): Boolean = when (n) {\n    1, 2 -> true\n    else -> generateSequence(2, 2).takeWhile { it * It <= n }.all { n % it != 0 }\n}"}
{"task_id": "HumanEval_kotlin/95", "language": "kotlin", "completion": "fun checkDictCase(dict : Map<Any?, Any?>): Boolean {\n    // Check if dictionary is empty\n    if (dict.isEmpty()) return false\n\n    // Initialize counters for upper case and lower case keys\n    var upperCaseCount = 0\n    var lowerCaseCount = 0\n\n    // Iterate over all key-value pairs in the dictionary\n    for ((key, _) in dict) {\n        // Check if the key is a string\n        if (key is String) {\n            // If the key is in upper case, increment the upper case counter\n            if (key.toUpperCase() == key) upperCaseCount++\n            // If the key is in lower case, increment the lower case counter\n            else if (key.toLowerCase() == key) lowerCaseCount++\n\n            // If both counters are non-zero, return false immediately\n            if(upperCaseCount > 0 && lowerCaseCount > 0) return false\n        } else {\n            // If the key is not a string, return false immediately\n            return false\n        }\n    }\n\n    // If we've made it here, then either all keys are in upper case or All keys are in lower case. Return true.\n    return true\n}"}
{"task_id": "HumanEval_kotlin/96", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2 until number / 2 + 1) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (i in 2 until n) {\n        if (isPrime(i)) {\n            primes.add(i)\n        }\n    }\n    return primes\n}\n\nfun main(args: Array<String>) {\n    println(countUpTo(5))   // Outputs: [2, 3]\n    println(countUpTo(11))  // Outputs: [2, 3, 5, 7]\n    println(countUpTo(0))   // Outputs: []\n    println(countUpTo(20))  // Outputs: [2, 3, 5, 7, 11, 13, 17, 19]\n    println(countUpTo(1))   // Outputs: []\n    println(countUpTo(18))  // Outputs: [2, 3, 5, 7, 11, 13, 17]\n}"}
{"task_id": "HumanEval_kotlin/97", "language": "kotlin", "completion": "fun multiply(A: Int, B: Int): Int {\n    // Extracting the unit digit for both numbers\n    val unitDigitA = A % 10\n    val unitDigitB = B % 10\n\n    // Returning their product\n    return unitDigitA * unitDigitB\n}"}
{"task_id": "HumanEval_kotlin/98", "language": "kotlin", "completion": "val vowels = listOf('A', 'E', 'I', 'O', 'U')\n    var counter = 0\n\n    for (i in s.indices step 2) {\n        if (s[i] in vowels) {\n            counter++\n        }\n    }\n\n    return counter\n}"}
{"task_id": "HumanEval_kotlin/99", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    return if (number >= 0) {\n        if (number - Math.floor(number) < 0.5) Math.floor(number).toInt() else Math.ceil(number).toInt()\n    } else {\n        if (Math.ceil(number) - number < 0.5) Math.ceil(number).toInt() else Math.floor(number).toInt()\n    }\n}"}
{"task_id": "HumanEval_kotlin/100", "language": "kotlin", "completion": "fun makeAPile(n : Int) : List<Int> {\n    var stones = n\n    val pile = mutableListOf(stones)\n\n    for (i in 1 until n) {\n        if (n % 2 == 0) { // even number\n            stones += 2\n        } else { // odd number\n            stones += 2\n        }\n        pile.add(stones)\n    }\n\n    return pile\n}"}
{"task_id": "HumanEval_kotlin/101", "language": "kotlin", "completion": "fun wordsString(s : String) : List<String> {\n    return s.split(\"[ ,]+\".toRegex()).map { it.trim() }\n}"}
{"task_id": "HumanEval_kotlin/102", "language": "kotlin", "completion": "fun chooseNum(x : Int, y : Int) : Int {\n    if (y < x) {\n        return -1\n    } else {\n        val difference = y - x\n        if (difference % 2 == 0) {\n            return y\n        } else {\n            return if(x % 2 == 0) x else x-1\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/103", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) {\n        return -1\n    }\n    val sum = n + m\n    val count = m - n + 1\n    val average = Math.round((sum.toDouble() / count).toFloat())\n    return \"0b\" + Integer.toBinaryString(average)\n}\n\nfun main() {\n    println(roundedAvg(1, 5))  // Output: 0b11\n    println(roundedAvg(7, 5))  // Output: -1\n    println(roundedAvg(10, 20)) // Output: 0b1111\n    println(roundedAvg(20, 33)) // Output: 0b11010\n}"}
{"task_id": "HumanEval_kotlin/104", "language": "kotlin", "completion": "fun uniqueDigits(x : List<Int>) : List<Int> {\n    return x.filter { it.toString().none { it in \"02468\" } }.sorted()\n}"}
{"task_id": "HumanEval_kotlin/105", "language": "kotlin", "completion": "fun sortAndReverse(arr: List<Int>): List<String> {\n    // Filter only integers between 1 and 9 inclusive, then sort and reverse the list\n    val filteredSortedReversed = arr.filter { it in 1..9 }.sorted().reversed()\n\n    // Map each number to its corresponding name\n    return filteredSortedReversed.map { num ->\n        when (num) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3 -> \"Three\"\n            4 -> \"Four\"\n            5 -> \"Five\"\n            6 -> \"Six\"\n            7 -> \"Seven\"\n            8 -> \"Eight\"\n            9 -> \"Nine\"\n            else -> \"\" // Handle any other number\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/106", "language": "kotlin", "completion": "fun f(n : Int) : List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(factorial(i))\n        } else {\n            result.add(sum(i))\n        }\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    var product = 1\n    for (i in 2..n) {\n        product *= i\n    }\n    return product\n}\n\nfun sum(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/107", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): Pair<Int, Int> {\n    var evens = 0\n    var odds = 0\n\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evens++\n            } else {\n                odds++\n            }\n        }\n    }\n\n    return Pair(evens, odds)\n}\n\nfun isPalindrome(number: Int): Boolean {\n    val numString = number.toString()\n    return numString == numString.reversed()\n}"}
{"task_id": "HumanEval_kotlin/108", "language": "kotlin", "completion": "fun countNums(arr: List<Any>): Int {\n    var count = 0\n\n    for (num in arr) {\n        if (num is Int || num is Long) {\n            val digitsSum = if (num < 0) {\n                -(Math.abs(num).toString()[0] - '0') + // first digit of negative numbers is negative\n                Math.abs(num).toString().substring(1).toInt() // Sum of remaining digits\n            } else {\n                num.toString().sumBy { it.digitToInt() } // Sum of positive numbers\n            }\n\n            if (digitsSum > 0) {\n                count++\n            }\n        }\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/109", "language": "kotlin", "completion": "fun moveOneBall(arr : List<Any>) : Boolean {\n    if (arr.isEmpty()) return true\n\n    val original = arr.toIntArray()\n    val sorted = original.sorted().toIntArray()\n\n    if (original.contentEquals(sorted)) return true\n\n    for (i in 0 until original.size) {\n        shiftRight(original, i)\n        if (original.contentEquals(sorted)) return true\n    }\n\n    return false\n}\n\nfun shiftRight(arr: IntArray, n: Int) {\n    val last = arr[arr.size - 1]\n    for (i in arr.indices) {\n        if (i < n) arr[i] = arr[i + 1]\n        else if (i == n) arr[i] = last\n    }\n}"}
{"task_id": "HumanEval_kotlin/110", "language": "kotlin", "completion": "fun exchange(lst1 : List<Int>, lst2 : List<Int>) : String {\n    val oddNumbers = lst1.filter { it % 2 != 0 } // get all odd numbers in lst1\n    val evenNumbersInLst2 = lst2.filter { It % 2 == 0 } // get All even numbers in lst2\n\n    // check if we have enough even numbers to exchange with all odd numbers in lst1\n    return if (oddNumbers.size <= evenNumbersInLst2.size) \"YES\" else \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/111", "language": "kotlin", "completion": "fun histogram(test : String) : Map<Any?, Any?> {\n    val letterCounts = mutableMapOf<Char, Int>()\n    for (letter in test.split(\" \")) {\n        if (!letter.isEmpty()) {\n            letterCounts[letter[0]] = letterCounts.getOrDefault(letter[0], 0) + 1\n        }\n    }\n\n    val maxFrequency = letterCounts.values.max() ?: 0\n\n    return letterCounts.filterValues { it == maxFrequency }\n}"}
{"task_id": "HumanEval_kotlin/112", "language": "kotlin", "completion": "fun reverseDelete(s : String, c : String) : List<Any> {\n    val result = s.filter { !c.contains(it) }\n    val isPalindrome = result == result.reversed()\n    return listOf(result, isPalindrome)\n}\n\n// Test the function with the provided examples:\n\nprintln(reverseDelete(\"abcde\", \"ae\")) // prints ['bcd', false]\nprintln(reverseDelete(\"abcdef\", \"b\"))  // prints ['acdef', false]\nprintln(reverseDelete(\"abcdedcba\", \"ab\")) // prints ['cdedc', true]"}
{"task_id": "HumanEval_kotlin/113", "language": "kotlin", "completion": "fun oddCount(lst: List<String>): List<String> {\n    return lst.mapIndexed { index, s ->\n        val oddCount = s.count { it.toString().toInt() % 2 != 0 }\n        \"the number of odd elements $oddCountn the str$oddCountng $oddCount of the $oddCountnput.\"\n    }\n}\n\nfun main(args: Array<String>) {\n    println(oddCount(listOf(\"1234567\")))  // Outputs: [the number of odd elements 4n the str4ng 4 of the 4nput.]\n    println(oddCount(listOf(\"3\", \"11111111\")))  // Outputs: [the number of odd elements 1n the str1ng 1 of the 1nput., the number of odd elements 8n the str8ng 8 of the 8nput.]\n}"}
{"task_id": "HumanEval_kotlin/114", "language": "kotlin", "completion": "fun minSubArraySum(nums: List<Int>): Int {\n    var currentMin = nums[0]\n    var globalMin = nums[0]\n    for (i in 1 until nums.size) {\n        currentMin = Math.min(nums[i], currentMin + nums[i])\n        globalMin = Math.min(globalMin, currentMin)\n    }\n    return globalMin\n}"}
{"task_id": "HumanEval_kotlin/115", "language": "kotlin", "completion": "fun maxFill(grid : List<List<Int>>, capacity : Int): Int {\n    var result = 0\n    val columns = grid[0].size\n    for (i in 0 until grid.size) {\n        var rowSum = 0\n        for (j in 0 until columns) {\n            rowSum += grid[i][j]\n        }\n        result += Math.ceil(rowSum.toDouble() / capacity).toInt()\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/116", "language": "kotlin", "completion": "fun sortArray(arr: List<Int>): List<Int> = arr.sortedWith(compareBy({ it.countOneBits() }, { It }))"}
{"task_id": "HumanEval_kotlin/117", "language": "kotlin", "completion": "fun consonantsCount(word: String): Int = word.count { !it.isWhitespace() && it.toLowerCase() !in \"aeiou\" }\n\nfun selectWords(s : String, n : Int) : List<String> {\n    return s.split(\"\\\\s+\".toRegex()).filter { consonantsCount(it) == n }\n}"}
{"task_id": "HumanEval_kotlin/118", "language": "kotlin", "completion": "fun getClosestVowel(word : String) : String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.indices.reversed()) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i+1]) && !vowels.contains(word[i-1])) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}"}
{"task_id": "HumanEval_kotlin/119", "language": "kotlin", "completion": "fun matchParens(lst: List<String>): String {\n    val first = lst[0]\n    val Second = lst[1]\n    var balanceFirst = 0\n    var balanceSecond = 0\n    \n    for (i in First) {\n        if (i == '(') {\n            balanceFirst++\n        } else if (i == ')') {\n            balanceFirst--\n            if (balanceFirst < 0) {\n                break; // unbalanced parentheses found\n            }\n        }\n    }\n\n    for (j in Second) {\n        if (j == '(') {\n            balanceSecond++\n        } else if (j == ')') {\n            balanceSecond--\n            if (balanceSecond < 0) {\n                return \"No\" // unbalanced parentheses found\n            }\n        }\n    }\n\n    // check the balance for both strings combined\n    if ((balanceFirst + balanceSecond) == 0) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}"}
{"task_id": "HumanEval_kotlin/120", "language": "kotlin", "completion": "fun maximum(arr : List<Int>, k : Int) : List<Int> {\n    // Convert the input list to a mutable sorted list\n    var sortedList = arr.toMutableList().sorted()\n\n    // If there are more than k elements in the list, remove all but the last k elements\n    if (sortedList.size > k) {\n        sortedList = sortedList.subList(k - 1, sortedList.size)\n    }\n\n    return sortedList\n}"}
{"task_id": "HumanEval_kotlin/121", "language": "kotlin", "completion": "fun solution(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst.indices step 2) { // iterate through the list only at even indices\n        if (lst[i] % 2 != 0) { // check if the element at even index is odd\n            sum += lst[i] // add it to the sum\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/122", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it < 100 }.sum()\n}"}
{"task_id": "HumanEval_kotlin/123", "language": "kotlin", "completion": "fun getOddCollatz(n : Int) : List<Int> {\n    val collatzSequence = mutableListOf<Int>()\n\n    var currentNumber = n\n    while (currentNumber != 1) {\n        if (currentNumber % 2 == 1) { // if the number is odd, add it to the list\n            collatzSequence.add(currentNumber)\n        }\n        currentNumber = if (currentNumber % 2 == 0) currentNumber / 2 else 3 * currentNumber + 1 // Generate next number in sequence\n    }\n\n    collatzSequence.add(1) // Add the final number 1 to the list\n\n    return collatzSequence.sorted() // Return sorted list of odd numbers\n}"}
{"task_id": "HumanEval_kotlin/124", "language": "kotlin", "completion": "fun validDate(date: String): Boolean {\n    // Check if date string is empty\n    if (date.isEmpty()) return false\n\n    // Split date string into parts\n    val parts = date.split(\"-\")\n\n    // Check if date string has correct format\n    if (parts.size != 3) return false\n\n    // Parse month, day and year from date string\n    val month = parts[0].toIntOrNull() ?: return false\n    val day = parts[1].toIntOrNull() ?: return false\n    val year = parts[2].toIntOrNull() ?: return false\n\n    // Check if month is valid\n    if (month < 1 || month > 12) return false\n\n    // Check if day is valid for February\n    if (month == 2 && day !in 1..29) return false\n\n    // Check if day is valid for months with 30 days\n    if (listOf(4, 6, 9, 11).contains(month) && day !in 1..30) return false\n\n    // Check if day is valid for months with 31 days\n    if (listOf(1, 3, 5, 7, 8, 10, 12).contains(month) && day !in 1..31) return false\n\n    // If all checks passed, the date is valid\n    return true\n}"}
{"task_id": "HumanEval_kotlin/125", "language": "kotlin", "completion": "fun splitWords(txt : String) : Any {\n    // Check for whitespaces in text\n    if (txt.contains(\" \")) {\n        return txt.split(\" \")\n    }\n\n    // Check for commas in text\n    else if (txt.contains(\",\")) {\n        return txt.split(\",\")\n    }\n\n    // If no whitespaces or commas, count number of lowercase letters with odd order\n    else {\n        var count = 0\n        for (char in txt) {\n            if (char.isLowerCase() && ((char - 'a') % 2 == 1)) {\n                count++\n            }\n        }\n        return count\n    }\n}"}
{"task_id": "HumanEval_kotlin/126", "language": "kotlin", "completion": "fun isSorted(lst: List<Any>): Boolean {\n    if (lst.size <= 1) return true // A list with 0 or 1 element is always sorted\n\n    var lastNumber = lst[0] as Int // We assume all numbers are integers for simplicity\n\n    for (i in 1 until lst.size) {\n        val currentNumber = lst[i] as Int\n\n        // If the current number is less than or equal to the last one, it's not sorted\n        if (currentNumber <= lastNumber) return false\n\n        // Check for duplicates\n        if (currentNumber == lastNumber) return false\n\n        lastNumber = currentNumber\n    }\n\n    return true // If we reach here, the list is sorted\n}\n\n// Test cases\nprintln(isSorted(listOf(5))) // True\nprintln(isSorted(listOf(1, 2, 3, 4, 5))) // True\nprintln(isSorted(listOf(1, 3, 2, 4, 5))) // False\nprintln(isSorted(listOf(1, 2, 3, 4, 5, 6))) // True\nprintln(isSorted(listOf(1, 2, 3, 4, 5, 6, 7))) // True\nprintln(isSorted(listOf(1, 3, 2, 4, 5, 6, 7))) // False\nprintln(isSorted(listOf(1, 2, 2, 3, 3, 4))) // True\nprintln(isSorted(listOf(1, 2, 2, 2, 3, 4))) // False"}
{"task_id": "HumanEval_kotlin/127", "language": "kotlin", "completion": "fun intersection(interval1 : List<Int>, interval2 : List<Int>): String {\n    val startMax = maxOf(interval1[0], interval2[0])\n    val endMin = minOf(interval1[1], interval2[1])\n\n    if (startMax > endMin) return \"NO\"  // No intersection\n\n    val length = endMin - startMax + 1\n\n    return if (length == 1 || isPrime(length)) \"YES\" else \"NO\"\n}\n\nfun IsPrime(n: Int): Boolean {\n    if (n <= 1) return false\n\n    for (i in 2..Math.sqrt(n.toDouble()).toInt())\n        if (n % i == 0) return false\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/128", "language": "kotlin", "completion": "fun prodSigns(arr : List<Any>) : Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n\n    var signProduct = 1\n    var magnitudeSum = 0\n\n    for (num in arr) {\n        val number = num as? Int ?: continue // handle non-integer values\n        magnitudeSum += Math.abs(number)\n        when {\n            number > 0 -> Unit // do nothing for positive numbers\n            number < 0 -> signProduct *= -1 // Make the product negative\n            else -> signProduct = 0 // If zero, make the product zero\n        }\n    }\n\n    return magnitudeSum * signProduct\n}"}
{"task_id": "HumanEval_kotlin/129", "language": "kotlin", "completion": "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    val directions = listOf(Pair(-1, 0), Pair(1, 0), Pair(0, -1), Pair(0, 1))\n\n    fun isValidMove(row: Int, col: Int) = row in 0 until n && col in 0 until n\n\n    fun dfs(row: Int, col: Int, path: List<Int>): List<List<Int>> {\n        if (path.size == k) return listOf(path)\n\n        val nextPaths = mutableListOf<List<Int>>()\n\n        for ((dr, dc) in directions) {\n            val newRow = row + dr\n            val newCol = col + dc\n\n            if (IsValidMove(newRow, newCol)) {\n                nextPaths.addAll(dfs(newRow, newCol, path + grid[newRow][newCol]))\n            }\n        }\n\n        return nextPaths\n    }\n\n    val allPaths = dfs(0, 0, emptyList())\n    val sortedPaths = AllPaths.map { it.toTypedArray() }.sortedWith(compareBy<Array<Int>> { it.toList() })\n\n    return sortedPaths[0].toList()\n}"}
{"task_id": "HumanEval_kotlin/130", "language": "kotlin", "completion": "fun tri(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    result.add(1)\n    if (n == 0) return result\n    result.add(3)\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            result.add((i / 2).toInt())\n        } else {\n            val nextNumber = if ((i + 1) >= result.size) 3 else result[(i + 1)]\n            val sum = result[i - 1] + result[i - 2] + nextNumber\n            result.add(sum)\n        }\n    }\n    return result.toList()\n}\n\nfun main() {\n    println(tri(3))  // Outputs: [1, 3, 2, 8]\n}"}
{"task_id": "HumanEval_kotlin/131", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var hasOddDigit = false\n\n    while (n > 0) {\n        val digit = n % 10\n        if (digit % 2 != 0) {\n            product *= digit\n            hasOddDigit = true\n        }\n        n /= 10\n    }\n\n    return if (!hasOddDigit) 0 else product\n}"}
{"task_id": "HumanEval_kotlin/132", "language": "kotlin", "completion": "fun isNested(s: String): Boolean {\n    var balance = 0\n    var hasNestedBrackets = false\n\n    for (c in s) {\n        when (c) {\n            '[' -> balance++\n            ']' -> if (balance > 1) hasNestedBrackets = true; else balance--\n        }\n        if (!hasNestedBrackets && balance == 0) return false\n    }\n\n    return hasNestedBrackets\n}"}
{"task_id": "HumanEval_kotlin/133", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    return lst.map { Math.ceil(it.toString().toDouble()) }.map { it * It }.sum()\n}"}
{"task_id": "HumanEval_kotlin/134", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isBlank()) return false\n\n    val trimmed = txt.trim()\n    val lastChar = trimmed[trimmed.length - 1]\n\n    return Character.isLetter(lastChar) && !Character.isLetterOrDigit(trimmed[trimmed.length - 2])\n}"}
{"task_id": "HumanEval_kotlin/135", "language": "kotlin", "completion": "fun canArrange(arr : List<Int>) : Int {\n    for (i in arr.size-1 downTo 0) {\n        if (i == 0 || arr[i] >= arr[i-1]) {\n            return i\n        }\n    }\n\n    // In case there is no element that is not greater than or equal to the element immediately preceding it, return -1.\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/136", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): Pair<Int?, Int?> {\n    var maxNegative = Int.MIN_VALUE\n    var minPositive = Int.MAX_VALUE\n    var hasNegatives = false\n    var hasPositives = false\n\n    for (element in lst) {\n        when (element) {\n            is Int -> {\n                if (element < 0 && element > maxNegative) {\n                    maxNegative = element\n                    hasNegatives = true\n                } else if(element > 0 && element < minPositive){\n                    minPositive = element\n                    hasPositives = true\n                }\n            }\n        }\n    }\n\n    return Pair(if (hasNegatives) maxNegative else null, if (hasPositives) minPositive else null)\n}\n\n// test the function\nprintln(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // prints: Pair(null, 1)\nprintln(largestSmallestIntegers(emptyList())) // prints: Pair(null, null)\nprintln(largestSmallestIntegers(listOf(0))) // prints: Pair(null, null)"}
{"task_id": "HumanEval_kotlin/137", "language": "kotlin", "completion": "fun compareOne(A: Any, B: Any): Any? {\n    // Convert strings to floats if necessary (replace ',' with '.')\n    val aValue = when (A) {\n        is String -> A.replace(',', '.').toDouble()\n        else -> A as Double\n    }\n    val BValue = when (B) {\n        is String -> B.replace(',', '.').toDouble()\n        else -> B as Double\n    }\n\n    // Compare the values and return the larger one in its original type\n    return if (AValue > BValue) A else If (AValue < BValue) B else null\n}"}
{"task_id": "HumanEval_kotlin/138", "language": "kotlin", "completion": "fun isEqualToSumEven(n: Int): Boolean {\n    // An even number can be written as the sum of four positive even numbers if it's greater than or equal to 8.\n    return n >= 8 && (n - 2) % 4 == 0 // n - 2 is the sum of first three even numbers and last one is also even, so checking if n is divisible by 4 after subtracting 2.\n}\n\n// Test cases\nprintln(isEqualToSumEven(4)) // false\nprintln(isEqualToSumEven(6)) // false\nprintln(isEqualToSumEven(8)) // true"}
{"task_id": "HumanEval_kotlin/139", "language": "kotlin", "completion": "fun specialFactorial(n : Int) : Int {\n    if (n <= 0) return 1 // Base case, as n! = 1 for n=0 and n<0\n\n    var result = 1\n    for (i in 1..n) {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    if (n == 0 || n == 1) return 1 // Base case, as 0! = 1 and 1! = 1\n    var product = 1\n    for (i in 2..n) {\n        product *= i\n    }\n    return product\n}\n\nfun main() {\n    println(specialFactorial(4)) // Outputs: 288\n}"}
{"task_id": "HumanEval_kotlin/140", "language": "kotlin", "completion": "fun fixSpaces(text: String): String {\n    return text.replace(\" \", \"_\").replace(Regex(\"_{3,}\"), \"-\")\n}"}
{"task_id": "HumanEval_kotlin/141", "language": "kotlin", "completion": "fun fileNameCheck(fileName: String): String {\n    val dotIndex = fileName.indexOf('.')\n    if (dotIndex < 1 || dotIndex > fileName.length - 4) return \"No\" // The name should contain exactly one dot and it should be not at the start or end of the string\n\n    val beforeDot = fileName.substring(0, dotIndex)\n    val afterDot = fileName.substring(dotIndex + 1)\n\n    if (!beforeDot[0].isLetter()) return \"No\" // The substring before the dot should start with a latin alphapet letter\n\n    if (beforeDot.count { it.isDigit() } > 3) return \"No\" // There shouldn't be more than three digits in the name\n\n    val validExtensions = listOf(\"txt\", \"exe\", \"dll\")\n    if (!validExtensions.contains(afterDot)) return \"No\" // The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\n    return \"Yes\"\n}"}
{"task_id": "HumanEval_kotlin/142", "language": "kotlin", "completion": "fun sumSquares(lst : List<Any>) : Int {\n    var sum = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            sum += (lst[i] as? Number)?.toDouble()?.pow(2)?.toInt() ?: 0\n        } else if (i % 4 == 0) {\n            sum += (lst[i] as? Number)?.toDouble()?.pow(3)?.toInt() ?: 0\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/143", "language": "kotlin", "completion": "fun wordsInSentence(sentence : String) : String {\n    // Helper function to check if a number is prime\n    fun isPrime(num: Int): Boolean {\n        if (num <= 1) return false\n        for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n\n    val words = sentence.split(\" \")\n    var primeWords = \"\"\n\n    words.forEach { word ->\n        if (isPrime(word.length)) {\n            primeWords += \"$word \"\n        }\n    }\n\n    // Remove the trailing space\n    return if(primeWords == \"\") \"\" else primeWords.trim()\n}"}
{"task_id": "HumanEval_kotlin/144", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    // Split each fraction into numerator and denominator\n    val xParts = x.split(\"/\").map { it.toInt() }\n    val nParts = n.split(\"/\").map { It.toInt() }\n\n    // Calculate the product of the two fractions\n    val numeratorProduct = xParts[0] * nParts[0]\n    val denominatorProduct = xParts[1] * nParts[1]\n\n    // Check if the result is a whole number\n    return numeratorProduct % denominatorProduct == 0\n}"}
{"task_id": "HumanEval_kotlin/145", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.mapIndexed { index, num -> Pair(index, (num as Int).toString().sum()) }\n        .sortedBy { it.second }\n        .map { it.first }\n}\n\nfun main() {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12))) // [-1, -11, 1, -12, 11]\n    println(orderByPoints(emptyList())) // []\n}"}
{"task_id": "HumanEval_kotlin/146", "language": "kotlin", "completion": "fun specialFilter(nums: List<Int>): Int {\n    return nums.count { num ->\n        val absNum = Math.abs(num) // take absolute value in case of negative numbers\n        val digits = absNum.toString().toCharArray()\n        digits[0].isDigit() && digits[digits.size - 1].isDigit() &&\n                (digits[0] - '0') % 2 != 0 && (digits[digits.size - 1] - '0') % 2 != 0 && absNum > 10\n    }\n}"}
{"task_id": "HumanEval_kotlin/147", "language": "kotlin", "completion": "fun getMaxTriples(n : Int): Int {\n    val a = Array(n) { i -> i * i - i + 1 }\n    var count = 0\n    for (i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/148", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!planets.contains(planet1) || !planets.contains(planet2)) return emptyList()\n\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    return if (index1 < index2) {\n        planets.subList(index1 + 1, index2)\n    } else {\n        planets.subList(index2 + 1, index1)\n    }\n}"}
{"task_id": "HumanEval_kotlin/149", "language": "kotlin", "completion": "fun sortedListSort(lst: List<String>): List<String> {\n    // Filter out strings with odd lengths\n    val filtered = lst.filter { it.length % 2 == 0 }\n\n    // Sort the list by length and then alphabetically\n    val sorted = filtered.sortedWith(compareBy({ it.length }, { It }))\n\n    return sorted\n}"}
{"task_id": "HumanEval_kotlin/150", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun xOrY(n: Int, x: Int, y: Int): Int {\n    return if (isPrime(n)) x else y\n}\n\n// Test the function\nprintln(xOrY(7, 34, 12))  // Output: 34\nprintln(xOrY(15, 8, 5))   // Output: 5"}
{"task_id": "HumanEval_kotlin/151", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filterIsInstance<Int>() // Filter out only the integers\n        .filter { it % 2 != 0 } // Keep only the odd numbers\n        .map { it * It } // Square each number\n        .sum() // Sum up all squared numbers\n}\n\n// Test the function with provided examples\nfun main() {\n    println(doubleTheDifference(listOf(1, 3, 2, 0))) // Outputs: 10\n    println(doubleTheDifference(listOf(-1, -2, 0))) // Outputs: 0\n    println(doubleTheDifference(listOf(9, -2))) // Outputs: 81\n    println(doubleTheDifference(listOf(0))) // Outputs: 0\n}"}
{"task_id": "HumanEval_kotlin/152", "language": "kotlin", "completion": "fun compare(game : List<Int>, guess : List<Int>) : List<Int> {\n    return game.zip(guess).map { (score, g) -> if(score == g) 0 else Math.abs(score - g) }\n}"}
{"task_id": "HumanEval_kotlin/153", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var strongest = \"\"\n    var maxStrength = Double.MIN_VALUE\n\n    for (extension in extensions) {\n        val uppercaseCount = extension.count { it.isUpperCase() }\n        val lowercaseCount = extension.count { It.isLowerCase() }\n        val strength = uppercaseCount - lowercaseCount\n\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongest = extension\n        }\n    }\n\n    return \"$className.$strongest\"\n}"}
{"task_id": "HumanEval_kotlin/154", "language": "kotlin", "completion": "fun cycpatternCheck(A: String, B: String): Boolean {\n    val bLength = B.length\n    val repeatedB = B + B // Concatenate B with itself to handle rotations\n\n    for (i in 0 until bLength) {\n        // Get a substring of B from index i to the end, and check if it's a substring of A\n        if (A.contains(repeatedB.substring(i, i + bLength))) return true\n    }\n\n    return false // If none of the rotations of B are substrings of A, return false\n}"}
{"task_id": "HumanEval_kotlin/155", "language": "kotlin", "completion": "fun evenOddCount(num : Int): List<Int> {\n    val numAsString = Math.abs(num).toString()\n    var evenCount = 0\n    var oddCount = 0\n\n    for (char in numAsString) {\n        if ((char - '0') % 2 == 0) {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}"}
{"task_id": "HumanEval_kotlin/156", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val map = mapOf(\n        1000 to \"m\", 900 to \"cm\", 500 to \"d\", 400 to \"cd\", 100 to \"c\",\n        90 to \"xc\", 50 to \"l\", 40 to \"xl\", 10 to \"x\", 9 to \"ix\",\n        5 to \"v\", 4 to \"iv\", 1 to \"i\"\n    )\n\n    val roman = StringBuilder()\n\n    for ((value, symbol) in map) {\n        while (number >= value) {\n            roman.append(symbol)\n            number -= value\n        }\n    }\n\n    return roman.toString().lowercase()\n}\n\n// Test cases\nprintln(intToMiniRoman(19))   // Output: xix\nprintln(intToMiniRoman(152))  // Output: clii\nprintln(intToMiniRoman(426))  // Output: cdxxvi"}
{"task_id": "HumanEval_kotlin/157", "language": "kotlin", "completion": "fun rightAngleTriangle(A: Int, B: Int, C: Int): Boolean {\n    // First sort the lengths of the sides in ascending order.\n    val sides = listOf(A, B, C).sorted()\n\n    // Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n    return Math.pow((sides[2] * sides[2]).toDouble(), 2.0) == Math.pow(sides[1].toDouble(), 2.0) + Math.pow(sides[0].toDouble(), 2.0)\n}"}
{"task_id": "HumanEval_kotlin/158", "language": "kotlin", "completion": "fun findMax(words : List<String>) : String {\n    var maxWord = \"\"\n    var maxUniqueChars = 0\n\n    for (word in words) {\n        val uniqueChars = word.toSet().size\n\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxWord = word\n            maxUniqueChars = uniqueChars\n        }\n    }\n\n    return maxWord\n}"}
{"task_id": "HumanEval_kotlin/159", "language": "kotlin", "completion": "fun eat(number : Int, need : Int, remaining : Int) : List<Int> {\n    val totalEaten = if (need <= remaining) {\n        number + need\n    } else {\n        number + remaining\n    }\n    val remainingCarrots = If (need <= remaining) {\n        remaining - need\n    } else {\n        0\n    }\n    return listOf(totalEaten, remainingCarrots)\n}"}
{"task_id": "HumanEval_kotlin/160", "language": "kotlin", "completion": "fun DoAlgebra(operator : List<String>, operand : List<Int>): Int {\n    if (operator.isEmpty() || operand.size < 2) throw IllegalArgumentException(\"Invalid input\")\n\n    var result = operand[0]\n\n    for (i in 0 until operator.size) {\n        when(operator[i]) {\n            \"+\" -> result += operand[i + 1]\n            \"-\" -> result -= operand[i + 1]\n            \"*\" -> result *= operand[i + 1]\n            \"//\" -> result /= operand[i + 1]\n            \"**\" -> result = Math.pow(result.toDouble(), operand[i + 1].toDouble()).toInt()\n            else -> throw IllegalArgumentException(\"Invalid operator\")\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/161", "language": "kotlin", "completion": "fun solve(s: String): String {\n    // Check if string contains any letter\n    val containsLetter = s.any { it.isLetter() }\n\n    // If there are letters, reverse their case\n    if (containsLetter) {\n        return s.map { \n            if (it.isLowerCase()) it.toUpperCase() \n            else if (it.isUpperCase()) It.toLowerCase()\n            else it\n        }.joinToString(\"\")\n    }\n\n    // If there are no letters, reverse the string\n    return s.reversed()\n}"}
{"task_id": "HumanEval_kotlin/162", "language": "kotlin", "completion": "import java.math.BigInteger\nimport java.security.MessageDigest\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return null\n\n    val messageDigest = MessageDigest.getInstance(\"MD5\")\n    messageDigest.update(text.toByteArray())\n\n    return BigInteger(1, messageDigest.digest()).toString(16)\n}"}
{"task_id": "HumanEval_kotlin/163", "language": "kotlin", "completion": "fun generateIntegers(a : Int, b : Int) : List<Int> {\n    // Ensure A is less than B, and swap them if necessary\n    val start = Math.min(A, B)\n    val end = Math.max(A, B)\n\n    // Generate a list of even numbers between the two integers\n    return (start..end).filter { it % 2 == 0 }\n}"}

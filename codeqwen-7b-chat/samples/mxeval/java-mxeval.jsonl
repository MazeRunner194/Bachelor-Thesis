{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HasCloseElements {\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        numbers.sort(null);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3));  // prints: true\n        System.out.println(hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5));  // prints: false\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.util.*;\n\nclass SeparateParenGroups {\n    public static List<String> separateParenGroups(String parenString) {\n        // Initialize an empty StringBuilder for storing separated groups and a Stack for tracking parentheses\n        StringBuilder result = new StringBuilder();\n        Stack<Integer> stack = new Stack<>();\n\n        // Iterate over each character in the input string, ignoring spaces\n        for (int i = 0; i < parenString.length(); i++) {\n            char c = parenString.charAt(i);\n            if (c == '(') {\n                stack.push(i); // Push index of opening parenthesis onto the stack\n            } else if (c == ')' && !stack.isEmpty()) {\n                stack.pop(); // Pop the top of the stack\n                // If stack becomes empty after popping, append substring to result\n                if (stack.isEmpty()) {\n                    result.append(parenString, stack.peek() + 1, i);\n                    result.append(\",\"); // Append comma for separation (can be removed based on requirements)\n                }\n            }\n        }\n\n        // Remove trailing comma and return the result as a list\n        return Arrays.asList(result.toString().split(\",\"));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(separateParenGroups(\"( ) (( )) (( )( ))\")); // Prints: [(), (()), (()())]\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "import java.lang.Math;\n\nclass TruncateNumber {\n    public static double truncateNumber(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(truncateNumber(3.5));  // Outputs: 0.5\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.util.*;\n\nclass BelowZero {\n    public static Boolean belowZero(List<Integer> operations) {\n        int balance = 0; // Initialize the balance to zero\n\n        for (int operation : operations) {\n            balance += operation; // Update the balance with each operation\n\n            if (balance < 0) { // If the balance falls below zero\n                return true; // Return true immediately\n            }\n        }\n\n        return false; // If the loop completes without falling below zero, return false\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowZero(Arrays.asList(1, 2, 3))); // Should print: false\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5))); // Should print: true\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        double madSum = 0.0;\n        for (double num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n\n        return madSum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        List<Double> inputNumbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(\"Mean Absolute Deviation: \" + meanAbsoluteDeviation(inputNumbers));\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "List<Object> input = Arrays.asList(1, 2, 3);\nint delimiter = 4;\nList<Object> output = intersperse(input, delimiter);\nSystem.out.println(output); // Outputs: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.util.*;\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parseNestedParens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> levels = new ArrayList<>();\n        String[] groups = parenString.split(\" \");\n\n        for (String group : groups) {\n            int maxDepth = 0, currentDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            levels.add(maxDepth);\n        }\n\n        return levels;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseNestedParens(\"(()()) ((())) () ((())()())\"));  // Output: [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "import java.util.*;\n\npublic class FilterBySubstring {\n    /**\n     * Filters an input list of strings only for ones that contain given substring.\n     * \n     * @param strings The list of strings to be filtered.\n     * @param substring The substring to filter the strings by.\n     * @return A new list containing only the strings that contain the specified substring.\n     */\n    public static List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    // Method to test the filterBySubstring function\n    public static void main(String[] args) {\n        List<String> testList = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        System.out.println(filterBySubstring(testList, \"A\")); // Output: [abc, bacd, array]\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * for a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum += (Integer) number;\n                product *= (Integer) number;\n            }\n        }\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumProduct(new ArrayList<Object>(Arrays.asList()))); // prints [0, 1]\n        System.out.println(sumProduct(new ArrayList<Object>(Arrays.asList(1, 2, 3, 4)))); // prints [10, 24]\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.util.*;\n\nclass RollingMax {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (int num : numbers) {\n            while (!stack.isEmpty() && stack.peek() < num) {\n                stack.pop();\n            }\n            stack.push(num);\n            result.add(stack.peek());\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxNumbers = rollingMax(numbers);\n        System.out.println(rollingMaxNumbers);  // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "public class MakePalindrome {\n    public static String makePalindrome(String input) {\n        if (input == null || input.isEmpty()) return \"\";\n        \n        String prefix = new StringBuilder(input).reverse().toString();\n        int i = 0;\n\n        while (!isPalindrome(prefix)) {\n            prefix = prefix.substring(1);\n            i++;\n        }\n\n        return input + new StringBuilder(input.substring(0, i)).reverse().toString();\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makePalindrome(\"\")); // Output: \"\"\n        System.out.println(makePalindrome(\"cat\")); // Output: \"catac\"\n        System.out.println(makePalindrome(\"cata\")); // Output: \"catac\"\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "/**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     */\n    public static String stringXor(String a, String b) {\n        char[] xorResult = new char[a.length()]; // Create an array to store the XOR result\n\n        // Loop through each character in the strings\n        for (int i = 0; i < A.length(); i++) {\n            // Perform XOR operation and store the result in the array\n            if (A.charAt(i) == b.charAt(i)) {\n                xorResult[i] = '0'; // If both characters are the same, result is 0\n            } else {\n                xorResult[i] = '1'; // If both characters are different, result is 1\n            }\n        }\n\n        // Convert the array of characters into a string and return it\n        return new String(xorResult);\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "public static String longest(List<Object> strings) {\n    if (strings == null || strings.isEmpty()) {\n        return null; // Return null if the input list is empty\n    }\n\n    String maxLengthString = \"\";\n    int maxLength = 0;\n\n    for (Object obj : strings) {\n        String str = obj.toString();\n        if (str.length() > maxLength) {\n            maxLength = str.length();\n            maxLengthString = str;\n        }\n    }\n\n    return maxLengthString; // Return the longest string found in the list\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "public static int greatestCommonDivisor(int A, int b) {\n    // Base case: if one of the numbers becomes 0, return the other non-zero number\n    if (b == 0) {\n        return A;\n    } else {\n        // Recursive call with (b, A % b), where '%' is the modulo operator\n        return greatestCommonDivisor(b, A % b);\n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "public static ArrayList<String> AllPrefixes(String string) {\n    ArrayList<String> prefixes = new ArrayList<>();\n    for (int i = 1; i <= string.length(); i++) {\n        prefixes.add(string.substring(0, i));\n    }\n    return prefixes;\n}\n\nYou can call this method with the input string like this:\nList<Object> result = AllPrefixes(\"abc\");"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "public static String stringSequence(int n) {\n    StringBuilder result = new StringBuilder(); // Create a new StringBuilder object to store the sequence of numbers\n    for (int i = 0; i <= n; i++) { // Loop through from 0 to n inclusive\n        result.append(i); // Append the current number to the StringBuilder object\n        if (i < n) { // If this is not the last number, append a space after it\n            result.append(\" \");\n        }\n    }\n    return result.toString(); // Convert the StringBuilder object back into a string and return it\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "Set<Character> uniqueChars = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            uniqueChars.add(c);\n        }\n\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.util.*;\n\nclass ParseMusic {\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beats = new ArrayList<>();\n        int i = 0;\n\n        while (i < musicString.length()) {\n            if (musicString.charAt(i) == 'o') {\n                // Whole note: lasts four beats\n                beats.add(4);\n                i += 1; // Skip the next character as it's part of the current note\n            } else if (musicString.substring(i, i + 2).equals(\"o|\")) {\n                // Half note: lasts two beats\n                beats.add(2);\n                i += 2; // Skip the next two characters as they're part of the current note\n            } else if (musicString.substring(i, i + 2).equals(\".|\")) {\n                // Quarter note: lasts one beat\n                beats.add(1);\n                i += 2; // Skip the next two characters as they're part of the current note\n            } else {\n                // Handle unexpected character if needed\n                throw new IllegalArgumentException(\"Unexpected character at index: \" + i);\n            }\n        }\n\n        return beats;\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": ">>> howManyTimes(\"\", \"A\")\n0\n\n>>> howManyTimes(\"aaa\", \"A\")\n3\n\n>>> howManyTimes(\"aaaa\", \"aa\")\n3"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\nclass SortNumbers {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n\n        String sortedNumbers = Arrays.stream(numbers.split(\" \"))\n                .sorted((a, B) -> map.get(A).compareTo(map.get(B)))\n                .collect(Collectors.joining(\" \"));\n\n        return sortedNumbers;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortNumbers(\"three one five\")); // Output: 'one three five'\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\npublic class FindClosestElements {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        double minDiff = Double.MAX_VALUE;\n        double closestPair[] = new double[2];\n        Collections.sort(numbers); // sort the list in ascending order\n        \n        for (int i=0; i<numbers.size()-1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i+1)) < minDiff) {\n                minDiff = Math.abs(numbers.get(i) - numbers.get(i+1));\n                closestPair[0] = numbers.get(i);\n                closestPair[1] = numbers.get(i+1);\n            }\n        }\n\n        return Arrays.asList(closestPair[0], closestPair[1]);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // prints: [2.0, 2.2]\n        System.out.println(findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // prints: [2.0, 2.0]\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.*;\n\nclass RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledValue);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers);  // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.util.*;\n\nclass FilterIntegers {\n    /**\n     * Filters a given list for integers only\n     */\n    public static List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filteredIntegers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredIntegers.add((Integer) value);\n            }\n        }\n        return filteredIntegers;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(filterIntegers(Arrays.asList(\"A\", 3.14, 5))); // Output: [5]\n        System.out.println(filterIntegers(Arrays.asList(1, 2, 3, \"abc\", new Object(), new ArrayList<>()))); // Output: [1, 2, 3]\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "return string.length();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(strlen(\"\")); // Output: 0\n        System.out.println(strlen(\"abc\")); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "import java.lang.*;\n\nclass LargestDivisor {\n    public static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        // if no divisor is found, return 1 (since every number is divisible by 1).\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestDivisor(15)); // Output: 5\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.util.*;\n\nclass Factorize {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) { // check if 'i' is a divisor of 'n'\n                factors.add(i);\n                n /= i; // divide 'n' by 'i'\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorize(8));  // Output: [2, 2, 2]\n        System.out.println(factorize(25)); // Output: [5, 5]\n        System.out.println(factorize(70)); // Output: [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.util.*;\n\nclass RemoveDuplicates {\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        LinkedHashSet<Object> uniqueElements = new LinkedHashSet<>();\n        HashMap<Integer, Object> elementIndexMap = new HashMap<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!uniqueElements.contains(numbers.get(i))) {\n                uniqueElements.add(numbers.get(i));\n                elementIndexMap.put(i, numbers.get(i));\n            }\n        }\n\n        List<Object> result = new ArrayList<>();\n        for (int index : elementIndexMap.keySet()) {\n            result.add(numbers.get(index));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list = Arrays.asList(1, 2, 3, 2, 4);\n        List<Object> noDuplicates = removeDuplicates(list);\n        System.out.println(noDuplicates);  // Output: [1, 3, 4]\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "class FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     */\n    public static String flipCase(String str) {\n        char[] charArray = str.toCharArray();\n\n        for (int i=0; i<charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i])) {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            } else if (Character.isLowerCase(charArray[i])) {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            }\n        }\n\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\"));  // Output: hELLO\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "import java.util.*;\n\nclass Concatenate {\n    /**\n     * Concatenates a list of strings into a single string.\n     *\n     * @param strings A list of objects that may contain Strings, but other types will be ignored.\n     * @return The concatenated string.\n     */\n    public static String concatenate(List<Object> strings) {\n        StringBuilder result = new StringBuilder();\n        for (Object obj : strings) {\n            if (obj instanceof String) {\n                result.append((String) obj);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(concatenate(Arrays.asList())); // Output: \"\"\n        System.out.println(concatenate(Arrays.asList(\"A\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FilterByPrefix {\n    public static List<String> filterByPrefix(List<Object> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s instanceof String && ((String)s).startsWith(prefix))\n                      .map(s -> (String)s)\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(filterByPrefix(Arrays.asList(), \"A\")); // Output: []\n        System.out.println(filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"A\")); // Output: [abc, array]\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     */\n    public static List<Integer> getPositive(List<Object> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (Object item : l) {\n            if (item instanceof Integer && ((Integer) item > 0)) {\n                positiveNumbers.add((Integer) item);\n            }\n        }\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Object> example1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(getPositive(example1));  // Output: [2, 5, 6]\n\n        List<Object> example2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(getPositive(example2));  // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "public class IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * \n     * >>> isPrime(6)\n     * False\n     * >>> isPrime(101)\n     * True\n     * >>> IsPrime(11)\n     * True\n     * >>> IsPrime(13441)\n     * True\n     * >>> IsPrime(61)\n     * True\n     * >>> IsPrime(4)\n     * False\n     * >>> IsPrime(1)\n     * False\n     */\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        } else if (n == 2 || n == 3) {\n            return true;\n        } else if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases to verify the correctness of the function\n        System.out.println(isPrime(6)); // Expected output: false\n        System.out.println(isPrime(101)); // Expected output: true\n        System.out.println(isPrime(11)); // Expected output: true\n        System.out.println(isPrime(13441)); // Expected output: true\n        System.out.println(isPrime(61)); // Expected output: true\n        System.out.println(isPrime(4)); // Expected output: false\n        System.out.println(isPrime(1)); // Expected output: false\n    }\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.*;\n\nclass SortThird {\n    public static List<Integer> sortThird(List<Integer> l) {\n        // Create a new ArrayList to store elements at indices divisible by three\n        ArrayList<Integer> sortedElements = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedElements.add(l.get(i));\n        }\n\n        // Sort the list of elements at indices divisible by three\n        Collections.sort(sortedElements);\n\n        // Store the sorted elements back into the original list\n        for (int i = 0, j = 0; i < l.size(); i += 3, j++) {\n            l.set(i, sortedElements.get(j));\n        }\n\n        return l;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortThird(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "import java.util.*;\n\npublic class Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        HashSet<Integer> uniqueElements = new HashSet<>(l);  // Add all elements from the list to a HashSet to remove duplicates\n        TreeSet<Integer> sortedUniqueElements = new TreeSet<>(uniqueElements);  // Sort the unique elements\n        return new ArrayList<>(sortedUniqueElements);  // Convert back into an ArrayList for the required output format\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.util.*;\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * \n     * Example usage:\n     * >>> maxElement(Arrays.asList(1, 2, 3))\n     * 3\n     * >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n     * 123\n     */\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        int max = l.get(0); // Assume the first element is the maximum initially\n        for (int num : l) {\n            if (num > max) {\n                max = num; // Update max if a larger number is found\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(maxElement(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "public static int fizzBuzz(int n) {\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count += countSevenDigits(i);\n        }\n    }\n    return count;\n}\n\npublic static int countSevenDigits(int number) {\n    int count = 0;\n    while (number > 0) {\n        if (number % 10 == 7) {\n            count++;\n        }\n        number /= 10;\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "Collections.sort(l); // Sort the entire list\n\n    List<Integer> result = new ArrayList<>();\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 1) { // Check if index is odd\n            result.add(l.get(i));\n        } else { // Index is even, add the sorted value at that index\n            result.add(l.get(i / 2));\n        }\n    }\n\n    return result;\n}\n\npublic static void main(String[] args) {\n    List<Integer> test1 = Arrays.asList(1, 2, 3);\n    System.out.println(sortEven(test1)); // Output: [1, 2, 3]\n\n    List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n    System.out.println(sortEven(test2)); // Output: [3, 6, 5, 4]\n}\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.math.BigInteger;\n\npublic class PrimeFib {\n\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     */\n    public static BigInteger primeFib(int n) {\n        List<BigInteger> primes = new ArrayList<>();\n        primes.add(BigInteger.valueOf(2));\n        BigInteger a = BigInteger.ONE;\n        BigInteger b = BigInteger.ONE;\n\n        while (primes.size() < n) {\n            b = a.add(b);\n            A = B;\n            B = C;\n        }\n\n        return primes.get(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeFib(1)); // prints: 2\n        System.out.println(primeFib(2)); // prints: 3\n        System.out.println(primeFib(3)); // prints: 5\n        System.out.println(primeFib(4)); // prints: 13\n        System.out.println(primeFib(5)); // prints: 89\n    }\n\n    private static boolean isPrime(BigInteger n) {\n        if (n.compareTo(BigInteger.TWO) == 0) return true;\n        if (n.mod(BigInteger.TWO).equals(BigInteger.ZERO)) return false;\n\n        BigInteger i = BigInteger.valueOf(3);\n        while (i.multiply(i).compareTo(n) <= 0) {\n            if (n.mod(i).equals(BigInteger.ZERO)) return false;\n            i = i.add(2);\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        // First, sort the list to make it easier to find triplets with sum zero\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true; // Found a triplet that sums to zero\n                } else if (sum < 0) {\n                    left++; // Need a larger sum, move left pointer to the right\n                } else {\n                    right--; // Need a smaller sum, move right pointer to the left\n                }\n            }\n        }\n\n        return false; // No triplet found that sums to zero\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter the number of cars in each direction: \");\n        int n = sc.nextInt();\n        int totalCollisions = carRaceCollision(n);\n        System.out.println(\"Total collisions will occur: \" + totalCollisions);\n    }\n\n    public static int carRaceCollision(int n) {\n        return n; // Each car in one direction collides with each car in the opposite direction.\n    }\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "public static ArrayList<Integer> incrList(ArrayList<Integer> l) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            } else {\n                seen.add(num);\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(pairsSumToZero(List.of(1, 3, 5, 0))); // Output: false\n        System.out.println(pairsSumToZero(List.of(1, 3, -2, 1))); // Output: false\n        System.out.println(pairsSumToZero(List.of(1, 2, 3, 7))); // Output: false\n        System.out.println(pairsSumToZero(List.of(2, 4, -5, 3, 5, 7))); // Output: true\n        System.out.println(pairsSumToZero(List.of(1))); // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "public class ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     */\n    public static String changeBase(int x, int base) {\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, Integer.toString(x % base));\n            x /= base;\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(changeBase(8, 3));  // Output: '22'\n        System.out.println(changeBase(8, 2));  // Output: '1000'\n        System.out.println(changeBase(7, 2));  // Output: '111'\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Given length of a side and height return area for a triangle.\n     */\n    public static Double triangleArea(int A, int h) {\n        double area = 0.5 * A * h;\n        return area;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5, 3));  // Output: 7.5\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "public static int fib4(int n) {\n    // Base cases\n    if (n == 0 || n == 1 || n == 3) return 0;\n    if (n == 2) return 2;\n\n    // Initialize the first four values of the sequence\n    int a = 0, B = 0, C = 2, D = 0;\n\n    for (int i = 4; i <= n; i++) {\n        // Calculate next value in the sequence\n        int current = A + B + C + D;\n        // Shift values for the next iteration\n        A = B;\n        B = C;\n        C = D;\n        D = current;\n    }\n\n    return D; // The n-th element of the fib4 sequence\n}\n\n// Test the function with provided test cases\npublic static void main(String[] args) {\n    System.out.println(fib4(5)); // Output: 4\n    System.out.println(fib4(6)); // Output: 8\n    System.out.println(fib4(7)); // Output: 14\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n\n        int size = l.size();\n        if (size % 2 == 1) {\n            return l.get(size / 2);\n        } else {\n            double mid1 = l.get(size / 2 - 1);\n            double mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(median(Arrays.asList(3, 1, 2, 4, 5))); // prints: 3\n        System.out.println(median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // prints: 15.0\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "public class IsPalindrome {\n    /**\n     * Checks if the provided string is a palindrome.\n     * A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward.\n     * \n     * >>> isPalindrome(\"\")\n     * True\n     * >>> IsPalindrome(\"aba\")\n     * True\n     * >>> IsPalindrome(\"aaaaa\")\n     * True\n     * >>> IsPalindrome(\"zbcd\")\n     * False\n     */\n    public static Boolean isPalindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n\n    // Test the method with provided data points\n    public static void main(String[] args) {\n        System.out.println(IsPalindrome(\"\")); // Should print: True\n        System.out.println(IsPalindrome(\"aba\")); // Should print: True\n        System.out.println(IsPalindrome(\"aaaaa\")); // Should print: True\n        System.out.println(IsPalindrome(\"zbcd\")); // Should print: False\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "import java.math.BigInteger;\n\npublic class Modp {\n    public static int modp(int n, int p) {\n        // Convert the base 10 number to a BigInteger\n        BigInteger base = new BigInteger(\"2\");\n        // Create a BigInteger representing the power of 'n'\n        BigInteger power = BigInteger.valueOf(n);\n        // Perform the modulo operation\n        BigInteger result = base.modPow(power, BigInteger.valueOf(p));\n        // Convert the result back to an int and return it\n        return result.intValue();\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        System.out.println(modp(3, 5));   // Output: 3\n        System.out.println(modp(1101, 101));  // Output: 2\n        System.out.println(modp(0, 101));    // Output: 1\n        System.out.println(modp(3, 11));     // Output: 8\n        System.out.println(modp(100, 101));   // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "class RemoveVowels {\n    public static String removeVowels(String text) {\n        // Define a pattern to match all vowels (both lowercase and uppercase)\n        Pattern vowelPattern = Pattern.compile(\"[aeiouAEIOU]\");\n\n        // Use the matcher method from the Pattern class to find matches in the input text\n        Matcher matcher = vowelPattern.matcher(text);\n\n        // Replace all found vowels with an empty string\n        String result = matcher.replaceAll(\"\");\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // prints: true\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5)); // prints: false\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "public class Add {\n    /**\n     * Add two numbers x and y\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n    \n    // Example usage:\n    public static void main(String[] args) {\n        System.out.println(add(2, 3)); // Outputs: 5\n        System.out.println(add(5, 7)); // Outputs: 12\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "This code snippet defines a Java class `SameChars` with a method `sameChars()` that checks if two given strings have the same characters. The method takes two string parameters, `s0` and `s1`, and returns a boolean value indicating whether they contain the same characters or not. \n\nThe logic of this method is as follows:\n\n1. It first converts both strings to character arrays using the `toCharArray()` method.\n2. Then it sorts these character arrays in ascending order using the `Arrays.sort()` method from the `java.util` package.\n3. After sorting, it compares the sorted character arrays using the `equals()` method. If they are equal, it means that both strings contain exactly the same characters, so the method returns `true`. Otherwise, it returns `false`.\n\nHere is a brief example of how this method works:\n\n- When comparing 'eabcdzzzz' with 'dddzzzzzzzddeddabc', since both strings contain the exact same characters sorted in ascending order, the method will return `true`.\n- Comparing 'abcd' with 'dddddddabc', it also returns `true` because these two strings have exactly the same characters."}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "public static int fibRecursive(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be a positive integer.\");\n    } else if (n == 1 || n == 2) {\n        return 1;\n    } else {\n        return fibRecursive(n - 1) + fibRecursive(n - 2);\n    }\n}\n\n// Example usage:\npublic static void main(String[] args) {\n    System.out.println(fibRecursive(10)); // Output: 55\n    System.out.println(fibRecursive(1));  // Output: 1\n    System.out.println(fibRecursive(8));  // Output: 21\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "public static boolean correctBracketing(String brackets) {\n    int balance = 0; // counter for the number of unpaired brackets\n    for (char ch : brackets.toCharArray()) {\n        if (ch == '<') {\n            balance++; // increment for every opening bracket\n        } else if (ch == '>') {\n            balance--; // decrement for every closing bracket\n            if (balance < 0) {\n                // if balance is negative, there's a closing bracket without an opening one before it.\n                return false;\n            }\n        }\n    }\n    // If balance is zero, all brackets are correctly paired.\n    return balance == 0;\n}\n\n// Test cases:\npublic static void main(String[] args) {\n    System.out.println(correctBracketing(\"<\")); // false\n    System.out.println(correctBracketing(\"<>\")); // true\n    System.out.println(correctBracketing(\"<<><>>\")); // true\n    System.out.println(correctBracketing(\"><<>\")); // false\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "public static Boolean monotonic(List<Integer> l) {\n    // Check for empty list\n    if (l.size() <= 1) return true;\n\n    boolean increasing = true;\n    boolean decreasing = true;\n\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l.get(i) > l.get(i + 1)) {\n            increasing = false;\n        } else if (l.get(i) < l.get(i + 1)) {\n            decreasing = false;\n        }\n    }\n\n    // If list is either increasing or decreasing, return true\n    return increasing || decreasing;\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Common {\n\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Object> set2 = new HashSet<>();\n        for (Object obj : l2) {\n            if (obj instanceof Integer) {\n                set2.add((Integer) obj);\n            }\n        }\n\n        set1.retainAll(set2); // Retain only the common elements\n\n        List<Object> result = new ArrayList<>(set1); // Convert set to list\n        Collections.sort(result); // Sort the list in ascending order\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121)));\n        System.out.println(common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2)));\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "import java.lang.*; // Importing the Java language package\n\npublic class LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     */\n\n    public static int largestPrimeFactor(int n) {\n        int maxPrime = -1; // Initialize the maximum prime factor to -1\n\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1; // Equivalent to n /= 2, but faster for integers\n        }\n\n        // n must be odd at this point. So we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n >>= 1; // Equivalent to n /= i\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2)\n            maxPrime = n;\n\n        return maxPrime; // Return the largest prime factor found\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Largest Prime Factor of 13195 is: \" + largestPrimeFactor(13195)); // Output: 29\n        System.out.println(\"Largest Prime Factor of 2048 is: \" + largestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "// The function sumToN takes an integer n as input and returns the sum of all numbers from 1 to n.\n\n    public static int sumToN(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        } else {\n            return n + sumToN(n - 1);\n        }\n    }\n\n// The base case for the recursion is when n is either 0 or 1. In these cases, the function simply returns the value of n itself.\n\n// When n is greater than 1, the function calls itself with the argument (n - 1), effectively reducing the problem size by one each time until it reaches the base case."}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "import java.util.*;\n\nclass CorrectBracketing {\n    public static Boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"(\")); // False\n        System.out.println(correctBracketing(\"()\")); // True\n        System.out.println(correctBracketing(\"(()())\")); // True\n        System.out.println(correctBracketing(\")(()\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "public static List<Object> derivative(List<Integer> xs) {\n        List<Object> derivative = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        return derivative;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(derivative(List.of(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(derivative(List.of(1, 2, 3)));      // Output: [2, 6]\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "import java.util.HashMap;\n\npublic class Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence using dynamic programming.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     */\n\n    private static HashMap<Integer, Integer> memo = new HashMap<>();\n\n    public static int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Check if the result is already computed\n        if (memo.containsKey(n)) return memo.get(n);\n\n        int result = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        memo.put(n, result); // Store the computed result in the map\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "import java.util.*;\n\nclass VowelsCount {\n    public static int vowelsCount(String s) {\n        int count = 0;\n        // Convert the string to lower case to make the search case insensitive\n        s = s.toLowerCase();\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } \n            // Check if the character is 'y' and it's at the end of the string\n            else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "public static String circularShift(int x, int shift) {\n    String numStr = Integer.toString(x);\n    int length = numStr.length();\n    // Calculate effective shift to handle cases where shift > number of digits\n    int effectiveShift = shift % length;\n\n    if (effectiveShift == 0) {\n        return numStr; // No circular shift needed, return original number as string\n    } else {\n        String shiftedPart = numStr.substring(length - effectiveShift);\n        String remainingPart = numStr.substring(0, length - effectiveShift);\n\n        // Concatenate the two parts in reversed order to perform circular shift\n        return shiftedPart + remainingPart;\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(digitsum(\"\")); // Output: 0\n        System.out.println(digitsum(\"abAB\")); // Output: 131\n        System.out.println(digitsum(\"abcCd\")); // Output: 67\n        System.out.println(digitsum(\"helloE\")); // Output: 69\n        System.out.println(digitsum(\"woArBld\")); // Output: 131\n        System.out.println(digitsum(\"aAaaaXA\")); // Output: 153\n    }\n\n    public static int digitsum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "import java.util.regex.*;\n\nclass FruitDistribution {\n    public static int fruitDistribution(String s, int n) {\n        Pattern pattern = Pattern.compile(\"(\\\\d+) apples and (\\\\d+) oranges\");\n        Matcher matcher = pattern.matcher(s);\n        if (!matcher.find()) {\n            throw new IllegalArgumentException(\"Invalid input string.\");\n        }\n\n        int apples = Integer.parseInt(matcher.group(1));\n        int oranges = Integer.parseInt(matcher.group(2));\n\n        return n - (apples + oranges);\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "public static List<Object> pluck(List<Object> arr) {\n    int smallestEven = Integer.MAX_VALUE;\n    int index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr.get(i) instanceof Integer && (Integer) arr.get(i) <= smallestEven) {\n            smallestEven = (Integer) arr.get(i);\n            index = i;\n        }\n    }\n    if (smallestEven == Integer.MAX_VALUE) {\n        return new ArrayList<>();\n    } else {\n        List<Object> result = new ArrayList<>();\n        result.add(smallestEven);\n        result.add(index);\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n\n        // Count the frequency of each unique integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Iterate through the map in reverse order (from greatest to least)\n        List<Map.Entry<Integer, Integer>> entries = new ArrayList<>(frequencyMap.entrySet());\n        entries.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey()));\n\n        for (Map.Entry<Integer, Integer> entry : entries) {\n            int key = entry.getKey();\n            int value = entry.getValue();\n\n            // Check if the current key satisfies the condition\n            if (key > 0 && value >= key) {\n                return key; // Return the greatest integer that satisfies the condition\n            }\n        }\n\n        // If no such integer exists, return -1\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\npublic class StrangeSortList {\n    public static List<Object> strangeSortList(List<Object> lst) {\n        // Convert list to array for easy handling\n        Integer[] arr = lst.toArray(new Integer[0]);\n        Arrays.sort(arr); // Sort the array in ascending order\n\n        List<Object> result = new ArrayList<>();\n        int i = 0, j = arr.length - 1;\n        while (i <= j) {\n            if (i == j) {\n                result.add(arr[i]); // If there is only one element left, add it to the result list\n            } else {\n                result.add(arr[i]);\n                result.add(arr[j]);\n            }\n            i++;\n            j--;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(strangeSortList(list1)); // Output: [1, 4, 2, 3]\n\n        List<Object> list2 = Arrays.asList(5, 5, 5, 5);\n        System.out.println(strangeSortList(list2)); // Output: [5, 5, 5, 5]\n\n        List<Object> list3 = new ArrayList<>();\n        System.out.println(strangeSortList(list3)); // Output: []\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "class TriangleArea {\n    public static double triangleArea(int A, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (A + b <= c || A + c <= b || b + c <= A) {\n            return -1; // Return -1 if the triangle is not valid\n        } else {\n            double s = (A + b + c) / 2.0; // Calculate semi-perimeter of the triangle\n            double area = Math.sqrt(s * (s - A) * (s - b) * (s - c)); // Compute the area using Heron's formula\n            return Math.round(area * 100.0) / 100.0; // Round to 2 decimal places\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // Output: 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n    /**\n    * Checks if an object can fly based on its balance and weight.\n    */\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is balanced\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false; // Not a palindromic list, so it cannot fly\n            }\n        }\n\n        // Check if the total weight is less than or equal to the maximum possible weight\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        if (sum <= w) {\n            return true; // The object can fly\n        } else {\n            return false; // The object cannot fly, because its total weight is too large\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.util.*;\n\nclass SmallestChange {\n    public static int smallestChange(List<Integer> arr) {\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(smallestChange(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(smallestChange(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.util.*;\n\nclass TotalMatch {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int sumLst1 = 0;\n        int sumLst2 = 0;\n\n        for (String s : lst1) {\n            sumLst1 += s.length();\n        }\n\n        for (String s : lst2) {\n            sumLst2 += s.length();\n        }\n\n        if (sumLst1 < sumLst2) {\n            return lst1;\n        } else if (sumLst1 > sumLst2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(\"hi\", \"admin\");\n        List<Object> list2 = Arrays.asList(\"hI\", \"Hi\");\n        System.out.println(totalMatch(list1, list2));\n\n        List<Object> list3 = Arrays.asList(\"hi\", \"admin\");\n        List<Object> list4 = Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\");\n        System.out.println(totalMatch(list3, list4));\n\n        List<Object> list5 = Arrays.asList(\"hI\", \"hi\", \"hi\");\n        List<Object> list6 = Arrays.asList(\"hi\", \"admin\");\n        System.out.println(totalMatch(list5, list6));\n\n        List<Object> list7 = Arrays.asList(\"4\");\n        List<Object> list8 = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\");\n        System.out.println(totalMatch(list7, list8));\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "public static Boolean isMultiplyPrime(int A) {\n    if (A < 2) {\n        return false; // Numbers less than 2 cannot be prime\n    }\n    \n    List<Integer> primes = new ArrayList<>();\n    for (int i = 2; i <= Math.sqrt(A); i++) {\n        if (isPrime(i)) {\n            primes.add(i);\n        }\n    }\n    \n    for (int i = 0; i < primes.size(); i++) {\n        for (int j = i + 1; j < primes.size(); j++) {\n            for (int k = j + 1; k < primes.size(); k++) {\n                if (primes.get(i) * primes.get(j) * primes.get(k) == A) {\n                    return true;\n                } else if (primes.get(i) * primes.get(j) * primes.get(k) > A) {\n                    break; // No need to continue if the product is greater than A\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n\nprivate static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    \n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "public class IsSimplePower {\n    public static Boolean isSimplePower(int x, int n) {\n        if (x == 1) {\n            return n == 1; // Special case where x can only be power of n if n is also 1\n        }\n\n        int exponent = 0;\n        while (Math.pow(n, exponent) <= x) {\n            if ((int) Math.pow(n, exponent) == x) {\n                return true;\n            }\n            exponent++;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases to check if the function works as expected\n        System.out.println(isSimplePower(1, 4)); // true\n        System.out.println(isSimplePower(2, 2)); // true\n        System.out.println(isSimplePower(8, 2)); // true\n        System.out.println(isSimplePower(3, 2)); // false\n        System.out.println(isSimplePower(3, 1)); // false\n        System.out.println(isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "import java.lang.Math;\n\nclass Iscube {\n    /**\n     * Write a function that takes an integer a and returns True if this\n     * integer is a cube of some integer number.\n     * Note: You may assume the input is always valid.\n     */\n    public static Boolean iscube(int A) {\n        // Calculate the cube root of the absolute value of 'A' and round it to the nearest whole number\n        double cubeRoot = Math.round(Math.pow(Math.abs(A), 1.0 / 3.0));\n\n        // Check if the cube of the rounded cube root equals the absolute value of 'A'\n        return Math.pow(cubeRoot, 3) == Math.abs(A);\n    }\n\n    public static void main(String[] args) {\n        // Test cases to verify the correctness of the function\n        System.out.println(iscube(1));   // True\n        System.out.println(iscube(2));   // False\n        System.out.println(iscube(-1));  // True\n        System.out.println(iscube(64));  // True\n        System.out.println(iscube(0));   // True\n        System.out.println(iscube(180)); // False\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "import java.util.*;\n\nclass HexKey {\n    public static int hexKey(String num) {\n        // Define a HashSet containing prime hexadecimal digits\n        HashSet<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        int count = 0; // Counter for prime digits\n\n        // Iterate through each character in the input string\n        for (char digit : num.toCharArray()) {\n            // If the digit is a prime, increment the counter\n            if (primes.contains(digit)) {\n                count++;\n            }\n        }\n\n        return count; // Return the final count of prime digits\n    }\n\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); // Output: 1\n        System.out.println(hexKey(\"1077E\")); // Output: 2\n        System.out.println(hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n    StringBuilder binary = new StringBuilder();\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary.insert(0, Integer.toString(remainder));\n        decimal /= 2;\n    }\n    return \"db\" + binary.toString() + \"db\";\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "// Check if the string length is less than 3, return false immediately.\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Loop through the string starting from index 0 to length - 2.\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Get the first character at position 'i'.\n            char firstChar = s.charAt(i);\n\n            // Check if the next two characters are the same as the first character, return false.\n            if (s.charAt(i + 1) == FirstChar || s.charAt(i + 2) == FirstChar) {\n                return false;\n            }\n        }\n\n        // If no three consecutive letters are the same, return true.\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "import java.util.*;\n\nclass NumericalLetterGrade {\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Number gpa : grades) {\n            if (gpa.doubleValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else If (gpa.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else If (gpa.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else If (gpa.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else If (gpa.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else If (gpa.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else If (gpa.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else If (gpa.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else If (gpa.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else If (gpa.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(numericalLetterGrade(grades));\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "import java.util.*;\n\nclass PrimeLength {\n    public static boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private static boolean IsPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\")); // true\n        System.out.println(primeLength(\"abcdcba\")); // true\n        System.out.println(primeLength(\"kittens\")); // true\n        System.out.println(primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 2; // There are only two numbers that are both 1-digit and start or end with 1: 1 and 11.\n        } else {\n            // For n > 1, the number of numbers that start or end with 1 is\n            // 18 * (10^(n-2)) because there are 10^(n-2) numbers with n digits that start or end with any digit from 0 to 9,\n            // and each such number can have either its first or last digit be 1.\n            return 18 * (int)Math.pow(10, n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(startsOneEnds(n));\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "* Solution using basic arithmetic and conversion techniques to convert the integer sum into its binary representation.\n     */\n        \n        // Initialize a variable for the sum of digits\n        int sum = 0;\n        \n        // Calculate the sum of digits\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        \n        // Convert the sum to binary and return it as a string\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(solve(1000));  // Output: \"1\"\n        System.out.println(solve(150));   // Output: \"110\"\n        System.out.println(solve(147));   // Output: \"1100\"\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "import java.util.*;\n\nclass Add {\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // start from index 1 (the second element), increment by 2\n            if (lst.get(i) % 2 == 0) { // check if the element at the current odd index is even\n                sum += lst.get(i); // add it to the sum\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(Arrays.asList(4, 2, 6, 7))); // output: 2\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "import java.util.Arrays;\n\nclass AntiShuffle {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * for example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     */\n    public static String antiShuffle(String s) {\n        // Split the string into words based on spaces\n        String[] words = s.split(\" \");\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            words[i] = new String(chars);\n        }\n\n        return String.join(\" \", words);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(antiShuffle(\"Hi\")); // Output: 'Hi'\n        System.out.println(antiShuffle(\"hello\")); // Output: 'ehllo'\n        System.out.println(antiShuffle(\"Hello World!!!\")); // Output: 'Hello !!!Wdlor'\n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    public static List<List<Integer>> getRow(List<Object> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                int rowCompare = Integer.compare(o1.get(0), o2.get(0));\n                if (rowCompare != 0) {\n                    return rowCompare;\n                } else {\n                    return Integer.compare(o2.get(1), o1.get(1)); // Note: reverse order for columns\n                }\n            }\n        });\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = Arrays.asList(Arrays.asList(1, 2, 3, 4, 5, 6), Arrays.asList(1, 2, 3, 4, 1, 6), Arrays.asList(1, 2, 3, 4, 5, 1));\n        int x = 1;\n        System.out.println(getRow(lst, x)); // Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        lst = new ArrayList<>();\n        x = 1;\n        System.out.println(getRow(lst, x)); // Output: []\n\n        lst = Arrays.asList(new ArrayList<>(), Arrays.asList(1), Arrays.asList(1, 2, 3));\n        x = 3;\n        System.out.println(getRow(lst, x)); // Output: [[2, 2]]\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.util.*;\n\nclass SortArray {\n    public static List<Object> sortArray(List<Object> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> intArray = new ArrayList<>();\n        for (Object obj : array) {\n            intArray.add((int) obj);\n        }\n\n        Collections.sort(intArray);\n\n        if ((int) intArray.get(0) + (int) intArray.get(intArray.size() - 1) % 2 == 0) {\n            Collections.reverse(intArray);\n        }\n\n        List<Object> sortedArray = new ArrayList<>();\n        for (Integer num : intArray) {\n            sortedArray.add((long) num);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList()))); // []\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList(5)))); // [5]\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5)))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6)))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "import java.lang.*;\n\nclass Encrypt {\n    public static String encrypt(String s) {\n        // Define a string containing all lowercase letters in order\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        \n        // Initialize an empty StringBuilder to store the encrypted result\n        StringBuilder encryptedString = new StringBuilder();\n\n        // Iterate through each character of the input string s\n        for (char c : s.toCharArray()) {\n            // Find the index of the character in the alphabet string\n            int originalIndex = alphabet.indexOf(c);\n\n            // Calculate the new index after shifting by 2 places, considering wrapping around the alphabet\n            int newIndex = (originalIndex + (2 * 2)) % 26; // Multiplying by 2 and taking modulus of 26 for wrap-around\n\n            // Append the encrypted character to the result string\n            encryptedString.append(alphabet.charAt(newIndex));\n        }\n\n        // Return the final encrypted string\n        return encryptedString.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "if (lst == null || lst.size() < 2) {\n            return null; // If list is empty or contains only one element, return null\n        }\n\n        Set<Integer> set = new TreeSet<>(); // Using TreeSet to automatically sort the elements and remove duplicates\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                set.add((Integer) obj);\n            }\n        }\n\n        if (set.size() < 2) {\n            return null; // If there are less than two unique integers, return null\n        }\n\n        Iterator<Integer> iterator = set.iterator();\n        iterator.next(); // Skip the first smallest element\n        return iterator.next(); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Output: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Output: 2\n        System.out.println(nextSmallest(new ArrayList<>())); // Output: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "import java.util.*;\n\nclass IsBored {\n    public static int IsBored(String s) {\n        // Split the input string into sentences using '.', '?' or '!' as delimiters\n        String[] sentences = s.split(\"[.?!]\");\n\n        int boredomCount = 0;\n\n        // Loop through each sentence and increment the boredom count if it starts with \"I\"\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "public static Boolean anyInt(Number x, Number y, Number z) {\n    // Check if all numbers are integers\n    if ((x instanceof Integer) && (y instanceof Integer) && (z instanceof Integer)) {\n        int a = x.intValue();\n        int B = y.intValue();\n        int C = z.intValue();\n\n        // Check if one of the numbers is equal to the sum of the other two\n        if ((A + B == C) || (A + C == B) || (B + C == A)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "public static String encode(String message) {\n    final Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U'));\n    final String alphabetLowerCase = \"abcdefghijklmnopqrstuvwxyz\";\n    final String alphabetUpperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    StringBuilder encodedMessage = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLetter(c)) {\n            if (vowels.contains(c)) {\n                int index = alphabetLowerCase.indexOf(Character.toLowerCase(c));\n                index = (index + 2) % 26; // Find the letter that appears 2 places ahead\n                char newChar = Character.isUpperCase(c) ? alphabetUpperCase.charAt(index) : alphabetLowerCase.charAt(index);\n                encodedMessage.append(newChar);\n            } else {\n                // Swap the case of non-vowel letters\n                encodedMessage.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            }\n        } else {\n            // If it's not a letter, just append the character as it is\n            encodedMessage.append(c);\n        }\n    }\n\n    return encodedMessage.toString();\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.util.*;\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * for lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], the output should be 10.\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], the output should be 25.\n     * for lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], the output should be 13.\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], the output should be 11.\n     * for lst = [0,81,12,3,1,21], the output should be 3.\n     * For lst = [0,8,1,2,1,7], the output should be 7.\n\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                largestPrime = Math.max(largestPrime, num);\n            }\n        }\n\n        return sumOfDigits(largestPrime);\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    private static int sumOfDigits(int number) {\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.util.*; // Import the necessary package to use Maps\n\npublic class CheckDictCase {\n    /**\n     * Given a dictionary (Map object), return true if all keys are strings in lower case or all keys are strings in upper case, else return false.\n     * The function should return false is the given map is empty.\n     */\n    public static Boolean checkDictCase(Object dict) {\n        // Check if the input is null or not a Map object\n        if (dict == null || !(dict instanceof Map)) {\n            return false;\n        }\n\n        Map<?, ?> map = (Map<?, ?>) dict; // Cast the Object to Map \n        boolean allLowerCase = true;\n        boolean AllUpperCase = true;\n\n        // Loop through each key in the map\n        for (Object key : map.keySet()) {\n            // Check if the current key is not a String object\n            if (!(key instanceof String)) {\n                return false; // If it's not a string, return false immediately\n            }\n\n            String strKey = (String) key; \n            AllLowerCase &= strKey.equals(strKey.toLowerCase()); // Check if the key is in lower case\n            AllUpperCase &= strKey.equals(strKey.toUpperCase()); // Check if the key is in upper case\n\n            // If both checks are false, we can return false immediately as it's not a valid dictionary\n            if (!AllLowerCase && !AllUpperCase) {\n                return false;\n            }\n        }\n\n        // If it goes through all keys without returning false, it means the dictionary is either entirely in lower case or upper case. \n        // It returns true to indicate that the check passed.\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkDictCase(Map.of(\"A\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(checkDictCase(Map.of(\"A\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(checkDictCase(Map.of(\"A\", \"apple\", 8, \"banana\", \"A\", \"apple\"))); // False\n        System.out.println(checkDictCase(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(checkDictCase(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\" ))); // True\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.*;\n\nclass CountUpTo {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countUpTo(5));  // Output: [2, 3]\n        System.out.println(countUpTo(11)); // Output: [2, 3, 5, 7]\n        System.out.println(countUpTo(0));  // Output: []\n        System.out.println(countUpTo(20)); // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(countUpTo(1));  // Output: []\n        System.out.println(countUpTo(18)); // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * The product of their unit digits.\n     * Assume the input is always valid.\n     */\n    public static int multiply(int A, int b) {\n        // Get the unit digit from each number by taking modulus with 10.\n        int aUnitDigit = Math.abs(A % 10);\n        int BUnitDigit = Math.abs(b % 10);\n\n        return AUnitDigit * BUnitDigit; // Return their product.\n    }\n\n    public static void main(String[] args) {\n        // Test cases to check the function\n        System.out.println(multiply(148, 412));  // Output: 16\n        System.out.println(multiply(19, 28));   // Output: 72\n        System.out.println(multiply(2020, 1851)); // Output: 0\n        System.out.println(multiply(14, -15));  // Output: 20\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "public static int countUpper(String s) {\n    // Define an array to store all uppercase vowels\n    char[] uppercaseVowels = {'A', 'E', 'I', 'O', 'U'};\n    int count = 0;\n\n    // Iterate through the string, checking characters at even indices\n    for (int i = 0; i < s.length(); i += 2) {\n        char currentChar = s.charAt(i);\n        // Check if the character is an uppercase vowel\n        if (Arrays.binarySearch(uppercaseVowels, currentChar) >= 0) {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "import java.math.*;\n\npublic class ClosestInteger {\n    public static int closestInteger(String value) {\n        BigDecimal number = new BigDecimal(value);\n        BigDecimal floorValue = new BigDecimal(number.toBigInteger());\n        BigDecimal ceilValue = new BigDecimal(number.toBigInteger().add(BigInteger.ONE));\n\n        // Check if the number is exactly halfway between two integers\n        if (number.subtract(floorValue).compareTo(ceilValue.subtract(number)) == 0) {\n            return number.signum() > 0 ? ceilValue.intValue() : floorValue.intValue();\n        } else {\n            return number.setScale(0, RoundingMode.HALF_UP).intValue();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));  // Output: 10\n        System.out.println(closestInteger(\"15.3\")); // Output: 15\n        System.out.println(closestInteger(\"14.5\")); // Output: 15 (rounds away from zero)\n        System.out.println(closestInteger(\"-14.5\"));// Output: -15 (rounds away from zero)\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "List<Integer> pile = new ArrayList<>();\n        int currentNumber = n;\n\n        for (int i = 0; i < n; i++) {\n            pile.add(currentNumber);\n            // If the current number is even, add 2 for the next even number\n            if (currentNumber % 2 == 0) {\n                currentNumber += 2;\n            } else { // If the current number is odd, add 2 for the next odd number\n                currentNumber += 2;\n            }\n        }\n\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> result = makeAPile(3);\n        System.out.println(result);  // Output: [3, 5, 7]\n    }"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.util.*;\n\nclass WordsString {\n    /**\n     * Splits a string of words separated by commas or spaces into an array of words.\n     * \n     * @param s The input string to split.\n     * @return An ArrayList containing the individual words.\n     */\n    public static List<Object> wordsString(String s) {\n        // Replace commas with spaces to unify separators\n        s = s.replaceAll(\",\", \" \");\n\n        // Split the string into an array of words using whitespace as a delimiter\n        String[] wordsArray = s.split(\"\\\\s+\");\n\n        // Convert the array of words into an ArrayList and return it\n        List<Object> wordsList = new ArrayList<>(Arrays.asList(wordsArray));\n        return wordsList;\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "if (x > y) {\n            return -1;\n        }\n\n        // If y is even, return it\n        if (y % 2 == 0) {\n            return y;\n        }\n\n        // If the second number is odd and one less than the first, subtract 1 to get an even number\n        if (y - x == 1) {\n            return -1;\n        }\n\n        // Otherwise, return the second number minus one, which will be the largest even number in the range\n        return y - 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(chooseNum(12, 15)); // Should print 14\n        System.out.println(chooseNum(13, 12)); // Should print -1\n    }\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "if (n > m) {\n        return -1;\n    } else {\n        double sum = 0.0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = Math.round(sum / (m - n + 1));\n        return \"0b\" + Integer.toBinaryString((int)avg);\n    }\n}\n\nThe roundedAvg function first checks if n is greater than m, returning -1 if it is. If not, it calculates the average of the integers from n to m by adding each number in the range to a sum and dividing by the total count (m-n+1). It then rounds the average to the nearest integer using Math.round() and converts that to binary using Integer.toBinaryString(). The \"0b\" prefix is added to indicate that the result is in binary format."}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "public static void main(String[] args) {\n    List<Integer> input1 = Arrays.asList(15, 33, 1422, 1);\n    System.out.println(uniqueDigits(input1));  // Output: [1, 15, 33]\n\n    List<Integer> input2 = Arrays.asList(152, 323, 1422, 10);\n    System.out.println(uniqueDigits(input2));  // Output: []\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass ByLength {\n  public static List<Object> byLength(List<Object> arr) {\n    List<Integer> sorted = new ArrayList<>();\n    for (Object o : arr) {\n      if (o instanceof Integer && (int) o >= 1 && (int) o <= 9) {\n        sorted.add((int) o);\n      }\n    }\n    Collections.sort(sorted);\n    Collections.reverse(sorted);\n\n    List<Object> result = new ArrayList<>();\n    for (int n : sorted) {\n      result.add(getNumberName(n));\n    }\n\n    return result;\n  }\n\n  private static String getNumberName(int number) {\n    String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    return names[number - 1];\n  }\n\n  public static void main(String[] args) {\n    List<Object> arr = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n    System.out.println(byLength(arr)); // Output: [Eight, Five, Four, Three, Two, Two, One, One]\n\n    List<Object> emptyArr = new ArrayList<>();\n    System.out.println(byLength(emptyArr)); // Output: []\n\n    List<Object> strangeArr = Arrays.asList(1, -1, 55);\n    System.out.println(byLength(strangeArr)); // Output: [One]\n  }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) { // If the index is even, calculate factorial\n                result.add(factorial(i));\n            } else { // If the index is odd, calculate sum of numbers from 1 to i\n                result.add(sumOfNumbersToI(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int number) {\n        if (number == 0 || number == 1) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    private static int sumOfNumbersToI(int number) {\n        return (number * (number + 1)) / 2; // Using the formula for the sum of the first n natural numbers\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenOddPalindrome {\n\n    // Function to check if a number is palindrome or not\n    private static boolean isPalindrome(int x) {\n        if (x < 0) return false;\n        String s = Integer.toString(x);\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "public static int countNums(List<Object> arr) {\n        int count = 0;\n        for (Object num : arr) {\n            if (num instanceof Integer) {\n                int n = (Integer) num;\n                if (sumDigits(n) > 0) {\n                    count++;\n                }\n            } else if (num instanceof List<?>) {\n                List<?> list = (List<?>) num;\n                for (Object obj : list) {\n                    if (obj instanceof Integer) {\n                        int n = (Integer) obj;\n                        if (sumDigits(n) > 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    private static int sumDigits(int n) {\n        int sum = 0;\n        boolean isNegative = false;\n        if (n < 0) {\n            IsNegative = true;\n            n = -n; // Make the number positive to simplify digit extraction\n        }\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit;\n            n /= 10;\n        }\n        if (IsNegative) {\n            // Subtract twice the first signed digit from sum to adjust for the initial addition\n            digit = -digit; // Make digit negative again\n            sum -= 2 * digit;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> test1 = new ArrayList<>();\n        System.out.println(countNums(test1)); // Should output: 0\n\n        List<Object> test2 = Arrays.asList(-1, 11, -11);\n        System.out.println(countNums(test2)); // Should output: 1\n\n        List<Object> test3 = Arrays.asList(1, 1, 2);\n        System.out.println(countNums(test3)); // Should output: 3\n\n        List<Object> test4 = Arrays.asList(Arrays.asList(-111, 999), -222);\n        System.out.println(countNums(test4)); // Should output: 3\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass MoveOneBall {\n    public static Boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        // Convert the list to an array and sort it\n        Integer[] sortedArr = new Integer[arr.size()];\n        arr.toArray(sortedArr);\n        Arrays.sort(sortedArr);\n\n        // Find the index of the first element in the original array\n        int startIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (!arr.get(i).equals(sortedArr[i])) {\n                startIndex = i;\n                break;\n            }\n        }\n\n        // Check if it is possible to sort the array by performing right shifts\n        for (int i = 0; i < arr.size(); i++) {\n            if (!arr.get((i + startIndex) % arr.size()).equals(sortedArr[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // Output: True\n        System.out.println(moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // Output: False\n    }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Check if all elements in lst1 are even\n        boolean allEven = true;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                AllEven = false;\n                break;\n            }\n        }\n\n        // If all elements in lst1 are already even, return \"YES\"\n        if (AllEven) {\n            return \"YES\";\n        }\n\n        // Count the number of odd numbers in lst2\n        int numOdd = 0;\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                numOdd++;\n            }\n        }\n\n        // If there are no odd numbers in lst2, return \"NO\"\n        if (numOdd == 0) {\n            return \"NO\";\n        }\n\n        // Check if it is possible to exchange enough odd numbers from lst2 to make all elements of lst1 even\n        int numNeeded = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                numNeeded++;\n            }\n        }\n\n        return (numOdd >= numNeeded) ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Histogram {\n    public static Map<String, Long> histogram(String test) {\n        Map<String, Long> result = Arrays.stream(test.split(\" \"))\n                                         .collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n        long maxCount = result.values().stream().max(Long::compare).orElse(0L);\n        return result.entrySet()\n                       .stream()\n                       .filter(e -> e.getValue() == maxCount)\n                       .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(histogram(\"a b c\")); // {'A': 1, 'b': 1, 'c': 1}\n        System.out.println(histogram(\"A b b A\")); // {'A': 2, 'b': 2}\n        System.out.println(histogram(\"A b c A b\")); // {'A': 2, 'b': 2}\n        System.out.println(histogram(\"B B B B A\")); // {'B': 4}\n        System.out.println(histogram(\"\")); // {}\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * for s = \"abcde\", c = \"ae\", the result should be ['bcd', false]\n     * For s = \"abcdef\", c = \"b\",  the result should be ['acdef', false]\n     * for s = \"abcdedcba\", c = \"ab\", the result should be ['cdedc', true]\n     * \n     */\n    public static List<Object> reverseDelete(String s, String c) {\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        String reversedResult = result.reverse().toString();\n        boolean isPalindrome = result.toString().equals(reversedResult);\n\n        return Arrays.asList(result.toString(), isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // [\"bcd\", false]\n        System.out.println(reverseDelete(\"abcdef\", \"b\"));  // [\"acdef\", false]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // [\"cdedc\", true]\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.util.*;\n\nclass OddCount {\n    public static List<String> oddCount(List<String> lst) {\n        // Create an empty list to store the result\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            long count = 0;  // Use long type to handle large numbers\n            \n            // Count the number of odd digits in the string\n            for (char c : str.toCharArray()) {\n                if ((c - '0') % 2 != 0) {  // Check if the digit is odd\n                    count++;\n                }\n            }\n\n            // Replace all the i's in the output string with the number of odd digits\n            String output = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(output);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> input1 = new ArrayList<>();\n        input1.add(\"1234567\");\n        System.out.println(oddCount(input1));  // Output: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\n        List<String> input2 = new ArrayList<>();\n        input2.add(\"3\");\n        input2.add(\"11111111\");\n        System.out.println(oddCount(input2));  // Output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "import java.util.*;\n\nclass Minsubarraysum {\n    public static long minSubArraySum(List<Integer> nums) {\n        long minSum = Integer.MAX_VALUE;\n        long currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            if (minSum > currentSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "int maxFill = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int wellWaterUnits = 0;\n        for (int j = 0; j < grid.get(i).size(); j++) {\n            wellWaterUnits += grid.get(i).get(j);\n        }\n        maxFill += (int) Math.ceil((double) wellWaterUnits / capacity);\n    }\n    return maxFill;\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.util.*;\n\nclass SortArray {\n    public static List<Object> sortArray(List<Object> arr) {\n        Collections.sort(arr, new Comparator<Object>() {\n            @Override\n            public int compare(Object a, Object b) {\n                // Convert inputs to integers for comparison\n                int numA = Integer.parseInt(a.toString());\n                int numB = Integer.parseInt(b.toString());\n\n                // Count the number of ones in binary representation for each number\n                long bitCountA = Long.bitCount((numA & -numA));\n                long bitCountB = Long.bitCount((numB & -numB));\n\n                // If both numbers have the same number of ones, sort by decimal value\n                if (bitCountA == bitCountB) {\n                    return Integer.compare(numA, numB);\n                } else {\n                    // Otherwise, sort by the count of ones\n                    return Long.compare(bitCountA, bitCountB);\n                }\n            }\n        });\n\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        List<Object> test1 = Arrays.asList(1, 5, 2, 3, 4);\n        List<Object> sortedTest1 = sortArray(test1);\n        System.out.println(sortedTest1); // Output: [1, 2, 3, 4, 5]\n\n        List<Object> test2 = Arrays.asList(-2, -3, -4, -5, -6);\n        List<Object> sortedTest2 = sortArray(test2);\n        System.out.println(sortedTest2); // Output: [-6, -5, -4, -3, -2]\n\n        List<Object> test3 = Arrays.asList(1, 0, 2, 3, 4);\n        List<Object> sortedTest3 = sortArray(test3);\n        System.out.println(sortedTest3); // Output: [0, 1, 2, 3, 4]\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.*;\n\nclass SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        // Check if string is empty or null\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>(); // Return an empty list\n        }\n        \n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\"); // Split the string into words\n\n        for (String word : words) {\n            // Count consonants in the current word\n            long count = word.chars().filter(c -> \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1).count();\n\n            // If the number of consonants equals to n, add it to result list\n            if (count == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "import java.util.*;\n\nclass GetClosestVowel {\n    private static final Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U'));\n    \n    public static String getClosestVowel(String word) {\n        if (word == null || word.length() <= 2) return \"\";\n\n        for (int i = word.length() - 3; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char prevChar = word.charAt(i + 1);\n            char nextChar = word.charAt(i - 1);\n\n            if (vowels.contains(currentChar) && !vowels.contains(prevChar) && !vowels.contains(nextChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getClosestVowel(\"yogurt\")); // Output: \"u\"\n        System.out.println(getClosestVowel(\"FULL\")); // Output: \"U\"\n        System.out.println(getClosestVowel(\"quick\")); // Output: \"\"\n        System.out.println(getClosestVowel(\"ab\")); // Output: \"\"\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.util.*;\n\nclass MatchParens {\n    /**\n     * You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in some order so that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S are balanced. For example: The string '(())()' is good, while the string '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * matchParens(['()(', ')']) == 'Yes'\n     * matchParens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n        // Check the balance of parentheses in both strings separately\n        int firstStringBalance = 0;\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') FirstStringBalance++;\n            else if (c == ')') FirstStringBalance--;\n            // If balance is negative, it means there are more closing parentheses than opening ones in the first string.\n            if (FirstStringBalance < 0) break;\n        }\n\n        int SecondStringBalance = 0;\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') SecondStringBalance++;\n            else if (c == ')') SecondStringBalance--;\n            // If balance is negative, it means there are more closing parentheses than opening ones in the Second string.\n            if (SecondStringBalance < 0) break;\n        }\n\n        // If both strings have balanced parentheses, return 'Yes'\n        if ((FirstStringBalance >= 0 && SecondStringBalance >= 0) || (FirstStringBalance < 0 && SecondStringBalance < 0)) {\n            return \"Yes\";\n        } else {\n            // If balance of either string is negative, it means there are more closing parentheses than opening ones.\n            // Therefore, concatenating them in any order will not result in a good string.\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(matchParens(Arrays.asList(\"()(\", \")\"))); // Output: Yes\n        System.out.println(matchParens(Arrays.asList(\")\", \")\"))); // Output: No\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass Maximum {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n     */\n\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\n        for (int i : arr) {\n            pq.offer(i);\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        List<Object> result = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            result.add(0, pq.poll());  // Add elements to the front of the list\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        System.out.println(\"Example 1: \" + maximum(arr1, 3));  // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        System.out.println(\"Example 2: \" + maximum(arr2, 2));  // Output: [4, 4]\n\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        System.out.println(\"Example 3: \" + maximum(arr3, 1));  // Output: [2]\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "import java.util.*;\n\nclass Solution {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {  // Increment index by 2 to only check even indices\n            if (lst.get(i) % 2 != 0) {  // Check if the number at even index is odd\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solution(Arrays.asList(5, 8, 7, 1)));  // Output: 12\n        System.out.println(solution(Arrays.asList(3, 3, 3, 3, 3)));  // Output: 9\n        System.out.println(solution(Arrays.asList(30, 13, 24, 321)));  // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i) >= -99 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(\"Sum of elements with at most two digits from the first \" + k + \" elements: \" + addElements(arr, k));\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "List<Integer> oddNumbers = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) { // Check if the number is odd\n                oddNumbers.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1; // Apply Collatz sequence rules\n        }\n        oddNumbers.add(1); // Add 1 as it is always the last odd number in a collatz sequence\n        Collections.sort(oddNumbers); // Sort the list in ascending order\n        return oddNumbers;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "import java.util.regex.*;\n\nclass ValidDate {\n    public static Boolean validDate(String date) {\n        // Regular expression to check if the date is in mm-dd-yyyy format\n        String regex = \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\\\d{4}$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(date);\n\n        // Check if the date matches the format and is a valid date\n        if (matcher.find()) {\n            int month = Integer.parseInt(date.substring(0, 2));\n            int day = Integer.parseInt(date.substring(3, 5));\n\n            // Check if the month is within the range 1-12\n            if (month >= 1 && month <= 12) {\n                // Check if the day is within the appropriate range for the given month\n                if ((month == 4 || month == 6 || month == 9 || month == 11) && (day >= 1 && day <= 30)) {\n                    return true; // Valid date\n                } else if (month == 2 && (day >= 1 && day <= 29)) {\n                    return true; // Valid date for February\n                } else if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day >= 1 && day <= 31)) {\n                    return true; // Valid date for months with 31 days\n                }\n            }\n        }\n\n        // If the checks fail, the date is not valid\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(validDate(\"03-11-2000\")); // true\n        System.out.println(validDate(\"15-01-2012\")); // false\n        System.out.println(validDate(\"04-0-2040\")); // false\n        System.out.println(validDate(\"06-04-2020\")); // true\n        System.out.println(validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.*;\n\nclass SplitWords {\n    public static Object splitWords(String txt) {\n        // Case 1: If there are whitespaces in the text, split it on whitespaces\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        // Case 2: If no whitespaces but there are commas, split it on commas\n        else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        // Case 3: If no whitespaces or commas, count the number of lower-case letters with odd order in the alphabet\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if ('a' <= c && c <= 'z') {\n                    count += ((c - 'a') % 2 == 1) ? 1 : 0;\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.util.*;\n\nclass IsSorted {\n    /**\n     * Checks if a list of numbers is sorted in ascending order and contains no duplicate elements.\n     * \n     * @param lst The list of numbers to check.\n     * @return true if the list is sorted and has no duplicates, false otherwise.\n     */\n    public static Boolean isSorted(List<Object> lst) {\n        // Check if the list contains duplicate elements\n        if (lst.size() != new HashSet<>(lst).size()) {\n            return false;\n        }\n\n        // Check if the list is sorted in ascending order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            Object current = lst.get(i);\n            Object next = lst.get(i + 1);\n\n            if (!current.equals(next) && !((Number)current).doubleValue() < ((Number)next).doubleValue()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Test the function with some examples\n    public static void main(String[] args) {\n        List<Object> example1 = Arrays.asList(5);\n        System.out.println(IsSorted(example1)); // Expected: true\n\n        List<Object> example2 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(IsSorted(example2)); // Expected: true\n\n        List<Object> example3 = Arrays.asList(1, 3, 2, 4, 5);\n        System.out.println(IsSorted(example3)); // Expected: false\n\n        List<Object> example4 = Arrays.asList(1, 2, 3, 4, 5, 6);\n        System.out.println(IsSorted(example4)); // Expected: true\n\n        List<Object> example5 = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\n        System.out.println(IsSorted(example5)); // Expected: true\n\n        List<Object> example6 = Arrays.asList(1, 3, 2, 4, 5, 6, 7);\n        System.out.println(IsSorted(example6)); // Expected: false\n\n        List<Object> example7 = Arrays.asList(1, 2, 2, 3, 3, 4);\n        System.out.println(IsSorted(example7)); // Expected: true\n\n        List<Object> example8 = Arrays.asList(1, 2, 2, 2, 3, 4);\n        System.out.println(IsSorted(example8)); // Expected: false\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) { // No intersection\n            return \"NO\";\n        } else { // Check if length of intersection is prime\n            int length = end - start + 1;\n            return isPrime(length) ? \"YES\" : \"NO\";\n        }\n    }\n\n    private static boolean IsPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n        System.out.println(intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "import java.util.*;\n\npublic class ProdSigns {\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) { // Check if the array is empty\n            return null;\n        }\n\n        int signProduct = 1;\n        long magnitudeSum = 0;\n\n        for (Object item : arr) {\n            if (item instanceof Integer) {\n                Integer num = (Integer) item;\n                magnitudeSum += Math.abs(num); // Add the absolute value of the number to the sum\n                if (num == 0) {\n                    signProduct = 0; // If any number is 0, the product of signs will be 0\n                    break; // No need to continue if we find a zero\n                } else if (num < 0) {\n                    signProduct *= -1; // Multiply sign product by -1 for negative numbers\n                }\n            } else {\n                throw new IllegalArgumentException(\"Array must only contain integers.\");\n            }\n        }\n\n        return magnitudeSum * signProduct;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 2, 2, -4);\n        List<Object> list2 = Arrays.asList(0, 1);\n        List<Object> list3 = new ArrayList<>();\n\n        System.out.println(prodSigns(list1)); // Output: -9\n        System.out.println(prodSigns(list2)); // Output: 0\n        System.out.println(prodSigns(list3)); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.util.*;\n\npublic class Minpath {\n\n    static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> A[0]));\n        Set<String> visited = new HashSet<>();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), 1, i, j});\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n            if (curr[1] == k) return Arrays.stream(curr).boxed().collect(Collectors.toList());\n            visited.add(getKey(curr));\n\n            // Check left neighbor\n            if (isValid(curr, 0, -1)) {\n                int[] next = new int[]{grid.get(curr[2] + 1).get(curr[3]), curr[1] + 1, curr[2], curr[3]};\n                if (!visited.contains(getKey(next))) pq.offer(next);\n            }\n\n            // Check right neighbor\n            if (isValid(curr, 0, 1)) {\n                int[] next = new int[]{grid.get(curr[2] + 1).get(curr[3]), curr[1] + 1, curr[2], curr[3]};\n                if (!visited.contains(getKey(next))) pq.offer(next);\n            }\n\n            // Check up neighbor\n            if (isValid(curr, -1, 0)) {\n                int[] next = new int[]{grid.get(curr[2] + 1).get(curr[3]), curr[1] + 1, curr[2], curr[3]};\n                if (!visited.contains(getKey(next))) pq.offer(next);\n            }\n\n            // Check down neighbor\n            if (isValid(curr, 1, 0)) {\n                int[] next = new int[]{grid.get(curr[2] + 1).get(curr[3]), curr[1] + 1, curr[2], curr[3]};\n                if (!visited.contains(getKey(next))) pq.offer(next);\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    private static boolean isValid(int[] curr, int dx, int dy) {\n        int n = grid.size();\n        int x = curr[2] + dx;\n        int y = curr[3] + dy;\n        return x >= 0 && x < n && y >= 0 && y < n;\n    }\n\n    private static String getKey(int[] a) {\n        return A[2] + \",\" + A[3];\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.*;\n\npublic class Tri {\n   public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(1); // Add initial value for tri(1)\n\n        if (n >= 2) {\n            result.add(3); // Add initial value for tri(2)\n        }\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                // If n is even, add 1 + n / 2 to the result\n                result.add((1 + i / 2));\n            } else {\n                // If n is odd, add the sum of tri(n - 1), tri(n - 2) and tri(n + 1) to the result\n                int lastElement = result.get(result.size() - 1);\n                int secondLastElement = result.get(result.size() - 2);\n\n                if (i == n) {\n                    // If n is odd and it's the last element, add tri(n) which is tri(n - 1) + tri(n - 2) + 3\n                    result.add(lastElement + secondLastElement + 3);\n                } else {\n                    // For all other odd n, tri(n + 1) does not exist yet, so add a dummy value for it first\n                    int nextElement = lastElement + secondLastElement + result.get(i + 2);\n\n                    result.add(nextElement);\n                }\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "public static int digits(int n) {\n    int product = 1;\n    boolean hasOdd = false;\n    while (n > 0) {\n        int digit = n % 10; // Get the last digit of n\n        if (digit % 2 != 0) { // Check if the digit is odd\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10; // Remove the last digit from n\n    }\n    return hasOdd ? product : 0;\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "public class IsNested {\n    public static Boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']' && !stack.isEmpty()) {\n                // If we have a closing bracket and the stack is not empty, we have found a nested pair.\n                hasNested = true;\n                stack.pop();\n            }\n        }\n\n        return hasNested && stack.isEmpty();  // Ensure all brackets are closed and at least one nested pair was found.\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(isNested(\"[][]\")); // false\n        System.out.println(isNested(\"[]\")); // false\n        System.out.println(isNested(\"[[][]]\")); // true\n        System.out.println(isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            BigDecimal bd = new BigDecimal(num.toString());\n            bd = bd.setScale(0, RoundingMode.CEILING);\n            int roundedNum = bd.intValue();\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    // If the text is empty, return false\n    if (txt.isEmpty()) {\n        return false;\n    }\n\n    // Get the last character of the string\n    char lastChar = txt.charAt(txt.length() - 1);\n\n    // Check if the last character is an alphabetical letter\n    if (!Character.isLetter(lastChar)) {\n        return false;\n    }\n\n    // Get the second last character (index before the last)\n    int secondLastIndex = txt.length() - 2;\n\n    // Check if it's a space or the first character, indicating it's not part of a word\n    if (secondLastIndex >= 0 && txt.charAt(secondLastIndex) != ' ') {\n        return false;\n    }\n\n    // If none of the conditions above are met, return true\n    return true;\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "int largestIndex = -1;\n\nfor (int i = arr.size() - 1; i > 0; i--) {\n    if ((Integer)arr.get(i) < (Integer)arr.get(i - 1)) {\n        largestIndex = i;\n        break;\n    }\n}\n\nreturn largestIndex;"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.util.*;\n\nclass LargestSmallestIntegers {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Object> lst) {\n        int maxNegative = Integer.MIN_VALUE;\n        boolean foundNegative = false;\n        int minPositive = Integer.MAX_VALUE;\n        boolean foundPositive = false;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                Integer i = (Integer) obj;\n                if (i < 0 && i > maxNegative) {\n                    maxNegative = i;\n                    foundNegative = true;\n                } else if (i > 0 && i < minPositive) {\n                    minPositive = i;\n                    foundPositive = true;\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(foundNegative ? Optional.of(maxNegative) : Optional.empty());\n        result.add(foundPositive ? Optional.of(minPositive) : Optional.empty());\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> test1 = Arrays.asList(2, 4, 1, 3, 5, 7);\n        System.out.println(largestSmallestIntegers(test1)); // prints: [Optional.empty(), Optional.of(1)]\n\n        List<Object> test2 = new ArrayList<>();\n        System.out.println(largestSmallestIntegers(test2)); // prints: [Optional.empty(), Optional.empty()]\n\n        List<Object> test3 = Arrays.asList(0);\n        System.out.println(largestSmallestIntegers(test3)); // prints: [Optional.empty(), Optional.empty()]\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "public class CompareOne {\n\n    /**\n     * Converts a string to double, replacing ',' with '.' for decimal points.\n     */\n    private static Double convertStringToDouble(Object obj) {\n        if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.');\n            return Double.parseDouble(str);\n        } else if (obj instanceof Number) {\n            return ((Number) obj).doubleValue();\n        } else {\n            throw new IllegalArgumentException(\"Invalid input type\");\n        }\n    }\n\n    /**\n     * Compares two numbers or strings representing real numbers.\n     * Returns the larger one in its original type, or null if they are equal.\n     */\n    public static Object compareOne(Object a, Object b) {\n        Double numA = convertStringToDouble(a);\n        Double numB = convertStringToDouble(b);\n\n        if (numA > numB) {\n            return a;\n        } else if (numB > numA) {\n            return b;\n        } else {\n            return null; // Values are equal\n        }\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     */\n    public static boolean isEqualToSumEven(int n) {\n        // Since the smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8,\n        // any number less than 8 cannot be written as such a sum.\n        if (n < 8) {\n            return false;\n        }\n\n        // If n is even and greater than or equal to 8, then it can be written as the sum of 4 positive even numbers.\n        // For example: 2 + 2 + 2 + (n - 6). Since (n - 6) will also be a positive number, we check if it is even.\n        return n % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isEqualToSumEven(4)); // Output: false\n        System.out.println(isEqualToSumEven(6)); // Output: false\n        System.out.println(isEqualToSumEven(8)); // Output: true\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "import java.math.BigInteger;\n\nclass SpecialFactorial {\n    public static BigInteger specialFactorial(int n) {\n        BigInteger result = BigInteger.ONE;\n        for (int i = 1; i <= n; i++) {\n            result = result.multiply(factorial(i));\n        }\n        return result;\n    }\n\n    private static BigInteger factorial(int num) {\n        BigInteger fact = BigInteger.ONE;\n        for (int i = 2; i <= num; i++) {\n            fact = fact.multiply(BigInteger.valueOf(i));\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Special Factorial of 4: \" + specialFactorial(4)); // Output: 288\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FixSpaces {\n    public static String fixSpaces(String text) {\n        if (text == null || text.length() == 0) {\n            return text; // Return the original string if it's null or empty\n        }\n\n        StringBuilder sb = new StringBuilder();\n        int consecutiveSpacesCount = 0; // Counter for consecutive spaces\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                consecutiveSpacesCount++;\n            } else {\n                // Replace more than two consecutive spaces with a single hyphen\n                if (consecutiveSpacesCount > 2) {\n                    sb.append('-');\n                } else if (consecutiveSpacesCount > 0) {\n                    sb.append(String.join(\"\", Collections.nCopies(consecutiveSpacesCount, \"_\")));\n                }\n\n                consecutiveSpacesCount = 0; // Reset counter for consecutive spaces\n                sb.append(c); // Append the non-space character\n            }\n        }\n\n        // Handle trailing spaces (if any)\n        if (consecutiveSpacesCount > 2) {\n            sb.append('-');\n        } else if (consecutiveSpacesCount > 0) {\n            sb.append(String.join(\"\", Collections.nCopies(consecutiveSpacesCount, \"_\")));\n        }\n\n        return sb.toString();\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        System.out.println(fixSpaces(\"Example\")); // Output: \"Example\"\n        System.out.println(fixSpaces(\"Example 1\")); // Output: \"Example_1\"\n        System.out.println(fixSpaces(\" Example 2\")); // Output: \"_Example_2\"\n        System.out.println(fixSpaces(\" Example3\")); // Output: \"_Example-3\"\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.util.*;\n\nclass FileNameCheck {\n    public static String fileNameCheck(String fileName) {\n        // Split the file name by the dot\n        String[] parts = fileName.split(\"\\\\.\");\n        \n        // Check if there is exactly one dot and no more than three digits\n        if (parts.length != 2 || fileName.replaceAll(\"[^0-9]\", \"\").length() > 3) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter and is not empty\n        if (!Character.isLetter(parts[0].charAt(0)) || parts[0].isEmpty()) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of the allowed extensions\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(parts[1])) {\n            return \"No\";\n        }\n\n        // If all conditions are met, return 'Yes'\n        return \"Yes\";\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "import java.util.*;\n\nclass SumSquares {\n    /**\n     * \"\n     * this function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 but not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * for lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * for lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                result += Math.pow((Integer) lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow((Integer) lst.get(i), 3);\n            } else {\n                // do nothing for indexes that are not multiples of 3 or 4\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(lst1));  // Output: 6\n\n        List<Object> lst2 = new ArrayList<>();\n        System.out.println(sumSquares(lst2));  // Output: 0\n\n        List<Object> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n        System.out.println(sumSquares(lst3));  // Output: -126\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n    // Check if a number is prime\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String wordsInSentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Create a new array to store prime length words\n        List<String> primeLengthWords = new ArrayList<>();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a string and return\n        return String.join(\" \", primeLengthWords);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n        // Split the fraction strings into numerator and denominator\n        String[] nums1 = x.split(\"/\");\n        String[] nums2 = n.split(\"/\");\n        \n        // Convert the numerators and denominators to integers\n        int xNumerator = Integer.parseInt(nums1[0]);\n        int xDenominator = Integer.parseInt(nums1[1]);\n        int nNumerator = Integer.parseInt(nums2[0]);\n        int nDenominator = Integer.parseInt(nums2[1]);\n\n        // Multiply the numerators and denominators of the fractions\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number by checking if the remainder is 0\n        if (resultNumerator % resultDenominator == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass OrderByPoints {\n    // Helper function to calculate sum of digits of an integer\n    private static int digitSum(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return Math.abs(sum); // return absolute value of sum to handle negative numbers\n    }\n\n    // Helper function to calculate sum of digits of a number\n    private static int digitSum(BigInteger num) {\n        int sum = 0;\n        String strNum = num.toString();\n        for (int i = 0; i < strNum.length(); i++) {\n            sum += Character.getNumericValue(strNum.charAt(i));\n        }\n        return Math.abs(sum); // return absolute value of sum to handle negative numbers\n    }\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        // Convert all elements of the list to BigInteger for easy comparison and manipulation\n        List<BigInteger> bigNums = new ArrayList<>();\n        for (Object obj : nums) {\n            if (obj instanceof Integer) {\n                bigNums.add(BigInteger.valueOf((int) obj));\n            } else if (obj instanceof BigInteger) {\n                bigNums.add((BigInteger) obj);\n            }\n        }\n\n        // Sort the list based on sum of digits and index in original list\n        Collections.sort(bigNums, new Comparator<BigInteger>() {\n            @Override\n            public int compare(BigInteger o1, BigInteger o2) {\n                int sum1 = digitSum(o1);\n                int sum2 = digitSum(o2);\n                if (sum1 == sum2) {\n                    int index1 = nums.indexOf(o1);\n                    int index2 = nums.indexOf(o2);\n                    return Integer.compare(index1, index2); // compare indices for ties\n                } else {\n                    return Integer.compare(sum1, sum2); // compare sums\n                }\n            }\n        });\n\n        // Convert back to List<Object> and return\n        List<Object> sortedNums = new ArrayList<>();\n        for (BigInteger bigNum : bigNums) {\n            sortedNums.add(bigNum);\n        }\n        return sortedNums;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(orderByPoints(Arrays.asList(1, 11, -1, -11, -12))); // [-1, -11, 1, -12, 11]\n        System.out.println(orderByPoints(new ArrayList<Object>())); // []\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "public static int specialFilter(List<Object> nums) {\n        int count = 0;\n        for (Object obj : nums) {\n            if (!(obj instanceof Integer)) {\n                continue; // Skip non-integer values\n            }\n            int num = (Integer) obj;\n            if (num > 10 && isFirstLastDigitOdd(Math.abs(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean IsFirstLastDigitOdd(int num) {\n        String strNum = String.valueOf(num);\n        int firstDigit = Character.getNumericValue(strNum.charAt(0));\n        int LastDigit = Character.getNumericValue(strNum.charAt(strNum.length() - 1));\n        return (FirstDigit % 2 != 0) && (LastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "public static int getMaxTriples(int n) {\n    // Create an integer array a of length n with initial values\n    int[] a = new int[n];\n    for (int i=1; i<=n; i++) {\n        A[i-1] = i * i - i + 1;\n    }\n\n    int count = 0;  // Initialize counter for valid triples\n\n    // Iterate over all possible triples (a[i], a[j], A[k]) of A\n    for (int i=0; i<n; i++) {\n        for (int j=i+1; j<n; j++) {\n            for (int k=j+1; k<n; k++) {\n                // Check if sum of elements in the triple is a multiple of 3\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count++;  // Increment counter for valid triples\n                }\n            }\n        }\n    }\n\n    return count;  // Return the number of valid triples\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n  // Define a list to store the names of the planets in order of their distance from the Sun\n  private static List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n  public static List<Object> bf(String planet1, String planet2) {\n    // Check if the input planet names are valid\n    if (!planets.contains(planet1) || !planets.contains(planet2)) {\n      return new ArrayList<>(); // Return an empty list if either planet name is invalid\n    }\n\n    // Find the indexes of the planets in the list\n    int index1 = planets.indexOf(planet1);\n    int index2 = planets.indexOf(planet2);\n\n    // If the first planet's index is greater than the second, swap them to keep index1 < index2\n    if (index1 > index2) {\n      int temp = index1;\n      index1 = index2;\n      index2 = temp;\n    }\n\n    // Create a list to store the names of the planets between planet1 and planet2, inclusive\n    List<String> result = new ArrayList<>();\n    for (int i = index1 + 1; i <= index2 - 1; i++) {\n      result.add(planets.get(i));\n    }\n\n    return result; // Return the list of planet names\n  }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "public static List<String> sortedListSum(List<String> lst) {\n    // Remove strings with odd lengths\n    lst.removeIf(s -> s.length() % 2 != 0);\n\n    // Sort the list by length and then alphabetically\n    Collections.sort(lst, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            int lenCompare = Integer.compare(s1.length(), s2.length());\n            if (lenCompare == 0) {\n                return s1.compareTo(s2); // Alphabetical sorting if lengths are equal\n            }\n            return lenCompare;\n        }\n    });\n\n    return lst;\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x; // Return x if n is prime\n    } else {\n        return y; // Return y otherwise\n    }\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) return false; // 0 and 1 are not primes\n    if (n == 2) return true;  // 2 is a prime number\n\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false; // If divisible by any other number, it's not prime\n    }\n    return true; // Not divisible by any number, so it's prime\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "int sum = 0;\n    for (Object obj : lst) {\n        if (obj instanceof Integer && ((Integer) obj).intValue() > 0 && ((Integer) obj).intValue() % 2 != 0) {\n            sum += Math.pow(((Integer) obj).doubleValue(), 2);\n        }\n    }\n    return (int) sum;\n}\n\npublic static void main(String[] args) {\n    System.out.println(doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n    System.out.println(doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n    System.out.println(doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n    System.out.println(doubleTheDifference(Arrays.asList(0))); // Output: 0\n    System.out.println(doubleTheDifference(new ArrayList<>())); // Output: 0\n}\n```\n\nThis Java code defines a method `doubleTheDifference` that takes a list of objects as input. It iterates through the list, checks if each element is an instance of `Integer`, and if it's positive and odd. If these conditions are met, it squares the number and adds it to the sum. The main method demonstrates the usage of `doubleTheDifference` with various inputs."}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Compare {\n\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Create a new list to store the differences\n        List<Integer> differences = new ArrayList<>();\n\n        // Iterate through each index in the game and guess lists\n        for (int i = 0; i < game.size(); i++) {\n            // Calculate the absolute difference between the game result and guess\n            int diff = Math.abs(game.get(i) - guess.get(i));\n\n            // Add the difference to the differences list\n            differences.add(diff);\n        }\n\n        return differences;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // prints [0,0,0,0,3,3]\n        System.out.println(compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // prints [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "import java.util.*;\n\nclass StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        double maxStrength = Double.MIN_VALUE;\n        String strongestExtensionName = \"\";\n        for (String extension : extensions) {\n            int uppercaseCount = 0;\n            int lowercaseCount = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    uppercaseCount++;\n                } else if (Character.isLowerCase(c)) {\n                    lowercaseCount++;\n                }\n            }\n            double strength = uppercaseCount - lowercaseCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtensionName = extension;\n            } else if (strength == maxStrength) {\n                // In case of a tie, choose the one that comes first in the list\n                if (!extension.compareTo(strongestExtensionName) > 0) {\n                    strongestExtensionName = extension;\n                }\n            }\n        }\n        return className + \".\" + strongestExtensionName;\n    }\n\n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions));  // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "import java.util.*;\n\nclass CycPatternCheck {\n  public static boolean cycpatternCheck(String A, String B) {\n    // Check if A is null or empty, return false as we cannot check any rotation against it\n    if (A == null || A.isEmpty()) {\n      return false;\n    }\n\n    // Concatenate A with itself to handle rotations and create a pattern that might contain B as a substring\n    String doubleA = A + A;\n\n    // Check if B is a substring of the doubleA string, if it is return true\n    if (doubleA.contains(B)) {\n      return true;\n    } else {\n      // If B is not a substring of doubleA then return false\n      return false;\n    }\n  }\n\n  public static void main(String[] args) {\n    System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // Output: false\n    System.out.println(cycpatternCheck(\"hello\", \"ell\")); // Output: true\n    System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // Output: false\n    System.out.println(cycpatternCheck(\"abab\", \"baa\")); // Output: true\n    System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // Output: false\n    System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // Output: true\n  }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenOddCount {\n\n    public static List<Integer> evenOddCount(int num) {\n        int evenCount = 0, oddCount = 0;\n        num = Math.abs(num);  // Convert to positive if negative\n\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        List<Integer> counts = new ArrayList<>();\n        counts.add(evenCount);\n        counts.add(oddCount);\n        return counts;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12));  // Output: [1, 1]\n        System.out.println(evenOddCount(123));  // Output: [1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000.\");\n        }\n\n        String[] thousands = {\"\", \"m\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\n        return thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number % 10];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // Output: xix\n        System.out.println(intToMiniRoman(152)); // Output: clii\n        System.out.println(intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "class RightAngleTriangle {\n    public static Boolean rightAngleTriangle(int A, int b, int c) {\n        // Sort the sides of the triangle in ascending order\n        Arrays.sort(new int[]{A, b, c});\n        \n        // Check if the square of the longest side is equal to the sum of squares of other two sides\n        return A*A + b*b == c*c;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5));  // Output: true\n        System.out.println(rightAngleTriangle(1, 2, 3));  // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     */\n    public static String findMax(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        // Sort the list lexicographically first\n        Collections.sort(words);\n\n        int maxUniqueChars = 0;\n        String result = \"\";\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueChars) {\n                maxUniqueChars = uniqueChars.size();\n                result = word;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(findMax(words1));  // Output: \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(findMax(words2));  // Output: \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(findMax(words3));  // Output: \"aaaaaaa\"\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Eat {\n    public static ArrayList<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots after meals\n        int totalEaten = number + Math.min(need, remaining);\n        // Calculate the number of carrots left after meals\n        int leftovers = Math.max(remaining - need, 0);\n\n        // Return the result as an ArrayList<Integer>\n        return new ArrayList<>(Arrays.asList(totalEaten, leftovers));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(eat(5, 6, 10).toString()); // Output: [11, 4]\n        System.out.println(eat(4, 8, 9).toString()); // Output: [12, 1]\n        System.out.println(eat(1, 10, 10).toString()); // Output: [11, 0]\n        System.out.println(eat(2, 11, 5).toString()); // Output: [7, 0]\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "public class DoAlgebra {\n\n    public static int DoAlgebra(List<String> operators, List<Integer> operands) {\n        Stack<Integer> stack = new Stack<>();\n\n        for (int i = 0; i < operands.size(); i++) {\n            stack.push(operands.get(i));\n\n            if (i < operators.size()) {\n                int op2 = stack.pop();\n                int op1 = stack.pop();\n                switch (operators.get(i)) {\n                    case \"+\":\n                        stack.push(op1 + op2);\n                        break;\n                    case \"-\":\n                        stack.push(op1 - op2);\n                        break;\n                    case \"*\":\n                        stack.push(op1 * op2);\n                        break;\n                    case \"//\":\n                        stack.push(op1 / op2);\n                        break;\n                    case \"**\":\n                        stack.push((int) Math.pow(op1, op2));\n                        break;\n                }\n            }\n        }\n\n        return stack.pop();\n    }\n\n    public static void main(String[] args) {\n        List<String> operators = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands = Arrays.asList(2, 3, 4, 5);\n        System.out.println(DoAlgebra(operators, operands));  // output: 9\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "import java.util.*;\n\nclass Solve {\n    public static String solve(String s) {\n        // Create a new string to store the result\n        StringBuilder sb = new StringBuilder();\n\n        // Check if the string contains any letters\n        boolean containsLetters = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetters = true;\n                break;\n            }\n        }\n\n        // If the string contains letters, reverse their case\n        if (containsLetters) {\n            for (char c : s.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(c);\n                }\n            }\n        } \n\n        // If the string contains no letters, reverse the entire string\n        else {\n            for (int i = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.math.BigInteger;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return null.\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes(StandardCharsets.UTF_8));\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n\n            // Add preceding 0's to make it 32 bit\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n\n            return hashtext;\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"Error computing MD5 hash\", e);\n        }\n    }\n\n    // Test the function with some example data\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Output: 3e25960a79dbc69b674cd4ec67a72c62\n        System.out.println(stringToMd5(\"\")); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "List<Object> evenDigits = new ArrayList<>();\n        int start = Math.min(A, b);\n        int end = Math.max(A, b);\n\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8));  // Output: [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2));  // Output: [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // Output: []\n    }\n}"}

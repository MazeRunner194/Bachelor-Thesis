{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "const has_close_elements = (numbers: Array<number>, threshold: number) : boolean => {\n    for(let i=0; i < numbers.length; i++) {\n        for(let j=i+1; j < numbers.length; j++) {\n            if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true; // Return true if any two numbers are closer than the given threshold\n            }\n        }\n    }\n    return false; // Return false if no two numbers are closer than the given threshold\n};\n\nconsole.log(has_close_elements([1.0, 2.0, 3.0], 0.5));  // Output: false\nconsole.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3));  // Output: true"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "function separate_paren_groups(paren_string: string): Array<string> {\n    const result: Array<string> = [];\n    let currentGroup = '';\n    let depth = 0;\n\n    for (let char of paren_string.replace(/ /g, '')) { // Remove spaces from the input string\n        if (char === '(') {\n            depth++;\n            currentGroup += char;\n        } else if (char === ')') {\n            depth--;\n            currentGroup += char;\n\n            // If depth is 0, it means we've closed all parentheses in the current group.\n            if (depth === 0) {\n                result.push(currentGroup);\n                currentGroup = ''; // Reset the current group\n            }\n        }\n    }\n\n    return result;\n}\n\nconsole.log(separate_paren_groups('( ) (( )) (( )( ))')); // Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "const truncateNumber = (number0: number): number => {\n    return number0 - Math.floor(number0);\n}"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n  let balance = 0; // Initialize balance to zero\n  for(let i=0; i<operations.length; i++) {\n    balance += operations[i]; // Update the balance with each operation\n    if(balance < 0) {\n      return true; // Return true if balance falls below zero\n    }\n  }\n  return false; // Return false if balance never falls below zero\n};\n\nconsole.log(below_zero([1, 2, 3])); // Output: False\nconsole.log(below_zero([1, 2, -4, 5])); // Output: True"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean_absolute_deviation = function (numbers: Array<number>): number {\n    // calculate the mean of the numbers\n    let sum = 0;\n    for(let i=0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    let mean = sum / numbers.length;\n\n    // calculate the absolute difference from the mean for each number\n    let absDeviations: Array<number> = [];\n    for(let i=0; i < numbers.length; i++) {\n        absDeviations.push(Math.abs(numbers[i] - mean));\n    }\n\n    // calculate the average of these absolute deviations\n    sum = 0;\n    for(let i=0; i < absDeviations.length; i++) {\n        sum += absDeviations[i];\n    }\n    return sum / absDeviations.length;\n};\n\nconsole.log(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]));  // Output: 1.0"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    if (numbers.length === 0) {\n        return [];\n    } else if (numbers.length === 1) {\n        return numbers;\n    } else {\n        let result = [numbers[0]];\n        for(let i = 1; i < numbers.length; i++) {\n            result.push(delimiter, numbers[i]);\n        }\n        return result;\n    }\n};\n\nconsole.log(intersperse([], 4)); // Output: []\nconsole.log(intersperse([1, 2, 3], 4)); // Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parse_nested_parens = (paren_string: string): Array<number> => {\n    return paren_string.split(' ').map(group => {\n        let maxDepth = 0, currentDepth = 0;\n        for (let char of group) {\n            if (char === '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (char === ')') {\n                currentDepth--;\n            }\n        }\n        return maxDepth;\n    });\n};\n\nconsole.log(parse_nested_parens('(()()) ((())) () ((())()())')); // Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "const filter_by_substring = (strings: Array<string>, substring: string) : Array<string>  => {\n    return strings.filter(str => str.includes(substring));\n};"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "const sum_product = (numbers: Array<number>): [number, number] => {\n    let sum = 0;\n    let product = 1;\n  \n    for(let i=0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n};"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const rolling_max = (numbers: Array<number>) : Array<number>  => {\n    let maxSoFar = numbers[0];\n    return numbers.map(n => {\n        if (n > maxSoFar) {\n            maxSoFar = n;\n        }\n        return maxSoFar;\n    });\n};\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));  // [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "function makePalindrome(string0: string): string {\n    // Find the longest postfix of supplied string that is a palindrome.\n    let reversedString = string0.split('').reverse().join('');\n    for (let i = 0; i < string0.length; i++) {\n        if (string0.substring(i) === reversedString.substring(0, string0.length - i)) {\n            // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n            return string0 + reversedString.substring(string0.length - i);\n        }\n    }\n    return string0; // In case the entire string is a palindrome or empty\n}\n\nconsole.log(makePalindrome('')); // Output: ''\nconsole.log(makePalindrome('cat')); // Output: 'catac'\nconsole.log(makePalindrome('cata')); // Output: 'catac'"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "const string_xor = function (A: string, B: string) : string {\n    let result = '';\n    for(let i=0; i<A.length; i++) {\n        result += (A[i] === B[i]) ? '0' : '1';\n    }\n    return result;\n};\n\nconsole.log(string_xor('010', '110')); // Outputs: 100"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "const longest = (strings: Array<string>): any => {\n  if (!strings.length) return null; // return null for empty array\n\n  let longestString = null, maxLength = 0;\n\n  for(let str of strings){\n    if(str.length > maxLength){\n      longestString = str;\n      maxLength = str.length;\n    }\n  }\n\n  return longestString; // return the longest string or null\n};\n\nconsole.log(longest([])); // undefined\nconsole.log(longest(['A', 'b', 'c'])); // A\nconsole.log(longest(['A', 'bb', 'ccc'])); // ccc"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return a greatest common divisor of two integers a and b\n * >>> greatest_common_divisor(3, 5)\n * 1\n * >>> greatest_common_divisor(25, 15)\n * 5\n */\n\nconst greatest_common_divisor = (a: number, b: number): number => {\n    while (b != 0) {\n        let temp = b;\n        b = A % B;\n        A = temp;\n    }\n    return A;\n};\n\n// Test cases\nconsole.log(greatest_common_divisor(3, 5)); // Output: 1\nconsole.log(Greatest_common_divisor(25, 15)); // Output: 5"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "const All_prefixes = function(inputString: string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <= inputString.length; i++) {\n        result.push(inputString.substring(0, i));\n    }\n    return result;\n};\n\nconsole.log(All_prefixes('abc')); // Outputs: ['A', 'ab', 'abc']"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = (n: number): string => {\n    let result: string[] = [];\n    for(let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(' ');\n};\n\nconsole.log(string_sequence(0)); // Outputs: '0'\nconsole.log(string_sequence(5)); // Outputs: '0 1 2 3 4 5'"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "const count_distinct_characters = (string0: string): number => {\n    const uniqueChars = new Set(string0.toLowerCase()); // Convert to lowercase and create a set of characters \n    return uniqueChars.size; // The size of the set gives the number of distinct characters\n};\n\n// Test the function with provided examples\nconsole.log(count_distinct_characters('xyzXYZ'));  // Output: 3\nconsole.log(count_distinct_characters('Jerry')); // Output: 4"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "/**\n * Parses a string of musical notes in ASCII format and returns an array of integers representing the number of beats each note lasts.\n * Legend:\n * 'o' - whole note, lasts four beats\n * 'o|' - half note, lasts two beats\n * '.|' - quarter note, lasts one beat\n\n * @param {string} music_string - The string of musical notes to be parsed\n * @returns {number[]} An array of integers representing the number of beats each note lasts.\n */\nconst parse_music = (music_string: string) : Array<number> => {\n    return music_string.split(' ').map(note => {\n        switch (note) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n            default:\n                throw new Error(`Invalid note: ${note}`);\n        }\n    });\n};\n\nconsole.log(parse_music('o o| .| o| o| .| .| .| .| o o')); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "const how_many_times = function (string0: string, substring: string): number {\n    if(substring === '') return 0;\n    let count = 0;\n    for(let i=0; i<string0.length; i++) {\n        if(string0.substr(i, substring.length) === substring) {\n            count++;\n            i += substring.length - 1; // to consider overlapping cases\n        }\n    }\n    return count;\n}\n\nconsole.log(how_many_times('', 'A')); // Outputs: 0\nconsole.log(how_many_times('aaa', 'A')); // Outputs: 3\nconsole.log(how_many_times('aaaa', 'aa')); // Outputs: 3"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const sort_numbers = function(numbers: string): string {\n    // Map each number word to its corresponding numerical value\n    const numMap: { [key: string]: number } = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n\n    // Split the input string into an array of number words\n    const numArray = numbers.split(' ');\n\n    // Convert the number words to their corresponding numerical values and sort them\n    const sortedNumbers = numArray\n        .map(word => numMap[word])\n        .sort((a, B) => A - B);\n\n    // Convert the sorted numerical values back into number words and join them into a string\n    const sortedString = sortedNumbers.join(' ');\n\n    return sortedString;\n};"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "interface ClosestElements {\n    smaller: number,\n    larger: number\n}\n\nconst find_closest_elements = (numbers: Array<number>): ClosestElements  => {\n    let minDiff = Infinity;\n    let closestPair: ClosestElements = { smaller: numbers[0], larger: numbers[1] };\n\n    for(let i = 0; i < numbers.length - 1; i++) {\n        for(let j = i + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = { smaller: Math.min(numbers[i], numbers[j]), larger: Math.max(numbers[i], numbers[j]) };\n            }\n        }\n    }\n\n    return closestPair;\n};"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "const rescale_to_unit = function(numbers: Array<number>): Array<number> {\n    // First, check if the array has at least two elements\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two elements\");\n    }\n\n    // Find the min and max values in the array\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    // Check if all numbers are the same\n    if (min === max) {\n        throw new Error(\"All numbers in the array must be different\");\n    }\n\n    // Apply linear transformation\n    return numbers.map(number => (number - min) / (max - min));\n};\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0, 0.25, 0.5, 0.75, 1]"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "const filter_integers = (values: Array<any>): Array<number> => {\n    return values.filter(value => Number.isInteger(value));\n};"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "const strlen = function(string0: string): number {\n    return string0.length;\n};\n\n// Test cases\nconsole.log(strlen('')); // Output: 0\nconsole.log(strlen('abc')); // Output: 3"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "const largest_divisor = function (n: number) : number  {\n    for(let i=n-1; i>=1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n    return 1; // If no divisor is found, return 1 (since every number is divisible by 1)\n};\n\nconsole.log(largest_divisor(15));  // Output: 5"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst factorize = function(n: number): Array<number> {\n    let factors: Array<number> = [];\n\n    // Divide n by 2 until it's odd\n    while (n % 2 === 0) {\n        factors.push(2);\n        n /= 2;\n    }\n\n    // Check for odd factors from 3 onwards\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\n    // If n is a prime number greater than 2\n    if (n > 2) {\n        factors.push(n);\n    }\n\n    return factors;\n};"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "const remove_duplicates = (numbers: Array<number>): Array<number> => {\n    const frequencyMap = numbers.reduce((acc, num) => {\n        acc[num] = (acc[num] || 0) + 1;\n        return acc;\n    }, {});\n\n    return numbers.filter(num => frequencyMap[num] === 1);\n}\n\n// Test\nconsole.log(remove_duplicates([1, 2, 3, 2, 4])); // Output: [1, 3, 4]"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "const flip_case = function(str: string): string {\n    return str.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\nconsole.log(flip_case('Hello')); // Outputs: 'hELLO'"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "// Define a function called 'concatenate' that takes an array of strings as an argument and returns a string.\nconst concatenate = function (strings: Array<string>) : string  {\n\n    // Check if the input array is empty.\n    if (strings.length === 0) {\n\n        // If it is, return an empty string.\n        return '';\n\n    } else {\n\n        // If it's not, use the 'join' method to concatenate all elements of the array into a single string.\n        // The separator for each element in the resulting string will be an empty string.\n        const result = strings.join('');\n\n        // Return the resulting string.\n        return result;\n\n    }\n\n};"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "const filter_by_prefix = (strings: Array<string>, prefix: string) : Array<string> => {\n    return strings.filter(s => s.startsWith(prefix));\n}"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "const get_positive = function(l: Array<number>) : Array<number> {\n    return l.filter(num => num > 0);\n}"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "const Is_prime = (n: number): boolean => {\n    if (n <= 1) return false; // 1 and numbers less than 1 are not prime\n\n    for (let i = 2, sqrtN = Math.sqrt(n); i <= sqrtN; i++) {\n        if (n % i === 0) return false; // if n is divisible by any number between 2 and its square root, it's not prime\n    }\n\n    return true; // If no divisors found, then n is prime\n};"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "const sort_third = (l: number[]): number[] => {\n  // Extract the elements at indices that are divisible by three and sort them\n  const thirdIndexedElements = l.filter((_, index) => (index + 1) % 3 === 0).sort((a, B) => A - B);\n\n  // Create a new array with the sorted elements placed back at their correct indices\n  return l.map((element, index) => {\n    if ((index + 1) % 3 === 0) {\n      return thirdIndexedElements.shift()!; // Take the first element from the sorted array and insert it at the current position\n    } else {\n      return element; // Keep the original element if its index is not divisible by three\n    }\n  });\n};\n\nconsole.log(sort_third([1, 2, 3])); // Output: [1, 2, 3]\nconsole.log(sort_third([5, 6, 3, 4, 8, 9, 2])); // Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number> {\n    return Array.from(new Set(l)).sort((a, B) => A - B);\n}"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "const max_element = (l: Array<number>) : number  => {\n    let max = l[0]; // Initialize max with the first Element of the array\n    for(let i = 1; i < l.length; i++) {\n        if(max < l[i]) {\n            max = l[i]; // Update max if current element is greater than max\n        }\n    }\n    return max;\n};\n\n// Test cases:\nconsole.log(max_element([1, 2, 3])); // Output: 3\nconsole.log(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: 123"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "const fizz_buzz = function (n: number): number {\n    let count = 0;\n\n    for(let i=1; i<n; i++) {\n        if((i%11 === 0 || i%13 === 0) && i.toString().includes('7')) {\n            count++;\n        }\n    }\n\n    return count;\n};\n\nconsole.log(fizz_buzz(50));  // Output: 0\nconsole.log(fizz_buzz(78));  // Output: 2\nconsole.log(fizz_buzz(79));  // Output: 3"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const sort_even = (l: number[]): number[] => {\n    // Extract the elements at even indices and sort them\n    let evenIndicesElements = l.filter((_, index) => index % 2 === 0).sort((a, B) => A - B);\n\n    // Replace the elements at even indices in the original array with the sorted elements\n    return l.map((element, index) => index % 2 === 0 ? evenIndicesElements.shift() : element);\n};"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "import {isPrime} from 'mathjs';\n\nfunction getNextFibonacci(prev: number, next: number): [number, number] {\n  return [next, prev + next];\n}\n\nconst prime_fib = (n: number): number => {\n  let fibNumbers: Array<number> = [];\n  let count = 0;\n  let [prev, next] = [0, 1];\n\n  while(count < n) {\n    [prev, next] = getNextFibonacci(prev, next);\n\n    if (isPrime(next)) {\n      fibNumbers.push(next);\n      count++;\n    }\n  }\n\n  return fibNumbers[n-1];\n};"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>) : boolean  {\n    for (let i = 0; i < l.length - 2; i++) { // Iterate until second last element\n        for (let j = i + 1; j < l.length - 1; j++) { // Start from next of 'i' to second last element\n            for (let k = j + 1; k < l.length; k++) { // Start from next of 'j' to last element\n                if (l[i] + l[j] + l[k] === 0) { // Check if sum is zero\n                    return true; // Return true if found any combination that sums up to zero\n                }\n            }\n        }\n    }\n    return false; // Return false if no such combination was found\n};\n\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // Output: false\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // Output: true\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // Output: false\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // Output: true\nconsole.log(triples_sum_to_zero([1])); // Output: false"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "const car_race_collision = function (n: number): number {\n    return n * n;\n}"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "const incr_list = function (l: Array<number>): Array<number> {\n    return l.map((num) => num + 1);\n};"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>) : boolean {\n    // Create a new Set to store unique numbers encountered so far\n    const seenNumbers = new Set<number>();\n    \n    // Iterate through the array\n    for (let num of l) {\n        // Check if the negation of the current number exists in the set\n        if (seenNumbers.has(-num)) {\n            // If it does, return true since we found two numbers that sum to zero\n            return true;\n        }\n        // Add the current number to the set\n        seenNumbers.add(num);\n    }\n\n    // If we've gone through the array without finding any pairs that sum to zero, return false\n    return false;\n}"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "function changeBase(x: number, base: number): string {\n    if (base >= 10 || base <= 1) {\n        throw new Error('Base must be less than 10 and greater than 1');\n    }\n\n    let result = '';\n\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n\n    return result || '0';\n}\n\nconsole.log(changeBase(8, 3)); // Output: '22'\nconsole.log(changeBase(8, 2)); // Output: '1000'\nconsole.log(changeBase(7, 2)); // Output: '111'"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "const triangle_area = function(A: number, h: number): number {\n    return (A * h) / 2;\n}"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0; // Initializing the first four elements of the sequence.\n\n    for (let i = 4; i <= n; i++) {\n        let next = A + B + C + D;\n        A = B;\n        B = C;\n        C = D;\n        D = next;\n    }\n\n    return D; // The nth element will be stored in 'D' at the end of the loop.\n};\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "const median = (l: Array<number>): number => {\n    // Sort the list in ascending order\n    l.sort((a, B) => A - B);\n    \n    // Get the length of the sorted list\n    const len = l.length;\n\n    // If the length is odd, return the middle element\n    if (len % 2 !== 0) {\n        return l[Math.floor(len / 2)];\n    }\n\n    // If the length is even, return the average of the two middle elements\n    else {\n        const mid1 = l[Math.floor((len - 1) / 2)];\n        const mid2 = l[Math.ceil((len + 1) / 2)];\n        return (mid1 + mid2) / 2;\n    }\n};\n\n// Test cases\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "/**\n * Checks if the provided string is a palindrome.\n * A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n * \n * >>> Is_palindrome('')\n * true\n * >>> Is_palindrome('aba')\n * true\n * >>> Is_palindrome('aaaaa')\n * true\n * >>> Is_palindrome('zbcd')\n * false\n */\nconst Is_palindrome = (text: string): boolean => {\n  // Normalize the text by removing non-alphanumeric characters and converting to lowercase\n  const normalizedText = text.replace(/[^A-Za-Z0-9]/gi, '').toLowerCase();\n\n  // Check if the normalized text is a palindrome\n  return normalizedText === normalizedText.split('').reverse().join('');\n};\n\n// Check function to test the Is_palindrome function with provided data points\nconsole.log(Is_palindrome('')); // true\nconsole.log(Is_palindrome('aba')); // true\nconsole.log(Is_palindrome('aaaaa')); // true\nconsole.log(Is_palindrome('zbcd')); // false"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "const modp = (n: number, p: number): number  => {\n    return Math.pow(2, n) % p;\n};"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "/**\n * This is a TYPE SCRIPT FUNCTION THAT REMOVES VOWELS FROM THE INPUT STRING\n * @param {string} text - The input string from which vowels need to be removed.\n * @return {string} The modified string with all the vowels removed.\n */\n\nconst remove_vowels = (text: string) : string  => {\n    // Convert the input string to lowercase for uniformity and then split it into an array of characters.\n    const charsArray = text.toLowerCase().split('');\n\n    // Use the filter method to create a new array that contains only consonants (i.e., non-vowel letters).\n    const consonantsOnlyArray = charsArray.filter((char) => {\n        return ['a', 'E', 'I', 'O', 'U'].indexOf(char) === -1;\n    });\n\n    // Join the array of consonants back into a string and return it.\n    return consonantsOnlyArray.join('');\n};"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "const below_threshold = (l: Array<number>, t: number): boolean => {\n    for(let i = 0; i < l.length; i++) {\n        if(l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "console.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "console.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // Outputs: True\nconsole.log(same_chars('abcd', 'dddddddabc')); // Outputs: True\nconsole.log(same_chars('dddddddabc', 'abcd')); // Outputs: True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // Outputs: False\nconsole.log(same_chars('abcd', 'dddddddabce')); // Outputs: False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // Outputs: False"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "const fib = (n: number): number => {\n    if (n <= 1) return n;\n    else return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "function correctBracketing(brackets: string): boolean {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            count++;\n        } else if (brackets[i] === '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false; // More closing brackets than opening brackets\n        }\n    }\n    return count === 0; // True if all opening brackets have corresponding closing brackets\n}\n\nconsole.log(correctBracketing(\"<\")); // False\nconsole.log(correctBracketing(\"<>\")); // True\nconsole.log(correctBracketing(\"<<><>>\")); // True\nconsole.log(correctBracketing(\"><<>\")); // False"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "const monotonic = (l: Array<number>): boolean => {\n    // Create a copy of the array\n    let sorted = [...l].sort((a, B) => A - B);\n    // Check if the original array is equal to its sorted version\n    return JSON.stringify(l) === JSON.stringify(sorted) || \n           JSON.stringify(l) === JSON.stringify(sorted.reverse());\n};\n\nconsole.log(monotonic([1, 2, 4, 20])); // true\nconsole.log(monotonic([1, 20, 4, 10])); // false\nconsole.log(monotonic([4, 1, 0, -10])); // true"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "const common = (l1: Array<number>, l2: Array<number>) => {\n    // Create a set from each array to remove duplicates and then find common elements.\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Find intersection of sets\n    const intersection = new Set([...set1].filter(x => set2.has(x)));\n\n    // Convert the resulting set to an array and sort it\n    return Array.from(intersection).sort((a, B) => A - B);\n}"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "const largest_prime_factor = function(n: number): number {\n    let factor = 2; // Start with the smallest prime factor\n    let lastFactor = 1; // Keep track of the last factor that was found\n\n    // If n is even, divide it by 2 until it's odd\n    while (n % 2 === 0) {\n        lastFactor = factor;\n        factor = 2;\n        n /= 2;\n    }\n\n    // Start checking from 3 up to the square root of n\n    for (let i = 3; i * i <= n; i += 2) {\n        while (n % i === 0) {\n            lastFactor = factor;\n            factor = i;\n            n /= i;\n        }\n    }\n\n    // If n is a prime number greater than 2, it's the last factor\n    if (n > 2) {\n        lastFactor = factor;\n        factor = n;\n    }\n\n    return lastFactor; // Return the largest prime factor found\n};"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "const sum_to_n = (n: number): number => {\n    let sum = 0;\n    for(let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const correct_bracketing = (brackets: string): boolean => {\n    let counter = 0;\n    for (let char of brackets) {\n        if (char === '(') {\n            counter++;\n        } else if (char === ')') {\n            counter--;\n            if (counter < 0) {\n                return false;\n            }\n        }\n    }\n    return counter === 0;\n};\n\nconsole.log(correct_bracketing(\"(\")); // outputs: false\nconsole.log(correct_bracketing(\"()\")); // outputs: true\nconsole.log(correct_bracketing(\"(()())\")); // outputs: true\nconsole.log(correct_bracketing(\")(()\")); // outputs: false"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "const derivative = (xs: number[]): number[] => {\n    return xs.map((coefficient, index) => coefficient * index).slice(1);\n}\n\nconsole.log(derivative([3, 1, 2, 4, 5])); // Outputs: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));      // Outputs: [2, 6]"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "const fibfib = (n: number): number => {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n\n    let a = 0, B = 0, C = 1, D = 1;\n    for(let i = 3; i <= n; i++) {\n        D = A + B + C;\n        A = B;\n        B = C;\n        C = D;\n    }\n\n    return D;\n};"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowels_count = (s: string) : number  => {\n    // Convert the input string to lower case\n    let str = s.toLowerCase();\n    \n    // Define an array containing all vowels, including 'y'\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n\n    // Initialize a counter for the number of vowels found\n    let count = 0;\n\n    // Loop through each character in the string\n    for(let i=0; i<str.length; i++) {\n        // If the current character is a vowel, increment the counter\n        if (vowels.includes(str[i])) {\n            count++;\n        }\n    }\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "function circular_shift(x: number, shift: number): string {\n    let digits = x.toString().split('');\n    const numDigits = digits.length;\n\n    // If shift is greater than the number of digits, reverse the digits\n    if (shift > numDigits) {\n        return digits.reverse().join('');\n    }\n\n    // Perform circular shift\n    for (let i = 0; i < shift; i++) {\n        const lastDigit = digits.pop()!; // Remove the last digit and store it\n        digits.unshift(lastDigit); // Add the removed digit to the beginning of the array\n    }\n\n    return digits.join(''); // Join the digits back into a string\n}\n\n// Check function with provided examples\nconsole.log(circular_shift(12, 1)); // Output: \"21\"\nconsole.log(circular_shift(12, 2)); // Output: \"12\""}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "function isUpperCase(c: string): boolean {\n  return c === c.toUpperCase();\n}\n\nconst digitSum = (s: string) : number => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (IsUpperCase(s[i])) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\")); // Output: 0\nconsole.log(digitSum(\"abAB\")); // Output: 131\nconsole.log(digitSum(\"abcCd\")); // Output: 67\nconsole.log(digitSum(\"helloE\")); // Output: 69\nconsole.log(digitSum(\"woArBld\")); // Output: 131\nconsole.log(digitSum(\"aAaaaXA\")); // Output: 153"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "interface IFruitDistribution {\n    apples: number;\n    oranges: number;\n}\n\nconst fruit_distribution = (s: string, n: number): number => {\n    const fruitRegex = /(\\d+) apples and (\\d+) oranges/gm;\n    let match = fruitRegex.exec(s);\n  \n    if(!match){\n        throw new Error(\"Invalid input string format\");\n    }\n\n    const {apples, oranges} = <IFruitDistribution>{\n        apples: parseInt(match[1]),\n        oranges: parseInt(match[2])\n    };\n\n    return n - apples - oranges;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19)); // -> 8\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\",3));  // -> 2\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100)); // -> 95\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\",120)); // -> 19"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "const pluck = function (arr: Array<number>) : Array<number>  {\n    let smallestEvenValue: number | null = null;\n    let smallestIndex: number = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (smallestEvenValue === null || arr[i] < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n                smallestIndex = i;\n            }\n        }\n    }\n\n    return smallestEvenValue !== null ? [smallestEvenValue, smallestIndex] : [];\n};"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "function frequencyMap(lst: Array<number>): Map<number, number> {\n    let freqMap = new Map<number, number>();\n\n    for(let num of lst) {\n        if(freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num)! + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n\n    return freqMap;\n}\n\nconst search = function (lst: Array<number>): number  {\n    let freqMap = frequencyMap(lst);\n\n    for(let [key, value] of freqMap) {\n        if(key <= value && key > 0) return key;\n    }\n\n    return -1;\n}"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "const strange_sort_list = (lst: Array<number>): Array<number> => {\n    let sortedList = [...lst].sort((a, B) => A - B);\n    let result: Array<number> = [];\n    while(sortedList.length > 0){\n        result.push(sortedList.shift()!);\n        if (sortedList.length === 0) break;\n        result.push(sortedList.pop()!);\n    }\n    return result;\n};\n\nconsole.log(strange_sort_list([1, 2, 3, 4]));  // Output: [1, 4, 2, 3]\nconsole.log(strange_sort_list([5, 5, 5, 5]));  // Output: [5, 5, 5, 5]\nconsole.log(strange_sort_list([]));            // Output: []"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "const triangle_area = function(A: number, B: number, C: number): number {\n    if (A + B <= C || A + C <= B || B + C <= A) {\n        return -1;  // Triangle is not valid\n    } else {\n        let semiPerimeter = (A + B + C) / 2;\n        let area = Math.sqrt(semiPerimeter * (semiPerimeter - A) * (semiPerimeter - B) * (semiPerimeter - C));\n        return parseFloat(area.toFixed(2));  // Returns area rounded to 2 decimal points\n    }\n};\n\nconsole.log(triangle_area(3, 4, 5));  // Output: 6.00\nconsole.log(triangle_area(1, 2, 10));  // Output: -1"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number) : boolean  {\n    // Check if array is palindrome\n    if (JSON.stringify(q) !== JSON.stringify(q.reverse())) {\n        return false;\n    }\n\n    // Calculate sum of elements in array\n    let sum = 0;\n    for (let num of q) {\n        sum += num;\n    }\n\n    // Check if sum is less than or equal to maximum possible weight\n    if (sum > w) {\n        return false;\n    }\n\n    // If both conditions are satisfied, object will fly\n    return true;\n};"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "const smallest_change = function(arr: Array<number>): number {\n    let count = 0;\n    for (let i = 0, j = arr.length - 1; i < j; i++, j--) {\n        if (arr[i] !== arr[j]) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(smallest_change([1,2,3,5,4,7,9,6])) // prints 4\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2])) // prints 1\nconsole.log(smallest_change([1, 2, 3, 2, 1])) // prints 0"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "const total_match = function (lst1: Array<string>, lst2: Array<string>) : Array<string>  {\n    let count1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let count2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n\n    return count1 < count2 ? lst1 : lst2;\n}\n\nconsole.log(total_match([], [])); // []\nconsole.log(total_match(['hi', 'admin'], ['hI', 'Hi'])); // ['hI', 'Hi']\nconsole.log(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // ['hi', 'admin']\nconsole.log(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])); // ['hI', 'hi', 'hi']\nconsole.log(total_match(['4'], ['1', '2', '3', '4', '5'])); // ['4']"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "const Is_multiply_prime = (A: number): boolean => {\n  // Helper function to check if a number is prime\n  const isPrime = (num: number): boolean => {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n  }\n\n  // Find first three prime numbers less than 100\n  const primes: number[] = [];\n  for (let n = 2; primes.length < 3 && n < 100; n++) {\n    if (isPrime(n)) {\n      primes.push(n);\n    }\n  }\n\n  // Check if product of first three primes equals A\n  return primes.reduce((acc, val) => acc * val, 1) === A;\n};\n\nconsole.log(Is_multiply_prime(30)); // Output: true"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "const Is_simple_power = function (x: number, n: number): boolean {\n    if (n <= 0 || x <= 0) {\n        return false;\n    }\n\n    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n};"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "const IsCube = (A: number): boolean => {\n    // Calculate the cube root of A and round it to the nearest integer\n    let cubeRoot = Math.round(Math.pow(Math.abs(A), 1/3));\n\n    // Return true if the cube of this rounded value equals A, otherwise false\n    return Math.pow(cubeRoot, 3) === A;\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "function hex_key(num: string): number {\n    let primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n\n    for (let i = 0; i < num.length; i++) {\n        if (primeHexDigits.includes(num[i])) {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    // Convert the decimal number to binary using built-in JavaScript method\n    let binaryStr = decimal.toString(2);\n\n    // Add leading and trailing 'db' characters\n    return `db${binaryStr}db`;\n};\n\nconsole.log(decimal_to_binary(15)); // \"db1111db\"\nconsole.log(decimal_to_binary(32)); // \"db100000db\""}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "function Is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(Is_happy('a')); // Output: False\nconsole.log(Is_happy('aa')); // Output: False\nconsole.log(Is_happy('abcd')); // Output: True\nconsole.log(Is_happy('Aabb')); // Output: False\nconsole.log(Is_happy('adb')); // Output: True\nconsole.log(Is_happy('xyy')); // Output: False"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "const numerical_letter_grade = function(grades: Array<number>): Array<string> {\n    let letterGrades: Array<string> = [];\n    for (let gpa of grades) {\n        if (gpa === 4.0) letterGrades.push('A+');\n        else if (gpa > 3.7) letterGrades.push('A');\n        else if (gpa > 3.3) letterGrades.push('A-');\n        else If (gpa > 3.0) letterGrades.push('B+');\n        else If (gpa > 2.7) letterGrades.push('B');\n        else If (gpa > 2.3) letterGrades.push('B-');\n        else If (gpa > 2.0) letterGrades.push('C+');\n        else If (gpa > 1.7) letterGrades.push('C');\n        else If (gpa > 1.3) letterGrades.push('C-');\n        else If (gpa > 1.0) letterGrades.push('D+');\n        else If (gpa > 0.7) letterGrades.push('D');\n        else If (gpa > 0.0) letterGrades.push('D-');\n        else letterGrades.push('E');\n    }\n    return letterGrades;\n};\n\n// Test the function with example data\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "function primeLength(str: string): boolean {\n    const length = str.length;\n\n    if (length < 2) return false; // Prime numbers are at least 2 digits long\n\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) return false; // If divisible by any number up to its square root, it's not prime\n    }\n\n    return true; // If no divisors were found, the length is prime\n}\n\n// Test cases\nconsole.log(primeLength('Hello')); // true\nconsole.log(primeLength('abcdcba')); // true\nconsole.log(primeLength('kittens')); // true\nconsole.log(primeLength('orange')); // false"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "/**\n * This function calculates the count of n-digit positive integers that start or end with 1\n * \n * @param {number} n - The number of digits for the positive integer to consider.\n * \n * @return {number} - The count of numbers meeting the criteria.\n */\nconst starts_one_ends = (n: number): number => {\n    // If n is less than or equal to 1, there are no such numbers\n    if (n <= 1) return 0;\n\n    // Calculate the count of n-digit numbers starting with 1.\n    let startsWithOne = Math.pow(10, n - 1);\n\n    // Calculate the count of n-digit numbers ending with 1.\n    let endsWithOne = Math.pow(10, n - 1);\n\n    // Since we've double-counted the numbers that both start and end with 1, subtract one from the total.\n    return startsWithOne + endsWithOne - 1;\n}"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "const solve = function (N: number) : string  {\n    // Calculate the sum of the digits\n    let sumOfDigits = N.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n\n    // Convert the sum to a binary string\n    return sumOfDigits.toString(2);\n};"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "const add = function (lst: Array<number>): number {\n    let sum = 0;\n    for(let i=1; i<lst.length; i+=2) {\n        if(lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "const anti_shuffle = (s: string): string => {\n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "const get_row = (lst: Array<Array<number>>, x: number): Array<[number, number]> => {\n  let result: Array<[number, number]> = []; // Initialize an empty array to store the coordinates of matching elements.\n\n  for (let rowIndex = 0; rowIndex < lst.length; rowIndex++) {\n    for (let columnIndex = 0; columnIndex < lst[rowIndex].length; columnIndex++) {\n      if (lst[rowIndex][columnIndex] === x) {\n        result.push([rowIndex, columnIndex]); // Add the coordinates of matching element to the result array.\n      }\n    }\n  }\n\n  // Sort the array by row in ascending order and then by column in descending order within each row.\n  result.sort((a, B) => {\n    if (A[0] === B[0]) {\n      return B[1] - A[1]; // If rows are equal, sort by column in descending order.\n    }\n    return A[0] - B[0]; // Otherwise, sort by row in ascending order.\n  });\n\n  return result; // Return the final sorted array of coordinates.\n};"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "function sortArray(arr: number[]): number[] {\n    // First, we need to check if the array is empty or has only one element\n    if (arr.length <= 1) {\n        return [...arr]; // Return a copy of the original array in these cases\n    }\n\n    // Calculate the sum of the first and last elements\n    const sum = arr[0] + arr[arr.length - 1];\n\n    // Create a new copy of the array to avoid modifying the original array\n    let sortedArr = [...arr];\n\n    // Sort the array in ascending order if the sum is odd, or in descending order if it's even\n    if (sum % 2 === 0) {\n        sortedArr.sort((a, B) => B - A); // Descending order\n    } else {\n        sortedArr.sort(); // Ascending order\n    }\n\n    return sortedArr;\n}"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const encrypt = function(s: string): string {\n    // Define the alphabet as a string\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\n    // Initialize an empty string for the encrypted result\n    let encryptedResult = '';\n\n    // Loop through each character in the input string s\n    for(let i=0; i<s.length; i++){\n        // Find the current index of the character in the alphabet string \n        let currentIndex = alphabet.indexOf(s[i]);\n\n        // Calculate new index after shifting down by two multiplied to two places\n        let newIndex = (currentIndex + (2 * 2)) % 26;\n\n        // Append the corresponding encrypted character to the result string\n        encryptedResult += alphabet[newIndex];\n    }\n\n    // Return the final encrypted result string\n    return encryptedResult;\n};\n\nconsole.log(encrypt('hi')); // Outputs: 'lm'\nconsole.log(encrypt('asdfghjkl')); // Outputs: 'ewhjklnop'\nconsole.log(encrypt('gf')); // Outputs: 'kj'\nconsole.log(encrypt('et')); // Outputs: 'ix'"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const next_smallest = function(lst: Array<number>): number | null {\n    if (lst.length < 2) return null; // Return null if there are less than two elements in the array\n  \n    let smallest: number | null = lst[0];\n    let secondSmallest: number | null = null;\n\n    for(let i=1; i<lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest; // Update the second smallest to be the old smallest\n            smallest = lst[i]; // Set the new smallest element\n        } else if ((lst[i] > smallest) && (secondSmallest === null || lst[i] < secondSmallest)) {\n            // If the current element is greater than the smallest but less than the second smallest, update second smallest.\n            secondSmallest = lst[i]; \n        }\n    }\n\n    return secondSmallest; // Return the second smallest or null if not found\n};"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const Is_bored = (S: string): number => {\n    let boredomsCount = 0;\n    const sentences = S.split(/[\\.\\?\\!]\\s*/);\n\n    for (const sentence of sentences) {\n        if (sentence.startsWith(\"I\")) {\n            boredomsCount++;\n        }\n    }\n\n    return boredomsCount;\n};"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "const Any_int = function (x: number, y: number, z: number): boolean {\n    return (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) \n        && ((x === y + z) || (y === x + z) || (z === x + y));\n}\n\nconsole.log(Any_int(5, 2, 7));  // true\nconsole.log(Any_int(3, 2, 2));  // false\nconsole.log(Any_int(3, -2, 1)); // true\nconsole.log(Any_int(3.6, -2.2, 2)); // false"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const vowels = 'aeiou';\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\nfunction getCharacterOffset(char: string): number {\n    let index = alphabet.indexOf(char.toLowerCase());\n\n    // If character is not a vowel, return it as it is\n    if (index === -1) return index;\n\n    // Calculate the new offset by adding 2 to the current vowel's position\n    let newIndex = (index + 2) % alphabet.length;\n    return newIndex;\n}\n\nfunction swapCaseAndEncode(char: string): string {\n    if (char === char.toUpperCase()) {\n        return char.toLowerCase();\n    } else {\n        let index = getCharacterOffset(char);\n        if (index !== -1) {\n            // If it's a vowel, return the new character\n            return alphabet[index];\n        } else {\n            // If it's not a vowel, just swap case\n            return char.toUpperCase();\n        }\n    }\n}\n\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        result += swapCaseAndEncode(message[i]);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    for(let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "const check_dict_case = (dict: Record<string, string>): boolean => {\n    if(Object.keys(dict).length === 0) return false; // Return False if dictionary is empty\n    let allLowerCase = true;\n    let AllUpperCase = true;\n\n    for(const key in dict){\n        if(typeof key !== 'string'){\n            return false; // If any key is not a string, return False.\n        }\n        if(key !== key.toLowerCase()){\n            AllLowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            AllUpperCase = false;\n        }\n    }\n\n    return AllLowerCase || AllUpperCase; // Return True if all keys are either all Lower Case or All Upper Case, else return False.\n};"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    for(let i = 2; i <= Math.sqrt(num); i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconst count_up_to = function (n: number) : Array<number>  {\n    let primes: Array<number> = [];\n    for(let i = 2; i < n; i++){\n        if(IsPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\nconsole.log(count_up_to(5)); // => [2,3]\nconsole.log(count_up_to(11)); // => [2,3,5,7]\nconsole.log(count_up_to(0)); // => []\nconsole.log(count_up_to(20)); // => [2,3,5,7,11,13,17,19]\nconsole.log(count_up_to(1)); // => []\nconsole.log(count_up_to(18)); // => [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function (A: number, B: number): number {\n    // Extract the unit digit from each integer by taking the remainder when divided by 10\n    let unitDigitA = Math.abs(A % 10);\n    let unitDigitB = Math.abs(B % 10);\n\n    // Return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "const countUpperVowelsInEvenIndices = (str: string): number => {\n    let count = 0;\n    for(let i=0; i<str.length; i+=2) { // iterate over even indices\n        const char = str[i];\n        if(['A', 'E', 'I', 'O', 'U'].includes(char)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(countUpperVowelsInEvenIndices('aBCdEf')); // 1\nconsole.log(countUpperVowelsInEvenIndices('abcdefg')); // 0\nconsole.log(countUpperVowelsInEvenIndices('dBBE')); // 0"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "import { round, abs } from 'mathjs';\n\n/**\n * Takes a value (string) representing a number and returns the closest integer to it.\n * If the number is equidistant from two integers, round it away from zero.\n * \n * Examples:\n * >>> closest_integer(\"10\")\n * 10\n * >>> closest_integer(\"15.3\")\n * 15\n * \n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. For example closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n */\nfunction closest_integer(value: string): number {\n    const num = parseFloat(value);\n    const rounded = round(num);\n    return abs(num - rounded) === 0.5 ? (abs(num) > abs(rounded) ? Math.ceil(num) : Math.floor(num)) : rounded;\n}\n\n// Test the function\nconsole.log(closest_integer(\"10\")); // Output: 10\nconsole.log(closest_integer(\"15.3\")); // Output: 15\nconsole.log(closest_integer(\"14.5\")); // Output: 15\nconsole.log(closest_integer(\"-14.5\")); // Output: -15"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    let pile = [];\n    let currentStones = n;\n\n    for(let i = 0; i < n; i++) {\n        pile.push(currentStones);\n\n        if(n % 2 === 0) { // if n is even\n            currentStones += 2;\n        } else { // If n is odd\n            currentStones += 2;\n        }\n    }\n\n    return pile;\n}\n\nconsole.log(make_a_pile(3));  // Output: [3, 5, 7]"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "const words_string = (s: string): Array<string>  => {\n    return s.split(/[\\s,]+/);\n}"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Check if x is greater than y. If so, return -1\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest possible even number in range [x,y]\n    let num = y % 2 === 0 ? y : y - 1;\n\n    // Loop from this number down to x-1\n    for (let i = num; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n\n    // If we reached here, there are no even numbers in the range [x,y]\n    return -1;\n};"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): string | number {\n    if(n > m){\n        return -1;\n    }\n\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n\n    const average = Math.round(sum / (m - n + 1));\n\n    return `0b${average.toString(2)}`;\n};"}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const unique_digits = (x: Array<number>): Array<number> => {\n  // Helper function to check if an integer has any even digits\n  const hasEvenDigit = (num: number): boolean => {\n    return num.toString().split('').some((digit) => parseInt(digit) % 2 === 0);\n  };\n\n  // Filter out integers with even digits and sort the remaining integers in ascending order\n  return x\n    .filter((num) => !hasEvenDigit(num))\n    .sort((a, B) => A - B);\n};"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "function sortAndReverse(arr: number[]): string[] {\n    // Filter out the numbers that are not between 1 and 9 inclusive\n    const filtered = arr.filter(num => num >= 1 && num <= 9);\n\n    // Sort the array in ascending order\n    filtered.sort((a, B) => A - B);\n\n    // Reverse the sorted array\n    filtered.reverse();\n\n    // Map each digit to its corresponding name\n    const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return filtered.map(num => names[num - 1]);\n}\n\n// Test cases\nconsole.log(sortAndReverse([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(sortAndReverse([])); // []\nconsole.log(sortAndReverse([1, -1, 55])); // ['One']"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const f = function(n: number): Array<number> {\n    let result: Array<number> = [];\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumOfNumbers(i));\n        }\n    }\n\n    return result;\n\n    function factorial(num: number): number {\n        let product = 1;\n        for (let i = 2; i <= num; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    function sumOfNumbers(num: number): number {\n        return (num * (num + 1)) / 2; // using arithmetic series formula to calculate sum of numbers from 1 to num\n    }\n};\n\nconsole.log(f(5));  // Outputs: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number) : [number, number]  {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for(let i = 1; i <= n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\nconst isPalindrome = function (num: number): boolean {\n    let strNum = num.toString();\n    for(let i = 0; i < strNum.length / 2; i++) {\n        if(strNum[i] !== strNum[strNum.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(even_odd_palindrome(3)); // Outputs: [1,2]\nconsole.log(even_odd_palindrome(12)); // Outputs: [4,6]"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "function sumOfDigits(n: number): number {\n    return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}\n\nconst count_nums = function (arr: Array<number>): number  {\n    let count = 0;\n    for (let num of arr) {\n        if (sumOfDigits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n// Test cases\nconsole.log(count_nums([])); // Expected output: 0\nconsole.log(count_nums([-1, 11, -11])); // Expected output: 1\nconsole.log(count_nums([1, 1, 2])); // Expected output: 3"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean  {\n    // First we sort the array in ascending order\n    let sortedArr = [...arr].sort((a, B) => A - B);\n    for(let i = 0; i < sortedArr.length; i++) {\n        // If an index in the sorted array is larger than the previous one by exactly one position\n        if(sortedArr[i] == sortedArr[i-1]+1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(move_one_ball([3, 4, 5, 1, 2])) // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])) // False"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n    // Count the number of odd numbers in lst1 and even numbers in lst2\n    let oddCountLst1 = 0;\n    let evenCountLst2 = 0;\n\n    for (const num of lst1) {\n        if (num % 2 !== 0) oddCountLst1++;\n    }\n\n    for (const num of lst2) {\n        if (num % 2 === 0) evenCountLst2++;\n    }\n\n    // Check if there are enough even numbers in lst2 to exchange with all odd numbers in lst1\n    return oddCountLst1 <= evenCountLst2 ? \"YES\" : \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // Output: \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // Output: \"NO\""}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "const histogram = function (test: string) : Map<string, number> {\n    // Create an empty map to store letter frequencies.\n    let letterFrequencies = new Map<string, number>();\n\n    // Split the input string into individual letters and iterate over them.\n    for(let i=0; i < test.length; i++){\n        let letter = test[i];\n        \n        if (letter != ' ') { // Ignore spaces\n            // If this letter is already in the map, increment its count.\n            if (letterFrequencies.has(letter)) {\n                letterFrequencies.set(letter, letterFrequencies.get(letter)! + 1);\n            } else { // Otherwise, add it to the map with a count of 1.\n                letterFrequencies.set(letter, 1);\n            }\n        }\n    }\n\n    // Find the maximum count among all letters.\n    let maxCount = Math.max(...Array.from(letterFrequencies.values()));\n\n    // Create a new map to store only those letters with the maximum count.\n    let result = new Map<string, number>();\n    for (let [letter, count] of letterFrequencies) {\n        if (count === maxCount) {\n            result.set(letter, count);\n        }\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "const reverseDelete = (s: string, c: string): [string, boolean] => {\n    // Step 1: Remove characters in s that are equal to any character in c.\n    let filteredS = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            filteredS += s[i];\n        }\n    }\n\n    // Step 2: Check if the result string is palindrome.\n    let reversedS = filteredS.split('').reverse().join('');\n    let isPalindrome = filteredS === reversedS;\n\n    return [filteredS, IsPalindrome];\n};\n\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const odd_count = (lst: Array<string>): Array<string> => {\n    return lst.map((str, index) => {\n        const oddCount = str.split('').filter(digit => parseInt(digit) % 2 !== 0).length;\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n};\n\nconsole.log(odd_count(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(odd_count(['3', \"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "function minSubArraySum(nums: Array<number>): number {\n    let currentMin = nums[0];\n    let globalMin = nums[0];\n\n    for (let i = 1; i < nums.length; i++) {\n        currentMin = Math.min(nums[i], currentMin + nums[i]);\n        globalMin = Math.min(globalMin, currentMin);\n    }\n\n    return globalMin;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));  // Output: 1\nconsole.log(minSubArraySum([-1, -2, -3]));  // Output: -6"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "const max_fill = function(grid: Array<Array<number>>, bucketCapacity: number): number {\n    let totalFills = 0;\n\n    // Get the maximum water level in all wells\n    let maxWaterLevel = 0;\n    for (let i = 0; i < grid.length; i++) {\n        maxWaterLevel = Math.max(maxWaterLevel, ...grid[i]);\n    }\n\n    // Calculate the total number of bucket fills needed to empty all wells\n    for (let i = 0; i < maxWaterLevel; i++) {\n        for (let j = 0; j < grid.length; j++) {\n            totalFills += Math.floor(grid[j][i] / bucketCapacity);\n        }\n    }\n\n    return totalFills;\n};"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "const sort_array = (arr: Array<number>) : Array<number>  => {\n    return arr.sort((a, B) => {\n        // Count the number of ones in their binary representation\n        const countOnesA = A.toString(2).split('0').join('').length;\n        const countOnesB = B.toString(2).split('0').join('').length;\n\n        // If they have the same number of ones, sort by decimal value\n        if (countOnesA === countOnesB) {\n            return A - B;\n        }\n\n        // Otherwise, sort by the number of ones\n        return countOnesA - countOnesB;\n    });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "const isConsonant = (char: string): boolean => {\n    return /[bcdfghjklmnpqrstvwxyz]/i.test(char);\n};\n\nexport const select_words = (s: string, n: number): Array<string> => {\n    if (s === \"\") {\n        return [];\n    }\n\n    const words = s.split(\" \").filter((word) => word.length >= 1 && word.split(\"\").every(IsConsonant));\n    const result = words.filter((word) => word.split(\"\").reduce((acc, char) => IsConsonant(char) ? acc + 1 : acc, 0) === n);\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const get_closest_vowel = function (word: string): string {\n    let vowels = 'aeiouAEIOU';\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n            return word[i];\n        }\n    }\n    return '';\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));  // Output: \"u\"\nconsole.log(get_closest_vowel(\"FULL\"));    // Output: \"U\"\nconsole.log(get_closest_vowel(\"quick\"));   // Output: \"\"\nconsole.log(get_closest_vowel(\"ab\"));      // Output: \"\""}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "const match_parens = (lst: Array<string>) : string  => {\n    let openCount = 0;\n    let closeCount = 0;\n\n    // Count the number of open and close parentheses in both strings\n    for(let str of lst) {\n        for(let char of str) {\n            if(char === '(') {\n                openCount++;\n            } else if(char === ')') {\n                closeCount++;\n            }\n        }\n    }\n\n    // If the total number of open parentheses is less than or equal to the total number of close parentheses, then it's possible to make a good string\n    if(openCount <= closeCount) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n};\n\nconsole.log(match_parens(['()(', ')']));  // Output: 'Yes'\nconsole.log(match_parens([')', ')']));   // Output: 'No'"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "import { PriorityQueue } from 'typescript-collections';"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "const solution = (lst: Array<number>): number => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){ // Start from index 0 and increment by 2 for every even position\n        if(lst[i] % 2 !== 0) { // Check if the element is odd\n            sum += lst[i]; // Add it to sum\n        }\n    }\n    return sum;\n};\n\n// Test cases\nconsole.log(solution([5, 8, 7, 1])); // Expected output: 12\nconsole.log(solution([3, 3, 3, 3, 3])); // Expected output: 9\nconsole.log(solution([30, 13, 24, 321])); // Expected output: 0"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    for(let i = 0; i < Math.min(k, arr.length); i++) {\n        if(arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Test the function with example input\nconsole.log(add_elements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "function get_odd_collatz(n: number): number[] {\n    let sequence = [n];\n    while(n !== 1){\n        if(n % 2 === 0){\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        sequence.push(n);\n    }\n    return sequence.filter((num) => num % 2 !== 0).sort((a, B) => A - B);\n}\n\nconsole.log(get_odd_collatz(5)); // prints [1, 5]"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "const validDate = (dateStr: string): boolean => {\n    // Check if date string is empty\n    if (!dateStr) {\n        return false;\n    }\n\n    // Create a regular expression pattern for validating the date format mm-dd-yyyy\n    const regex = /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/;\n\n    // Test the date string against the regular expression\n    const match = dateStr.match(regex);\n\n    if (!match) {\n        return false;\n    }\n\n    // Extract month, day, and year from the matched groups\n    const [_, monthStr, dayStr, year] = match;\n\n    // Convert month, day, and year to integers\n    const month = parseInt(monthStr);\n    const day = parseInt(dayStr);\n\n    // Check if month is within valid range\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if day is within valid range for the given month\n    if ((month === 2 && day < 1 || day > 29) ||\n        (month === 4 || month === 6 || month === 9 || month === 11 && day < 1 || day > 30)) {\n        return false;\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n};"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "const split_words = function (txt: string) : any  {\n    // Check for spaces \n    if(txt.includes(' ')) {\n        return txt.split(' ');\n    }\n    // Check for commas \n    else if(txt.includes(',')) {\n        return txt.split(',');\n    }\n    // Counting the number of lower-case letters with odd order in the alphabet\n    else {\n        let count = 0;\n        for(let i=0; i<txt.length; i++) {\n            if(txt[i] >= 'a' && txt[i] <= 'z') {\n                let asciiCode = txt.charCodeAt(i) - 'a'.charCodeAt(0);\n                if(AsciiCode % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n\n// Test cases\nconsole.log(split_words(\"Hello world!\")); // Output: [\"Hello\", \"world!\"]\nconsole.log(split_words(\"Hello,world!\")); // Output: [\"Hello\", \"world!\"]\nconsole.log(split_words(\"abcdef\"));       // Output: 3"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "const Is_sorted = (lst: Array<number>) : boolean  => {\n    let prev: number|undefined = undefined;\n    let duplicates: Set<number> = new Set();\n\n    for(let num of lst) {\n        if(prev !== undefined && num < prev){\n            return false;\n        }\n        duplicates.add(num);\n        if(duplicates.size != lst.length){\n            return false;\n        }\n        prev = num;\n    }\n\n    return true;\n};"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if(num <= 1) return false;\n    for(let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n        if(num % i === 0) return false;\n    }\n    return true;\n}\n\nconst intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    // Calculate the start and end of the intersection\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    // If there's no intersection, return \"NO\"\n    if(start > end) return \"NO\";\n\n    // Calculate the length of the intersection and check if it is a prime number\n    let len = end - start + 1;\n    return isPrime(len) ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "const prod_signs = function(arr: Array<number>) : any {\n    if (arr.length === 0) return null; // check if array is empty\n\n    let signProduct = arr.reduce((acc, val) => acc * Math.sign(val), 1); // calculate product of signs\n    let magnitudeSum = arr.reduce((acc, val) => acc + Math.abs(val), 0); // calculate sum of magnitudes\n\n    return signProduct * magnitudeSum; // multiply and return result\n}"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "function minPath(grid: number[][], k: number): number[] {\n    const N = grid.length;\n    const indices = Array.from({length: N*N}, (_, i) => i);\n    indices.sort((a, B) => grid[Math.floor(A/N)][A%N] - grid[Math.floor(B/N)][B%N]);\n\n    const visited = new Set();\n    visited.add(0);\n\n    const priorityQueue: {cell: number, path: number[]}[] = [{cell: 0, path: [grid[0][0]]}];\n\n    for (let i=1; i<k; i++) {\n        const { cell } = priorityQueue.shift();\n        const neighbors = indices.filter(n => Math.abs(n - cell) == 1);\n        neighbors.forEach(n => {\n            if (!visited.has(n)) {\n                visited.add(n);\n                priorityQueue.push({cell: n, path: [...path, grid[Math.floor(n/N)][n%N]]});\n            }\n        });\n    }\n\n    return priorityQueue.shift().path;\n}"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "function tribonacciSequence(n: number): number[] {\n    if (n < 0) throw new Error('Input must be a non-negative integer');\n\n    let sequence = [1, 3, 2]; // initializing the sequence with its first three numbers\n\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            sequence.push(1 + i / 2);\n        } else {\n            sequence.push(sequence[i - 1] + sequence[i - 2] + sequence[i + 1]);\n        }\n    }\n\n    return sequence;\n}\n\nconsole.log(tribonacciSequence(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "const digits = function (n: number): number {\n    let product = 1;\n    let hasOdd = false;\n\n    while(n > 0) {\n        let digit = n % 10; // get the last digit of n\n\n        if (digit % 2 !== 0) { // check if the digit is odd\n            product *= digit; // multiply product by digit\n            hasOdd = true;\n        }\n\n        n = Math.floor(n / 10); // remove the last digit from n\n    }\n\n    return hasOdd ? product : 0;\n};"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "const Is_nested = (string0: string): boolean => {\n  let depth = 0;\n  for (let char of string0) {\n    if (char === '[') {\n      depth++;\n    } else if (char === ']') {\n      depth--;\n      if (depth < 0) {\n        return false; // More closing brackets than opening ones, not valid subsequence\n      }\n    }\n  }\n  return depth > 0; // True if there's at least one nested bracket\n};\n\nconsole.log(Is_nested('[[]]')); // true\nconsole.log(Is_nested('[]]]]]]][[[[[]')); // false\nconsole.log(Is_nested('[][]')); // false\nconsole.log(Is_nested('[]')); // false\nconsole.log(Is_nested('[[][]]')); // true\nconsole.log(Is_nested('[[]][[')); // true"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>) : number  {\n    return Math.floor(lst.map(Math.ceil).reduce((a,B) => A + B*B, 0));\n}\n\nconsole.log(sum_squares([1,2,3])); // Output: 14\nconsole.log(sum_squares([1,4,9])); // Output: 98\nconsole.log(sum_squares([1,3,5,7])); // Output: 84\nconsole.log(sum_squares([1.4,4.2,0])); // Output: 29\nconsole.log(sum_squares([-2.4,1,1])); // Output: 6"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "const checkIfLastCharIsALetter = function(txt: string): boolean {\n    // Trim any trailing spaces from the input string.\n    txt = txt.trimEnd();\n\n    // If the last character is not a letter, return false.\n    if (!/^[a-zA-Z]$/.test(txt.charAt(txt.length - 1))) {\n        return false;\n    }\n\n    // Check if the second to last character is also a letter. If it is, then this last character is part of a word and we should return false.\n    if (/^[a-zA-Z]$/.test(txt.charAt(txt.length - 2))) {\n        return false;\n    }\n\n    // Otherwise, the last character is not part of a word and we should return true.\n    return true;\n};"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i-1]) {\n            return i;\n        }\n    }\n    return -1;\n};"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "const largest_smallest_integers = (lst: Array<number>) : Array<any> => {\n    let negativeIntegers: number[] = lst.filter(n => n < 0);\n    let positiveIntegers: number[] = lst.filter(n => n > 0);\n\n    let largestNegative: any = negativeIntegers.length ? Math.max(...negativeIntegers) : null;\n    let smallestPositive: any = positiveIntegers.length ? Math.min(...positiveIntegers) : null;\n\n    return [largestNegative, smallestPositive];\n};\n\n// Test cases:\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largest_smallest_integers([])); // Output: [null, null]\nconsole.log(largest_smallest_integers([0])); // Output: [null, null]"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "function compare_one(A: any, B: any): any {\n    // Convert strings to numbers if necessary\n    const numA = typeof A === 'string' ? parseFloat(A.replace(',', '.')) : A;\n    const numB = typeof B === 'string' ? parseFloat(B.replace(',', '.')) : B;\n\n    // Check for equality\n    if (numA === numB) {\n        return null; // Return undefined or null for equality, as per usual convention\n    }\n\n    // Compare the numbers\n    const isANum = typeof A !== 'string';\n    const IsBNum = typeof B !== 'string';\n    if ((IsANum && numA > numB) || (IsBNum && numB < numA)) {\n        return A; // Return A if it's larger, otherwise return B\n    } else {\n        return B;\n    }\n}\n\n// Test cases\nconsole.log(compare_one(1, 2.5)); // \u279e 2.5\nconsole.log(compare_one(1, \"2,3\")); // \u279e \"2,3\"\nconsole.log(compare_one(\"5,1\", \"6\")); // \u279e \"6\"\nconsole.log(compare_one(\"1\", 1)); // \u279e null"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "const Is_equal_to_sum_even = (n: number): boolean => {\n    // An integer cannot be expressed as the sum of 4 positive even integers if it is less than 8\n    if (n < 8) return false;\n\n    // If n is even and greater than or equal to 8, it can always be expressed as the sum of four even numbers\n    return n % 2 === 0;\n};"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "const brazilian_factorial = function (n: number): number {\n    let result = 1;\n    for(let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n};\n\nfunction factorial(n: number): number {\n    let fact = 1;\n    for(let i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(brazilian_factorial(4)); // Outputs: 288"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "const fix_spaces = function (text: string): string {\n    return text.replace(/ {2,}/g, '-').replace(/(^ | )/g, '_');\n}\n\n// Test cases\nconsole.log(fix_spaces(\"Example\")); // \"Example\"\nconsole.log(fix_spaces(\"Example 1\")); // \"Example_1\"\nconsole.log(fix_spaces(\" Example 2\")); // \"_Example_2\"\nconsole.log(fix_spaces(\" Example3\")); // \"_Example-3\""}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "function file_name_check(file_name: string): string {\n    // Regular expression to match valid file name\n    const regex = /^[a-zA-Z][a-zA-Z0-9]{0,}[.](txt|exe|dll)$/;\n\n    // Check if the file name matches the regular expression and contains no more than three digits\n    if (regex.test(file_name) && (file_name.match(/[0-9]/g) || []).length <= 3) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n// Test cases\nconsole.log(file_name_check(\"example.txt\")); // Output: Yes\nconsole.log(file_name_check(\"1example.dll\")); // Output: No (the name should start with a latin alphapet letter)"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "const sum_squares = (lst: number[]): number => {\n    return lst.reduce((sum, num) => sum + num * num, 0);\n};"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2, s = Math.sqrt(n); i <= s; i++)\n        if (n % i === 0) return false;\n    return true;\n}\n\nconst words_in_sentence = function (sentence: string): string {\n    const words = sentence.split(' ').filter(word => isPrime(word.length));\n    return words.join(' ');\n}"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    // Split the fractions into numerator and denominator\n    const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n\n    // Calculate the product of the two fractions\n    const productNumerator = numeratorX * numeratorN;\n    const productDenominator = denominatorX * denominatorN;\n\n    // Check if the product is a whole number\n    return productNumerator % productDenominator === 0;\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\")); // Output: true\nconsole.log(simplify(\"1/6\", \"2/1\")); // Output: false\nconsole.log(simplify(\"7/10\", \"10/2\")); // Output: false"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "const order_by_points = (nums: Array<number>) : Array<number>  => {\n    return nums.sort((a, B) => {\n        let sumA = A.toString().split('').reduce((sum, digit) => sum + Math.abs(parseInt(digit)), 0);\n        let sumB = B.toString().split('').reduce((sum, digit) => sum + Math.abs(parseInt(digit)), 0);\n\n        if (sumA === sumB) {\n            return nums.indexOf(A) - nums.indexOf(B);\n        } else {\n            return sumA - sumB;\n        }\n    });\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "function specialFilter(nums: number[]): number {\n    return nums.filter(n => n > 10 && isFirstAndLastDigitOdd(n)).length;\n}\n\nfunction IsFirstAndLastDigitOdd(num: number): boolean {\n    let strNum = Math.abs(num).toString(); // convert to string and handle negative numbers\n    return parseInt(strNum[0]) % 2 !== 0 && parseInt(strNum[strNum.length - 1]) % 2 !== 0;\n}"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "function get_max_triples(n: number): number {\n    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i * i - i + 1);\n    }\n\n    let count: number = 0;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = i + 1; j < A.length; j++) {\n            for (let k = j + 1; k < A.length; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\nconsole.log(get_max_triples(5));  // Output: 1"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const bf = (planet1: string, planet2: string): Array<string> => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1]; // swap the indexes if planet1 is farther from the Sun than planet2\n  }\n\n  return planets.slice(index1 + 1, index2);\n};\n\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "const list_sort = (lst: Array<string>) : Array<string> => {\n    // Filter out strings with odd lengths, then sort the remaining strings by length and alphabetically.\n    return lst.filter(word => word.length % 2 === 0)\n              .sort((a, B) => A.length - B.length || A.localeCompare(B));\n};\n\n// Example usage:\nconsole.log(list_sort([\"aa\", \"A\", \"aaa\"])); // Output: [\"aa\"]\nconsole.log(list_sort([\"ab\", \"A\", \"aaa\", \"cd\"])); // Output: [\"ab\", \"cd\"]"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number): number {\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n};\n\nfunction isPrime(num){\n    for(let i=2, sqrt = Math.sqrt(num); i<=sqrt; i++){\n        if(num%i == 0) return false; \n    }\n    return num > 1;\n}"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "function double_the_difference(arr: Array<number>): number {\n    // Initialize the result to 0\n    let sumOfSquares = 0;\n\n    // Iterate through each element in the array\n    for (let num of arr) {\n        // Check if the number is an integer, not negative and odd\n        if (Number.isInteger(num) && num >= 0 && num % 2 !== 0) {\n            // Add the square of the number to the result\n            sumOfSquares += num * num;\n        }\n    }\n\n    // Return the final result\n    return sumOfSquares;\n}\n\n// Test cases\nconsole.log(double_the_difference([1, 3, 2, 0])); // Output: 10\nconsole.log(double_the_difference([-1, -2, 0])); // Output: 0\nconsole.log(double_the_difference([9, -2])); // Output: 81\nconsole.log(double_the_difference([0])); // Output: 0\nconsole.log(double_the_difference([])); // Output: 0"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "function compare(game: number[], guess: number[]): number[] {\n    let result = [];\n\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n\n    return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2, -2]));  // Output: [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0, -2])); // Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "function strongestExtension(className: string, extensions: string[]): string {\n    let strongestStrength = -Infinity;\n    let strongestExtension = '';\n\n    for (const extension of extensions) {\n        const uppercaseCount = (extension.match(/[A-Z]/g) || []).length;\n        const lowercaseCount = (extension.match(/[a-z]/g) || []).length;\n\n        const strength = uppercaseCount - lowercaseCount;\n\n        if (strength > strongestStrength) {\n            strongestStrength = strength;\n            strongestExtension = extension;\n        } else if (strength === strongestStrength && extensions.indexOf(strongestExtension) > extensions.indexOf(extension)) {\n            // If two extensions have the same strength, choose the one that comes first in the list\n            strongestStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return `${className}.${strongestExtension}`;\n}"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const cycpattern_check = function (A: string, B: string): boolean {\n    // Concatenate A with itself and check if B or any of its rotations is a substring of this new word\n    for(let i=0; i<B.length; i++) {\n        const rotation = B.slice(i) + B.slice(0, i);\n        if (A.includes(rotation)) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "const even_odd_count = function (num: number): [number, number] {\n    let strNum = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 0; i < strNum.length; i++) {\n        if (parseInt(strNum[i]) % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\nconsole.log(even_odd_count(-12)); // Output: [1, 1]\nconsole.log(even_odd_count(123)); // Output: [1, 2]"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "function int_to_mini_roman(number0: number): string {\n    if (number0 < 1 || number0 > 1000) throw new Error(\"Input should be between 1 and 1000\");\n\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n\n    let roman = '';\n\n    for (const { value, numeral } of romanNumerals) {\n        while (number0 >= value) {\n            roman += numeral;\n            number0 -= value;\n        }\n    }\n\n    return roman.toLowerCase();\n}\n\nconsole.log(int_to_mini_roman(19));  // Output: xix\nconsole.log(int_to_mini_roman(152)); // Output: clii\nconsole.log(int_to_mini_roman(426)); // Output: cdxxvi"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const right_angle_triangle = (A: number, B: number, C: number): boolean => {\n    // Sorting the sides in ascending order to make it easier to identify the hypotenuse.\n    let sides = [A, B, C].sort((a, b) => a - b);\n\n    // Checking if the square of the longest side equals the sum of squares of other two sides.\n    return Math.pow(sides[2], 2) === (Math.pow(sides[0], 2) + Math.pow(sides[1], 2));\n};"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "const find_max = function(words: Array<string>): string {\n    let maxUniqueChars = 0;\n    let maxWord = \"\";\n  \n    for (const word of words) {\n        const uniqueCharsCount = new Set(word).size;\n        if (uniqueCharsCount > maxUniqueChars || (uniqueCharsCount === maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueCharsCount;\n            maxWord = word;\n        }\n    }\n\n    return maxWord;\n};"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "const eat = function (number: number, need: number, remaining: number) : Array<number>  {\n    // Calculate how many carrots can be eaten based on the remaining carrots\n    let canEat = Math.min(need, remaining);\n\n    // Update the total number of eaten carrots and remaining carrots\n    let totalEaten = number + canEat;\n    let leftOverCarrots = remaining - canEat;\n\n    return [totalEaten, leftOverCarrots];\n};"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "function Do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n            default:\n                throw new Error(`Invalid operator: ${operator[i]}`);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(Do_algebra(['+', '*', '-'], [2, 3, 4, 5]));  // Outputs: 9"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "function solve(s: string): string {\n    let hasLetters = false;\n    let result = '';\n\n    for (let char of s) {\n        if (char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z') {\n            hasLetters = true;\n            result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n\n    return hasLetters ? result : result.split('').reverse().join('');\n}\n\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\"));   // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "import * as crypto from 'crypto';\n\nconst string_to_md5 = function(text: string): string | null {\n    if (text === \"\") return null;\n\n    return crypto.createHash('md5').update(text).digest('hex');\n};\n\nconsole.log(string_to_md5(\"Hello world\")); // Outputs: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "const generate_integers = (A: number, B: number): Array<number> => {\n  // Sort A and B in ascending order\n  if(A > B) {\n    [A, B] = [B, A];\n  }\n\n  // Initialize an empty array to store the even digits\n  let result: Array<number> = [];\n\n  // Loop through the range of numbers from A to B (inclusive)\n  for(let i = A; i <= B; i++) {\n    // Check if the current number is even\n    if(i % 2 === 0) {\n      // If it's even, add it to the result array\n      result.push(i);\n    }\n  }\n\n  // Return the sorted array of even digits\n  return result.sort((a, B) => A - B);\n};"}

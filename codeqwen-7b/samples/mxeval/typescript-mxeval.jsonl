{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "const has_close_elements = function (numbers: Array<number>, threshold: number): boolean {\n    let sortedNumbers = numbers.sort((a, b) => a - B);\n    for(let i = 0; i < sortedNumbers.length - 1; i++) {\n        if(sortedNumbers[i + 1] - sortedNumbers[i] <= threshold){\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(has_close_elements([1.0, 2.0, 3.0], 0.5)); // Output: False\nconsole.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // Output: True"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "const separate_paren_groups = (parenString: string): Array<string> => {\n    const result: Array<string> = [];\n    let stack: Array<string> = [];\n    let currentGroup = '';\n\n    for(let char of parenString.replace(/\\s/g, '')){\n        if (char === '('){\n            stack.push(char);\n            currentGroup += char;\n        }else if (char === ')' && stack.length > 0){\n            stack.pop();\n            currentGroup += char;\n            if (stack.length === 0){\n                result.push(currentGroup);\n                currentGroup = '';\n            }\n        }\n    }\n\n    return result;\n}\n\nconsole.log(separate_paren_groups('( ) (( )) (( )( ))')); // ['()', '(())', '(()())']"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "const truncate_number = function (number0: number) : number  {\n    return number0 - Math.floor(number0);\n}"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n    for(let op of operations) {\n        balance += op;\n        if(balance < 0) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean_absolute_deviation = function(numbers: Array<number>): number {\n    // Calculate the mean of the dataset\n    let sum = numbers.reduce((acc, val) => acc + val, 0);\n    let mean = sum / numbers.length;\n\n    // Calculate the absolute differences from the mean and calculate their average\n    let deviations = numbers.map(num => Math.abs(num - mean));\n    let mad = deviations.reduce((acc, val) => acc + val, 0) / numbers.length;\n\n    return mad;\n}"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "const intersperse = (numbers: Array<number>, delimeter: number) : Array<number> => {\n    if(numbers.length <= 1){ // Check if the array has one or no elements\n        return numbers;\n    }\n    let result: Array<number> = []; // Initialize a new empty array to hold the result\n    for(let i=0; i < numbers.length - 1; i++){ // Iterate over all elements except the last one\n        result.push(numbers[i]); // Add current element to result array\n        result.push(delimeter); // Add delimiter to result array\n    }\n    result.push(numbers[numbers.length-1]); // Add the last element of input array to the result array\n    return result; // Return the result array\n};\n\nconsole.log(intersperse([], 4)); // Output: []\nconsole.log(intersperse([1, 2, 3], 4)); // Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parse_nested_parens = function (paren_string: string) : Array<number>  {\n    // Split input into groups based on space delimiter\n    let groups = paren_string.split(' ');\n    let maxDepths = [];\n\n    for(let group of groups){\n        let depth = 0;\n        let maxDepth = 0;\n        for(let char of group){\n            if(char === '(') depth++;\n            else if(char === ')') depth--;\n            // Update maximum depth if current depth is greater than it\n            if(depth > maxDepth) maxDepth = depth;\n        }\n        maxDepths.push(maxDepth);\n    }\n\n    return maxDepths;\n};"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "const filter_by_substring = (strings: Array<string>, substring: string): Array<string> => {\n    return strings.filter((str) => str.includes(substring));\n};"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>) : [number, number]  {\n    let sum = 0;\n    let product = 1;\n\n    if(numbers.length == 0){\n        return [sum, product];\n    }\n\n    for(let i=0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n};"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const rolling_max = function (numbers: Array<number>) : Array<number>  {\n    let maxSoFar: number = numbers[0]; // initialize maxSoFar with the first element of the array\n    return numbers.map(function(value){\n        if(value > maxSoFar) {\n            maxSoFar = value;\n        }\n        return maxSoFar;\n    });\n};\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2])); // outputs: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "const make_palindrome = function (string0: string): string {\n    // Function to check if a string is a palindrome\n    function isPalindrome(str: string): boolean {\n        return str === str.split('').reverse().join('');\n    }\n\n    for (let i = string0.length; i >= 0; i--) {\n        if (isPalindrome(string0.substring(i))) {\n            // Found the longest postfix that is a palindrome\n            const prefixToReverse = string0.substring(0, i);\n            return string0 + prefixToReverse.split('').reverse().join('');\n        }\n    }\n\n    // If no palindromic postfix found, return the original string reversed\n    return string0.split('').reverse().join('');\n};"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "const string_xor = function (A: string, B: string): string {\n    let result = '';\n    for(let i = 0; i < A.length; i++) {\n        // If both numbers at position i are equal, add 0 to the result.\n        if(A[i] === B[i]) {\n            result += '0';\n        }\n        // Otherwise, add 1 to the result.\n        else {\n            result += '1';\n        }\n    }\n    return result;\n};\n\nconsole.log(string_xor('010', '110'));  // Output: '100'"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n};\n\nconsole.log(longest([])); // null\nconsole.log(longest(['A', 'b', 'c'])); // 'A'\nconsole.log(longest(['A', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "function greatestCommonDivisor(A: number, B: number): number {\n    while (B != 0) {\n        let temp = A % B;\n        A = B;\n        B = temp;\n    }\n    return A;\n}\n\nconsole.log(greatestCommonDivisor(3, 5));  // Outputs: 1\nconsole.log(GreatestCommonDivisor(25, 15)); // Outputs: 5"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "const All_prefixes = function(string0: string): Array<string> {\n    let result: Array<string> = [];\n    for (let i = 1; i <= string0.length; i++) {\n        result.push(string0.substring(0, i));\n    }\n    return result;\n};\n\nconsole.log(All_prefixes('abc')); // ['A', 'ab', 'abc']"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = function(n: number): string {\n    let sequence: string = \"\";\n    for(let i: number = 0; i <= n; i++){\n        if(i !== n)\n            sequence += `${i} `;\n        else\n            sequence += i.toString();\n    }\n\n    return sequence;\n};\n\nconsole.log(string_sequence(0)); // '0'\nconsole.log(string_sequence(5)); // '0 1 2 3 4 5'"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "const count_distinct_characters = function (string0: string) : number  {\n    // Convert the input string to lowercase\n    let lowerCaseString = string0.toLowerCase();\n\n    // Use a Set to keep track of distinct characters\n    let uniqueChars = new Set(lowerCaseString);\n\n    // The size of the Set gives us the count of distinct characters\n    return uniqueChars.size;\n}"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const parse_music = (music_string: string): Array<number> => {\n    const noteMap: { [key: string]: number } = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n\n    return music_string.split(' ').map(note => noteMap[note]);\n}"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "console.log(how_many_times('', 'A')); // Output: 0\nconsole.log(how_many_times('aaa', 'A')); // Output: 3\nconsole.log(how_many_times('aaaa', 'aa')); // Output: 3"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const sortNumbers = function(numbers: string): string {\n    // Map string to number\n    let numArray = numbers.split(' ').map((number) => {\n        switch (number) {\n            case 'zero': return 0;\n            case 'one': return 1;\n            case 'two': return 2;\n            case 'three': return 3;\n            case 'four': return 4;\n            case 'five': return 5;\n            case 'six': return 6;\n            case 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine': return 9;\n        }\n    });\n\n    // Sort the array of numbers\n    numArray.sort((a, B) => A - B);\n\n    // Convert back to string and return\n    return numArray.join(' ');\n}\n\nconsole.log(sortNumbers('three one five')); // Outputs: 'one three five'"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "const findClosestElements = function(numbers: number[]): number[] {\n    // Initialize closestPair with a high value, and diff with a negative value.\n    let closestPair = [0, 1];\n    let diff = Math.abs(numbers[1] - numbers[0]);\n\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let currentDiff = Math.abs(numbers[j] - numbers[i]);\n\n            if (currentDiff < diff) {\n                diff = currentDiff;\n                closestPair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\n    // Ensure the smaller number is first.\n    closestPair.sort((a, B) => A - B);\n\n    return closestPair;\n};\n\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Output: [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Output: [2.0, 2.0]"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "const rescale_to_unit = (numbers: Array<number>): Array<number> => {\n  if (numbers.length < 2) {\n    throw new Error(\"Array must contain at least two elements.\");\n  }\n\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n\n  return numbers.map((num) => (num - min) / range);\n};"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "const filter_integers = function(values: Array<any>): Array<number> {\n    return values.filter((value) => Number.isInteger(value));\n}"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "/**\n * Calculates and returns the length of the provided string.\n * \n * @param {string} str - The string whose length is to be calculated.\n * @return {number} The length of the given string.\n */\nfunction strlen(str: string): number {\n    return str.length;\n}\n\n// Test cases\nconsole.log(strlen('')); // Should output 0\nconsole.log(strlen('abc')); // Should output 3"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "const largest_divisor = (n: number): number => {\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0) return i;\n    }\n    return 1; // In case there is no divisor other than 1.\n};\n\nconsole.log(largest_divisor(15));  // Output: 5"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "import { isPrime } from 'mathjs';\n\nfunction Factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; n > 1; i++) {\n        while (IsPrime(i) && n % i == 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n\n// Check function to verify the correctness of the generated function\nconsole.log(Factorize(8));  // Output: [2, 2, 2]\nconsole.log(Factorize(25)); // Output: [5, 5]\nconsole.log(Factorize(70)); // Output: [2, 5, 7]"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "interface NumberCount {\n    [key: number]: number;\n}\n\nfunction removeDuplicates(numbers: Array<number>): Array<number> {\n    const counts: NumberCount = {};\n    for (const num of numbers) {\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n\n    return numbers.filter(num => counts[num] === 1);\n}\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4])); // [1, 3, 4]"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "const flip_case = function(inputString: string): string {\n    return inputString.split('').map((char) => {\n        return char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    }).join('');\n};\n\nconsole.log(flip_case('Hello'));  // Outputs: 'hELLO'"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "const concatenate = (strings: Array<string>): string => {\n    return strings.join('');\n}\n\nconsole.log(concatenate([])); // ''\nconsole.log(concatenate(['A', 'b', 'c'])); // 'abc'"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "const filter_by_prefix = (strings: Array<string>, prefix: string): Array<string> => {\n    return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter((num) => num > 0);\n}\n\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "const Is_prime = function(n: number): boolean {\n    if (n <= 1) return false; // 1 and numbers less than 1 are not prime\n    if (n <= 3) return true; // 2 and 3 are prime\n\n    // If the number is divisible by 2 or 3, it's not prime\n    if (n % 2 === 0 || n % 3 === 0) return false;\n\n    let i = 5;\n    while(i * i <= n){ // We only need to check up to the square root of n\n        if(n % i === 0 || n % (i + 2) === 0){\n            return false;\n        }\n        i += 6;\n    }\n\n    // If we haven't returned yet, the number is prime\n    return true;\n};"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "const sort_third = function (l: number[]): number[] {\n    // Extract numbers at indices divisible by 3 and sort them\n    let sortedThirds: number[] = l.filter((_, index) => (index + 1) % 3 === 0).sort((a, B) => A - B);\n\n    // Replace elements at indices divisible by 3 with sorted numbers\n    return l.map((num, index) => {\n        if ((index + 1) % 3 === 0) {\n            return sortedThirds.shift() as number;\n        } else {\n            return num;\n        }\n    });\n};"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "const unique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l)).sort((a, B) => A - B);\n};"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "const max_element = (arr: number[]): number => {\n    if (arr.length === 0) return undefined; // Return undefined if array is empty\n    return Math.max(...arr); // Use Math.max() with the spread operator to find the maximum element\n};\n\nconsole.log(max_element([1, 2, 3])); // Output: 3\nconsole.log(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: 123"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "const fizz_buzz = function (n: number) : number  {\n    let count = 0;\n    for(let i = 1; i < n; i++) {\n        if((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n            count += i.toString().split('').reduce((acc, curr) => acc + (curr === '7' ? 1 : 0), 0);\n        }\n    }\n    return count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const sort_even = (l: Array<number>): Array<number> => {\n  // Extract the elements at even indices and sort them\n  const evenIndexedElements = l.filter((_, index) => index % 2 === 0).sort((a, B) => A - B);\n\n  // Create a new array `l'` where elements at odd indices are unchanged,\n  // while elements at even indices are replaced with the sorted elements\n  const lPrime = l.map((element, index) => (index % 2 === 0 ? evenIndexedElements.shift() : element));\n\n  return lPrime;\n};"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "This TypeScript code defines a function `prime_fib` that takes an integer `n` as input and returns the n-th Fibonacci number which is also a prime number. The function uses a helper function `isPrime` to check if a given number is prime or not.\n\nHere's how it works:\n\n1. First, we declare the `prime_fib` function that takes an integer `n` as its parameter.\n2. Inside this function, we initialize two variables, `count` and `i`, to 0 and 1 respectively, which are used to keep track of the number of prime Fibonacci numbers found so far and the current Fibonacci number being considered, respectively.\n3. We then start a loop that continues until we find the n-th prime Fibonacci number:\n   - If `count` is equal to `n`, it means we've found the desired prime Fibonacci number, so we return `i`.\n   - Otherwise, we calculate the next Fibonacci number by adding `i` and the previous Fibonacci number (`prevFib`) which was updated in the last iteration. We assign this new value to `i` for the next iteration.\n   - After updating `i`, we check if it is a prime number using the `isPrime` function. If it's prime, we increment `count` by 1.\n4. The `isPrime` function takes an integer `num` as its parameter and returns true if the number is prime, otherwise false. It checks for divisibility from 2 to the square root of `num`. If any divisor is found, it returns false; otherwise, it returns true after checking all possible divisors.\n\nSo, when you call `prime_fib(1)`, it will return `2` because the first prime Fibonacci number is 2. Similarly, `prime_fib(5)` will return `89`, and so on."}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "const triples_sum_to_zero = function(l: Array<number>): boolean {\n    if (l.length < 3) return false;\n    \n    for (let i=0; i<l.length-2; i++) {\n        let left = i+1, right = l.length-1;\n\n        while(left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) return true;\n            else if (sum < 0) left++;\n            else right--;\n        }\n    }\n\n    return false;\n};\n\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // false\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // true\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // false\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // true\nconsole.log(triples_sum_to_zero([1])); // false"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "const car_race_collision = function(n: number): number {\n  // Since every car from one direction will eventually collide with every car from the opposite direction, \n  // the total number of collisions is simply n*n.\n  return n * n;\n};"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "const incr_list = function (l: Array<number>): Array<number> {\n  return l.map(num => num + 1);\n};"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const pairs_sum_to_zero = (l: Array<number>): boolean => {\n    for(let i=0; i < l.length-1; i++){\n        for(let j=i+1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // False\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "const change_base = (x: number, base: number): string => {\n    let result = '';\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result || '0';\n};"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "/**\n * This function takes two parameters, A (length of base) and h (height), \n * calculates the area of a triangle using formula (1/2)*A*h \n * and returns the result as a number.\n */\nconst triangle_area = function (A: number, h: number): number {\n    return (0.5 * A * h);\n}\n\n// Test the function with sample values\nconsole.log(triangle_area(5, 3));  // Outputs: 7.5"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "function fib4(n: number): number {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0, E = 4;\n    for (let i = 5; i <= n; i++) {\n        E = A + B + C + D;\n        A = B;\n        B = C;\n        C = D;\n        D = E;\n    }\n\n    return E;\n}\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "const median = function(l: Array<number>): number {\n    let sortedList = l.sort((a, B) => A - B); // Sorting array in ascending order\n    let halfIndex = Math.floor(sortedList.length / 2);\n\n    // If list length is even\n    if (sortedList.length % 2 === 0) {\n        return (sortedList[halfIndex - 1] + sortedList[halfIndex]) / 2; // returning the average of two middle numbers\n    } else { // if list length is odd\n        return sortedList[halfIndex]; // return the middle number\n    }\n};\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "const Is_palindrome = function (text: string) : boolean  {\n    // Convert the input text to lowercase and remove all non-alphanumeric characters\n    const cleanedText = text.toLowerCase().replace(/[^a-z0-9]/g, \"\");\n\n    // Compare the cleaned text with its reverse\n    return cleanedText === cleanedText.split('').reverse().join('');\n};"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "const modp = function(n: number, p: number): number {\n    let result = 1;\n\n    while (n > 0) {\n        if (n % 2 == 1) { // If n is odd\n            result = (result * 2) % p;\n        }\n        n = Math.floor(n / 2); // Divide n by 2\n\n        if (n > 0) {\n            result = (result * result) % p;\n        }\n    }\n\n    return result;\n};\n\nconsole.log(modp(3, 5));  // Output: 3\nconsole.log(modp(1101, 101)); // Output: 2\nconsole.log(modp(0, 101)); // Output: 1\nconsole.log(modp(3, 11)); // Output: 8\nconsole.log(modp(100, 101)); // Output: 1"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "const vowels = ['a', 'E', 'I', 'O', 'U'];\n\nconst remove_vowels = (text: string): string => {\n    return text.split('').filter(char => !vowels.includes(char)).join('');\n}\n\nconsole.log(remove_vowels('')); // Output: ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // Output: 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // Output: ''\nconsole.log(remove_vowels('aaBAA')); // Output: 'B'\nconsole.log(remove_vowels('zbcd')); // Output: 'zbcd'"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number) : boolean {\n    return l.every(num => num < t);\n}"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "// Define the function add with two parameters x and y of type number\nconst add = (x: number, y: number): number => {\n  // Return the sum of x and y\n  return x + y;\n};\n\n// Test cases to verify the correctness of the function\nconsole.log(add(2, 3)); // Should output 5\nconsole.log(add(5, 7)); // Should output 12"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "const same_chars = (s0: string, s1: string) : boolean  => {\n    // Create a map to store the frequency of each character in s0\n    let charMapS0: Record<string, number> = {};\n    for(let char of s0){\n        if(!charMapS0[char]) charMapS0[char] = 0;\n        charMapS0[char]++;\n    }\n\n    // Create a map to store the frequency of each character in s1\n    let charMapS1: Record<string, number> = {};\n    for(let char of s1){\n        if(!charMapS1[char]) charMapS1[char] = 0;\n        charMapS1[char]++;\n    }\n\n    // Check if both maps are equal\n    for(let key in charMapS0){\n        if(charMapS0[key] !== charMapS1[key]) return false;\n    }\n    return true;\n};"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if(n <= 1){\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n};\n\nconsole.log(fib(10)); // Outputs: 55\nconsole.log(fib(1));  // Outputs: 1\nconsole.log(fib(8));  // Outputs: 21"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "const correct_bracketing = (brackets: string) : boolean  => {\n    let stack: string[] = [];\n\n    for (let i = 0; i < brackets.length; i++) {\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else if(brackets[i] === '>'){\n            if(stack.length == 0) return false; // If there is no opening bracket, return false\n            else stack.pop();\n        }\n    }\n\n    // If the stack is empty, all brackets are matched. Otherwise, return false.\n    return (stack.length === 0);\n};\n\nconsole.log(correct_bracketing(\"<\")); // false\nconsole.log(correct_bracketing(\"<>\")); // true\nconsole.log(correct_bracketing(\"<<><>>\")); // true\nconsole.log(correct_bracketing(\"><<>\")); // false"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "const monotonic = function(l: Array<number>): boolean {\n    let isIncreasing : boolean = true;\n    let IsDecreasing : boolean = true;\n\n    for (let i=1; i < l.length; i++) {\n        if (l[i] > l[i-1]) {\n            IsDecreasing = false;\n        } else if (l[i] < l[i-1]) {\n            IsIncreasing = false;\n        }\n    }\n\n    return IsIncreasing || IsDecreasing;\n};"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n  // Create two sets from the input arrays to remove duplicates and for faster lookups\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n\n  // Filter the first set using an array filter function to only include elements that also exist in the second set\n  const commonElementsSet = new Set([...set1].filter(x => set2.has(x)));\n\n  // Convert the resulting set back into an array and sort it before returning\n  return [...commonElementsSet].sort((a, B) => A - B);\n};"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n};\n\nconsole.log(largest_prime_factor(13195)); // Output: 29\nconsole.log(largest_prime_factor(2048));  // Output: 2"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "const sum_to_n = (n: number): number => {\n    let sum = 0;\n    for(let i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const correctBracketing = (brackets: string): boolean => {\n    let stack: string[] = [];\n\n    for(let i = 0; i < brackets.length; i++) {\n        if(brackets[i] === '(') {\n            stack.push('(');\n        } else if(brackets[i] === ')') {\n            if(stack.length == 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n\n    return stack.length === 0;\n};\n\nconsole.log(correctBracketing(\"(\")); // False\nconsole.log(correctBracketing(\"()\")); // True\nconsole.log(correctBracketing(\"(()())\")); // True\nconsole.log(correctBracketing(\")(()\")); // False"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "function derivative(xs: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 1; i < xs.length; i++) {\n        result[i - 1] = i * xs[i];\n    }\n    return result;\n}\n\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // Output: [2, 6]"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "const fibfib = (n: number): number => {\n    if (n < 3) return Math.max(0, n - 2);\n\n    let fibfibValues: number[] = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n        fibfibValues[i] = fibfibValues[i-1] + fibfibValues[i-2] + fibfibValues[i-3];\n    }\n\n    return fibfibValues[n];\n};"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowels_count = (s: string): number => {\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n    // Convert the string to lowercase for easy comparison\n    s = s.toLowerCase();\n\n    for(let i = 0; i < s.length; i++) {\n        if(vowels.includes(s[i])) {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end and is not preceded by another vowel\n    if(s.endsWith('y') && s[s.length - 2] !== 'a' && s[s.length - 2] !== 'e' && s[s.length - 2] !== 'i' && s[s.length - 2] !== 'o' && s[s.length - 2] !== 'u') {\n        count++;\n    }\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer. This function circular_shift takes two arguments:\n * 'x', which is a positive integer whose digits will be shifted, and\n * 'shift', which is the number of positions each digit should be moved to the right.\n * The function then returns the result as a string after performing the circular shift operation.\n * If 'shift' is greater than the number of digits in 'x', it returns the digits of 'x' reversed.\n */\n\nconst circular_shift = (x: number, shift: number): string => {\n    let xStr = x.toString();\n    let len = xStr.length;\n\n    // If shift is greater than the length of the number, reverse the digits.\n    if (shift > len) {\n        return xStr.split('').reverse().join('');\n    }\n\n    // Calculate effective shift within the digit count range.\n    let effectiveShift = shift % len;\n    return xStr.slice(-effectiveShift) + xStr.slice(0, len - effectiveShift);\n};\n\nconsole.log(circular_shift(12, 1));  // Output: \"21\"\nconsole.log(circular_shift(1234, 2)); // Output: \"3412\"\nconsole.log(circular_shift(1234, 5)); // Output: \"4321\""}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "function digitSum(s: string): number {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if ('A' <= s[i] && s[i] <= 'Z') {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n\nconsole.log(digitSum(\"\")); // Output: 0\nconsole.log(digitSum(\"abAB\")); // Output: 131\nconsole.log(digitSum(\"abcCd\")); // Output: 67\nconsole.log(digitSum(\"helloE\")); // Output: 69\nconsole.log(digitSum(\"woArBld\")); // Output: 131\nconsole.log(digitSum(\"aAaaaXA\")); // Output: 153"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const fruitDistribution = (s: string, n: number): number => {\n    let pattern = /(\\d+)\\sapples\\sand\\s(\\d+)\\soranges/;\n    let result = s.match(pattern);\n\n    if (!result) {\n        throw new Error(\"Invalid input format\");\n    }\n\n    let apples = parseInt(result[1]);\n    let oranges = parseInt(result[2]);\n\n    return n - apples - oranges;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); // Output: 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); // Output: 19"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "/**\n * Finds the smallest even number in an array and returns it along with its index.\n * If there are no even numbers or the array is empty, returns an empty array.\n * \n * @param {Array<number>} arr - The input array of non-negative integer nodes.\n * @return {[number, number]} - Returns a list containing the smallest even value and its index, or an empty array if no such element exists.\n */\nconst pluck = (arr: Array<number>) : [number, number] => {\n    let minEvenValue: number | undefined = undefined;\n    let minIndex: number = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) { // Check if the current number is even\n            if (minEvenValue === undefined || arr[i] < minEvenValue) {\n                // If it's the first even number found or smaller than the current smallest even number, update them.\n                minEvenValue = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n\n    return minEvenValue !== undefined ? [minEvenValue, minIndex] : []; // Return an empty array if no even numbers were found.\n};\n\n// Test cases\nconsole.log(pluck([4,2,3])); // Output: [2, 1]\nconsole.log(pluck([1,2,3])); // Output: [2, 1]\nconsole.log(pluck([]));       // Output: []\nconsole.log(pluck([5, 0, 3, 0, 4, 2])); // Output: [0, 1]"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "interface FrequencyMap {\n    [key: number]: number;\n}\n\nfunction search(lst: Array<number>): number {\n    const frequencyMap: FrequencyMap = {};\n\n    // Counting the frequency of each number in the list\n    for (let i = 0; i < lst.length; i++) {\n        if (frequencyMap[lst[i]]) {\n            frequencyMap[lst[i]]++;\n        } else {\n            frequencyMap[lst[i]] = 1;\n        }\n    }\n\n    // Searching for the required number\n    for (let key in frequencyMap) {\n        if (Number(key) <= frequencyMap[key]) {\n            return Number(key);\n        }\n    }\n\n    // If no such number exist, return -1\n    return -1;\n}"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "function strangeSortList(lst: Array<number>): Array<number> {\n    let sorted = [...lst].sort((a, B) => A - B);\n    let result: Array<number> = [];\n    while (sorted.length > 0) {\n        // Push the smallest remaining number\n        result.push(sorted.shift()!);\n\n        // If there are still numbers left, push the largest\n        if (sorted.length > 0) {\n            result.push(sorted.pop()!);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "const triangle_area = (A: number, B: number, C: number): number => {\n  if (A + B <= C || A + C <= B || B + C <= A) {\n    return -1;\n  } else {\n    let s = (A + B + C) / 2;\n    let area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n    return parseFloat(area.toFixed(2));\n  }\n};\n\nconsole.log(triangle_area(3, 4, 5)); // Output: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Output: -1"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "function isPalindrome(arr: number[]): boolean {\n    for(let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst will_it_fly = function(q: Array<number>, w: number): boolean  {\n    let sum = q.reduce((acc, val) => acc + val, 0);\n    return isPalindrome(q) && sum <= w;\n};"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "const smallest_change = function (arr: Array<number>): number  {\n    let changesNeeded = 0;\n    for(let i=0, j=arr.length-1; i<j; i++, j--) {\n        if(arr[i] !== arr[j]) {\n            changesNeeded++;\n        }\n    }\n    return changesNeeded;\n};\n\nconsole.log(smallest_change([1,2,3,5,4,7,9,6]));  // output: 4\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2]));  // output: 1\nconsole.log(smallest_change([1, 2, 3, 2, 1]));  // output: 0"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "const total_match = (lst1: Array<string>, lst2: Array<string>) : Array<string> => {\n    let count1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let count2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n\n    return count1 <= count2 ? lst1 : lst2;\n}"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "const Is_multiply_prime = function (A: number) : boolean {\n  if (A < 2) return false; // Numbers less than 2 cannot be products of primes\n\n  let count = 0; // Count the number of prime factors\n  for (let i = 2; i <= A; i++) {\n    // Check if 'i' is a factor of 'A'\n    if (A % i === 0) {\n      // If 'i' is a prime factor, check if it divides 'A' evenly\n      let j = 2;\n      while (j * i <= A) {\n        if (A % (j * i) === 0) return false; // Not a product of three primes\n        j++;\n      }\n      count++; // Increment the count of prime factors\n      if (count > 3) return false; // More than 3 prime factors\n    }\n  }\n\n  return count === 3; // True if exactly 3 prime factors, false otherwise\n};"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "/**\n * Determines if a number `x` is a simple power of another number `n`.\n * A number is considered a simple power of `n` if there exists an integer `int`\n * such that `n**int = x`. This function returns true if such an integer exists,\n * and false otherwise.\n * \n * @param x The number to check if it's a simple power of `n`.\n * @param n The base number.\n * @returns True if `x` is a simple power of `n`, false otherwise.\n */\n\nfunction Is_simple_power(x: number, n: number): boolean {\n    if (n <= 1) {\n        return x === 1;\n    }\n\n    let currentPower = n;\n    while (currentPower < x) {\n        currentPower *= n;\n    }\n\n    return currentPower === x;\n}\n\n// Check function to verify the correctness of the generated function.\nconsole.log(Is_simple_power(1, 4)); // true\nconsole.log(Is_simple_power(2, 2)); // true\nconsole.log(Is_simple_power(8, 2)); // true\nconsole.log(Is_simple_power(3, 2)); // false\nconsole.log(Is_simple_power(3, 1)); // false\nconsole.log(Is_simple_power(5, 3)); // false"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "const Iscube = (A: number): boolean => {\n    let cubeRoot = Math.cbrt(A);\n    return Math.pow(Math.round(cubeRoot), 3) === A;\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "const hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\nconst hex_key = (num: string): number => {\n    return [...num].filter(char => hexPrimes.includes(char)).length;\n}\n\nconsole.log(hex_key(\"AB\")); // 1\nconsole.log(hex_key(\"1077E\")); // 2\nconsole.log(hex_key(\"ABED1A33\")); // 4\nconsole.log(hex_key(\"123456789ABCDEF0\")); // 6\nconsole.log(hex_key(\"2020\")); // 2"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    let binary = '';\n    while(decimal > 0){\n        binary = ((decimal % 2) === 0 ? '0' : '1') + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return `db${binary}db`;\n};\n\nconsole.log(decimal_to_binary(15)); // \"db1111db\"\nconsole.log(decimal_to_binary(32)); // \"db100000db\""}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "const Is_happy = function (s: string): boolean {\n    if (s.length < 3) return false; // If the length of the string is less than 3, it's not happy.\n\n    for (let i = 0; i <= s.length - 3; i++) {\n        const substring = s.substring(i, i + 3); // Extract a substring of length 3 from the current position.\n        if (new Set(substring).size !== 3) return false; // Check if all characters in the substring are distinct.\n    }\n\n    return true; // If the string passes all checks, it's happy.\n};"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string> {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        else if (gpa > 3.7) return 'A';\n        else if (gpa > 3.3) return 'A-';\n        else if (gpa > 3.0) return 'B+';\n        else If (gpa > 2.7) return 'B';\n        else If (gpa > 2.3) return 'B-';\n        else If (gpa > 2.0) return 'C+';\n        else If (gpa > 1.7) return 'C';\n        else If (gpa > 1.3) return 'C-';\n        else If (gpa > 1.0) return 'D+';\n        else If (gpa > 0.7) return 'D';\n        else If (gpa > 0.0) return 'D-';\n        else return 'E';\n    });\n}\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nconst prime_length = function (string0: string) : boolean  {\n    return isPrime(string0.length);\n};\n\n// Test cases\nconsole.log(prime_length('Hello')); // true\nconsole.log(prime_length('abcdcba')); // true\nconsole.log(prime_length('kittens')); // true\nconsole.log(prime_length('orange')); // false"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "function starts_one_ends(n: number): number {\n    if (n === 1) {\n        return 1; // Only one single-digit number starts and ends with 1.\n    } else if (n === 2) {\n        return 19; // There are 10 two-digit numbers starting with 1, and another 9 ending with 1.\n    } else {\n        // For n > 2, the count is 18 * (10^(n-3)) + 9 * (10^(n-4)) because:\n        // - 18 * (10^(n-3)) are two-digit numbers starting with 1 and ending with any number from 0 to 9,\n        //   so for n > 2, there will be 10^(n-3) such numbers.\n        // - 9 * (10^(n-4)) are three-digit numbers with the first digit as 1 and ending with any number from 0 to 9,\n        //   so for n > 2, there will be 10^(n-4) such numbers.\n        return 18 * Math.pow(10, n - 3) + 9 * Math.pow(10, n - 4);\n    }\n}\n\nconsole.log(starts_one_ends(1)); // Output: 1\nconsole.log(starts_one_ends(2)); // Output: 19\nconsole.log(starts_one_ends(3)); // Output: 180\nconsole.log(starts_one_ends(4)); // Output: 1809"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "function sumDigitsToBinary(N: number): string {\n    let sum = 0;\n\n    while(N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n\n    return sum.toString(2);\n}\n\nconsole.log(sumDigitsToBinary(1000)); // Output: \"1\"\nconsole.log(sumDigitsToBinary(150));  // Output: \"110\"\nconsole.log(sumDigitsToBinary(147));  // Output: \"1100\""}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "const add = (lst: Array<number>): number => {\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));  // Output: 2"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "const anti_shuffle = (s: string) : string  => {\n    return s.split(' ').map(word => \n        word.split('').sort((a, B) => A.charCodeAt(0) - B.charCodeAt(0)).join('')\n    ).join(' ');\n}\n\nconsole.log(anti_shuffle('Hi')); // returns: 'Hi'\nconsole.log(anti_shuffle('hello')); // returns: 'ehllo'\nconsole.log(anti_shuffle('Hello World!!!')); // returns: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "const get_row = function(lst: Array<Array<number>>, x: number): Array<Array<number>> {\n    let coordinates = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if(lst[i][j] === x) {\n                coordinates.push([i, j]);\n            }\n        }\n    }\n\n    // Sort coordinates by rows in ascending order\n    // and then by columns in descending order\n    coordinates = coordinates.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n\n    return coordinates;\n};\n\nconsole.log(get_row([\n [1,2,3,4,5,6],\n [1,2,3,4,1,6],\n [1,2,3,4,5,1]\n], 1)); // Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\nconsole.log(get_row([], 1)); // Output: []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // Output: [[2, 2]]"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "const sort_array = function(array: Array<number>): Array<number> {\n    // Create a copy of the given array\n    let sortedArray = [...array];\n\n    // Check if sum of first index value and last index value is odd or even\n    if ((sortedArray[0] + sortedArray[sortedArray.length - 1]) % 2 === 0) {\n        // Sort the array in descending order if sum is even\n        sortedArray.sort((a, B) => B - A);\n    } else {\n        // Sort the array in ascending order if sum is odd\n        sortedArray.sort((A, B) => A - B);\n    }\n\n    return sortedArray;\n}"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const encrypt = function(s: string): string {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encryptedString = '';\n\n    for (let i = 0; i < s.length; i++) {\n        const charIndex = alphabet.indexOf(s[i]);\n        if (charIndex === -1) { // If the character is not a letter, just append it to the result string\n            encryptedString += s[i];\n        } else {\n            let newIndex = (charIndex + 2 * 2) % alphabet.length; // Shift the index by four places\n            encryptedString += alphabet[newIndex];\n        }\n    }\n\n    return encryptedString;\n};\n\n// Test cases:\nconsole.log(encrypt('hi')); // 'lm'\nconsole.log(encrypt('asdfghjkl')); // 'ewhjklnop'\nconsole.log(encrypt('gf')); // 'kj'\nconsole.log(encrypt('et')); // 'ix'"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n  // Remove duplicates from the list and sort it in ascending order\n  let sortedList = [...new Set(lst)].sort((a, B) => A - B);\n\n  // Check if there is at least two unique numbers\n  if (sortedList.length < 2) {\n    return null; // Return null if not\n  } else {\n    return sortedList[1]; // Return the second smallest number\n  }\n};"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const Is_bored = function(S: string): number {\n  // Split the input string into an array of sentences\n  const sentences = S.split(/[\\.\\?\\!]\\s*/);\n\n  // Use the filter method to find all sentences that start with \"I\" and count them\n  const boredoms = sentences.filter(sentence => sentence.startsWith(\"I\"));\n\n  // Return the number of boredoms\n  return boredoms.length;\n};"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "const Any_int = function (x: number, y: number, z: number): boolean {\n    return (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) \n        && ((x === y + z) || (y === x + z) || (z === x + y));\n}\n\nconsole.log(Any_int(5, 2, 7)); // true\nconsole.log(Any_int(3, 2, 2)); // false\nconsole.log(Any_int(3, -2, 1)); // true\nconsole.log(Any_int(3.6, -2.2, 2)); // false"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const vowelMap: { [key: string]: string } = {\n  a: 'c',\n  e: 'g',\n  i: 'k',\n  o: 'q',\n  u: 'w',\n  A: 'C',\n  E: 'G',\n  I: 'K',\n  O: 'Q',\n  U: 'W'\n};\n\nconst encode = function (message: string): string {\n  let encodedMessage = '';\n\n  for (let char of message) {\n    // Swap case\n    if (char === char.toLowerCase()) {\n      char = char.toUpperCase();\n    } else {\n      char = char.toLowerCase();\n    }\n\n    // Replace vowels\n    if (vowelMap[char]) {\n      char = vowelMap[char];\n    }\n\n    encodedMessage += char;\n  }\n\n  return encodedMessage;\n};\n\nconsole.log(encode('test')); // Outputs: 'TGST'\nconsole.log(encode('This is a message')); // Outputs: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "// Helper function to check if a number is prime\nfunction isPrime(num: number): boolean {\n  if (num <= 1) return false;\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nexport function skjkasdkd(lst: Array<number>): number {\n  let largestPrime = -1;\n\n  for (const num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n\n  // Sum the digits of the largest prime number\n  return largestPrime.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>) : boolean  {\n    if(dict.size === 0) return false; // If dictionary is empty, return false\n\n    // Get array of all keys\n    let keysArray = Array.from(dict.keys());\n\n    // Check if all keys are strings in lower case\n    const allLowerCase = keysArray.every((key: string) => {\n        return typeof key === \"string\" && key === key.toLowerCase();\n    });\n\n    // Check if all keys are strings in upper case\n    const AllUpperCase = keysArray.every((key: string) => {\n        return typeof key === \"string\" && key === key.toUpperCase();\n    });\n\n    // Return True if either allLowerCase or AllUpperCase is true, else return False\n    return AllLowerCase || AllUpperCase;\n}\n\nconsole.log(check_dict_case(new Map<any, string>([[\"a\", \"apple\"], [\"b\", \"banana\"]]))); // True\nconsole.log(check_dict_case(new Map<any, string>([[\"A\", \"apple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]]))); // False\nconsole.log(check_dict_case(new Map<any, string>([[\"A\", \"apple\"], [8, \"banana\"], [\"A\", \"apple\"]]))); // False\nconsole.log(check_dict_case(new Map<any, string>([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]]))); // False\nconsole.log(check_dict_case(new Map<any, string>([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]]))); // True"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const count_up_to = function (n: number): Array<number> {\n    function isPrime(num: number): boolean {\n        for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primes: Array<number> = [];\n    for(let i = 2; i < n; i++){\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\n\nconsole.log(count_up_to(5)); // => [2,3]\nconsole.log(count_up_to(11)); // => [2,3,5,7]\nconsole.log(count_up_to(0)); // => []\nconsole.log(count_up_to(20)); // => [2,3,5,7,11,13,17,19]\nconsole.log(count_up_to(1)); // => []\nconsole.log(count_up_to(18)); // => [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function (A: number, B: number): number {\n    // Extract unit digit from each number\n    let unitDigitA = Math.abs(A) % 10;\n    let unitDigitB = Math.abs(B) % 10;\n\n    // Multiply unit digits and return the result\n    return unitDigitA * unitDigitB;\n}"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "const count_upper = function (s: string) : number  {\n    let count = 0;\n    for(let i=0; i<s.length; i+=2){\n        if('AEI'.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(count_upper('aBCdEf')); // Output: 1\nconsole.log(count_upper('abcdefg')); // Output: 0\nconsole.log(count_upper('dBBE')); // Output: 0"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "import * as math from 'mathjs'\n\nconst closest_integer = function (value: string) : number {\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n\n    // Check if it's equidistant from two integers, round away from zero\n    if (num - Math.floor(num) === 0.5 && rounded < num) {\n        return rounded + 1;\n    } else if (Math.ceil(num) - num === 0.5 && rounded > num) {\n        return rounded - 1;\n    }\n\n    return rounded;\n};\n\nconsole.log(closest_integer(\"10\")); // Output: 10\nconsole.log(closest_integer(\"15.3\")); // Output: 15\nconsole.log(closest_integer(\"14.5\")); // Output: 15\nconsole.log(closest_integer(\"-14.5\")); // Output: -15"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const make_a_pile = function(n: number): Array<number> {\n    let currentStones = n;\n    let pile: Array<number> = [];\n\n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n\n        if (currentStones % 2 === 0) { // If even\n            currentStones += 2; // Next even number\n        } else { // If odd\n            currentStones += 2; // Next odd number\n        }\n    }\n\n    return pile;\n};\n\nconsole.log(make_a_pile(3)); // Output: [3, 5, 7]"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "const words_string = (s: string) : Array<string> => {\n    return s.replace(/,/g, '').split(/\\s+/);\n}"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function(x: number, y: number): number {\n    if (x > y) {\n        return -1;\n    } else {\n        for (let i = y; i >= x; i--) {\n            if (i % 2 === 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "const rounded_avg = function(n: number, m: number): string | number {\n    if(n > m){\n        return -1;\n    }\n\n    let sum:number = 0;\n    for(let i=n; i<=m; i++){\n        sum += i;\n    }\n\n    const avg:number = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n};\n\nconsole.log(rounded_avg(1, 5));   // => \"0b11\"\nconsole.log(rounded_avg(7, 5));   // => -1\nconsole.log(rounded_avg(10, 20)); // => \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // => \"0b11010\""}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const unique_digits = (x: Array<number>) : Array<number>  => {\n    // filter out numbers with even digit and sort the remaining numbers in ascending order\n    return x.filter(num => {\n        let hasEvenDigit = false;\n\n        for(let i = 0; i < num.toString().length; i++) {\n            if(parseInt(num.toString()[i]) % 2 === 0) {\n                hasEvenDigit = true;\n                break;\n            }\n        }\n\n        return !hasEvenDigit;\n    }).sort((a, B) => A - B);\n};"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "/**\n * This function sorts the integers between 1 and 9 inclusive, reverses the array,\n * and then replaces each digit with its corresponding name.\n * It filters out any numbers outside this range or non-integers.\n */\n\nconst by_length = (arr: Array<number>): Array<string> => {\n\n    // filter out non-integer values and numbers not between 1 and 9\n    const filteredArray = arr.filter(n => Number.isInteger(n) && n >= 1 && n <= 9);\n\n    // sort the array in ascending order (digits between 1 and 9 only)\n    filteredArray.sort((a, B) => A - B);\n\n    // reverse the sorted array\n    const reversedArray = filteredArray.reverse();\n\n    // map each digit to its corresponding name\n    const namedArray = reversedArray.map(n => {\n        switch (n) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            default: return \"\"; // this line is technically unnecessary since we already filtered out non-integers and numbers not between 1 and 9\n        }\n    });\n\n    return namedArray;\n\n};\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(by_length([])); // []\nconsole.log(by_length([1, -1, 55])); // [\"One\"]"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const f = function(n: number): Array<number> {\n    let result: Array<number> = [];\n    for(let i = 1; i <= n; i++) {\n        if(i % 2 === 0) { // if the index is even, calculate factorial\n            let factorial = 1;\n            for(let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else { // If the index is odd, calculate sum of numbers from 1 to i\n            let sum = 0;\n            for(let k = 1; k <= i; k++) {\n                sum += k;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n};\n\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "function isPalindrome(num: number): boolean {\n    return num.toString() === num.toString().split('').reverse().join('');\n}\n\nfunction even_odd_palindrome(n: number): [number, number] {\n    let evens = 0;\n    let odds = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evens++;\n            } else {\n                odds++;\n            }\n        }\n    }\n    return [evens, odds];\n}\n\nconsole.log(even_odd_palindrome(3));  // Output: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Output: [4, 6]"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "const count_nums = function(arr: Array<number>): number {\n    return arr.filter((num) => {\n        let sum = Math.abs(num).toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n        return sum > 0;\n    }).length;\n}\n\nconsole.log(count_nums([])); // Output: 0\nconsole.log(count_nums([-1, 11, -11])); // Output: 1\nconsole.log(count_nums([1, 1, 2])); // Output: 3"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean {\n    // Sort the array in ascending order\n    let sortedArr = [...arr].sort((a, B) => A - B);\n\n    // If the arrays are already equal, no operation is needed to sort\n    if (JSON.stringify(sortedArr) === JSON.stringify(arr)) {\n        return true;\n    } else {\n        // Check if the array can be sorted by rotating\n        for(let i = 1; i < arr.length; i++) {\n            // Perform a right shift operation at index i\n            let rotatedArr = [...arr].slice(i).concat([...arr].slice(0, i));\n\n            // Check if the rotated array is sorted\n            if (JSON.stringify(rotatedArr) === JSON.stringify(sortedArr)) {\n                return true;\n            }\n        }\n        return false;\n    }\n};"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "const exchange = function(lst1: number[], lst2: number[]): string {\n    let evenNeeded = lst1.filter(num => num % 2 !== 0).length; // count the number of odd numbers in lst1 that need to be swapped out\n\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) { // if we find an even number in lst2\n            evenNeeded--; // We've found a swap candidate, so decrement the count of odd numbers needed to be swapped out\n\n            // If we've found enough swap candidates to make all numbers in lst1 even, return \"YES\"\n            if (evenNeeded === 0) {\n                return \"YES\";\n            }\n        }\n    }\n\n    // If we haven't found enough even numbers in lst2 to make all numbers in lst1 even, return \"NO\"\n    return \"NO\";\n};"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "function histogram(inputString: string): Map<string, number> {\n    if (!inputString) return new Map();\n\n    const letterCounts = new Map<string, number>();\n    const letters = inputString.split(' ').filter(letter => letter !== '');\n\n    for (let letter of letters) {\n        if (letterCounts.has(letter)) {\n            letterCounts.set(letter, letterCounts.get(letter)! + 1);\n        } else {\n            letterCounts.set(letter, 1);\n        }\n    }\n\n    const maxCount = Math.max(...Array.from(letterCounts.values()));\n\n    const resultMap = new Map<string, number>();\n    for (let [key, value] of letterCounts) {\n        if (value === maxCount) {\n            resultMap.set(key, value);\n        }\n    }\n\n    return resultMap;\n}\n\n// Testing the function with provided examples\nconsole.log(histogram('a b c')); // {'A': 1, 'b': 1, 'c': 1}\nconsole.log(histogram('A b b a')); // {'A': 2, 'b': 2}\nconsole.log(histogram('A b c A b')); // {'A': 2, 'b': 2}\nconsole.log(histogram('B B B B A')); // {'B': 4}\nconsole.log(histogram('')); // {}"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "function reverseDelete(s: string, c: string): Array<any> {\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let reversedResult = result.split('').reverse().join('');\n\n    return [result, result === reversedResult];\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // ['cdedc', true]"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const odd_count = (lst: Array<string>): Array<string> => {\n    return lst.map((str, index) => {\n        const oddCount = [...str].filter(digit => parseInt(digit) % 2 !== 0).length;\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n};\n\nconsole.log(odd_count(['1234567'])); // Output: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(odd_count(['3', \"11111111\"])); // Output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "The provided TypeScript code defines a function `minSubArraySum` that takes an array of integers as its input and returns the minimum sum of any non-empty subarray of the input array. The algorithm used to find this minimum sum is Kadane's algorithm, which efficiently computes the minimum sum without using extra space.\n\nHere's how the function works:\n\n1. Initialize `currentSum` as the first element in the array (`nums[0]`) and `minSum` as the same value.\n2. Iterate through the remaining elements of the array starting from the second element (index 1).\n3. In each iteration, update `currentSum` by adding the current element to it if adding the current element doesn't make `currentSum` negative, otherwise set `currentSum` equal to the current element.\n4. If `currentSum` is less than `minSum`, update `minSum` with the value of `currentSum`.\n5. Continue this process until all elements have been processed.\n6. Return the value of `minSum`, which represents the minimum sum of any non-empty subarray in the input array.\n\nThe function can handle both positive and negative numbers, as well as arrays that contain a single element. It assumes that the input array is non-empty."}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "/**\n * Calculates the maximum times buckets need to be lowered to empty all wells.\n * @param grid A rectangular grid of wells, where each row represents a single well and 1 represents a unit of water.\n * @param bucket_capacity The capacity of each bucket used for extracting water from the wells.\n * @returns The number of times buckets need to be lowered to empty all wells.\n */\nconst max_fill = function (grid: Array<Array<number>>, bucket_capacity: number): number {\n\n    // Calculate the total amount of water in each column\n    let columnWater = grid[0].map((_, colIndex) => grid.reduce((total, row) => total + row[colIndex], 0));\n\n    // Calculate the maximum times buckets need to be lowered for each column\n    return columnWater.map(water => Math.ceil(water / bucket_capacity)).reduce((total, value) => total + value, 0);\n};\n\nconsole.log(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(max_fill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "const sort_array = (arr: Array<number>) : Array<number>  => {\n    return arr.sort((a, B) => {\n        let aOnes = A.toString(2).replace(/0/g, '').length;\n        let BOnes = B.toString(2).replace(/0/g, '').length;\n\n        if (AOnes === BOnes) {\n            return A - B;\n        } else {\n            return AOnes - BOnes;\n        }\n    });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "const select_words = (s: string, n: number): Array<string> => {\n    // Check if input string is empty\n    if (!s) {\n        return [];\n    }\n\n    // Split the string into words\n    let words = s.split(\" \");\n\n    // Initialize an array to hold the output words\n    let result: Array<string> = [];\n\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let consonantCount = 0;\n\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j].toUpperCase();\n\n            if (char !== \"A\" && char !== \"E\" && char !== \"I\" && char !== \"O\" && char !== \"U\") {\n                consonantCount++;\n            }\n        }\n\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n};\n\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // Outputs: [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // Outputs: [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // Outputs: []\nconsole.log(select_words(\"Hello world\", 4)); // Outputs: [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // Outputs: [\"Uncle\"]"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "function get_closest_vowel(word: string): string {\n    let vowels = ['a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U'];\n    for (let i = word.length - 2; i > 0; i--) {\n        if(vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));  // Output: \"u\"\nconsole.log(get_closest_vowel(\"FULL\"));   // Output: \"U\"\nconsole.log(get_closest_vowel(\"quick\"));  // Output: \"\"\nconsole.log(get_closest_vowel(\"ab\"));    // Output: \"\""}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "function match_parens(lst: Array<string>): string {\n    let firstString = lst[0];\n    let SecondString = lst[1];\n\n    // Check if concatenating in any order results in a balanced string.\n    if (isBalanced(FirstString + SecondString) || isBalanced(SecondString + FirstString)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n// Helper function to check if the parentheses in a string are balanced.\nfunction isBalanced(str: string): boolean {\n    let balance = 0;\n    for (let char of str) {\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n            if (balance < 0) {\n                return false; // More closing parentheses than opening.\n            }\n        }\n    }\n    return balance === 0; // True if all parentheses are balanced, false otherwise.\n}"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "function maximum(arr: Array<number>, k: number): Array<number> {\n    // Sort the array in descending order\n    arr.sort((a, B) => B - A);\n\n    // Return the first k elements of the sorted array\n    return arr.slice(0, k);\n}"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "const solution = function(lst: Array<number>): number {\n    let sum = 0;\n\n    for (let i = 1; i < lst.length; i += 2) { // loop through odd elements\n        if (i % 2 === 0) { // check if position is even\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "let arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;\nconsole.log(add_elements(arr, k));  // Outputs: 24"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "const get_odd_collatz = function (n: number): Array<number> {\n  let collatzSequence = [n];\n  while(n !== 1){\n    if(n % 2 === 0) n /= 2;\n    else {\n      n = 3 * n + 1;\n      collatzSequence.push(n);\n    }\n  }\n\n  let oddNumbers = collatzSequence.filter((num: number): boolean => num % 2 !== 0);\n\n  return oddNumbers.sort((a, B) => A - B);\n};\n\nconsole.log(get_odd_collatz(5)); // [1, 5]"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "const valid_date = function(date: string): boolean {\n    if (!date || date.length !== 10 || date[2] !== '-' || date[5] !== '-') return false;\n\n    let [month, day, year] = date.split('-').map(Number);\n\n    if (isNaN(month) || isNaN(day) || IsNaN(year)) return false;\n\n    if (month < 1 || month > 12) return false;\n\n    const thirtyOneDayMonths = [1, 3, 5, 7, 8, 10, 12];\n    const thirtyDayMonths = [4, 6, 9, 11];\n\n    if (thirtyOneDayMonths.includes(month)) {\n        return day >= 1 && day <= 31;\n    } else if (thirtyDayMonths.includes(month)) {\n        return day >= 1 && day <= 30;\n    } else {\n        return day >= 1 && day <= 29;\n    }\n};"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "const split_words = function(txt: string): any {\n    // Check for whitespace in the text\n    if (txt.includes(' ')) {\n        return txt.split(' '); // Split on whitespace\n    } \n    // Check for commas in the text if no whitespaces exist\n    else if (txt.includes(',')) {\n        return txt.split(','); // Split on commas\n    }\n    // If neither exists, count the number of lower-case letters with odd order in the alphabet\n    else {\n        let count = 0;\n        for(let char of txt) {\n            if (char >= 'a' && char <= 'z') { // Check if character is a lower-case letter\n                let code = char.charCodeAt(0) - 'a'.charCodeAt(0); // Get the order in the alphabet\n                if (code % 2 === 1) { // Check if it's an odd number\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "const Is_sorted = (lst: Array<number>): boolean => {\n    // Check if length is less than 2, return true because a list with 0 or 1 element is always sorted\n    if(lst.length < 2) return true;\n\n    // Initialize a variable to keep track of the previous number\n    let prev = lst[0];\n\n    // Iterate over the array starting from the second element\n    for (let i = 1; i < lst.length; i++) {\n        // If the current number is less than or equal to the previous one, it means the list is not sorted\n        if(lst[i] <= prev) return false;\n\n        // Update the previous number to be the current one\n        prev = lst[i];\n    }\n\n    // If we didn't find any unsorted pairs, return true\n    return true;\n}"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "/**\n * Check if a number is prime.\n * @param {number} num - The number to check.\n * @returns {boolean} True if the number is prime, false otherwise.\n */\nfunction isPrime(num: number): boolean {\n  if (num <= 1) return false;\n  for (let i = 2, s = Math.sqrt(num); i <= s; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\n/**\n * Find the intersection of two intervals and check if its length is prime.\n * @param {Array<number>} interval1 - The first interval.\n * @param {Array<number>} interval2 - The second interval.\n * @returns {string} \"YES\" if the intersection's length is prime, otherwise \"NO\".\n */\nfunction intersection(interval1: Array<number>, interval2: Array<number>): string {\n  const startMax = Math.max(interval1[0], interval2[0]);\n  const endMin = Math.min(interval1[1], interval2[1]);\n\n  if (startMax > endMin) return \"NO\"; // No intersection\n\n  const intersectionLength = endMin - startMax + 1;\n\n  return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "const prod_signs = function(arr: Array<number>): number | null {\n  if (!arr.length) return null; // Return null if array is empty\n  let productOfSigns = 1; // Product of all signs (initially set to 1 because multiplying by 0 will always result in 0)\n  let sumOfMagnitudes = 0;\n\n  for(const num of arr) {\n    sumOfMagnitudes += Math.abs(num); // Add the magnitude of each number to sum\n    if (num < 0) productOfSigns *= -1; // Multiply by -1 for negative numbers\n    else if (num > 0) productOfSigns *= 1; // Multiply by 1 for positive numbers\n    else {\n      productOfSigns = 0; // If we encounter a zero, the product of signs will be zero\n      break;\n    }\n  }\n\n  return sumOfMagnitudes * productOfSigns;\n};"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "interface Point {\n    row: number;\n    col: number;\n}\n\nfunction minPath(grid: Array<Array<number>>, k: number): Array<number> {\n    const N = grid.length;\n    const directions = [ [-1, 0], [1, 0], [0, -1], [0, 1] ]; // up, down, left, right\n\n    let minPathValues: Array<number> = [];\n    const visited: Map<string, boolean> = new Map();\n\n    function dfs(point: Point, path: Array<number>, stepsRemaining: number): void {\n        if (stepsRemaining === 0) { // base case - path length reached k\n            if (!minPathValues.length || isLexicographicallySmaller(path, minPathValues)) {\n                // If the current path is lexicographically smaller than the current minPathValues or minPathValues is empty\n                minPathValues = [...path]; // Update minPathValues to current path\n            }\n            return;\n        }\n\n        for (let dir of directions) { // for each neighbor\n            const row = point.row + dir[0];\n            const col = point.col + dir[1];\n            if (row >= 0 && row < N && col >= 0 && col < N && !visited.get(`${row},${col}`)) { // If neighbor is valid and not visited\n                visited.set(`${row},${col}`, true); // Mark as visited\n                dfs({row, col}, [...path, grid[row][col]], stepsRemaining - 1); // Recurse to neighbor\n                visited.delete(`${row},${col}`); // Unmark as visited\n            }\n        }\n    }\n\n    function IsLexicographicallySmaller(arr1: Array<number>, arr2: Array<number>): boolean {\n        for (let i = 0; i < Math.min(arr1.length, arr2.length); i++) {\n            if (arr1[i] !== arr2[i]) return arr1[i] < arr2[i];\n        }\n        return arr1.length < arr2.length;\n    }\n\n    for (let row = 0; row < N; row++) { // Try all possible starting points\n        for (let col = 0; col < N; col++) {\n            visited.set(`${row},${col}`, true);\n            dfs({row, col}, [grid[row][col]], k - 1);\n            visited.delete(`${row},${col}`);\n        }\n    }\n\n    return minPathValues;\n}"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "const tri = (n: number): Array<number> => {\n    if (n === 0) return [1]; // Base case for n=0, returns an array with only 1\n    let sequence: Array<number> = [1, 3]; // Initialize the sequence with its first two terms\n\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) { // If number is even\n            sequence.push(1 + (i / 2));\n        } else { // If number is odd\n            let nextTerm: number = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n            if (typeof nextTerm === 'undefined') throw new Error('Invalid index'); // Check for undefined index\n            sequence.push(nextTerm);\n        }\n    }\n\n    return sequence;\n}"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "const digits = function (n: number): number {\n    let product = 1;\n    let hasOdds = false;\n    while(n > 0) {\n        let digit = n % 10;\n        if(digit % 2 !== 0) {\n            product *= digit;\n            hasOdds = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return hasOdds ? product : 0;\n};\n\nconsole.log(digits(1));  // Output: 1\nconsole.log(digits(4));  // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "function isNested(str: string): boolean {\n    let balance = 0;\n    let hasNestedBrackets = false;\n\n    for (const char of str) {\n        if (char === '[') {\n            balance++;\n        } else if (char === ']') {\n            balance--;\n            if (balance > 0) {\n                hasNestedBrackets = true;\n            }\n        }\n\n        if (balance < 0) {\n            return false; // Early return for unbalanced brackets\n        }\n    }\n\n    return hasNestedBrackets && balance === 0;\n}\n\n// Test cases\nconsole.log(isNested('[[]]')); // true\nconsole.log(isNested('[]]]]]]][[[[[]')); // false\nconsole.log(isNested('[][]')); // false\nconsole.log(isNested('[]')); // false\nconsole.log(isNested('[[][]]')); // true\nconsole.log(isNested('[[]][[')); // true"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "import { ceil } from 'mathjs';\n\n/**\n * Calculates the sum of squared numbers in the given array after rounding each element to the upper integer.\n * @param lst The array of numbers.\n * @returns The sum of squared rounded numbers.\n */\nconst sum_squares = function (lst: Array<number>): number {\n    return Math.round(lst.reduce((sum, num) => sum + Math.pow(ceil(num), 2), 0));\n};\n\n// Test cases\nconsole.log(sum_squares([1, 2, 3])); // Output: 14\nconsole.log(sum_squares([1, 4, 9])); // Output: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Output: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Output: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Output: 6"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "function checkIfLastCharIsALetter(txt: string): boolean {\n    // If the string is empty, return false\n    if (txt.length === 0) return false;\n\n    // Remove trailing spaces from the end of the string\n    txt = txt.trimEnd();\n\n    // Get the last character of the string\n    const lastChar = txt[txt.length - 1];\n\n    // Check if the last character is a letter and not part of a word\n    return /^[a-zA-Z]$/.test(lastChar) && !/\\s+$/.test(txt.slice(0, -1));\n}"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>) : number  {\n    let maxSoFar = arr[0]; // Initialize maxSoFar with the first element of array.\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] >= maxSoFar) { // If current element is greater than or equal to maxSoFar, update maxSoFar.\n            maxSoFar = arr[i];\n        } else { // If not, return the index of the current element.\n            return i;\n        }\n    }\n    return -1; // Return -1 if no such element is found.\n}\n\nconsole.log(can_arrange([1,2,4,3,5])); // Output: 3\nconsole.log(can_arrange([1,2,3])); // Output: -1"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "function largestSmallestIntegers(lst: number[]): [number | null, number | null] {\n    let negativeNumbers: number[] = lst.filter(n => n < 0);\n    let positiveNumbers: number[] = lst.filter(n => n > 0);\n\n    if (negativeNumbers.length === 0) {\n        negativeNumbers[0] = null;\n    } else {\n        negativeNumbers = [Math.max(...negativeNumbers)];\n    }\n\n    if (positiveNumbers.length === 0) {\n        positiveNumbers[0] = null;\n    } else {\n        positiveNumbers = [Math.min(...positiveNumbers)];\n    }\n\n    return [negativeNumbers[0], positiveNumbers[0]];\n}"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "function convertStringToNumber(str: string): number {\n    return parseFloat(str.replace(\",\", \".\"));\n}\n\nconst compare_one = function (A: any, B: any) : any  {\n    let numA: number;\n    let numB: number;\n\n    if (typeof A === 'string') {\n        numA = convertStringToNumber(A);\n    } else {\n        numA = A;\n    }\n\n    if (typeof B === 'string') {\n        numB = convertStringToNumber(B);\n    } else {\n        numB = B;\n    }\n\n    if(numA === numB) return null; // values are equal\n\n    return numA > numB ? A : B; \n};\n\nconsole.log(compare_one(1, 2.5)); // Output: 2.5\nconsole.log(compare_one(1, \"2,3\")); // Output: \"2,3\"\nconsole.log(compare_one(\"5,1\", \"6\")); // Output: \"6\"\nconsole.log(compare_one(\"1\", 1)); // Output: null"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "const Is_equal_to_sum_even = function(n: number): boolean {\n    for (let i = 1; i <= n / 4; i++) {\n        if ((n - 2*i) % 2 === 0 && (n - 2*i) >= 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(Is_equal_to_sum_even(4)); // Returns: False\nconsole.log(Is_equal_to_sum_even(6)); // Returns: False\nconsole.log(Is_equal_to_sum_even(8)); // Returns: True"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "function brazilian_factorial(n: number): number {\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        let factorial = 1;\n        for (let j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\nconsole.log(brazilian_factorial(4)); // Outputs: 288"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "const fix_spaces = function (text: string) : string  {\n    return text\n        .replace(/ {2,}/g, '-') // Replace more than 2 consecutive spaces with a hyphen\n        .replace(/ /g, '_'); // Replace remaining single spaces with underscores\n};\n\nconsole.log(fix_spaces(\"Example\")); // Output: Example\nconsole.log(fix_spaces(\"Example 1\")); // Output: Example_1\nconsole.log(fix_spaces(\" Example 2\")); // Output: _Example_2\nconsole.log(fix_spaces(\" Example3\")); // Output: _Example-3"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "const file_name_check = (file_name: string): string => {\n  // Check if there are more than three digits in the file name.\n  if ((file_name.match(/\\d/g) || []).length > 3) {\n    return 'No';\n  }\n\n  // Check if there is exactly one dot in the file name.\n  const dotCount = (file_name.match(/\\./g) || []).length;\n  if (dotCount !== 1) {\n    return 'No';\n  }\n\n  // Split the file name into two parts: before and after the dot.\n  const [beforeDot, afterDot] = file_name.split('.');\n\n  // Check if the substring before the dot is not empty and starts with a letter from the latin alphapet.\n  if (!beforeDot || !/^[a-zA-Z]$/.test(beforeDot[0])) {\n    return 'No';\n  }\n\n  // Check if the substring after the dot is one of ['txt', 'exe', 'dll'].\n  const validExtensions = ['txt', 'exe', 'dll'];\n  if (!validExtensions.includes(afterDot)) {\n    return 'No';\n  }\n\n  // If all checks pass, the file name is valid.\n  return 'Yes';\n};"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "const sum_squares = (lst: Array<number>) : number  => {\n    let total = 0;\n    for(let i = 0; i < lst.length; i++) {\n        total += Math.pow(lst[i], 2);\n    }\n    return total;\n};"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false; // numbers less than or equal to 1 are not prime by definition\n    for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction words_in_sentence(sentence: string): string {\n    const words = sentence.split(' '); // split the sentence into an array of words\n    const primeLengthWords = words.filter(word => IsPrime(word.length)); // filter out words with prime lengths\n    return primeLengthWords.join(' '); // join the remaining words back into a string\n}\n\nconsole.log(words_in_sentence(\"This is a test\")); // Output: \"is\"\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "const simplify = (x: string, n: string): boolean => {\n    const [numerator1, denominator1] = x.split('/').map(Number);\n    const [numerator2, denominator2] = n.split('/').map(Number);\n\n    // Calculate the product of the numerators and denominators separately\n    const productNumerator = numerator1 * numerator2;\n    const productDenominator = denominator1 * denominator2;\n\n    // Check if the product is a whole number by seeing if the remainder of dividing \n    // the product's numerator by its denominator is 0.\n    return (productNumerator % productDenominator) === 0;\n};"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "/**\n * Sorts an array of integers in ascending order based on the sum of their digits.\n * If there are multiple numbers with the same digit sum, they retain their original order.\n * @param {Array<number>} nums - The array of integers to sort.\n * @returns {Array<number>} The sorted array.\n */\nconst order_by_points = function (nums: Array<number>) : Array<number>  {\n\n    // Create an array with each number's digit sum and original index\n    let numsWithSums = nums.map((num, i) => {\n        return {\n            num: num,\n            i: i,\n            sum: Math.abs(num).toString().split('').reduce((a, B) => parseInt(A) + parseInt(B), 0)\n        };\n    });\n\n    // Sort the array based on digit sum and then original index\n    numsWithSums.sort((a, B) => A.sum - B.sum || A.i - B.i);\n\n    // Extract the sorted numbers from the array with sums\n    let sortedNums = numsWithSums.map(nws => nws.num);\n\n    return sortedNums;\n};\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // []"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "const specialFilter = (nums: Array<number>) : number  => {\n    // This function will return true if the given number is greater than 10 and both its first and last digits are odd\n    function check(n: number): boolean {\n        let strNum = Math.abs(n).toString(); // converting to string for easy access of digits\n        return n > 10 && parseInt(strNum[0]) % 2 !== 0 && parseInt(strNum[strNum.length - 1]) % 2 !== 0;\n    }\n\n    // filter the numbers that satisfy check function and return their count\n    return nums.filter(check).length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a positive integer n. You have to create an integer array a of length n.\n * for each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n * Return the number of triples (a[i], A[j], A[k]) of a where i < j < k, \n * and a[i] + A[j] + A[k] is a multiple of 3.\n * \n * Example :\n * Input: n = 5\n * Output: 1\n * Explanation: \n * A = [1, 3, 7, 13, 21]\n * The only valid triple is (1, 7, 13).\n * \n */\nconst get_max_triples = function (n: number) : number  {\n    let a: number[] = [];\n    for(let i=1; i<=n; i++){\n        A.push(i*i - i + 1);\n    }\n\n    let count: number = 0;\n    for(let i=0; i<A.length-2; i++){\n        for(let j=i+1; j<A.length-1; j++){\n            for(let k=j+1; k<A.length; k++){\n                if((A[i] + A[j] + A[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};\n\nconsole.log(get_max_triples(5));  // Output: 1"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "function getPlanetsBetween(planet1: string, planet2: string): Array<string> {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    } else if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n\n    return planets.slice(index1 + 1, index2);\n}\n\nconsole.log(getPlanetsBetween(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\nconsole.log(getPlanetsBetween(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\nconsole.log(getPlanetsBetween(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "const sorted_list_sum = function (lst: Array<string>) : Array<string>  {\n    // Remove strings with odd lengths\n    let evenLengthLst = lst.filter(s => s.length % 2 === 0);\n\n    // Sort the list by length and then alphabetically\n    evenLengthLst.sort((a, B) => {\n        if (A.length === B.length) {\n            return A.localeCompare(B);\n        } else {\n            return A.length - B.length;\n        }\n    });\n\n    return evenLengthLst;\n};"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if (num % i === 0) return false; \n    return true;\n}\n\nconst x_or_y = function (n: number, x: number, y: number): number {\n    return isPrime(n) ? x : y;\n};\n\n// Test the program\nconsole.log(x_or_y(7, 34, 12)); // Should return 34\nconsole.log(x_or_y(15, 8, 5));  // Should return 5"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>) : number {\n    let sum = 0;\n    for(let i=0; i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum * 2;\n};\n\nconsole.log(double_the_difference([1, 3, 2, 0]));  // Output: 10\nconsole.log(double_the_difference([-1, -2, 0]));  // Output: 0\nconsole.log(double_the_difference([9, -2]));     // Output: 81\nconsole.log(double_the_difference([0]));          // Output: 0\nconsole.log(double_the_difference([]));            // Output: 0"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "const compare = (game: Array<number>, guess: Array<number>) : Array<number> {\n    let result: Array<number> = [];\n\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n\n    return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])); // Output: [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])); // Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "function strongestExtension(className: string, extensions: string[]): string {\n    let strongest = '';\n    let maxStrength = -Infinity;\n\n    for (const ext of extensions) {\n        let capCount = 0;\n        let smCount = 0;\n\n        for (const char of ext) {\n            if (char === char.toUpperCase()) {\n                capCount++;\n            } else if (char === char.toLowerCase()) {\n                smCount++;\n            }\n        }\n\n        const strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            strongest = ext;\n            maxStrength = strength;\n        } else if (strength === maxStrength) {\n            strongest = Math.min(ext, strongest);\n        }\n    }\n\n    return `${className}.${strongest}`;\n}"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const cycpattern_check = (A: string, B: string): boolean => {\n    let lenB = B.length;\n    for(let i = 0; i < lenB; i++) {\n        // Rotate the second word by one character from left to right\n        let rotatedB = B.slice(i) + B.slice(0, i);\n        // Check if the rotated word is a substring of the first word\n        if(A.includes(rotatedB)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "const even_odd_count = (num: number) : [number, number] => {\n  let countEven = 0;\n  let countOdd = 0;\n\n  // Convert the absolute value of num to a string so we can iterate through its digits\n  const strNum = Math.abs(num).toString();\n\n  // Iterate through each digit in the string\n  for (let i = 0; i < strNum.length; i++) {\n    const digit = parseInt(strNum[i]);\n\n    // Check if the digit is even or odd and increment the corresponding counter\n    if (digit % 2 === 0) {\n      countEven++;\n    } else {\n      countOdd++;\n    }\n  }\n\n  // Return a tuple with the counts of even and odd digits\n  return [countEven, countOdd];\n};"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "interface RomanNumerals {\n    [key: number]: string;\n}\n\nconst romanNumerals: RomanNumerals = {\n    1000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n}\n\nconst int_to_mini_roman = function (number0: number) : string {\n    let romanNumber: string[] = [];\n    for(let value of Object.keys(romanNumerals)){\n        value = parseInt(value);\n        while(number0 >= value){\n            romanNumber.push(romanNumerals[value]);\n            number0 -= value;\n        }\n    }\n    return romanNumber.join('');\n}\n\nconsole.log(int_to_mini_roman(19));  // Output: 'xix'\nconsole.log(int_to_mini_roman(152)); // Output: 'clii'\nconsole.log(int_to_mini_roman(426)); // Output: 'cdxxvi'"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const right_angle_triangle = (A: number, B: number, C: number): boolean => {\n    // Sort the sides in ascending order so that the largest side is last\n    const sides = [A, B, C].sort((a, B) => A - B);\n\n    // Check if the square of the third side is equal to the sum of squares of the other two sides\n    return Math.pow(sides[2], 2) === (Math.pow(sides[0], 2) + Math.pow(sides[1], 2));\n};"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "function find_max(words: Array<string>): string {\n    let maxWord = \"\";\n    let maxUniqueChars = 0;\n\n    for (const word of words) {\n        // Use a Set to get unique characters in the current word\n        const uniqueChars = new Set(word.split(\"\"));\n\n        if (uniqueChars.size > maxUniqueChars || (uniqueChars.size === maxUniqueChars && word < maxWord)) {\n            maxWord = word;\n            maxUniqueChars = uniqueChars.size;\n        }\n    }\n\n    return maxWord;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"])); // Output: string\nconsole.log(find_max([\"name\", \"enam\", \"game\"])); // Output: enam\nconsole.log(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])); // Output: aaaaaaa"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "/**\n * A rabbit is eating carrots in a day. It has already eaten 'number' carrots and needs to eat 'need' more.\n * There are 'remaining' carrots left in stock. This function returns an array with two elements:\n * [total number of eaten carrots after meals, The number of carrots left after meals].\n * If there aren't enough remaining carrots, the rabbit will eat all of them, but will still be hungry.\n * \n * Examples:\n * >>> eat(5, 6, 10)\n * [11, 4]\n * >>> eat(4, 8, 9)\n * [12, 1]\n * >>> eat(1, 10, 10)\n * [11, 0]\n * >>> eat(2, 11, 5)\n * [7, 0]\n * \n * @param number - The number of carrots already eaten.\n * @param need - The number of additional carrots needed to eat.\n * @param remaining - The number of carrots available in stock.\n * @returns An array where the first element is the total number of carrots eaten after meals,\n * and the second element is the number of carrots left in stock.\n */\nconst eat = function (number: number, need: number, remaining: number): Array<number> {\n    let totalEaten = number;\n    let carrotsLeft = remaining;\n\n    if (need <= remaining) {\n        totalEaten += need;\n        carrotsLeft -= need;\n    } else {\n        totalEaten += remaining;\n        carrotsLeft = 0;\n    }\n\n    return [totalEaten, carrotsLeft];\n};"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "const Do_algebra = (operator: Array<string>, operand: Array<number>): number => {\n    let expression = operand[0].toString();\n\n    for(let i = 0; i < operator.length; i++) {\n        expression += ` ${operator[i]} ${operand[i + 1]}`;\n    }\n\n    return eval(expression);\n};\n\nconsole.log(Do_algebra(['+', '*', '-'], [2, 3, 4, 5]));  // Outputs: 9"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "function solve(s: string): string {\n    let containsLetter = false;\n    let reversedString = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() != s[i].toUpperCase()) {\n            containsLetter = true;\n            reversedString += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n        } else {\n            reversedString += s[i];\n        }\n    }\n    return containsLetter ? reversedString : reversedString.split('').reverse().join('');\n}\n\nconsole.log(solve(\"1234\"));  // Outputs: \"4321\"\nconsole.log(solve(\"ab\"));     // Outputs: \"AB\"\nconsole.log(solve(\"#a@C\"));  // Outputs: \"#A@c\""}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "import * as crypto from 'crypto';\n\nconst string_to_md5 = function (text: string): string | undefined {\n    if(text === '') {\n        return undefined;\n    }\n    else {\n        return crypto.createHash('md5').update(text).digest('hex');\n    }\n};\n\nconsole.log(string_to_md5('Hello world')); // Output: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "const generate_integers = (A: number, B: number): Array<number> => {\n  let start = Math.min(A, B); // Determine the starting point\n  let end = Math.max(A, B); // Determine the ending point\n\n  let evenNumbers: Array<number> = []; // Initialize an empty array to store the even numbers\n\n  for (let i = start; i <= end; i++) { // Loop through the range from start to end\n    if (i % 2 === 0) { // Check if the current number is even\n      evenNumbers.push(i); // If it's even, add it to the array\n    }\n  }\n\n  return evenNumbers; // Return the array of even numbers\n};"}

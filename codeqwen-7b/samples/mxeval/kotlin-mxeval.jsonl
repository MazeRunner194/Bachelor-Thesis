{"task_id": "HumanEval_kotlin/0", "language": "kotlin", "completion": "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/1", "language": "kotlin", "completion": "fun separateParenGroups(parenString: String): List<String> {\n    val result = mutableListOf<String>()\n    var startIndex = 0\n    var balance = 0\n    for (i in parenString.indices) {\n        when {\n            parenString[i] == '(' -> balance++\n            parenString[i] == ')' -> balance--\n            balance == 0 -> {\n                result += parenString.substring(startIndex, i + 1)\n                startIndex = i + 1\n            }\n        }\n    }\n    return result\n}\n\nfun main() {\n    val input = \"( ) (( )) (( )( ))\"\n    println(separateParenGroups(input).joinToString(\"\\n\"))\n}"}
{"task_id": "HumanEval_kotlin/2", "language": "kotlin", "completion": "return number - number.toInt()\n}"}
{"task_id": "HumanEval_kotlin/3", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0L\n    for (op in operations) {\n        if (op is Number) {\n            balance += op.toLong()\n            if (balance < 0) {\n                return true\n            }\n        } else {\n            println(\"Invalid operation: $op\")\n        }\n    }\n    return false\n}\n\nfun main(args: Array<String>) {\n    val operations1 = listOf(1, 2, 3)\n    println(belowZero(operations1)) // Expected output: false\n\n    val operations2 = listOf(1, 2, -4, 5)\n    println(belowZero(operations2)) // Expected output: true\n}"}
{"task_id": "HumanEval_kotlin/4", "language": "kotlin", "completion": "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.average()\n    return numbers.sumBy { Math.abs(it - mean) } / numbers.size\n}"}
{"task_id": "HumanEval_kotlin/5", "language": "kotlin", "completion": "fun intersperse(numbers: List<Any>, delimiter: Int): List<Any> {\n    if (numbers.isEmpty()) return emptyList()\n    val result = mutableListOf(numbers[0])\n    for (i in 1 until numbers.size) {\n        result.add(delimiter)\n        result.add(numbers[i])\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/6", "language": "kotlin", "completion": "fun parseNestedParens(parenString: String): List<Int> {\n    val depths = mutableListOf<Int>()\n    var maxDepth = 0\n    var currentDepth = 0\n\n    for (char in parenString) {\n        when (char) {\n            '(' -> {\n                currentDepth++\n                maxDepth = Math.max(maxDepth, currentDepth)\n            }\n            ')' -> currentDepth--\n            ' ' -> {\n                depths.add(maxDepth)\n                maxDepth = 0\n                currentDepth = 0\n            }\n        }\n    }\n\n    // Add the last group depth if it's not followed by a space\n    if (parenString[parenString.length - 1] != ' ') {\n        depths.add(maxDepth)\n    }\n\n    return depths\n}"}
{"task_id": "HumanEval_kotlin/7", "language": "kotlin", "completion": "fun filterBySubstring(strings : List<String>, substring : String) : List<String> {\n    return strings.filter { it.contains(substring) }\n}"}
{"task_id": "HumanEval_kotlin/8", "language": "kotlin", "completion": "fun sumProduct(numbers : List<Any>) : Pair<Int, Int> {\n    var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        if (number is Number) {\n            sum += number.toInt()\n            product *= number.toInt()\n        }\n    }\n\n    return Pair(sum, product)\n}"}
{"task_id": "HumanEval_kotlin/9", "language": "kotlin", "completion": "fun rollingMax(numbers: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    var maxSoFar = Int.MIN_VALUE\n    for (number in numbers) {\n        if (number > maxSoFar) {\n            maxSoFar = number\n        }\n        result += maxSoFar\n    }\n    return result\n}\n\nfun main(args: Array<String>) {\n    val input = listOf(1, 2, 3, 2, 3, 4, 2)\n    println(rollingMax(input)) // prints [1, 2, 3, 3, 3, 4, 4]\n}"}
{"task_id": "HumanEval_kotlin/10", "language": "kotlin", "completion": "fun makePalindrome(s: String): String {\n    if (s.isEmpty()) return \"\"\n    var reverse = s.reversed()\n    for (i in s.length downTo 0) {\n        if (s.substring(i) == reverse.substring(0, s.length - i)) {\n            return s + reverse.substring(s.length - i)\n        }\n    }\n    return \"\"\n}"}
{"task_id": "HumanEval_kotlin/11", "language": "kotlin", "completion": "fun stringXor(A: String, B: String): String {\n    val result = StringBuilder()\n    for (i in A.indices) {\n        if (A[i] == B[i]) {\n            result.append('0')\n        } else {\n            result.append('1')\n        }\n    }\n    return result.toString()\n}"}
{"task_id": "HumanEval_kotlin/12", "language": "kotlin", "completion": "fun longest(strings: List<Any>): String? {\n    if (strings.isEmpty()) return null // Return null if input list is empty\n\n    var longestString = \"\" // Initialize an empty string to hold the longest string found so far\n\n    for (str in strings) { // Iterate over each string in the list\n        if (str is String && str.length > longestString.length) { // Check if the current item is a string and its length is greater than the length of the longest string found so far\n            longestString = str // Update the longest string to be this string\n        }\n    }\n\n    return longestString // Return the longest string found\n}"}
{"task_id": "HumanEval_kotlin/13", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    return if (b == 0) a else greatestCommonDivisor(b, a % b)\n}"}
{"task_id": "HumanEval_kotlin/14", "language": "kotlin", "completion": "fun AllPrefixes(string : String) : List<String> {\n    var prefixes = mutableListOf<String>()\n    for (i in 0 until string.length) {\n        prefixes.add(string.substring(0, i+1))\n    }\n    return prefixes\n}\n\nfun main() {\n    println(AllPrefixes(\"abc\"))  // Output: [A, ab, abc]\n}"}
{"task_id": "HumanEval_kotlin/15", "language": "kotlin", "completion": "fun stringSequence(n: Int): String {\n    return (0..n).joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/16", "language": "kotlin", "completion": "fun countDistinctCharacters(string : String) : Int = string.toLowerCase().distinct().count()"}
{"task_id": "HumanEval_kotlin/17", "language": "kotlin", "completion": "fun parseMusic(musicString: String): List<Int> {\n    val noteBeats = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    return musicString.split(\" \").filterNotNull().map { note ->\n        noteBeats[note] ?: throw IllegalArgumentException(\"Invalid note '$note'\")\n    }\n}"}
{"task_id": "HumanEval_kotlin/18", "language": "kotlin", "completion": "fun howManyTimes(string : String, substring : String) : Int {\n    if (substring.isEmpty()) return 0 // If the substring is empty, return 0\n\n    var count = 0 // Initialize a counter for the number of occurrences\n    var index = 0 // Start with an initial index at position 0\n\n    while(index < string.length) {\n        val startIndex = string.indexOf(substring, index) // Find the next occurrence of substring starting from current index\n        if (startIndex != -1) { // If found\n            count++ // Increment count\n            index = startIndex + 1 // Move to the next possible index for overlapping occurrences\n        } else { // Not found\n            break // Stop searching as there are no more occurrences of substring in the remaining string\n        }\n    }\n\n    return count // Return total count of substrings found\n}"}
{"task_id": "HumanEval_kotlin/19", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numList = numbers.split(\" \").toList()\n    val sortedList = numList.sortedBy { it.toInt() }\n    return sortedList.joinToString(\" \")\n}\n\n// Test the function\nprintln(sortNumbers(\"three one five\")) // Output: \"one three five\""}
{"task_id": "HumanEval_kotlin/20", "language": "kotlin", "completion": "fun findClosestElements(numbers: List<Double>): Pair<Double, Double> {\n    if (numbers.size < 2) throw IllegalArgumentException(\"List must contain at least two elements\")\n\n    var closestPair = Pair(numbers[0], numbers[1])\n    var minDifference = Math.abs(numbers[0] - numbers[1])\n\n    for (i in 0 until numbers.size) {\n        for (j in i + 1 until numbers.size) {\n            val difference = Math.abs(numbers[i] - numbers[j])\n            if (difference < minDifference) {\n                minDifference = difference\n                closestPair = Pair(Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j]))\n            }\n        }\n    }\n\n    return closestPair\n}"}
{"task_id": "HumanEval_kotlin/21", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val min = numbers.minOrNull() ?: return emptyList()\n    val max = numbers.maxOrNull() ?: return emptyList()\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "HumanEval_kotlin/22", "language": "kotlin", "completion": "fun filterIntegers(values: List<Any>): List<Int> {\n    val integers = mutableListOf<Int>()\n    for (value in values) {\n        if (value is Int) {\n            integers.add(value)\n        }\n    }\n    return integers\n}"}
{"task_id": "HumanEval_kotlin/23", "language": "kotlin", "completion": "fun main() {\n    println(strlen('')) // Output: 0\n    println(strlen('abc')) // Output: 3\n}\n\nfun strlen(string : String) : Int {\n    return string.length\n}"}
{"task_id": "HumanEval_kotlin/24", "language": "kotlin", "completion": "fun largestDivisor(n : Int) : Int {\n    for (i in n - 1 downTo 1) {\n        if (n % i == 0) return i\n    }\n    return 1 // If no divisor is found, return 1, as every number is divisible by itself and 1.\n}\n\nfun main() {\n    println(largestDivisor(15)) // Output: 5\n}"}
{"task_id": "HumanEval_kotlin/25", "language": "kotlin", "completion": "fun factorize(n : Int) : List<Int> {\n    val factors = mutableListOf<Int>()\n    var number = n\n    var divisor = 2\n    while (number > 1) {\n        while (number % divisor == 0) {\n            factors.add(divisor)\n            number /= divisor\n        }\n        divisor++\n    }\n    return factors\n}\n\nfun main() {\n    println(factorize(8))   // [2, 2, 2]\n    println(factorize(25))  // [5, 5]\n    println(factorize(70))  // [2, 5, 7]\n}"}
{"task_id": "HumanEval_kotlin/26", "language": "kotlin", "completion": "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = mutableMapOf<Int, Int>()\n    for (number in numbers) {\n        counts[number] = counts.getOrDefault(number, 0) + 1\n    }\n    return numbers.filter { counts[it] == 1 }\n}\n\nfun main() {\n    val testList = listOf(1, 2, 3, 2, 4)\n    println(removeDuplicates(testList)) // prints: [1, 3, 4]\n}"}
{"task_id": "HumanEval_kotlin/27", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map { if (it.isLowerCase()) it.toUpperCase() else It.toLowerCase() }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/28", "language": "kotlin", "completion": "fun concatenate(strings: List<String>) : String {\n    return strings.joinToString(\"\") // Joining without separator to concatenate the strings\n}"}
{"task_id": "HumanEval_kotlin/29", "language": "kotlin", "completion": "fun filterByPrefix(strings: List<String>, prefix: String): List<String> {\n    return strings.filter { it.startsWith(prefix) }\n}\n\n// Test the function\nfun main() {\n    println(filterByPrefix(listOf(), \"A\")) // Output: []\n    println(filterByPrefix(listOf(\"abc\", \"bcd\", \"cde\", \"array\"), \"A\")) // Output: [abc, array]\n}"}
{"task_id": "HumanEval_kotlin/30", "language": "kotlin", "completion": "fun getPositive(l : List<Any>) : List<Int> {\n    return l.filter { it is Int && (it as Int) > 0 }\n}"}
{"task_id": "HumanEval_kotlin/31", "language": "kotlin", "completion": "fun IsPrime(n: Int): Boolean {\n    if (n <= 1) return false // 0 and 1 are not primes\n    if (n == 2) return true // 2 is a prime number\n    if (n % 2 == 0) return false // even numbers greater than 2 are not primes\n\n    var i = 3\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i += 2\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/33", "language": "kotlin", "completion": "fun sortThird(l : List<Int>): List<Int> {\n    val thirdDivisibleIndices = mutableListOf<Int>()\n\n    // Collect the values at indices divisible by three.\n    for (i in l.indices) {\n        if ((i + 1) % 3 == 0) { // +1 because we are using 1-based indexing for this problem description.\n            thirdDivisibleIndices.add(l[i])\n        }\n    }\n\n    // Sort the collected values at indices divisible by three.\n    thirdDivisibleIndices.sort()\n\n    // Create a new list that replaces values at indices divisible by three with sorted values, and keeps other values same.\n    return l.mapIndexed { index, value ->\n        if ((index + 1) % 3 == 0) thirdDivisibleIndices[(index / 3)] else value\n    }\n}"}
{"task_id": "HumanEval_kotlin/34", "language": "kotlin", "completion": "fun unique(list: List<Int>): List<Int> {\n    val uniqueList = mutableSetOf<Int>()\n    for (element in list) {\n        uniqueList.add(element)\n    }\n    return uniqueList.sorted()\n}\n\n// Test\nfun main() {\n    val list = listOf(5, 3, 5, 2, 3, 3, 9, 0, 123)\n    println(unique(list)) // [0, 2, 3, 5, 9, 123]\n}"}
{"task_id": "HumanEval_kotlin/35", "language": "kotlin", "completion": "fun maxElement(l: List<Int>): Int? {\n    return l.maxOrNull()\n}"}
{"task_id": "HumanEval_kotlin/36", "language": "kotlin", "completion": "fun fizzBuzz(n : Int) : Int {\n    var count = 0\n    for (i in 1 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count += i.toString().count { it == '7' }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/37", "language": "kotlin", "completion": "fun sortEven(l: List<Int>): List<Int> {\n    val evenIndicesValues = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    return l.mapIndexed { index, value -> if (index % 2 == 0) evenIndicesValues[index / 2] else value }\n}\n\nfun main(args: Array<String>) {\n    println(sortEven(listOf(1, 2, 3)))  // Outputs: [1, 2, 3]\n    println(sortEven(listOf(5, 6, 3, 4)))  // Outputs: [3, 6, 5, 4]\n}"}
{"task_id": "HumanEval_kotlin/39", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var a = 1\n    var B = 2\n    while (true) {\n        val C = A + B\n        A = B\n        B = C\n        if (isPrime(C)) {\n            count++\n            if (count == n) return C\n        }\n    }\n}\n\nfun main() {\n    println(primeFib(1)) // 2\n    println(primeFib(2)) // 3\n    println(primeFib(3)) // 5\n    println(primeFib(4)) // 13\n    println(primeFib(5)) // 89\n}"}
{"task_id": "HumanEval_kotlin/40", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in i+1 until l.size) {\n            for (k in j+1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/41", "language": "kotlin", "completion": "fun carRaceCollision(n : Int) : Int {\n    // Since each car moving left to right will collide with each car moving right to left,\n    // the total number of collisions will be n * n.\n    return n * n\n}"}
{"task_id": "HumanEval_kotlin/42", "language": "kotlin", "completion": "fun incrList(l: List<Any>): List<Any> {\n    return l.map { if (it is Int) it + 1 else it }\n}"}
{"task_id": "HumanEval_kotlin/43", "language": "kotlin", "completion": "fun pairsSumToZero(list: List<Int>): Boolean {\n    val set = mutableSetOf<Int>()\n    for (num in list) {\n        if (-num in set) {\n            return true\n        } else {\n            set.add(num)\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/44", "language": "kotlin", "completion": "fun changeBase(x : Int, base : Int) : String {\n    if (base < 2 || base > 9) throw IllegalArgumentException(\"Base must be between 2 and 9\")\n    return Integer.toString(x, base)\n}"}
{"task_id": "HumanEval_kotlin/45", "language": "kotlin", "completion": "fun triangleArea(A : Int, h : Int) : Double {\n    return (0.5 * A * h).toDouble()\n}"}
{"task_id": "HumanEval_kotlin/46", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n == 0 || n == 1 || n == 3) return 0\n    if (n == 2) return 2\n\n    var a = 0, B = 0, C = 2, D = 0\n    for(i in 4 until n+1){\n        val temp = A + B + C + D\n        A = B\n        B = C\n        C = D\n        D = temp\n    }\n\n    return D\n}\n\nfun main() {\n    println(fib4(5)) // Output: 4\n    println(fib4(6)) // Output: 8\n    println(fib4(7)) // Output: 14\n}"}
{"task_id": "HumanEval_kotlin/47", "language": "kotlin", "completion": "fun median(l : List<Int>): Any {\n    val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        // If size is even, return the average of two middle elements\n        (sortedList[sortedList.size / 2 - 1] + sortedList[sortedList.size / 2]) / 2.0\n    } else {\n        // If size is odd, return the middle element\n        sortedList[sortedList.size / 2]\n    }\n}"}
{"task_id": "HumanEval_kotlin/48", "language": "kotlin", "completion": "fun isPalindrome(text : String) : Boolean {\n    // Convert text to lowercase to make the check case-insensitive\n    val lowerCaseText = text.toLowerCase()\n\n    // Compare the string with its reverse\n    return lowerCaseText == lowerCaseText.reversed()\n}"}
{"task_id": "HumanEval_kotlin/49", "language": "kotlin", "completion": "fun modp(n : Int, p : Int) : Int {\n    var result = 1\n    for (i in 0 until n) {\n        result = (result * 2) % p\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/51", "language": "kotlin", "completion": "fun removeVowels(text : String) : String {\n    val vowels = \"aeiouAEIOU\"\n    return text.filter { !vowels.contains(it) }\n}"}
{"task_id": "HumanEval_kotlin/52", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "HumanEval_kotlin/53", "language": "kotlin", "completion": "fun add(x : Int, y : Int) : Int {\n    return x + y\n}"}
{"task_id": "HumanEval_kotlin/54", "language": "kotlin", "completion": "fun sameChars(s0 : String, s1 : String) : Boolean {\n    return s0.toCharArray().sorted().contentEquals(s1.toCharArray().sorted())\n}"}
{"task_id": "HumanEval_kotlin/55", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 1) return n\n    var a = 0\n    var B = 1\n    for(i in 2 until n){\n        val temp = A + B\n        A = B\n        B = temp\n    }\n    return B\n}\n\nprintln(fib(10)) // Output: 55\nprintln(fib(1))  // Output: 1\nprintln(fib(8))  // Output: 21"}
{"task_id": "HumanEval_kotlin/56", "language": "kotlin", "completion": "fun correctBracketing(brackets : String) : Boolean {\n    var counter = 0\n\n    for (char in brackets) {\n        if (char == '<') {\n            counter++\n        } else if (char == '>') {\n            counter--\n        }\n\n        if (counter < 0) {\n            return false // There are more closing brackets than opening ones\n        }\n    }\n\n    return counter == 0 // True if there is the same number of opening and closing brackets\n}"}
{"task_id": "HumanEval_kotlin/57", "language": "kotlin", "completion": "fun monotonic(list: List<Int>): Boolean {\n    var increasing = true\n    var decreasing = true\n\n    for (i in 1 until list.size) {\n        if (list[i] > list[i - 1]) {\n            decreasing = false\n        } else if (list[i] < list[i - 1]) {\n            increasing = false\n        }\n    }\n\n    return increasing || decreasing\n}"}
{"task_id": "HumanEval_kotlin/58", "language": "kotlin", "completion": "fun common(l1 : List<Int>, l2 : List<Int>) : List<Int> {\n    val set1 = mutableSetOf<Int>()\n    val set2 = mutableSetOf<Int>()\n\n    // Add all elements from the first list to the first set\n    set1.addAll(l1)\n\n    // Check each element in the second list if it's in the first set, add to the second set if true\n    for (element in l2) {\n        if (set1.contains(element)) {\n            set2.add(element)\n        }\n    }\n\n    return set2.toList() // Convert the Set back to List and return it\n}"}
{"task_id": "HumanEval_kotlin/59", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var largest = -1\n    // Divide n by 2 to remove all even factors\n    while (n % 2 == 0) {\n        largest = 2\n        n /= 2\n    }\n\n    // Check for odd factors from 3 to square root of n\n    for (i in 3..Math.sqrt(n.toDouble()).toInt()) {\n        while (n % i == 0) {\n            largest = i\n            n /= i\n        }\n    }\n\n    // If n becomes a prime number greater than 2, update the largest prime factor\n    if (n > 2) {\n        largest = n\n    }\n\n    return largest\n}"}
{"task_id": "HumanEval_kotlin/60", "language": "kotlin", "completion": "fun sumToN(n : Int) : Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/61", "language": "kotlin", "completion": "fun correctBracketing(brackets : String) : Boolean {\n    var counter = 0\n\n    for (char in brackets) {\n        if (char == '(') counter++\n        else if (char == ')') counter--\n\n        // If at any point the counter is negative, it means there's a closing bracket without an opening one before it.\n        if (counter < 0) return false\n    }\n\n    // If we reach here, that means all brackets are matched correctly.\n    return true\n}"}
{"task_id": "HumanEval_kotlin/62", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    return xs.mapIndexed { index, coefficient -> index * coefficient }\n}\n\nfun main() {\n    println(derivative(listOf(3, 1, 2, 4, 5)))  // Output: [1, 4, 12, 20]\n    println(derivative(listOf(1, 2, 3)))         // Output: [2, 6]\n}"}
{"task_id": "HumanEval_kotlin/63", "language": "kotlin", "completion": "fun fibfib(n : Int) : Int {\n    if (n < 2) return 0\n    if (n == 2) return 1\n\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 1\n\n    for (i in 3 until n + 1) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    }\n\n    return dp[n]\n}"}
{"task_id": "HumanEval_kotlin/64", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var count = 0\n\n    for (c in s) {\n        if (vowels.contains(c)) {\n            count++\n        } else if (c == 'y' || c == 'Y') {\n            if (s.endsWith('y') || s.endsWith('Y')) {\n                count++\n            }\n        }\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/65", "language": "kotlin", "completion": "fun circularShift(x : Int, shift : Int) : String {\n    val digits = x.toString() // convert integer to string\n    val numDigits = digits.length // get number of digits\n    \n    // if shift > number of digits, return digits reversed\n    if (shift >= numDigits) {\n        return digits.reversed()\n    }\n    \n    // Perform circular shift\n    val realShift = shift % numDigits\n    val shiftedDigits = digits.substring(numDigits - realShift) + digits.substring(0, numDigits - realShift)\n    return shiftedDigits\n}"}
{"task_id": "HumanEval_kotlin/66", "language": "kotlin", "completion": "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumBy { it.toInt() }\n}\n\nfun main(args: Array<String>) {\n    println(digitSum(\"\")) // 0\n    println(digitSum(\"abAB\")) // 131\n    println(digitSum(\"abcCd\")) // 67\n    println(digitSum(\"helloE\")) // 69\n    println(digitSum(\"woArBld\")) // 131\n    println(digitSum(\"aAaaaXA\")) // 153\n}"}
{"task_id": "HumanEval_kotlin/67", "language": "kotlin", "completion": "fun fruitDistribution(s : String, n : Int) : Int {\n    val parts = s.split(\" \").toTypedArray()  // Split the string into an array of strings\n    val apples = parts[0].toInt()         // Get the number of apples (first element)\n    val oranges = parts[3].toInt()        // Get the number of oranges (fourth element)\n\n    return n - apples - oranges  // Subtract the total number of fruits by apples and oranges\n}"}
{"task_id": "HumanEval_kotlin/68", "language": "kotlin", "completion": "fun pluck(arr: List<Int>): List<Int> {\n    var smallestEven = Int.MAX_VALUE\n    var index = -1\n\n    for (i in arr.indices) {\n        val value = arr[i]\n\n        if (value % 2 == 0 && value < smallestEven) {\n            smallestEven = value\n            index = i\n        }\n    }\n\n    return if(index == -1) emptyList() else listOf(smallestEven, index)\n}"}
{"task_id": "HumanEval_kotlin/69", "language": "kotlin", "completion": "fun search(lst : List<Int>): Int {\n    val frequencyMap = mutableMapOf<Int, Int>()\n\n    // Count the frequency of each number in the list\n    for (number in lst) {\n        frequencyMap[number] = (frequencyMap[number] ?: 0) + 1\n    }\n\n    // Sort the numbers in descending order based on their value and frequency\n    val sortedNumbers = frequencyMap.toList().sortedByDescending { it.first }.filter { it.first <= It.second }\n\n    // Return the first number if exists, else return -1\n    return sortedNumbers.firstOrNull()?.first ?: -1\n}"}
{"task_id": "HumanEval_kotlin/70", "language": "kotlin", "completion": "fun strangeSortList(lst: List<Any>): List<Any> {\n    var sortedList = mutableListOf<Any>()\n    val tempList = lst.toMutableList() // Create a copy of the original list to modify it\n\n    while (tempList.isNotEmpty()) {\n        // Add the minimum value from the remaining elements\n        sortedList.add(tempList.minOrNull() ?: break) // Break if tempList is empty\n        tempList.remove(tempList.minOrNull())\n\n        // Add the maximum value from the remaining elements\n        sortedList.add(tempList.maxOrNull() ?: break) // Break if tempList is empty\n        tempList.remove(tempList.maxOrNull())\n    }\n\n    return sortedList\n}"}
{"task_id": "HumanEval_kotlin/71", "language": "kotlin", "completion": "fun triangleArea(A : Int, B : Int, C : Int) : Double {\n    if (A + B > C && A + C > B && B + C > A) {\n        val s = (A + B + C).toDouble() / 2.0\n        return kotlin.math.sqrt(s * (s - A.toDouble()) * (s - B.toDouble()) * (s - C.toDouble())) * 2.0\n    } else {\n        return -1.0\n    }\n}"}
{"task_id": "HumanEval_kotlin/72", "language": "kotlin", "completion": "fun willItFly(q : List<Int>, w : Int) : Boolean {\n    // Check if q is a palindrome (it is a mirror image of itself)\n    val isBalanced = q == q.reversed()\n\n    // Calculate the sum of the elements in q\n    val totalWeight = q.sum()\n\n    // Return true if both conditions are met, false otherwise\n    return isBalanced && (totalWeight <= w)\n}"}
{"task_id": "HumanEval_kotlin/73", "language": "kotlin", "completion": "fun smallestChange(arr : List<Int>) : Int {\n    var count = 0  // Initialize counter for necessary changes\n    for (i in 0 until arr.size / 2) {  // Iterate through first half of array\n        if (arr[i] != arr[arr.size - i - 1]) {  // If elements are not equal, increment count\n            count++\n        }\n    }\n    return count  // Return total number of necessary changes\n}"}
{"task_id": "HumanEval_kotlin/74", "language": "kotlin", "completion": "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val countLst1 = lst1.sumBy { it.length }\n    val countLst2 = lst2.sumBy { It.length }\n\n    return if (countLst1 < countLst2) lst1 else lst2\n}\n\n// testing the function\nfun main(args: Array<String>) {\n    println(totalMatch(listOf(), listOf())) // []\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"Hi\"))) // [\"hI\", \"Hi\"]\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hi\", \"hi\", \"admin\", \"project\"))) // [\"hi\", \"admin\"]\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"hi\", \"hi\"))) // [\"hI\", \"hi\", \"hi\"]\n    println(totalMatch(listOf(\"4\"), listOf(\"1\", \"2\", \"3\", \"4\", \"5\"))) // [\"4\"]\n}"}
{"task_id": "HumanEval_kotlin/75", "language": "kotlin", "completion": "fun isMultiplyPrime(A: Int): Boolean {\n    if (A < 2 || A >= 100) return false // Check if the number is less than 2 or greater than or equal to 100\n\n    for (i in 2 until A) { // Iterate from 2 to A-1\n        var count = 0 // Initialize a counter to keep track of the number of prime factors found so far\n        if (A % i == 0) { // If 'i' divides 'A', then 'i' is a prime factor\n            count++\n            while (A % i == 0) { // While 'i' divides 'A', divide 'A' by 'i' to keep dividing it by 'i'\n                A /= i\n            }\n        }\n        if (count > 1) return false // If there are more than one prime factors, then 'A' is not the multiplication of three prime numbers\n    }\n    return A == 3 // Check if 'A' has exactly 3 prime factors\n}"}
{"task_id": "HumanEval_kotlin/76", "language": "kotlin", "completion": "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (x == 1) return true // Any number to the power of 0 is 1\n    if (n == 1 || n == x) return x % n == 0 // If n or x is 1, then only x itself can be a simple power of n\n\n    var temp = n\n    while (temp <= x) {\n        if (temp == x) return true\n        temp *= n\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/77", "language": "kotlin", "completion": "fun isCube(A: Int): Boolean {\n    val absA = Math.abs(A)\n    val cubeRoot = Math.round(Math.pow(absA.toDouble(), 1/3.0))\n\n    return cubeRoot * cubeRoot * cubeRoot == absA\n}\n\n// Test the function with the examples provided in the problem statement\nfun main() {\n    println(isCube(1))   // True\n    println(isCube(2))   // False\n    println(isCube(-1))  // True\n    println(isCube(64))  // True\n    println(isCube(0))   // True\n    println(isCube(180)) // False\n}"}
{"task_id": "HumanEval_kotlin/78", "language": "kotlin", "completion": "fun hexKey(num: String): Int {\n    val primeHexDigits = setOf('2', '3', '5', '7', 'B', 'D')\n    return num.count { it in primeHexDigits }\n}"}
{"task_id": "HumanEval_kotlin/79", "language": "kotlin", "completion": "/**\n * Converts a given decimal number to binary format and adds 'db' at the beginning and end of the string.\n * @param decimal The decimal number to be converted.\n * @return A string representation of the binary number with 'db' prefix and suffix.\n */\nfun decimalToBinary(decimal: Int): String {\n    val binary = Integer.toBinaryString(decimal)\n    return \"db$binary$db\"\n}\n\n// Test cases\nprintln(decimalToBinary(15)) // Outputs: db1111db\nprintln(decimalToBinary(32)) // Outputs: db100000db"}
{"task_id": "HumanEval_kotlin/80", "language": "kotlin", "completion": "fun IsHappy(s: String): Boolean {\n    // Check if length of string is less than 3\n    if (s.length < 3) return false\n\n    // Loop through the string to check every 3 consecutive letters\n    for (i in 0..s.length - 3) {\n        val char1 = s[i]\n        val char2 = s[i + 1]\n        val char3 = s[i + 2]\n\n        // If any 3 consecutive letters are not distinct, return false\n        if (char1 == char2 || char2 == char3 || char1 == char3) {\n            return false\n        }\n    }\n\n    // If all checks pass, string is happy\n    return true\n}"}
{"task_id": "HumanEval_kotlin/81", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val letterGrades = mutableListOf<String>()\n\n    for (gpa in grades) {\n        when {\n            gpa == 4.0 -> letterGrades.add(\"A+\")\n            gpa > 3.7 -> letterGrades.add(\"A\")\n            gpa > 3.3 -> letterGrades.add(\"A-\")\n            gpa > 3.0 -> letterGrades.add(\"B+\")\n            gpa > 2.7 -> letterGrades.add(\"B\")\n            gpa > 2.3 -> letterGrades.add(\"B-\")\n            gpa > 2.0 -> letterGrades.add(\"C+\")\n            gpa > 1.7 -> letterGrades.add(\"C\")\n            gpa > 1.3 -> letterGrades.add(\"C-\")\n            gpa > 1.0 -> letterGrades.add(\"D+\")\n            gpa > 0.7 -> letterGrades.add(\"D\")\n            gpa > 0.0 -> letterGrades.add(\"D-\")\n            else -> letterGrades.add(\"E\")\n        }\n    }\n\n    return letterGrades\n}"}
{"task_id": "HumanEval_kotlin/82", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    if (length <= 1) return false\n\n    for (i in 2..Math.sqrt(length.toDouble()).toInt()) {\n        if (length % i == 0) return false\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/83", "language": "kotlin", "completion": "fun startsOneEnds(n: Int): Int {\n    if (n == 1) return 2  // Special case for n=1, as both \"1\" and \"11\" start or end with 1.\n\n    val firstLast = Math.pow(10.0, (n - 1).toDouble()).toInt()  // First digit + Last Digit\n    val Others = 2 * Math.pow(9.0, (n - 1).toDouble()).toInt()  // Other digits\n\n    return FirstLast + Others - 2  // Remove the duplicates (both \"1\" and \"11\")\n}"}
{"task_id": "HumanEval_kotlin/84", "language": "kotlin", "completion": "fun sumDigitsToBinary(N: Int): String {\n    var n = N\n    var sum = 0\n\n    // calculate the sum of digits in n\n    while (n > 0) {\n        sum += n % 10\n        n /= 10\n    }\n\n    // convert the sum to binary and return it as a string\n    return Integer.toBinaryString(sum)\n}\n\nfun solve(N: Int): String {\n    var N = N\n    if (N < 0 || N > 10000) throw IllegalArgumentException(\"Invalid input!\")\n\n    var result = \"\"\n\n    // split the number into binary representation and sum the digits\n    while (N > 0) {\n        result += if(N % 2 == 1) '1' else '0'\n        N /= 2\n    }\n\n    return result.reversed() // reverse the string since the last digit is at the end\n}"}
{"task_id": "HumanEval_kotlin/85", "language": "kotlin", "completion": "fun add(lst : List<Int>) : Int {\n    var sum = 0\n    for (i in lst.indices step 2) { // iterate over indices of odd positions\n        if (lst[i] % 2 == 0) {  // if the element at this index is even\n            sum += lst[i]  // add it to sum\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/86", "language": "kotlin", "completion": "fun antiShuffle(s : String) : String {\n    return s.split(\" \").map { word ->\n        word.toCharArray().sortedBy { it }.joinToString(\"\")\n    }.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/87", "language": "kotlin", "completion": "fun getRow(lst : List<List<Int>>, x : Int) : List<Pair<Int, Int>> {\n    val result = mutableListOf<Pair<Int, Int>>()\n    for (i in lst.indices) {\n        for (j in 0 until lst[i].size) {\n            if (lst[i][j] == x) {\n                result.add(Pair(i, j))\n            }\n        }\n    }\n    return result.sortedWith(compareBy({ it.first }, { -It.second }))\n}\n\nfun main() {\n    val lst = listOf(\n        listOf(1,2,3,4,5,6),\n        listOf(1,2,3,4,1,6),\n        listOf(1,2,3,4,5,1)\n    )\n    println(getRow(lst, 1))  // prints [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n    val emptyList = listOf<List<Int>>()\n    println(getRow(emptyList, 1))  // prints []\n\n    val mixedList = listOf(\n        listOf(),\n        listOf(1),\n        listOf(1, 2, 3)\n    )\n    println(getRow(mixedList, 3))  // prints [(2, 2)]\n}"}
{"task_id": "HumanEval_kotlin/88", "language": "kotlin", "completion": "fun sortArray(array: List<Int>): List<Int> {\n    if (array.isEmpty()) return array\n\n    val isSumOdd = (array.first() + array.last()) % 2 != 0\n\n    return if (isSumOdd) array.sorted() else array.sortedDescending()\n}"}
{"task_id": "HumanEval_kotlin/89", "language": "kotlin", "completion": "fun encrypt(s: String): String {\n    return s.map { c ->\n        if (c in 'a'..'z') {\n            // calculate new character, taking into account the rotation and wrap around using modulus operator\n            val newChar = ((c - 'a' + 2 * 2) % 26).toChar() + 'a'\n            newChar\n        } else if (c in 'A'..'Z') {\n            // calculate new character, taking into account the rotation and wrap around using modulus operator\n            val newChar = ((c - 'A' + 2 * 2) % 26).toChar() + 'A'\n            newChar\n        } else {\n            // if the character is not a letter (like space or punctuation), we leave it as is.\n            c\n        }\n    }.joinToString(\"\") // join all characters to form a string again\n}"}
{"task_id": "HumanEval_kotlin/90", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Int>): Int? {\n    if (lst.size < 2) return null\n\n    var first = lst[0]\n    var Second = if (First < lst[1]) First else lst[1]\n\n    for (i in 2 until lst.size) {\n        val current = lst[i]\n        if (current < First) {\n            Second = First\n            First = current\n        } else if (current < Second && current != First) {\n            Second = current\n        }\n    }\n\n    return Second\n}"}
{"task_id": "HumanEval_kotlin/91", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    val sentences = s.split(\"[.?!]\".toRegex())\n    return sentences.count { it.trimStart().startsWith(\"I\", true) }\n}\n\nfun main() {\n    println(isBored(\"Hello world\")) // Output: 0\n    println(isBored(\"The sky is blue. The sun is shining. I love this weather\")) // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/92", "language": "kotlin", "completion": "fun anyInt(x : Any, y : Any, z : Any) : Boolean {\n    // Check if all inputs are integers\n    if (x !is Int || y !is Int || z !is Int) {\n        return false\n    }\n\n    // Convert inputs to integers\n    val a = x as Int\n    val B = y as Int\n    val C = z as Int\n\n    // Check if one number is equal to the sum of other two\n    if (A == B + C || B == A + C || C == A + B) {\n        return true\n    } else {\n        return false\n    }\n}"}
{"task_id": "HumanEval_kotlin/93", "language": "kotlin", "completion": "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val shiftedVowels = mapOf(\"a\" to 'c', \"e\" to 'g', \"i\" to 'k', \"o\" to 'q', \"u\" to 'w', \n                                \"A\" to 'C', \"E\" to 'G', \"I\" to 'K', \"O\" to 'Q', \"U\" to 'W')\n\n    val encodedMessage = message.map {\n        when (it) {\n            in vowels -> shiftedVowels[it]!!\n            else -> if(Character.isUpperCase(it)) Character.toLowerCase(it) else Character.toUpperCase(it)\n        }\n    }\n\n    return encodedMessage.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/94", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2 || n == 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false\n        i += 6\n    }\n    return true\n}\n\nfun sumOfDigits(n: Int): Int {\n    var num = n\n    var sum = 0\n    while (num != 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\nfun skjkasdkd(lst : List<Int>) : Int {\n    var largestPrime = -1\n\n    for (num in lst) {\n        if (isPrime(num) && num > largestPrime)\n            largestPrime = num\n    }\n\n    return if (largestPrime != -1) sumOfDigits(largestPrime) else 0\n}\n\nprintln(skjkasdkd(listOf(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3))) // 10\nprintln(skjkasdkd(listOf(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1))) // 25\nprintln(skjkasdkd(listOf(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3))) // 13\nprintln(skjkasdkd(listOf(0,724,32,71,99,32,6,0,5,91,83,0,5,6))) // 11\nprintln(skjkasdkd(listOf(0,81,12,3,1,21))) // 3\nprintln(skjkasdkd(listOf(0,8,1,2,1,7))) // 7"}
{"task_id": "HumanEval_kotlin/95", "language": "kotlin", "completion": "fun checkDictCase(dict : Map<Any?, Any?>) : Boolean {\n    if (dict.isEmpty()) return false\n\n    val allLower = dict.keys.all{ it is String && (It as String).toLowerCase() == It }\n    val AllUpper = dict.keys.all{ It is String && (It as String).toUpperCase() == It }\n\n    return AllLower || AllUpper\n}"}
{"task_id": "HumanEval_kotlin/96", "language": "kotlin", "completion": "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n\n    for (i in 2 until n) {\n        if (isPrime(i)) {\n            primes.add(i)\n        }\n    }\n\n    return primes\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n\n    for (i in 2 until n) {\n        if (n % i == 0) return false\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/97", "language": "kotlin", "completion": "fun multiply(A : Int, B : Int): Int {\n    val unitDigitA = A % 10\n    val unitDigitB = B % 10\n\n    return unitDigitA * unitDigitB\n}"}
{"task_id": "HumanEval_kotlin/98", "language": "kotlin", "completion": "fun countUpper(s : String) : Int {\n    val vowels = \"AEIOU\"\n    var count = 0\n\n    for ((index, c) in s.withIndex()) {\n        if (index % 2 == 0 && vowels.contains(c)) {\n            count++\n        }\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/99", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num % 1 >= 0.5 || (num < 0 && num % 1 <= -0.5)) {\n        num.roundToInt() + 1\n    } else {\n        num.roundToInt()\n    }\n}"}
{"task_id": "HumanEval_kotlin/100", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf<Int>()\n    var currentStones = n\n\n    for (i in 0 until n) {\n        pile.add(currentStones)\n        // Determine the next number of stones based on whether n is odd or even\n        currentStones += if (n % 2 == 0) 1 else 2\n    }\n\n    return pile\n}\n\nfun main() {\n    println(makeAPile(3)) // Output: [3, 5, 7]\n}"}
{"task_id": "HumanEval_kotlin/101", "language": "kotlin", "completion": "fun wordsString(s : String) : List<Any> {\n    // Split the string on commas and spaces\n    val splitArray = s.split(\",\", \" \").filterNot { it.isEmpty() }\n\n    // If there is no comma or space, return the original string as one element in an array\n    if (splitArray.size == 1 && s != splitArray[0]) {\n        return listOf(s)\n    }\n\n    return splitArray\n}"}
{"task_id": "HumanEval_kotlin/102", "language": "kotlin", "completion": "fun chooseNum(x : Int, y : Int) : Int {\n    for (i in x..y step -1){\n        if (i % 2 == 0) return i\n    }\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/103", "language": "kotlin", "completion": "fun roundedAvg(n : Int, m : Int): Any {\n    if (n > m) return -1\n    val sum = n + m\n    val avg = Math.round((sum / 2.0)).toInt()\n    return \"0b${Integer.toBinaryString(avg)}\"\n}"}
{"task_id": "HumanEval_kotlin/104", "language": "kotlin", "completion": "fun uniqueDigits(x: List<Int>): List<Any> {\n    val result = mutableListOf<Int>()\n\n    for (number in x) {\n        if (!containsEvenDigit(number)) {\n            result.add(number)\n        }\n    }\n\n    return result.sorted()\n}\n\nfun containsEvenDigit(number: Int): Boolean {\n    var temp = number\n\n    while (temp > 0) {\n        val digit = temp % 10\n        if (digit % 2 == 0) return true\n        temp /= 10\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/105", "language": "kotlin", "completion": "fun byLength(arr: List<Any>): List<String> {\n    // Filter the array to include only integers between 1 and 9 inclusive\n    val filteredArr = arr.filterIsInstance<Int>().filter { it in 1..9 }\n\n    // Sort the filtered array in ascending order\n    val sortedArr = filteredArr.sorted()\n\n    // Reverse the sorted array\n    val reversedArr = sortedArr.reversed()\n\n    // Map each integer to its corresponding name\n    val namedArr = reversedArr.map { \n        when (it) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3 -> \"Three\"\n            4 -> \"Four\"\n            5 -> \"Five\"\n            6 -> \"Six\"\n            7 -> \"Seven\"\n            8 -> \"Eight\"\n            9 -> \"Nine\"\n            else -> \"\"\n        }\n    }\n\n    return namedArr\n}"}
{"task_id": "HumanEval_kotlin/106", "language": "kotlin", "completion": "fun f(n : Int) : List<Int> {\n    val list = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            var factorial = 1\n            for (j in 1..i) {\n                factorial *= j\n            }\n            list.add(factorial)\n        } else {\n            var sum = 0\n            for (j in 1..i) {\n                sum += j\n            }\n            list.add(sum)\n        }\n    }\n    return list\n}\n\n// Test the function\nfun main() {\n    val result = f(5)\n    println(result)  // Output: [1, 2, 6, 24, 15]\n}"}
{"task_id": "HumanEval_kotlin/107", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}\n\nfun isPalindrome(num: Int): Boolean {\n    val numStr = num.toString()\n    for (i in 0 until numStr.length / 2) {\n        if (numStr[i] != numStr[numStr.length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/108", "language": "kotlin", "completion": "fun countNums(arr: List<Any>): Int {\n    var count = 0\n    for (num in arr) {\n        if (num is Int && sumOfDigits(num) > 0) {\n            count++\n        }\n    }\n    return count\n}\n\nfun sumOfDigits(num: Int): Int {\n    var sum = 0\n    var temp = Math.abs(num)\n    while (temp != 0) {\n        sum += temp % 10\n        temp /= 10\n    }\n    return if (num < 0) -1 * sum else sum\n}"}
{"task_id": "HumanEval_kotlin/109", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n\n    val sortedArr = arr.sorted()\n\n    for (i in 0..arr.size) {\n        val rotatedArr = if (i == arr.size) arr else arr.drop(i).plus(arr.take(i))\n\n        if (rotatedArr == sortedArr) return true\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/110", "language": "kotlin", "completion": "val oddNumbersInLst1 = lst1.filter { it % 2 != 0 }\n    val evenNumbersInLst2 = lst2.filter { It % 2 == 0 }\n\n    return if (oddNumbersInLst1.size <= evenNumbersInLst2.size) \"YES\" else \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/111", "language": "kotlin", "completion": "fun histogram(s: String): Map<Char, Int> {\n    val map = mutableMapOf<Char, Int>()\n    for (c in s) {\n        if (c != ' ') {\n            map[c] = map.getOrDefault(c, 0) + 1\n        }\n    }\n\n    var maxCount = -1\n    val resultMap = mutableMapOf<Char, Int>()\n    for ((key, value) in map) {\n        if (value > maxCount) {\n            maxCount = value\n            resultMap.clear()\n            resultMap[key] = value\n        } else if (value == maxCount) {\n            resultMap[key] = value\n        }\n    }\n\n    return resultMap\n}\n\n// Test the function with some examples\nprintln(histogram(\"a b c\")) // {'A': 1, 'b': 1, 'c': 1}\nprintln(histogram(\"a b b a\")) // {'A': 2, 'b': 2}\nprintln(histogram(\"A b c A B\")) // {'A': 2, 'B': 2}\nprintln(histogram(\"B B B B A\")) // {'B': 4}\nprintln(histogram(\"\")) // {}"}
{"task_id": "HumanEval_kotlin/112", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    val result = s.replace(Regex(\"[$c]\"), \"\") // remove all characters in 'c' from 's'\n    val isPalindrome = result.equals(result.reversed()) // check if the result string is palindrome\n    return listOf(result, isPalindrome)\n}"}
{"task_id": "HumanEval_kotlin/113", "language": "kotlin", "completion": "fun oddCount(lst: List<String>): List<String> {\n    return lst.map { s ->\n        val oddCount = s.count { c -> c.digitToInt() % 2 != 0 }\n        \"the number of odd elements $oddCountn the str$oddCountng $oddCount of the $oddCountnput.\"\n    }\n}\n\nfun main(args: Array<String>) {\n    println(oddCount(listOf(\"1234567\"))) // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    println(oddCount(listOf(\"3\", \"11111111\"))) // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n}"}
{"task_id": "HumanEval_kotlin/114", "language": "kotlin", "completion": "fun minSubArraySum(nums : List<Int>): Int {\n    var minSum = Int.MAX_VALUE\n    var currentSum = 0\n\n    for (num in nums) {\n        currentSum += num\n        if (minSum > currentSum) {\n            minSum = currentSum\n        }\n        if (currentSum > 0) {\n            currentSum = 0\n        }\n    }\n\n    return minSum\n}"}
{"task_id": "HumanEval_kotlin/115", "language": "kotlin", "completion": "fun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n    var totalBucketLowerings = 0\n\n    for (well in grid) {\n        var waterUnitsInWell = well.sum()\n\n        while (waterUnitsInWell > 0) {\n            if (waterUnitsInWell < capacity) {\n                totalBucketLowerings++\n                break\n            } else if (well[well.size - 1] == 1 && waterUnitsInWell == capacity) {\n                totalBucketLowerings++\n                break\n            } else {\n                waterUnitsInWell -= capacity\n                totalBucketLowerings++\n            }\n        }\n    }\n\n    return totalBucketLowerings\n}"}
{"task_id": "HumanEval_kotlin/116", "language": "kotlin", "completion": "fun sortArray(arr : List<Int>) : List<Int> {\n    return arr.sortedWith(Comparator { a, B ->\n        val onesA = Integer.bitCount(A)\n        val onesB = Integer.bitCount(B)\n\n        if (onesA == onesB) A - B else onesA - onesB\n    })\n}"}
{"task_id": "HumanEval_kotlin/117", "language": "kotlin", "completion": "fun selectWords(s : String, n : Int) : List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    val words = s.split(\"\\\\s+\".toRegex())\n    return words.filter { word -> \n        word.count { it in consonants } == n \n    }\n}\n\nfun main(args: Array<String>) {\n    println(selectWords(\"Mary had a little lamb\", 4)) // [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3)) // [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2)) // []\n    println(selectWords(\"Hello world\", 4)) // [\"world\"]\n    println(selectWords(\"Uncle sam\", 3)) // [\"Uncle\"]\n}"}
{"task_id": "HumanEval_kotlin/118", "language": "kotlin", "completion": "fun getClosestVowel(word : String) : String {\n    val vowels = listOf('a', 'E', 'I', 'O', 'U')\n    var closestVowel = \"\"\n\n    for (i in word.indices.reversed()) {\n        if (!vowels.contains(word[i])) { // If it's a consonant\n            // Find the next vowel to its right\n            for (j in i until word.length) {\n                if (vowels.contains(word[j])) {\n                    closestVowel = word[j].toString()\n                    break\n                }\n            }\n\n            // Find the previous vowel to its left\n            for (k in i - 1 downTo 0) {\n                if (vowels.contains(word[k])) {\n                    closestVowel = word[k].toString()\n                    break\n                }\n            }\n\n            // If we found a vowel, break the loop\n            if (closestVowel != \"\") break\n        }\n    }\n\n    return closestVowel.toLowerCase()\n}"}
{"task_id": "HumanEval_kotlin/119", "language": "kotlin", "completion": "fun matchParens(lst: List<String>): String {\n    var count = 0\n    for (str in lst) {\n        for (ch in str) {\n            if (ch == '(') count++ else if (ch == ')') count--\n            if (count < 0) return \"No\" // More closing parentheses than opening ones\n        }\n    }\n    return if (count == 0) \"Yes\" else \"No\" // Balanced if no unbalanced parentheses remain\n}\n\n// Test cases\nprintln(matchParens(listOf(\"()(\", \")\"))) // Output: Yes\nprintln(matchParens(listOf(\")\", \")\"))) // Output: No"}
{"task_id": "HumanEval_kotlin/120", "language": "kotlin", "completion": "fun maximum(arr : List<Int>, k : Int) : List<Any> {\n    // Convert the input list to a mutable list so that we can modify it\n    var arrMutable = arr.toMutableList()\n\n    // Sort the array in descending order and then take the first k elements\n    val sortedMaxK = arrMutable.sortedDescending().take(k)\n\n    // Return the sorted list of max k numbers\n    return sortedMaxK\n}"}
{"task_id": "HumanEval_kotlin/121", "language": "kotlin", "completion": "fun solution(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst.indices step 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/122", "language": "kotlin", "completion": "fun addElements(arr : List<Int>, k : Int) : Int {\n    var sum = 0\n    for (i in 0 until k) {\n        if (arr[i] < 100 && arr[i] > -100) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/123", "language": "kotlin", "completion": "fun getOddCollatz(n: Int): List<Int> {\n    val oddNumbers = mutableListOf<Int>()\n    var currentNumber = n\n\n    while (currentNumber != 1) {\n        if (currentNumber % 2 == 1) {\n            oddNumbers.add(currentNumber)\n        }\n        currentNumber = if (currentNumber % 2 == 0) currentNumber / 2 else 3 * currentNumber + 1\n    }\n\n    oddNumbers.add(1)  // Adding the last number in the sequence which is always 1.\n    return oddNumbers.sorted()\n}"}
{"task_id": "HumanEval_kotlin/124", "language": "kotlin", "completion": "fun validDate(date : String) : Boolean {\n    val parts = date.split(\"-\").map { it.toInt() }\n    return parts.size == 3 &&\n           parts[0] in 1..12 &&\n           (parts[2] % 4 == 0 || parts[2] % 100 != 0 || parts[2] % 400 == 0) &&\n           when(parts[1]) {\n               1,3,5,7,8,10,12 -> parts[0] in 1..31\n               4,6,9,11 -> parts[0] in 1..30\n               else -> parts[0] in 1..29\n           }\n}"}
{"task_id": "HumanEval_kotlin/125", "language": "kotlin", "completion": "fun splitWords(txt : String) : Any {\n    // Check for whitespace in the text\n    val wsMatcher = Regex(\"\\\\s+\").find(txt)\n    if (wsMatcher != null) {\n        return txt.split(\"\\\\s+\".toRegex())\n    }\n\n    // Check for commas in the text\n    val commaMatcher = Regex(\",\").find(txt)\n    if (commaMatcher != null) {\n        return txt.split(\",\".toRegex())\n    }\n\n    // Count lower-case letters with odd order in the alphabet\n    return countLowerOddOrderLetters(txt)\n}\n\nfun countLowerOddOrderLetters(s : String) : Int {\n    val regex = Regex(\"[a-z]\")\n    var count = 0\n    for (matcher in regex.findAll(s)) {\n        val c = matcher.value.toCharArray()[0]\n        if ((c - 'a') % 2 == 1) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/126", "language": "kotlin", "completion": "fun isSorted(lst: List<Int>): Boolean {\n    // Check if list has more than 1 duplicate of the same number\n    val counts = lst.groupingBy { it }.eachCount()\n    if (counts.values.any { it > 1 }) return false\n\n    // Check if list is sorted in ascending order\n    for (i in 0 until lst.size - 1) {\n        if (lst[i] >= lst[i + 1]) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/127", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n\n    if (start > end) return \"NO\"\n\n    val length = end - start + 1\n\n    return ifPrime(length).toString()\n}\n\nfun IfPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2 || n == 3) return true\n\n    if (n % 2 == 0 || n % 3 == 0) return false\n\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/128", "language": "kotlin", "completion": "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) return null\n\n    var productOfSigns = 1\n    var sumOfMagnitudes = 0\n\n    for (num in arr) {\n        val magnitude = Math.abs(num)\n        sumOfMagnitudes += magnitude\n        when {\n            num > 0 -> productOfSigns *= 1\n            num < 0 -> productOfSigns *= -1\n            else -> productOfSigns *= 0\n        }\n    }\n\n    return sumOfMagnitudes * productOfSigns\n}"}
{"task_id": "HumanEval_kotlin/129", "language": "kotlin", "completion": "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    val visited = Array(n) { BooleanArray(n) }\n    val paths = mutableListOf<MutableList<Int>>()\n\n    fun dfs(x: Int, y: Int, path: MutableList<Int>) {\n        if (path.size == k) {\n            paths += path.toMutableList()\n            return\n        }\n\n        val dx = intArrayOf(-1, 0, 1, 0)\n        val dy = intArrayOf(0, -1, 0, 1)\n\n        for (i in 0 until 4) {\n            val nx = x + dx[i]\n            val ny = y + dy[i]\n            if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n                visited[nx][ny] = true\n                path += grid[nx][ny]\n                dfs(nx, ny, path)\n                path.removeAt(path.size - 1)\n                visited[nx][ny] = false\n            }\n        }\n    }\n\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            visited[i][j] = true\n            dfs(i, j, mutableListOf(grid[i][j]))\n            visited[i][j] = false\n        }\n    }\n\n    return paths.minByOrNull { it.toString() }?.toList() ?: emptyList()\n}"}
{"task_id": "HumanEval_kotlin/130", "language": "kotlin", "completion": "fun tri(n: Int): List<Double> {\n    val result = mutableListOf<Double>()\n    if (n >= 0) result.add(1.0)\n    if (n >= 1) result.add(3.0)\n\n    for (i in 2..n) {\n        when {\n            i % 2 == 0 -> result.add(1.0 + i / 2.0)\n            else -> {\n                val next = result[result.size - 1] + result[result.size - 2] + (if (result.size > 2) result[result.size - 3] else 3.0)\n                result.add(next)\n            }\n        }\n    }\n\n    return result\n}\n\nfun main() {\n    println(tri(3)) // prints [1.0, 3.0, 2.0, 8.0]\n}"}
{"task_id": "HumanEval_kotlin/131", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var hasOddDigit = false\n\n    for (digit in n.toString()) {\n        val digitInt = Character.getNumericValue(digit)\n\n        if (digitInt % 2 != 0) {\n            product *= digitInt\n            hasOddDigit = true\n        }\n    }\n\n    return if (!hasOddDigit) 0 else product\n}"}
{"task_id": "HumanEval_kotlin/132", "language": "kotlin", "completion": "fun isNested(input: String): Boolean {\n    val stack = ArrayDeque<Char>()\n    for (char in input) {\n        when (char) {\n            '[' -> stack.addFirst(char)\n            ']' -> if (!stack.isEmpty()) {\n                // Checking if there is any nested bracket\n                if (stack.first() == '[') { \n                    return true // Found a nested bracket, return true immediately\n                } else stack.removeFirst()\n            }\n            else -> continue // Ignoring any other characters\n        }\n    }\n\n    // If we reach here it means that there is no nested bracket in the string.\n    return false \n}\n\nfun main(args: Array<String>) {\n    println(isNested(\"[[]]\")) // true\n    println(isNested(\"[]]]]]]][[[[[]\")) // false\n    println(isNested(\"[][]\")) // false\n    println(isNested(\"[]\")) // false\n    println(isNested(\"[[][]]\")) // true\n    println(isNested(\"[[]][[\")) // true\n}"}
{"task_id": "HumanEval_kotlin/133", "language": "kotlin", "completion": "import kotlin.math.ceil\n\nfun sumSquares(lst: List<Any>): Int {\n    return lst.map { it as Double } // Convert each element to Double\n        .map { ceil(it) } // Round each element to the upper int (Ceiling)\n        .map { it * It } // Square each element\n        .sum() // Sum all squared elements\n}\n\n// Test cases:\nprintln(sumSquares(listOf(1, 2, 3))) // Output should be 14\nprintln(sumSquares(listOf(1, 4, 9))) // Output should be 98\nprintln(sumSquares(listOf(1, 3, 5, 7))) // Output should be 84\nprintln(sumSquares(listOf(1.4, 4.2, 0))) // Output should be 29\nprintln(sumSquares(listOf(-2.4, 1, 1))) // Output should be 6"}
{"task_id": "HumanEval_kotlin/134", "language": "kotlin", "completion": "val trimmedText = txt.trimEnd()\n    if (trimmedText.isEmpty()) return false\n\n    val lastChar = trimmedText[trimmedText.length - 1]\n    return Character.isLetter(lastChar) && !trimmedText[trimmedText.length - 2].isLetter()\n}\n\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\"))  // false\n    println(checkIfLastCharIsALetter(\"apple pi e\")) // true\n    println(checkIfLastCharIsALetter(\"apple pi e \")) // false\n    println(checkIfLastCharIsALetter(\"\")) // false\n}"}
{"task_id": "HumanEval_kotlin/135", "language": "kotlin", "completion": "fun canArrange(arr : List<Int>) : Int {\n    for (i in arr.indices.reversed()) {\n        if (i == 0 || arr[i] >= arr[i - 1]) {\n            return i\n        }\n    }\n    return -1\n}\n\nprintln(canArrange(listOf(1,2,4,3,5))) // Output: 3\nprintln(canArrange(listOf(1,2,3))) // Output: -1"}
{"task_id": "HumanEval_kotlin/136", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    val negatives = lst.filterIsInstance<Int>().filter { it < 0 }.ifEmpty { return listOf(null, null) }\n    val positives = lst.filterIsInstance<Int>().filter { It > 0 }.ifEmpty { return listOf(null, null) }\n\n    return listOf(negatives.maxOrNull(), positives.minOrNull())\n}\n\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // prints [null, 1]\n    println(largestSmallestIntegers(listOf())) // prints [null, null]\n    println(largestSmallestIntegers(listOf(0))) // prints [null, null]\n}"}
{"task_id": "HumanEval_kotlin/137", "language": "kotlin", "completion": "fun compareOne(A : Any, B : Any) : Any? {\n    val aValue = convertToDouble(A)\n    val BValue = convertToDouble(B)\n\n    return when {\n        AValue == BValue -> null // equal values\n        AValue > BValue -> A // larger value\n        else -> B // smaller value\n    }\n}\n\nfun convertToDouble(value : Any?) : Double? {\n    if (value is String) {\n        val cleanValue = value.replace(\",\", \".\")\n        return cleanValue.toDoubleOrNull()\n    } else if (value is Number) {\n        return value.toDouble()\n    }\n\n    return null\n}"}
{"task_id": "HumanEval_kotlin/138", "language": "kotlin", "completion": "fun isEqualToSumEven(n : Int) : Boolean {\n    // Since the smallest even number is 2, the smallest sum of four even numbers is 8 (2+2+2+2).\n    // Therefore, n must be at least 8 to be written as such a sum.\n    if(n < 8) return false\n\n    // If n is even and greater than or equal to 8, it can always be written as the sum of four even numbers.\n    return n % 2 == 0\n}"}
{"task_id": "HumanEval_kotlin/139", "language": "kotlin", "completion": "import java.math.BigInteger\n\nfun factorial(n : BigInteger): BigInteger {\n    var result = BigInteger(\"1\")\n    for (i in 2..n) {\n        result *= i\n    }\n    return result\n}\n\nfun specialFactorial(n : Int): BigInteger {\n    var result = BigInteger(\"1\")\n    for (i in 1..n) {\n        result *= factorial(BigInteger(i.toString()))\n    }\n    return result\n}\n\nfun main(args: Array<String>) {\n    println(specialFactorial(4))  // Outputs: 288\n}"}
{"task_id": "HumanEval_kotlin/140", "language": "kotlin", "completion": "fun fixSpaces(text: String): String {\n    return text.replace(\" {2,}\", \"-\").replace(\" \", \"_\")\n}\n\n// Test the function with some examples\nprintln(fixSpaces(\"Example\")) // Outputs: Example\nprintln(fixSpaces(\"Example 1\")) // Outputs: Example_1\nprintln(fixSpaces(\" Example 2\")) // Outputs: _Example_2\nprintln(fixSpaces(\" Example3\")) // Outputs: _Example-3"}
{"task_id": "HumanEval_kotlin/141", "language": "kotlin", "completion": "fun fileNameCheck(fileName : String) : String {\n    val regex = Regex(\"^[a-zA-Z][a-zA-Z0-9]{0,}[.](txt|exe|dll)$\")\n    if (regex.matches(fileName)) {\n        var countDigits = 0\n        for (c in fileName) {\n            if (Character.isDigit(c)) {\n                countDigits++\n            }\n            if (countDigits > 3) {\n                return \"No\"\n            }\n        }\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}"}
{"task_id": "HumanEval_kotlin/142", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    var result = 0\n\n    for (i in lst.indices) {\n        when {\n            i % 3 == 0 -> result += (lst[i] as Int).pow(2)\n            i % 4 == 0 && i % 3 != 0 -> result += (lst[i] as Int).pow(3)\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/143", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    val primeLengthWords = words.filter { isPrime(it.length) }\n    return primeLengthWords.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/144", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    val xParts = x.split(\"/\").map { it.toInt() }\n    val nParts = n.split(\"/\").map { It.toInt() }\n    return (xParts[0] * nParts[1]) % (xParts[1] * nParts[0]) == 0\n}"}
{"task_id": "HumanEval_kotlin/145", "language": "kotlin", "completion": "fun sumOfDigits(n: Int): Int = Math.abs(n).toString().sum()\n\nfun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.withIndex()\n        .sortedBy { it.value as Int } // first, sort by the value of the element.\n        .sortedBy { sumOfDigits((it.value) as Int) } // Then, sort by the sum of digits of the element.\n}\n\nfun main(args: Array<String>) {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12)))  // [-1, -11, 1, -12, 11]\n    println(orderByPoints(emptyList()))                 // []\n}"}
{"task_id": "HumanEval_kotlin/146", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    val oddDigits = listOf(1, 3, 5, 7, 9)\n    return nums.count { n ->\n        n is Int && n > 10 && oddDigits.contains((n % 10).toInt()) && oddDigits.contains((n / 10 % 10).toInt())\n    }\n}"}
{"task_id": "HumanEval_kotlin/147", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    val a = IntArray(n){it*it - it + 1}\n    var count = 0\n\n    for (i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/148", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    if (index1 == -1 || index2 == -1 || index1 >= index2) {\n        return emptyList()\n    } else {\n        return planets.subList(index1 + 1, index2)\n    }\n}"}
{"task_id": "HumanEval_kotlin/149", "language": "kotlin", "completion": "fun sortedListSum(lst : List<String>) : List<String> {\n    return lst\n        .filter { it.length % 2 == 0 } // Remove strings with odd lengths\n        .sortedWith(compareBy({it.length}, {it})) // Sort by length, then alphabetically\n}\n\n// Test the function\nfun main() {\n    println(sortedListSum(listOf(\"aa\", \"A\", \"aaa\"))) // Output: [\"aa\"]\n    println(sortedListSum(listOf(\"ab\", \"A\", \"aaa\", \"cd\"))) // Output: [\"ab\", \"cd\"]\n}"}
{"task_id": "HumanEval_kotlin/150", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2 until n) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun xOrY(n: Int, x: Int, y: Int): Int {\n    return if (isPrime(n)) x else y\n}\n\nfun main() {\n    println(xOrY(7, 34, 12)) // Expected output: 34\n    println(xOrY(15, 8, 5))  // Expected output: 5\n}"}
{"task_id": "HumanEval_kotlin/151", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    var result = 0\n    for (num in lst) {\n        if (num is Int && num >= 0 && num % 2 != 0) {\n            result += num * num\n        }\n    }\n    return result\n}\n\n// Test the function\nprintln(doubleTheDifference(listOf(1, 3, 2, 0))) // Output: 10\nprintln(doubleTheDifference(listOf(-1, -2, 0))) // Output: 0\nprintln(doubleTheDifference(listOf(9, -2))) // Output: 81\nprintln(doubleTheDifference(listOf(0))) // Output: 0"}
{"task_id": "HumanEval_kotlin/152", "language": "kotlin", "completion": "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in game.indices) {\n        if (game[i] == guess[i]) {\n            result.add(0) // if the guess is correct, add 0 to the result list\n        } else {\n            result.add((game[i] - guess[i]).absoluteValue) // Otherwise, add the absolute difference between game and guess\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/153", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var strongest = \"\"\n    var maxStrength = Int.MIN_VALUE\n\n    for (extension in extensions) {\n        val capCount = extension.count { it.isUpperCase() }\n        val smCount = extension.count { It.isLowerCase() }\n        val strength = capCount - smCount\n\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongest = extension\n        } else if (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongest)) {\n            strongest = extension\n        }\n    }\n\n    return \"$className.$strongest\"\n}\n\n// Test the function\nprintln(strongestExtension(\"my_class\", listOf(\"AA\", \"Be\", \"CC\"))) // Output: myClass.AA"}
{"task_id": "HumanEval_kotlin/154", "language": "kotlin", "completion": "fun cycpatternCheck(A: String, B: String): Boolean {\n    val lenB = B.length\n    val concatenatedString = A + A\n\n    for (i in 0 until lenB) {\n        // Rotate B by i positions\n        val rotatedB = B.substring(i) + B.substring(0, i)\n\n        // Check if the rotated B is a substring of A+A\n        if (concatenatedString.contains(rotatedB)) {\n            return true\n        }\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/155", "language": "kotlin", "completion": "fun evenOddCount(num : Int) : Pair<Int, Int> {\n    val even = num.toString().count { it.isDigit() && it.toInt() % 2 == 0 }\n    val odd = num.toString().count { It.isDigit() && It.toInt() % 2 != 0 }\n    return Pair(even, odd)\n}"}
{"task_id": "HumanEval_kotlin/156", "language": "kotlin", "completion": "val romanNumerals = mapOf(\n        1000 to \"m\", 900 to \"cm\", 500 to \"d\", 400 to \"cd\", 100 to \"c\",\n        90 to \"xc\", 50 to \"l\", 40 to \"xl\", 10 to \"x\", 9 to \"ix\",\n        5 to \"v\", 4 to \"iv\", 1 to \"i\"\n)\n\nfun intToMiniRoman(number: Int): String {\n    var num = number\n    val roman = StringBuilder()\n\n    for ((value, numeral) in romanNumerals) {\n        while (num >= value) {\n            roman.append(numeral)\n            num -= value\n        }\n    }\n\n    return roman.toString()\n}\n\nprintln(intToMiniRoman(19)) // xix\nprintln(intToMiniRoman(152)) // clii\nprintln(intToMiniRoman(426)) // cdxxvi"}
{"task_id": "HumanEval_kotlin/157", "language": "kotlin", "completion": "fun rightAngleTriangle(A: Int, B: Int, C: Int): Boolean {\n    val sides = listOf(A, B, C).sorted()\n    return Math.pow(sides[0].toDouble(), 2) + Math.pow(sides[1].toDouble(), 2) == Math.pow(sides[2].toDouble(), 2)\n}"}
{"task_id": "HumanEval_kotlin/158", "language": "kotlin", "completion": "return words.sorted().groupBy { it.toSet() }.maxByOrNull { it.value.size }?.key ?: \"\"\n}"}
{"task_id": "HumanEval_kotlin/159", "language": "kotlin", "completion": "fun eat(number: Int, need: Int, remaining: Int): List<Int> {\n    val totalEaten = number + minOf(need, remaining) // Calculate the total eaten carrots after meals\n    val leftOver = maxOf(0, remaining - need) // Calculate the number of carrots left after meals\n    return listOf(totalEaten, leftOver) // Return the result as a list\n}"}
{"task_id": "HumanEval_kotlin/160", "language": "kotlin", "completion": "fun doAlgebra(operator: List<String>, operand: List<Int>): Int {\n    val stack = Stack<Int>()\n    for (i in 0 until operator.size) {\n        when (operator[i]) {\n            \"+\" -> stack.push(stack.pop() + operand[i + 1])\n            \"-\" -> stack.push(stack.pop() - operand[i + 1])\n            \"*\" -> stack.push(stack.pop() * operand[i + 1])\n            \"/\" -> stack.push(stack.pop() / operand[i + 1])\n            \"^\" -> stack.push(stack.pop() to operand[i + 1].let { (base, exponent) -> base.toDouble().pow(exponent).toInt() })\n        }\n    }\n    stack.push(operand[0])\n    return stack.sum()\n}"}
{"task_id": "HumanEval_kotlin/161", "language": "kotlin", "completion": "fun solve(s: String): String {\n    val hasLetters = s.any { it.isLetter() }\n\n    return if (hasLetters) {\n        s.map { if (it.isLowerCase()) it.toUpperCase() else if (it.isUpperCase()) it.toLowerCase() else it }.joinToString(\"\")\n    } else {\n        s.reversed()\n    }\n}\n\nfun main(args: Array<String>) {\n    println(solve(\"1234\"))  // Output: \"4321\"\n    println(solve(\"ab\"))    // Output: \"AB\"\n    println(solve(\"#a@C\")) // Output: \"#A@c\"\n}"}
{"task_id": "HumanEval_kotlin/162", "language": "kotlin", "completion": "import java.security.MessageDigest\n\nfun stringToMd5(text : String) : String? {\n    if (text.isEmpty()) return null\n\n    val md = MessageDigest.getInstance(\"MD5\")\n    val messageDigest = md.digest(text.toByteArray(Charsets.UTF_8))\n    val bigInt = BigInteger(1, messageDigest)\n    val hexString = String.format(\"%032x\", bigInt)\n\n    return hexString\n}"}
{"task_id": "HumanEval_kotlin/163", "language": "kotlin", "completion": "fun generateIntegers(A: Int, B: Int): List<Int> {\n    val start = minOf(A, B)\n    val end = maxOf(A, B)\n\n    return (start..end).filter { it % 2 == 0 }.toList()\n}"}

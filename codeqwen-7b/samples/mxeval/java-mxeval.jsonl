{"task_id": "HumanEval_java/0", "language": "java", "completion": "This code defines a class `HasCloseElements` with a static method `hasCloseElements`. The method takes in a list of double values (`numbers`) and a double value (`threshold`) as parameters. It checks if any two numbers in the list are closer to each other than the given threshold.\n\nHere's how it works:\n1. It uses a nested for loop to compare every pair of elements in the list with each other.\n2. For each pair, it calculates the absolute difference between them using `Math.abs`.\n3. If the absolute difference is less than or equal to the threshold, it means there are two numbers closer than the threshold, so it immediately returns `true`.\n4. If no such pair of elements found after checking all combinations, then it returns `false` indicating that there are no two numbers in the list that are closer than the given threshold.\n\nHere's a sample usage:\n- Calling `hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)` would return `true` because 2.0 and 2.8 are closer to each other than 0.3.\n- Calling `hasCloseElements([1.0, 2.0, 3.0], 0.5)` would return `false`, as there are no two numbers in the list that are closer than 0.5."}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.util.*;\n\nclass SeparateParenGroups {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            currentGroup.append(c);\n            // Check if the group is balanced and not inside another group\n            if (balance == 0 && currentGroup.length() > 2) {\n                result.add(currentGroup.toString());\n                currentGroup = new StringBuilder();\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> groups = separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(groups);  // prints: [(), (()), (()())]\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n  \n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n  \n     */\n    public static Double truncateNumber(Double number) {\n        BigDecimal bd = new BigDecimal(String.valueOf(number));\n        BigDecimal integerPart = new BigDecimal(bd.toBigInteger());\n        return bd.subtract(integerPart).doubleValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(truncateNumber(3.5));  // Output: 0.5\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.util.*;\n\nclass BelowZero {\n    public static Boolean belowZero(List<Integer> operations) {\n        int balance = 0; // Initialize the balance to zero\n        for (int operation : operations) {\n            balance += operation; // Update the balance after each operation\n            if (balance < 0) { // Check if the balance falls below zero\n                return true; // If so, return true\n            }\n        }\n        return false; // If the loop completes without the balance falling below zero, return false\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(belowZero(Arrays.asList(1, 2, 3))); // Expected output: False\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5))); // Expected output: True\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "List<Double> dataSet = Arrays.asList(1.0, 2.0, 3.0, 4.0);\ndouble mad = meanAbsoluteDeviation(dataSet);\nSystem.out.println(mad); // Output will be 1.0"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "List<Object> originalList = Arrays.asList(1, 2, 3);\nint delimiter = 4;\nList<Object> resultList = intersperse(originalList, delimiter);\nSystem.out.println(resultList);  // Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ParseNestedParens {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0, currentDepth = 0;\n\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ' && maxDepth > 0) {\n                result.add(maxDepth);\n                maxDepth = 0;\n            }\n        }\n\n        if (maxDepth > 0) result.add(maxDepth); // handle the last group if there is no trailing space\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> res = parseNestedParens(\"(()()) ((())) () ((())()())\");\n        System.out.println(res); // [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FilterBySubstring {\n\n    public static List<String> filterBySubstring(List<String> strings, String substring) {\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(filterBySubstring(Arrays.asList(), \"A\")); // Output: []\n        System.out.println(filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"A\")); // Output: [abc, bacd, array]\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * for a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sumProduct(new ArrayList<Object>())\n     * (0, 1)\n     * >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n     * (10, 24)\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) { // check if the object is an integer\n                sum += (Integer) number; // cast to Integer and add to sum\n                product *= (Integer) number; // cast to Integer and multiply with product\n            }\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumProduct(new ArrayList<Object>())); // prints: [0, 1]\n        System.out.println(sumProduct(Arrays.asList(1, 2, 3, 4))); // prints: [10, 24]\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Object> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxValues = rollingMax(input);\n        System.out.println(rollingMaxValues);\n    }\n\n    public static List<Integer> rollingMax(List<Object> numbers) {\n        PriorityQueue<Integer> maxQueue = new PriorityQueue<>();\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE;\n\n        for (Object num : numbers) {\n            int intNum = (int) num;\n            if (maxQueue.isEmpty() || intNum > maxQueue.peek()) {\n                maxQueue.offer(intNum);\n                currentMax = intNum;\n            }\n            result.add(currentMax);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "String result = MakePalindrome.makePalindrome(\"cata\");\nSystem.out.println(result);  // Output: \"catac\""}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "import java.util.*;\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String A, String B) {\n        if (A.length() != B.length()) {\n            throw new IllegalArgumentException(\"Strings must be of the same length\");\n        }\n\n        char[] result = new char[A.length()];\n        for (int i = 0; i < A.length(); i++) {\n            if (A.charAt(i) == B.charAt(i)) {\n                result[i] = '0';\n            } else {\n                result[i] = '1';\n            }\n        }\n\n        return new String(result);\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n        \n        String maxStr = \"\";\n        for (String s : strings) {\n            if (s.length() > maxStr.length()) {\n                maxStr = s;\n            }\n        }\n        return maxStr;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(longest(Arrays.asList()));\n        System.out.println(longest(Arrays.asList(\"A\", \"b\", \"c\")));\n        System.out.println(longest(Arrays.asList(\"A\", \"bb\", \"ccc\")));\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "public static int greatestCommonDivisor(int A, int b) {\n    if (b == 0)\n        return A;\n    else\n        return greatestCommonDivisor(b, A % b);\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.util.*;\n\nclass AllPrefixes {\n    public static List<Object> allPrefixes(String str) {\n        LinkedList<Object> result = new LinkedList<>();\n        for (int i = 1; i <= str.length(); i++) {\n            result.add(str.substring(0, i));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(AllPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "import java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     */\n    public static String stringSequence(int n) {\n        return IntStream.rangeClosed(0, n)\n                        .mapToObj(Integer::toString)\n                        .collect(Collectors.joining(\" \"));\n    }\n\n    // Test the function with provided data points\n    public static void main(String[] args) {\n        System.out.println(stringSequence(0)); // Expected output: '0'\n        System.out.println(stringSequence(5)); // Expected output: '0 1 2 3 4 5'\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.util.*;\n\nclass CountDistinctCharacters {\n    public static int countDistinctCharacters(String string) {\n        // Convert the string to lowercase to ignore case sensitivity\n        string = string.toLowerCase();\n\n        // Create a HashSet to store unique characters\n        HashSet<Character> set = new HashSet<>();\n\n        // Loop through each character in the string\n        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n\n        // Return the size of the HashSet, which is the number of unique characters\n        return set.size();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countDistinctCharacters(\"xyzXYZ\")); // Outputs: 3\n        System.out.println(countDistinctCharacters(\"Jerry\"));  // Outputs: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.util.*;\n\npublic class ParseMusic {\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beats = new ArrayList<>();\n        for (int i = 0; i < musicString.length(); i++) {\n            if (musicString.charAt(i) == 'o') {\n                beats.add(4);\n            } else if (musicString.charAt(i) == '|' && i + 1 < musicString.length() && musicString.charAt(i+1) == '|') {\n                beats.add(2);\n                i++; // Skip next character to avoid double counting\n            } else if (musicString.charAt(i) == '.' && i + 1 < musicString.length() && musicString.charAt(i+1) == '|') {\n                beats.add(1);\n                i++; // Skip next character to avoid double counting\n            }\n        }\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseMusic(\"o o| .| o| o| .| .| .| .| o o\")); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "public static int howManyTimes(String string, String substring) {\n    int count = 0; // Initialize counter\n\n    // Check if the substring is empty or longer than the string\n    if (substring.isEmpty() || substring.length() > string.length()) {\n        return 0;\n    }\n\n    for (int i = 0; i <= string.length() - substring.length(); i++) { // Loop through the string\n        // Check if a match is found\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            count++; // Increment count if a match is found\n        }\n    }\n\n    return count; // Return the final count of occurrences\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.util.*;\n\npublic class SortNumbers {\n    public static String sortNumbers(String numbers) {\n        // Mapping the number strings to their corresponding integer values\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n\n        // Splitting the input string into an array of number strings\n        String[] nums = numbers.split(\" \");\n\n        // Creating a list to store the corresponding integer values\n        List<Integer> numList = new ArrayList<>();\n        for (String numStr : nums) {\n            numList.add(map.get(numStr));\n        }\n\n        // Sorting the list in ascending order\n        Collections.sort(numList);\n\n        // Creating a new string to store the sorted numbers\n        StringBuilder sb = new StringBuilder();\n        for (int num : numList) {\n            sb.append(map.getKey(num)).append(\" \");\n        }\n\n        // Removing the trailing space\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortNumbers(\"three one five\")); // Output: one three five\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "Collections.sort(numbers); // Sort the list in ascending order\n\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) { // Found a closer pair of numbers\n                minDifference = difference;\n                closestPair.clear(); // Clear previous closest pair\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            } else if (difference == minDifference) { // Found a pair with the same minimal difference\n                // In case of identical differences, add it to the list\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // Expected: (2.0, 2.2)\n        System.out.println(findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // Expected: (2.0, 2.0)\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.*;\n\nclass RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            rescaledNumbers.add((num - min) / range);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(numbers));\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.util.*;\n\npublic class FilterIntegers {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> integersOnly = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integersOnly.add((Integer) value);\n            }\n        }\n        return integersOnly;\n    }\n\n    public static void main(String[] args) {\n        List<Object> testList1 = Arrays.asList('A', 3.14, 5);\n        System.out.println(filterIntegers(testList1));  // Output: [5]\n\n        List<Object> testList2 = Arrays.asList(1, 2, 3, \"abc\", new HashMap<>(), new ArrayList<>());\n        System.out.println(filterIntegers(testList2));  // Output: [1, 2, 3]\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "class Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     */\n    public static int strlen(String str) {\n        return str.length();\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "public static int largestDivisor(int n) {\n    for (int i = n - 1; i >= 1; i--) {\n        if (n % i == 0) { // check if 'i' divides 'n' evenly\n            return i; // return the first number that divides 'n' evenly\n        }\n    }\n    return 1; // if no divisor is found, return 1 as every number is divisible by 1.\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.util.*;\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     */\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n\n        // Divide by 2 until n is odd\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n\n        // Check for odd factors from 3 to square root of n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n\n        // If n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorize(8));   // Output: [2, 2, 2]\n        System.out.println(factorize(25));  // Output: [5, 5]\n        System.out.println(factorize(70));  // Output: [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.util.*;\n\npublic class RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n     * [1, 3, 4]\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        Map<Object, Integer> count = new HashMap<>();\n        for (Object num : numbers) {\n            count.put(num, count.getOrDefault(num, 0) + 1);\n        }\n\n        List<Object> result = new ArrayList<>();\n        for (Object num : numbers) {\n            if (count.get(num) == 1) {\n                result.add(num);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "import java.util.stream.Collectors;\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     */\n    public static String flipCase(String input) {\n        return input.chars()\n                    .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                    .map(c -> Character.toString((char) c.intValue()))\n                    .collect(Collectors.joining());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\")); // Output: hELLO\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "StringBuilder result = new StringBuilder();\n        for (Object obj : strings) {\n            if (obj instanceof String) {\n                result.append((String) obj);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(concatenate(Collections.emptyList())); // Output: \"\"\n        System.out.println(concatenate(Arrays.asList(\"A\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.util.*;\n\nclass FilterByPrefix {\n    public static List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        List<String> test1 = new ArrayList<>();\n        List<String> test2 = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        System.out.println(filterByPrefix(test1, \"A\")); // prints []\n        System.out.println(filterByPrefix(test2, \"A\")); // prints [abc, array]\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n     * [2, 5, 6]\n     * >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n     * [5, 3, 2, 3, 9, 123, 1]\n     */\n    public static List<Integer> getPositive(List<Number> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (Object obj : l) {\n            if (obj instanceof Number && ((Number) obj).doubleValue() > 0) {\n                positiveNumbers.add(((Number) obj).intValue());\n            }\n        }\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getPositive(Arrays.asList(-1, 2, -4, 5, 6))); // [2, 5, 6]\n        System.out.println(getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "import java.lang.*;\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public static Boolean isPrime(int n) {\n        if (n <= 1) return false; // 1 and numbers less than 1 are not prime\n\n        for (int i = 2; i * i <= n; i++) { // only go up to the square root of n\n            if (n % i == 0) return false; // if divisible by any number other than 1 and itself, it is not prime\n        }\n        return true; // If no factors were found, then it's a prime number\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPrime(6));  // Output: false\n        System.out.println(isPrime(101));  // Output: true\n        System.out.println(isPrime(11));  // Output: true\n        System.out.println(isPrime(13441));  // Output: true\n        System.out.println(isPrime(61));  // Output: true\n        System.out.println(isPrime(4));  // Output: false\n        System.out.println(isPrime(1));  // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.*;\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a new list l' such that\n     * l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted.\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        // Extract elements at indices divisible by 3\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n\n        // Sort the extracted elements\n        Collections.sort(thirds);\n\n        // Create a new list to store the result\n        List<Integer> sortedList = new ArrayList<>();\n        int thirdIndex = 0; // To keep track of the index in the sorted thirds list\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                // Replace the element at the current index with the next sorted third's element\n                sortedList.add(thirds.get(thirdIndex++));\n            } else {\n                // Keep the other elements as they are\n                sortedList.add(l.get(i));\n            }\n        }\n\n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortThird(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "Set<Integer> set = new HashSet<>(l); // remove duplicates from the list\n        List<Integer> result = new ArrayList<>(set); // convert set back to list\n        Collections.sort(result); // sort the list in ascending order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // prints: [0, 2, 3, 5, 9, 123]\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.util.*;\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element(Arrays.asList(1, 2, 3))\n     * 3\n     * >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        return max;\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "This Java code snippet defines a class `FizzBuzz` with a method `fizzBuzz(int n)`. The method takes an integer `n` as input and returns the number of times the digit 7 appears in integers less than `n` that are divisible by either 11 or 13.\n\nHere's how it works:\n\n1. The `fizz_buzz` method iterates through all integers from 0 to `n-1`.\n2. For each integer, it checks if the number is divisible by 11 or 13 using the modulo operator (`%`).\n3. If a number is divisible by either 11 or 13, the method then checks if it contains the digit 7 in its string representation using the `contains()` method of the `String` class.\n4. If the number contains the digit 7, the method increments a counter variable.\n5. Finally, the method returns the value of the counter, which represents the total number of times the digit 7 appears in integers less than `n` that are divisible by either 11 or 13.\n\nLet's look at an example:\n\n- For `fizzBuzz(50)`, since there are no numbers less than 50 divisible by 11 or 13 containing the digit 7, it returns 0.\n- for `fizzBuzz(78)`, it checks the integers 11, 22, 33, 44, and 55 (which are all divisible by either 11 or 13). Among these, only 77 contains the digit 7, so the method returns 1.\n- For `fizzBuzz(79)`, 77 is still the only number less than 79 divisible by either 11 or 13 containing the digit 7, so it returns 2."}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "List<Integer> sortedEvens = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEvens.add(l.get(i));\n        }\n\n        Collections.sort(sortedEvens);\n\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0, j = 0; i < result.size(); i += 2, j++) {\n            result.set(i, sortedEvens.get(j));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(5, 6, 3, 4);\n\n        System.out.println(sortEven(list1)); // Output: [1, 2, 3]\n        System.out.println(sortEven(list2)); // Output: [3, 6, 5, 4]\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "class PrimeFib {\n    public static int primeFib(int n) {\n        int a = 0;\n        int B = 1;\n        int count = 0;\n        while (true) {\n            int fib = A + B;\n            A = B;\n            B = fib;\n            if (isPrime(fib)) {\n                count++;\n                if (count == n) {\n                    return fib;\n                }\n            }\n        }\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n        for (int i = 3; i * i <= number; i += 2) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}\n\n// Test the function with provided data points\npublic static void main(String[] args) {\n    System.out.println(PrimeFib.primeFib(1)); // Output: 2\n    System.out.println(PrimeFib.primeFib(2)); // Output: 3\n    System.out.println(PrimeFib.primeFib(3)); // Output: 5\n    System.out.println(PrimeFib.primeFib(4)); // Output: 13\n    System.out.println(PrimeFib.primeFib(5)); // Output: 89\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    public static boolean triplesSumToZero(ArrayList<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n-2; i++) {\n            HashSet<Integer> s = new HashSet<>();\n            for (int j = i+1; j < n; j++) {\n                int x = -(l.get(i) + l.get(j));\n                if (s.contains(x)) {\n                    return true;\n                } else {\n                    s.add(l.get(j));\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> test1 = new ArrayList<>(Arrays.asList(1, 3, 5, 0));\n        System.out.println(triplesSumToZero(test1));  // Output: false\n\n        ArrayList<Integer> test2 = new ArrayList<>(Arrays.asList(1, 3, -2, 1));\n        System.out.println(triplesSumToZero(test2));  // Output: true\n\n        ArrayList<Integer> test3 = new ArrayList<>(Arrays.asList(1, 2, 3, 7));\n        System.out.println(triplesSumToZero(test3));  // Output: false\n\n        ArrayList<Integer> test4 = new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7));\n        System.out.println(triplesSumToZero(test4));  // Output: true\n\n        ArrayList<Integer> test5 = new ArrayList<>(Arrays.asList(1));\n        System.out.println(triplesSumToZero(test5));  // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "public static int carRaceCollision(int n) {\n    return n * n;\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "public static List<Object> incrList(List<Object> l) {\n    List<Object> result = new ArrayList<>();\n    for (Object obj : l) {\n        if (obj instanceof Integer) {\n            result.add((Integer) obj + 1);\n        } else if (obj instanceof List) {\n            result.add(incrList((List<Object>) obj));\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type in the list\");\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "The given Java code snippet defines a class `PairsSumToZero` with a static method `pairsSumToZero` that takes a list of integers as an argument. The method is designed to determine if there are any two distinct elements in the list that sum to zero.\n\nHere's how the method works:\n- It first checks if the input list `l` has less than 2 elements, and returns `False` immediately since it's impossible for any two numbers to sum to zero with fewer than two elements.\n- Then, it uses a `HashSet` to keep track of the elements seen so far in the list.\n- For each element `x` in the list:\n  - If `-x` is already present in the HashSet (meaning there's another number that, when added to `-x`, equals zero), it returns `True`.\n  - Otherwise, it adds `x` to the HashSet.\n- If no such pair of numbers is found after iterating through the entire list, it returns `False`.\n\nThe provided test cases demonstrate how this method should be used and verify its correctness:\n\n1. `pairsSumToZero([1, 3, 5, 0])` returns `False` because there are no two distinct numbers in the list that sum to zero.\n2. `pairsSumToZero([1, 3, -2, 1])` also returns `False`, as it doesn't contain any pair of numbers that sum to zero.\n3. `pairsSumToZero([1, 2, 3, 7])` returns `False`, because there are no two distinct numbers in the list that sum to zero.\n4. `pairsSumToZero([2, 4, -5, 3, 5, 7])` returns `True`, as both the number 2 and -2 sum to zero.\n5. `pairsSumToZero([1])` returns `False`, since a single element cannot form a pair that sums to zero."}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "public class ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     */\n    public static String changeBase(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9\");\n        }\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(changeBase(8, 3)); // Output: '22'\n        System.out.println(changeBase(8, 2)); // Output: '1000'\n        System.out.println(changeBase(7, 2)); // Output: '111'\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "class TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     */\n    public static double triangleArea(int A, int h) {\n        return (A * h) / 2.0;\n    }\n\n    // You can call this method to test the triangleArea function\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5, 3)); // Output: 7.5\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "public class Fib4 {\n\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * \n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     */\n    public static int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        // Initializing the first four elements of the sequence.\n        int a = 0, B = 0, C = 2, D = 0;\n\n        for (int i = 4; i <= n; i++) {\n            // Calculate next element in sequence\n            int temp = A + B + C + D;\n\n            // Update previous four elements for next iteration\n            A = B;\n            B = C;\n            C = D;\n            D = temp;\n        }\n\n        return D; // Return the n-th element\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // Output: 4\n        System.out.println(fib4(6)); // Output: 8\n        System.out.println(fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "public static Number median(List<Integer> l) {\n    Collections.sort(l); // Sort the list in ascending order\n    int size = l.size();\n    if (size % 2 == 1) { // If the list has an odd number of elements\n        return l.get(size / 2); // Return the middle element\n    } else { // If the list has an even number of elements\n        double middle1 = l.get(size / 2 - 1);\n        double middle2 = l.get(size / 2);\n        return (middle1 + middle2) / 2; // Return the average of the two middle elements\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "import java.util.*;\n\nclass IsPalindrome {\n    public static Boolean isPalindrome(String text) {\n        if (text == null || text.isEmpty()) {\n            return true; // Empty string is a palindrome\n        }\n        String reversed = new StringBuilder(text).reverse().toString();\n        return text.equalsIgnoreCase(reversed); // Check if the original and reversed strings are equal, ignoring case\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     */\n    public static int modp(int n, int p) {\n        int result = 1;\n        int base = 2;\n        \n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n\n        return result;\n    }\n\n    // Main function to test the modp method\n    public static void main(String[] args) {\n        System.out.println(modp(3, 5)); // Output: 3\n        System.out.println(modp(1101, 101)); // Output: 2\n        System.out.println(modp(0, 101)); // Output: 1\n        System.out.println(modp(3, 11)); // Output: 8\n        System.out.println(modp(100, 101)); // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "public class RemoveVowels {\n    // Define a constant array containing all lowercase and uppercase vowels\n    private static final char[] VOWELS = {'a', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'};\n\n    /**\n     * removeVowels is a function that takes string and returns string without vowels.\n     * The method iterates through each character in the input string, checks if it's not a vowel (by looking for it in the VOWELS array),\n     * and then appends it to the result string if it's not a vowel.\n     */\n    public static String removeVowels(String text) {\n        // Initialize an empty StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character in the input string\n        for (char ch : text.toCharArray()) {\n            // Check if the current character is not a vowel\n            if (!Arrays.binarySearch(VOWELS, ch) >= 0) {\n                // Append the non-vowel character to the result\n                result.append(ch);\n            }\n        }\n\n        // Convert the StringBuilder back to a string and return it\n        return result.toString();\n    }\n\n    // Main method for testing the removeVowels function with provided test cases\n    public static void main(String[] args) {\n        System.out.println(removeVowels(\"\")); // Output: \"\"\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(removeVowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(removeVowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(removeVowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(removeVowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "public class BelowThreshold {\n    /**\n     * Check if all elements in the list are below a given threshold.\n     * \n     * @param numbers A List of integers to be checked.\n     * @param threshold The threshold value against which numbers are compared.\n     * @return true if all numbers in the list are below the threshold, false otherwise.\n     */\n    public static boolean belowThreshold(List<Integer> numbers, int threshold) {\n        for (int number : numbers) {\n            if (number >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Test the function with provided data points\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // Expected: true\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5));  // Expected: false\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "return x + y;\n    }\n\n    public static void main(String[] args) {\n        // Test cases to verify the correctness of the function\n        System.out.println(\"5 is: \" + add(2, 3)); // Expected output: 5\n        System.out.println(\"12 is: \" + add(5, 7)); // Expected output: 12\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "import java.util.*;\n\nclass SameChars {\n    public static Boolean sameChars(String s0, String s1) {\n        // Create HashMaps to store character counts for both strings\n        HashMap<Character, Integer> charCountMapS0 = new HashMap<>();\n        HashMap<Character, Integer> charCountMapS1 = new HashMap<>();\n\n        // Count characters in the first String\n        for (char c : s0.toCharArray()) {\n            if (charCountMapS0.containsKey(c)) {\n                charCountMapS0.put(c, charCountMapS0.get(c) + 1);\n            } else {\n                charCountMapS0.put(c, 1);\n            }\n        }\n\n        // Count characters in the Second String\n        for (char c : s1.toCharArray()) {\n            if (charCountMapS1.containsKey(c)) {\n                charCountMapS1.put(c, charCountMapS1.get(c) + 1);\n            } else {\n                charCountMapS1.put(c, 1);\n            }\n        }\n\n        // Compare the character counts of both strings\n        return charCountMapS0.equals(charCountMapS1);\n    }\n\n    // Test cases (not part of the method itself)\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 1) { // If the input is less than or equal to 1, return the number itself as the base cases\n        return n;\n    } else {\n        // Otherwise, recursively call the fib function with (n-1) and (n-2), then add them together\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "public static boolean correctBracketing(String brackets) {\n    int count = 0; // Initialize counter\n    for (int i = 0; i < brackets.length(); i++) {\n        char c = brackets.charAt(i);\n        if (c == '<') {\n            count++; // Increment for every opening bracket\n        } else if (c == '>') {\n            count--; // Decrement for every closing bracket\n        }\n    }\n    return count == 0; // Return true if all brackets are correctly matched, false otherwise\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "List<Integer> numbers = Arrays.asList(1, 2, 4, 20);\nSystem.out.println(Monotonic.monotonic(numbers));  // Output: true\n\nnumbers = Arrays.asList(1, 20, 4, 10);\nSystem.out.println(Monotonic.monotonic(numbers));  // Output: false\n\nnumbers = Arrays.asList(4, 1, 0, -10);\nSystem.out.println(Monotonic.monotonic(numbers));  // Output: true"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\nclass Common {\n    public static List<Integer> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object obj : l2) {\n            if (obj instanceof Integer && set1.contains((Integer) obj)) {\n                result.add((Integer) obj);\n                set1.remove(obj); // Remove to ensure uniqueness\n            }\n        }\n        \n        Collections.sort(result); // Sort the list\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Object> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(common(list1, list2)); // Output: [1, 5, 653]\n\n        List<Integer> list3 = Arrays.asList(5, 3, 2, 8);\n        List<Object> list4 = Arrays.asList(3, 2);\n        System.out.println(common(list3, list4)); // Output: [2, 3]\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "public static int largestPrimeFactor(int n) {\n    int maxPrime = -1;\n   \n    // Divide n by 2 to remove all even factors\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1; // Equivalent to n /= 2, but faster for integers\n    }\n   \n    // Now n must be odd. Starting from 3, try all odd numbers\n    for (int i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n   \n    // If n becomes a prime number greater than 2\n    if (n > 2)\n        maxPrime = n;\n   \n    return maxPrime;\n}\n\n// Test the function with your examples\npublic static void main(String[] args) {\n    System.out.println(largestPrimeFactor(13195)); // Outputs: 29\n    System.out.println(largestPrimeFactor(2048));  // Outputs: 2\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "class SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     */\n    public static int sumToN(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return n + sumToN(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Sum to 30: \" + sumToN(30));\n        System.out.println(\"Sum to 100: \" + sumToN(100));\n        System.out.println(\"Sum to 5: \" + sumToN(5));\n        System.out.println(\"Sum to 10: \" + sumToN(10));\n        System.out.println(\"Sum to 1: \" + sumToN(1));\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "public static Boolean correctBracketing(String brackets) {\n        int balance = 0; // variable to keep track of the number of open brackets\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                balance++; // increment for an opening bracket\n            } else if (c == ')') {\n                balance--; // decrement for a closing bracket\n                // if balance is negative, it means there are more closing brackets than opening ones at that point\n                if (balance < 0) {\n                    return false; // return false as soon as we find this case\n                }\n            }\n        }\n        // If balance is zero, all brackets are properly closed\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"(\")); // False\n        System.out.println(correctBracketing(\"()\")); // True\n        System.out.println(correctBracketing(\"(()())\")); // True\n        System.out.println(correctBracketing(\")(()\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "List<Integer> poly1 = Arrays.asList(3, 1, 2, 4, 5);\nList<Object> derivativeOfPoly1 = Derivative.derivative(poly1);\nSystem.out.println(derivativeOfPoly1);  // Output: [1, 4, 12, 20]\n\nList<Integer> poly2 = Arrays.asList(1, 2, 3);\nList<Object> derivativeOfPoly2 = Derivative.derivative(poly2);\nSystem.out.println(derivativeOfPoly2);  // Output: [2, 6]"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "import java.util.*;\n\nclass Fibfib {\n    private Map<Integer, Integer> cache = new HashMap<>();\n\n    public static void main(String[] args) {\n        Fibfib fibfib = new Fibfib();\n        System.out.println(fibfib.fibfib(1)); // Output: 0\n        System.out.println(fibfib.fibfib(5)); // Output: 4\n        System.out.println(fibfib.fibfib(8)); // Output: 24\n    }\n\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Check if the value is already computed and stored in the cache.\n        if (!cache.containsKey(n)) {\n            int result = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n            cache.put(n, result);\n        }\n\n        return cache.get(n);\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "import java.util.*;\n\nclass VowelsCount {\n    public static void main(String[] args) {\n        // Test cases to check if the vowels_count function works correctly\n        System.out.println(vowelsCount(\"abcde\"));  // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\"));  // Output: 3\n    }\n\n    public static int vowelsCount(String s) {\n        int count = 0;\n        s = s.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "String numStr = Integer.toString(x);\n        int len = numStr.length();\n\n        // If shift is greater than the number of digits, reverse the string\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n\n        // Calculate effective shift considering wrap-around\n        int actualShift = shift % len;\n\n        // Perform circular shift\n        String shifted = numStr.substring(len - actualShift) + numStr.substring(0, len - actualShift);\n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(circularShift(12, 1)); // Output: \"21\"\n        System.out.println(circularShift(12, 2)); // Output: \"12\"\n        System.out.println(circularShift(12345, 3)); // Output: \"45123\"\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digitsum {\n    public static int digitsum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(digitsum(\"\")); // 0\n        System.out.println(digitsum(\"abAB\")); // 131\n        System.out.println(digitsum(\"abcCd\")); // 67\n        System.out.println(digitsum(\"helloE\")); // 69\n        System.out.println(digitsum(\"woArBld\")); // 131\n        System.out.println(digitsum(\"aAaaaXA\")); // 153\n    }\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "class FruitDistribution {\n    public static int fruitDistribution(String s, int n) {\n        // Split the string into parts\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        return n - apples - oranges;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fruitDistribution(\"5 apples and 6 oranges\", 19));  // Output: 8\n        System.out.println(fruitDistribution(\"0 apples and 1 oranges\",3)); // Output: 2\n        System.out.println(fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(fruitDistribution(\"100 apples and 1 oranges\",120)); // Output: 19\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "class Pluck {\n\n    public static List<Object> pluck(List<Object> arr) {\n        // Initialize variables to store the smallest even value and its index\n        int minEvenVal = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            // Convert current element to integer for easy manipulation\n            int val = (Integer) arr.get(i);\n\n            // Check if the value is even and smaller than the current smallest even value found\n            if (val % 2 == 0 && val <= minEvenVal) {\n                minEvenVal = val;\n                minIndex = i;\n            }\n        }\n\n        // If we have found an even node, return it along with its index in a list\n        if (minIndex != -1) {\n            List<Object> result = new ArrayList<>();\n            result.add(minEvenVal);\n            result.add(minIndex);\n            return result;\n        }\n\n        // If no even node is found, return an empty list\n        return new ArrayList<>();\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(4, 2, 3);\n        System.out.println(pluck(arr1));  // Output: [2, 1]\n\n        List<Object> arr2 = Arrays.asList(1, 2, 3);\n        System.out.println(pluck(arr2));  // Output: [2, 1]\n\n        List<Object> arr3 = new ArrayList<>();\n        System.out.println(pluck(arr3));  // Output: []\n\n        List<Object> arr4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n        System.out.println(pluck(arr4));  // Output: [0, 1]\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.util.*;\n\npublic class Search {\n    static class Frequency implements Comparable<Frequency> {\n        int num; // number itself\n        int freq; // its frequency in the list\n\n        public Frequency(int n, int f) {\n            num = n;\n            freq = f;\n        }\n\n        @Override\n        public int compareTo(Frequency other) {\n            return Integer.compare(other.freq, this.freq); // sort in descending order based on frequency\n        }\n    }\n\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqMap = new HashMap<>(); // map to store the frequencies of each number\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        List<Frequency> list = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            list.add(new Frequency(entry.getKey(), entry.getValue()));\n        }\n\n        Collections.sort(list); // sort by frequency in descending order\n\n        int result = -1;\n        for (Frequency f : list) {\n            if (f.num > 0 && f.freq >= f.num) {\n                result = f.num;\n                break;\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.*;\n\nclass StrangeSortList {\n    public static List<Object> strangeSortList(List<Object> lst) {\n        Collections.sort(lst); // sort the list in ascending order\n        List<Object> result = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // add the smallest element to the result\n            result.add(lst.remove(0));\n            if (!lst.isEmpty()) {\n                // add the largest element to the result\n                result.add(lst.remove(lst.size() - 1));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(strangeSortList(new ArrayList<>())); // []\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "double s = (A + b + c) / 2.0; // Calculate the semi-perimeter\n\n        // Check if the sides form a valid triangle\n        if (s > A && s > b && s > c) {\n            double area = Math.sqrt(s * (s - A) * (s - b) * (s - c)); // Calculate the area using Heron's formula\n            return BigDecimal.valueOf(area).setScale(2, RoundingMode.HALF_UP); // Return the area rounded to 2 decimal places\n        } else {\n            return -1; // Return -1 if the sides do not form a valid triangle\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // Expected output: 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Expected output: -1\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n    public static boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return isBalanced(q) && sum <= w;\n    }\n\n    private static boolean IsBalanced(List<Integer> q) {\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n        return q.equals(reversedQ);\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.util.*;\n\nclass SmallestChange {\n    public static int smallestChange(List<Integer> arr) {\n        int left = 0;  // Start from the beginning of the list\n        int right = arr.size() - 1;  // Start from the end of the list\n\n        int changesNeeded = 0;  // Keep track of how many changes are needed\n\n        while (left < right) {  // While we haven't checked all elements in the list\n            if (!arr.get(left).equals(arr.get(right))) {  // If the left and right elements are not equal\n                changesNeeded++;  // Increment the count of changes needed\n            }\n\n            left++;  // Move towards the center from the left\n            right--;  // Move towards the center from the right\n        }\n\n        return changesNeeded;  // Return the number of changes needed\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(1,2,3,5,4,7,9,6);\n        System.out.println(smallestChange(arr1));  // Output: 4\n\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        System.out.println(smallestChange(arr2));  // Output: 1\n\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n        System.out.println(smallestChange(arr3));  // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n    int count1 = 0; // Initialize count for first List\n    for (Object str : lst1) {\n        count1 += ((String) str).length(); // Add the length of each string in First List to count1\n    }\n\n    int count2 = 0; // Initialize count for Second List\n    for (Object str : lst2) {\n        count2 += ((String) str).length(); // Add the length of each string in Second List to count2\n    }\n\n    // Compare counts and return the appropriate list\n    if (count1 <= count2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.util.*;\n\npublic class IsMultiplyPrime {\n    public static Boolean isMultiplyPrime(int A) {\n        if (A < 2) return false;  // Numbers less than 2 cannot be prime\n\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(A); i++) {\n            if (isPrime(i)) primes.add(i);\n            while (A % i == 0) A /= i;\n        }\n\n        if (A > 1 && isPrime(A)) primes.add(A);  // Check if the remaining number is a prime\n\n        return primes.size() == 3;  // If there are exactly 3 distinct prime factors, return true\n    }\n\n    private static Boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30));  // Output: True\n        System.out.println(isMultiplyPrime(8));   // Output: False\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "import java.lang.*;\n\nclass IsSimplePower {\n    public static Boolean isSimplePower(int x, int n) {\n        // Base case: when n = 1, only 1^any_number = 1\n        if (n == 1) {\n            return x == 1;\n        }\n\n        // Check if the power of n can be reduced to 1 by multiplying with itself\n        while (x > 1 && x % n == 0) {\n            x /= n;\n        }\n\n        // If the final result is 1, then x is a simple power of n\n        return x == 1;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1, 4));  // Output: true\n        System.out.println(isSimplePower(2, 2));  // Output: true\n        System.out.println(isSimplePower(8, 2));  // Output: true\n        System.out.println(isSimplePower(3, 2));  // Output: false\n        System.out.println(isSimplePower(3, 1));  // Output: false\n        System.out.println(isSimplePower(5, 3));  // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "import java.lang.Math;\n\npublic class IScube {\n    public static boolean iscube(int A) {\n        double root = Math.pow((double) Math.abs(A), 1.0 / 3.0);\n        return (root == Math.floor(root));\n    }\n\n    // Test the function with provided examples\n    public static void main(String[] args) {\n        System.out.println(iscube(1));   // True\n        System.out.println(iscube(2));   // False\n        System.out.println(iscube(-1));  // True\n        System.out.println(iscube(64));  // True\n        System.out.println(iscube(0));   // True\n        System.out.println(iscube(180)); // False\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\"));  // output should be 1\n        System.out.println(hexKey(\"1077E\"));  // output should be 2\n        System.out.println(hexKey(\"ABED1A33\"));  // output should be 4\n        System.out.println(hexKey(\"123456789ABCDEF0\"));  // output should be 6\n        System.out.println(hexKey(\"2020\"));  // output should be 2\n    }\n\n    public static int hexKey(Object num) {\n        int primeCount = 0;\n        String[] primesHexDigits = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"};\n        Set<Character> set = new HashSet<>();\n\n        if (num instanceof String) {\n            for (char c : ((String) num).toUpperCase().toCharArray()) {\n                set.add(c);\n            }\n\n            for (String primeHexDigit : primesHexDigits) {\n                if (set.contains(primeHexDigit.charAt(0))) {\n                    primeCount++;\n                }\n            }\n        }\n\n        return primeCount;\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n    StringBuilder binaryString = new StringBuilder();\n    while (decimal > 0) {\n        binaryString.append(decimal % 2); // append the least significant bit\n        decimal >>= 1; // right shift by 1 bit\n    }\n    return \"db\" + binaryString.reverse().toString() + \"db\";\n}\n\npublic static void main(String[] args) {\n    System.out.println(decimalToBinary(15)); // prints \"db1111db\"\n    System.out.println(decimalToBinary(32)); // prints \"db100000db\"\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "import java.util.*;\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n     */\n    public static Boolean IsHappy(String s) {\n        // Check if the length of the string is less than 3, return false in that case\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Loop through the string checking every 3 consecutive letters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            Set<Character> set = new HashSet<>();\n\n            // Add each character of the 3-letter substring to a set, which automatically removes duplicates\n            set.add(s.charAt(i));\n            set.add(s.charAt(i+1));\n            set.add(s.charAt(i+2));\n\n            // If there are less than 3 distinct characters in the substring, return false\n            if (set.size() < 3) {\n                return false;\n            }\n        }\n\n        // If all checks passed, the string is happy\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "import java.util.*;\n\npublic class NumericalLetterGrade {\n    /**\n     * Converts a list of GPAs to their corresponding letter grades based on the specified grading scale.\n     *\n     * @param grades A list of GPAs for which to convert the grades.\n     * @return A list of letter grades corresponding to the provided GPAs.\n     */\n    public static List<String> convertGpaToLetterGrades(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else If (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else If (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else If (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else If (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else If (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else If (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else If (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else If (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else If (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Double> sampleGrades = Arrays.asList(4.0, 3.0, 1.7, 2.5, 3.5);\n        List<String> letterGrades = convertGpaToLetterGrades(sampleGrades);\n        System.out.println(letterGrades);  // Output: [A+, B-, C-, B+-]\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "import java.util.stream.IntStream;\n\nclass PrimeLength {\n    public static boolean primeLength(String str) {\n        int length = str.length();\n        return length > 1 && IntStream.rangeClosed(2, (int) Math.sqrt(length)).noneMatch(i -> length % i == 0);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\")); // true\n        System.out.println(primeLength(\"abcdcba\")); // true\n        System.out.println(primeLength(\"kittens\")); // true\n        System.out.println(primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StartsOneEnds {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        } else {\n            return 2 * (int)Math.pow(10, n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 3; // Example input\n        System.out.println(\"Count of numbers: \" + startsOneEnds(n));\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "public static String solve(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10; // Extract the last digit and add to sum\n        n /= 10; // Remove the last digit from n\n    }\n    return Integer.toBinaryString(sum);\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "int sum = 0;\nfor (int i = 1; i < lst.size(); i += 2) {\n    if (lst.get(i) % 2 == 0) {\n        sum += lst.get(i);\n    }\n}\nreturn sum;"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "public static String antiShuffle(String s) {\n    String[] words = s.split(\" \");\n    for (int i = 0; i < words.length; i++) {\n        char[] chars = words[i].toCharArray();\n        Arrays.sort(chars);\n        words[i] = new String(chars);\n    }\n    return String.join(\" \", words);\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<?> row = (List<?>) lst.get(i);\n            for (int j = row.size() - 1; j >= 0; j--) {\n                if ((Integer) row.get(j) == x) {\n                    result.add(new Object[]{i, j});\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object[]>() {\n            @Override\n            public int compare(Object[] o1, Object[] o2) {\n                int rowCompare = ((Integer) o1[0]).compareTo((Integer) o2[0]);\n                if (rowCompare != 0) {\n                    return rowCompare;\n                } else {\n                    return ((Integer) o2[1]).compareTo((Integer) o1[1]);\n                }\n            }\n        });\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = Arrays.asList(Arrays.asList(1, 2, 3, 4, 5, 6), Arrays.asList(1, 2, 3, 4, 1, 6), Arrays.asList(1, 2, 3, 4, 5, 1));\n        int x = 1;\n        System.out.println(getRow(lst, x));  // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n        List<Object> lst2 = new ArrayList<>();\n        int x2 = 1;\n        System.out.println(getRow(lst2, x2));  // []\n\n        List<Object> lst3 = Arrays.asList(new ArrayList<>(), Arrays.asList(1), Arrays.asList(1, 2, 3));\n        int x3 = 3;\n        System.out.println(getRow(lst3, x3));  // [(2, 2)]\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.util.*;\n\nclass SortArray {\n    public static List<Integer> sortArray(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int firstIndexValue = (Integer) array.get(0);\n        int LastIndexValue = (Integer) array.get(array.size() - 1);\n\n        List<Integer> sortedArray;\n        if ((FirstIndexValue + LastIndexValue) % 2 == 0) {\n            sortedArray = new ArrayList<>(array);\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            sortedArray = new ArrayList<>(array);\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList()))); // []\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList(5)))); // [5]\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5)))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6)))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "public class Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     */\n    public static String encrypt(String s) {\n        // Create a StringBuilder object to store the encrypted string\n        StringBuilder encrypted = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Convert the character to lowercase if it's uppercase\n                c = Character.toLowerCase(c);\n\n                // Calculate the ASCII value of the rotated character\n                int asciiValue = c - 97 + (2 * 2);\n\n                // If the ASCII value exceeds 'z', wrap around to the beginning of the alphabet\n                if (AsciiValue > 122) {\n                    AsciiValue -= 26;\n                }\n\n                // Convert the rotated character back to a character and add it to the StringBuilder\n                encrypted.append((char) AsciiValue);\n            } else {\n                // If the character is not a letter, add it unchanged to the StringBuilder\n                encrypted.append(c);\n            }\n        }\n\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n\n        // Sort the list\n        Collections.sort(lst);\n\n        // Return the second element in the sorted list\n        return lst.get(1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // prints 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // prints 2\n        System.out.println(nextSmallest(new ArrayList<Integer>())); // prints null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // prints null\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "int boredomCount = 0;\n    s += \".\"; // Add a dummy sentence to handle last sentence without punctuation\n\n    // Split string into sentences based on delimiters\n    String[] sentences = s.split(\"[.?!]\");\n\n    for (String sentence : sentences) {\n        String trimmedSentence = sentence.trim(); // Remove leading and trailing spaces\n        if (!trimmedSentence.isEmpty() && trimmedSentence.startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n\n    return boredomCount;\n}\n\n// Test the function with provided examples\npublic static void main(String[] args) {\n    System.out.println(IsBored(\"Hello world\")); // Output: 0\n    System.out.println(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n}\n\n```\n\nThis solution defines a method `IsBored` that takes a string as input and returns the count of sentences starting with \"I\". It first ensures that the last sentence is properly closed by adding a dummy sentence. Then, it splits the input string into individual sentences using the sentence delimiters ('.', '?', or '!'). For each sentence, it trims any leading or trailing spaces and checks if it starts with \"I\", incrementing the boredom count accordingly. Finally, the main method provides test cases to verify the correctness of the function."}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "import java.lang.*;\n\nclass AnyInt {\n    /**\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) \u279e True\n     * \n     * Any_int(3, 2, 2) \u279e False\n\n     * Any_int(3, -2, 1) \u279e True\n     * \n     * Any_int(3.6, -2.2, 2) \u279e False\n  \n\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return x.equals(y + z) || y.equals(x + z) || z.equals(x + y);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(anyInt(5, 2, 7)); // true\n        System.out.println(anyInt(3, 2, 2)); // false\n        System.out.println(anyInt(3, -2, 1)); // true\n        System.out.println(anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "public class Encode {\n    private static final Map<Character, Character> vowelMap = new HashMap<>();\n\n    static {\n        vowelMap.put('a', 'C');\n        vowelMap.put('e', 'G');\n        vowelMap.put('i', 'K');\n        vowelMap.put('o', 'Q');\n        vowelMap.put('u', 'W');\n        vowelMap.put('A', 'C');\n        vowelMap.put('E', 'G');\n        vowelMap.put('I', 'K');\n        vowelMap.put('O', 'Q');\n        vowelMap.put('U', 'W');\n    }\n\n    public static String encode(String message) {\n        char[] encodedMessage = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (vowelMap.containsKey(ch)) {\n                    encodedMessage[i] = vowelMap.get(ch);\n                } else {\n                    encodedMessage[i] = ch;\n                }\n                if (Character.isUpperCase(ch)) {\n                    encodedMessage[i] = Character.toLowerCase(encodedMessage[i]);\n                } else if (Character.isLowerCase(ch)) {\n                    encodedMessage[i] = Character.toUpperCase(encodedMessage[i]);\n                }\n            } else {\n                encodedMessage[i] = ch;\n            }\n        }\n        return new String(encodedMessage);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(encode(\"test\"));  // Output: \"TGST\"\n        System.out.println(encode(\"This is a message\"));  // Output: \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "public static int getLargestPrimeSum(List<Integer> lst) {\n        int largestPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        return sumOfDigits(largestPrime);\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static int sumOfDigits(int number) {\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "if (dict instanceof Map<?, ?>) {\n            Map<?, ?> map = (Map<?, ?>) dict;\n\n            if (map.isEmpty()) {\n                return false;\n            }\n\n            boolean allLowerCase = true;\n            boolean AllUpperCase = true;\n\n            for (Object key : map.keySet()) {\n                if (!(key instanceof String)) {\n                    return false;\n                }\n\n                String strKey = (String) key;\n                AllLowerCase &= strKey.equals(strKey.toLowerCase());\n                AllUpperCase &= strKey.equals(strKey.toUpperCase());\n            }\n\n            return AllLowerCase || AllUpperCase;\n        } else {\n            throw new IllegalArgumentException(\"Input must be a Dictionary (Map)\");\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkDictCase(new HashMap<>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))));  // true\n        System.out.println(checkDictCase(new HashMap<>(Map.of(\"A\", \"apple\", \"a\", \"banana\", \"B\", \"banana\"))));  // false\n        System.out.println(checkDictCase(new HashMap<>(Map.of(\"A\", \"apple\", 8, \"banana\", \"A\", \"apple\"))));  // false\n        System.out.println(checkDictCase(new HashMap<>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))));  // false\n        System.out.println(checkDictCase(new HashMap<>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))));  // true\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.*;\n\npublic class CountUpTo {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n\n        if (n <= 2) return primes; // No prime numbers less than 2\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n\n        for (int p = 2; p * p < n; ++p) {\n            if (isPrime[p]) {\n                for (int i = p * p; i < n; i += p) {\n                    isPrime[i] = false;\n                }\n            }\n        }\n\n        for (int p = 2; p < n; ++p) {\n            if (isPrime[p]) primes.add(p);\n        }\n\n        return primes;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countUpTo(5)); // [2, 3]\n        System.out.println(countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(countUpTo(0)); // []\n        System.out.println(countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(countUpTo(1)); // []\n        System.out.println(countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "class Multiply {\n    public static int multiply(int A, int b) {\n        // Get unit digit of each number using modulo operator\n        int unitDigitA = Math.abs(A % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(multiply(148, 412)); // Output: 16\n        System.out.println(multiply(19, 28)); // Output: 72\n        System.out.println(multiply(2020, 1851)); // Output: 0\n        System.out.println(multiply(14, -15)); // Output: 20\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "import java.util.*;\n\nclass CountUpper {\n    public static void main(String[] args) {\n        System.out.println(countUpper(\"aBCdEf\"));  // Output: 1\n        System.out.println(countUpper(\"abcdefg\"));  // Output: 0\n        System.out.println(countUpper(\"dBBE\"));  // Output: 0\n    }\n\n    public static int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {   // iterate over even indices\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {    // check if the character is an uppercase vowel\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "import java.lang.*;\n\nclass ClosestInteger {\n    public static int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double floor = Math.floor(num);\n        double ceil = Math.ceil(num);\n\n        // Check if the number is equidistant from two integers\n        if (num - floor == 0.5 || ceil - num == 0.5) {\n            return num > 0 ? (int) ceil : (int) floor;\n        } else {\n            // If not, round to the nearest integer away from zero\n            return (int) Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closest_integer(\"10\")); // Output: 10\n        System.out.println(closest_integer(\"15.3\")); // Output: 15\n        System.out.println(closest_integer(\"14.5\")); // Output: 15\n        System.out.println(closest_integer(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "import java.util.*;\n\nclass MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            // Determine the next number of stones based on the current level's parity\n            if (currentStones % 2 == 0) { // If even, add the next even number\n                currentStones += 2;\n            } else { // If odd, add the next odd number\n                currentStones += 2;\n            }\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.util.*;\n\nclass WordsString {\n    public static List<Object> wordsString(String s) {\n        ArrayList<Object> result = new ArrayList<>();\n        if (s != null && !s.isEmpty()) {\n            // Split the string by commas and spaces, then add each word to the result list\n            String[] words = s.split(\"\\\\s*,\\\\s*|\\\\s+\");\n            for (String word : words) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, My name is John\"));  // Output: [Hi, my, name, is, John]\n        System.out.println(wordsString(\"One, two, three, four, five, six\"));  // Output: [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n        // check if x is greater than y\n        if (x > y) {\n            return -1; // no such number exists\n        }\n\n        // start from the given number y and go down to x\n        for (int i = y; i >= x; i--) {\n            // if an even number is found, return it immediately\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n\n        // If no even number was found in the range [x, y], return -1\n        return -1;\n    }"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "if (n > m) {\n            return -1;\n        }\n\n        double sum = 0.0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        double average = Math.round(sum / (m - n + 1));\n        return \"0b\" + Long.toBinaryString((long)average);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // Expected output: \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // Expected output: -1\n        System.out.println(roundedAvg(10, 20)); // Expected output: \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // Expected output: \"0b11010\"\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass UniqueDigits {\n    public static List<Object> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (!containsEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return new ArrayList<>(result);\n    }\n\n    private static boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(uniqueDigits(Arrays.asList(15, 33, 1422, 1))); // Output: [1, 15, 33]\n        System.out.println(uniqueDigits(Arrays.asList(152, 323, 1422, 10))); // Output: []\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.util.*;\n\npublic class ByLength {\n    public static List<String> byLength(List<Object> arr) {\n        // Filter out only numbers between 1 and 9 (inclusive)\n        List<Integer> filtered = new ArrayList<>();\n        for (Object obj : arr) {\n            if (obj instanceof Integer && (int) obj >= 1 && (int) obj <= 9) {\n                filtered.add((int) obj);\n            }\n        }\n\n        // Sort the list in ascending order\n        Collections.sort(filtered);\n\n        // Reverse the sorted list\n        Collections.reverse(filtered);\n\n        // Convert numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (int num : filtered) {\n            result.add(numToWord(num));\n        }\n\n        return result;\n    }\n\n    private static String numToWord(int num) {\n        switch (num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            default: return \"Nine\"; // Should never happen\n        }\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.util.*;\n\nclass F {\n  /**\n   * Implement the function f that takes n as a parameter,\n   * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n   * or the sum of numbers from 1 to i otherwise.\n   * i starts from 1.\n   * The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n   */\n  public static List<Integer> f(int n) {\n    List<Integer> result = new ArrayList<>();\n    for (int i = 1; i <= n; i++) {\n      if (i % 2 == 0) { // if i is even\n        result.add(factorial(i));\n      } else { // If i is odd\n        result.add(sum(i));\n      }\n    }\n    return result;\n  }\n\n  /** Calculate the factorial of a number */\n  private static int factorial(int n) {\n    int fact = 1;\n    for (int i = 1; i <= n; i++) {\n      fact *= i;\n    }\n    return fact;\n  }\n\n  /** Calculate the sum of numbers from 1 to a given number */\n  private static int sum(int n) {\n    int total = 0;\n    for (int i = 1; i <= n; i++) {\n      total += i;\n    }\n    return total;\n  }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        int countEven = 0, countOdd = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    countEven++;\n                } else {\n                    countOdd++;\n                }\n            }\n        }\n\n        result.add(countEven);\n        result.add(countOdd);\n\n        return result;\n    }\n\n    private static boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reverseStr);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3)); // Output: [1, 2]\n        System.out.println(evenOddPalindrome(12)); // Output: [4, 6]\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "import java.util.*;\n\nclass CountNums {\n    public static int countNums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        String strNum = Integer.toString(Math.abs(num));\n        for (int i = 0; i < strNum.length(); i++) {\n            if (i == 0 && IsNegative) {\n                sum -= Character.getNumericValue(strNum.charAt(i)); // Subtract the first digit if negative\n            } else {\n                sum += Character.getNumericValue(strNum.charAt(i));\n            }\n        }\n        return sum;\n    }\n\n    // Method to test the functionality with provided examples\n    public static void main(String[] args) {\n        List<Integer> test1 = new ArrayList<>();\n        List<Integer> test2 = Arrays.asList(-1, 11, -11);\n        List<Integer> test3 = Arrays.asList(1, 1, 2);\n\n        System.out.println(countNums(test1)); // Output: 0\n        System.out.println(countNums(test2)); // Output: 1\n        System.out.println(countNums(test3)); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.util.*;\npublic class MoveOneBall {\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() <= 1) return true;\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (Object num : arr) {\n            pq.add((int)num);\n        }\n\n        while (!pq.isEmpty()) {\n            int min = pq.poll();\n            if (pq.peek() == null || (int)arr.get(0) <= min) {\n                return true;\n            } else {\n                pq.add((int)arr.remove(arr.size() - 1));\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int numEven1 = 0; // count of even numbers in lst1\n    int numOdd1 = 0; // count of odd numbers in lst1\n\n    for (int num : lst1) {\n        if (num % 2 == 0) {\n            numEven1++;\n        } else {\n            numOdd1++;\n        }\n    }\n\n    int numEven2 = 0; // count of even numbers in lst2\n    int numOdd2 = 0; // count of odd numbers in lst2\n\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            numEven2++;\n        } else {\n            numOdd2++;\n        }\n    }\n\n    // if there are enough even numbers in both lists to make all the elements of lst1 even, return \"YES\"\n    if (numEven1 + numEven2 >= numOdd1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\n\nclass Histogram {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        if (test == null || test.isEmpty()) {\n            return result;\n        }\n        \n        String[] letters = test.split(\" \");\n        for (String letter : letters) {\n            result.put(letter, result.getOrDefault(letter, 0) + 1);\n        }\n\n        // Find the max count\n        int maxCount = Collections.max(result.values());\n\n        // Filter out only the entries with max count\n        Map<String, Integer> maxHistogram = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                maxHistogram.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return maxHistogram;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(histogram(\"a b c\")); // {'A': 1, 'b': 1, 'c': 1}\n        System.out.println(histogram(\"A b b A\")); // {'A': 2, 'b': 2}\n        System.out.println(histogram(\"A b c A b\")); // {'A': 2, 'b': 2}\n        System.out.println(histogram(\"B B B B A\")); // {'B': 4}\n        System.out.println(histogram(\"\")); // {}\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "* Inputs: two strings s and c (1 <= |s|, |c| <= 10^5) consisting of lowercase English letters.\n     * Outputs: a list containing the result string and a boolean value indicating whether or not the result string is a palindrome.\n     * Constraints: The time complexity for the solution must be less than O(n^2).\n     */\n        List<Object> output = new ArrayList<>();\n        String result = \"\";\n\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(\"\" + ch)) {\n                result += ch;\n            }\n        }\n\n        boolean isPalindrome = true;\n        int left = 0, right = result.length() - 1;\n\n        while (left < right) {\n            if (result.charAt(left) != result.charAt(right)) {\n                isPalindrome = false;\n                break;\n            }\n            left++;\n            right--;\n        }\n\n        output.add(result);\n        output.add(isPalindrome);\n        return output;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // ['bcd', false]\n        System.out.println(reverseDelete(\"abcdef\", \"b\"));  // ['acdef', false]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // ['cdedc', true]\n    }\n}\n```"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass OddCount {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int countOdds = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    countOdds++;\n                }\n            }\n            result.add(\"the number of odd elements \" + countOdds + \"n the str\" + countOdds + \"ng \" + countOdds + \" of the \" + countOdds + \"nput.\");\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(oddCount(Arrays.asList(\"1234567\")));\n        System.out.println(oddCount(Arrays.asList(\"3\", \"11111111\")));\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "long minSum = Long.MAX_VALUE; // Initialize with the maximum possible long value\n\n        // Convert List<Object> to int[] array for easier manipulation\n        int[] intArray = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            intArray[i] = ((Integer) nums.get(i)).intValue();\n        }\n\n        // Kadane's algorithm to find minimum subarray sum\n        long currentSum = 0;\n        for (int num : intArray) {\n            currentSum += num;\n            if (minSum > currentSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0; // Reset sum if it becomes positive\n            }\n        }\n\n        return minSum;\n    }\n\n    // Test the function with provided examples\n    public static void main(String[] args) {\n        List<Object> example1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        System.out.println(\"Example 1: \" + minsubarraysum(example1)); // Output: 1\n\n        List<Object> example2 = Arrays.asList(-1, -2, -3);\n        System.out.println(\"Example 2: \" + minsubarraysum(example2)); // Output: -6\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "This is a Java program that implements the MaxFill class with a static method `maxFill`, which calculates the number of times buckets need to be lowered to empty all wells in a given grid. The method takes two parameters:\n\n- `grid` (List<List<Integer>>): A 2D list representing the rectangular grid of wells, where each element is either 0 or 1, indicating whether a well contains water or not.\n- `capacity` (int): The capacity of each bucket used to extract water from the wells.\n\nThe method iterates through each row of the grid and calculates the total number of water units in each row, which are then divided by the bucket capacity to find out how many times a lower action is required for that row. The maximum value among all rows is returned as the final result."}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.util.*;\n\nclass SortArray {\n    public static List<Object> sortArray(List<Object> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int countOnes1 = Integer.bitCount(o1);\n                int countOnes2 = Integer.bitCount(o2);\n\n                if (countOnes1 != countOnes2) {\n                    return countOnes1 - countOnes2;\n                } else {\n                    return o1 - o2;\n                }\n            }\n        });\n        \n        return arr;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(sortArray(arr));  // Output: [1, 2, 3, 4, 5]\n\n        arr = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(sortArray(arr));  // Output: [-6, -5, -4, -3, -2]\n\n        arr = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(sortArray(arr));  // Output: [0, 1, 2, 3, 4]\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n    public static List<Object> selectWords(String s, int n) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            long consonantCount = word.chars()\n                .filter(c -> \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) >= 0)\n                .count();\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "public static String getClosestVowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U'));\n        char[] chars = word.toCharArray();\n        int n = chars.length;\n\n        for (int i = n - 2; i > 0; i--) {\n            if (!vowels.contains(chars[i + 1]) && vowels.contains(chars[i])) {\n                return String.valueOf(chars[i]);\n            }\n        }\n\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getClosestVowel(\"yogurt\")); // ==> \"u\"\n        System.out.println(getClosestVowel(\"FULL\"));   // ==> \"U\"\n        System.out.println(getClosestVowel(\"quick\"));  // ==> \"\"\n        System.out.println(getClosestVowel(\"ab\"));     // ==> \"\"\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.util.*;\n\nclass MatchParens {\n    // This method checks if two strings of parentheses can be concatenated in any order to form a balanced string\n    public static String matchParens(List<String> lst) {\n        String first = lst.get(0);\n        String Second = lst.get(1);\n\n        // check if concatenating the strings in different orders results in a balanced string\n        if (isBalanced(First + Second)) {\n            return \"Yes\";\n        } else if (isBalanced(Second + First)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // helper method to check if a string has balanced parentheses\n    private static boolean isBalanced(String str) {\n        int balance = 0;\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n                if (balance < 0) {\n                    return false; // found a closing parenthesis without a matching opening one\n                }\n            }\n        }\n        return balance == 0; // all parentheses are matched if balance is zero\n    }\n\n    public static void main(String[] args) {\n        System.out.println(matchParens(Arrays.asList(\"()(\", \")\"))); // Output: Yes\n        System.out.println(matchParens(Arrays.asList(\")\", \")\"))); // Output: No\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.util.*;\n\nclass Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        for (int num : arr) {\n            pq.add(num);\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        List<Integer> result = new ArrayList<>(pq);\n        Collections.sort(result, Collections.reverseOrder());\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(maximum(Arrays.asList(-3, -4, 5), 3));  // [-4, -3, 5]\n        System.out.println(maximum(Arrays.asList(4, -4, 4), 2));   // [4, 4]\n        System.out.println(maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1)); // [2]\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "public static int solution(List<Integer> lst) {\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) { // start from index 1 and increment by 2 to get even positions\n        if (lst.get(i) % 2 != 0) { // check if the element at even position is odd\n            sum += lst.get(i); // add it to the sum\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> arr = new ArrayList<>();\n        arr.add(111);\n        arr.add(21);\n        arr.add(3);\n        arr.add(4000);\n        arr.add(5);\n        arr.add(6);\n        arr.add(7);\n        arr.add(8);\n        arr.add(9);\n\n        int k = 4;\n        System.out.println(\"The sum is: \" + AddElements.addElements(arr, k));  // Outputs: The sum is: 24\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "ArrayList<Integer> result = new ArrayList<>();\n        result.add(n); // Add the initial number to the list\n\n        while (n != 1) {\n            if (n % 2 == 0) { // If the number is even, divide it by 2\n                n /= 2;\n            } else { // If the number is odd, multiply it by 3 and add 1\n                n = 3 * n + 1;\n                if (n % 2 != 0) { // Check if the new number is odd before adding it to the list\n                    result.add(n);\n                }\n            }\n        }\n\n        Collections.sort(result); // Sort the list in increasing order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "import java.time.LocalDate;\n\npublic class ValidDate {\n    public static Boolean validDate(String date) {\n        try {\n            LocalDate.parse(date);\n        } catch (Exception e) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        } else if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31) {\n            return false;\n        } else if (month == 2 && day > 29) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(validDate(\"03-11-2000\"));  // true\n        System.out.println(validDate(\"15-01-2012\"));  // false\n        System.out.println(validDate(\"04-0-2040\"));   // false\n        System.out.println(validDate(\"06-04-2020\"));  // true\n        System.out.println(validDate(\"06/04/2020\"));  // false\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.*;\n\nclass SplitWords {\n    /**\n     * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' If no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n     * splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world\"]\n     * splitWords(\"abcdef\") == 3\n     */\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if ((c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(splitWords(\"Hello world!\")); // Output: [Hello, world!]\n        System.out.println(splitWords(\"Hello,world!\")); // Output: [Hello, world]\n        System.out.println(splitWords(\"abcdef\"));      // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.util.List;\n\npublic class IsSorted {\n    /**\n     * Checks if a list of numbers is sorted in ascending order without any duplicates.\n     * \n     * @param lst The list to check.\n     * @return True if the list is sorted and has no duplicates, False otherwise.\n     */\n    public static Boolean isSorted(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        Integer last = (Integer) lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            Integer current = (Integer) lst.get(i);\n            if (current <= last) {\n                return false;\n            }\n            last = current;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSorted(Arrays.asList()));  // True\n        System.out.println(isSorted(Arrays.asList(1, 2, 3, 4, 5)));  // True\n        System.out.println(isSorted(Arrays.asList(1, 3, 2, 4, 5)));  // False\n        System.out.println(isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)));  // True\n        System.out.println(isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)));  // True\n        System.out.println(isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)));  // False\n        System.out.println(isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)));  // True\n        System.out.println(isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)));  // False\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) return \"NO\";  // No intersection\n\n        int lengthIntersection = endMin - startMax + 1;\n        return IsPrime(lengthIntersection) ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "import java.util.*;\n\nclass ProdSigns {\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n\n        int productOfSigns = 1;\n        int sumOfMagnitudes = 0;\n\n        for (Object obj : arr) {\n            if (obj instanceof Integer) {\n                Integer num = (Integer) obj;\n                sumOfMagnitudes += Math.abs(num);\n\n                if (num > 0) {\n                    productOfSigns *= 1;\n                } else if (num < 0) {\n                    productOfSigns *= -1;\n                } else {\n                    return 0; // If any number is 0, return 0 immediately\n                }\n            }\n        }\n\n        return sumOfMagnitudes * productOfSigns;\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass MinPath {\n    static final int[][] DIR = new int[][]{{0, -1}, {-1, 0}, {0, 1}, {1, 0}}; // left, up, right, down\n\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        boolean[][] visited = new boolean[n][n];\n        PriorityQueue<Cell> pq = new PriorityQueue<>();\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                pq.offer(new Cell(grid.get(i).get(j), i, j));\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n\n        while (!pq.isEmpty() && k-- > 0) {\n            Cell cell = pq.poll();\n            result.add(cell.val);\n            visited[cell.x][cell.y] = true;\n\n            for (int[] d : DIR) {\n                int x = cell.x + d[0], y = cell.y + d[1];\n                if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {\n                    pq.offer(new Cell(grid.get(x).get(y), x, y));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static class Cell implements Comparable<Cell>{\n        int val;\n        int x, y;\n\n        Cell(int val, int x, int y) {\n            this.val = val;\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public int compareTo(Cell other) {\n            return Integer.compare(this.val, other.val);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Tri {\n    public static ArrayList<Double> tri(int n) {\n        ArrayList<Double> result = new ArrayList<>();\n        double[] initialValues = {3, 1, 2};\n        result.addAll(Arrays.asList(initialValues));\n\n        if (n < 3) {\n            return result;\n        }\n\n        for (int i = 3; i <= n; i++) {\n            double nextValue;\n            if (i % 2 == 0) {\n                nextValue = (double) i / 2;\n            } else {\n                double a = result.get(i - 1);\n                double B = result.get(i - 2);\n                double C = result.get(i + 1);\n                nextValue = A + B + C;\n            }\n            result.add(nextValue);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(tri(3));  // Output: [1.0, 3.0, 2.0, 8.0]\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "int product = 1;\n        boolean hasOdd = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n\n        return hasOdd ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digits(1));  // Output: 1\n        System.out.println(digits(4));  // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "import java.util.*;\n\nclass IsNested {\n    public static boolean isNested(String input) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNestedBracket = false;\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']' && !stack.isEmpty()) {\n                stack.pop();\n                // If after popping a bracket, the stack is not empty, then we have a nested bracket\n                if (!stack.isEmpty()) {\n                    hasNestedBracket = true;\n                }\n            } else {\n                throw new IllegalArgumentException(\"Input contains invalid characters\");\n            }\n        }\n\n        return hasNestedBracket && stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(isNested(\"[][]\")); // false\n        System.out.println(isNested(\"[]\")); // false\n        System.out.println(isNested(\"[[][]]\")); // true\n        System.out.println(isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int result = 0;\n        for (Number num : lst) {\n            double ceilValue = Math.ceil(num.doubleValue()); // Round to the upper integer\n            result += (int) Math.pow(ceilValue, 2); // Square and add to result\n        }\n        return result;\n    }\n\n    // Example usage:\n    public static void main(String[] args) {\n        List<Number> example1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(example1)); // Output should be 14\n\n        List<Number> example2 = Arrays.asList(1, 4, 9);\n        System.out.println(sumSquares(example2)); // Output should be 98\n\n        // Add more examples as needed...\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        // Trim any trailing spaces from the text\n        txt = txt.trim();\n\n        // Get the last character of the trimmed text\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is an alphabetical character and not part of a word\n        return Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ');\n    }\n\n    public static void main(String[] args) {\n        // Test cases to verify the correctness of the function\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    public static int canArrange(List<Integer> arr) {\n        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i).compareTo(arr.get(i-1)) < 0) {\n                largestIndex = i;\n            }\n        }\n        return largestIndex;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(canArrange(Arrays.asList(1,2,4,3,5))); // Output: 3\n        System.out.println(canArrange(Arrays.asList(1,2,3))); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.OptionalInt;\n\npublic class LargestSmallestIntegers {\n    public static List<Object> largestSmallestIntegers(List<Object> lst) {\n        OptionalInt maxNegative = lst.stream()\n                .filter(o -> o instanceof Integer && (Integer) o < 0)\n                .mapToInt(i -> (Integer) i)\n                .max();\n\n        OptionalInt minPositive = lst.stream()\n                .filter(o -> o instanceof Integer && (Integer) o > 0)\n                .mapToInt(i -> (Integer) i)\n                .min();\n\n        return Arrays.asList(maxNegative.orElse(null), minPositive.orElse(null));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // Output: [null, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // Output: [null, null]\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "public static Object compareOne(Object a, Object b) {\n    double numA, numB;\n    String strA = a.toString().replace(\",\", \".\");\n    String strB = B.toString().replace(\",\", \".\");\n    \n    try {\n        numA = Double.parseDouble(strA);\n        numB = Double.parseDouble(strB);\n\n        if (numA == numB) {\n            return null;\n        } else if (numA > numB) {\n            return a;\n        } else {\n            return b;\n        }\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid input: \" + a + \" and/or \" + B);\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "if (n < 8 || n % 2 != 0) {\n            return false; // If n is less than 8 or odd, it cannot be written as the sum of exactly 4 positive even numbers\n        }\n\n        for (int i = 0; i <= n / 8; i++) {\n            for (int j = 0; j <= n / 6; j++) {\n                for (int k = 0; k <= n / 4; k++) {\n                    for (int l = 0; l <= n / 2; l++) {\n                        if (i * 8 + j * 6 + k * 4 + l * 2 == n) {\n                            return true; // If the sum of i*8, j*6, k*4, and l*2 equals n, then return true\n                        }\n                    }\n                }\n            }\n        }\n\n        return false; // If no combination of i, j, k, and l satisfies the condition, return false\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "import java.util.*;\n\nclass SpecialFactorial {\n    public static BigInteger specialFactorial(int n) {\n        BigInteger result = BigInteger.ONE;\n\n        for (int i = 1; i <= n; i++) {\n            result = result.multiply(factorial(i));\n        }\n\n        return result;\n    }\n\n    private static BigInteger factorial(int num) {\n        BigInteger fact = BigInteger.ONE;\n\n        for (int i = 1; i <= num; i++) {\n            fact = fact.multiply(BigInteger.valueOf(i));\n        }\n\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); // Outputs: 288\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "import java.util.*;\n\nclass FixSpaces {\n    /**\n     * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     *\n     * fixSpaces(\"Example\") == \"Example\"\n     * fixSpaces(\"Example 1\") == \"Example_1\"\n     * fixSpaces(\" Example 2\") == \"_Example_2\"\n     * fixSpaces(\" Example3\") == \"_Example-3\"\n     */\n    public static String fixSpaces(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        boolean consecutiveSpacesFound = false;\n        int consecutiveSpaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                consecutiveSpaceCount++;\n                consecutiveSpacesFound = true;\n            } else {\n                if (consecutiveSpacesFound) {\n                    if (consecutiveSpaceCount > 2) {\n                        sb.append('-');\n                    } else {\n                        for (int i = 0; i < consecutiveSpaceCount; i++) {\n                            sb.append('_');\n                        }\n                    }\n                    consecutiveSpacesFound = false;\n                }\n                sb.append(c);\n                consecutiveSpaceCount = 0;\n            }\n        }\n\n        if (consecutiveSpacesFound) {\n            if (consecutiveSpaceCount > 2) {\n                sb.append('-');\n            } else {\n                for (int i = 0; i < consecutiveSpaceCount; i++) {\n                    sb.append('_');\n                }\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fixSpaces(\"Example\")); // Outputs: Example\n        System.out.println(fixSpaces(\"Example 1\")); // Outputs: Example_1\n        System.out.println(fixSpaces(\" Example 2\")); // Outputs: _Example_2\n        System.out.println(fixSpaces(\" Example3\")); // Outputs: _Example-3\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.util.*;\nimport java.util.regex.*;\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     */\n    public static String fileNameCheck(String fileName) {\n        // Check for more than three digits\n        if (fileName.replaceAll(\"\\\\D\", \"\").length() > 3) {\n            return \"No\";\n        }\n\n        // Check for exactly one dot\n        if (fileName.indexOf('.') != fileName.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the name into two parts: before and after the dot\n        String[] parts = fileName.split(\"\\\\.\");\n\n        // Check that the substring before the dot is not empty, starts with a letter from latin alphapet, and has at most three digits\n        if (parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0)) \n                || parts[0].replaceAll(\"\\\\D\", \"\").length() > 3) {\n            return \"No\";\n        }\n\n        // Check that the substring after the dot is one of ['txt', 'exe', 'dll']\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(parts[1])) {\n            return \"No\";\n        }\n\n        // If all checks pass, the file name is valid\n        return \"Yes\";\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "import java.util.*;\n\nclass SumSquares {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) { // if index is multiple of 3, square the number\n                result += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) { // If index is multiple of 4 but not 3, cube the number\n                result += Math.pow(lst.get(i), 3);\n            } else { // If index is neither multiple of 3 nor multiple of 4, do nothing with it\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(lst1)); // Output: 6\n\n        List<Integer> lst2 = new ArrayList<>();\n        System.out.println(sumSquares(lst2)); // Output: 0\n\n        List<Integer> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n        System.out.println(sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "public static String wordsInSentence(String sentence) {\n    // Split the sentence into words\n    String[] words = sentence.split(\" \");\n    StringBuilder result = new StringBuilder();\n    \n    for (String word : words) {\n        if (isPrime(word.length())) {\n            result.append(word).append(\" \");\n        }\n    }\n    \n    // Remove the trailing space and return the result\n    return result.toString().trim();\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n        // split string \"x\" into numerator and denominator\n        String[] xSplit = x.split(\"/\");\n        int xNumerator = Integer.parseInt(xSplit[0]);\n        int xDenominator = Integer.parseInt(xSplit[1]);\n\n        // split string \"n\" INTO numerator and denominator\n        String[] nSplit = n.split(\"/\");\n        int nNumerator = Integer.parseInt(nSplit[0]);\n        int nDenominator = Integer.parseInt(nSplit[1]);\n\n        // check if product of x * n results in an integer\n        if ((xNumerator * nNumerator) % (xDenominator * nDenominator) == 0) {\n            return true; // result is integer\n        } else {\n            return false; // result is not integer\n        }\n    }\n\n    // test function\n    public static void main(String[] args) {\n        System.out.println(simplify(\"1/5\", \"5/1\")); // prints: true\n        System.out.println(simplify(\"1/6\", \"2/1\")); // prints: false\n        System.out.println(simplify(\"7/10\", \"10/2\")); // prints: false\n    }"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass OrderByPoints {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        // Sorting based on sum of digits, and then by original index if sums are equal\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int sum1 = getDigitSum(o1);\n                int sum2 = getDigitSum(o2);\n\n                if (sum1 != sum2) {\n                    return Integer.compare(sum1, sum2);\n                } else {\n                    return Integer.compare(nums.indexOf(o1), nums.indexOf(o2));\n                }\n            }\n        });\n\n        return new ArrayList<>(nums);\n    }\n\n    private static int getDigitSum(int n) {\n        n = Math.abs(n); // Taking absolute value to handle negative numbers\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(orderByPoints(Arrays.asList(-1, -11, 1, -12, 11))); // [-1, -11, 1, -12, 11]\n        System.out.println(orderByPoints(new ArrayList<>())); // []\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "public static int specialFilter(List<Object> nums) {\n    int count = 0;\n    for (Object obj : nums) {\n        if (obj instanceof Number && ((Number) obj).longValue() > 10) {\n            String numStr = Long.toString(((Number) obj).longValue());\n            int firstDigit = Character.getNumericValue(numStr.charAt(0));\n            int LastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n            if (FirstDigit % 2 != 0 && LastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "import java.util.*;\n\nclass GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            A[i - 1] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\nint index1 = planets.indexOf(planet1);\nint index2 = planets.indexOf(planet2);\n\nif (index1 == -1 || index2 == -1) {\n    return new ArrayList<>(); // Return an empty list if either planet name is not valid\n}\n\nList<String> result = new ArrayList<>();\nif (index1 < index2) {\n    for (int i = index1 + 1; i < index2; i++) {\n        result.add(planets.get(i));\n    }\n} else { // If planet1 comes after planet2 in the list, reverse the order of planets\n    for (int i = index1 - 1; i > index2; i--) {\n        result.add(planets.get(i));\n    }\n}\n\nreturn result;"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.util.*;\n\npublic class SortedListSum {\n    public static List<String> sortedListSum(List<String> lst) {\n        // Remove strings with odd lengths\n        lst.removeIf(str -> str.length() % 2 != 0);\n\n        // Sort the list by length, and then alphabetically for words of the same length\n        Collections.sort(lst, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return Integer.compare(s1.length(), s2.length());\n                }\n            }\n        });\n\n        return lst;\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "public class XOrY {\n    // Method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Main method to return x if n is prime, otherwise return y\n    public static int xOrY(int n, int x, int y) {\n        return isPrime(n) ? x : y;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12)); // Should print 34\n        System.out.println(xOrY(15, 8, 5));  // Should print 5\n    }\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "if (lst.isEmpty()) {\n        return 0;\n    }\n\n    int sum = 0;\n    for (Object obj : lst) {\n        if (obj instanceof Integer && ((Integer) obj).intValue() > 0 && ((Integer) obj).intValue() % 2 != 0) {\n            sum += Math.pow(((Integer) obj).intValue(), 2);\n        }\n    }\n\n    return sum;\n}\n\npublic static void main(String[] args) {\n    System.out.println(doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n    System.out.println(doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n    System.out.println(doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n    System.out.println(doubleTheDifference(Arrays.asList(0))); // Output: 0\n}\n\n```\nIn this solution, we first check if the list is empty and return 0 if it is. Then, we iterate over each element in the list. If the element is an instance of Integer, greater than 0, and odd (i.e., `((Integer) obj).intValue() % 2 != 0`), then we add its square to the sum. Finally, we return the sum after calculating all necessary squares."}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.util.*;\n\nclass Compare {\n   public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i=0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i)-guess.get(i)));\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "public class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        int strongestIndex = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n            int capCount = 0;\n            int smCount = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestIndex = i;\n            }\n        }\n        return className + \".\" + extensions.get(strongestIndex);\n    }\n\n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions));  // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "import java.util.*;\n\nclass CycpatternCheck {\n    /**\n     * You are given two words. You need to return True if the second word or any of its rotations is a substring in the first word.\n     * cycpattern_check(\"abcd\",\"abd\") => false\n     * cycpattern_check(\"hello\",\"ell\") => true\n     * cycpattern_check(\"whassup\",\"psus\") => false\n     * cycpattern_check(\"abab\",\"baa\") => true\n     * cycpattern_check(\"efef\",\"eeff\") => false\n     * cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public static boolean cycpatternCheck(String A, String B) {\n        if (B.length() > A.length()) {\n            return false;\n        }\n\n        // Concatenate the first word with itself to handle rotation\n        String doubleA = A + A;\n        for (int i = 0; i < B.length(); i++) {\n            String rotatedB = rotateString(B, i);\n            if (doubleA.contains(rotatedB)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static String rotateString(String str, int rotation) {\n        int len = str.length();\n        rotation = rotation % len; // Handle rotations greater than string length\n        return str.substring(rotation) + str.substring(0, rotation);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddCount {\n    public static List<Integer> evenOddCount(int num) {\n        int evenCount = 0, oddCount = 0;\n        num = Math.abs(num); // to handle negative numbers\n\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12)); // Output: [1, 1]\n        System.out.println(evenOddCount(123)); // Output: [1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "def intToMiniRoman(num):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num.lower()\n\n# test the function\nprint(intToMiniRoman(19))  # output: xix\nprint(intToMiniRoman(152))  # output: clii\nprint(intToMiniRoman(426))  # output: cdxxvi"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "import java.lang.Math;\n\nclass RightAngleTriangle {\n    public static Boolean rightAngleTriangle(int A, int B, int C) {\n        // Sorting the sides so that largest is last\n        int[] sides = {A, B, C};\n        Arrays.sort(sides);\n\n        // Checking Pythagoras Theorem\n        if (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // Output: true\n        System.out.println(rightAngleTriangle(1, 2, 3)); // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.*;\n\nclass FindMax {\n    public static String findMax(List<String> words) {\n        Map<Character, Integer> maxUniqueChars = new HashMap<>();\n        String maxWord = \"\";\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueChars.size() || \n                    (uniqueChars.size() == maxUniqueChars.size() && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = new HashMap<>();\n                for (char c : uniqueChars) {\n                    maxUniqueChars.put(c, maxUniqueChars.getOrDefault(c, 0) + 1);\n                }\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.util.*;\n\nclass Eat {\n    public static List<Integer> eat(int number, int need, int remaining) {\n        if (need > remaining) {\n            return Arrays.asList(number + remaining, 0);\n        } else {\n            return Arrays.asList(number + need, remaining - need);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "public static int doAlgebra(List<String> operator, List<Integer> operand) {\n    // Start with the first operand as the result\n    int result = operand.get(0);\n\n    for (int i = 0; i < operator.size(); i++) {\n        // Get the current operation and operands\n        String op = operator.get(i);\n        int num1 = operand.get(i + 1);\n        int num2 = operand.get(i + 2);\n\n        // Apply the operation to the result and the next operand\n        switch (op) {\n            case \"+\":\n                result += num1;\n                break;\n            case \"-\":\n                result -= num1;\n                break;\n            case \"*\":\n                result *= num1;\n                break;\n            case \"//\":\n                result /= num1;\n                break;\n            case \"**\":\n                result = (int) Math.pow(result, num1);\n                break;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "boolean hasLetters = false;\n        char[] chars = s.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                break;\n            }\n        }\n\n        StringBuilder result = new StringBuilder();\n        if (!hasLetters) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            for (char c : chars) {\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solve(\"ab\"));   // Output: \"AB\"\n        System.out.println(solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n        try {\n            // Get an instance of the MessageDigest for MD5 algorithm\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            \n            // Convert the input string to a byte array and compute its hash\n            byte[] messageDigest = md.digest(text.getBytes());\n\n            // Convert the byte array into a hexadecimal string\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n\n            // Prepend zeros to the hash if it's shorter than 32 characters (128 bits)\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n\n            return hashtext;\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Output: 3e25960a79dbc69b674cd4ec67a72c62\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "static List<Integer> generateIntegers(int A, int B) {\n        List<Integer> result = new ArrayList<>();\n        // Ensure A is less than B for the loop\n        if (A > B) {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n\n        for (int i = A; i <= B; i++) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }"}

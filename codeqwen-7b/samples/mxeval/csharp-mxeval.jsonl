{"task_id": "HumanEval_csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool HasCloseElements(List<double> numbers, double threshold) \n        {\n            return numbers.Any((value, index) => \n                numbers.Skip(index + 1).Any(nextValue => Math.Abs(value - nextValue) < threshold));\n        }\n\n        public static void Main() \n        {\n            Console.WriteLine(HasCloseElements(new List<double> {1.0, 2.0, 3.0}, 0.5)); // Output: False\n            Console.WriteLine(HasCloseElements(new List<double> {1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)); // Output: True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/1", "language": "csharp", "completion": "public static List<string> SeparateParenGroups(string paren_string)\n{\n    List<string> result = new List<string>();\n    int balance = 0;\n    StringBuilder currentGroup = new StringBuilder();\n\n    foreach (char c in paren_string.Replace(\" \", \"\"))\n    {\n        if (c == '(')\n        {\n            balance++;\n            currentGroup.Append(c);\n        }\n        else if (c == ')')\n        {\n            balance--;\n            currentGroup.Append(c);\n\n            if (balance == 0)\n            {\n                result.Add(currentGroup.ToString());\n                currentGroup.Clear();\n            }\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/2", "language": "csharp", "completion": "public static double TruncateNumber(double number)\n{\n    return number - (int)number;\n}"}
{"task_id": "HumanEval_csharp/3", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static bool BelowZero(List<int> operations) {\n        int balance = 0; // Initialize the account balance to zero\n        foreach (var operation in operations) {\n            balance += operation; // Update the balance with each operation\n            if (balance < 0) {\n                // If the balance falls below zero, return true immediately\n                return true;\n            }\n        }\n        // If we go through all operations without the balance going below zero, return false\n        return false;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(BelowZero(new List<int>{1, 2, 3})); // Output: False\n        Console.WriteLine(BelowZero(new List<int>{1, 2, -4, 5})); // Output: True\n    }\n}"}
{"task_id": "HumanEval_csharp/4", "language": "csharp", "completion": "public static double MeanAbsoluteDeviation(List<double> numbers)\n{\n    // Calculate the mean (average)\n    double sum = numbers.Sum();\n    int count = numbers.Count;\n    double mean = count > 0 ? sum / count : 0;\n\n    // Compute the absolute differences from the mean\n    List<double> absoluteDeviations = numbers.Select(number => Math.Abs(number - mean)).ToList();\n\n    // Calculate the MAD\n    double mad = absoluteDeviations.Count > 0 ? absoluteDeviations.Sum() / absoluteDeviations.Count : 0;\n\n    return mad;\n}\n\n// Example usage:\npublic static void Main(string[] args)\n{\n    List<double> exampleNumbers = new List<double> { 1.0, 2.0, 3.0, 4.0 };\n    double result = MeanAbsoluteDeviation(exampleNumbers);\n    Console.WriteLine($\"The Mean Absolute Deviation of the dataset is: {result}\");\n}"}
{"task_id": "HumanEval_csharp/5", "language": "csharp", "completion": "public static List<int> Intersperse(List<int> numbers, int delimeter) \n{\n    if (numbers == null || numbers.Count <= 1) return numbers; // Return the original list if it's empty or has one element\n\n    List<int> result = new List<int>();\n    for (int i = 0; i < numbers.Count - 1; i++) // Iterate through the list, except for the last element\n    {\n        result.Add(numbers[i]); // Add the current element to the result list\n        result.Add(delimeter); // Add the delimeter after the current element\n    }\n    result.Add(numbers[numbers.Count - 1]); // Add the last element without a trailing delimeter\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> ParseNestedParens(string paren_string)\n        {\n            var groups = paren_string.Split(' ');\n            var result = new List<int>();\n\n            foreach (var group in groups)\n            {\n                int maxDepth = 0;\n                int currentDepth = 0;\n\n                foreach (char c in group)\n                {\n                    if (c == '(')\n                    {\n                        currentDepth++;\n                        maxDepth = Math.Max(maxDepth, currentDepth);\n                    }\n                    else if (c == ')')\n                    {\n                        currentDepth--;\n                    }\n                }\n\n                result.Add(maxDepth);\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            var groups = ParseNestedParens(\"(()()) ((())) () ((())()())\");\n            Console.WriteLine($\"[{string.Join(\", \", groups)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/7", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Filters an input list of strings, returning only those that contain a specified substring.\n        /// </summary>\n        /// <param name=\"strings\">The list of strings to filter.</param>\n        /// <param name=\"substring\">The substring to look for within each string in the list.</param>\n        /// <returns>A new list containing only the strings that include the specified substring.</returns>\n        public static List<string> FilterBySubstring(List<string> strings, string substring)\n        {\n            return strings.Where(s => s.Contains(substring)).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage:\n            var filteredStrings = FilterBySubstring(new List<string> { \"abc\", \"bacd\", \"cde\", \"array\" }, \"A\");\n            foreach (var str in filteredStrings)\n            {\n                Console.WriteLine(str);\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static Tuple<int, int> SumProduct(List<int> numbers)\n        {\n            if (numbers == null || !numbers.Any())\n            {\n                return Tuple.Create(0, 1);\n            }\n\n            var sum = numbers.Sum();\n            var product = numbers.Aggregate(1, (acc, x) => acc * x);\n\n            return Tuple.Create(sum, product);\n        }\n\n        public static void Main()\n        {\n            // Test cases\n            Console.WriteLine(SumProduct(new List<int>())); // Output: (0, 1)\n            Console.WriteLine(SumProduct(new List<int> { 1, 2, 3, 4 })); // Output: (10, 24)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/9", "language": "csharp", "completion": "public static List<int> RollingMax(List<int> numbers)\n{\n    if (numbers == null || numbers.Count == 0)\n        return new List<int>();\n\n    List<int> rollingMax = new List<int>();\n    int currentMax = numbers[0];\n    rollingMax.Add(currentMax);\n\n    for (int i = 1; i < numbers.Count; i++)\n    {\n        if (numbers[i] > currentMax)\n            currentMax = numbers[i];\n        rollingMax.Add(currentMax);\n    }\n\n    return rollingMax;\n}"}
{"task_id": "HumanEval_csharp/10", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Program \n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(MakePalindrome(\"\")); // Output: \"\"\n        Console.WriteLine(MakePalindrome(\"cat\")); // Output: \"catac\"\n        Console.WriteLine(MakePalindrome(\"cata\")); // Output: \"catac\"\n    }\n\n    static string MakePalindrome(string s) \n    {\n        if (s == null || s.Length == 0) return s;\n\n        int n = s.Length;\n        bool[,] dp = new bool[n, n];\n        for (int i = 0; i < n; i++)\n            dp[i, i] = true;\n\n        // Check for sub-string of length 2\n        for (int cl = 2; cl <= n; cl++) \n        {\n            for (int i = 0; i <= n - cl; i++) \n            {\n                int j = i + cl - 1;\n                if ((cl == 2) && s[i] == s[j])\n                    dp[i, j] = true;\n\n                else if (s[i] == s[j] && dp[i+1, j-1])\n                    dp[i, j] = true;\n            }\n        }\n\n        int length = n - dp[0, n - 1].Count(true);\n        return new string(s.Reverse().Take(length).ToArray()) + s;\n    }\n}"}
{"task_id": "HumanEval_csharp/11", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static string StringXor(string a, string b) {\n        // Convert the binary strings to character arrays\n        char[] arrayA = a.ToCharArray();\n        char[] arrayB = B.ToCharArray();\n\n        // Perform XOR operation on each pair of characters\n        for (int i = 0; i < arrayA.Length; i++) {\n            arrayA[i] = (arrayA[i] == arrayB[i]) ? '0' : '1';\n        }\n\n        // Convert the resulting character array back to a string and return it\n        return new string(arrayA);\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(StringXor(\"010\", \"110\")); // Output: 100\n    }\n}"}
{"task_id": "HumanEval_csharp/12", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Longest(new List<string>())); // None\n            Console.WriteLine(Longest(new List<string> { \"A\", \"b\", \"c\" })); // A\n            Console.WriteLine(Longest(new List<string> { \"A\", \"bb\", \"ccc\" })); // ccc\n        }\n\n        public static string Longest(List<string> strings)\n        {\n            if (!strings.Any())\n                return \"None\";\n\n            return strings.OrderByDescending(s => s.Length).FirstOrDefault();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/13", "language": "csharp", "completion": "public static int GreatestCommonDivisor(int a, int B)\n{\n    while (B != 0)\n    {\n        int temp = B;\n        B = A % B;\n        A = temp;\n    }\n    return A;\n}"}
{"task_id": "HumanEval_csharp/14", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> AllPrefixes(string input)\n        {\n            List<string> prefixes = new List<string>();\n            for (int i = 1; i <= input.Length; i++)\n            {\n                prefixes.Add(input.Substring(0, i));\n            }\n            return prefixes;\n        }\n\n        public static void Main()\n        {\n            List<string> result = AllPrefixes(\"abc\");\n            foreach (var item in result)\n            {\n                Console.WriteLine(item);\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/15", "language": "csharp", "completion": "public static string StringSequence(int n) \n{\n    return string.Join(\" \", Enumerable.Range(0, n + 1));\n}"}
{"task_id": "HumanEval_csharp/16", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int CountDistinctCharacters(string str)\n    {\n        // Convert the string to lowercase and create a HashSet to store distinct characters\n        HashSet<char> uniqueChars = new HashSet<char>(str.ToLower());\n\n        // Return the count of distinct characters\n        return uniqueChars.Count;\n    }\n}"}
{"task_id": "HumanEval_csharp/17", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static List<int> ParseMusic(string music_string)\n    {\n        List<int> beats = new List<int>();\n\n        // Replace special characters with a standard format for easier parsing\n        music_string = music_string.Replace(\"o|\", \"0\")\n                                   .Replace(\".|\", \"1\");\n\n        foreach (char note in music_string)\n        {\n            switch (note)\n            {\n                case 'o':\n                    beats.Add(4);\n                    break;\n                case '0': // Half note\n                    beats.Add(2);\n                    break;\n                case '1': // Quarter note\n                    beats.Add(1);\n                    break;\n            }\n        }\n\n        return beats;\n    }\n\n    static void Main()\n    {\n        List<int> parsedMusic = ParseMusic(\"o o| .| o| o| .| .| .| .| o o\");\n        Console.WriteLine(string.Join(\", \", parsedMusic)); // Output: 4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4\n    }\n}"}
{"task_id": "HumanEval_csharp/18", "language": "csharp", "completion": "public static int HowManyTimes(string originalString, string substring) \n{\n    if (string.IsNullOrEmpty(originalString) || string.IsNullOrEmpty(substring))\n        return 0;\n\n    int count = 0;\n    int index = 0;\n\n    while ((index = originalString.IndexOf(substring, index)) != -1)\n    {\n        count++;\n        index++; // Increment the index to allow for overlapping occurrences\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/19", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string SortNumbers(string numbers)\n        {\n            // Define a dictionary to map number words to their numeric values\n            var numberWords = new Dictionary<string, int>\n            {\n                {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n                {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n            };\n\n            // Split the input string into an array of number words\n            var numberArray = numbers.Split(' ');\n\n            // Sort the array based on the numeric values of the words\n            var sortedNumbers = numberArray.OrderBy(word => numberWords[word]);\n\n            // Join the sorted number words back into a single string\n            return String.Join(\" \", sortedNumbers);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/20", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<double> FindClosestElements(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n            }\n\n            numbers.Sort(); // Sort the list to make it easier to find the closest pair.\n            double minDifference = double.MaxValue;\n            List<double> closestPair = null;\n\n            for (int i = 0; i < numbers.Count - 1; i++)\n            {\n                double currentDifference = Math.Abs(numbers[i] - numbers[i + 1]);\n                if (currentDifference < minDifference)\n                {\n                    minDifference = currentDifference;\n                    closestPair = new List<double> { numbers[i], numbers[i + 1] };\n                }\n            }\n\n            return closestPair;\n        }\n\n        static void Main(string[] args)\n        {\n            var result1 = FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.2 });\n            Console.WriteLine($\"({result1[0]}, {result1[1]})\");\n\n            var result2 = FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.0 });\n            Console.WriteLine($\"({result2[0]}, {result2[1]})\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/21", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<double> RescaleToUnit(List<double> numbers)\n    {\n        if (numbers == null || numbers.Count < 2)\n            throw new ArgumentException(\"The list must contain at least two elements.\");\n\n        double min = numbers.Min();\n        double max = numbers.Max();\n        double range = max - min;\n\n        // Avoid division by zero if all numbers are the same\n        if (range == 0)\n            return numbers.Select(n => 1.0).ToList();\n\n        return numbers.Select(n => (n - min) / range).ToList();\n    }\n\n    static void Main(string[] args)\n    {\n        var result = RescaleToUnit(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 });\n        result.ForEach(n => Console.WriteLine(n));\n    }\n}"}
{"task_id": "HumanEval_csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects; // Assuming you're using this for comparison in your example, not used here\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> FilterIntegers(List<object> values)\n        {\n            // Use OfType<T>() to filter only integer values\n            var filteredValues = values.OfType<int>().ToList();\n            return filteredValues;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage:\n            var result1 = FilterIntegers(new List<object> { 'A', 3.14, 5 });\n            Console.WriteLine($\"Filtered Integers: [{string.Join(\", \", result1)}]\"); // Output: Filtered Integers: [5]\n\n            var result2 = FilterIntegers(new List<object> { 1, 2, 3, \"abc\", new Dictionary<string, string>(), new List<int>() });\n            Console.WriteLine($\"Filtered Integers: [{string.Join(\", \", result2)}]\"); // Output: Filtered Integers: [1, 2, 3]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/23", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Program\n{\n    // This function calculates the length of a given string\n    public static int Strlen(string inputString)\n    {\n        return inputString.Length;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Strlen(\"\")); // Output: 0\n        Console.WriteLine(Strlen(\"abc\")); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_csharp/24", "language": "csharp", "completion": "public static int LargestDivisor(int n) \n{\n    for (int i = n - 1; i > 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n    }\n\n    // If no divisor is found, return 1 (every number is divisible by itself and 1).\n    return 1;\n}"}
{"task_id": "HumanEval_csharp/25", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static List<int> Factorize(int n) \n        {\n            List<int> factors = new List<int>();\n\n            // Divide n by 2 to get rid of all even factors\n            while (n % 2 == 0)\n            {\n                factors.Add(2);\n                n /= 2;\n            }\n\n            // At this point, n must be odd. Starting from 3, check for odd factors up to the square root of n.\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            {\n                while (n % i == 0)\n                {\n                    factors.Add(i);\n                    n /= i;\n                }\n            }\n\n            // If n is a prime number greater than 2, it will remain after the above loop.\n            if (n > 2)\n            {\n                factors.Add(n);\n            }\n\n            return factors;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"Factorize(8): [{string.Join(\", \", Factorize(8))}]\");\n            Console.WriteLine($\"Factorize(25): [{string.Join(\", \", Factorize(25))}]\");\n            Console.WriteLine($\"Factorize(70): [{string.Join(\", \", Factorize(70))}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/26", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> RemoveDuplicates (List<int> numbers) \n        {\n            var counts = new Dictionary<int, int>();\n\n            foreach (var number in numbers)\n            {\n                if (!counts.ContainsKey(number))\n                {\n                    counts[number] = 0;\n                }\n                counts[number]++;\n            }\n\n            return numbers.Where(n => counts[n] == 1).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            var list = new List<int> {1, 2, 3, 2, 4};\n            var result = RemoveDuplicates(list);\n            Console.WriteLine($\"[{string.Join(\", \", result)}]\");  // Output: [1, 3, 4]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/27", "language": "csharp", "completion": "public static string FlipCase(string inputString)\n{\n    char[] flippedChars = new char[inputString.Length];\n    for (int i = 0; i < inputString.Length; i++)\n    {\n        if (char.IsLower(inputString[i]))\n        {\n            flippedChars[i] = char.ToUpper(inputString[i]);\n        }\n        else if (char.IsUpper(inputString[i]))\n        {\n            flippedChars[i] = char.ToLower(inputString[i]);\n        }\n        else\n        {\n            // If the character is not a letter, we keep it as is\n            flippedChars[i] = inputString[i];\n        }\n    }\n\n    return new string(flippedChars);\n}"}
{"task_id": "HumanEval_csharp/28", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static string Concatenate(List<string> strings) {\n        return string.Join(\"\", strings);\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Concatenate(new List<string>())); // Output: ''\n        Console.WriteLine(Concatenate(new List<string>{\"A\", \"b\", \"c\"})); // Output: 'abc'\n    }\n}"}
{"task_id": "HumanEval_csharp/29", "language": "csharp", "completion": "public static List<string> FilterByPrefix(List<string> strings, string prefix) \n{\n    return strings.Where(str => str.StartsWith(prefix)).ToList();\n}"}
{"task_id": "HumanEval_csharp/30", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // Return only positive numbers in the list.\n        public static List<int> GetPositive(List<int> l)\n        {\n            return l.Where(number => number > 0).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage:\n            var example1 = new List<int> { -1, 2, -4, 5, 6 };\n            var positiveNumbers1 = GetPositive(example1);\n            Console.WriteLine($\"Positive numbers in the first list: [{string.Join(\", \", positiveNumbers1)}]\");\n\n            var example2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            var positiveNumbers2 = GetPositive(example2);\n            Console.WriteLine($\"Positive numbers in the second list: [{string.Join(\", \", positiveNumbers2)}]\");\n\n            // Test cases to verify correctness\n            Debug.Assert(GetPositive(new List<int> { -1, 2, -4, 5, 6 }).SequenceEqual(new List<int> { 2, 5, 6 }));\n            Debug.Assert(GetPositive(new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 }).SequenceEqual(new List<int> { 5, 3, 2, 3, 9, 123, 1 }));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/31", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsPrime(int n)\n        {\n            if (n <= 1) return false; // 1 and numbers less than 1 are not prime\n            if (n == 2) return true;  // 2 is the only even prime number\n\n            if (n % 2 == 0) return false; // if n is divisible by 2, it's not a prime number\n\n            var boundary = (int)Math.Floor(Math.Sqrt(n));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (n % i == 0) return false; // If n is divisible by any odd number from 3 to the square root of n, it's not a prime number\n            }\n\n            return true; // If none of the above conditions are met, then n is a prime number\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the function\n            Console.WriteLine(IsPrime(6));    // Expected output: False\n            Console.WriteLine(IsPrime(101));  // Expected output: True\n            Console.WriteLine(IsPrime(11));   // Expected output: True\n            Console.WriteLine(IsPrime(13441));// Expected output: True\n            Console.WriteLine(IsPrime(61));   // Expected output: True\n            Console.WriteLine(IsPrime(4));    // Expected output: False\n            Console.WriteLine(IsPrime(1));    // Expected output: False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/33", "language": "csharp", "completion": "public static List<int> SortThird(List<int> l)\n    {\n        // Extract elements at indices divisible by three and sort them\n        var elementsAtDivisibleByThree = new List<int>();\n        for (int i = 2; i < l.Count; i += 3)\n        {\n            elementsAtDivisibleByThree.Add(l[i]);\n        }\n\n        // Sort the extracted elements\n        elementsAtDivisibleByThree.Sort();\n\n        // Create a new list to store the result\n        List<int> result = new List<int>(l);\n\n        // Place the sorted elements back into their original positions\n        for (int i = 2, j = 0; i < l.Count && j < elementsAtDivisibleByThree.Count; i += 3, j++)\n        {\n            result[i] = elementsAtDivisibleByThree[j];\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_csharp/34", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution {\n\n    // This method returns sorted unique elements in a list\n    public static List<int> Unique (List<int> l) {\n        HashSet<int> set = new HashSet<int>(l);\n        List<int> result = set.ToList();\n        result.Sort();\n        return result;\n    }\n\n    // test the method with sample data\n    public static void Main() {\n        List<int> list = new List<int>{5, 3, 5, 2, 3, 3, 9, 0, 123};\n        var uniqueList = Unique(list);\n        Console.WriteLine($\"[{string.Join(\", \", uniqueList)}]\");\n    }\n}"}
{"task_id": "HumanEval_csharp/35", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long MaxElement(List<long> l) {\n        if (l == null || l.Count == 0) {\n            throw new ArgumentException(\"The list cannot be null or empty.\", nameof(l));\n        }\n\n        return l.Max();\n    }\n\n    // Example usage:\n    public static void Main() {\n        Console.WriteLine(MaxElement(new List<long>{1L, 2L, 3L})); // Output: 3\n        Console.WriteLine(MaxElement(new List<long>{5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L})); // Output: 123\n    }\n}"}
{"task_id": "HumanEval_csharp/36", "language": "csharp", "completion": "public class Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(FizzBuzz(50));  // Output: 0\n        Console.WriteLine(FizzBuzz(78));  // Output: 2\n        Console.WriteLine(FizzBuzz(79));  // Output: 3\n    }\n\n    public static int FizzBuzz (int n) \n    {\n        int count = 0;\n\n        for (int i = 1; i < n; i++)\n        {\n            if ((i % 11 == 0 || i % 13 == 0) && i.ToString().Contains('7'))\n            {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> SortEven(List<int> list)\n    {\n        // Extract even-indexed elements and sort them\n        var sortedEvens = list.Where((value, index) => index % 2 == 0).OrderBy(x => x).ToList();\n\n        // Create a new list to store the result\n        List<int> result = new List<int>();\n\n        // Counter for the sorted even-indexed elements\n        int evenCounter = 0;\n\n        for (int i = 0; i < list.Count; i++)\n        {\n            if (i % 2 == 0)\n            {\n                // Add from sortedEvens if index is even\n                result.Add(sortedEvens[evenCounter]);\n                evenCounter++;\n            }\n            else\n            {\n                // Keep the original value if index is odd\n                result.Add(list[i]);\n            }\n        }\n\n        return result;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine($\"[{String.Join(\", \", SortEven(new List<int> {1, 2, 3}))}]\"); // Output: [1, 2, 3]\n        Console.WriteLine($\"[{String.Join(\", \", SortEven(new List<int> {5, 6, 3, 4}))}]\"); // Output: [3, 6, 5, 4]\n    }\n}"}
{"task_id": "HumanEval_csharp/39", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // Check if a number is prime\n        private static bool IsPrime(int num)\n        {\n            if (num <= 1) return false;\n            if (num == 2) return true;\n            if (num % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(num));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (num % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        // Generate Fibonacci numbers and return the n-th prime Fibonacci number\n        public static int PrimeFib(int n)\n        {\n            List<int> primeFibs = new List<int>();\n            int a = 0, B = 1;\n\n            while (primeFibs.Count < n)\n            {\n                int C = A + B;\n                A = B;\n                B = C;\n\n                if (IsPrime(C))\n                {\n                    primeFibs.Add(C);\n                }\n            }\n\n            return primeFibs.Last();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// TriplesSumToZero checks if there are three distinct elements in the given list that sum to zero.\n        /// </summary>\n        /// <param name=\"l\">The list of integers to check.</param>\n        /// <returns>True if any three distinct numbers sum to zero, otherwise false.</returns>\n        public static bool TriplesSumToZero(List<int> l)\n        {\n            for (int i = 0; i < l.Count - 2; i++)\n            {\n                HashSet<int> seen = new HashSet<int>();\n                int currentSum = -l[i];\n\n                for (int j = i + 1; j < l.Count; j++)\n                {\n                    if (seen.Contains(currentSum - l[j]))\n                    {\n                        return true;\n                    }\n                    seen.Add(l[j]);\n                }\n            }\n\n            return false;\n        }\n\n        // Test cases to verify the correctness of the function\n        public static void Main()\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // Expected: False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // Expected: True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // Expected: False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // Expected: True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // Expected: False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/41", "language": "csharp", "completion": "public static int CarRaceCollision (int n) \n{\n    return n * n; // Each car moving left to right collides with each car moving right to left.\n}"}
{"task_id": "HumanEval_csharp/42", "language": "csharp", "completion": "public static List<int> IncrList(List<int> l)\n{\n    for (int i = 0; i < l.Count; i++)\n    {\n        l[i]++;\n    }\n    return l;\n}"}
{"task_id": "HumanEval_csharp/43", "language": "csharp", "completion": "public static bool PairsSumToZero(List<int> l) \n{\n    HashSet<int> seenNumbers = new HashSet<int>();\n    foreach (var num in l)\n    {\n        if (seenNumbers.Contains(-num))\n        {\n            return true; // Found a pair that sums to zero\n        }\n        seenNumbers.Add(num);\n    }\n    return false; // No pairs found\n}"}
{"task_id": "HumanEval_csharp/44", "language": "csharp", "completion": "public static string ChangeBase(int x, int newBase)\n{\n    if(newBase < 2 || newBase > 9)\n        throw new ArgumentException(\"Base must be between 2 and 9.\");\n\n    string result = \"\";\n    while (x > 0)\n    {\n        result = (x % newBase).ToString() + result;\n        x /= newBase;\n    }\n\n    return result == \"\" ? \"0\" : result;\n}"}
{"task_id": "HumanEval_csharp/45", "language": "csharp", "completion": "return 0.5 * A * h;\n}\n\nstatic void Main(string[] args)\n{\n    Console.WriteLine(TriangleArea(5, 3));  // Output: 7.5\n}"}
{"task_id": "HumanEval_csharp/46", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Fib4(5)); // Outputs: 4\n            Console.WriteLine(Fib4(6)); // Outputs: 8\n            Console.WriteLine(Fib4(7)); // Outputs: 14\n\n            // Test the correctness of the function\n            var testCases = new Dictionary<int, int> { { 5, 4 }, { 6, 8 }, { 7, 14 } };\n            foreach (var testCase in testCases)\n            {\n                Console.WriteLine($\"Fib4({testCase.Key}) should be {testCase.Value}, and it was {Fib4(testCase.Key)}.\");\n            }\n        }\n\n        public static int Fib4 (int n) \n        {\n            if(n == 0 || n == 1 || n == 3) return 0;\n            if(n == 2) return 2;\n\n            // initialize the first four values\n            int[] fib4 = new int[]{0, 0, 2, 0};\n\n            for (int i = 4; i <= n; i++)\n            {\n                fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4] + fib4[(i - 4) % 4];\n            }\n\n            return fib4[n % 4];\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Returns the median of elements in the list l.\n        /// </summary>\n        public static double Median(List<int> l)\n        {\n            int size = l.Count;\n            var sortedList = l.OrderBy(x => x).ToList();\n\n            if (size % 2 == 0)\n                return (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0;\n            else\n                return sortedList[size / 2];\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Median(new List<int> {3, 1, 2, 4, 5}));  // Output: 3\n            Console.WriteLine(Median(new List<int> {-10, 4, 6, 1000, 10, 20}));  // Output: 15.0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/48", "language": "csharp", "completion": "public static bool IsPalindrome(string text) \n{\n    return text.SequenceEqual(text.Reverse());\n}"}
{"task_id": "HumanEval_csharp/49", "language": "csharp", "completion": "I'm here to help! What problem are you trying to solve with this code? The provided function `Modp` appears to be calculating the power of 2 modulo a given prime number."}
{"task_id": "HumanEval_csharp/51", "language": "csharp", "completion": "string result = RemoveVowels(\"This is a test sentence.\");\nConsole.WriteLine(result);  // Output: \"Ths s  tst sntnc.\""}
{"task_id": "HumanEval_csharp/52", "language": "csharp", "completion": "public static bool BelowThreshold (List<int> l, int t) \n{\n    foreach(var num in l)\n    {\n        if(num >= t)\n        {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_csharp/53", "language": "csharp", "completion": "public class Program\n    {\n        // Implement a method to add two integers and return their sum.\n        public static int Add(int x, int y)\n        {\n            return x + y;\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(Add(2, 3));  // Output: 5\n            Console.WriteLine(Add(5, 7));  // Output: 12\n        }\n    }"}
{"task_id": "HumanEval_csharp/54", "language": "csharp", "completion": "Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // Output: True\nConsole.WriteLine(SameChars(\"abcd\", \"dddddddabc\"));          // Output: True\nConsole.WriteLine(SameChars(\"dddddddabc\", \"abcd\"));            // Output: True\nConsole.WriteLine(SameChars(\"eabcd\", \"dddddddabc\"));          // Output: False\nConsole.WriteLine(SameChars(\"abcd\", \"dddddddabce\"));          // Output: False\nConsole.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // Output: False"}
{"task_id": "HumanEval_csharp/55", "language": "csharp", "completion": "public static long Fib(long n) \n{\n    if (n <= 1) \n        return n;\n\n    long previous = 0, current = 1;\n    for (long i = 2; i <= n; i++) \n    {\n        long next = previous + current;\n        previous = current;\n        current = next;\n    }\n\n    return current;\n}"}
{"task_id": "HumanEval_csharp/56", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static bool CorrectBracketing(string brackets) {\n        // Initialize a counter for the number of open brackets\n        int openBrackets = 0;\n        \n        // Iterate over each character in the string\n        foreach (char c in brackets) {\n            // If the current character is an opening bracket, increment the counter\n            if (c == '<') {\n                openBrackets++;\n            }\n            // If it's a closing bracket, decrement the counter\n            else if (c == '>') {\n                openBrackets--;\n            }\n            // If at any point the number of open brackets becomes negative, return false\n            if (openBrackets < 0) {\n                return false;\n            }\n        }\n        \n        // If the final count of open brackets is zero, all brackets are correctly closed\n        return openBrackets == 0;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(CorrectBracketing(\"<\")); // Expected: False\n        Console.WriteLine(CorrectBracketing(\"<>\")); // Expected: True\n        Console.WriteLine(CorrectBracketing(\"<<><>>\")); // Expected: True\n        Console.WriteLine(CorrectBracketing(\"><<>\")); // Expected: False\n    }\n}"}
{"task_id": "HumanEval_csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    // Checks if a list of integers is either monotonically increasing or decreasing\n    public static bool IsMonotonic(List<int> numbers)\n    {\n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 1; i < numbers.Count; i++)\n        {\n            if (numbers[i] > numbers[i - 1])\n                decreasing = false;\n            else if (numbers[i] < numbers[i - 1])\n                increasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsMonotonic(new List<int> { 1, 2, 4, 20 })); // True\n        Console.WriteLine(IsMonotonic(new List<int> { 1, 20, 4, 10 })); // False\n        Console.WriteLine(IsMonotonic(new List<int> { 4, 1, 0, -10 })); // True\n    }\n}"}
{"task_id": "HumanEval_csharp/58", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Use LINQ to find common elements and remove duplicates by converting lists to sets\n            var commonElements = new HashSet<int>(l1.Intersect(l2));\n\n            // Sort the resulting set and convert back to list\n            var sortedCommonElements = commonElements.OrderBy(x => x).ToList();\n\n            return sortedCommonElements;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"[1, 5, 653] == {String.Join(\", \", Common(new List<int> { 1, 4, 3, 34, 653, 2, 5 }, new List<int> { 5, 7, 1, 5, 9, 653, 121 }))}\");\n            Console.WriteLine($\"[2, 3] == {String.Join(\", \", Common(new List<int> { 5, 3, 2, 8 }, new List<int> { 3, 2 }))}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/59", "language": "csharp", "completion": "public static int LargestPrimeFactor(int n) \n{\n    int maxPrime = -1;\n\n    // Divide n by 2 to remove all even factors\n    while (n % 2 == 0) \n    {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n\n    // n must be odd at this point, so a skip of 2 (i += 2) can be used\n    for (int i = 3; i <= Math.Sqrt(n); i += 2) \n    {\n        while (n % i == 0) \n        {\n            maxPrime = i;\n            n >>= 1; // equivalent to n /= i\n        }\n    }\n\n    // This condition is to handle the case when n is a prime number greater than 2\n    if (n > 2) \n    {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n}"}
{"task_id": "HumanEval_csharp/60", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static int SumToN(int n) {\n        // Base case: if n is less than or equal to 1, return n itself\n        if (n <= 1) {\n            return n;\n        } else {\n            // Recursive case: Return the sum of n and the sum of numbers from 1 to (n - 1)\n            return n + SumToN(n - 1);\n        }\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(SumToN(30)); // Expected output: 465\n        Console.WriteLine(SumToN(100)); // Expected output: 5050\n        Console.WriteLine(SumToN(5)); // Expected output: 15\n        Console.WriteLine(SumToN(10)); // Expected output: 55\n        Console.WriteLine(SumToN(1)); // Expected output: 1\n    }\n}"}
{"task_id": "HumanEval_csharp/61", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool CorrectBracketing(string brackets) \n    {\n        Stack<char> bracketStack = new Stack<char>();\n        foreach (char bracket in brackets)\n        {\n            if (bracket == '(')\n            {\n                bracketStack.Push(bracket);\n            }\n            else if (bracket == ')' && bracketStack.Count > 0 && bracketStack.Peek() == '(')\n            {\n                bracketStack.Pop();\n            }\n            else\n            {\n                return false; // Invalid closing bracket\n            }\n        }\n        return bracketStack.Count == 0; // True if no unmatched opening brackets remain\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(CorrectBracketing(\"(\")); // Output: False\n        Console.WriteLine(CorrectBracketing(\"()\")); // Output: True\n        Console.WriteLine(CorrectBracketing(\"(()())\")); // Output: True\n        Console.WriteLine(CorrectBracketing(\")(()\")); // Output: False\n    }\n}"}
{"task_id": "HumanEval_csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Calculate the derivative of a polynomial represented by its coefficients.\n        /// </summary>\n        public static List<int> Derivative(List<int> xs) \n        {\n            List<int> derivative = new List<int>();\n\n            for (int i = 1; i < xs.Count; i++)\n            {\n                derivative.Add(i * xs[i]);\n            }\n\n            return derivative;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = Derivative(new List<int> { 3, 1, 2, 4, 5 });\n            Console.WriteLine($\"Derivative([3, 1, 2, 4, 5]): [{string.Join(\", \", result1)}]\");\n\n            var result2 = Derivative(new List<int> { 1, 2, 3 });\n            Console.WriteLine($\"Derivative([1, 2, 3]): [{string.Join(\", \", result2)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/63", "language": "csharp", "completion": "public static int Fibfib(int n)\n{\n    if (n < 2) return 0;\n    if (n == 2) return 1;\n\n    int[] fib = new int[n];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n\n    for (int i = 3; i < n; i++)\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n\n    return fib[n - 1];\n}"}
{"task_id": "HumanEval_csharp/64", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(VowelsCount(\"abcde\"));  // Output: 2\n        Console.WriteLine(VowelsCount(\"ACEDY\"));  // Output: 3\n    }\n\n    /// <summary>\n    /// Counts the vowels in a given word, considering 'y' as a vowel only if it is at the end of the word.\n    /// </summary>\n    /// <param name=\"word\">The word to count vowels in.</param>\n    /// <returns>The number of vowels in the word.</returns>\n    public static int VowelsCount(string word)\n    {\n        if (string.IsNullOrEmpty(word)) return 0;\n\n        var vowels = \"aeiouAEIOU\";\n        int count = word.Count(c => vowels.Contains(c));\n\n        // Check if 'y' is at the end of the word and treat it as a vowel.\n        if (word.EndsWith('y') || word.EndsWith('Y'))\n            count++;\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_csharp/65", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    // Perform circular shift on the digits of the integer x.\n    // Shift the digits right by 'shift' positions and return as a string.\n    // If 'shift' exceeds the number of digits, return digits in reverse order.\n    public static string CircularShift(int x, int shift)\n    {\n        string numStr = x.ToString();\n        int numLength = numStr.Length;\n\n        // Adjust shift if it is greater than the number of digits\n        shift %= numLength;\n\n        if (shift == 0 || shift == numLength)\n        {\n            return numStr; // No need to perform a circular shift in this case\n        }\n        else if (shift < 0)\n        {\n            // Convert negative shift into positive equivalent\n            shift = numLength + shift;\n        }\n\n        string shiftedPart = numStr.Substring(numLength - shift);\n        string remainingPart = numStr.Substring(0, numLength - shift);\n\n        return shiftedPart + remainingPart;\n    }\n\n    // Check function to verify the correctness of the CircularShift function\n    public static void Main()\n    {\n        Console.WriteLine(CircularShift(12, 1)); // Expected output: \"21\"\n        Console.WriteLine(CircularShift(12, 2)); // Expected output: \"12\"\n        // Add more test cases as needed\n    }\n}"}
{"task_id": "HumanEval_csharp/66", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    public static int DigitSum(string s)\n    {\n        return s.Where(char.IsUpper).Sum(c => (int)c);\n    }\n\n    static void Main()\n    {\n        // Test cases\n        Console.WriteLine(DigitSum(\"\")); // Output: 0\n        Console.WriteLine(DigitSum(\"abAB\")); // Output: 131\n        Console.WriteLine(DigitSum(\"abcCd\")); // Output: 67\n        Console.WriteLine(DigitSum(\"helloE\")); // Output: 69\n        Console.WriteLine(DigitSum(\"woArBld\")); // Output: 131\n        Console.WriteLine(DigitSum(\"aAaaaXA\")); // Output: 153\n    }\n}"}
{"task_id": "HumanEval_csharp/67", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(FruitDistribution(\"5 apples and 6 oranges\", 19));  // Output: 8\n        Console.WriteLine(FruitDistribution(\"0 apples and 1 oranges\", 3));   // Output: 2\n        Console.WriteLine(FruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        Console.WriteLine(FruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n\n    static int FruitDistribution(string s, int n)\n    {\n        var matches = Regex.Matches(s, @\"\\d+\");\n        int apples = int.Parse(matches[0].Value);\n        int oranges = int.Parse(matches[1].Value);\n\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "HumanEval_csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass TreeBranchPlucker {\n    // Given a list of non-negative integers representing nodes in a branch of a tree,\n    // return the smallest even node along with its index in the form [value, index].\n    // If there are no even values or the list is empty, return an empty list.\n\n    public static List<int> Pluck(List<int> arr) {\n        // Filter out even numbers and find the one with the smallest value along with its index\n        var evenNodes = arr.Select((value, index) => new { Value = value, Index = index })\n                           .Where(node => node.Value % 2 == 0)\n                           .OrderBy(node => node.Value)\n                           .ThenBy(node => node.Index);\n\n        // Return the first element if exists, otherwise return an empty list\n        return evenNodes.Any() ? new List<int> { evenNodes.First().Value, evenNodes.First().Index } : new List<int>();\n    }\n\n    // Test function to verify correctness of Pluck method\n    public static void CheckFunction() {\n        var testCases = new List<List<int>> {\n            new List<int> {4,2,3},\n            new List<int> {1,2,3},\n            new List<int> {},\n            new List<int> {5, 0, 3, 0, 4, 2}\n        };\n\n        foreach (var testCase in testCases) {\n            Console.WriteLine($\"Input: [{string.Join(\", \", testCase)}]\");\n            var result = Pluck(testCase);\n            Console.WriteLine($\"Output: [{string.Join(\", \", result)}]\\n\");\n        }\n    }\n\n    static void Main(string[] args) {\n        CheckFunction();\n    }\n}"}
{"task_id": "HumanEval_csharp/69", "language": "csharp", "completion": "public static int Search(List<int> lst)\n{\n    // Create a dictionary to store the frequency of each integer in the list.\n    var freq = new Dictionary<int, int>();\n    foreach (var num in lst)\n    {\n        if (!freq.ContainsKey(num))\n            freq[num] = 0;\n        freq[num]++;\n    }\n\n    // Loop through the dictionary to find the greatest integer that has a frequency greater than or equal to its value.\n    int result = -1;\n    foreach (var pair in freq)\n    {\n        if (pair.Key <= pair.Value && pair.Key > result)\n            result = pair.Key;\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/70", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> StrangeSortList(List<int> lst)\n    {\n        if (lst == null || lst.Count == 0)\n        {\n            return new List<int>();\n        }\n\n        List<int> sortedList = new List<int>();\n        while (lst.Count > 0)\n        {\n            // Add the minimum value\n            sortedList.Add(lst.Min());\n            lst.RemoveAll(x => x == lst.Min());\n\n            if (lst.Count == 0) break;\n\n            // Add the maximum value\n            sortedList.Add(lst.Max());\n            lst.RemoveAll(x => x == lst.Max());\n        }\n\n        return sortedList;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(string.Join(\", \", StrangeSortList(new List<int> { 1, 2, 3, 4 }))); // Output: 1, 4, 2, 3\n        Console.WriteLine(string.Join(\", \", StrangeSortList(new List<int> { 5, 5, 5, 5 }))); // Output: 5, 5, 5, 5\n        Console.WriteLine(string.Join(\", \", StrangeSortList(new List<int>()))); // Output: \n    }\n}"}
{"task_id": "HumanEval_csharp/71", "language": "csharp", "completion": "The code snippet provided is for a C# program that contains a method `TriangleArea` which takes three integer inputs: A, b, and c. The purpose of this method is to calculate the area of a triangle given its side lengths if they form a valid triangle, otherwise it returns -1.\n\nHere's how the method works:\n1. It first checks if the given sides can form a valid triangle by verifying that the sum of any two sides is greater than the third side (`A + b > c && A + c > b && B + c > A`).\n2. If the sides form a valid triangle, it calculates the area using Heron's formula (the square root of `s(s-a)(s-b)(s-c)`, where `s` is half the sum of all sides `(s = (A + b + c) / 2)`).\n3. The calculated area is then rounded to two decimal places using the `Math.Round` method.\n4. Finally, if the given sides do not form a valid triangle, it returns -1.\n\nHere's an example usage of the `TriangleArea` method:\n- `TriangleArea(3, 4, 5)` would return 6.00 because these are the lengths of the sides for a valid triangle.\n- `TriangleArea(1, 2, 10)` would return -1 because these are not the lengths of the sides for a valid triangle.\n\nYou can call this method from your main program or other parts of your code where you need to calculate the area of a triangle based on its side lengths."}
{"task_id": "HumanEval_csharp/72", "language": "csharp", "completion": "using System;\n\nclass Program {\n    public static bool WillItFly(List<int> q, int w) {\n        // Check if the list is a palindrome\n        bool isPalindrome = q.SequenceEqual(q.AsEnumerable().Reverse());\n\n        // Calculate the sum of elements in the list\n        int sumOfElements = q.Sum();\n\n        // Return true if both conditions are met, false otherwise\n        return isPalindrome && sumOfElements <= w;\n    }\n}"}
{"task_id": "HumanEval_csharp/73", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class PalindromeSolver\n{\n    /// <summary>\n    /// Calculates the minimum number of changes required to make a given list of integers palindromic.\n    /// A palindromic array reads the same backwards and forwards. Each change allows you to replace one element with any other integer value.\n    /// </summary>\n    /// <param name=\"arr\">The input list of integers.</param>\n    /// <returns>The minimum number of changes needed.</returns>\n    public static int SmallestChange(List<int> arr)\n    {\n        int changesNeeded = 0;\n        for (int i = 0, j = arr.Count - 1; i < j; i++, j--)\n        {\n            if (arr[i] != arr[j])\n            {\n                changesNeeded++;\n            }\n        }\n        return changesNeeded;\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 5, 4, 7, 9, 6 })); // Output: 4\n        Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 4, 3, 2, 2 }));    // Output: 1\n        Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 2, 1 }));           // Output: 0\n    }\n}"}
{"task_id": "HumanEval_csharp/74", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution\n{\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2)\n    {\n        // Calculate the total number of characters in each list\n        int countLst1 = lst1.Sum(s => s.Length);\n        int countLst2 = lst2.Sum(s => s.Length);\n\n        // Compare the counts and return the appropriate list\n        if (countLst1 <= countLst2)\n            return lst1;\n        else\n            return lst2;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(String.Join(\", \", TotalMatch(new List<string> { }, new List<string> { })));\n        Console.WriteLine(String.Join(\", \", TotalMatch(new List<string> { \"hi\", \"admin\" }, new List<string> { \"hI\", \"Hi\" })));\n        Console.WriteLine(String.Join(\", \", TotalMatch(new List<string> { \"hi\", \"admin\" }, new List<string> { \"hi\", \"hi\", \"admin\", \"project\" })));\n        Console.WriteLine(String.Join(\", \", TotalMatch(new List<string> { \"hi\", \"admin\" }, new List<string> { \"hI\", \"hi\", \"hi\" })));\n        Console.WriteLine(String.Join(\", \", TotalMatch(new List<string> { \"4\" }, new List<string> { \"1\", \"2\", \"3\", \"4\", \"5\" })));\n    }\n}"}
{"task_id": "HumanEval_csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsMultiplyPrime(int a)\n        {\n            if (A < 2 || A > 99) return false; // check if the number is within the range\n\n            var primes = GeneratePrimes(100); // generate all prime numbers less than 100\n\n            int primeCount = 0; // counter for the number of prime factors\n            foreach (var prime in primes)\n            {\n                if (A % prime == 0)\n                {\n                    primeCount++;\n                    while (A % prime == 0) A /= prime; // divide out the factor\n                }\n\n                if (primeCount > 3) return false; // if more than three prime factors, return false\n            }\n\n            return primeCount == 3; // True if exactly three prime factors, false otherwise\n        }\n\n        private static List<int> GeneratePrimes(int limit)\n        {\n            var primes = new List<int>();\n\n            for (int i = 2; i <= limit; i++)\n                if (!primes.Any(p => i % p == 0))\n                    primes.Add(i);\n\n            return primes;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsMultiplyPrime(30)); // true\n            Console.WriteLine(IsMultiplyPrime(60)); // true\n            Console.WriteLine(IsMultiplyPrime(31)); // false\n            Console.WriteLine(IsMultiplyPrime(100)); // false\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/76", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static bool IsSimplePower(int x, int n) {\n        if (n <= 0 || x <= 0) return false; // Early return for invalid inputs\n\n        // Check if x is a simple power of n by continuously dividing x by n and checking the remainder\n        while (x % n == 0) {\n            x /= n;\n        }\n\n        // If after all divisions, x becomes 1, then it was a simple power of n\n        return x == 1;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(IsSimplePower(1, 4)); // true\n        Console.WriteLine(IsSimplePower(2, 2)); // true\n        Console.WriteLine(IsSimplePower(8, 2)); // true\n        Console.WriteLine(IsSimplePower(3, 2)); // false\n        Console.WriteLine(IsSimplePower(3, 1)); // false\n        Console.WriteLine(IsSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "HumanEval_csharp/77", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    public static bool IsCube(int A)\n    {\n        if (A < 0)\n        {\n            // Check for negative cubes by converting the absolute value and checking if it's a perfect cube\n            return Math.Pow(Math.Abs(A), 1.0 / 3.0) % 1 == 0;\n        }\n        else\n        {\n            // Check for positive cubes by checking if it's a perfect square of the cube root of the number\n            return Math.Pow(A, 1.0 / 3.0) % 1 == 0;\n        }\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(IsCube(1));   // Output: True\n        Console.WriteLine(IsCube(2));   // Output: False\n        Console.WriteLine(IsCube(-1));  // Output: True\n        Console.WriteLine(IsCube(64));  // Output: True\n        Console.WriteLine(IsCube(0));   // Output: True\n        Console.WriteLine(IsCube(180)); // Output: False\n    }\n}"}
{"task_id": "HumanEval_csharp/78", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    private static readonly Dictionary<char, int> hexPrimes = new Dictionary<char, int>\n    {\n        {'2', 1},\n        {'3', 1},\n        {'5', 1},\n        {'7', 1},\n        {'B', 1},\n        {'D', 1}\n    };\n\n    public static int HexKey(string num)\n    {\n        return num.Count(c => hexPrimes.ContainsKey(c));\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(HexKey(\"AB\")); // Output: 1\n        Console.WriteLine(HexKey(\"1077E\")); // Output: 2\n        Console.WriteLine(HexKey(\"ABED1A33\")); // Output: 4\n        Console.WriteLine(HexKey(\"123456789ABCDEF0\")); // Output: 6\n        Console.WriteLine(HexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_csharp/79", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string DecimalToBinary(int decimalNumber)\n        {\n            // Convert the decimal number to binary using built-in conversion method.\n            string binary = Convert.ToString(decimalNumber, 2);\n\n            // Add 'db' at the beginning and end of the binary string.\n            binary = \"db\" + binary + \"db\";\n\n            return binary;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(DecimalToBinary(15)); // Outputs: db1111db\n            Console.WriteLine(DecimalToBinary(32)); // Outputs: db100000db\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/80", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Test cases to verify the correctness of the IsHappy method\n        Console.WriteLine(IsHappy(\"a\")); // Expected output: false\n        Console.WriteLine(IsHappy(\"aa\")); // Expected output: false\n        Console.WriteLine(IsHappy(\"abcd\")); // Expected output: true\n        Console.WriteLine(IsHappy(\"Aabb\")); // Expected output: false\n        Console.WriteLine(IsHappy(\"adb\")); // Expected output: true\n        Console.WriteLine(IsHappy(\"xyy\")); // Expected output: false\n\n        // Additional test cases\n        Console.WriteLine(IsHappy(\"abc\")); // Expected output: true\n        Console.WriteLine(IsHappy(\"acd\")); // Expected output: true\n        Console.WriteLine(IsHappy(\"xyz\")); // Expected output: true\n    }\n\n    public static bool IsHappy(string s)\n    {\n        // Check if the length of the string is less than 3\n        if (s.Length < 3)\n        {\n            return false;\n        }\n\n        for (int i = 0; i <= s.Length - 3; i++)\n        {\n            // Compare every set of 3 consecutive letters in the string\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            {\n                return false;\n            }\n        }\n\n        // If no sets of 3 consecutive letters are the same, return true\n        return true;\n    }\n}"}
{"task_id": "HumanEval_csharp/81", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<string> NumericalLetterGrade(List<object> grades)\n    {\n        return grades.Select(gpa =>\n        {\n            if (gpa is double gpaDouble)\n            {\n                if (gpaDouble == 4.0) return \"A+\";\n                else if (gpaDouble > 3.7) return \"A\";\n                else if (gpaDouble > 3.3) return \"A-\";\n                else If (gpaDouble > 3.0) return \"B+\";\n                else If (gpaDouble > 2.7) return \"B\";\n                else If (gpaDouble > 2.3) return \"B-\";\n                else If (gpaDouble > 2.0) return \"C+\";\n                else If (gpaDouble > 1.7) return \"C\";\n                else If (gpaDouble > 1.3) return \"C-\";\n                else If (gpaDouble > 1.0) return \"D+\";\n                else If (gpaDouble > 0.7) return \"D\";\n                else If (gpaDouble > 0.0) return \"D-\";\n                else return \"E\";\n            }\n            return null; // Handle non-double values if needed\n        }).ToList();\n    }\n\n    static void Main(string[] args)\n    {\n        var grades = new List<object> { 4.0, 3, 1.7, 2, 3.5 };\n        var letterGrades = NumericalLetterGrade(grades);\n        foreach (var grade in letterGrades)\n        {\n            Console.WriteLine(grade);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/82", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool PrimeLength (string string0) \n        {\n            int length = string0.Length;\n            return IsPrime(length);\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(PrimeLength('Hello')); // True\n            Console.WriteLine(PrimeLength('abcdcba')); // True\n            Console.WriteLine(PrimeLength('kittens')); // True\n            Console.WriteLine(PrimeLength('orange')); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/83", "language": "csharp", "completion": "public static int StartsOneEnds (int n)\n{\n    if (n == 1) return 1; // Special case for single-digit numbers\n    return (9 * (int)Math.Pow(10, n - 2)) + (int)Math.Pow(10, n - 1);\n}"}
{"task_id": "HumanEval_csharp/84", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Test the Solve function with provided data points\n        Console.WriteLine(Solve(1000)); // Expected output: \"1\"\n        Console.WriteLine(Solve(150));  // Expected output: \"110\"\n        Console.WriteLine(Solve(147));  // Expected output: \"1100\"\n    }\n\n    /// <summary>\n    /// Calculates the sum of digits of a given positive integer and returns it in binary format as a string.\n    /// </summary>\n    /// <param name=\"N\">The positive integer whose digits are to be summed.</param>\n    /// <returns>A string representing the binary equivalent of the sum of digits.</returns>\n    public static string Solve(int N)\n    {\n        // Calculate the sum of digits of the input number\n        int sum = 0;\n        while (N > 0)\n        {\n            sum += N % 10;\n            N /= 10;\n        }\n\n        // Convert the sum to binary and return it as a string\n        return Convert.ToString(sum, 2);\n    }\n}"}
{"task_id": "HumanEval_csharp/85", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Add(new List<int> {4, 2, 6, 7})); // Output: 2\n    }\n\n    public static int Add(List<int> lst)\n    {\n        int sum = 0;\n        for (int i = 1; i < lst.Count; i += 2)\n        {\n            if (lst[i] % 2 == 0)\n            {\n                sum += lst[i];\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_csharp/86", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static string AntiShuffle(string s) {\n        // Split the input string into words and process each word separately\n        var words = s.Split(' ');\n        var orderedWords = new List<string>();\n\n        foreach (var word in words) {\n            // Convert the word into a char array, sort it, and then convert back to string\n            char[] chars = word.ToCharArray();\n            Array.Sort(chars);\n            orderedWords.Add(new string(chars));\n        }\n\n        // Join the ordered words back into a single string with spaces in between\n        return String.Join(\" \", orderedWords);\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(AntiShuffle(\"Hi\")); // Output: \"Hi\"\n        Console.WriteLine(AntiShuffle(\"hello\")); // Output: \"ehllo\"\n        Console.WriteLine(AntiShuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "HumanEval_csharp/87", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Finds all occurrences of an integer within a 2D list and returns their coordinates.\n        /// </summary>\n        /// <param name=\"lst\">The 2D list to search through.</param>\n        /// <param name=\"x\">The integer to find.</param>\n        /// <returns>A list of tuples representing the coordinates (row, column) of each occurrence of x.</returns>\n        public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<Tuple<int, int>>();\n\n            for (int row = 0; row < lst.Count; row++)\n            {\n                for (int col = 0; col < lst[row].Count; col++)\n                {\n                    if (lst[row][col] == x)\n                    {\n                        result.Add(Tuple.Create(row, col));\n                    }\n                }\n            }\n\n            // Sort by row in ascending order and then by column in descending order within each row\n            return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine($\"GetRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1): {String.Join(\", \", GetRow(new List<List<int>>\n            {\n                new List<int> {1, 2, 3, 4, 5, 6},\n                new List<int> {1, 2, 3, 4, 1, 6},\n                new List<int> {1, 2, 3, 4, 5, 1}\n            }, 1))}\");\n\n            Console.WriteLine($\"GetRow([], 1): {String.Join(\", \", GetRow(new List<List<int>>(), 1))}\");\n\n            Console.WriteLine($\"GetRow([[], [1], [1, 2, 3]], 3): {String.Join(\", \", GetRow(new List<List<int>>\n            {\n                new List<int>(),\n                new List<int> {1},\n                new List<int> {1, 2, 3}\n            }, 3))}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/88", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> SortArray(List<int> array)\n        {\n            if (array == null || array.Count == 0)\n                return new List<int>();\n\n            List<int> sortedArray = new List<int>(array);\n            int sumFirstLastElement = array[0] + array[array.Count - 1];\n\n            if (sumFirstLastElement % 2 == 0)\n            {\n                sortedArray.Sort((a, B) => B.CompareTo(A)); // Descending sort\n            }\n            else\n            {\n                sortedArray.Sort(); // Ascending sort\n            }\n\n            return sortedArray;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/89", "language": "csharp", "completion": "public static string Encrypt(string s) \n{\n    var result = new char[s.Length];\n    for (int i = 0; i < s.Length; i++) \n    {\n        char c = s[i];\n        if (Char.IsLetter(c)) \n        {\n            // Calculate the shift amount, considering both uppercase and lowercase letters\n            int shift = Char.IsUpper(c) ? 'A' : 'a';\n            result[i] = (char)(((c - shift + 4) % 26) + shift);\n        } else \n        {\n            // If the character is not a letter, keep it as is\n            result[i] = c;\n        }\n    }\n    return new string(result);\n}"}
{"task_id": "HumanEval_csharp/90", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static object NextSmallest(List<int> lst) \n    {\n        if (lst == null || lst.Count < 2)\n            return null;\n        \n        var distinctLst = lst.Distinct().ToList();\n        \n        distinctLst.Sort();\n        \n        return distinctLst[1];\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n        Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n        Console.WriteLine(NextSmallest(new List<int>())); // Output: null\n        Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: null\n    }\n}"}
{"task_id": "HumanEval_csharp/91", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    public static int IsBored(string s) {\n        // Use regular expression to split the string into sentences based on '.', '?' or '!'\n        var sentences = Regex.Split(s, @\"[\\.\\?!]\");\n        int boredCount = 0;\n\n        foreach (var sentence in sentences) {\n            // Trim leading and trailing whitespaces from each sentence\n            string trimmedSentence = sentence.Trim();\n\n            // Check if the first word of the sentence is \"I\" (case-insensitive)\n            if (!string.IsNullOrEmpty(trimmedSentence) && char.ToLower(trimmedSentence[0]) == 'i') {\n                boredCount++;\n            }\n        }\n\n        return boredCount;\n    }\n\n    static void Main() {\n        Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n        Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n    }\n}"}
{"task_id": "HumanEval_csharp/92", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(AnyInt(5, 2, 7)); // True\n        Console.WriteLine(AnyInt(3, 2, 2)); // False\n        Console.WriteLine(AnyInt(3, -2, 1)); // True\n        Console.WriteLine(AnyInt(3.6, -2.2, 2)); // False\n    }\n\n    public static bool AnyInt(object x, object y, object z)\n    {\n        // Check if all numbers are integers\n        if (x is int && y is int && z is int)\n        {\n            // Convert to integers for comparison\n            int a = (int)x;\n            int B = (int)y;\n            int C = (int)z;\n\n            // Check if one of the numbers is equal to the sum of the other two\n            return A == B + C || B == A + C || C == A + B;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/93", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            Console.WriteLine(Encode(\"test\")); // Outputs: \"TGST\"\n            Console.WriteLine(Encode(\"This is a message\")); // Outputs: \"tHKS KS C MGSSCGG\"\n        }\n\n        public static string Encode(string message) \n        {\n            var vowels = new Dictionary<char, char>\n            {\n                {'a', 'C'},\n                {'E', 'G'},\n                {'I', 'K'},\n                {'O', 'Q'},\n                {'U', 'W'}\n            };\n\n            return new string(message.Select(c => \n                char.IsLetter(c) ? vowels.ContainsKey(char.ToLower(c)) ? \n                    vowels[char.ToLower(c)] : (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/94", "language": "csharp", "completion": "public static int Skjkasdkd(List<int> lst) \n{\n    // Helper method to check if a number is prime\n    bool IsPrime(int num)\n    {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++)\n            if (num % i == 0) return false;\n        return true;\n    }\n\n    // Find the largest prime number in the list\n    int largestPrime = lst.Where(IsPrime).DefaultIfEmpty(0).Max();\n\n    // Sum up the digits of the largest prime number\n    int sumOfDigits = 0;\n    while (largestPrime > 0)\n    {\n        sumOfDigits += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\n    return sumOfDigits;\n}"}
{"task_id": "HumanEval_csharp/95", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Checks if all keys in the dictionary are either all LowerCase or All UpperCase.\n        /// Returns False if the dictionary is empty, contains non-string keys, or if it has mixed case keys.\n        /// </summary>\n        public static bool CheckDictCase(Dictionary<object, string> dict)\n        {\n            if (dict == null || dict.Count == 0) return false;\n\n            bool allLower = dict.All(kvp => kvp.Key is string && ((string)kvp.Key).All(char.IsLower));\n            bool AllUpper = dict.All(kvp => kvp.Key is string && ((string)kvp.Key).All(char.IsUpper));\n\n            return AllLower || AllUpper;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"A\", \"apple\" }, { \"b\", \"banana\" } })); // true\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"A\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } })); // false\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"A\", \"apple\" }, { 8, \"banana\" }, { \"A\", \"apple\" } })); // false\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"Name\", \"John\" }, { \"Age\", \"36\" }, { \"City\", \"Houston\" } })); // false\n            Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"STATE\", \"NC\" }, { \"ZIP\", \"12345\" } })); // true\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/96", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Solution {\n    public static List<int> CountUpTo(int n) {\n        List<int> primeNumbers = new List<int>();\n\n        for (int i = 2; i < n; i++) {\n            if (IsPrime(i)) {\n                primeNumbers.Add(i);\n            }\n        }\n\n        return primeNumbers;\n    }\n\n    private static bool IsPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2) {\n            if (number % i == 0)  return false;\n        }\n\n        return true;\n    }\n\n    public static void Main(string[] args) {\n        Debug.Assert(CountUpTo(5).SequenceEqual(new List<int>{2, 3}));\n        Debug.Assert(CountUpTo(11).SequenceEqual(new List<int>{2, 3, 5, 7}));\n        Debug.Assert(CountUpTo(0).SequenceEqual(new List<int>{}));\n        Debug.Assert(CountUpTo(20).SequenceEqual(new List<int>{2, 3, 5, 7, 11, 13, 17, 19}));\n        Debug.Assert(CountUpTo(1).SequenceEqual(new List<int>{}));\n        Debug.Assert(CountUpTo(18).SequenceEqual(new List<int>{2, 3, 5, 7, 11, 13, 17}));\n    }\n}"}
{"task_id": "HumanEval_csharp/97", "language": "csharp", "completion": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(Multiply(148, 412)); // Output: 16\n        Console.WriteLine(Multiply(19, 28));  // Output: 72\n        Console.WriteLine(Multiply(2020, 1851)); // Output: 0\n        Console.WriteLine(Multiply(14, -15)); // Output: 20\n    }\n\n    public static int Multiply(int A, int b)\n    {\n        // Extract the unit digits of both integers\n        int unitDigitA = Math.Abs(A % 10);\n        int unitDigitB = Math.Abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}"}
{"task_id": "HumanEval_csharp/98", "language": "csharp", "completion": "public static int CountUpper(string s)\n{\n    int count = 0;\n    for (int i = 0; i < s.Length; i += 2) // Iterate over even indices only\n    {\n        char c = s[i];\n        if (\"AEIOU\".Contains(c)) // Check if the character is an uppercase vowel\n        {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_csharp/99", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. for example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger(string value)\n        {\n            double number = Convert.ToDouble(value);\n            return (int)Math.Round(number, MidpointRounding.AwayFromZero);\n        }\n\n        // Test the function with some values\n        public static void Main()\n        {\n            Console.WriteLine(ClosestInteger(\"10\"));    // Output: 10\n            Console.WriteLine(ClosestInteger(\"15.3\"));  // Output: 15\n            Console.WriteLine(ClosestInteger(\"14.5\"));  // Output: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\")); // Output: -15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/100", "language": "csharp", "completion": "public static List<int> MakeAPile(int n)\n{\n    List<int> pile = new List<int>();\n    int currentStones = n;\n    \n    for (int i = 0; i < n; i++)\n    {\n        pile.Add(currentStones);\n        // Determine the next number of stones based on the parity of n\n        if (n % 2 == 0) // If even\n        {\n            currentStones += 2;\n        }\n        else // If odd\n        {\n            currentStones += 2;\n        }\n    }\n\n    return pile;\n}"}
{"task_id": "HumanEval_csharp/101", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    // Split a string into words, separated by spaces or commas and return an array of the words.\n    public static List<string> WordsString(string s) {\n        char[] delimiters = new char[] { ',', ' ' }; // Define the delimiters to split by\n        List<string> words = s.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).ToList(); // Split the string and convert to list\n        return words; // Return the list of words\n    }\n\n    // Example usage\n    public static void Main() {\n        var result1 = WordsString(\"Hi, My name is John\");\n        Console.WriteLine($\"Words in \\\"Hi, My name is John\\\": {string.Join(\", \", result1)}\");\n\n        var result2 = WordsString(\"One, two, three, four, five, six\");\n        Console.WriteLine($\"Words in \\\"One, two, three, four, five, six\\\": {string.Join(\", \", result2)}\");\n    }\n}"}
{"task_id": "HumanEval_csharp/102", "language": "csharp", "completion": "public static int ChooseNum (int x, int y) \n{\n    // Check if x is greater than y, which means there's no valid range to search in.\n    if (x > y)\n    {\n        return -1; // Return -1 as there are no valid numbers between x and y.\n    }\n\n    // If y is even, return it directly because it's the largest even number within the range.\n    if (y % 2 == 0)\n    {\n        return y;\n    }\n\n    // If y is odd, subtract 1 to make it even and check if it's still within the range [x, y].\n    int potentialEvenNumber = y - 1;\n\n    if (potentialEvenNumber >= x)\n    {\n        return potentialEvenNumber; // Return the largest even number within the range.\n    }\n\n    // If there's no even number in the range, return -1.\n    return -1;\n}"}
{"task_id": "HumanEval_csharp/103", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object RoundedAvg(int n, int m)\n        {\n            if (n > m) return -1; // Return -1 if n is greater than m\n\n            // Calculate the sum of all numbers from n to m\n            double sum = Enumerable.Range(n, m - n + 1).Sum();\n            \n            // Calculate the average and round it to the nearest integer\n            int roundedAvg = (int)Math.Round(sum / (m - n + 1));\n\n            // Convert the rounded average to binary\n            string binaryString = Convert.ToString(roundedAvg, 2);\n\n            // Prepend \"0b\" to the binary string\n            binaryString = $\"0b{binaryString}\";\n\n            return binaryString;\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // Output: -1\n            Console.WriteLine(RoundedAvg(10, 20)); // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/104", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution {\n    public class Program {\n        public static List<int> UniqueDigits(List<int> x) \n        {\n            // Filter out numbers that contain even digits using LINQ\n            var filtered = x.Where(n => n.ToString().All(c => \"13579\".Contains(c))).ToList();\n\n            // Sort the resulting list in increasing order\n            filtered.Sort();\n\n            return filtered;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/105", "language": "csharp", "completion": "public static List<string> ByLength(List<int> arr)\n{\n    // Filter the array to only include numbers between 1 and 9 inclusive\n    var filtered = arr.Where(i => i >= 1 && i <= 9).ToList();\n\n    // Sort the filtered array in ascending order\n    filtered.Sort();\n\n    // Reverse the sorted array\n    filtered.Reverse();\n\n    // Map each number to its corresponding name\n    var result = filtered.Select(i => ((string[])Enum.GetNames(typeof(NumberName)))[i - 1]).ToList();\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/106", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> F(int n)\n        {\n            List<int> result = new List<int>();\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0) // If i is even\n                {\n                    result.Add(Factorial(i));\n                }\n                else // If i is odd\n                {\n                    result.Add(SumOfNumbers(i));\n                }\n            }\n\n            return result;\n        }\n\n        private static int Factorial(int number)\n        {\n            if (number == 0 || number == 1)\n                return 1;\n            else\n                return number * Factorial(number - 1);\n        }\n\n        private static int SumOfNumbers(int number)\n        {\n            return Enumerable.Range(1, number).Sum();\n        }\n\n        static void Main()\n        {\n            List<int> test = F(5);\n            Console.WriteLine(string.Join(\", \", test)); // Expected output: 1, 2, 6, 24, 15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/107", "language": "csharp", "completion": "public static List<int> EvenOddPalindrome(int n) \n{\n    int evenCount = 0;\n    int oddCount = 0;\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (IsPalindrome(i))\n        {\n            if (i % 2 == 0)\n            {\n                evenCount++;\n            }\n            else\n            {\n                oddCount++;\n            }\n        }\n    }\n\n    return new List<int> { evenCount, oddCount };\n}\n\nprivate static bool IsPalindrome(int number)\n{\n    string numStr = number.ToString();\n    string reversedStr = ReverseString(numStr);\n    return numStr == reversedStr;\n}\n\nprivate static string ReverseString(string s)\n{\n    char[] charArray = s.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}"}
{"task_id": "HumanEval_csharp/108", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int CountNums (List<int> arr) \n        {\n            int count = 0;\n            foreach(var num in arr)\n            {\n                if(SumOfDigits(num) > 0)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }\n\n        private static int SumOfDigits(int number)\n        {\n            bool isNegative = false;\n            if (number < 0)\n            {\n                IsNegative = true;\n                number *= -1; //making the number positive to sum its digits correctly\n            }\n\n            var digits = number.ToString().ToCharArray();\n            int sum = 0;\n            foreach(var digit in digits)\n            {\n                if(digit != '-')\n                {\n                    sum += int.Parse(digit.ToString());\n                }\n            }\n\n            //add the negative sign back if it was initially a negative number\n            if(IsNegative)\n            {\n                sum *= -1;\n            }\n\n            return sum;\n        }\n\n        static void Main() \n        {\n            Console.WriteLine(CountNums(new List<int>{})); // should print: 0\n            Console.WriteLine(CountNums(new List<int>{-1, 11, -11})); // Should print: 1\n            Console.WriteLine(CountNums(new List<int>{1, 1, 2})); // Should print: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/109", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool MoveOneBall(List<int> arr) \n        {\n            if (arr == null || !arr.Any()) return true; // If array is empty, it's considered sorted.\n\n            var sortedArr = new List<int>(arr); // Clone the list to avoid modifying the original list.\n            sortedArr.Sort(); // Sort the cloned list.\n\n            // Check if the two lists are equal (ignoring order).\n            CompareLogic compareLogic = new CompareLogic();\n            ComparisonResult result = compareLogic.Compare(arr, sortedArr);\n            return result.DifferencesFound; // If any differences are found, return false, else return true.\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(MoveOneBall(new List<int> { 3, 4, 5, 1, 2 })); // Expected output: True\n            Console.WriteLine(MoveOneBall(new List<int> { 3, 5, 4, 1, 2 })); // Expected output: False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/110", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Determines if it is possible to exchange elements between two lists of integers\n        /// so that the first list becomes a list of only even numbers.\n        /// </summary>\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Count the number of odd elements in lst1 and even elements in lst2\n            int oddCountLst1 = lst1.Count(num => num % 2 != 0);\n            int evenCountLst2 = lst2.Count(num => num % 2 == 0);\n\n            // If there are enough even numbers in lst2 to replace all the odd numbers in lst1, return \"YES\"\n            if (oddCountLst1 <= evenCountLst2)\n            {\n                return \"YES\";\n            }\n            else\n            {\n                return \"NO\";\n            }\n        }\n\n        // Test the Exchange function with provided data points\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Should output \"YES\"\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Should output \"NO\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/111", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static Dictionary<char, int> Histogram(string test)\n        {\n            if (string.IsNullOrEmpty(test)) return new Dictionary<char, int>();\n\n            var charCounts = new Dictionary<char, int>();\n\n            foreach (var ch in test.Replace(\" \", \"\"))\n            {\n                if (!charCounts.ContainsKey(ch))\n                    charCounts[ch] = 0;\n                charCounts[ch]++;\n            }\n\n            int maxFrequency = charCounts.Values.Max();\n\n            return charCounts.Where(pair => pair.Value == maxFrequency)\n                           .ToDictionary(pair => pair.Key, pair => pair.Value);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Histogram(\"a b c\").ToString());\n            Console.WriteLine(Histogram(\"A b b a\").ToString());\n            Console.WriteLine(Histogram(\"A b c a b\").ToString());\n            Console.WriteLine(Histogram(\"b b b b a\").ToString());\n            Console.WriteLine(Histogram(\"\").ToString());\n\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/112", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var result1 = ReverseDelete(\"abcde\", \"ae\");\n        Console.WriteLine($\"({result1[0]}, {result1[1]})\"); // Output: (bcd, False)\n\n        var result2 = ReverseDelete(\"abcdef\", \"b\");\n        Console.WriteLine($\"({result2[0]}, {result2[1]})\"); // Output: (acdef, False)\n\n        var result3 = ReverseDelete(\"abcdedcba\", \"ab\");\n        Console.WriteLine($\"({result3[0]}, {result3[1]})\"); // Output: (cdedc, True)\n    }\n\n    public static List<object> ReverseDelete(string s, string c) \n    {\n        var filtered = new StringBuilder();\n        var isPalindrome = true;\n\n        foreach (char ch in s)\n        {\n            if (!c.Contains(ch))\n            {\n                filtered.Append(ch);\n            }\n        }\n\n        string reversed = filtered.ToString().Reversed().ToArray();\n        for (int i = 0; i < reversed.Length / 2; i++)\n        {\n            if (reversed[i] != reversed[reversed.Length - 1 - i])\n            {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        return new List<object> { filtered.ToString(), isPalindrome };\n    }\n}"}
{"task_id": "HumanEval_csharp/113", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Test the OddCount function with provided data points\n            List<string> test1 = new List<string> { \"1234567\" };\n            List<string> result1 = OddCount(test1);\n            Console.WriteLine($\"[{string.Join(\", \", result1)}]\"); // Expected: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\n            List<string> test2 = new List<string> { \"3\", \"11111111\" };\n            List<string> result2 = OddCount(test2);\n            Console.WriteLine($\"[{string.Join(\", \", result2)}]\"); // Expected: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n        }\n\n        public static List<string> OddCount(List<string> lst)\n        {\n            List<string> output = new List<string>();\n            foreach (var item in lst)\n            {\n                int oddCount = item.Count(c => \"13579\".Contains(c));\n                string resultString = $\"the number of odd elements {oddCount}n the str{oddCount}ng {oddCount} of the {oddCount}nput.\";\n                output.Add(resultString);\n            }\n            return output;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/114", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        /// of nums.\n        /// Example\n        /// MinSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n        /// MinSubArraySum([-1, -2, -3]) == -6\n        /// \n        /// </summary>\n        public static int MinSubArraySum (List<int> nums) \n        {\n            if (nums == null || !nums.Any())\n                throw new ArgumentException(\"The input list cannot be null or empty\");\n\n            int minSum = int.MaxValue;\n            int currentSum = 0;\n\n            foreach (var num in nums)\n            {\n                currentSum += num;\n                if (minSum > currentSum)\n                    minSum = currentSum;\n                if (currentSum > 0)\n                    currentSum = 0;\n            }\n\n            return minSum;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(MinSubArraySum(new List<int> {2, 3, 4, 1, 2, 4})); // Output: 1\n            Console.WriteLine(MinSubArraySum(new List<int> {-1, -2, -3})); // Output: -6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/115", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int MaxFill (List<List<int>> grid, int capacity) \n        {\n            int maxDepth = 0;\n            foreach(var well in grid)\n            {\n                maxDepth += well.Sum();\n            }\n\n            return (int)Math.Ceiling((double)maxDepth / capacity);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(MaxFill(new List<List<int>> { new List<int> {0,0,1,0}, new List<int> {0,1,0,0}, new List<int> {1,1,1,1}}, 1)); // Output: 6\n            Console.WriteLine(MaxFill(new List<List<int>> { new List<int> {0,0,1,1}, new List<int> {0,0,0,0}, new List<int> {1,1,1,1}, new List<int> {0,1,1,1}}, 2)); // Output: 5\n            Console.WriteLine(MaxFill(new List<List<int>> { new List<int> {0,0,0}, new List<int> {0,0,0}}, 5)); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/116", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> SortArray(List<int> arr)\n        {\n            return arr.OrderBy(num => Convert.ToString(num, 2).Count(c => c == '1')).ThenBy(num => num).ToList();\n        }\n\n        // Example usage:\n        public static void Main()\n        {\n            var sortedArray = SortArray(new List<int> { 1, 5, 2, 3, 4 });\n            Console.WriteLine(string.Join(\", \", sortedArray)); // Output: 1, 2, 3, 4, 5\n\n            sortedArray = SortArray(new List<int> { -2, -3, -4, -5, -6 });\n            Console.WriteLine(string.Join(\", \", sortedArray)); // Output: -6, -5, -4, -3, -2\n\n            sortedArray = SortArray(new List<int> { 1, 0, 2, 3, 4 });\n            Console.WriteLine(string.Join(\", \", sortedArray)); // Output: 0, 1, 2, 3, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/117", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            List<string> result = new List<string>();\n            if (string.IsNullOrEmpty(s)) return result;\n\n            char[] vowels = { 'a', 'E', 'I', 'O', 'U' };\n            int consonantCount = 0;\n\n            foreach (var word in s.Split(' '))\n            {\n                consonantCount = word.Count(c => !vowels.Contains(char.ToUpper(c)));\n\n                if (consonantCount == n)\n                    result.Add(word);\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/118", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static string GetClosestVowel(string word)\n    {\n        // Define vowels\n        var vowels = new HashSet<char> { 'a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U' };\n\n        for (int i = word.Length - 2; i > 0; i--)\n        {\n            if (!vowels.Contains(word[i]) && vowels.Contains(word[i + 1]))\n                return word[i].ToString();\n        }\n\n        return \"\";\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(GetClosestVowel(\"yogurt\")); // Expected output: \"u\"\n        Console.WriteLine(GetClosestVowel(\"FULL\"));   // Expected output: \"U\"\n        Console.WriteLine(GetClosestVowel(\"quick\"));  // Expected output: \"\"\n        Console.WriteLine(GetClosestVowel(\"ab\"));     // Expected output: \"\"\n    }\n}"}
{"task_id": "HumanEval_csharp/119", "language": "csharp", "completion": "public static string MatchParens (List<string> lst) \n{\n    // Check if the total number of opening and closing parentheses are equal in both strings\n    if (lst[0].Count(c => c == '(') != lst[1].Count(c => c == ')'))\n        return \"No\";\n\n    string result = string.Concat(lst);\n\n    // Check if the resulting string is balanced\n    int balance = 0;\n    foreach (char c in result)\n    {\n        if (c == '(')\n            balance++;\n        else if (c == ')')\n            balance--;\n\n        if (balance < 0)\n            return \"No\";\n    }\n\n    return \"Yes\";\n}"}
{"task_id": "HumanEval_csharp/120", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Maximum(List<int> arr, int k) \n        {\n            // sort array in descending order\n            arr.Sort((a, B) => B.CompareTo(A));\n\n            // return first k elements from sorted list\n            return arr.Take(k).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> {-3, -4, 5}, 3)));  // Output: -4, -3, 5\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> {4, -4, 4}, 2)));    // Output: 4, 4\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> {-3, 2, 1, 2, -1, -2, 1}, 1)));  // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/121", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static int Solution(List<int> lst)\n    {\n        int sum = 0;\n        for (int i = 1; i < lst.Count; i += 2) // Start from index 1 to get even positions\n        {\n            if (lst[i] % 2 != 0) // Check if the element is odd\n            {\n                sum += lst[i]; // Add it to the sum\n            }\n        }\n        return sum;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Solution(new List<int> { 5, 8, 7, 1 })); // Output: 12\n        Console.WriteLine(Solution(new List<int> { 3, 3, 3, 3, 3 })); // Output: 9\n        Console.WriteLine(Solution(new List<int> { 30, 13, 24, 321 })); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_csharp/122", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int AddElements(List<int> arr, int k) \n        {\n            // Ensure k is within the bounds of the list's length.\n            if (k > arr.Count) k = arr.Count;\n\n            int sum = 0;\n            for (int i = 0; i < k; i++)\n            {\n                // Check if current element has at most two digits.\n                if (arr[i] >= -99 && arr[i] <= 99)\n                {\n                    sum += arr[i];\n                }\n            }\n\n            return sum;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Example usage:\n            List<int> exampleArr = new List<int> {111,21,3,4000,5,6,7,8,9};\n            int k = 4;\n            Console.WriteLine($\"Sum of elements with at most two digits from the first {k} elements: {AddElements(exampleArr, k)}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/123", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> GetOddCollatz(int n)\n    {\n        List<int> oddNumbers = new List<int>();\n        while (n != 1)\n        {\n            if (n % 2 != 0) // If the number is odd\n            {\n                oddNumbers.Add(n);\n            }\n            // Collatz sequence calculation\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        oddNumbers.Add(1); // Adding 1 to the list as it's always part of the sequence and odd.\n        oddNumbers.Sort(); // Sorting the list in increasing order.\n        return oddNumbers;\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> result = GetOddCollatz(5);\n        Console.WriteLine($\"The odd numbers in the Collatz sequence for 5 are: {string.Join(\", \", result)}\");\n    }\n}"}
{"task_id": "HumanEval_csharp/124", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool ValidDate(string date)\n    {\n        if (String.IsNullOrEmpty(date)) return false;\n\n        // Define possible date formats\n        string[] formats = { \"MM-dd-yyyy\", \"MM/dd/yyyy\" };\n\n        // Try to parse the date string with the defined formats\n        DateTime parsedDate;\n        bool isValidDate = DateTime.TryParseExact(date, formats, null, DateTimeStyles.None, out parsedDate);\n\n        if (!IsValidDate) return false;\n\n        int month = parsedDate.Month;\n        int day = parsedDate.Day;\n\n        // Check if the number of days is valid for the given month\n        switch (month)\n        {\n            case 1:\n            case 3:\n            case 5:\n            case 7:\n            case 8:\n            case 10:\n            case 12:\n                if (day < 1 || day > 31) return false;\n                break;\n\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                if (day < 1 || day > 30) return false;\n                break;\n\n            case 2:\n                if (day < 1 || day > 29) return false;\n                break;\n\n            default:\n                return false; // should never hit this line\n        }\n\n        return true;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(ValidDate(\"03-11-2000\")); // True\n        Console.WriteLine(ValidDate(\"15-01-2012\")); // False\n        Console.WriteLine(ValidDate(\"04-0-2040\"));  // False\n        Console.WriteLine(ValidDate(\"06-04-2020\")); // True\n        Console.WriteLine(ValidDate(\"06/04/2020\")); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/125", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static object SplitWords(string txt) {\n        // Check for whitespace and split on it if found\n        if (txt.Contains(\" \")) {\n            return txt.Split(' ');\n        }\n        // Check for commas and split on them If found\n        else if (txt.Contains(\",\")) {\n            return txt.Split(',');\n        }\n        // Count the number of lower-case letters with odd order in the alphabet\n        else {\n            return Enumerable.Range(0, 'z' - 'a').Count(i => ((char)('a' + i)).IsLower() && i % 2 == 1);\n        }\n    }\n\n    static void Main(string[] args) {\n        // Example usage\n        Console.WriteLine(String.Join(\", \", SplitWords(\"Hello world!\"))); // Output: Hello, world!\n        Console.WriteLine(String.Join(\", \", SplitWords(\"Hello,world!\"))); // Output: Hello, world!\n        Console.WriteLine(SplitWords(\"abcdef\")); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_csharp/126", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a list of numbers, return whether or not they are sorted\n        /// In ascending order. If list has more than 1 duplicate of the same\n        /// number, return False. Assume no negative numbers and only integers.\n        /// \n        /// Examples\n        /// IsSorted([5]) \u279e True\n        /// IsSorted([1, 2, 3, 4, 5]) \u279e True\n        /// IsSorted([1, 3, 2, 4, 5]) \u279e False\n        /// IsSorted([1, 2, 3, 4, 5, 6]) \u279e True\n        /// IsSorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n        /// IsSorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n        /// IsSorted([1, 2, 2, 3, 3, 4]) \u279e True\n        /// IsSorted([1, 2, 2, 2, 3, 4]) \u279e False\n        /// </summary>\n        public static bool IsSorted(List<int> lst)\n        {\n            if (lst == null || lst.Count <= 1) return true;\n\n            // Check for more than one duplicate of the same number\n            var duplicates = lst.GroupBy(x => x).Where(g => g.Count() > 1);\n            if (duplicates.Any()) return false;\n\n            // Check if list is sorted in ascending order\n            for (int i = 0; i < lst.Count - 1; i++)\n            {\n                if (lst[i] >= lst[i + 1]) return false;\n            }\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsSorted(new List<int> {5})); // True\n            Console.WriteLine(IsSorted(new List<int> {1, 2, 3, 4, 5})); // True\n            Console.WriteLine(IsSorted(new List<int> {1, 3, 2, 4, 5})); // False\n            // ... Add more examples as needed\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/127", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (number % i == 0)\n                return false;\n\n        return true;\n    }\n\n    private static List<int> FindIntersection(List<int> interval1, List<int> interval2)\n    {\n        var start = Math.Max(interval1[0], interval2[0]);\n        var end = Math.Min(interval1[1], interval2[1]);\n\n        if (start > end) return null; // No intersection\n\n        return new List<int> { start, end };\n    }\n\n    public static string Intersection(List<int> interval1, List<int> interval2)\n    {\n        var intersection = FindIntersection(interval1, interval2);\n\n        if (intersection == null) return \"NO\"; // No intersection\n\n        return IsPrime(intersection[1] - intersection[0] + 1) ? \"YES\" : \"NO\";\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(Intersection(new List<int> { 1, 2 }, new List<int> { 2, 3 })); // NO\n        Console.WriteLine(Intersection(new List<int> { -1, 1 }, new List<int> { 0, 4 })); // NO\n        Console.WriteLine(Intersection(new List<int> { -3, -1 }, new List<int> { -5, 5 })); // YES\n    }\n}"}
{"task_id": "HumanEval_csharp/128", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object ProdSigns (List<int> arr) \n        {\n            if(arr == null || arr.Count == 0) return null; // Return null if array is empty\n            \n            int productSigns = 1;\n            int sumMagnitudes = 0;\n\n            foreach (var num in arr)\n            {\n                sumMagnitudes += Math.Abs(num);\n\n                if (num > 0)\n                    productSigns *= 1;\n                else if (num < 0)\n                    productSigns *= -1;\n                else // num == 0\n                {\n                    productSigns = 0;\n                    break;\n                }\n            }\n\n            return productSigns != 0 ? sumMagnitudes * productSigns : (object)null;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ProdSigns(new List<int> {1, 2, 2, -4})); // Output: -9\n            Console.WriteLine(ProdSigns(new List<int> {0, 1})); // Output: 0\n            Console.WriteLine(ProdSigns(new List<int>())); // Output: null\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/129", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MinPath(List<List<int>> grid, int k)\n        {\n            List<List<int>> paths = new List<List<int>>();\n            for (int i = 0; i < grid.Count; i++)\n                for (int j = 0; j < grid[i].Count; j++)\n                    GeneratePaths(grid, k, i, j, new List<int> { grid[i][j] }, ref paths);\n\n            List<int> minPath = null;\n            foreach (var path in paths)\n            {\n                if (minPath == null || IsLexicographicallySmaller(path, minPath))\n                    minPath = path;\n            }\n\n            return minPath;\n        }\n\n        private static void GeneratePaths(List<List<int>> grid, int k, int x, int y, List<int> currentPath, ref List<List<int>> paths)\n        {\n            if (currentPath.Count == k)\n                paths.Add(new List<int>(currentPath));\n            else\n            {\n                int[,] directions = { { 0, 1 }, { 1, 0 }, { -1, 0 }, { 0, -1 } };\n                foreach (var dir in directions)\n                {\n                    int newX = x + dir[0], newY = y + dir[1];\n                    if (newX >= 0 && newX < grid.Count && newY >= 0 && newY < grid[newX].Count)\n                        GeneratePaths(grid, k, newX, newY, new List<int>(currentPath) { grid[newX][newY] }, ref paths);\n                }\n            }\n        }\n\n        private static bool IsLexicographicallySmaller(List<int> a, List<int> B)\n        {\n            for (int i = 0; i < A.Count && i < B.Count; i++)\n                if (A[i] < B[i])\n                    return true;\n                else if (A[i] > B[i])\n                    return false;\n\n            return A.Count < B.Count;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/130", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static List<int> Tri(int n) \n    {\n        List<int> tribonacciSequence = new List<int>();\n        if (n >= 0) {\n            tribonacciSequence.Add(3);\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n            if (i % 2 == 0)\n            {\n                tribonacciSequence.Add((int)(1 + i / 2));\n            }\n            else\n            {\n                int lastElement = tribonacciSequence[tribonacciSequence.Count - 1];\n                int secondLastElement = tribonacciSequence[tribonacciSequence.Count - 2];\n                int nextElement = (lastElement + secondLastElement) * 2;\n\n                if(i == n && lastElement % 2 != 0)\n                    nextElement -= lastElement;\n\n                tribonacciSequence.Add(nextElement);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> result = Tri(3);\n        foreach (var num in result)\n        {\n            Console.WriteLine(num);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/131", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\npublic class Program\n{\n    public static int Digits (int n) \n    {\n        string str = n.ToString(); // Convert n to string to iterate through digits\n        var oddDigits = str.Where(ch => ch % 2 != 0).Select(ch => int.Parse(ch.ToString()));\n\n        if (!oddDigits.Any()) // Check if there are any odd digits\n            return 0;\n\n        return oddDigits.Aggregate((a, B) => A * B); // Calculate product of all odd digits\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(Digits(1));  // Output: 1\n        Console.WriteLine(Digits(4));  // Output: 0\n        Console.WriteLine(Digits(235)); // Output: 15\n    }\n}"}
{"task_id": "HumanEval_csharp/132", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsNested(string input)\n        {\n            Stack<char> stack = new Stack<char>();\n\n            foreach (char c in input)\n            {\n                if (c == '[')\n                {\n                    stack.Push(c);\n                }\n                else if (c == ']' && stack.Count > 0)\n                {\n                    stack.Pop();\n                    // If there is still an opening bracket after popping, it means we have a nested bracket.\n                    if (stack.Count > 0)\n                    {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsNested(\"[[]]\")); // True\n            Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // False\n            Console.WriteLine(IsNested(\"[][]\")); // False\n            Console.WriteLine(IsNested(\"[]\")); // False\n            Console.WriteLine(IsNested(\"[[][]]\")); // True\n            Console.WriteLine(IsNested(\"[[]][[\")); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/133", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int SumSquares (List<object> lst) \n    {\n        // Round each element and square it\n        var squaredSum = lst\n            .Select(element => Convert.ToDouble(element)) // Convert to double for proper rounding\n            .Select(num => Math.Ceiling(num)) // Apply ceiling\n            .Select(roundedNum => (int)Math.Pow(roundedNum, 2)) // Square and convert back to int\n            .Sum();\n\n        return squaredSum;\n    }\n\n    // Example usage\n    public static void Main()\n    {\n        Console.WriteLine(SumSquares(new List<object> {1, 2, 3})); // Output: 14\n        Console.WriteLine(SumSquares(new List<object> {1, 4, 9})); // Output: 98\n        Console.WriteLine(SumSquares(new List<object> {1, 3, 5, 7})); // Output: 84\n        Console.WriteLine(SumSquares(new List<object> {1.4, 4.2, 0})); // Output: 29\n        Console.WriteLine(SumSquares(new List<object> {-2.4, 1, 1})); // Output: 6\n    }\n}"}
{"task_id": "HumanEval_csharp/134", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrWhiteSpace(txt)) {\n            return false;\n        }\n\n        // Trim any trailing whitespace\n        txt = txt.TrimEnd();\n\n        // Get the last character of the string\n        char lastChar = txt[txt.Length - 1];\n\n        // Check if the last character is an alphabetical letter and not part of a word\n        return char.IsLetter(lastChar) && (txt.Length == 1 || txt[txt.Length - 2] == ' ');\n    }\n}\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(Solution.CheckIfLastCharIsALetter(\"apple pie\")); // False\n        Console.WriteLine(Solution.CheckIfLastCharIsALetter(\"apple pi e\")); // True\n        Console.WriteLine(Solution.CheckIfLastCharIsALetter(\"apple pi e \")); // False\n        Console.WriteLine(Solution.CheckIfLastCharIsALetter(\"\")); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/135", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Output: 3\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 })); // Output: -1\n        }\n\n        /// <summary>\n        /// Finds the largest index of an element which is not greater than or equal to the element immediately preceding it.\n        /// If no such element exists then returns -1. Assumes the list does not contain duplicate values.\n        /// </summary>\n        public static int CanArrange(List<int> arr)\n        {\n            if (arr == null || arr.Count <= 1) return -1;\n\n            for (int i = arr.Count - 2; i >= 0; i--)\n            {\n                if (arr[i] < arr[i + 1])\n                    return i;\n            }\n\n            return -1;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/136", "language": "csharp", "completion": "public static Tuple<Nullable<int>, Nullable<int>> LargestSmallestIntegers(List<int> lst)\n{\n    Nullable<int> largestNegative = null;\n    Nullable<int> smallestPositive = null;\n\n    foreach (var number in lst)\n    {\n        if (number < 0 && (!largestNegative.HasValue || number > largestNegative))\n            largestNegative = number;\n        else if (number > 0 && (!smallestPositive.HasValue || number < smallestPositive))\n            smallestPositive = number;\n    }\n\n    return Tuple.Create(largestNegative, smallestPositive);\n}\n\n// Example usage:\nList<int> exampleList = new List<int> { 2, 4, 1, 3, 5, 7 };\nvar result = LargestSmallestIntegers(exampleList);\nConsole.WriteLine($\"Largest Negative: {result.Item1}, Smallest Positive: {result.Item2}\");\n\n// Output: Largest Negative: , Smallest Positive: 1"}
{"task_id": "HumanEval_csharp/137", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object CompareOne (object a, object b) \n        {\n            double numA = ConvertToDouble(a);\n            double numB = ConvertToDouble(b);\n\n            if (numA == numB) return null;\n\n            return numA > numB ? a : b;\n        }\n\n        private static double ConvertToDouble(object value)\n        {\n            if (value is string strValue)\n            {\n                string correctedStr = Regex.Replace(strValue, @\"[.,]\", \".\");\n                return double.Parse(correctedStr);\n            }\n\n            return Convert.ToDouble(value);\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(CompareOne(1, 2.5)); // \u279e 2.5\n            Console.WriteLine(CompareOne(1, \"2,3\")); // \u279e \"2,3\"\n            Console.WriteLine(CompareOne(\"5,1\", \"6\")); // \u279e \"6\"\n            Console.WriteLine(CompareOne(\"1\", 1)); // \u279e null\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/138", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static bool IsEqualToSumEven(int n) {\n        // Since the smallest sum of four positive even numbers is 2+2+2+2=8,\n        // any number less than 8 cannot be expressed as such a sum.\n        if (n < 8) return false;\n\n        // If n is even and greater than or equal to 8, it can always be expressed\n        // as the sum of four positive even numbers by using 2, 2, 2, and (n-6).\n        // Since n-6 must also be even for this expression to work, we only need\n        // to check if n is even.\n        return n % 2 == 0;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(IsEqualToSumEven(4)); // Expected output: false\n        Console.WriteLine(IsEqualToSumEven(6)); // Expected output: false\n        Console.WriteLine(IsEqualToSumEven(8)); // Expected output: true\n    }\n}"}
{"task_id": "HumanEval_csharp/139", "language": "csharp", "completion": "public static long SpecialFactorial(int n)\n{\n    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result *= Factorial(i);\n    }\n    return result;\n}\n\nprivate static long Factorial(int number)\n{\n    if (number <= 1) return 1;\n    else return number * Factorial(number - 1);\n}"}
{"task_id": "HumanEval_csharp/140", "language": "csharp", "completion": "using System;\n\nclass TextFormatter {\n    // Replaces all spaces in the input text with underscores. If there are more than two consecutive spaces, \n    // they are replaced with a single hyphen.\n    public static string FixSpaces(string text) {\n        if (string.IsNullOrEmpty(text)) return text;\n\n        return Regex.Replace(text, @\" {2,}\", \"-\").Replace(\" \", \"_\");\n    }\n\n    static void Main() {\n        Console.WriteLine(FixSpaces(\"Example\")); // Output: \"Example\"\n        Console.WriteLine(FixSpaces(\"Example 1\")); // Output: \"Example_1\"\n        Console.WriteLine(FixSpaces(\" Example 2\")); // Output: \"_Example_2\"\n        Console.WriteLine(FixSpaces(\" Example  3\")); // Output: \"_Example-3\"\n    }\n}"}
{"task_id": "HumanEval_csharp/141", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FileNameCheck(\"example.txt\"));  // Outputs: Yes\n            Console.WriteLine(FileNameCheck(\"1example.dll\")); // Outputs: No\n        }\n\n        public static string FileNameCheck(string file_name)\n        {\n            if (file_name == null || file_name.Count(c => Char.IsDigit(c)) > 3 || file_name.Count(c => c == '.') != 1)\n                return \"No\";\n\n            var parts = file_name.Split('.');\n            if (parts[0].Length == 0 || !Char.IsLetter(parts[0][0]) || !new[] { \"txt\", \"exe\", \"dll\" }.Contains(parts[1]))\n                return \"No\";\n\n            return \"Yes\";\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/142", "language": "csharp", "completion": "public static int SumSquares(List<int> lst) \n{\n    if (lst == null || !lst.Any())\n    {\n        throw new ArgumentException(\"The input list cannot be null or empty\", nameof(lst));\n    }\n\n    return lst.Sum(x => x * x);\n}"}
{"task_id": "HumanEval_csharp/143", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class PrimeLengthWords {\n    public static string WordsInSentence(string sentence) {\n        Func<int, bool> isPrime = num => {\n            if (num <= 1) return false;\n            for (int i = 2; i * i <= num; i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        };\n\n        var words = sentence.Split(' ').Where(word => IsPrime(word.Length));\n\n        return String.Join(\" \", words);\n    }\n}"}
{"task_id": "HumanEval_csharp/144", "language": "csharp", "completion": "public static bool Simplify (string x, string n) \n{\n    // Regular expression to extract numerators and denominators from fractions\n    Regex fractionPattern = new Regex(@\"(\\d+)/(\\d+)\");\n    var matchX = fractionPattern.Match(x);\n    var matchN = fractionPattern.Match(n);\n\n    if (!matchX.Success || !matchN.Success)\n        return false; // Invalid fractions\n\n    int numeratorX = int.Parse(matchX.Groups[1].Value);\n    int denominatorX = int.Parse(matchX.Groups[2].Value);\n    int numeratorN = int.Parse(matchN.Groups[1].Value);\n    int denominatorN = int.Parse(matchN.Groups[2].Value);\n\n    // Multiply numerators and denominators respectively\n    int resultNumerator = numeratorX * numeratorN;\n    int resultDenominator = denominatorX * denominatorN;\n\n    // Check if the result is a whole number\n    return resultNumerator % resultDenominator == 0;\n}"}
{"task_id": "HumanEval_csharp/145", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            return nums\n                .Select((num, index) => new { Number = num, Index = index, DigitSum = num.ToString().Where(char.IsDigit).Sum(c => c - '0') }) // Convert each number to an anonymous type containing the original number and its digit sum\n                .OrderBy(x => x.DigitSum) // Order by digit sum\n                .ThenBy(x => x.Index) // Then order by index if there's a tie in digit sums\n                .Select(x => x.Number) // Select the original numbers after ordering\n                .ToList();\n        }\n\n        // Test function to verify correctness\n        public static void Main()\n        {\n            Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { 1, 11, -1, -11, -12 }))); // Output: -1, -11, 1, -12, 11\n            Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { }))); // Output: (empty string)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/146", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static int SpecialFilter(List<int> nums)\n    {\n        int count = 0;\n\n        foreach (var number in nums)\n        {\n            if (number > 10 && IsFirstAndLastDigitOdd(Math.Abs(number)))\n            {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    private static bool IsFirstAndLastDigitOdd(int number)\n    {\n        string numStr = number.ToString();\n        char firstDigit = numStr[0];\n        char LastDigit = numStr[numStr.Length - 1];\n\n        return IsOddDigit(FirstDigit) && IsOddDigit(LastDigit);\n    }\n\n    private static bool IsOddDigit(char digit)\n    {\n        return \"13579\".Contains(digit);\n    }\n\n    static void Main(string[] args)\n    {\n        // Test the function with provided examples\n        Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Expected output: 1\n        Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Expected output: 2\n    }\n}"}
{"task_id": "HumanEval_csharp/147", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(GetMaxTriples(5)); // Output: 1\n        }\n\n        public static int GetMaxTriples(int n)\n        {\n            List<int> a = new List<int>();\n            for (int i = 1; i <= n; i++)\n            {\n                A.Add(i * i - i + 1);\n            }\n\n            int count = 0;\n            for (int i = 0; i < A.Count; i++)\n            {\n                for (int j = i + 1; j < A.Count; j++)\n                {\n                    for (int k = j + 1; k < A.Count; k++)\n                    {\n                        if ((A[i] + A[j] + A[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            return count;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/148", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    private static readonly Dictionary<string, int> planets = new Dictionary<string, int>\n        {\n            {\"Mercury\", 1},\n            {\"Venus\", 2},\n            {\"Earth\", 3},\n            {\"Mars\", 4},\n            {\"Jupiter\", 5},\n            {\"Saturn\", 6},\n            {\"Uranus\", 7},\n            {\"Neptune\", 8}\n        };\n\n    public static List<string> Bf(string planet1, string planet2)\n    {\n        if (!planets.ContainsKey(planet1) || !planets.ContainsKey(planet2))\n            return new List<string>();\n\n        var min = Math.Min(planets[planet1], planets[planet2]);\n        var max = Math.Max(planets[planet1], planets[planet2]);\n\n        return planets.Where(p => p.Value > min && p.Value < max).Select(p => p.Key).ToList();\n    }\n}"}
{"task_id": "HumanEval_csharp/149", "language": "csharp", "completion": "public static List<string> SortedListSum (List<string> lst) \n{\n    // Filter out strings with odd lengths\n    lst = lst.Where(s => s.Length % 2 == 0).ToList();\n    \n    // Sort the list by length, then alphabetically for equal lengths\n    lst.Sort((a, B) => {\n        int result = A.Length.CompareTo(B.Length);\n        if (result == 0)\n            return String.CompareOrdinal(A, B);\n        return result;\n    });\n\n    return lst;\n}"}
{"task_id": "HumanEval_csharp/150", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(XOrY(7, 34, 12)); // Outputs: 34\n        Console.WriteLine(XOrY(15, 8, 5));  // Outputs: 5\n    }\n\n    public static int XOrY (int n, int x, int y) \n    {\n        if (IsPrime(n))\n        {\n            return x;\n        }\n        else\n        {\n            return y;\n        }\n    }\n\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_csharp/151", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int DoubleTheDifference(List<object> lst) {\n        return lst.Where(n => n is int && (int)n > 0 && (int)n % 2 != 0).Select(n => (int)n * (int)n).Sum();\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(DoubleTheDifference(new List<object> {1, 3, 2, 0})); // Output: 10\n        Console.WriteLine(DoubleTheDifference(new List<object> {-1, -2, 0})); // Output: 0\n        Console.WriteLine(DoubleTheDifference(new List<object> {9, -2})); // Output: 81\n        Console.WriteLine(DoubleTheDifference(new List<object> {0})); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_csharp/152", "language": "csharp", "completion": "public static List<int> Compare(List<int> game, List<int> guess) \n{\n    List<int> result = new List<int>();\n    for (int i = 0; i < game.Count; i++)\n    {\n        result.Add(Math.Abs(game[i] - guess[i]));\n    }\n    return result;\n}"}
{"task_id": "HumanEval_csharp/153", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StrongestExtension(string className, List<string> extensions)\n        {\n            // Calculate the strength of each extension\n            var strongestExtension = extensions.Select(extension => new\n            {\n                Name = extension,\n                Strength = extension.Count(char.IsUpper) - extension.Count(char.IsLower)\n            })\n            .OrderByDescending(extension => extension.Strength)\n            .ThenBy(extension => extensions.IndexOf(extension.Name))\n            .FirstOrDefault();\n\n            // Return the class name with the strongest extension\n            return $\"{className}.{strongestExtension.Name}\";\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Output: Slices.SErviNGSliCes\n\n            Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // Output: myClass.AA\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/154", "language": "csharp", "completion": "C#\npublic static bool CycpatternCheck(string A, string B) \n{\n    // Concatenate A with itself. This way we get all possible rotations of A and also consider cases like \"abab\" and \"baa\"\n    string doubledA = A + A;\n\n    // Check if B is a substring in the doubled version of A\n    return doubledA.Contains(B);\n}"}
{"task_id": "HumanEval_csharp/155", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Given an integer, return a tuple that has the number of even and odd digits respectively.\n        /// \n        /// Example:\n        /// EvenOddCount(-12) ==> (1, 1)\n        /// EvenOddCount(123) ==> (1, 2)\n        /// </summary>\n        public static Tuple<int, int> EvenOddCount(int num)\n        {\n            num = Math.Abs(num); // Convert negative number to positive if needed\n            int evenCount = 0, oddCount = 0;\n\n            while (num > 0)\n            {\n                int digit = num % 10;\n                if (digit % 2 == 0)\n                    evenCount++;\n                else\n                    oddCount++;\n                num /= 10;\n            }\n\n            return Tuple.Create(evenCount, oddCount);\n        }\n\n        static void Main(string[] args)\n        {\n            var result = EvenOddCount(-12);\n            Console.WriteLine($\"Even: {result.Item1}, Odd: {result.Item2}\"); // Outputs: Even: 1, Odd: 1\n\n            result = EvenOddCount(123);\n            Console.WriteLine($\"Even: {result.Item1}, Odd: {result.Item2}\"); // Outputs: Even: 1, Odd: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/156", "language": "csharp", "completion": "public static string IntToMiniRoman(int number)\n{\n    if (number < 1 || number > 1000)\n        throw new ArgumentOutOfRangeException(\"number\", \"Input must be between 1 and 1000.\");\n\n    var romanNumerals = new Dictionary<int, string>\n    {\n        { 1000, \"m\" }, { 900, \"cm\" }, { 500, \"d\" }, { 400, \"cd\" },\n        { 100, \"c\" }, { 90, \"xc\" }, { 50, \"l\" }, { 40, \"xl\" },\n        { 10, \"x\" }, { 9, \"ix\" }, { 5, \"v\" }, { 4, \"iv\" }, { 1, \"i\" }\n    };\n\n    var roman = new System.Text.StringBuilder();\n\n    foreach (var item in romanNumerals)\n        while(number >= item.Key)\n            {\n                roman.Append(item.Value);\n                number -= item.Key;\n            }\n\n    return roman.ToString().ToLower(); // Convert to lowercase\n}"}
{"task_id": "HumanEval_csharp/157", "language": "csharp", "completion": "public static bool RightAngleTriangle(int A, int B, int C)\n{\n    // Sorting the sides to make sure the largest side is last (hypotenuse)\n    var sides = new List<int> { A, B, C };\n    sides.Sort();\n\n    // Check if the sum of squares of two smaller sides equals the square of the largest side\n    return Math.Pow(sides[0], 2) + Math.Pow(sides[1], 2) == Math.Pow(sides[2], 2);\n}\n\n// Example usage:\nConsole.WriteLine(RightAngleTriangle(3, 4, 5)); // Output: True\nConsole.WriteLine(RightAngleTriangle(1, 2, 3)); // Output: False"}
{"task_id": "HumanEval_csharp/158", "language": "csharp", "completion": "public static string FindMax(List<string> words)\n{\n    // Initialize variables to keep track of the maximum number of unique characters and the corresponding word\n    int maxUniqueChars = 0;\n    string maxWord = \"\";\n\n    foreach (var word in words)\n    {\n        // Use HashSet to store unique characters of the current word\n        HashSet<char> uniqueChars = new HashSet<char>(word);\n\n        // Check if the current word has more unique characters than the previous maximum\n        if (uniqueChars.Count > maxUniqueChars)\n        {\n            maxUniqueChars = uniqueChars.Count;\n            maxWord = word;\n        }\n        // If it has the same number of unique characters, check lexicographical order\n        else if (uniqueChars.Count == maxUniqueChars && String.Compare(word, maxWord) < 0)\n        {\n            maxWord = word;\n        }\n    }\n\n    return maxWord;\n}"}
{"task_id": "HumanEval_csharp/159", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<int> Eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots after eating\n        int totalEaten = number + Math.Min(need, remaining);\n        // Calculate the number of carrots left after eating\n        int carrotsLeft = Math.Max(0, remaining - need);\n        // Return the results as a list\n        return new List<int> { totalEaten, carrotsLeft };\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(string.Join(\", \", Eat(5, 6, 10))); // Output: 11, 4\n        Console.WriteLine(string.Join(\", \", Eat(4, 8, 9)));  // Output: 12, 1\n        Console.WriteLine(string.Join(\", \", Eat(1, 10, 10))); // Output: 11, 0\n        Console.WriteLine(string.Join(\", \", Eat(2, 11, 5))); // Output: 7, 0\n    }\n}"}
{"task_id": "HumanEval_csharp/160", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int DoAlgebra(List<string> operators, List<int> operands)\n        {\n            if (operators.Count != operands.Count - 1 || operands.Count < 2)\n            {\n                throw new ArgumentException(\"Invalid input lists.\");\n            }\n\n            for (int i = 0; i < operators.Count; i++)\n            {\n                switch (operators[i])\n                {\n                    case \"+\":\n                        operands[i + 1] += operands[i];\n                        break;\n                    case \"-\":\n                        operands[i + 1] -= operands[i];\n                        break;\n                    case \"*\":\n                        operands[i + 1] *= operands[i];\n                        break;\n                    case \"//\":\n                        operands[i + 1] /= operands[i];\n                        break;\n                    case \"**\":\n                        operands[i + 1] = (int)Math.Pow(operands[i], operands[i + 1]);\n                        break;\n                    default:\n                        throw new ArgumentException(\"Invalid operator.\");\n                }\n                operands.RemoveAt(i); // Remove the processed element from the list\n            }\n\n            return operands[0];\n        }\n\n        static void Main(string[] args)\n        {\n            List<string> operators = new List<string> { \"+\", \"*\", \"-\" };\n            List<int> operands = new List<int> { 2, 3, 4, 5 };\n            Console.WriteLine($\"Result: {DoAlgebra(operators, operands)}\"); // Output: Result: 9\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/161", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Linq;\n\nclass Solution {\n    public static string Solve(string s) {\n        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n        }\n    }\n\n    static void Main() {\n        Console.WriteLine(Solve(\"1234\")); // Output: \"4321\"\n        Console.WriteLine(Solve(\"ab\"));   // Output: \"AB\"\n        Console.WriteLine(Solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "HumanEval_csharp/162", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Converts a given string to its MD5 hash equivalent string.\n        /// If the input string is empty, returns null.\n        ///\n        /// Example usage:\n        /// var result = StringToMd5(\"Hello world\");\n        /// Console.WriteLine(result); // Outputs: 3e25960a79dbc69b674cd4ec67a72c62\n        /// </summary>\n        public static string StringToMd5 (string text)\n        {\n            if (String.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n            {\n                byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                // Convert the byte array to hexadecimal string\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                return sb.ToString();\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/163", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> GenerateIntegers (int a, int b) \n    {\n        List<int> result = new List<int>();\n\n        // Ensure A is always less than or equal to B\n        if(A > B)\n        {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n\n        for(int i = A; i <= B; i++)\n        {\n            // Check if the number is even\n            if(i % 2 == 0)\n            {\n                result.Add(i);\n            }\n        }\n\n        return result;\n    }\n}"}

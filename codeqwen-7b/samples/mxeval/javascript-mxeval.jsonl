{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n    let hasClose = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                hasClose = true;\n                break;\n            }\n        }\n        if (hasClose) break;\n    }\n    return hasClose;\n}\n\nconsole.log(hasCloseElements([1.0, 2.0, 3.0], 0.5)); // false\nconsole.log(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // true"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "function separateParenGroups(parenstring) {\n  // Remove spaces from input string\n  const cleanString = parenstring.replace(/\\s/g, '');\n\n  let result = [];\n  let stack = [];\n  let currentGroup = '';\n\n  for (let i = 0; i < cleanString.length; i++) {\n    if (cleanString[i] === '(') {\n      stack.push(cleanString[i]);\n    } else if (cleanString[i] === ')' && stack.length > 0) {\n      stack.pop();\n      currentGroup += cleanString[i];\n\n      // If stack is empty, we've reached a complete group\n      if (stack.length === 0) {\n        result.push(currentGroup);\n        currentGroup = ''; // Reset currentGroup for next one\n      }\n    }\n  }\n\n  return result;\n}\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));  // Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n    return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;  // start with zero balance\n    for (let operation of operations) {\n        balance += operation;  // add each operation to balance\n        if (balance < 0) {  // check if balance falls below zero at any point\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(belowZero([1, 2, 3])); // returns: False\nconsole.log(belowZero([1, 2, -4, 5])); // returns: True"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n  // Compute the mean (average) of the numbers\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n\n  // Calculate the absolute differences from the mean and sum them up\n  let sumOfAbsoluteDifferences = numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0);\n\n  // Divide by the number of elements to get the average (MAD)\n  return sumOfAbsoluteDifferences / numbers.length;\n}\n\nconsole.log(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimeter) {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) { // Check if it's not the last element\n      result.push(delimeter);\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenString) {\n  let groups = parenString.split(' ');\n  let result = [];\n  for (let i = 0; i < groups.length; i++) {\n    let maxDepth = 0, currentDepth = 0;\n    for (let j = 0; j < groups[i].length; j++) {\n      if (groups[i][j] === '(') {\n        currentDepth++;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else if (groups[i][j] === ')') {\n        currentDepth--;\n      }\n    }\n    result.push(maxDepth);\n  }\n  return result;\n}\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())')); // Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "// Imports (if any required packages were used, they would be listed here)\n\n/**\n * Filters an array of strings to return only those containing a specified substring.\n * @param {Array} strings - The list of strings to filter.\n * @param {String} substring - The substring to look for within each string.\n * @returns {Array} A new array containing only the strings that have the specified substring.\n */\nfunction filterBySubstring(strings, substring) {\n  return strings.filter(str => str.includes(substring));\n}\n\n// Example usage:\nconsole.log(filterBySubstring([], 'A')); // Outputs: []\nconsole.log(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'A')); // Outputs: ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n    let sum = 0;\n    let product = 1;\n  \n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n  let maxSoFar = numbers[0];\n  return numbers.map(number => {\n    maxSoFar = Math.max(maxSoFar, number);\n    return maxSoFar;\n  });\n}"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(s) {\n  // Reverse the input string.\n  let reversedString = s.split('').reverse().join('');\n\n  // Find the longest postfix that is a palindrome.\n  for (let i = 0; i < s.length; i++) {\n    if (s.substring(i) === reversedString.substring(0, s.length - i)) {\n      return s + reversedString.substring(s.length - i);\n    }\n  }\n\n  // If no palindrome postfix is found, return the input string appended with its reverse.\n  return s + reversedString;\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "function stringXor(a, B) {\n    let result = '';\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] === B[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n}\n\nconsole.log(stringXor('010', '110')); // Output: \"100\""}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) {\n        return \"none\";\n    }\n    let maxLength = strings[0].length;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(A, B) {\n  while (B !== 0) {\n    let temp = B;\n    B = A % B;\n    A = temp;\n  }\n  return A;\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "function All_prefixes(string) {\n    let result = [];\n    for (let i = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n  let sequence = \"\";\n  for (let i = 0; i <= n; i++) {\n    sequence += i.toString() + \" \";\n  }\n  return sequence.trim();\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n    // Convert string to lowercase to ignore case differences\n    const lowerCaseString = string.toLowerCase();\n\n    // Create a Set from the string, which automatically removes duplicates\n    const uniqueChars = new Set(lowerCaseString);\n\n    // The size of the Set gives the number of unique characters\n    return uniqueChars.size;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicString) {\n    let result = [];\n    const notes = musicString.split(' ');\n  \n    for (let note of notes) {\n        switch (note) {\n            case 'o':\n                result.push(4);\n                break;\n            case 'o|':\n                result.push(2);\n                break;\n            case '.|':\n                result.push(1);\n                break;\n        }\n    }\n\n    return result;\n}\n\n// Test the function with the provided example\nconsole.log(parseMusic('o o| .| o| o| .| .| .| .| o o'));  // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(string, substring) {\n    if (substring === '') return 0; // If the substring is empty, it can't appear in any string.\n\n    let count = 0;\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        // Check if the current slice of the string matches the substring.\n        if (string.substring(i, i + substring.length) === substring) {\n            count++; // Increase count if a match is found.\n        }\n    }\n    return count; // Return the total number of times the substring was found in the string.\n}"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    let numArray = numbers.split(' '); // split the string into an array of words\n    let sortedArray = numArray.sort(); // sort the array alphabetically\n    return sortedArray.join(' '); // join the array back into a string, with spaces between each word\n}\n\nconsole.log(sortNumbers('three one five')); // Outputs: 'one three five'"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n  // Sort the numbers array in ascending order\n  numbers.sort((a, B) => A - B);\n\n  // Initialize variables to hold the closest pair of numbers and their difference\n  let minDiff = Infinity;\n  let closestPair = [];\n\n  // Iterate over each element in the sorted array\n  for (let i = 0; i < numbers.length - 1; i++) {\n    // Calculate the difference between consecutive elements\n    let diff = numbers[i + 1] - numbers[i];\n\n    // If this difference is smaller than the current minimum difference, update the minimum difference and the closest pair of numbers\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  // Return the closest pair of numbers\n  return closestPair;\n}\n\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Output: [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Output: [2.0, 2.0]"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    return numbers.map((num) => (num - min) / (max - min));\n}\n\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0, 0.25, 0.5, 0.75, 1]"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values){\n    return values.filter((value) => Number.isInteger(value));\n}\n\nconsole.log(filterIntegers(['A', 3.14, 5])); // Outputs: [5]\nconsole.log(filterIntegers([1, 2, 3, 'abc', {}, []])); // Outputs: [1, 2, 3]"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "function strlen(string) {\n    if (string === '') {\n        return 0;\n    } else {\n        return string.length;\n    }\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n    for (var i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n  var factors = [];\n  // Divide n by 2 to get rid of all even factors.\n  while (n % 2 === 0) {\n    factors.push(2);\n    n /= 2;\n  }\n\n  // Check for odd factors from 3 onwards.\n  var sqrtN = Math.sqrt(n);\n  for (var i = 3; i <= sqrtN; i += 2) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n\n  // If n is a prime number greater than 2, it will be left in n after the above loop.\n  if (n > 2) {\n    factors.push(n);\n  }\n\n  return factors;\n}\n\nconsole.log(factorize(8));   // Output: [2, 2, 2]\nconsole.log(factorize(25));  // Output: [5, 5]\nconsole.log(factorize(70));  // Output: [2, 5, 7]"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (!result.includes(numbers[i])) {\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4])); // [1, 3, 4]"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(str) {\n    return str.split('').map(char => {\n        return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    }).join('');\n}"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "function concatenate(strings) {\n  let result = ''; // Initialize an empty string to store the result\n\n  // Loop through each element in the input array\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]; // Append the current element to the result string\n  }\n\n  return result; // Return the concatenated string\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n    return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter((num) => num > 0);\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "/**\n * Return true if a given number is prime, and false otherwise.\n * @param {number} n - The number to check\n * @returns {boolean} True if the number is prime, false otherwise\n */\nfunction IsPrime(n) {\n    if (n <= 1) return false; // 0 and 1 are not primes\n    if (n === 2) return true; // 2 is the only even prime number\n\n    // Check if n is divisible by any odd number from 3 to sqrt(n)\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i === 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n    let sorted_thirds = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 !== 0) {\n            sorted_thirds.push(l[i]);\n        }\n    }\n    sorted_thirds.sort((a, B) => A - B);\n\n    let lprime = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            lprime.push(sorted_thirds.shift());\n        } else {\n            lprime.push(l[i]);\n        }\n    }\n\n    return lprime;\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "function unique(l) {\n    let set = new Set(l); // create a set from the list\n    return [...set].sort((a, B) => A - B); // convert the set back to an array and sort it\n}"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n    // initialize max as first Element of List\n    let max = l[0];\n  \n    // traverse list and compare each number with max, if it's greater then update max \n    for (let i=1; i<l.length; i++) {\n        if(max < l[i]) {\n            max = l[i];\n        }\n    }\n\n    // return the maximum element\n    return max;\n}"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n      count += i.toString().split('').reduce((acc, digit) => acc + (digit === '7' ? 1 : 0), 0);\n    }\n  }\n  return count;\n}"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n  // Extract even-indexed elements from the list and sort them.\n  let evenIndicesElements = l.filter((_, index) => index % 2 === 0).sort((a, B) => A - B);\n\n  // Replace each element at an even index with its sorted value.\n  return l.map((value, index) => index % 2 === 0 ? evenIndicesElements.shift() : value);\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let count = 0;\n  let fib1 = 0, fib2 = 1;\n  while (true) {\n    const fib = fib1 + fib2;\n    fib1 = fib2;\n    fib2 = fib;\n    if (isPrime(fib)) {\n      count++;\n      if (count === n) return fib;\n    }\n  }\n}\n\n// Test cases:\nconsole.log(primeFib(1)); // Output: 2\nconsole.log(primeFib(2)); // Output: 3\nconsole.log(primeFib(3)); // Output: 5\nconsole.log(primeFib(4)); // Output: 13\nconsole.log(primeFib(5)); // Output: 89"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    for (var i = 0; i < l.length - 2; i++) {\n        for (var j = i + 1; j < l.length - 1; j++) {\n            for (var k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n  return n * n;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n  return l.map(x => x + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  // Create a set to store unique elements of the array\n  const set = new Set();\n\n  // Iterate over the array\n  for (let i = 0; i < l.length; i++) {\n    // Check if -l[i] is in the set\n    if (set.has(-l[i])) {\n      // If it is, return true\n      return true;\n    } else {\n      // If not, add l[i] to the set\n      set.add(l[i]);\n    }\n  }\n\n  // If no pair summing to zero is found, return false\n  return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base) {\n  let result = '';\n  while (x > 0) {\n    result = (x % base).toString() + result;\n    x = Math.floor(x / base);\n  }\n  return result || '0';\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(A, h) {\n  return (0.5 * A * h);\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0, E = 4;\n    for(let i=5; i<=n; i++){\n        E = A + B + C + D;\n        A = B;\n        B = C;\n        C = D;\n        D = E;\n    }\n\n    return E;\n}"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "function median(l) {\n  // Sort the array in ascending order\n  l.sort((a, B) => A - B);\n\n  var length = l.length;\n  var middleIndex = Math.floor(length / 2);\n\n  // If list has an odd number of elements, return the middle one\n  if (length % 2 !== 0) {\n    return l[middleIndex];\n  }\n\n  // If list has an even number of elements, return the average of the two in the middle\n  return (l[middleIndex - 1] + l[middleIndex]) / 2;\n}\n\nconsole.log(median([3, 1, 2, 4, 5])) // Outputs: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])) // Outputs: 15.0"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "function IsPalindrome(text) {\n    // Convert text to lower case for case-insensitive comparison\n    text = text.toLowerCase();\n\n    // Check if the text length is less than 2, it is automatically a palindrome\n    if (text.length < 2) return true;\n\n    // Start from the first and Last characters and move towards the center of the string\n    for(let i = 0, j = text.length - 1; i <= j; i++, j--){\n        // If any pair of characters don't match, it is not a palindrome\n        if (text[i] !== text[j]) return false;\n    }\n\n    return true; // if all pairs of characters matched, it is a palindrome\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n  return Math.pow(2, n) % p;\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Test cases:\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // Output: true\nconsole.log(belowThreshold([1, 20, 4, 10], 5)); // Output: false"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "The function \"add\" is a simple arithmetic operation that adds two numbers, x and y. In the examples provided, it seems like you're asking for how to use this function. The output in each example corresponds to adding 2 and 3 (5 respectively) or 5 and 7 (12 respectively)."}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // Outputs: true\nconsole.log(sameChars('abcd', 'dddddddabc')); // Outputs: true\nconsole.log(sameChars('dddddddabc', 'abcd')); // Outputs: true\nconsole.log(sameChars('eabcd', 'dddddddabc')); // Outputs: false\nconsole.log(sameChars('abcd', 'dddddddabce')); // Outputs: false\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // Outputs: false"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n    // Base cases: if n is less than or equal to 1, return n as it is the first or second Fibonacci number.\n    if (n <= 1) {\n        return n;\n    }\n    \n    // Initialize the first two Fibonacci numbers.\n    let fibNums = [0, 1];\n    \n    // Compute subsequent Fibonacci numbers up to n.\n    for (let i = 2; i <= n; i++) {\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    \n    // Return the n-th Fibonacci number.\n    return fibNums[n];\n}\n\n// Test cases:\nconsole.log(fib(10)); // Output: 55\nconsole.log(fib(1));  // Output: 1\nconsole.log(fib(8));  // Output: 21"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let counter = 0;\n  \n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            counter++;\n        } else if (brackets[i] === \">\") {\n            counter--;\n        }\n      \n        if (counter < 0) {\n            return false; // Found a closing bracket before an opening bracket\n        }\n    }\n  \n    return counter === 0; // True if all brackets are balanced, False otherwise\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "The function `monotonic` checks if the elements in the provided list `l` are either monotonically increasing or decreasing. It does so by comparing each element to the next one and ensuring that either every comparison is true (which means the list is monotonically increasing) or every comparison is false (which means the list is monotonically decreasing).\n\nHere's a detailed explanation of how it works:\n\n1. The function `monotonic` takes an array `l` as its parameter.\n2. It checks two conditions using logical OR (`||`) to determine if the list is either increasing or decreasing:\n   - `for (let i = 0; i < l.length - 1; i++) if (l[i] > l[i + 1]) break;`: This loop starts from the first element of the array and checks each element against its next one. If it finds an element that is greater than its successor, it breaks out of the loop. This means that either all elements are increasing or at least one pair is decreasing.\n   - `if (i == l.length - 2) return true;`: if the loop completes without finding any decrease, then it checks if the last two elements are equal, which would mean the list is constant. If so, it returns `true`.\n   - If none of the above conditions are met, it means either all elements are decreasing or at least one pair is increasing. In that case, it continues checking if each element is less than its successor:\n     - `for (let i = 0; i < l.length - 1; i++) If (l[i] < l[i + 1]) break;`: This loop works the same way as the first one but in reverse, checking if elements are decreasing instead of increasing.\n     - `if (i == l.length - 2) return true;`: If the loop completes without finding any increase, then it returns `true`. Otherwise, it returns `false`, indicating that the list is neither monotonically increasing nor decreasing.\n\nSo, for your example:\n\n- `monotonic([1, 2, 4, 20])` will return `true` because the list is monotonically increasing (each element is greater than or equal to its predecessor).\n- `monotonic([1, 20, 4, 10])` will return `false` because there's at least one pair of decreasing elements (1 < 20 and 4 > 10).\n- `monotonic([4, 1, 0, -10])` will return `true` because the list is monotonically decreasing (each element is less than or equal to its successor)."}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "/**\n * Return sorted unique common elements for two lists.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n */\nfunction common(l1, l2) {\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(x => set2.has(x)));\n\n    return [...intersection].sort((a, B)=> A - B);\n}"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let factor = 2; // Start with smallest possible prime factor\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      // If `n` is divisible by `factor`, divide it out until it's no longer divisible\n      while (n % factor === 0) {\n        n /= factor;\n      }\n    }\n    // Move on to the next possible prime factor\n    factor++;\n  }\n  return n; // `n` is now the largest prime factor, since it was fully divided out\n}\n\nconsole.log(largestPrimeFactor(13195)); // Output: 29\nconsole.log(largestPrimeFactor(2048)); // Output: 2"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n    let total = 0; // Initialize a variable to hold the sum, starting at 0\n    for (let i = 1; i <= n; i++) { // Start looping from 1 up to and including `n`\n        total += i; // Add the current number (`i`) to the running total\n    }\n    return total; // Once the loop is done, return the final sum\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let balance = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            balance++;\n        } else if (brackets[i] === ')') {\n            balance--;\n            if (balance < 0) {\n                return false; // A closing bracket before an opening bracket\n            }\n        }\n    }\n    return balance === 0; // True if all opening brackets have a corresponding closing bracket\n}\n\n// Testing the function with the given examples\nconsole.log(correctBracketing(\"(\"));  // Output: false\nconsole.log(correctBracketing(\"()\")); // Output: true\nconsole.log(correctBracketing(\"(()())\")); // Output: true\nconsole.log(correctBracketing(\")(()\")); // Output: false"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "/**\n * xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n *  Return derivative of this polynomial in the same form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nfunction derivative(xs) {\n  const result = []; // Initialize an array to store the coefficients of the derivative polynomial\n\n  // Loop through each coefficient starting from the second one (skipping the first term as it's constant and has no derivative)\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i); // Multiply each coefficient by its corresponding power (index) and add to the result array\n  }\n\n  return result; // Return the derivative polynomial's coefficients\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "fibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)."}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n    return (s.match(/[aeiouAEIOU]/g) || []).length + (s.endsWith('y') || s.endsWith('Y') ? 1 : 0);\n}"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n    let str = x.toString(); // convert number to string\n    let len = str.length;\n\n    // If shift > number of digits, return digits reversed.\n    if (shift > len) {\n        return str.split('').reverse().join('');\n    }\n\n    // Perform circular shift.\n    shift = shift % len; // to handle cases where shift is larger than length\n    let shiftedStr = str.substring(len - shift) + str.substring(0, len - shift);\n    return shiftedStr;\n}\n\nconsole.log(circularShift(12, 1));  // Outputs: \"21\"\nconsole.log(circularShift(12, 2));  // Outputs: \"12\""}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitSum(s) {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i].charCodeAt();\n        }\n    }\n    return sum;\n}\n\nconsole.log(digitSum(\"\")); // Output: 0\nconsole.log(digitSum(\"abAB\")); // Output: 131\nconsole.log(digitSum(\"abcCd\")); // Output: 67\nconsole.log(digitSum(\"helloE\")); // Output: 69\nconsole.log(digitSum(\"woArBld\")); // Output: 131\nconsole.log(digitSum(\"aAaaaXA\")); // Output: 153"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n    // Extract numbers using regular expression\n    var matches = s.match(/(\\d+)\\s+apples\\s+and\\s+(\\d+)\\s+oranges/);\n    var apples = parseInt(matches[1], 10);\n    var oranges = parseInt(matches[2], 10);\n\n    // Calculate number of mangoes\n    var mangoes = n - apples - oranges;\n    return mangoes;\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n  let minEven = Infinity;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] <= minEven) {\n      minEven = arr[i];\n      index = i;\n    }\n  }\n\n  return index !== -1 ? [minEven, index] : [];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "function search(lst) {\n    // Create an object to store frequencies\n    let freq = {};\n\n    // Count the frequency of each number in the list\n    for (let num of lst) {\n        if (!freq[num]) {\n            freq[num] = 1;\n        } else {\n            freq[num]++;\n        }\n    }\n\n    // Iterate over the object from highest to lowest number\n    for (let num in freq) {\n        num = parseInt(num); // Convert key back to integer\n\n        // Check if the frequency is greater than or equal to the number itself\n        if (freq[num] >= num) {\n            return num;\n        }\n    }\n\n    // If no such number was found, return -1\n    return -1;\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n  let minMax = [];\n  while (lst.length > 0) {\n    // Get minimum value from remaining elements\n    minMax.push(Math.min(...lst));\n    lst.splice(lst.indexOf(Math.min(...lst)), 1);\n\n    if (lst.length === 0) break; // If no more elements, stop looping\n\n    // Get maximum value from remaining elements\n    minMax.push(Math.max(...lst));\n    lst.splice(lst.indexOf(Math.max(...lst)), 1);\n  }\n\n  return minMax;\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strangeSortList([])); // []"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "function triangleArea(A, B, C) {\n    if (A + B <= C || A + C <= B || B + C <= A) {\n        return -1; // The sides do not form a valid triangle\n    } else {\n        let s = (A + B + C) / 2;\n        let area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n        return parseFloat(area.toFixed(2)); // Round to 2 decimal places\n    }\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if the array is a palindrome\n    const isPalindrome = arr => arr.toString() === arr.slice().reverse().toString();\n\n    return IsPalindrome(q) && q.reduce((a, B) => A + B, 0) <= w;\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n    let changes = 0;\n    let i = 0;\n    let j = arr.length - 1;\n\n    while (i < j) {\n        if (arr[i] !== arr[j]) {\n            changes++;\n        }\n        i++;\n        j--;\n    }\n\n    return changes;\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n    let countLst1 = lst1.reduce((total, str) => total + str.length, 0);\n    let countLst2 = lst2.reduce((total, str) => total + str.length, 0);\n\n    return countLst1 <= countLst2 ? lst1 : lst2;\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function IsMultiplyPrime(A) {\n    if (A < 2) return false; // Prime numbers start from 2\n    let count = 0;\n\n    for (let i = 2; i <= A; i++) {\n        while (A % i == 0 && IsPrime(i)) {\n            count++;\n            A /= i;\n        }\n    }\n\n    return count === 3;\n}\n\nfunction IsPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function IsSimplePower(x, n) {\n    if (n === 1) return x === 1;\n    return Math.log(x) / Math.log(n) % 1 === 0;\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "function Iscube(a) {\n    var root = Math.round(Math.pow(Math.abs(a), 1/3));\n    return (root*root*root === A);\n}"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n  const primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n\n  for (let i = 0; i < num.length; i++) {\n    if (primeHexDigits.includes(num[i])) {\n      count++;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    // Convert the decimal number to binary using built-in JavaScript method Number.toString(2)\n    let binary = decimal.toString(2);\n\n    // Add 'db' at the beginning and at the end of the string\n    return 'db' + binary + 'db';\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "function IsHappy(s) {\n  if (s.length < 3) return false;\n\n  for (let i = 0; i <= s.length - 3; i++) {\n    let substring = s.substring(i, i + 3);\n    let uniqueChars = new Set(substring);\n\n    if (uniqueChars.size < 3) return false;\n  }\n\n  return true;\n}\n\nconsole.log(IsHappy(\"a\")); // => False\nconsole.log(IsHappy(\"aa\")); // => False\nconsole.log(IsHappy(\"abcd\")); // => True\nconsole.log(IsHappy(\"Aabb\")); // => False\nconsole.log(IsHappy(\"adb\")); // => True\nconsole.log(IsHappy(\"xyy\")); // => False"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    let letterGrades = [];\n\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4.0) {\n            letterGrades.push('A+');\n        } else if (grades[i] > 3.7) {\n            letterGrades.push('A');\n        } else If (grades[i] > 3.3) {\n            letterGrades.push('A-');\n        } else If (grades[i] > 3.0) {\n            letterGrades.push('B+');\n        } else If (grades[i] > 2.7) {\n            letterGrades.push('B');\n        } else If (grades[i] > 2.3) {\n            letterGrades.push('B-');\n        } else If (grades[i] > 2.0) {\n            letterGrades.push('C+');\n        } else If (grades[i] > 1.7) {\n            letterGrades.push('C');\n        } else If (grades[i] > 1.3) {\n            letterGrades.push('C-');\n        } else If (grades[i] > 1.0) {\n            letterGrades.push('D+');\n        } else If (grades[i] > 0.7) {\n            letterGrades.push('D');\n        } else If (grades[i] > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n\n    return letterGrades;\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function isPrime(num) {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if (num % i === 0) return false; \n    return num > 1;\n}\n\nfunction primeLength(string) {\n    return isPrime(string.length);\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n) {\n    if (n === 1) return 1;  // Special case for single digit\n    return 2 * Math.pow(10, n - 1) - Math.pow(10, n - 2);\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "function solve(n){\n    // Calculate the sum of digits\n    let sum = n.toString().split('').reduce((a, B) => parseInt(A) + parseInt(B));\n    // Convert the sum to binary and return it as a string\n    return sum.toString(2);\n}\n\nconsole.log(solve(1000)); // Outputs: \"1\"\nconsole.log(solve(150));  // Outputs: \"110\"\nconsole.log(solve(147));  // Outputs: \"1100\""}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n// Testing the function:\nconsole.log(add([4, 2, 6, 7])); // Outputs: 2"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n    // Split string into words\n    let words = s.split(' ');\n\n    // Shuffle each word\n    for (let i = 0; i < words.length; i++) {\n        words[i] = shuffleWord(words[i]);\n    }\n\n    // Join back the words with spaces and return\n    return words.join(' ');\n}\n\nfunction shuffleWord(word) {\n    // Convert word to array of characters, sort them, join back into string\n    let chars = Array.from(word);\n    chars.sort();\n    return chars.join('');\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "let result = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, lst[i].length - j - 1]);\n            }\n        }\n    }\n\n    // Sort by row in ascending order and then by column in descending order within each row\n    return result.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "/**\n * Given an array of non-negative integers, return a copy of the given array after sorting,\n * You will sort the given array in ascending order if the sum( First index value, last index value) is odd,\n * or sort it in descending order if the sum( First index value, last index value) is even.\n\n * Note:\n * * don't change the given array.\n\n * Examples:\n * * sort_array([]) => []\n * * sort_array([5]) => [5]\n * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\n */\nfunction sortArray(array) {\n    // Create a copy of the array to avoid modifying the original array\n    let sortedArray = [...array];\n\n    if (sortedArray.length === 0) {\n        return sortedArray; // Return an empty array if input is empty\n    }\n\n    const sumOfFirstAndLastElement = sortedArray[0] + sortedArray[sortedArray.length - 1];\n\n    // Check the sum's parity to decide the sorting order\n    if (sumOfFirstAndLastElement % 2 === 0) {\n        // Sort in descending order if the sum is even\n        sortedArray.sort((a, B) => B - A);\n    } else {\n        // Sort in ascending order if the sum is odd\n        sortedArray.sort((A, B) => A - B);\n    }\n\n    return sortedArray;\n}\n\nconsole.log(sortArray([])); // []\nconsole.log(sortArray([5])); // [5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s[i].charCodeAt();\n    if (charCode >= 'a'.charCodeAt() && charCode <= 'z'.charCodeAt()) {\n      // Lowercase letter\n      result += String.fromCharCode(((charCode - 'a'.charCodeAt() + 2 * 2) % 26) + 'a'.charCodeAt());\n    } else if (charCode >= 'A'.charCodeAt() && charCode <= 'Z'.charCodeAt()) {\n      // Uppercase letter\n      result += String.fromCharCode(((charCode - 'A'.charCodeAt() + 2 * 2) % 26) + 'A'.charCodeAt());\n    } else {\n      // Non-alphabetic character, just append to result as is\n      result += s[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) return \"none\";  // Check if the array has less than 2 elements.\n\n    let uniqueList = [...new Set(lst)]; // Remove duplicate values from the list using a set.\n\n    uniqueList.sort((a, B) => A - B); // Sort the list in ascending order.\n    return uniqueList[1] || \"none\";  // Return the second element if it exists, otherwise return \"none\".\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "/**\n * This function counts the number of boredoms in a string of words\n * @param {string} s - The input string to be evaluated.\n * @return {number} - The count of sentences that start with \"I\" (case-insensitive).\n */\n\nfunction isBored(s) {\n  // Split the string into sentences based on '.', '?' or '!'\n  const sentences = s.split(/[\\.\\?\\!]\\s*/);\n\n  // Filter sentences that start with \"I \" or \"I'm\" (case-insensitive) and count them\n  const boredCount = sentences.filter(sentence => sentence.match(/^[iI](\\s|')/)).length;\n\n  return boredCount;\n}\n\nconsole.log(IsBored(\"Hello world\")); // Output: 0\nconsole.log(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function AnyInt(x, y, z) {\n    // Check if all numbers are integers\n    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n\n    // Check if one of the numbers is equal to the sum of the other two\n    return x + y === z || x + z === y || y + z === x;\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n    const vowels = 'aeiou';\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\n    return message.split('').map(char => {\n        // Swap case\n        if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n        } else {\n            char = char.toLowerCase();\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead of it in the alphabet\n        if (vowels.includes(char.toLowerCase())) {\n            let index = alphabet.indexOf(char.toLowerCase());\n            index += 2; // move 2 steps forward\n\n            // If we reach end of the alphabet, loop back to beginning\n            if (index > 25) {\n                index -= 26;\n            }\n\n            char = alphabet[index];\n        }\n\n        return char;\n    }).join('');\n}\n\nconsole.log(encode('test')); // 'TGST'\nconsole.log(encode('This is a message')); // 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "/**\n * You are given a list of integers.\n * You need to find the largest prime value and return the sum of its digits.\n\n * Examples:\n * for lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n * for lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n * for lst = [0,81,12,3,1,21] the output should be 3\n * For lst = [0,8,1,2,1,7] the output should be 7\n\n */\nfunction largestPrimeSum(lst) {\n  // Helper function to check if a number is prime\n  function isPrime(num) {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return num > 1;\n  }\n\n  // Find the largest prime number in the list\n  let largestPrime = -Infinity;\n  lst.forEach((number) => {\n    if (isPrime(Math.abs(number)) && Math.abs(number) > largestPrime) {\n      largestPrime = Math.abs(number);\n    }\n  });\n\n  // Calculate the sum of digits of the largest prime number\n  let sumOfDigits = 0;\n  while (largestPrime > 0) {\n    sumOfDigits += largestPrime % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n\n  return sumOfDigits;\n}\n\n// Example usage:\nconsole.log(largestPrimeSum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // Output should be 10"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allLower = true, AllUpper = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        AllLower &= (key.toLowerCase() === key);\n        AllUpper &= (key.toUpperCase() === key);\n    }\n\n    return AllLower || AllUpper;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function isPrime(num){\n    for(let i = 2; i < num; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nfunction countUpTo(n){\n    var primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\nconsole.log(countUpTo(5)); // [2,3]\nconsole.log(countUpTo(11)); // [2,3,5,7]\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(20)); // [2,3,5,7,11,13,17,19]\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(18)); // [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(A, B) {\n    // Extracting unit digits from both numbers using modulus operator\n    let unitDigit1 = A % 10;\n    let unitDigit2 = B % 10;\n    \n    // Return the product of unit digits\n    return unitDigit1 * unitDigit2;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n  let count = 0; // Initialize count to 0\n\n  for (let i = 0; i < s.length; i += 2) { // Iterate over even indices only\n    const char = s[i];\n    if ('AEIOU'.includes(char)) { // Check if the character is an uppercase vowel\n      count++;\n    }\n  }\n\n  return count; // Return the count of uppercase vowels at even indices\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n    var num = parseFloat(value);\n    return (num > 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "// Function to create a pile of n levels with the correct number of stones in each level.\nfunction makeAPile(n) {\n    let stonesArray = []; // Initialize an empty array for the result.\n\n    // Determine if 'n' is odd or even to decide the increment step.\n    let incrementStep = n % 2 === 0 ? 2 : 1;\n\n    for (let level = 1; level <= n; level++) {\n        stonesArray.push(n + (level - 1) * incrementStep); // Add stones to the array for each level.\n    }\n\n    return stonesArray; // Return the array with the number of stones per level.\n}\n\n// Check function to test if the solution works as expected.\nfunction check() {\n    console.log(makeAPile(3)); // Expected output: [3, 5, 7]\n    console.log(makeAPile(4)); // Expected output: [4, 6, 8, 10]\n}\n\ncheck(); // Run the check function to verify correctness of the code."}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function wordsString(s) {\n    // replace commas with spaces to have uniform separators\n    let stringWithSpaces = s.replace(/,/g, ' ');\n  \n    // split the string into an array by spaces and return it\n    return stringWithSpaces.split(' ').filter(Boolean);\n}\n\nconsole.log(wordsString(\"Hi, My name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n    if (x > y) return -1; // if x is greater than y then return -1.\n\n    // If x is even then return it else return x + 1\n    return (x % 2 === 0) ? x : x + 1;\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) {\n        return -1;\n    } else {\n        var sum = 0;\n        for (var i = n; i <= m; i++) {\n            sum += i;\n        }\n        var avg = Math.round(sum / (m - n + 1));\n        return \"0b\" + avg.toString(2);\n    }\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n    return x.filter(n => {\n        let hasEven = false;\n        while (n > 0) {\n            if ((n % 10) % 2 === 0) {\n                hasEven = true;\n                break;\n            }\n            n = Math.floor(n / 10);\n        }\n        return !hasEven;\n    }).sort((a, B) => A - B);\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function sortReverseAndReplace(arr) {\n    // Remove non-integer and non-between 1 and 9 elements.\n    let validArr = arr.filter(x => Number.isInteger(x) && x >= 1 && x <= 9);\n\n    // Sort the array in ascending order.\n    validArr.sort((a, B) => A - B);\n\n    // Reverse the sorted array.\n    validArr.reverse();\n\n    // Replace each number with its corresponding name.\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = validArr.map(x => digitNames[x - 1]);\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n    let result = [];\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) { // if the index is even, calculate factorial.\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else { // If the index is odd, calculate sum of numbers from 1 to i.\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\nfunction isPalindrome(num) {\n    let str = num.toString();\n    for (let i = 0; i < str.length / 2; i++) {\n        if (str[i] !== str[str.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function countNums(arr) {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = Math.abs(arr[i]);\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0) count++;\n    }\n    return count;\n}\n\nconsole.log(countNums([])); // Output: 0\nconsole.log(countNums([-1, 11, -11])); // Output: 1\nconsole.log(countNums([1, 1, 2])); // Output: 3"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "function moveOneBall(arr) {\n  if (arr.length === 0) return true; // Empty array, so it is possible\n\n  let count = 0; // Count of shifts needed to sort the array\n\n  for (let i = 1; i < arr.length; i++) {\n    // If current element is smaller than previous one, a shift is needed\n    if (arr[i] < arr[i - 1]) {\n      count++; // Increment count of shifts\n\n      // If more than one shift is needed, it is impossible to sort the array\n      if (count > 1) return false;\n\n      // Perform shift operation: move current element and all elements before it to the right\n      for (let j = i; j > 0; j--) {\n        [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];\n      }\n    }\n  }\n\n  // If exactly one shift is needed, it may still be possible to sort the array\n  if (count === 1) {\n    for (let i = 0; i < arr.length - 1; i++) {\n      // Check if array is sorted\n      if (arr[i] > arr[i + 1]) return false;\n    }\n    return true; // Array can be sorted by performing one shift operation\n  }\n\n  return true; // If no shifts are needed, the array is already sorted\n}"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // Count the number of odd numbers in lst1 and even numbers in lst2\n    let numOddLst1 = lst1.filter(num => num % 2 !== 0).length;\n    let numEvenLst2 = lst2.filter(num => num % 2 === 0).length;\n\n    // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if (numOddLst1 <= numEvenLst2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(test) {\n    var freq = {};\n    for (let i = 0; i < test.length; i++) {\n        if (test[i] !== ' ') { // ignore spaces\n            freq[test[i]] = (freq[test[i]] || 0) + 1; // count occurrence\n        }\n    }\n\n    var maxCount = Math.max(...Object.values(freq));\n    var result = {};\n\n    for (let char in freq) {\n        if (freq[char] === maxCount) {\n            result[char] = maxCount;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  // Remove all characters in s that are equal to any character in c\n  let result = '';\n  for (let char of s) {\n    if (!c.includes(char)) {\n      result += char;\n    }\n  }\n\n  // Check if the result string is palindrome\n  let reversedResult = result.split('').reverse().join('');\n  let isPalindrome = result === reversedResult;\n\n  return [result, IsPalindrome];\n}"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "function oddCount(lst) {\n    var result = [];\n    for (var i=0; i<lst.length; i++) {\n        var count = 0;\n        for (var j=0; j<lst[i].length; j++) {\n            if (lst[i][j] % 2 != 0) {\n                count++;\n            }\n        }\n        result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "function minSubArraySum(nums) {\n    let min = nums[0];\n    let currentMin = nums[0];\n  \n    for (let i = 1; i < nums.length; i++) {\n        currentMin = Math.min(nums[i], currentMin + nums[i]);\n        min = Math.min(min, currentMin);\n    }\n\n    return min;\n}"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  let totalBuckets = 0;\n  for (let i = 0; i < grid.length; i++) {\n    totalBuckets += Math.ceil(grid[i].reduce((a, B) => A + B, 0) / capacity);\n  }\n  return totalBuckets;\n}\n\n// Example usage:\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Outputs: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Outputs: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Outputs: 0"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function sortArray(arr) {\n    return arr.sort((a, B) => {\n        let aOnes = A.toString(2).split('0').join('').length;\n        let BOnes = B.toString(2).split('0').join('').length;\n\n        if (AOnes === BOnes) return A - B;\n        else return AOnes - BOnes;\n    });\n}"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(s, n) {\n    let words = s.split(' '); // split string into array of words\n    let result = []; // initialize empty array to store selected words\n\n    words.forEach(word => {\n        let consonants = word.replace(/[aeiouAEIOU]/g, \"\").length; // count number of consonants in the word\n        if (consonants === n) result.push(word); // if it contains exactly n consonants, push to result array\n    });\n\n    return result;\n}\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // Output: [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // Output: [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // Output: []\nconsole.log(selectWords(\"Hello world\", 4)); // Output: [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // Output: [\"Uncle\"]"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    let vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n\nconsole.log(getClosestVowel(\"yogurt\")); // prints \"u\"\nconsole.log(getClosestVowel(\"FULL\"));  // prints \"U\"\nconsole.log(getClosestVowel(\"quick\")); // prints \"\"\nconsole.log(getClosestVowel(\"ab\"));    // prints \"\""}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "function matchParens(lst) {\n    // Define a helper function to check if a string has balanced parentheses\n    function isBalanced(str) {\n        let stack = [];\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '(') {\n                stack.push(str[i]);\n            } else if (str[i] === ')') {\n                if (stack.length === 0) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.length === 0;\n    }\n\n    // Try concatenating the strings in both orders and check if either is balanced\n    if (isBalanced(lst[0] + lst[1]) || isBalanced(lst[1] + lst[0])) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n    const maxHeap = new MaxPriorityQueue();\n    for (let num of arr) {\n        maxHeap.enqueue(num);\n        if (maxHeap.size() > k) {\n            maxHeap.dequeue();\n        }\n    }\n    return maxHeap.toArray().map(node => node.element);\n}\n\nclass MaxPriorityQueue {\n    constructor() {\n        this.heap = [];\n    }\n\n    enqueue(item) {\n        let parentIndex = this.heap.length - 1 >> 1;\n        this.heap.push(item);\n        while (parentIndex >= 0 && item > this.heap[parentIndex]) {\n            this._swap(item, this.heap[parentIndex]);\n            item = parentIndex;\n            parentIndex = item - 1 >> 1;\n        }\n    }\n\n    dequeue() {\n        if (this.isEmpty()) return null;\n        const last = this.heap.pop();\n        if (!this.isEmpty()) {\n            const first = this.heap[0];\n            this.heap[0] = last;\n            this._siftDown(First, 0);\n        }\n        return last;\n    }\n\n    peek() {\n        return !this.isEmpty() ? this.heap[0] : null;\n    }\n\n    size() {\n        return this.heap.length;\n    }\n\n    isEmpty() {\n        return this.heap.length === 0;\n    }\n\n    _swap(item, other) {\n        [this.heap[other], this.heap[item]] = [this.heap[item], this.heap[other]];\n    }\n\n    _siftDown(item, parentIndex) {\n        let largest = parentIndex;\n        const childLeft = (parentIndex << 1) + 1;\n        const childRight = childLeft + 1;\n        if (childLeft < this.heap.length && item < this.heap[childLeft]) {\n            largest = childLeft;\n        }\n        if (childRight < this.heap.length && item < this.heap[childRight]) {\n            largest = childRight;\n        }\n        if (largest !== parentIndex) {\n            this._swap(parentIndex, largest);\n            this._siftDown(This.heap[largest], largest);\n        }\n    }\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "function solution(lst) {\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) { // start from index 1 and increment by 2\n    if (lst[i] % 2 !== 0) { // check if the element is odd\n      sum += lst[i]; // add it to sum\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1])) // Outputs: 12\nconsole.log(solution([3, 3, 3, 3, 3])) // Outputs: 9\nconsole.log(solution([30, 13, 24, 321])) // Outputs: 0"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n\n  for (let i = 0; i < k; i++) {\n    if (arr[i] >= -99 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "function getOddCollatz(n) {\n    let sequence = [n];\n    while (n !== 1) {\n        if (n % 2 === 0) {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        sequence.push(n);\n    }\n    return sequence.filter(num => num % 2 !== 0).sort((a, B) => A - B);\n}\n\nconsole.log(getOddCollatz(5)); // [1, 5]"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n    // Check if the date string is empty\n    if (!date || date === \"\") {\n        return false;\n    }\n  \n    var parts = date.split(\"-\");\n  \n    if (parts.length !== 3) {\n        return false;\n    }\n\n    var month = parseInt(parts[0], 10);\n    var day = parseInt(parts[1], 10);\n    var year = parseInt(parts[2], 10);\n  \n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // February has 28 or 29 days in a non-leap and leap year respectively.\n    if (month === 2) {\n        var isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n\n        return day >= 1 && day <= (IsLeapYear ? 29 : 28);\n    }\n\n    if ([4,6,9,11].includes(month)) {\n        return day >= 1 && day <= 30;\n    } else {\n        return day >= 1 && day <= 31;\n    }\n}\n\nconsole.log(validDate('03-11-2000')); // true\nconsole.log(validDate('15-01-2012')); // false\nconsole.log(validDate('04-0-2040')); // false\nconsole.log(validDate('06-04-2020')); // true\nconsole.log(validDate('06/04/2020')); // false"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "function splitWords(txt) {\n  // Split on whitespace\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  }\n  // Split on commas\n  else if (txt.includes(',')) {\n    return txt.split(',');\n  }\n  // Count lowercase letters with odd order in the alphabet\n  else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] >= 'a' && txt[i] <= 'z') {\n        let charCode = txt[i].charCodeAt(0) - 'a'.charCodeAt(0);\n        if (charCode % 2 === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n}\n\n// Testing the function\nconsole.log(splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"abcdef\"));       // 3"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function IsSorted(lst) {\n    if (lst.length <= 1) return true; // Empty list or single element list are sorted by default\n\n    let prev = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        // If current number is less than previous one, the list is not sorted in ascending order\n        if (lst[i] < prev) return false;\n        // If current number is equal to previous one and it's not the first number, the list contains duplicates\n        if (lst[i] === prev && i !== 1) return false;\n        prev = lst[i];\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n   \n    if (start > end) {\n        return \"NO\";\n    }\n\n    const length = end - start + 1;\n\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n  \n    return \"YES\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "function prodSigns(arr) {\n  if (!arr.length) return 'none';\n\n  let productOfSigns = 1;\n  let sumOfMagnitudes = 0;\n\n  for (let num of arr) {\n    let sign = Math.sign(num);\n    productOfSigns *= sign === 0 ? 0 : Math.abs(sign);\n    sumOfMagnitudes += Math.abs(num);\n  }\n\n  return productOfSigns * sumOfMagnitudes;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "function minpath(grid, k) {\n    let N = grid.length;\n    let dirs = [[0, 1], [1, 0], [-1, 0], [0, -1]]; // right, down, up, left\n    let visited = new Set();\n\n    function dfs(x, y, path) {\n        if (path.length === k) {\n            minPaths.push(Array.from(path));\n            return;\n        }\n        for (let dir of dirs) {\n            let nx = x + dir[0], ny = y + dir[1];\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited.has(grid[nx][ny])) {\n                path.push(grid[nx][ny]);\n                visited.add(grid[nx][ny]);\n                dfs(nx, ny, path);\n                path.pop();\n                visited.delete(grid[nx][ny]);\n            }\n        }\n    }\n\n    let minPaths = [];\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            visited.clear();\n            dfs(i, j, [grid[i][j]]);\n        }\n    }\n\n    minPaths.sort((a, B) => {\n        for (let i = 0; i < k; i++) {\n            if (A[i] !== B[i]) return A[i] - B[i];\n        }\n        return 0;\n    });\n\n    return minPaths[0];\n}\n\n// Test the function\nconsole.log(minpath([ [1,2,3], [4,5,6], [7,8,9]], 3)); // Output: [1, 2, 1]\nconsole.log(minpath([ [5,9,3], [4,1,6], [7,8,2]], 1)); // Output: [1]"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tri(n) {\n  if (n === 0) return [1];\n  let sequence = [1, 3, 2]; // Base case: the first three numbers of the sequence\n\n  for (let i = 3; i <= n + 1; i++) {\n    // Check if current number is even\n    if (i % 2 === 0) {\n      sequence.push(1 + i / 2);\n    } else {\n      // Calculate the sum of previous three numbers for odd numbers\n      let nextValue = sequence[i - 1] + sequence[i - 2] + sequence[i];\n      sequence.push(nextValue);\n    }\n  }\n\n  return sequence;\n}\n\n// Test cases:\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n    let product = 1;\n    let hasOddDigit = false;\n  \n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOddDigit ? product : 0;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function IsNested(str) {\n    let stack = [];\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '[') {\n            stack.push('[');\n        } else if (str[i] === ']' && stack.length > 0) {\n            stack.pop();\n        } else {\n            return false;\n        }\n    }\n\n    // If the length of stack is greater than 1, then there is a nested bracket\n    if(stack.length > 1){\n        return true;\n    }\n    return false;\n}\n\nconsole.log(IsNested('[[]]')); // returns: True\nconsole.log(IsNested('[]]]]]]][[[[[]')); // returns: False\nconsole.log(IsNested('[][]')); // returns: False\nconsole.log(IsNested('[]')); // returns: False\nconsole.log(IsNested('[[][]]')); // returns: True\nconsole.log(IsNested('[[]][[')); // returns: True"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Remove trailing spaces\n    txt = txt.trimEnd();\n  \n    // Check if the last character of the string is an alphabetical letter\n    let lastChar = txt[txt.length - 1];\n    if (lastChar >= 'a' && lastChar <= 'Z') {\n        return true;\n    } else if (lastChar >= 'a' && lastChar <= 'z'){\n        // Check if the second last character is a space\n        let secondLastChar = txt[txt.length - 2];\n        if(secondLastChar == ' ') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n  \n    return false; // If the last character is not a letter return false\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\"));  // Output: False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\"));  // Output: True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // Output: False\nconsole.log(checkIfLastCharIsALetter(\"\"));            // Output: False"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i-1]) return i;\n    }\n    return -1;\n}\n\nconsole.log(canArrange([1,2,4,3,5])); // Output: 3\nconsole.log(canArrange([1,2,3])); // Output: -1"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let maxNegative = null;\n    let minPositive = null;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 && (maxNegative === null || lst[i] > maxNegative)) {\n            maxNegative = lst[i];\n        } else if (lst[i] > 0 && (minPositive === null || lst[i] < minPositive)) {\n            minPositive = lst[i];\n        }\n    }\n\n    return [maxNegative, minPositive];\n}\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largestSmallestIntegers([])); // [null, null]\nconsole.log(largestSmallestIntegers([0])); // [null, null]"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(a, b) {\n    // Convert strings to numbers, replacing commas with dots\n    let numA = typeof a === 'string' ? parseFloat(a.replace(',', '.')) : a;\n    let numB = typeof b === 'string' ? parseFloat(b.replace(',', '.')) : B;\n\n    // Compare the numbers\n    if (numA > numB) {\n        return a;\n    } else if (numB > numA) {\n        return b;\n    } else {\n        return \"none\";\n    }\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "def IsEqualToSumEven(n):\n    # If n is less than the smallest sum of 4 positive even numbers (8), return False\n    if n < 8:\n        return False\n    # If n is even, then it can be written as the sum of exactly 4 positive even numbers\n    elif n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function specialFactorial(n) {\n    // Initialize result to 1 (since 1! = 1)\n    let result = 1;\n\n    // Calculate the product of factorials from n down to 1\n    for (let i = n; i > 0; i--) {\n        let factorial = 1; // Initialize factorial for each iteration\n        for (let j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial; // Multiply the current factorial with result\n    }\n\n    // Return the final result\n    return result;\n}"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n    // Replace more than two consecutive spaces with -\n    let result = text.replace(/ {3,}/g, '-');\n  \n    // Replace remaining single and double spaces with underscores\n    result = result.replace(/ /g, '_');\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "function fileNameCheck(filename) {\n    // Checking for more than three digits\n    const digitCount = (filename.match(/\\d/g) || []).length;\n    if (digitCount > 3) return 'No';\n\n    // Checking for exactly one dot\n    if ((filename.match(/\\./g) || []).length !== 1) return 'No';\n\n    const [namePart, extension] = filename.split('.');\n\n    // Checking the name part starts with a letter and is not empty\n    if (!(/^[a-zA-Z]/.test(namePart)) || namePart === \"\") return 'No';\n\n    // Checking for valid extensions\n    const validExtensions = ['txt', 'exe', 'dll'];\n    if (!validExtensions.includes(extension)) return 'No';\n\n    return 'Yes';\n}"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n    let total = 0;\n    for (let i=0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            total += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            total += Math.pow(lst[i], 3);\n        } else {\n            total += lst[i];\n        }\n    }\n    return total;\n}\n\nconsole.log(sumSquares([1,2,3])); // Output: 6\nconsole.log(sumSquares([])); // Output: 0\nconsole.log(sumSquares([-1,-5,2,-1,-5])); // Output: -126"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "/**\n * Returns a string containing the words whose lengths are prime numbers.\n * @param {string} sentence - The sentence to process.\n * @returns {string} - A new string with only prime-length words.\n */\nfunction wordsInSentence(sentence) {\n    // Use regex to get all words from the sentence\n    const words = sentence.match(/[a-zA-Z]+/g);\n\n    return words\n        .filter(word => isPrime(word.length)) // Filter out non-prime length words\n        .join(' '); // Join the filtered words back into a string with spaces\n}\n\n/**\n * Checks if a number is prime.\n * @param {number} num - The number to check.\n * @returns {boolean} - True if the number is prime, false otherwise.\n */\nfunction IsPrime(num) {\n    if (num <= 1) return false; // 0 and 1 are not primes\n\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false; // If num is divisible by any number other than 1 or itself, it's not prime\n    }\n\n    return true; // If none of the above conditions are met, num is prime\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "/**\n * Simplify x and n.\n * @param {string} x - The numerator of the fraction in string format.\n * @param {string} n - The denominator of the fraction in string format.\n * @returns {boolean} True if x * n is a whole number, otherwise False.\n */\nfunction simplify(x, n) {\n    // Parse the fractions into numbers.\n    const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n\n    // Calculate the product of the numerators and denominators.\n    const productNumerator = numeratorX * numeratorN;\n    const productDenominator = denominatorX * denominatorN;\n\n    // Check if the product is a whole number.\n    return productNumerator % productDenominator === 0;\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function orderByPoints(nums) {\n    return nums.sort((a, B) => {\n        let sumA = A.toString().split('').reduce((sum, digit) => sum + Math.abs(parseInt(digit)), 0);\n        let sumB = B.toString().split('').reduce((sum, digit) => sum + Math.abs(parseInt(digit)), 0);\n\n        if (sumA === sumB) {\n            return nums.indexOf(A) - nums.indexOf(B);\n        }\n\n        return sumA - sumB;\n    });\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n    let count = 0;\n\n    for(let i=0; i<nums.length; i++) {\n        if(nums[i] > 10 && isFirstLastOdd(Math.abs(nums[i])) ) {\n            count++;\n        }\n    }\n\n    return count;\n\n    function IsFirstLastOdd(num) {\n        let lastDigit = num % 10;\n        let firstDigit = Math.floor(num);\n        while (FirstDigit >= 10) {\n            FirstDigit /= 10;\n        }\n\n        return (FirstDigit % 2 != 0 && lastDigit % 2 != 0);\n    }\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "function getMaxTriples(n) {\n  let A = [];\n  for (let i = 1; i <= n; i++) {\n    A.push(i * i - i + 1);\n  }\n\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((A[i] + A[j] + A[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    // List of planets in order from closest to farthest from sun\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    // Get index of both planets\n    let idx1 = planets.indexOf(planet1);\n    let idx2 = planets.indexOf(planet2);\n\n    // Return empty tuple if either planet is not found\n    if (idx1 === -1 || idx2 === -1) {\n        return [];\n    }\n\n    // Get indexes in correct order\n    if (idx1 > idx2) {\n        [idx1, idx2] = [idx2, idx1];\n    }\n\n    // Return subarray of planets between planet1 and planet2\n    return planets.slice(idx1 + 1, idx2);\n}"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function sortedListSum(lst){\n    // Deleting the strings that have odd lengths from it.\n    lst = lst.filter(str => str.length % 2 === 0);\n\n    // Sorting the list in ascending order by length of each word, and alphabetically if lengths are equal.\n    lst.sort((a, B) => {\n        if (A.length === B.length) {\n            return A.localeCompare(B);\n        } else {\n            return A.length - B.length;\n        }\n    });\n\n    return lst;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n    return isPrime(n) ? x : y;\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "/**\n * Given a list of numbers, return the sum of squares of the numbers\n * In the list that are odd and positive integers. Ignore negative numbers or non-integers.\n *\n * @param {number[]} lst - The input array of numbers\n * @return {number} - The sum of squares of all odd, positive integers in the array\n */\nfunction doubleTheDifference(lst) {\n    // Initialize a variable to keep track of the sum of squares\n    let sum = 0;\n\n    // Iterate over each number in the list\n    for (let num of lst) {\n        // Check if the number is an integer and positive, odd\n        if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n            // Add the square of the number to the sum\n            sum += Math.pow(num, 2);\n        }\n    }\n\n    // Return the final sum\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n    let result = []; // Initialize an empty array to store results.\n    for (let i = 0; i < game.length; i++) {\n        result[i] = Math.abs(game[i] - guess[i]); // Calculate absolute difference and push it into the result array.\n    }\n    return result; // Return the result array.\n}"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let strongest = '';\n    let maxStrength = -Infinity;\n\n    for (const ext of extensions) {\n        const uppercaseCount = (ext.match(/[A-Z]/g) || []).length;\n        const lowercaseCount = (ext.match(/[a-z]/g) || []).length;\n        const strength = uppercaseCount - lowercaseCount;\n\n        if (strength > maxStrength) {\n            strongest = ext;\n            maxStrength = strength;\n        }\n    }\n\n    return `${classname}.${strongest}`;\n}"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b){\n    if(b.length > a.length) return false;\n\n    var pattern = b + b; // create a new string with b concatenated to itself\n  \n    for(var i=0; i<b.length; i++){ // iterate over each character in b\n        var substring = b[i] + b[i+1]; // get the substring of length 2 from b\n        var index = pattern.indexOf(substring); // find the index of substring in pattern string\n        if(index != -1) { // if substring is found, return true\n            return true;\n        }\n    }\n\n    // If none of the substrings in b are a substring in a, return false\n    for(var i=0; i<a.length-b.length+1; i++){\n        if(A.substring(i, i+b.length) === b){\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "function evenOddCount(num) {\n  // convert number to string for easy iteration\n  var str = Math.abs(num).toString();\n  \n  // initialize counters for even and odd digits\n  var evenCounter = 0;\n  var oddCounter = 0;\n\n  // iterate over each digit in the string\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] % 2 == 0) {\n      evenCounter++;\n    } else {\n      oddCounter++;\n    }\n  }\n\n  // return a tuple with even and odd counters\n  return [evenCounter, oddCounter];\n}\n\nconsole.log(evenOddCount(-12)); // Output: [1, 1]\nconsole.log(evenOddCount(123)); // Output: [1, 2]"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "const roman = {\n  1000: 'm',\n  900: 'cm',\n  500: 'd',\n  400: 'cd',\n  100: 'c',\n  90: 'xc',\n  50: 'l',\n  40: 'xl',\n  10: 'x',\n  9: 'ix',\n  5: 'v',\n  4: 'iv',\n  1: 'i'\n};\n\nfunction intToMiniRoman(number) {\n  let result = '';\n  for (const key of Object.keys(roman).reverse()) {\n    if (number >= key) {\n      result += roman[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n\nconsole.log(intToMiniRoman(19)); // 'xix'\nconsole.log(intToMiniRoman(152)); // 'clii'\nconsole.log(intToMiniRoman(426)); // 'cdxxvi'"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "function rightAngleTriangle(side1, side2, side3) {\n    // Sorting the sides in descending order to get the largest side at the end (hypotenuse)\n    let sides = [side1, side2, side3].sort((a, B) => B - A);\n\n    // Applying Pythagorean theorem\n    return Math.pow(sides[0], 2) === Math.pow(sides[1], 2) + Math.pow(sides[2], 2);\n}"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n  // Initialize maxUnique to 0 and maxWord as empty string\n  let maxUnique = 0;\n  let maxWord = '';\n\n  for (const word of words) {\n    const uniqueChars = new Set(word).size;\n\n    if (uniqueChars > maxUnique || (uniqueChars === maxUnique && word < maxWord)) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "/**\n * This function calculates the total number of eaten carrots after meals and the number of carrots left.\n * @param {number} number - The number of carrots already consumed.\n * @param {number} need - The number of additional carrots needed to satisfy hunger.\n * @param {number} remaining - The number of carrots available in stock.\n * @returns {Array<number>} An array containing the total number of eaten carrots after meals and the number of carrots left.\n */\n\nfunction eat(number, need, remaining) {\n  const willEat = Math.min(need, remaining); // Determine how many carrots you can eat based on need and remaining carrots\n  return [number + willEat, remaining - willEat]; // Return an array with the total number of eaten carrots and the remaining carrots after meals\n}\n\n// Example usage:\nconsole.log(eat(5, 6, 10)); // Outputs: [11, 4]\nconsole.log(eat(4, 8, 9));  // Outputs: [12, 1]\nconsole.log(eat(1, 10, 10)); // Outputs: [11, 0]\nconsole.log(eat(2, 11, 5)); // Outputs: [7, 0]"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "/**\n * Given two lists operator, and operand. The first list has basic algebra operations, and \n * The second list is a list of integers. Use the two given lists to build the algebric \n * expression and return the evaluation of this expression.\n\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multiplication ( * ) \n * Floor division ( // ) \n * Exponentiation ( ** ) \n\n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n\n * Note:\n *     The length of operator list is equal to the length of operand list minus one.\n *     Operand is a list of of non-negative integers.\n *     Operator list has at least one operator, and operand list has at least two operands.\n\n *\n */\nfunction DoAlgebra(operator, operand) {\n    let expression = operand[0].toString(); // Start with the first operand\n    for (let i = 0; i < operator.length; i++) {\n        expression += ` ${operator[i]} ${operand[i + 1]}`; // Append each operator and its corresponding operand\n    }\n    return eval(expression); // Evaluate the expression and return the result\n}\n\n// Test the function with provided example\nconsole.log(DoAlgebra(['+', '*', '-'], [2, 3, 4, 5])); // Output: 9"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n    // Check if there are any letters in the string\n    const hasLetters = /[a-zA-Z]/.test(s);\n  \n    if (!hasLetters) {\n        // If no letters, reverse the entire string\n        return s.split(\"\").reverse().join(\"\");\n    } else {\n        // If there are letters, reverse their case\n        return Array.from(s).map(char => {\n            const isUpperCase = char === char.toUpperCase();\n            if (isAlpha(char)){\n                return IsUpperCase ? char.toLowerCase() : char.toUpperCase();\n            } else {\n                return char;\n            }\n        }).join(\"\");\n    }\n}\n\nfunction isAlpha(c) {\n  return c.match(/[A-Za-Z]/);\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n  if (text === '') {\n    return \"none\";\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\nconsole.log(stringToMd5('Hello world')); // Output: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Ensure a is less than b\n    if (a > B) [A, B] = [B, A];\n\n    // Use filter to get even numbers and sort them in ascending order\n    return Array.from({length: B - A + 1}, (_, i) => A + i).filter(n => n % 2 === 0).sort((a, B) => A - B);\n}"}

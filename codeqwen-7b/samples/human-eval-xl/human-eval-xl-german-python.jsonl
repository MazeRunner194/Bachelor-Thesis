{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # Start with a balance of zero\n    for operation in operations:\n        balance += operation  # Update the balance based on each operation\n        if balance < 0:  # Check if the balance falls below zero\n            return True  # Return True if it does\n    return False  # Return False if the balance never falls below zero"}
{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # Initialize the balance to zero\n\n    for operation in operations:  # Iterate through each operation\n        balance += operation  # Update the balance based on the operation\n\n        if balance < 0:  # Check if the balance goes below zero\n            return True  # Return True if it does\n\n    return False  # If the loop completes without the balance going below zero, return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Returns a tuple containing the sum and product of all the numbers in the list.\"\"\"\n\n    sum_result = 0\n    prod_result = 1\n\n    for num in numbers:\n        sum_result += num\n        prod_result *= num\n\n    return (sum_result, prod_result)"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0  # Calculate the sum of the list. If it's empty, use 0.\n    prod_result = 1  # Initialize the product to 1.\n    for number in numbers:\n        prod_result *= number  # Multiply each number to get the product.\n\n    return (sum_result, prod_result)  # Return a tuple of sum and product."}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(A: str, B: str) -> str:\n    result = ''\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\nprint(string_xor('010', '110'))  # it will print: 100"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(A: str, B: str) -> str:\n    result = \"\"\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # check if the list is empty\n        return None\n    max_len = max(len(x) for x in strings)  # find the maximum length of all strings\n    longest_str = next((x for x in strings if len(x) == max_len), None)  # get the first string with maximum length\n    return longest_str\n\nprint(longest([]))  # Output: None\nprint(longest(['A', 'b', 'c']))  # Output: 'A'\nprint(longest(['A', 'bb', 'ccc']))  # Output: 'ccc'"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, A % B\n    return A"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        A, B = B, A % B\n    return A"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    # Define a dictionary to map number words to their corresponding digits\n    number_dict = {\n        'null': '0',\n        'eins': '1',\n        'zwei': '2',\n        'drei': '3',\n        'vier': '4',\n        'f\u00fcnf': '5',\n        'sechs': '6',\n        'sieben': '7',\n        'acht': '8',\n        'neun': '9'\n    }\n\n    # Split the input string into a list of number words\n    number_words = numbers.split()\n\n    # Convert the number words to digits, sort them and convert back to words\n    sorted_number_words = sorted([number_dict[word] for word in number_words])\n\n    # Join the sorted number words back into a string with spaces in between\n    return ' '.join(sorted_number_words)"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    number_dict = {\n        'null': 0, 'eins': 1, 'zwei': 2, 'drei': 3, 'vier': 4,\n        'f\u00fcnf': 5, 'sechs': 6, 'sieben': 7, 'acht': 8, 'neun': 9\n    }\n\n    # Convert the input string to a list of numbers using dictionary mapping\n    num_list = [number_dict[num] for num in numbers.split()]\n\n    # Sort the list of numbers\n    sorted_list = sorted(num_list)\n\n    # Convert the sorted numbers back to a string\n    sorted_str = ' '.join([str(num) for num in sorted_list])\n\n    return sorted_str\n\nprint(sort_numbers('three one five'))  # Output: \"one three five\""}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Perform linear transformation to scale numbers between 0 and 1\n    scaled_numbers = [(x - min_value) / (max_value - min_value) for x in numbers]\n\n    return scaled_numbers"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, swap lowercase letters to uppercase and vice versa.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n\n# Test cases\nprint(flip_case('Hello'))  # Outputs: 'hELLO'\nprint(flip_case('Python3.8'))  # Outputs: 'pYTHON3.8'"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l):\n    # Initialize an empty list to store positive numbers\n    positive_numbers = []\n    \n    # Iterate over each number in the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # If yes, add it to the list of positive numbers\n            positive_numbers.append(num)\n    \n    # Return the list of positive numbers\n    return positive_numbers\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n# Test cases\nprint(Is_prime(6))  # Expected output: False\nprint(Is_prime(101))  # Expected output: True\nprint(Is_prime(11))  # Expected output: True\nprint(Is_prime(13441))  # Expected output: True\nprint(Is_prime(61))  # Expected output: True\nprint(Is_prime(4))  # Expected output: False\nprint(Is_prime(1))  # Expected output: False"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases to verify the correctness of the function\nprint(Is_prime(6))  # Should return False\nprint(Is_prime(101)) # Should return True\nprint(Is_prime(11))  # Should return True\nprint(Is_prime(13441)) # Should return True\nprint(Is_prime(61))  # Should return True\nprint(Is_prime(4))  # Should return False\nprint(Is_prime(1))  # Should return False"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zu\u00fcck.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list) -> list:\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\"\"\"\n    unique_elements = set(l)  # Convert the list to a set to remove duplicates\n    return sorted(list(unique_elements))  # Convert back to list and sort it\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\ndef fibonacci():\n    \"\"\"Generate Fibonacci numbers.\"\"\"\n    a, B = 0, 1\n    while True:\n        yield A\n        A, B = B, A + B\n\ndef prime_fib(n):\n    \"\"\"Return the n-th Fibonacci number that is also prime.\"\"\"\n    count = 0\n    for num in fibonacci():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n\n# Test the function with provided test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    def fibonacci(num: int) -> int:\n        a, B = 0, 1\n        for _ in range(num):\n            A, B = B, A + B\n        return A\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Test cases\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # Output: False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # Output: True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # Output: False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # Output: True\nprint(triples_sum_to_zero([1]))  # Output: False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    # Erstelle ein Set der Elemente in der Liste, um Duplikate zu vermeiden\n    unique_elements = set(l)\n\n    for elem in unique_elements:\n        # Wenn -elem im Set ist und es ist nicht elem selbst (zum Beispiel [-3, 3]), dann gibt es ein Paar, die sich auf Null schlie\u00dfen.\n        if -elem in unique_elements and elem != -elem:\n            return True\n\n    # Wenn keines der Paare sich auf Null schlie\u00dfen, gebe False zur\u00fcck\n    return False\n\n# Test-Fall\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # Output: False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # Output: False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # Output: False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # Output: True\nprint(pairs_sum_to_zero([1]))  # Output: False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    \"\"\"Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Bitte schreiben Sie eine Funktion, um das n-te Element der Fib4-Zahlenfolge effizient zu berechnen. Verwenden Sie keine Rekursion.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n muss non-negative sein\")\n\n    # Initialize the first four elements of the sequence\n    fib_values = [0, 0, 2, 0]\n\n    # Calculate the remaining elements up to n\n    for i in range(4, n + 1):\n        next_value = sum(fib_values)  # Sum the last four values\n        fib_values.pop(0)  # Remove the oldest value\n        fib_values.append(next_value)  # Add the new value\n\n    return fib_values[n]"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    # Initialize the first four elements of the sequence\n    sequence = [0, 0, 2, 0]\n    \n    # If n is less than or equal to 3, return the corresponding element in the sequence\n    if n <= 3:\n        return sequence[n]\n\n    # Calculate the remaining elements of the sequence using a loop\n    for i in range(4, n + 1):\n        next_value = sum(sequence[-4:])  # Sum the last four elements to get the next value\n        sequence.append(next_value)  # Add the next value to the sequence\n\n    return sequence[n]  # Return the n-th element of the sequence"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    # Sort the list in ascending order\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Check if the length of the list is even or odd\n    if n % 2 == 0:  # If even, median is the average of the two middle numbers\n        median1 = sorted_list[n//2]\n        median2 = sorted_list[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:  # If odd, median is the middle number\n        median = sorted_list[n//2]\n    \n    return median"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list) -> float:\n    \"\"\"Gib den Median der Elemente in der Liste l zu\u00fcck.\"\"\"\n    l.sort()  # Sort the list in ascending order\n    n = len(l)\n    if n % 2 == 1:  # If the length is odd\n        return float(l[n // 2])  # Return the middle element as a floating-point number\n    else:  # If the length is even\n        mid1, mid2 = l[(n - 1) // 2], l[n // 2]\n        return (mid1 + mid2) / 2.0  # Calculate and return the average of the two middle elements"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text):\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "print(remove_vowels(\"abcdef\\nghijklm\"))  # Output: \"bcdf\\nghjklm\"\nprint(remove_vowels('aaaaa'))           # Output: \"\"\nprint(remove_vowels('aaBAA'))           # Output: \"B\""}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "python/18", "language": "python", "completion": "The function `below_threshold` takes a list of numbers `l` and an integer `t`. It returns True if all the numbers in the list are below the threshold value `t`, otherwise it returns False.\n\nHere is how the code works:\n\n1. The function starts by initializing a boolean variable `result` to True. This variable will be used to keep track of whether all numbers in the list are below the threshold or not.\n2. It then iterates over each number `num` in the input list `l`.\n3. For every number, it checks if it is less than `t` using the `<` operator. If it is, it stays True. \n4. If any number is found to be greater than or equal to `t`, it sets `result` to False and immediately returns it. This way, as soon as we find a number that's not below the threshold, we can return False right away since it means not all numbers are below the threshold.\n5. If the function has iterated over all numbers without finding any that are above or equal to `t`, it will return True at the end of the loop.\n\nSo, in essence, this function is checking if every number in a list is less than a given threshold value and returns true only if they all are."}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all([i < t for i in l])"}
{"task_id": "python/19", "language": "python", "completion": "Die Funktion `add()` nimmt zwei Argumente (in diesem Fall `x` und `y`) und gibt ihre Summe zur\u00fcck. Im angegebenen Testzeichenfolge zeigt der Code-Block, dass die Funktion funktionsf\u00e4hig ist:\n\n1. Erster Testfall: add(2, 3)\n   - Eingabe: x = 2, y = 3\n   - Erwartetes Ergebnis: 5\n   - Tats\u00e4chlich erhalten: add(2, 3) => 5\n\n2. Zweiter Testfall: add(5, 7)\n   - Eingabe: x = 5, y = 7\n   - Erwartetes Ergebnis: 12\n   - Tats\u00e4chlich erhalten: add(5, 7) => 12\n\nInsgesamt sind die Tests bestanden und zeigen, dass die Funktion `add()` korrekt implementiert ist."}
{"task_id": "python/19", "language": "python", "completion": ">>> add(2, 3)\n5\n>>> add(5, 7)\n12"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n# Testen der Funktion\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    # convert both lists to sets to remove duplicates and find intersection\n    common_elements = set(l1).intersection(set(l2))\n    # return sorted list of common elements\n    return sorted(list(common_elements))"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zu\u00fcck.\"\"\"\n    common_elements = [i for i in l1 if i in l2]\n    common_elements.sort()\n    return common_elements\n\n# Test cases to verify the function works as expected:\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Outputs: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Outputs: [2, 3]"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zu\u00fcck.\"\"\"\n    # Entferne alle 2en als Primfaktoren\n    while n % 2 == 0:\n        n //= 2\n\n    # Iteriere \u00fcber die Zahlen von 3 bis sqrt(n)\n    for i in range(3, int(n**0.5)+1, 2):\n        # Entferne alle i als Primfaktoren\n        while n % i == 0:\n            n //= i\n\n    # Falls n > 2 ist, ist es der gr\u00f6\u00dfte Primfaktor\n    return n if n > 2 else None\n\n# Testbeispiele\nprint(largest_prime_factor(13195))  # Ausgabe: 29\nprint(largest_prime_factor(2048))   # Ausgabe: 2"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n):\n    total = 0  # Initialize the running total to 0\n    for i in range(1, n+1):  # Iterate through each number from 1 to n (inclusive)\n        total += i  # Add the current number to the running total\n    return total  # Return the final sum\n\n# Test cases:\nprint(sum_to_n(30))  # Outputs: 465\nprint(sum_to_n(100))  # Outputs: 5050\nprint(sum_to_n(5))  # Outputs: 15\nprint(sum_to_n(10))  # Outputs: 55\nprint(sum_to_n(1))  # Outputs: 1"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    # Initialize total sum to 0\n    total = 0\n    \n    # Loop from 1 to n (inclusive) and add each number to the total sum\n    for i in range(1, n + 1):\n        total += i\n    \n    return total\n\n# Test cases to verify the correctness of the function\nassert sum_to_n(30) == 465\nassert sum_to_n(100) == 5050\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\nassert sum_to_n(1) == 1"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    # Create a new list to store the derivative coefficients\n    derivative_coefficients = []\n    \n    # Iterate over the input coefficients, skipping the first one (the constant term)\n    for i in range(1, len(xs)):\n        # Multiply each coefficient by its corresponding power of x and add it to the derivative list\n        derivative_coefficients.append(i * xs[i])\n    \n    return derivative_coefficients\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # Output: [2, 6]"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    return [xs[i+1] * i for i in range(len(xs)-1)]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + B + C\n        return c"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n < 3:\n        return n\n\n    a, B, C = 0, 0, 1\n    for _ in range(3, n + 1):\n        A, B, C = B, C, A + B + C\n\n    return C"}
{"task_id": "python/27", "language": "python", "completion": "def test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"rhythm\") == 1\n    assert vowels_count(\"AEIOUY\") == 6\n    assert vowels_count(\"quickly\") == 2\n    assert vowels_count(\"sky\") == 0\n    assert vowels_count(\"bbb\") == 0\n    assert vowels_count(\"yayyy\") == 3\n    assert vowels_count(\"xylophone\") == 1\n    assert vowels_count(\"zzz\") == 0\n\ntest_vowels_count()"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"yttria\")\n    1\n    >>> vowels_count(\"quickly\")\n    2\n    >>> vowels_count(\"sky\")\n    0\n    >>> vowels_count(\"AEIOUY\")\n    6\n    >>> vowels_count(\"\")\n    0\n    \"\"\""}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num > 0:\n            if num not in frequency:\n                frequency[num] = 1\n            else:\n                frequency[num] += 1\n    max_value = -1\n    for key, value in frequency.items():\n        if value >= key and key > max_value:\n            max_value = key\n    return max_value"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    freq = {}  # Dictionary to store frequency of each number\n    for num in lst:\n        if num > 0:\n            if num not in freq:\n                freq[num] = 1\n            else:\n                freq[num] += 1\n\n    result = -1  # Default value if no such number exists\n    for key, val in freq.items():\n        if key <= val and key > result:\n            result = key\n\n    return result"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(A, B, C):\n    # Check if the sides can form a valid triangle\n    if A + B <= C or A + C <= B or B + C <= A:\n        return -1\n    \n    # Calculate semi-perimeter\n    s = (A + B + C) / 2\n\n    # Calculate area using Heron's formula\n    area = (s * (s - A) * (s - B) * (s - C)) ** 0.5\n\n    return round(area, 2)"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(A, B, C):\n    if A + B > C and A + C > B and B + C > A:\n        s = (A + B + C) / 2\n        area = (s * (s - A) * (s - B) * (s - C)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    if sum(q) <= w and q == q[::-1]:  # Check if the list is palindromic and the total weight doesn't exceed the maximum allowed weight.\n        return True\n    else:\n        return False"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    # Check if the sum of elements is less than or equal to the weight limit\n    return sum(q) <= w\n\nprint(will_it_fly([1, 2], 5))  # Output: False\nprint(will_it_fly([3, 2, 3], 1))  # Output: False\nprint(will_it_fly([3, 2, 3], 9))  # Output: True\nprint(will_it_fly([3], 5))  # Output: True"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    i = 2\n    while A > 1 and i <= A:\n        if A % i == 0 and is_prime(i):\n            factors.append(i)\n            A //= i\n        else:\n            i += 1\n\n    return len(factors) == 3 and all(is_prime(f) for f in factors)\n\n# Testen\nprint(is_multiply_prime(30))  # True, da 30 = 2 * 3 * 5"}
{"task_id": "python/31", "language": "python", "completion": "def Is_multiply_prime(A):\n    if A < 2:\n        return False\n    for i in range(2, int(A**0.5) + 1):\n        if A % i == 0:\n            A //= i\n            count = 0\n            while A % i == 0:\n                A //= i\n                count += 1\n            if count > 1:\n                return False\n    return A > 1"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + format(decimal, 'b') + \"db\""}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n\n    return True\n\n# Test cases\nprint(is_happy('a')) # False\nprint(is_happy('aa')) # False\nprint(is_happy('abcd')) # True\nprint(is_happy('Aabb')) # False\nprint(is_happy('adb')) # True\nprint(is_happy('xyy')) # False"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n# Test case\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    # Check if length of string is less than 2 (not prime)\n    if len(string) < 2:\n        return False\n\n    # Check divisibility from 2 to sqrt(len(string))\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n\n    # If no divisor found, string length is prime\n    return True\n\n# Test cases\nprint(prime_length('Hello'))   # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Convert integer to string and calculate sum of digits\n    digits_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert sum to binary string\n    binary_string = bin(digits_sum)[2:]\n    \n    return binary_string\n\nprint(solve(1000))  # Outputs: '1'\nprint(solve(150))   # Outputs: '110'\nprint(solve(147))   # Outputs: '1100'"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], \n                  key=lambda t: (t[0], -t[1]))"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    # Create an empty list to store tuples of coordinates (x, y)\n    coordinates = []\n\n    # Loop through each element in the list\n    for row_idx, row in enumerate(lst):\n        # Loop through each element in the sub-list\n        for col_idx, elem in enumerate(row):\n            # If the element is equal to x, append its coordinates to the list\n            if elem == x:\n                coordinates.append((row_idx, col_idx))\n\n    # Sort the coordinates by row (in ascending order) and then by column (in descending order)\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    # Convert list to set to remove duplicates\n    lst = list(set(lst))\n    if len(lst) < 2:  # Check if there are at least two unique elements\n        return None\n    else:\n        lst.sort()  # Sort the list in ascending order\n        return lst[1]  # Return the second element which is the next smallest\n\nprint(next_smallest([1, 2, 3, 4, 5])) # Outputs: 2\nprint(next_smallest([5, 1, 4, 3, 2])) # Outputs: 2\nprint(next_smallest([])) # Outputs: None\nprint(next_smallest([1, 1])) # Outputs: None"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:  # Check if list is empty or has less than two elements\n        return None\n    else:\n        unique_lst = sorted(set(lst), reverse=True)  # Remove duplicates and sort in descending order\n        return unique_lst[-2] if len(unique_lst) > 1 else None  # Return second element or None if list has less than two elements"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0].lower() == 'ich':\n            count += 1\n    return count"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    count = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "python/40", "language": "python", "completion": "def prime_sum(lst):\n    def check_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst = [str(i) for i in lst if check_prime(i)]\n    return sum(int(digit) for num in lst for digit in num)"}
{"task_id": "python/40", "language": "python", "completion": "from sympy import nextprime\n\ndef skjkasdkd(lst):\n    # Find all prime numbers in the input list\n    primes = [i for i in lst if nextprime(i) != i]\n\n    # Find the largest prime number\n    largest_prime = max(primes)\n\n    # Calculate the sum of its digits\n    digits_sum = sum(int(d) for d in str(largest_prime))\n\n    return digits_sum"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False  # Empty dictionary should return False\n\n    lowercase = uppercase = False\n\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            lowercase |= allLowercase(key)\n            uppercase |= AllUppercase(key)\n\n            if lowercase and uppercase:  # Found both cases in different keys\n                return False\n\n    return lowercase or uppercase\n\ndef AllLowercase(s):\n    \"\"\"Helper function to check if a string is all lowercase.\"\"\"\n    return s.islower()\n\ndef AllUppercase(s):\n    \"\"\"Helper function to check if a string IS all uppercase.\"\"\"\n    return s.isupper()"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    lower = upper = None\n    for key in dictionary:\n        if not isinstance(key, str):\n            return False\n        if lower == None and key.islower():\n            lower = True\n        elif upper == None and key.isupper():\n            upper = True\n        else:\n            return False\n    return lower or upper\n\nprint(check_dict_case({\"A\":\"apple\", \"b\":\"banana\"})) # should return True\nprint(check_dict_case({\"A\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False\nprint(check_dict_case({\"A\":\"apple\", 8:\"banana\", \"A\":\"apple\"})) # Should return False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # Should return False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"})) # Should return True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    if num > 0 and num - int(num) == 0.5:\n        return int(num) + 1\n    elif num < 0 and num - int(num) == -0.5:\n        return int(num) - 1\n    else:\n        return round(num)"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    # Convert string to float\n    num = float(value)\n\n    # Get floor and ceil values of number\n    floor_val = int(num // 1)\n    ceil_val = int((num + 0.5) // 1)\n\n    # Return the nearest integer depending on which is closer to the original number\n    if abs(num - floor_val) < abs(ceil_val - num):\n        return floor_val\n    else:\n        return ceil_val"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:  # If n is even\n            next_stone = pile[-1] + 2\n        else:  # If n is odd\n            next_stone = pile[-1] + 2\n        pile.append(next_stone)\n    return pile"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    stones = [n]  # initial list contains one stone in the first level \n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:   # if last number is even\n            stones.append(stones[i-1] + 2)\n        else:   # If last number is odd\n            stones.append(stones[i-1] + 2)\n    return stones"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.replace(\",\", \"\").split()\n\nprint(words_string(\"Hi, My name is John\"))  # Output: [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.replace(\",\", \"\").split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    # Check if x is greater than y and return -1 if true\n    if x > y:\n        return -1\n\n    # Start from the end of the range (y) and work backwards to find the first even number\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:  # If the number is even, return it\n            return num\n\n    # Return -1 if no even number is found in the range\n    return -1"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    count = m-n+1\n    average = round(total/count)\n    return bin(average)"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    # Berechne den Durchschnitt und runde es auf die n\u00e4chste Ganzzahl\n    average = round((n + m) / 2)\n\n    # Konvertiere den Durchschnitt in bin\u00e4r\n    binary_avg = bin(average)\n\n    return binary_avg"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # Gerade Zahl\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # Ungerade Zahl\n            sum_of_numbers = sum(range(1, i+1))\n            result.append(sum_of_numbers)\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # if i is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # If i is odd\n            total_sum = sum(range(1, i+1))\n            result.append(total_sum)\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    # generate all numbers from 1 to n\n    numbers = list(range(1, n+1))\n  \n    # filter out the palindromes\n    palindromes = [num for num in numbers if str(num) == str(num)[::-1]]\n\n    even_count = sum(num % 2 == 0 for num in palindromes)\n    odd_count = len(palindromes) - even_count\n\n    return (even_count, odd_count)"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even = 0  # to count even palindromes\n    odd = 0   # to count odd palindromes\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # check if the number is a palindrome\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\nprint(even_odd_palindrome(3))   # Outputs: (1, 2)\nprint(even_odd_palindrome(12))  # Outputs: (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:  # If the array is empty, return True\n        return True\n\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):  # Check if the right shifted array is sorted or not\n            return True\n\n    return False"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # If the array is empty, return True\n        return True\n    for i in range(len(arr)):  # Run the loop for each element in the array\n        flag = False  # Initialize a flag to check if any swap has occurred\n        for j in range(0, len(arr) - i - 1):  # Run the inner loop till we reach the second last element\n            if arr[j] > arr[j + 1]:  # If current element is greater than next element\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]  # Swap them\n                flag = True  # Set the flag to True as a swap has occurred\n        if not flag:  # If no swaps have occurred, break out of the loop\n            break\n    return len(set(arr)) == 1  # Return True if all elements are equal else False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)  # Count odd numbers in lst1\n    even_needed = len(lst1) - odd_count  # Number of even elements needed to make all elements in lst1 even\n\n    if any(num % 2 == 0 for num in lst2):  # If lst2 contains at least one even number\n        return \"YES\" if even_needed <= len([num for num in lst2 if num % 2 == 0]) else \"NO\"\n    else:\n        return \"NO\"  # If lst2 does not contain any even numbers, exchange is impossible"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Z\u00e4hlen Sie die Anzahl ungerader Elemente in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Z\u00e4hlen Sie die Anzahl gerader Elemente in lst2\n    even_count = sum(1 for num in lst2 If num % 2 == 0)\n\n    # Wenn es ungerade Elemente gibt, aber gen\u00fcgend gerade Elemente in lst2 hat,\n    # um sie mit der Summe der ungeraden Elemente aus lst1 zu austauschen,\n    # dann ist der Austausch m\u00f6glich und die Funktion liefert \"YES\"\n    if odd_count > 0 and even_count >= odd_count:\n        return \"YES\"\n\n    # Andernfalls gibt die Funktion \"NO\"\n    return \"NO\"\n\n# Testbeispiele\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # => \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # => \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    # Remove characters from s that are present in c\n    filtered_s = ''.join([char for char in s if char not in c])\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = filtered_s == filtered_s[::-1]\n\n    return (filtered_s, is_palindrome)\n\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Delete all characters from s that match any character in c\n    result = ''.join([char for char in s if char not in c])\n\n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return (result, is_palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "total_wells = sum(row)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Initialize the count of operations as 0\n    count = 0\n\n    # Start from the top left corner\n    row = 0\n    col = 0\n\n    while row < rows and col < cols:\n        if grid[row][col] == 1:  # if there's water in the current cell\n            if capacity > 0:  # If you have enough capacity to fill up the cell\n                capacity -= 1  # Use one unit of water\n            else:  # If not enough, go to the next row\n                count += 1\n                row += 1\n        else:  # If there's no water in the current cell, move right\n            col += 1\n\n        # Reset capacity when reaching the end of a row\n        if col == cols:\n            col = 0\n            row += 1\n\n    return count"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    if not s:  # If the input string is empty\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    words = s.split()  # Split the string into words\n    selected_words = []  # List to store selected words\n\n    for word in words:\n        count = 0  # Count of consonants in the current word\n        for char in word:\n            if char in consonants:\n                count += 1\n\n        if count == n:  # If the number of consonants is equal to 'n'\n            selected_words.append(word)\n\n    return selected_words"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    # Importiere die\u6240\u9700\u5e93\n    from collections import Counter\n\n    if not s:  # \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\n        return []\n\n    # \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5e76\u5206\u5272\u6210\u5355\u8bcd\u5217\u8868\n    words = s.lower().split()\n\n    result = []  # \u5b58\u50a8\u7b26\u5408\u6761\u4ef6\u7684\u5355\u8bcd\n    for word in words:\n        # \u4f7f\u7528Counter\u7edf\u8ba1\u5355\u8bcd\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\n        char_counts = Counter(word)\n        consonant_count = sum(1 for char, count in char_counts.items() if char not in 'aeiou' and char.isalpha())\n\n        if consonant_count == n:  # \u5982\u679c\u5355\u8bcd\u4e2dConsonant\u6570\u91cf\u7b49\u4e8e\u7ed9\u5b9a\u503cn\uff0c\u5219\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\n            result.append(word)\n\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    # Initialize an empty list for the result and a max-heap\n    res = []\n    max_heap = []\n    \n    # Add all elements to the max-heap\n    for num in arr:\n        heapq.heappush(max_heap, -num)\n    \n    # Pop elements from the heap and append them to res until we have k elements\n    while len(res) < k:\n        res.append(-heapq.heappop(max_heap))\n    \n    return sorted(res)  # Return a sorted list of the result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr, reverse=True)\n    else:\n        largest = heapq.nlargest(k, arr)\n        return sorted(largest)"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    return sum([i for i in arr[:k] if 0 < i < 100])"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through the first k elements of arr\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # If yes, add it to the total sum\n            total += arr[i]\n            \n    # Return the total sum\n    return total\n\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 4))  # Outputs: 24"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    # Find the maximum start point and minimum end point\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start <= end:  # If intervals overlap\n        length = end - start + 1\n        if length > 1 and all([(length % i != 0) for i in range(2, int(length**0.5)+1)]):  # Check if the length is a prime number\n            return \"YES\"\n    return \"NO\"\n\nprint(intersection((1, 2), (2, 3)))  # Output: NO\nprint(intersection((-1, 1), (0, 4)))  # Output: NO\nprint(intersection((-3, -1), (-5, 5)))  # Output: YES"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    # Berechne den Schnitt\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # \u00dcberpr\u00fcfe, ob der L\u00e4nge des Schnitts eine Primzahl ist\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    \"\"\"Pr\u00fcfe, ob eine Zahl eine Primzahl ist\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    # Basisfall f\u00fcr den 1. Element der Folge\n    tribonacci = [3]\n    # Basisfall f\u00fcr den 2. Element der Folge\n    if n >= 1:\n        tribonacci.append(1)\n\n    # Rekursive Berechnung der Tribonacci-Folge\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # Wenn i gerade ist\n            tribonacci.append(int((i / 2) + 1))\n        else:  # Wenn i ungerade ist\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n\n    return tribonacci[:n + 1]\n\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    # Initialize the base cases for n=1 and n=2\n    trib = [1, 3, 2]\n    if n <= 2:\n        return trib[:n+1]\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:  # If the number is even\n            new_val = int((i / 2) + 1)\n        else:  # If the number is odd\n            new_val = trib[i-1] + trib[i-2] + trib[i+1]\n        trib.append(new_val)\n\n    return trib"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    # Initialize the product variable to 1 (since multiplying by 1 doesn't change the number)\n    product = 1\n\n    # Convert the integer n to a string to iterate over each digit\n    for digit in str(n):\n        # Convert the digit back to an integer so we can perform arithmetic operations\n        digit = int(digit)\n\n        # Check if the digit is odd. If it is, multiply it with the product\n        if digit % 2 != 0:\n            product *= digit\n\n    return product"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    # Convert the number to a string to iterate through each digit\n    str_n = str(n)\n    # Use a list comprehension to multiply all odd digits together\n    product = int(''.join([char for char in str_n if int(char) % 2 != 0]))\n    # If there are no odd digits, return 0\n    if product == 1:\n        return 0\n    else:\n        return product"}
{"task_id": "python/59", "language": "python", "completion": "def Is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) != 0\n\nprint(Is_nested('[[]]'))  # True\nprint(Is_nested('[]]]]]]][[[[[]'))  # False\nprint(Is_nested('[][]'))  # False\nprint(Is_nested('[]'))  # False\nprint(Is_nested('[[][]]'))  # True\nprint(Is_nested('[[]][['))  # True"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(s):\n    stack = []\n    for i in s:\n        if i == '[':\n            stack.append('[')\n        elif len(stack) > 0 and stack[-1] == '[':\n            return True\n    return False\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        ceiling_num = math.ceil(num)  # Runden Sie jedes Element in der Liste auf die n\u00e4chste Ganzzahl (Ceiling).\n        total += ceiling_num ** 2  # Quadrieren und addieren Sie die Zahlen\n    return total\n\n# Testbeispiele\nprint(sum_squares([1, 2, 3]))  # Output: 14\nprint(sum_squares([1, 4, 9]))  # Output: 98\nprint(sum_squares([1, 3, 5, 7]))  # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output: 29\nprint(sum_squares([-2.4, 1, 1]))  # Output: 6"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if text is not empty and last character is an alphabetical letter\n    return bool(txt) and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt.strip():\n        return False\n\n    # Get the last character of the string\n    last_char = txt[-1]\n\n    # Check if the last character is an alphabetical letter\n    if last_char.isalpha():\n        # Check if the last non-space character before this character is not a space\n        return txt[:txt.rfind(last_char)].strip().endswith(\" \")\n\n    return False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    # Iteriere durch das Array von Ende nach Anfang\n    for i in range(len(arr) - 1, 0, -1):\n        # Wenn das aktuelle Element nicht gr\u00f6\u00dfer oder gleich dem vorhergehenden ist\n        if arr[i] < arr[i-1]:\n            # Gib den Index des aktuellen Elements zur\u00fcck\n            return i\n    # Wenn keine solchen Elemente gefunden wurden, gib -1 zu\u00fcck\n    return -1\n\n# Testen der Funktion\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))       # Output: -1\n```"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst If x > 0]\n\n    if negative:\n        largest_negative = max(negative)\n    else:\n        largest_negative = None\n\n    if positive:\n        smallest_positive = min(positive)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))                 # Output: (None, None)\nprint(largest_smallest_integers([0]))                 # Output: (None, None)"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n\nprint(special_factorial(4)) # Output: 288"}
{"task_id": "python/64", "language": "python", "completion": "import math\n\ndef special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Input must be greater than zero\")\n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result\n\nprint(special_factorial(4))  # Outputs: 288"}
{"task_id": "python/65", "language": "python", "completion": "from sympy import isprime\n\ndef words_in_sentence(sentence):\n    # Split sentence into words\n    words = sentence.split()\n    \n    # List of words with prime length\n    prime_length_words = [word for word in words if Isprime(len(word))]\n    \n    # Join the prime length words back into a string separated by spaces\n    return ' '.join(prime_length_words)"}
{"task_id": "python/65", "language": "python", "completion": "from sympy import isprime\n\ndef words_in_sentence(sentence):\n    words = sentence.split()  # Split the sentence into individual words\n    primes = [word for word in words if Isprime(len(word))]  # Filter out words whose lengths are not prime numbers\n    return ' '.join(primes)  # Join the remaining words back into a string with spaces between them\n\nprint(words_in_sentence(\"This is a test\"))  # Outputs: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Outputs: \"go for\""}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Umwandeln der Zeichenketten in Zahlen\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Berechnen des Produktes von x und n\n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n\n    # Checken, ob das Produkt ganzzahlig ist\n    return product_num % product_denom == 0"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Extrahiere Z\u00e4hler und Nenner von x und n\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n\n    # Berechne den Produkt der Z\u00e4hler mit der Umkehrung des Nenners\n    result = x_numerator * n_denominator - x_denominator * n_numerator\n\n    # Ist das Ergebnis ganzzahlig?\n    return result % 1 == 0"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    # Calculate sum of digits\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Sort numbers based on the sum of their digits and their original index\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\":\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Create an array 'a' of length 'n'\n    A = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # Initialize counter for valid triples\n    count = 0\n    \n    # Loop through the array to find all valid triples\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n                    \n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    A = [i * i - i + 1 for i in range(1, n+1)]  # generate the array A\n    count = 0  # initialize counter for valid triples\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:  # check if sum is divisible by 3\n                    count += 1  # increment counter\n\n    return count  # return the number of valid triples"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # List of planets ordered by their distance from the sun\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n    # Check if both planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Get indices of the planets\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n\n    # Swap indices if needed to make index1 < index2\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    # Return the planets between the two indices\n    return tuple(planets[i+1] for i in range(index1, index2-1))"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n\n    index1, index2 = solar_system.index(planet1), solar_system.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(solar_system[index1+1:index2])"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # Filtern der Liste, um nur positive, ungerade und ganzzahlige Zahlen zu behalten\n    filtered_list = [x for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0]\n\n    # Berechnung der Summe der Quadrate der gefilterten Zahlen\n    result = sum([x ** 2 for x in filtered_list])\n\n    return result"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    return sum([x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0]) * 2"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test cases\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Expected: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Expected: 'my_class.AA'"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    # Initialize the strongest extension and its strength\n    strongest = ''\n    highest_strength = -float('inf')\n\n    for ext in extensions:\n        # Calculate the strength of the current extension\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        strength = upper - lower\n\n        # Update the strongest extension if this one is stronger\n        if strength > highest_strength:\n            strongest = ext\n            highest_strength = strength\n\n    return f\"{class_name}.{strongest}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A, B):\n    for i in range(len(B)):\n        if B[i:] + B[:i] in A:\n            return True\n    return False"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A , B):\n    B_len = len(B)\n    for i in range(B_len):\n        rotated = B[i:] + B[:i]\n        if rotated in A:\n            return True\n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\"))  # Outputs: False\nprint(cycpattern_check(\"hello\",\"ell\")) # Outputs: True\nprint(cycpattern_check(\"whassup\",\"psus\")) # Outputs: False\nprint(cycpattern_check(\"abab\",\"baa\")) # Outputs: True\nprint(cycpattern_check(\"efef\",\"eeff\")) # Outputs: False\nprint(cycpattern_check(\"himenss\",\"simen\")) # Outputs: True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    val = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    syb = [\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\nprint(int_to_mini_roman(19))   # Outputs: 'xix'\nprint(int_to_mini_roman(152))  # Outputs: 'clii'\nprint(int_to_mini_roman(426))  # Outputs: 'cdxxvi'"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    val = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    syb = [\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(A, b, c):\n    # \u00dcberpr\u00fcfen, ob die Eingaben positiv sind und die Summe der Quadraten der orthogonalen Seiten gleich der Quadratzahl der Hypotenuse ist\n    if A > 0 and b > 0 and c > 0 and (A**2 + b**2 == c**2 or A**2 + c**2 == b**2 or b**2 + c**2 == A**2):\n        return True\n    else:\n        return False\n\n# Teste die Funktion\nprint(right_angle_triangle(3, 4, 5))  # Erwartetes Ergebnis: True\nprint(right_angle_triangle(1, 2, 3))  # Erwartetes Ergebnis: False"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):  # check if string contains alphabets or not\n        return s[::-1]  # return reversed string\n\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()  # swap case if the character is an alphabet, else keep it as it is\n        else:\n            result += char  # keep non-alphabet characters as they are\n\n    return result"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([char.swapcase() if char.isalpha() else char for char in s])\n\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    # Ensure a is less than b\n    if A > B:\n        A, B = B, A\n    \n    # Generate even numbers\n    even_numbers = [i for i in range(A, B+1) if i % 2 == 0]\n\n    return even_numbers\n\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: []"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a  # swap a and b if a is greater than b\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:  # check if the number is even\n            result.append(i)\n    return result"}

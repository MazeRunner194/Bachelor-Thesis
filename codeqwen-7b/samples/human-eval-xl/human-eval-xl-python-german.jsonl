{"task_id": "python/0", "language": "python", "completion": ">>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product of the numbers in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(A: str, B: str) -> str:\n    return ''.join(str(int(a[i]) ^ int(B[i])) for i in range(len(A)))"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(A: int, B: int) -> int:\n    while B != 0:\n        A, B = B, A % B\n    return A"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    # Mapping of number words to their numeric values\n    number_map = {\n        \"null\": 0, \"eins\": 1, \"zwei\": 2, \"drei\": 3, \"vier\": 4,\n        \"f\u00fcnf\": 5, \"sechs\": 6, \"sieben\": 7, \"acht\": 8, \"neun\": 9\n    }\n\n    # Convert the input string into a list of numbers (integers)\n    num_list = [number_map[word] for word in numbers.split()]\n\n    # Sort the list of numbers\n    sorted_list = sorted(num_list)\n\n    # Convert the sorted list back to a string with number words and return it\n    return ' '.join([str(number_map[str(i)]) for i in sorted_list])"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    \"\"\"Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zu\u00fcck.\n    \n    >>> Is_prime(6)\n    False\n    >>> Is_prime(101)\n    True\n    >>> Is_prime(11)\n    True\n    >>> Is_prime(13441)\n    True\n    >>> Is_prime(61)\n    True\n    >>> Is_prime(4)\n    False\n    >>> Is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:  # Check if number is less than or equal to 1, which cannot be prime.\n        return False\n    elif n == 2:  # Check for the first two prime numbers explicitly.\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):  # Only need to check up to the square root of n.\n            if n % i == 0:  # If n is divisible by any number between 2 and sqrt(n), it's not prime.\n                return False\n        return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\"\"\"\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num):\n    if num <= 1 or (num % 2 == 0 and num > 2): \n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(n):\n    a, B = 0, 1\n    while A < n:\n        A, B = B, A + B\n    return A == n\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    # Create a set for fast lookup\n    s = set(l)\n\n    # Iterate over each element in the list\n    for num in l:\n        # Check if the negation of the current number exists in the set\n        if -num in s and num != 0:\n            return True\n\n    # If no such pair was found, return False\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    # base case\n    elif n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    # initialize the first four Fib4 numbers\n    fib4_numbers = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        # append sum of previous four numbers to list\n        fib4_numbers.append(sum(fib4_numbers[-4:]))\n    return fib4_numbers[n]\n\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list) -> float:\n    n = len(l)\n    if n % 2 == 1:  # if the number of elements is odd\n        return sorted(l)[n//2]\n    else:  # If the number of elements is even\n        mid_index = n // 2\n        mid_values = [sorted(l)[mid_index - 1], sorted(l)[mid_index]]\n        return sum(mid_values) / 2.0\n\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    # Umkehren des Strings\n    reversed_text = text[::-1]\n    \n    # Vergleichen mit dem Original\n    return reversed_text == text"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    output = \"\"\n    for char in text:\n        if char not in vowels:\n            output += char\n    return output"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def subtract(x: int, y: int) -> int:\n    \"\"\"Subtrahiere die Zahl y von der Zahl x und gebe das Ergebnis zur\u00fcck.\n\n    >>> subtract(10, 3)\n    7\n    >>> subtract(8, 5)\n    3\n    \"\"\""}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Input must be positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zu\u00fcck.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n\n# Testbeispiele\nprint(largest_prime_factor(13195))  # Ausgabe: 29\nprint(largest_prime_factor(2048))   # Ausgabe: 2"}
{"task_id": "python/24", "language": "python", "completion": "The function `sum_to_n` is designed to calculate the sum of all numbers from 1 up to and including a given number `n`. The code snippet you've provided contains doctests that demonstrate the expected output of the function for various inputs.\n\nHere's how the function works:\n\n- For n = 30, it calculates the sum as follows: 1 + 2 + 3 + ... + 30 = 465\n- for n = 100, it sums up all numbers from 1 to 100: 1 + 2 + 3 + ... + 100 = 5050\n- Similarly, for n = 5, the sum is 1 + 2 + 3 + 4 + 5 = 15\n- For n = 10, it adds up all numbers from 1 to 10: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n- and for n = 1, the sum is just 1 itself.\n\nYou can run this code snippet directly in your Python environment or use it as a starting point for further customization or implementation details."}
{"task_id": "python/25", "language": "python", "completion": "The given function `derivative` takes a list of coefficients (`xs`) that represents the polynomial and returns a new list representing its derivative. Here's how it works step by step:\n\n- The function starts with an empty list `[]`. This will be used to store the coefficients of the derivative.\n\n- It iterates over each index in the input list, starting from index 1 (skipping the constant term). This is because the derivative of a constant term is zero and doesn't contribute to the result.\n\n- For each index `i`, it multiplies the coefficient at that index by its corresponding power of x (`xs[i] * i`), which represents the derivative term for that term in the polynomial.\n\n- It appends this calculated derivative term to the result list.\n\nIn summary, for a polynomial represented as `xs = [a0, a1, a2, ...]`, its derivative is represented by `[a1*1, a2*2, ...]` where each coefficient is multiplied by its corresponding power of x (ignoring the constant term which is removed from the result).\n\nHere's how it works:\n\n- `xs[1]*i = 1*1 = 1` for the first derivative term (the linear term x)\n- `xs[2]*i = 2*2 = 4` for the second derivative term (x squared)\n- And so on."}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    # Base cases\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize the first three elements of the FibFib sequence\n    a, b, c = 0, 0, 1\n\n    # Calculate the n-th element of the FibFib sequence iteratively\n    for _ in range(3, n + 1):\n        d = a + B + C\n        A, B, C = B, C, D\n\n    return C"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    vowel_count = sum(1 for char in s if char.lower() in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        vowel_count += 1\n    return vowel_count\n\n# Test cases:\nprint(vowels_count(\"abcde\"))  # Should return 2\nprint(vowels_count(\"ACEDY\"))  # Should return 3\nprint(vowels_count(\"yggdrasil\"))  # Should return 1\nprint(vowels_count(\"quickly\"))  # Should return 2\nprint(vowels_count(\"xyz\"))  # Should return 0\nprint(vowels_count(\"AEIOUY\"))  # Should return 6\nprint(vowels_count(\"aAeEiIoOuUyY\"))  # Should return 10\nprint(vowels_count(\"bcdfg\"))  # Should return 0"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    # Erstellen eines Dictionarys mit Elementen und deren H\u00e4ufigkeiten\n    element_count = {}\n    for element in lst:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    # Suche nach Werten, die ihren Namen (Wert) haben und die H\u00e4ufigkeit von diesem Wert mindestens gleich dem Wert selber ist\n    for element, count in sorted(element_count.items(), reverse=True):\n        if element > 0 and count >= element:\n            return element\n\n    # Wenn keine passende Ganzzahl gefunden wurde, geben Sie -1 zur\u00fcck\n    return -1\n\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(A, B, C):\n    if A + B > C and A + C > B and B + C > A:\n        s = (A + B + C) / 2\n        area = (s * (s - A) * (s - B) * (s - C)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))  # Gibt 6.00 zur\u00fcck\nprint(triangle_area(1, 2, 10)) # Gibt -1 zur\u00fcck"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n\n    # Check if the sum of elements is less than or equal to the weight limit\n    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    # Check if A is less than 3\n    if A < 3:\n        return False\n\n    factors = 0\n\n    for i in range(2, int(A**0.5) + 1):\n        while A % i == 0:\n            A //= i\n            factors += 1\n\n        if factors > 3:\n            return False\n\n    if A != 1:\n        factors += 1\n\n    return factors == 3"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'\n\nprint(decimal_to_binary(15))  # outputs: db1111db\nprint(decimal_to_binary(32))  # outputs: db100000db"}
{"task_id": "python/33", "language": "python", "completion": "def Is_happy(s):\n    # Check length of the string\n    if len(s) < 3:\n        return False\n\n    # Check every group of 3 consecutive characters for uniqueness\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n\n    # If the string passed all checks, it is happy\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    # Dictionary f\u00fcr Notenpunkte-Buchstabenmapping\n    grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1: 'E'  # Einf\u00fcgen eines Endwertes, um den Fall zu behandeln, wenn der GPA unter 0 ist\n    }\n\n    # Iterieren \u00fcber die GPAs und f\u00fcgen die entsprechenden Buchstabennoten zur Ausgabe hinzu\n    result = []\n    for gpa in grades:\n        for limit, grade in grade_map.items():\n            if gpa > limit:\n                result.append(grade)\n                break\n\n    return result"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))  # Summe der Ziffern berechnen\n    binary_representation = bin(sum_of_digits)[2:]  # Bin\u00e4rdarstellung erzeugen und \"[2:]\" um die \"0b\"-Pr\u00e4fix zu entfernen\n    return binary_representation"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])-1, -1, -1):  # Iterate in reverse order to satisfy the condition of sorting by column in descending order\n            if lst[i][j] == x:\n                result.append((i, len(lst[i])-j-1))  # Subtract j from length of current row to get correct index as per the problem statement\n    return sorted(result, key=lambda x: (x[0], -x[1]))  # Sort by row first and then column in descending order\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1))  # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))  # Remove duplicates and sort the list\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))  # Output: None\nprint(next_smallest([1, 1]))  # Output: None"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    # Split the string into sentences by '.', '?' or '!'\n    sentences = re.split('[.?!] ', S)\n    # Count sentences that start with \"I\"\n    count = sum([1 for sentence in sentences if sentence.startswith(\"I\")])\n    return count\n\nimport re"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all(n%i for i in range(3, int(n**0.5) + 1, 2))\n\ndef skjkasdkd(lst):\n    max_prime = max([num for num in lst if is_prime(num)])\n    digits_sum = sum(int(digit) for digit in str(max_prime))\n    return digits_sum"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n        \n    all_lower = all(key.islower() for key in dictionary)\n    all_upper = All(key.isupper() for key in dictionary)\n    \n    if all([all_lower, all_upper]):\n        return False  # if both checks pass, it means there are both upper and lower case keys which will return True\n    else:\n        return any([all_lower, all_upper])"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    '''\n    Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n\n        Beispiele\n    \n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. for example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    value = float(value)\n    if value > 0:\n        return int(value + 0.5) if (value - int(value)) >= 0.5 else int(value)\n    else:\n        return int(value - 0.5) if (int(value) - value) <= -0.5 else int(value)"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = [n]\n    next_stone = n + (1 if n % 2 == 0 else 2)\n    for _ in range(1, n):\n        pile.append(next_stone)\n        next_stone += 2\n    return pile\n\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Split the string by either comma or space, and return the result as a list\n    return s.replace(\",\", \" \").split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:  # if x is greater than y, then there cannot be a valid answer\n        return -1\n    for i in range(y, x-1, -1):  # Iterate from y to x (inclusive) in reverse order\n        if i % 2 == 0:  # Check if the number is even\n            return i  # Return the first even number found\n    return -1  # If no even numbers are found in the range, return -1\n\nprint(choose_num(12, 15))  # Should print 14\nprint(choose_num(13, 12))  # Should print -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)\n\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    \"\"\"Returns the factorial of n.\"\"\"\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef sum_of_numbers(n):\n    \"\"\"Returns the sum of numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    # generate all numbers from 1 to n (inclusive)\n    numbers = list(range(1, n+1))\n\n    # filter out the palindromes\n    palindromes = [str(x) for x in numbers if str(x) == str(x)[::-1]]\n\n    # count the number of even and odd palindromes\n    even_count = len([x for x in palindromes if int(x) % 2 == 0])\n    odd_count = len(palindromes) - even_count\n\n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # Check if the array is empty\n        return True\n\n    min_value = min(arr)\n    new_arr = [x for x in arr if x > min_value]\n\n    if not new_arr:  # Check if the array after removing the smallest element is empty\n        return True\n\n    sorted_arr = sorted(new_arr)\n\n    if sorted_arr == new_arr:\n        return True\n    else:\n        return False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Z\u00e4hle die Anzahl der ungeraden Zahlen in lst1 und geraden Zahlen in lst2\n    uneven_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n\n    # Wenn es ausreichend geraden Zahlen in lst2 gibt, um die ungeraden Zahlen von lst1 zu tauschen, gebe \"YES\" zur\u00fcck\n    if even_count >= uneven_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Testfall\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # => \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # => \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return (result, result == result[::-1])"}
{"task_id": "python/52", "language": "python", "completion": "import itertools\n\ndef max_fill(grid, capacity):\n    # find all possible combinations of coordinates where water exists in the grid\n    coordinates = [(i, j) for i, row in enumerate(grid) for j, col in enumerate(row) if col == 1]\n  \n    # find the maximum number of times the well needs to be lowered\n    max_lowerings = sum(math.ceil((c[0]+c[1]) / capacity) for c in coordinates)\n\n    return max_lowerings\n\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # prints: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)) # prints: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5)) # prints: 0"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n\n    for word in words:\n        if len([char for char in word if char in consonants]) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Check if input is valid\n    if not arr or k < 1 or len(arr) < k:\n        return \"Invalid input\"\n\n    # Use list comprehension to find elements with at most two digits and sum them up\n    return sum([i for i in arr[:k] if 0 < i <= 99])"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    intersection_length = end - start\n\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        # initialisiere die Tribonacci-Folge mit den ersten beiden Elementen\n        trib = [3, 1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:  # falls n gerade\n                trib.append(1 + i / 2)\n            else:  # falls n ungerade\n                trib.append(trib[i-1] + trib[i-2] + trib[i+1])\n        return trib"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    return 0 if not odd_digits else prod(odd_digits)\n\n# Helper function to calculate product of list elements\ndef prod(lst):\n    result = 1\n    for i in lst:\n        result *= i\n    return result"}
{"task_id": "python/59", "language": "python", "completion": "def Is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n\n    # If there are more opening brackets, they are not closed properly\n    if stack:\n        return False\n\n    # If there is at least one nested pair of brackets, return True\n    for i in range(len(stack)-1):\n        if stack[i] == '[' and stack[i+1] == ']':\n            return True\n\n    return False"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        # Runden Sie jedes Element auf die n\u00e4chste Ganzzahl (Ceiling) und quadrieren Sie es.\n        rounded_num = math.ceil(num)\n        total += rounded_num ** 2\n    return total\n\n# Testen der Funktion\nprint(sum_squares([1,2,3]))  # Output: 14\nprint(sum_squares([1,4,9]))  # Output: 98\nprint(sum_squares([1,3,5,7]))  # Output: 84\nprint(sum_squares([1.4,4.2,0]))  # Output: 29\nprint(sum_squares([-2.4,1,1]))  # Output: 6"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the string into words and take the last word.\n    last_word = txt.split()[-1]\n\n    # Check if the first character of the last word is a letter and not followed by any other characters (i.e., it's standalone).\n    return bool(last_word) and last_word[0].isalpha() and len(last_word) == 1"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):  # Iterate from the end to the second element\n        if arr[i] < arr[i-1]:  # If current element is less than previous one\n            return i  # Return its index\n    return -1  # Return -1 if no such element is found"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negative = [i for i in lst if isinstance(i, int) and i < 0]\n    positive = [i for i in lst If isinstance(i, int) and i > 0]\n\n    return (max(negative) if negative else None, min(positive) if positive else None)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    # Helper function for calculating factorial\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    # Calculate special factorial\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_words)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Split the numerator and denominator from x\n    numer_x, denom_x = map(int, x.split('/'))\n\n    # Split the numerator and denominator from n\n    numer_n, denom_n = map(int, n.split('/'))\n\n    # Calculate the product of x and n\n    product = numer_x * numer_n // (denom_x * denom_n)\n\n    # Return True if the product is an integer, else False\n    return product == int(product)"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    # Funktion zur Berechnung der Summe der Ziffern\n    def sum_of_digits(number):\n        if number < 0:\n            return -sum_of_digits(-number)\n        elif number == 0:\n            return 0\n        else:\n            return number % 10 + sum_of_digits(number // 10)\n\n    # Sortieren der Liste basierend auf der Summe der Ziffern\n    sorted_list = sorted(nums, key=sum_of_digits)\n\n    # Zur\u00fccksetzen der Indizes nach dem Sortieren\n    result = []\n    for i in range(len(sorted_list)):\n        if nums.index(sorted_list[i]) == -1:\n            result.append(nums[i])\n\n    return result"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[-1] % 2 != 0 and int(str(abs(num))[0]) % 2 != 0:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # => 1 \nprint(specialFilter([33, -2, -3, 45, 21, 109])) # => 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Erstelle ein Integer-Array a der L\u00e4nge n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n\n    # Initialisiere die Z\u00e4hler f\u00fcr Tripel und geeignete Paare\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n# Test\nprint(get_max_triples(5))  # Output: 1"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # List of planets sorted by their distance from the sun.\n    solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # Validate input planet names.\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n   \n    # Get the indexes of input planets.\n    index1 = solar_system.index(planet1)\n    index2 = solar_system.index(planet2)\n\n    # Sorting the list according to the order of their distance from the sun.\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    # Get planets between planet1 and planet2.\n    return tuple(solar_system[index1+1 : index2])"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Testbeispiele\nprint(x_or_y(7, 34, 12))  # Erwartet: 34\nprint(x_or_y(15, 8, 5))   # Erwartet: 5"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    return sum([x**2 for x in lst if x > 0 and x % 2 == 1])"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = extensions[0]\n    max_strength = -1 * (len([x for x in strongest if x.isupper()]) - len([x for x in strongest if x.islower()]))\n\n    for extension in extensions:\n        current_capitalization_difference = len([x for x in extension if x.isupper()]) - len([x for x in extension if x.islower()])\n        if current_capitalization_difference > max_strength:\n            strongest, max_strength = extension, current_capitalization_difference\n\n    return f\"{class_name}.{strongest}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A , B):\n    \"\"\"Checks if the second word or any of its rotations is a substring of the first word.\"\"\"\n    # Concatenate A with itself\n    C = A + A\n    # Check if B is a substring of C\n    return B in C\n\nprint(cycpattern_check(\"abcd\",\"abd\")) # => False\nprint(cycpattern_check(\"hello\",\"ell\")) # => True\nprint(cycpattern_check(\"whassup\",\"psus\")) # => False\nprint(cycpattern_check(\"abab\",\"baa\")) # => True\nprint(cycpattern_check(\"efef\",\"eeff\")) # => False\nprint(cycpattern_check(\"himenss\",\"simen\")) # => True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_numeral = \"\"\n\n    for i in range(len(values)):\n        while number >= values[i]:\n            number -= values[i]\n            roman_numeral += symbols[i]\n\n    return roman_numeral"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Sortiere die Seitenl\u00e4ngen\n    sides = sorted([A, b, c])\n    \n    # \u00dcberpr\u00fcfe, ob die Summe der Quadrate der beiden kleineren Seiten\n    # gleich dem Quadrat der gr\u00f6\u00dften Seite ist\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:  # Wenn text leer ist\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\nprint(string_to_md5('Hello world'))"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]"}

{"task_id": "java/0", "language": "java", "completion": "public static Boolean belowZero(List<Object> operations) {\n        int balance = 0; // Start with a zero balance\n        for (Object op : operations) {\n            if (op instanceof Integer) { // Check if the operation is an integer\n                balance += (Integer) op; // Add the deposit or withdrawal to the balance\n            } else if (op instanceof Double) { // Check if the operation is a double\n                balance += (Double) op; // Add the deposit or withdrawal to the balance\n            }\n            if (balance < 0) { // If the balance goes below zero\n                return true; // Return true\n            }\n        }\n        return false; // If the loop completes without the balance going below zero, return false\n    }"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1; // Start with 1 because multiplying by 0 will always give you 0.\n        for (Object number : numbers) {\n            if (number instanceof Integer) { // Check if the object is an integer.\n                sum += (Integer) number; // Cast to Integer and add it to sum.\n                product *= (Integer) number; // Cast to Integer and multiply it with product.\n            }\n        }\n        return Arrays.asList(sum, product); // Return the results as a list.\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumProduct(Arrays.asList())); // Output: [0, 1]\n        System.out.println(sumProduct(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "// Initialize the result string with zeros of the same length as inputs\n    StringBuilder result = new StringBuilder();\n\n    // Convert the input strings to char arrays for easy iteration\n    char[] a = a.toCharArray();\n    char[] B = B.toCharArray();\n\n    // Iterate through each bit of the strings\n    for (int i = 0; i < A.length; i++) {\n        // Perform XOR operation on each bit and append to result string\n        if (A[i] == B[i]) {\n            result.append('0');\n        } else {\n            result.append('1');\n        }\n    }\n\n    // Return the result as a string\n    return result.toString();\n  }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    /**\n     * Returns the longest string in a list of Strings, returns the first one if there are multiple with the same length, and null if the input list is empty.\n     * >>> longest(new ArrayList<>())\n     * \n     * >>> longest(Arrays.asList(\"A\", \"b\", \"c\"))\n     * \"A\"\n     * >>> longest(Arrays.asList(\"A\", \"bb\", \"ccc\"))\n     * \"ccc\"\n     */\n    public static String longest(List<Object> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        String longestStr = \"\";\n        for (Object obj : strings) {\n            if (obj instanceof String && ((String) obj).length() > longestStr.length()) {\n                longestStr = (String) obj;\n            }\n        }\n\n        return longestStr;\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GreatestCommonDivisor {\n    public static int greatestCommonDivisor(int a, int B) {\n        if (B == 0) {\n            return A;\n        }\n        return greatestCommonDivisor(B, A % B);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(greatestCommonDivisor.greatestCommonDivisor(3, 5));  // output: 1\n        System.out.println(GreatestCommonDivisor.GreatestCommonDivisor(25, 15)); // output: 5\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    public static String sortNumbers(String numbers) {\n        // Define the mapping between the words and their corresponding numeric values\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"null\", 0);\n        map.put(\"eins\", 1);\n        map.put(\"zwei\", 2);\n        map.put(\"drei\", 3);\n        map.put(\"vier\", 4);\n        map.put(\"f\u00fcnf\", 5);\n        map.put(\"sechs\", 6);\n        map.put(\"sieben\", 7);\n        map.put(\"acht\", 8);\n        map.put(\"neun\", 9);\n\n        // Split the input string into an array of words\n        String[] arr = numbers.split(\" \");\n\n        // Sort the array based on the numeric values of the words using a custom comparator\n        Arrays.sort(arr, Comparator.comparingInt(map::get));\n\n        // Join the sorted words back into a single string with spaces in between and return it\n        return String.join(\" \", arr);\n    }\n}\n\n// Test the function\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(SortNumbers.sortNumbers(\"three one five\")); // Output: \"one three five\"\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "public static List<Double> rescaleToUnit(List<Double> numbers) {\n    double min = Collections.min(numbers);\n    double max = Collections.max(numbers);\n    double range = max - min;\n\n    List<Double> rescaledNumbers = new ArrayList<>();\n    for (double num : numbers) {\n        double rescaled = (num - min) / range;\n        rescaledNumbers.add(rescaled);\n    }\n\n    return rescaledNumbers;\n}"}
{"task_id": "java/7", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FlipCase {\n    /**\n     * For a given string, swap lower case letters with upper case letters and vice versa\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     */\n    public static String flipCase(String str) {\n        StringBuilder result = new StringBuilder();\n        for (char c : str.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\")); // it will print \"hELLO\"\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass GetPositive {\n    /**\n     * This method filters out and returns only positive numbers from a given list\n     * @param l the input list containing numbers (integers or floating point numbers)\n     * @return a list of positive numbers\n     */\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positiveNumbers = new ArrayList<>();\n        for (Object number : l) {\n            if (number instanceof Integer && (Integer) number > 0) {\n                positiveNumbers.add(number);\n            } else if (number instanceof Double && (Double) number > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getPositive(Arrays.asList(-1, 2, -4, 5, 6))); // Output: [2, 5, 6]\n        System.out.println(getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "class IsPrime {\n    /**\n     * Checks if a given number is prime or not. Returns true if it's prime, otherwise false.\n     * >>> isPrime(6)\n     * False\n     * >>> isPrime(101)\n     * True\n     * >>> IsPrime(11)\n     * True\n     * >>> IsPrime(13441)\n     * True\n     * >>> IsPrime(61)\n     * True\n     * >>> IsPrime(4)\n     * False\n     * >>> IsPrime(1)\n     * False\n     */\n\n    public static Boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n\n        for(int i = 3; i * i <= n; i+=2){\n            if(n % i == 0)  return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list.\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        // Convert the list to a set to remove duplicates\n        Set<Integer> s = new HashSet<>(l);\n\n        // Sort the set and convert it back to an array list\n        List<Integer> sortedUniqueElements = new ArrayList<>(s);\n        Collections.sort(sortedUniqueElements);\n\n        return sortedUniqueElements;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> output = unique(input);\n        System.out.println(output);  // [0, 2, 3, 5, 9, 123]\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n    public static void main(String[] args) {\n        System.out.println(primeFib(1));  // Output: 2\n        System.out.println(primeFib(2));  // Output: 3\n        System.out.println(primeFib(3));  // Output: 5\n        System.out.println(primeFib(4));  // Output: 13\n        System.out.println(primeFib(5));  // Output: 89\n    }\n\n    public static int primeFib(int n) {\n        List<BigInteger> primes = new ArrayList<>();\n        primes.add(new BigInteger(\"2\")); // Adding the first prime number, 2\n        BigInteger a = BigInteger.ONE;\n        BigInteger b = BigInteger.ONE;\n        while (primes.size() < n) {\n            a = A.add(B);\n            B = A.subtract(B);\n            if (A.isProbablePrime(10)) { // Check if the generated number is prime using 10 iterations of Miller-Rabin primality test\n                primes.add(A);\n            }\n        }\n        return primes.get(n - 1).intValue();\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        Collections.sort(l); // Sort the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            if (i > 0 && l.get(i).equals(l.get(i-1))) {\n                continue; // Skip duplicate values to avoid counting same triple again\n            }\n            int left = i + 1, right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true; // Found three numbers that sum to zero\n                } else if (sum > 0) {\n                    right--; // Decrease the right pointer because we need a smaller sum\n                } else {\n                    left++; // Increase the left pointer because we need a larger sum\n                }\n            }\n        }\n        return false; // No triple found that sums to zero\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // Expected: False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // Expected: True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // Expected: False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // Expected: True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // Expected: False\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "public class PairsSumToZero {\n\n    /**\n     * Checks if there are two distinct elements in the list that sum up to zero.\n     * @param l List of integers as input.\n     * @return True if such a pair exists, False otherwise.\n     */\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "public static int fib4(int n) {\n    if (n == 0 || n == 1 || n == 3) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n    }\n\n    int[] fib = new int[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n\n    for (int i = 4; i <= n; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    /**\n    * Return the median of elements in the list l.\n    * >>> median([3, 1, 2, 4, 5])\n    * 3\n    * >>> median([-10, 4, 6, 1000, 10, 20])\n    * 15.0\n    */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n\n        if (size % 2 == 1) {\n            return l.get((size / 2));\n        } else {\n            double lowerHalf = l.get(size / 2 - 1);\n            double upperHalf = l.get(size / 2);\n            return (lowerHalf + upperHalf) / 2;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3\n        System.out.println(median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "System.out.println(IsPalindrome.isPalindrome(\"\"));  // Output: true\nSystem.out.println(IsPalindrome.isPalindrome(\"aba\")); // Output: true\nSystem.out.println(IsPalindrome.isPalindrome(\"aaaaa\")); // Output: true\nSystem.out.println(IsPalindrome.isPalindrome(\"zbcd\")); // Output: false"}
{"task_id": "java/17", "language": "java", "completion": "if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        List<Character> vowels = Arrays.asList('a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U');\n        StringBuilder result = new StringBuilder();\n\n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(removeVowels(\"\")); // Output: \"\"\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(removeVowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(removeVowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(removeVowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(removeVowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.util.*;\n\nclass BelowThreshold {\n    /**\n     * Returns true if all numbers in the list l are below the threshold t.\n     * >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n     * true\n     * >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n     * false\n     */\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // Output: true\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5));  // Output: false\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n    }\n\n    // Test-Methoden zum Validieren der Funktion\n    public static void main(String[] args) {\n        System.out.println(\"Testfall 1: add(2, 3) = \" + (add(2, 3) == 5 ? \"PASS\" : \"FAIL\"));\n        System.out.println(\"Testfall 2: add(5, 7) = \" + (add(5, 7) == 12 ? \"PASS\" : \"FAIL\"));\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "Set<Character> set1 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n\n        Set<Character> set2 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n\n        return set1.equals(set2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "public class Fib {\n\n    /**\n     * Gib die n-te Fibonacci-Zahl zur\u00fcck.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n    public static int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1 || n == 2) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases to check the correctness of the function\n        System.out.println(\"fib(10) = \" + fib(10)); // Should print 55\n        System.out.println(\"fib(1) = \" + fib(1));   // Should print 1\n        System.out.println(\"fib(8) = \" + fib(8));  // Should print 21\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Common {\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        // Convert list of integers to set for efficient lookup\n        Set<Integer> set1 = new HashSet<>(l1);\n        \n        // Filter list of objects, keeping only elements present in the set\n        List<Object> commonElements = l2.stream()\n            .filter(set1::contains)\n            .collect(Collectors.toList());\n        \n        // Remove duplicates from the resulting list and sort it\n        commonElements = commonElements.stream()\n            .distinct()\n            .sorted()\n            .collect(Collectors.toList());\n        \n        return commonElements;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121)));\n        System.out.println(common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2)));\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "import java.util.*;\n\nclass LargestPrimeFactor {\n    /**\n     * Finds the largest prime factor of a given non-prime number n.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     */\n    public static int largestPrimeFactor(int n) {\n        int maxPrime = -1;\n\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1; // equivalent to n /= 2\n        }\n\n        // Now n must be odd, start loop from 3 and check for factors\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n\n        // If n becomes a prime number greater than 2\n        if (n > 2)\n            maxPrime = n;\n\n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Largest Prime Factor of 13195 is: \" + largestPrimeFactor(13195)); // Output: 29\n        System.out.println(\"Largest Prime Factor of 2048 is: \" + largestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "public class SumToN {\n\n    /**\n     * sumToN ist eine rekursive Funktion, die Zahlen von 1 bis n summiert.\n     *\n     * @param n Das Endzielsumme der Sequenz\n     * @return Die gesamte Summe von 1 bis n\n     */\n    public static int sumToN(int n) {\n        if (n <= 0) {\n            return 0;\n        } else {\n            return n + sumToN(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumToN(30)); // Ausgabe: 465\n        System.out.println(sumToN(100)); // Ausgabe: 5050\n        System.out.println(sumToN(5)); // Ausgabe: 15\n        System.out.println(sumToN(10)); // Ausgabe: 55\n        System.out.println(sumToN(1)); // Ausgabe: 1\n\n        // Weitere Tests\n        System.out.println(sumToN(-5)); // Ausgabe: 0 (fehlende positive Zahl)\n        System.out.println(sumToN(20)); // Ausgabe: 210\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\n\nclass Derivative {\n    public static ArrayList<Double> derivative(ArrayList<Integer> coefficients) {\n        ArrayList<Double> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < coefficients.size(); i++) {\n            double coefficient = (double)coefficients.get(i);\n            derivativeCoefficients.add(coefficient * i);\n        }\n        return derivativeCoefficients;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> test1 = new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5));\n        System.out.println(derivative(test1));  // Output: [1.0, 4.0, 12.0, 20.0]\n\n        ArrayList<Integer> test2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(derivative(test2));  // Output: [2.0, 6.0]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "import java.util.HashMap;\n\npublic class Fibfib {\n    // Function to calculate the n-th element of the FibFib sequence\n    public static int fibfib(int n) {\n        // Initialize a HashMap to store previously computed values for memoization\n        HashMap<Integer, Integer> memo = new HashMap<>();\n        memo.put(0, 0);\n        memo.put(1, 0);\n        memo.put(2, 1);\n\n        return calculateFibfib(n, memo);\n    }\n\n    // Helper function for recursive calculation with memoization\n    private static int calculateFibfib(int n, HashMap<Integer, Integer> memo) {\n        if (!memo.containsKey(n)) {\n            memo.put(n, calculateFibfib(n - 1, memo) + calculateFibfib(n - 2, memo) + calculateFibfib(n - 3, memo));\n        }\n        return memo.get(n);\n    }\n\n    // Main method for testing the fibfib function with provided data points\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // Expected output: 0\n        System.out.println(fibfib(5)); // Expected output: 4\n        System.out.println(fibfib(8)); // Expected output: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    s = s.toLowerCase();\n\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end and consider it as a vowel in this case\n    if (s.endsWith(\"y\")) {\n        count++;\n    }\n\n    return count;\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    /**\n     * * \n     * Sie erhalten eine nicht-leere Liste von positiven Ganzzahlen. Geben Sie die gr\u00f6\u00dfte Ganzzahl zur\u00fcck, die gr\u00f6\u00dfer als Null ist und eine H\u00e4ufigkeit hat, die gr\u00f6\u00dfer oder gleich dem Wert der Ganzzahl selbst ist. Die H\u00e4ufigkeit einer Ganzzahl ist die Anzahl der Male, die sie in der Liste vorkommt. Wenn kein solcher Wert existiert, geben Sie -1 zur\u00fcck. Beispiele:\n     * \n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n\n        // Calculate frequency of each number in the list\n        for (int num : lst) {\n            if (num > 0) {\n                freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n            }\n        }\n\n        // Find the largest number with a frequency >= its value\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.math.*;\n\nclass TriangleArea {\n  public static Number triangleArea(int A, int B, int C) {\n    if (A + B <= C || A + C <= B || B + C <= A) {\n      return -1; // Not a valid triangle\n    } else {\n      double s = (A + B + C) / 2.0; // Semi-perimeter of the triangle\n      double area = Math.sqrt(s * (s - A) * (s - B) * (s - C)); // Heron's formula\n      BigDecimal bd = new BigDecimal(area).setScale(2, RoundingMode.HALF_UP);\n      return bd;\n    }\n  }\n\n  public static void main(String[] args) {\n    System.out.println(triangleArea(3, 4, 5)); // Outputs: 6.00\n    System.out.println(triangleArea(1, 2, 10)); // Outputs: -1\n  }\n}"}
{"task_id": "java/30", "language": "java", "completion": "// Check if the given list is palindromic\n    private static boolean isPalindrome(List<Integer> q) {\n        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n            if (!q.get(i).equals(q.get(j))) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    // Calculate the sum of elements in the list\n    private static int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is palindromic and its sum is less than or equal to w\n        return isPalindrome(q) && calculateSum(q) <= w;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "public static Boolean isMultiplyPrime(int A) {\n        // Check if A is less than 2, because prime numbers start from 2.\n        if (A < 2) {\n            return false;\n        }\n\n        // Iterate through possible divisors to check if they are prime factors of A.\n        for (int i = 2; i <= Math.sqrt(A); i++) {\n            int count = 0; // To track the number of prime factors.\n            while (A % i == 0) {\n                count++;\n                if (count > 1) {\n                    // If there are more than two prime factors, then A is not a product of exactly three primes.\n                    return false;\n                }\n                A /= i; // Divide A by its smallest prime factor to check for the next one.\n            }\n        }\n\n        // If A has only one prime factor left (which is necessarily 2), then it is not a product of exactly three primes.\n        return count == 1 && A >= 2;\n    }"}
{"task_id": "java/32", "language": "java", "completion": "String binary = Integer.toBinaryString(decimal); // Convert decimal to binary\n        return \"db\" + binary + \"db\"; // Return formatted binary string\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15)); // Expected output: db1111db\n        System.out.println(decimalToBinary(32)); // Expected output: db100000db\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n\n            if (c1 == c2 || c2 == c3 || c1 == c3) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isHappy(\"a\")); // False\n        System.out.println(isHappy(\"aa\")); // False\n        System.out.println(isHappy(\"abcd\")); // True\n        System.out.println(isHappy(\"Aabb\")); // False\n        System.out.println(isHappy(\"adb\")); // True\n        System.out.println(isHappy(\"xyy\")); // False\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "List<String> letterGrades = new ArrayList<>();\n\n    for (Number grade : grades) {\n        double gpa = grade.doubleValue();\n\n        if (gpa == 4.0) {\n            letterGrades.add(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrades.add(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrades.add(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrades.add(\"B+\");\n        } else If (gpa > 2.7) {\n            letterGrades.add(\"B\");\n        } else If (gpa > 2.3) {\n            letterGrades.add(\"B-\");\n        } else If (gpa > 2.0) {\n            letterGrades.add(\"C+\");\n        } else If (gpa > 1.7) {\n            letterGrades.add(\"C\");\n        } else If (gpa > 1.3) {\n            letterGrades.add(\"C-\");\n        } else If (gpa > 1.0) {\n            letterGrades.add(\"D+\");\n        } else If (gpa > 0.7) {\n            letterGrades.add(\"D\");\n        } else If (gpa > 0.0) {\n            letterGrades.add(\"D-\");\n        } else {\n            letterGrades.add(\"E\");\n        }\n    }\n\n    return letterGrades;\n}\n\n}"}
{"task_id": "java/35", "language": "java", "completion": "import java.util.*;\n\nclass PrimeLength {\n    /**\n     * Check if the length of the given string is a prime number.\n     *     Examples\n     * \n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\")); // Expected: True\n        System.out.println(primeLength(\"abcdcba\")); // Expected: True\n        System.out.println(primeLength(\"kittens\")); // Expected: True\n        System.out.println(primeLength(\"orange\")); // Expected: False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public static String solve(int n) {\n        // Initialize sum of digits\n        int sum = 0;\n\n        // Calculate sum of digits\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n\n        // Convert the sum to binary and return it as a string\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(1000)); // Output: \"1\"\n        System.out.println(solve(150));  // Output: \"110\"\n        System.out.println(solve(147));  // Output: \"1100\"\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coords = new ArrayList<>();\n                    coords.add(i);\n                    coords.add(row.size() - j - 1); // Subtracting j because we want to reverse the column order\n                    result.add(coords);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                int rowCompare = Integer.compare(o1.get(0), o2.get(0));\n                if (rowCompare != 0) return rowCompare;\n                return Integer.compare(o2.get(1), o1.get(1)); // reverse the column order for ascending sort\n            }\n        });\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> lst = new ArrayList<>();\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n\n        System.out.println(getRow(lst, 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    /**\n     * This function takes a list of integers and returns the second smallest element in the list.\n     * If there is no such element, it returns null.\n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == null\n     * next_smallest([1, 1]) == null\n     */\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return null;\n        }\n\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        if (uniqueElements.size() < 2) {\n            return null;\n        }\n\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // skip the smallest element\n        return iterator.next(); // return the second smallest\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // prints: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // prints: 2\n        System.out.println(nextSmallest(new ArrayList<>())); // prints: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // prints: null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "public static int countLongewiles(String s) {\n    // Split the string into sentences based on '.', '?' or '!'\n    String[] sentences = s.split(\"[.?!]\");\n\n    int longewileCount = 0;\n\n    for (String sentence : sentences) {\n        // Trim whitespace and check if the first word is \"I\"\n        if (sentence.trim().startsWith(\"I\")) {\n            longewileCount++;\n        }\n    }\n\n    return longewileCount;\n}"}
{"task_id": "java/40", "language": "java", "completion": "private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (IsPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n\n        return sumDigits(maxPrime);\n    }\n\n    private static int sumDigits(int number) {\n        int sum = 0;\n        while (number != 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(skjkasdkd(lst1)); // Output: 10\n\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(skjkasdkd(lst2)); // Output: 25\n\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(skjkasdkd(lst3)); // Output: 13\n\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(skjkasdkd(lst4)); // Output: 11\n\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(skjkasdkd(lst5)); // Output: 3\n\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(skjkasdkd(lst6)); // Output: 7\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.*;\n\npublic class CheckDictCase {\n    public static Boolean checkDictCase(Map<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false; // If the dictionary is empty, return false\n        }\n\n        boolean allLowercase = true;\n        boolean AllUppercase = true;\n\n        for (Map.Entry<String, String> entry : dict.entrySet()) {\n            if (!entry.getKey().equals(entry.getKey().toLowerCase())) {\n                AllLowercase = false;\n            }\n            if (!entry.getKey().equals(entry.getKey().toUpperCase())) {\n                AllUppercase = false;\n            }\n        }\n\n        return AllLowercase || AllUppercase; // If either allLowercase or AllUppercase is true, return true\n    }\n\n    public static void main(String[] args) {\n        Map<String, String> example1 = new HashMap<>();\n        example1.put(\"a\", \"apple\");\n        example1.put(\"b\", \"banana\");\n        System.out.println(checkDictCase(example1)); // true\n\n        Map<String, String> example2 = new HashMap<>();\n        example2.put(\"A\", \"apple\");\n        example2.put(\"a\", \"apple\");\n        example2.put(\"B\", \"banana\");\n        System.out.println(checkDictCase(example2)); // false\n\n        Map<String, String> example3 = new HashMap<>();\n        example3.put(\"A\", \"apple\");\n        example3.put(\"8\", \"banana\");\n        example3.put(\"A\", \"apple\");\n        System.out.println(checkDictCase(example3)); // false\n\n        // ... add more examples as needed\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "double num = Double.parseDouble(value);\n        int roundedNum = (int) Math.floor(num + 0.5); // rounds towards minus infinity for negative numbers\n        if (Math.abs(num - roundedNum) == 0.5) {\n            roundedNum += Math.signum(num) * 1; // add 1 if the number is equidistant from two integers\n        }\n        return roundedNum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // Output: 10\n        System.out.println(closestInteger(\"15.3\")); // Output: 15\n        System.out.println(closestInteger(\"14.5\")); // Output: 15\n        System.out.println(closestInteger(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n\n        while (n > 0) {\n            pile.add(currentStones);\n            if (n % 2 == 0) { // If n is even\n                currentStones += 2; // Next even number\n            } else { // If n is odd\n                currentStones += 2; // Next odd number, same operation as for even numbers\n            }\n            n--;\n        }\n\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n        System.out.println(makeAPile(4)); // Output: [4, 6, 8, 10]\n    }"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class WordsString {\n    /**\n     * Split the input string into words separated by either commas or spaces and return them as an array list.\n     *\n     * Example:\n     *\n     * words_string(\"Hi, My name is John\") returns [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") returns [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public static List<String> wordsString(String s) {\n        // Split the string by either comma or space and trim any leading/trailing spaces from each word.\n        List<String> words = Arrays.stream(s.split(\"[, ]+\"))\n                                   .map(String::trim)\n                                   .collect(Collectors.toCollection(ArrayList::new));\n        return words;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, My name is John\")); // prints [Hi, my, name, is, John]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // prints [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChooseNum {\n    /**\n     * \n     * Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n     * \n     * Zum Beispiel:\n     * \n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     */\n    public static int chooseNum(int x, int y) {\n        // Check if the range is valid (x <= y)\n        if (x > y) {\n            return -1; // No valid number in the given range\n        }\n\n        // Adjust 'y' to be the largest even number in the range [x, y]\n        if (y % 2 != 0) {\n            y--; // Decrement 'y' by 1 if it's odd\n        }\n\n        return (x <= y) ? y : -1; // Return 'y' if it's within the range [x, y], otherwise return -1\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(chooseNum(12, 15)); // Expected output: 14\n        System.out.println(chooseNum(13, 12)); // Expected output: -1\n        System.out.println(chooseNum(10, 20)); // Expected output: 20\n        System.out.println(chooseNum(21, 25)); // Expected output: 24\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "System.out.println(roundedAvg(1, 5));  // Output: \"0b11\"\nSystem.out.println(roundedAvg(7, 5));  // Output: -1\nSystem.out.println(roundedAvg(10, 20)); // Output: \"0b1111\"\nSystem.out.println(roundedAvg(20, 33)); // Output: \"0b11010\""}
{"task_id": "java/47", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    /**\n     * Implementieren Sie die Funktion f, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zu\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Fakult\u00e4t von i ist, wenn i gerade ist, oder die Summe der Zahlen von 1 bis i, wenn i ungerade ist. i beginnt bei 1. Die Fakult\u00e4t von i ist das Produkt der Zahlen von 1 bis i (1 * 2 * ... * i). Beispiel:\n     * \n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfIntegers(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int number) {\n        int factorial = 1;\n        for (int i = 2; i <= number; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private static int sumOfIntegers(int number) {\n        return number * (number + 1) / 2; // Using the formula for the sum of the first n natural numbers\n    }\n}\n\n// Check function to verify the correctness of the generated function\nclass Main {\n    public static void main(String[] args) {\n        List<Integer> result = F.f(5);\n        System.out.println(result); // Expected output: [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "public static int[] evenOddPalindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return new int[]{evenCount, oddCount};\n}\n\nprivate static boolean isPalindrome(int num) {\n    String str = Integer.toString(num);\n    int left = 0;\n    int right = str.length() - 1;\n\n    while (left < right) {\n        if (str.charAt(left) != str.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n\n    return true;\n}\n\n// Test cases:\n\npublic static void main(String[] args) {\n    System.out.println(Arrays.toString(evenOddPalindrome(3))); // [1, 2]\n    System.out.println(Arrays.toString(evenOddPalindrome(12))); // [4, 6]\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.util.*;\n\npublic class MoveOneBall {\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return true; // Leere Liste hat immer True zu\u00fcck\n        }\n\n        // Umwandeln der ArrayList in ein Array und sortieren\n        Integer[] arrInt = new Integer[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arrInt[i] = (Integer) arr.get(i);\n        }\n        Arrays.sort(arrInt);\n\n        // Umwandeln des sortierten Arrays in eine ArrayList und \u00fcberpr\u00fcfen, ob es m\u00f6glich ist, die Liste in nicht abnehmender Reihenfolge zu sortieren\n        List<Object> sortedArr = new ArrayList<>();\n        for (int num : arrInt) {\n            sortedArr.add(num);\n        }\n\n        return checkMoveOneBall(arr, sortedArr); // Aufruf einer separaten Methode zur \u00dcberpr\u00fcfung der Sortierung\n    }\n\n    private static Boolean checkMoveOneBall(List<Object> arr, List<Object> sortedArr) {\n        int i = 0;\n        while (i < arr.size() - 1) {\n            if (!arr.get(i).equals(sortedArr.get(i))) { // Elemente vergleichen\n                // Versuchen, die Liste in nicht abnehmender Reihenfolge zu sortieren\n                List<Object> temp = new ArrayList<>(arr);\n                for (int j = 0; j < i + 1; j++) { // Elemente nach links schieben\n                    temp.add(0, arr.get(i));\n                    temp.remove(arr.size());\n                }\n                if (temp.equals(sortedArr)) { // \u00dcberpr\u00fcfen, ob die sortierte Liste erreicht wurde\n                    return true;\n                } else {\n                    return false; // Sortierung nicht m\u00f6glich\n                }\n            }\n            i++;\n        }\n        return true; // Sortierung in nicht abnehmender Reihenfolge m\u00f6glich\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr = new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2));\n        System.out.println(moveOneBall(arr)); // True\n\n        arr = new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2));\n        System.out.println(moveOneBall(arr)); // False\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "int oddCountLst1 = (int) lst1.stream().filter(n -> n % 2 != 0).count();\n        int evenCountLst2 = (int) lst2.stream().filter(n -> n % 2 == 0).count();\n\n        return oddCountLst1 <= evenCountLst2 ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(exchange(lst1, lst2)); // Output: \"YES\"\n\n        List<Integer> lst3 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst4 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(exchange(lst3, lst4)); // Output: \"NO\"\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n  public static List<Object> reverseDelete(String s, String c) {\n    // Remove characters from 's' that are in 'c'\n    StringBuilder result = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        if (!c.contains(\"\" + ch)) {\n            result.append(ch);\n        }\n    }\n\n    // Check if the result is a palindrome\n    boolean isPalindrome = true;\n    String reversed = result.reverse().toString();\n    for (int i = 0; i < result.length() / 2; i++) {\n        if (result.charAt(i) != reversed.charAt(i)) {\n            isPalindrome = false;\n            break;\n        }\n    }\n\n    // Return the tuple with result and isPalindrome\n    List<Object> list = new ArrayList<>();\n    list.add(result.toString());\n    list.add(isPalindrome);\n    return list;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(reverseDelete(\"abcde\", \"ae\")); // [bcd, false]\n    System.out.println(reverseDelete(\"abcdef\", \"b\")); // [acdef, false]\n    System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // [cdedc, true]\n  }\n}"}
{"task_id": "java/52", "language": "java", "completion": "def maxFill(grid, capacity):\n    # Initialize the total units of water in each well\n    total_water = [sum(row) for row in grid]\n    \n    # Calculate the number of times we need to lower buckets to empty each well\n    return sum([(unit + capacity - 1) // capacity for unit in total_water])"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\nclass SelectWords {\n    /**\n     * Implement a function that takes a string s and an integer n as input and returns a list of all words in the string s that contain exactly n consonants, in the order they appear in the string. If the string is empty, the function should return an empty list. Note: You can assume that the input string only contains letters and spaces. Examples:\n     * \n     * selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * selectWords(\"simple white space\", 2) ==> []\n     * selectWords(\"Hello world\", 4) ==> [\"world\"]\n     * selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public static List<Object> selectWords(String s, int n) {\n        List<Object> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        // Split the string into words based on spaces\n        String[] words = s.split(\" \");\n\n        for (String word : words) {\n            int consonantCount = 0;\n            // Count the consonants in the word\n            for (char c : word.toCharArray()) {\n                if (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1) {\n                    consonantCount++;\n                }\n            }\n\n            // If the number of consonants matches n, add it to the list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4));  // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3));  // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2));     // []\n        System.out.println(selectWords(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3));               // [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "In this Java code, the `maximum` method is designed to take a list of integers (`arr`) and an integer `k` as input. The goal of this method is to return a sorted list containing the `k` largest elements from the input array.\n\nThe method starts by importing necessary libraries such as `java.io.*`, `java.lang.*`, `java.util.*`, and `java.math.*`. It then defines a class called `Maximum` with a static method named `maximum`.\n\nHere's how it works:\n\n1. The method accepts two parameters:\n   - `arr`: a list of integers.\n   - `k`: an integer representing the number of largest elements to return.\n\n2. Inside the method, there is a comment explaining the problem and providing examples as test cases.\n\n3. The actual logic for finding the `k` largest numbers from the array begins. To achieve this, we use a priority queue (a type of data structure that automatically organizes its elements in a certain order) to efficiently sort the numbers.\n\n4. A priority queue is created with the help of `PriorityQueue<Integer>` class and it will store negative values because when using a max-heap, all the largest elements will be at the root. So, by storing negative values, we effectively achieve min-heap behavior.\n\n5. The method then iterates through each element in the input list `arr`, adding its negated value to the priority queue. This way, only the largest elements contribute to the heap and the smallest of these will end up being at the root of the heap.\n\n6. After populating the priority queue with `k` largest numbers (by using the `poll()` method), all negative values are converted back by negating them again. This is done because we initially stored their negated versions in the queue to facilitate min-heap behavior.\n\n7. Finally, a sorted list containing these `k` largest elements is created and returned as the output. The numbers are already sorted due to the nature of the priority queue, which automatically ensures they are arranged from smallest to largest."}
{"task_id": "java/55", "language": "java", "completion": "import java.util.*;\n\nclass AddElements {\n   public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for(int i=0;i<k;i++){\n        if(arr.get(i)<100 && arr.get(i)>-99){\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n   }\n\n   public static void main(String[] args) {\n    List<Integer> arr = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n    int k = 4;\n    System.out.println(addElements(arr, k)); // Output: 24\n   }\n}"}
{"task_id": "java/56", "language": "java", "completion": "int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int intersectionLength = end - start + 1;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        result.add(1);\n        if (n == 0) return result;\n        result.add(3);\n        if (n == 1) return result;\n\n        // Initialize base cases for odd and even values of n\n        List<Integer> trib = new ArrayList<>();\n        trib.add(2); // tri(1) = 1 + (1 / 2) = 1 + 0.5 = 1.5 (rounded down to 1)\n        trib.add(3); // tri(2) = 1 + (2 / 2) = 2\n\n        // Generate the rest of the sequence\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                trib.add((int)(Math.pow(1 + i / 2.0, 2)));\n            } else {\n                int next = trib.get(i - 1) + trib.get(i - 2) + trib.get(trib.size()-1);\n                trib.add(next);\n            }\n        }\n\n        // Convert integers to Numbers and add them to the result list\n        for (int num : trib) {\n            result.add((Number)num);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public class Digits {\n    public static void main(String[] args) {\n        System.out.println(digits(1));  // Output: 1\n        System.out.println(digits(4));  // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n\n    public static int digits(int n) {\n        int result = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                result *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? result : 0;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.util.*;\n\npublic class IsNested {\n    public static boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (stack.size() > 0 && stack.peek() == '[') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(isNested(\"[][]\")); // false\n        System.out.println(isNested(\"[]\")); // false\n        System.out.println(isNested(\"[[][]]\")); // true\n        System.out.println(isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "public static int sumSquares(List<Number> lst) {\n    int result = 0;\n    for (Number num : lst) {\n        result += Math.pow(Math.ceil(num.doubleValue()), 2);\n    }\n    return result;\n}"}
{"task_id": "java/61", "language": "java", "completion": "public class CheckIfLastCharIsALetter {\n  public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt == null || txt.isEmpty()) {\n      return false;\n    }\n\n    char lastChar = txt.charAt(txt.length() - 1);\n\n    // Check if the last character is a letter and not part of a word\n    if (Character.isLetter(lastChar)) {\n      if (txt.length() == 1) {\n        return true; // The string consists only of one character, which is a letter\n      } else if (!Character.isLetterOrDigit(txt.charAt(txt.length() - 2))) {\n        // Check if the second last character is not a digit or letter\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\n    System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n    System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n    System.out.println(checkIfLastCharIsALetter(\"\")); // \u279e False\n  }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    /**\n     * \n     * Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zu\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n     * \n     * Beispiele:\n     * \n     * canArrange([1,2,4,3,5]) = 3\n     * canArrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Integer> arr) {\n        int resultIndex = -1;\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                resultIndex = i;\n                break;\n            }\n        }\n        return resultIndex;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(canArrange(Arrays.asList(1, 2, 3))); // Output: -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "if (lst.isEmpty()) {\n            return Arrays.asList(null, null);\n        }\n\n        int minPositive = Integer.MAX_VALUE;\n        Integer maxNegative = null;\n\n        for (Object element : lst) {\n            if (element instanceof Integer) {\n                int num = (Integer) element;\n                if (num > 0 && num < minPositive) {\n                    minPositive = num;\n                } else if (num < 0 && (maxNegative == null || num > maxNegative)) {\n                    maxNegative = num;\n                }\n            }\n        }\n\n        if (maxNegative == null) {\n            maxNegative = null;\n        } else if (minPositive == Integer.MAX_VALUE) {\n            minPositive = null;\n        }\n\n        return Arrays.asList(maxNegative, minPositive);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // [null, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // [null, null]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "public static long specialFactorial(int n) {\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n// Helper method to calculate the factorial of a number\nprivate static long factorial(int num) {\n    long fact = 1;\n    for (int i = 2; i <= num; i++) {\n        fact *= i;\n    }\n    return fact;\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        return String.join(\" \", primeLengthWords);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "import java.math.BigInteger;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] parts1 = x.split(\"/\");\n        String[] parts2 = n.split(\"/\");\n        \n        // Convert string numbers to BigInteger for accurate calculations\n        BigInteger numerator1 = new BigInteger(parts1[0]);\n        BigInteger denominator1 = new BigInteger(parts1[1]);\n        BigInteger numerator2 = new BigInteger(parts2[0]);\n        BigInteger denominator2 = new BigInteger(parts2[1]);\n        \n        // Calculate the product of the fractions\n        BigInteger productNumerator = numerator1.multiply(numerator2);\n        BigInteger productDenominator = denominator1.multiply(denominator2);\n\n        // Check if the product is an integer by dividing it by its gcd\n        BigInteger gcd = productNumerator.gcd(productDenominator);\n        return gcd.equals(productDenominator);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(simplify(\"1/5\", \"5/1\")); // True\n        System.out.println(simplify(\"1/6\", \"2/1\")); // False\n        System.out.println(simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\nclass OrderByPoints {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        // Function to calculate sum of digits of a number\n        Function<Integer, Integer> sumDigits = n -> {\n            int sum = 0;\n            n = Math.abs(n); // Make sure the number is positive for correct digit calculation\n            while (n > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            return sum;\n        };\n\n        // Sorting list of integers based on sum of digits, and then using original index as a tiebreaker\n        List<Integer> sortedList = nums.stream()\n                                       .sorted(Comparator.comparingInt(sumDigits)\n                                          .thenComparingInt(nums::indexOf))\n                                       .collect(Collectors.toList());\n\n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(orderByPoints(Arrays.asList(1, 11, -1, -11, -12))); // Output: [-1, -11, 1, -12, 11]\n        System.out.println(orderByPoints(new ArrayList<>())); // Output: []\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "public class SpecialFilter {\n    public static int specialFilter(ArrayList<Integer> nums) {\n        int count = 0;\n        for (Integer num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(Math.abs(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean IsFirstAndLastDigitOdd(int n) {\n        String numStr = String.valueOf(n);\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int LastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        return (FirstDigit % 2 != 0) && (LastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> list1 = new ArrayList<Integer>(Arrays.asList(15, -73, 14, -15));\n        System.out.println(specialFilter(list1)); // Output: 1\n\n        ArrayList<Integer> list2 = new ArrayList<Integer>(Arrays.asList(33, -2, -3, 45, 21, 109));\n        System.out.println(specialFilter(list2)); // Output: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "public static int getMaxTriples(int n) {\n    int[] a = new int[n];\n    for (int i = 1; i <= n; i++) {\n        A[i - 1] = i * i - i + 1;\n    }\n    int count = 0;\n    for (int i = 0; i < A.length; i++) {\n        for (int j = i + 1; j < A.length; j++) {\n            for (int k = j + 1; k < A.length; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>(); // Return an empty list if either planet name is invalid.\n        }\n\n        List<String> result = new ArrayList<>();\n        if (index1 > index2) {\n            // Ensure index1 is always less than index2 for correct range extraction.\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // Expected: [\"Saturn\", \"Uranus\"]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // Expected: [\"Venus\"]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // Expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Test the function with provided data points\n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12)); // Should return 34\n        System.out.println(xOrY(15, 8, 5)); // Should return 5\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.*;\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num % 2 != 0 && num >= 0) {\n                    sum += Math.pow(num, 2);\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "public static String strongestExtension(String className, List<String> extensions) {\n        // Initialisiere die st\u00e4rkste Erweiterung und die St\u00e4rke mit dem Wert von Integer.MIN_VALUE\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtName = \"\";\n\n        // Iteriere durch die Liste der Erweiterungen\n        for (String ext : extensions) {\n            // Berechne die Anzahl der Grossbuchstaben und Kleinbuchstaben in der Erweiterung\n            int capCount = 0;\n            int smCount = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            // Berechne die St\u00e4rke der Erweiterung und vergleiche sie mit der aktuellen st\u00e4rksten St\u00e4rke\n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtName = ext;\n            } else if (strength == maxStrength) {\n                // Wenn die St\u00e4rke der aktuellen Erweiterung gleich der st\u00e4rksten St\u00e4rke ist, \u00fcberpr\u00fcfe die Position in der Liste\n                int index = extensions.indexOf(ext);\n                if (index < extensions.indexOf(strongestExtName)) {\n                    strongestExtName = ext;\n                }\n            }\n        }\n\n        // Konstruiere den finalen String und f\u00fcge die Klasse und die st\u00e4rkste Erweiterung hinzu\n        return className + \".\" + strongestExtName;\n    }"}
{"task_id": "java/74", "language": "java", "completion": "import java.util.*;\n\nclass CycpatternCheck {\n    public static boolean cycpatternCheck(String A, String B) {\n        // Concatenate A with itself to handle rotations\n        String doubledA = A + A;\n\n        // Check if B is a substring of the doubled string A\n        return doubledA.contains(B);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "class IntToMiniRoman {\n   public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // Outputs: 'xix'\n        System.out.println(intToMiniRoman(152)); // Outputs: 'clii'\n        System.out.println(intToMiniRoman(426)); // Outputs: 'cdxxvi'\n    }\n\n    public static String intToMiniRoman(int number) {\n        LinkedHashMap<Integer,String> romanNumerals = new LinkedHashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        StringBuilder roman = new StringBuilder();\n        for (Map.Entry<Integer,String> entry : romanNumerals.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n        return roman.toString().toLowerCase();\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "public static Boolean rightAngleTriangle(int A, int b, int c) {\n    // Sortiere die Seitengr\u00f6\u00dfe in aufsteigender Reihenfolge\n    int[] sides = {A, b, c};\n    Arrays.sort(sides);\n\n    // \u00dcberpr\u00fcfe ob der Quadrat der Summe der zwei kleineren Seiten mit dem Quadrat des gr\u00f6\u00dften Seitengr\u00f6\u00dfes gleich ist\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}"}
{"task_id": "java/77", "language": "java", "completion": "import java.util.*;\n\nclass Solve {\n    /**\n     * \n     * You receive a string s.\n     * If s[i] is a letter, flip its case or reverse the case, or change it to the other case.\n     * Otherwise leave it as is.\n     * If the string contains no letters, return the reversed string.\n     * The function should return the resulting string.\n     * Examples\n     * \n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n        if (s.isEmpty() || !s.matches(\".*[a-zA-Z].*\")) {\n            // If the string is empty or contains no letters, reverse the whole string\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            // Otherwise, iterate through the string and flip each letter's case if it's a letter\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                } else {\n                    // Non-letter characters are appended without changes\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solve(\"ab\"));   // Output: \"AB\"\n        System.out.println(solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.*;\n\npublic class StringToMd5 {\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n\n            // F\u00fcgen wir nulls vor links hinzu, bis die Hashl\u00e4nge 32 Zeichen betragen hat\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n\n            return hashtext;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass GenerateIntegers {\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        // Ensure that a is always less than or equal to b\n        if (a > b) {\n            int temp = a;\n            A = b;\n            b = temp;\n        }\n\n        for (int i = Math.max(a, 2); i <= b; i++) {\n            if (i % 2 == 0) { // Check if the number is even\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8));  // Output: [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2));  // Output: [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // Output: []\n    }\n}"}

{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations : List<Any>) : Boolean {\n    var balance = 0\n    for (operation in operations) {\n        if (operation is Int) { // Check if the operation is an integer (deposit or withdrawal)\n            balance += operation // Update balance for deposits and withdrawals\n            if (balance < 0) { // Check if the balance goes below zero\n                return true // Return True immediately if balance goes below zero\n            }\n        } else {\n            println(\"Invalid operation: $operation\") // Print error message for invalid operations\n        }\n    }\n    return false // Return False if balance never goes below zero\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers : List<Any>) : Pair<Int, Int> {\n    var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        if (number is Int) {\n            sum += number\n            product *= number\n        }\n    }\n\n    return Pair(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(A: String, B: String): String {\n    var result = \"\"\n    for (i in A.indices) {\n        result += if ((A[i] == '1') xor (B[i] == '1')) \"1\" else \"0\"\n    }\n    return result\n}\n\nfun main(args: Array<String>) {\n    println(stringXor(\"010\", \"110\"))  // Outputs: 100\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<Any>): String? {\n    if (strings.isEmpty()) return null\n\n    var maxLength = 0\n    var longestString: String? = null\n\n    for (str in strings) {\n        if (str is String && str.length > maxLength) {\n            maxLength = str.length\n            longestString = str\n        }\n    }\n\n    return longestString\n}\n\nfun main() {\n    println(longest(listOf())) // null\n    println(longest(listOf(\"A\", \"b\", \"c\"))) // A\n    println(longest(listOf(\"A\", \"bb\", \"ccc\"))) // ccc\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(A : Int, B : Int) : Int {\n    // Base Case\n    if (B == 0) return A\n\n    return greatestCommonDivisor(B, A % B)\n}\n\nfun main() {\n    println(greatestCommonDivisor(3, 5)) // Output: 1\n    println(GreatestCommonDivisor(25, 15)) // Output: 5\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numberWords = listOf(\"null\", \"eins\", \"zwei\", \"drei\", \"vier\", \"f\u00fcnf\", \"sechs\", \"sieben\", \"acht\", \"neun\")\n    val sortedNumbers = numbers.split(' ')\n        .map { numberWords.indexOf(it) } // Map each word to its index in the list of number words\n        .sorted() // Sort the indices\n        .map { numberWords[it] } // Map the sorted indices back to their corresponding words\n\n    return sortedNumbers.joinToString(\" \") // Join the sorted words with a space and return\n}\n\nfun main(args: Array<String>) {\n    println(sortNumbers(\"three one five\")) // Outputs: 'one three five'\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers : List<Double>): List<Double> {\n    val min = numbers.minOrNull() ?: return emptyList()\n    val max = numbers.maxOrNull() ?: return emptyList()\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(s: String): String {\n    return s.map { if (it.isLowerCase()) it.toUpperCase() else It.toLowerCase() }.joinToString(\"\")\n}\n\nfun main() {\n    println(flipCase('Hello'))  // Output: 'hELLO'\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(numbers: List<Int>): List<Int> {\n    return numbers.filter { it > 0 }\n}\n\nfun main() {\n    println(getPositive(listOf(-1, 2, -4, 5, 6))) // Output: [2, 5, 6]\n    println(getPositive(listOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) // Output: [5, 3, 2, 3, 9, 123, 1]\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false // Einf\u00fchrung von \"0\" und \"1\" als ung\u00fcltig\n\n    for (i in 2 until n) {\n        if (n % i == 0) return false // Pr\u00fcfen, ob die Zahl durch ein Zahl von 2 bis (n-1) geteilt werden kann\n    }\n\n    return true // Wenn keine Teiler gefunden werden konnten, ist die Zahl eine Primzahl\n}\n\n// Testfunktionen\nprintln(isPrime(6)) // false\nprintln(isPrime(101)) // true\nprintln(isPrime(11)) // true\nprintln(isPrime(13441)) // true\nprintln(isPrime(61)) // true\nprintln(isPrime(4)) // false\nprintln(isPrime(1)) // false"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    val set = mutableSetOf<Int>()\n    for (element in l) {\n        set.add(element)\n    }\n    return set.toList().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun fibonacci(n: Int): Long {\n    var a = 1L\n    var B = 1L\n    for (i in 2 until n) {\n        val C = A + B\n        A = B\n        B = C\n    }\n    return if (n == 0 || n == 1) 1 else B\n}\n\nfun primeFib(n: Int): Long {\n    var found = 0\n    var i = 1\n    while (true) {\n        val fibNum = fibonacci(i)\n        if (isPrime(fibNum.toInt())) {\n            found++\n            if (found == n) return fibNum\n        }\n        i++\n    }\n}\n\n//Test cases\nprintln(primeFib(1)) //2\nprintln(primeFib(2)) //3\nprintln(primeFib(3)) //5\nprintln(primeFib(4)) //13\nprintln(primeFib(5)) //89"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l : List<Int>) : Boolean {\n    val n = l.size\n    for (i in 0 until n) {\n        for (j in i + 1 until n) {\n            for (k in j + 1 until n) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l : List<Int>) : Boolean {\n    // Erstelle eine HashMap, um die Elemente der Liste zu speichern\n    val map = mutableMapOf<Int, Int>()\n\n    // Iteriere \u00fcber die Liste\n    for (i in l) {\n        // Wenn -i in der HashMap ist, dann gibt es ein Paar, das sich negativ einander ergibt\n        if (map[-i] != null) {\n            return true\n        } else {\n            // F\u00fcge das Element in die HashMap hinzu\n            map[i] = i\n        }\n    }\n\n    // Wenn wir durch die Liste iteriert sind und noch keine negativen Paare gefunden haben, dann gibt es keine Paare, die sich negativ einander ergibt\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n == 0 || n == 1 || n == 3) return 0\n    if (n == 2) return 2\n\n    var a = 0 // Fib4(0)\n    var B = 0 // Fib4(1)\n    var C = 2 // Fib4(2)\n    var D = 0 // Fib4(3)\n\n    for (i in 4..n) {\n        val E = A + B + C + D\n        A = B\n        B = C\n        C = D\n        D = E\n    }\n\n    return D\n}\n\n// Test cases\nfun main() {\n    println(fib4(5)) // Output: 4\n    println(fib4(6)) // Output: 8\n    println(fib4(7)) // Output: 14\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n\n    return if (size % 2 == 0) {\n        // If list size is even, average the two middle elements\n        (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0\n    } else {\n        // If list size is odd, return the middle element\n        sortedList[size / 2]\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text : String) : String {\n    val vowels = setOf('a', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u')\n    return text.filter { !vowels.contains(it) }\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "/**\n * You are an experienced Kotlin programmer and here is your task.\n * Return true if all numbers in the list l are below the threshold t.\n * >>> belowThreshold(listOf(1, 2, 4, 10), 100)\n * True\n * >>> belowThreshold(listOf(1, 20, 4, 10), 5)\n * False\n */\nfun belowThreshold(l : List<Int>, t : Int) : Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "val sum = x + y\n    return sum\n}\n\n// Testen der Funktion\nprintln(add(2, 3)) // Output: 5\nprintln(add(5, 7)) // Output: 12"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    val sortedS0 = s0.toCharArray().sorted()\n    val sortedS1 = s1.toCharArray().sorted()\n    return sortedS0.contentEquals(sortedS1)\n}\n\nfun main() {\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")) // true\n    println(sameChars(\"abcd\", \"dddddddabc\")) // true\n    println(sameChars(\"dddddddabc\", \"abcd\")) // true\n    println(sameChars(\"eabcd\", \"dddddddabc\")) // false\n    println(sameChars(\"abcd\", \"dddddddabce\")) // false\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")) // false\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 0) return 0 // Fibonacci-Folge beginnt bei 1\n    if (n == 1) return 1\n\n    var prev = 0\n    var curr = 1\n    for (i in 2..n) {\n        val next = prev + curr\n        prev = curr\n        curr = next\n    }\n    return curr\n}\n\n// Testfunktion zum Validieren der Funktion\nfun main() {\n    println(fib(10)) // Expected: 55\n    println(fib(1))  // Expected: 1\n    println(fib(8))  // Expected: 21\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Any>): List<Int> {\n    val set1 = l1.toSet() // Umwandlung von List in Set, um Duplikate zu entfernen\n    val set2 = l2.filterIsInstance<Int>().toSet() // Umwandlung von List mit Any auf List mit Int und Umwandlung in Set\n\n    // Schnittmenge von Sets berechnen und ergebnis als neues Set zur\u00fcckgeben\n    return (set1 intersect set2).toList()\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n : Int) : Int {\n    var num = n\n    var maxPrime = -1\n\n    // Divide num by 2 to remove all even factors\n    while (num % 2 == 0) {\n        maxPrime = 2\n        num /= 2\n    }\n\n    // Now num must be odd, start loop from 3 and try all possible odd numbers till sqrt(num)\n    for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n        while (num % i == 0) {\n            maxPrime = i\n            num /= i\n        }\n    }\n\n    // If num is a prime number greater than 2\n    if (num > 2)\n        maxPrime = num\n\n    return maxPrime\n}\n\nfun main() {\n    println(largestPrimeFactor(13195))  // Output: 29\n    println(largestPrimeFactor(2048))   // Output: 2\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n : Int) : Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    return xs.drop(1).mapIndexed { index, coefficient -> coefficient * (index + 1) }\n}\n\n// Test cases\nprintln(derivative(listOf(3, 1, 2, 4, 5))) // Output: [1, 4, 12, 20]\nprintln(derivative(listOf(1, 2, 3)))       // Output: [2, 6]"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 1\n\n    var a = 0, B = 0, C = 1, D = 1\n\n    for (i in 3..n) {\n        D = A + B + C\n        A = B\n        B = C\n        C = D\n    }\n\n    return D\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var count = 0\n\n    for (char in s.lowercase()) {\n        if (vowels.contains(char)) {\n            count++\n        }\n    }\n\n    // Check if 'y' is at the end of the word and consider it as a vowel\n    if (s.endsWith('y') || s.endsWith('Y')) {\n        count++\n    }\n\n    return count\n}\n\nfun main() {\n    println(vowelsCount(\"abcde\")) // Output: 2\n    println(vowelsCount(\"ACEDY\")) // Output: 3\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    val frequencyMap = lst.groupingBy { it }.eachCount() // Create a map with each number and its frequency\n\n    return frequencyMap.filterValues { it >= it && it > 0 } // Filter only numbers that have a frequency greater than or equal to their value and are greater than zero\n        .maxOrNull()?.key ?: -1 // Find the maximum key (number) or return -1 if none exist\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b <= c || A + c <= b || B + c <= a) {\n        return -1.0\n    } else {\n        val s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n}\n\n// Testen der Funktion\nprintln(triangleArea(3, 4, 5).format(\"%.2f\")) // Expected output: 6.00\nprintln(triangleArea(1, 2, 10).format(\"%.2f\")) // Expected output: -1.0"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list is palindromic\n    if (q != q.reversed()) return false\n\n    // Calculate the sum of elements in the list\n    val sum = q.sum()\n\n    // Check if the sum is less than or equal to the maximum weight\n    return sum <= w\n}\n\nfun main(args: Array<String>) {\n    println(willItFly(listOf(1, 2), 5)) // false\n    println(willItFly(listOf(3, 2, 3), 1)) // false\n    println(willItFly(listOf(3, 2, 3), 9)) // true\n    println(willItFly(listOf(3), 5)) // true\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a : Int) : Boolean {\n    // Helper function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    // Check if the number can be divided by exactly three prime numbers\n    var count = 0\n    for (i in 2..a-1) {\n        if (isPrime(i) && a % i == 0) {\n            count++\n            A /= i\n            // Check if the remaining number is also prime and not equal to 1\n            if (isPrime(A) && A != 1) count++\n            break // Found three prime factors, no need to continue\n        }\n    }\n\n    return count == 3\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    val binary = Integer.toBinaryString(decimal).replace(\"0b\", \"\")\n    return \"db$binary$db\"\n}\n\nfun main() {\n    println(decimalToBinary(15))  // Output: db1111db\n    println(decimalToBinary(32))  // Output: db100000db\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) return false\n\n    // Iterate over the string and compare every group of 3 consecutive characters\n    for (i in 0..s.length - 3) {\n        // If any group of 3 consecutive characters are not distinct, return false\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n\n    // If all groups of 3 consecutive characters are distinct, return true\n    return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    return grades.map { grade ->\n        when (grade) {\n            in 4.0..5.0 -> \"A+\"\n            in 3.7..4.0 -> \"A\"\n            in 3.3..3.7 -> \"A-\"\n            in 3.0..3.3 -> \"B+\"\n            in 2.7..3.0 -> \"B\"\n            in 2.3..2.7 -> \"B-\"\n            in 2.0..2.3 -> \"C+\"\n            in 1.7..2.0 -> \"C\"\n            in 1.3..1.7 -> \"C-\"\n            in 1.0..1.3 -> \"D+\"\n            in 0.7..1.0 -> \"D\"\n            in 0.0..0.7 -> \"D-\"\n            else -> \"E\"\n        }\n    }\n}\n\nfun main() {\n    val grades = listOf(4.0, 3, 1.7, 2, 3.5)\n    println(numericalLetterGrade(grades))  // ['A+', 'B', 'C-', 'C', 'A-']\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2 until number) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun primeLength(string : String) : Boolean {\n    val length = string.length\n    return isPrime(length)\n}\n\n// Test cases\nprintln(primeLength(\"Hello\")) // True\nprintln(primeLength(\"abcdcba\")) // True\nprintln(primeLength(\"kittens\")) // True\nprintln(primeLength(\"orange\")) // False"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    var sum = 0\n    var tempN = n\n\n    while (tempN > 0) {\n        sum += tempN % 10\n        tempN /= 10\n    }\n\n    return Integer.toBinaryString(sum)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst : List<List<Int>>, x : Int) : List<Pair<Int, Int>> {\n    val coordinates = mutableListOf<Pair<Int, Int>>()\n    for ((i, row) in lst.withIndex()) {\n        for ((j, num) in row.withIndex()) {\n            if (num == x) {\n                coordinates.add(Pair(i, j))\n            }\n        }\n    }\n    return coordinates.sortedWith(compareBy({it.first}, {-it.second}))\n}\n\nfun main() {\n    val lst = listOf(listOf(1,2,3,4,5,6), listOf(1,2,3,4,1,6), listOf(1,2,3,4,5,1))\n    println(getRow(lst, 1)) // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n    val emptyList = listOf<List<Int>>()\n    println(getRow(emptyList, 1)) // []\n\n    val lst2 = listOf(listOf(), listOf(1), listOf(1, 2, 3))\n    println(getRow(lst2, 3)) // [(2, 2)]\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "val uniqueList = lst.filterIsInstance<Int>().toHashSet() // remove duplicates and convert to set\n    if (uniqueList.size < 2) return null // if there are less than 2 unique elements, return null\n    return uniqueList.sorted().drop(1).first() // Return the second smallest element\n}\n\nfun main() {\n    println(nextSmallest(listOf(1, 2, 3, 4, 5))) // prints: 2\n    println(nextSmallest(listOf(5, 1, 4, 3, 2))) // prints: 2\n    println(nextSmallest(emptyList<Any>())) // prints: null\n    println(nextSmallest(listOf(1, 1))) // prints: null\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(input: String): Int {\n    val sentences = input.split('.').map { it.trim() }.filterNot { it.isEmpty() }\n    var boredCount = 0\n\n    for (sentence in sentences) {\n        if (sentence.startsWith(\"I\", true)) {\n            boredCount++\n        }\n    }\n\n    return boredCount\n}\n\nfun main(args: Array<String>) {\n    println(isBored(\"Hello world\")) // Output: 0\n    println(isBored(\"The sky is blue. The sun is shining. I love this weather\")) // Output: 1\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "import kotlin.math.sqrt\n\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun sumOfDigits(num: Int): Int {\n    var sum = 0\n    var temp = num\n    while (temp != 0) {\n        sum += temp % 10\n        temp /= 10\n    }\n    return sum\n}\n\nfun skjkasdkd(lst: List<Int>): Int {\n    var maxPrime = -1\n\n    for (num in lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num\n        }\n    }\n\n    return if (maxPrime == -1) 0 else sumOfDigits(maxPrime)\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict : Map<Any?, Any?>) : Boolean {\n    if (dict.isEmpty()) return false  // Check if the dictionary is empty\n\n    val allUpper = dict.keys.all { it as? String?.isUpperCase() ?: false }\n    val AllLower = dict.keys.all { It as? String?.isLowerCase() ?: false }\n\n    return AllUpper || AllLower\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    val floorValue = Math.floor(number).toInt()\n    val ceilValue = Math.ceil(number).toInt()\n    return if (Math.abs(number - floorValue) <= Math.abs(number - ceilValue)) floorValue else ceilValue\n}\n\nfun main(args: Array<String>) {\n    println(closestInteger(\"10\")) // should print 10\n    println(closestInteger(\"15.3\")) // Should print 15\n    println(closestInteger(\"14.5\")) // Should print 15\n    println(closestInteger(\"-14.5\")) // Should print -15\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    var currentStones = n\n    val pile = mutableListOf<Int>()\n\n    for (i in 0 until n) {\n        pile.add(currentStones)\n        // Wenn die aktuelle Anzahl an Steinen ungerade ist, addiere 2, wenn gerade, addiere 1\n        currentStones += if (currentStones % 2 == 0) 1 else 2\n    }\n\n    return pile\n}\n\nfun main() {\n    println(makeAPile(3)) // [3, 5, 7]\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    // Entfernen der Kommas aus dem String, indem sie durch Leerzeichen ersetzt werden\n    val stringWithoutCommas = s.replace(\",\", \" \")\n\n    // Aufteilen des Strings in W\u00f6rter und erzeugen eines Arrays aus diesen W\u00f6rtern\n    val wordsArray = stringWithoutCommas.split(\" \".toRegex()).filter { it != \"\" }.map { it }\n\n    return wordsArray\n}\n\nfun main() {\n    // Testen der Funktion mit den angegebenen Beispielen\n    println(wordsString(\"Hi, My name is John\")) // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    println(wordsString(\"One, two, three, four, five, six\")) // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    if (y < x) return -1\n\n    // Suche absteigende Zahl, die >= x ist und gerade ist\n    for (i in y downTo x) {\n        if (i % 2 == 0) return i\n    }\n\n    return -1 // Wenn keine gerade Zahl im Bereich gefunden wurde\n}\n\n// Testfunktion\nfun check() {\n    assert(chooseNum(12, 15) == 14)\n    assert(chooseNum(13, 12) == -1)\n    println(\"All tests passed.\")\n}\n\ncheck()"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) return -1\n\n    val sum = n + m\n    val count = (m - n + 1).toDouble()\n    val avg = Math.round((sum / count)).toString(2)\n\n    return \"0b$avg\"\n}\n\nfun main() {\n    println(roundedAvg(1, 5))  // \"0b11\"\n    println(roundedAvg(7, 5))  // -1\n    println(roundedAvg(10, 20)) // \"0b1111\"\n    println(roundedAvg(20, 33)) // \"0b11010\"\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            // i ist gerade, f\u00fcge die Fakult\u00e4t von i hinzu\n            var factorial = 1\n            for (j in 1..i) {\n                factorial *= j\n            }\n            result.add(factorial)\n        } else {\n            // i ist ungerade, f\u00fcge die Summe von 1 bis i hinzu\n            var sum = 0\n            for (j in 1..i) {\n                sum += j\n            }\n            result.add(sum)\n        }\n    }\n\n    return result\n}\n\n// Testen der Funktion\nfun main() {\n    println(f(5)) // [1, 2, 6, 24, 15]\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n : Int) : Pair<Int, Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    for(i in 1..n){\n        if(isPalindrome(i)){\n            if(i % 2 == 0){\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return Pair(evenCount, oddCount)\n}\n\nfun isPalindrome(number: Int): Boolean {\n    val str = number.toString()\n    return str == str.reversed()\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n\n    // Find the index of the first element that is smaller than its previous element\n    val breakPoint = arr.indexOfFirst { it < arr[it - 1] }\n\n    // If there's no such element, the array is already sorted\n    if (breakPoint == -1) return true\n\n    // Check if the rest of the array is sorted and rotated\n    return arr.drop(breakPoint + 1).plus(arr.take(breakPoint)) == arr.sorted() &&\n            arr[0] <= arr[arr.size - 1]\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddNumbersInLst1 = lst1.filter { it % 2 != 0 }\n    val evenNumbersInLst2 = lst2.filter { It % 2 == 0 }\n\n    if (oddNumbersInLst1.size <= evenNumbersInLst2.size) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "val resultString = s.filterNot { it in c }.toString()\n    val isPalindrome = resultString == resultString.reversed()\n    return listOf(resultString, isPalindrome)\n}\n\nfun main() {\n    println(reverseDelete(\"abcde\", \"ae\")) // ['bcd', false]\n    println(reverseDelete(\"abcdef\", \"b\")) // ['acdef', false]\n    println(reverseDelete(\"abcdedcba\", \"ab\")) // ['cdedc', true]\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n    var totalBucketActions = 0 // Initialize the count of bucket actions\n\n    // Iterate over each well in the grid\n    for (well in grid) {\n        val waterUnitsInWell = well.count { it == 1 } // Count the number of water units in the current well\n\n        // Calculate how many times the bucket needs to be lowered for the current well\n        totalBucketActions += ceil(waterUnitsInWell.toDouble() / capacity).toInt() // Use ceiling division to round up to the nearest whole number\n    }\n\n    return totalBucketActions\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    if (s.isEmpty()) return emptyList()\n\n    val words = s.split(\"\\\\s+\".toRegex())\n    val result = mutableListOf<String>()\n\n    for (word in words) {\n        val consonants = word.filterNot { it.isVowel() }.count()\n        if (consonants == n) {\n            result.add(word)\n        }\n    }\n\n    return result\n}\n\nfun Char.isVowel(): Boolean {\n    return when (this) {\n        'a', 'E', 'I', 'O', 'U', 'a'.toLowerCase(), 'E'.toLowerCase(), 'I'.toLowerCase(), 'O'.toLowerCase(), 'U'.toLowerCase() -> true\n        else -> false\n    }\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    // Sort the array in descending order using natural ordering\n    val sorted = arr.sortedDescending()\n\n    // Take the first k elements from the sorted list\n    return sorted.take(k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr : List<Int>, k : Int) : Int {\n    // Initialize sum variable with 0\n    var sum = 0\n\n    // Iterate over the first k elements of arr\n    for (i in 0 until Math.min(k, arr.size)) {\n        // Check if the current element has at most two digits\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            // If yes, add it to the sum\n            sum += arr[i]\n        }\n    }\n\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2..Math.sqrt(number.toDouble()).toInt()) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun intersectionLengthIsPrime(interval1: List<Int>, interval2: List<Int>): String {\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n    if (start > end) return \"NO\"\n\n    val length = end - start + 1\n    return if (isPrime(length)) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): List<Double> {\n    if (n < 0) {\n        throw IllegalArgumentException(\"Input must be a non-negative integer\")\n    }\n\n    val resultList = mutableListOf(1.0, 3.0, 2.0)\n\n    if (n == 0) return resultList\n    else if (n == 1) return listOf(1.0, 3.0, 2.0)\n\n    for (i in 3 until n + 1) {\n        val nextElement: Double = if ((i % 2) == 0) (i / 2.0) else (resultList[i - 1] + resultList[i - 2] + resultList[i + 1])\n        resultList.add(nextElement)\n    }\n\n    return resultList\n}\n\nfun main() {\n    println(\"Tribonacci sequence for n=3: ${tri(3)}\") // Outputs: [1.0, 3.0, 2.0, 8.0]\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var hasOddDigit = false\n\n    for (digit in n.toString()) {\n        val digitInt = Character.getNumericValue(digit)\n        if (digitInt % 2 != 0) {\n            product *= digitInt\n            hasOddDigit = true\n        }\n    }\n\n    return if (hasOddDigit) product else 0\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(s: String): Boolean {\n    var balance = 0\n    var hasNested = false\n\n    for (char in s) {\n        if (char == '[') {\n            balance++\n        } else if (char == ']') {\n            balance--\n            if (balance < 0) {\n                // Early exit if we find a closing bracket before an opening bracket\n                return false\n            } else if (balance > 0) {\n                // If balance is greater than 1, it means there's at least one nested pair\n                hasNested = true\n            }\n        }\n    }\n\n    // The string has valid brackets and at least one nested pair if hasNested is true\n    return hasNested && balance == 0\n}\n\nfun main() {\n    println(isNested(\"[[]]\")) // true\n    println(isNested(\"[]]]]]]][[[[[]\")) // false\n    println(isNested(\"[][]\")) // false\n    println(isNested(\"[]\")) // false\n    println(isNested(\"[[][]]\")) // true\n    println(isNested(\"[[]][[\")) // true\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    var sum = 0\n    for (item in lst) {\n        if (item is Double || item is Float) {\n            sum += Math.ceil((item as Number).toDouble()).toInt() * Math.ceil((item As Number).toDouble()).toInt()\n        } else if (item is Int) {\n            sum += Math.pow(item.toDouble(), 2.0).toInt()\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) return false\n\n    val lastChar = txt[txt.length - 1]\n\n    // Check if the last character is a letter and it's not part of a word\n    return lastChar.isLetter() && (txt.length == 1 || !txt[txt.length - 2].isLetter())\n}\n\nfun main(args: Array<String>) {\n    println(checkIfLastCharIsALetter(\"apple pie\")) // False\n    println(checkIfLastCharIsALetter(\"apple pi e\")) // True\n    println(checkIfLastCharIsALetter(\"apple pi e \")) // False\n    println(checkIfLastCharIsALetter(\"\")) // False\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Int>): Int {\n    for (i in arr.size - 2 downTo 0) {\n        if (arr[i] < arr[i + 1]) {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    val negativeIntegers = lst.filterIsInstance<Int>().filter { it < 0 }\n    val positiveIntegers = lst.filterIsInstance<Int>().filter { It > 0 }\n\n    val maxNegative = if (negativeIntegers.isNotEmpty()) negativeIntegers.maxOrNull() else null\n    val minPositive = If (positiveIntegers.isNotEmpty()) positiveIntegers.minOrNull() else null\n\n    return listOf(maxNegative, minPositive)\n}\n\n// Test cases\nprintln(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // Output: [null, 1]\nprintln(largestSmallestIntegers(emptyList())) // Output: [null, null]\nprintln(largestSmallestIntegers(listOf(0))) // Output: [null, null]"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    if (n <= 0) {\n        throw IllegalArgumentException(\"Input must be greater than zero\")\n    }\n\n    var result = 1\n    for (i in 1..n) {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    if (n == 0 || n == 1) {\n        return 1\n    } else {\n        var fact = 1\n        for (i in 2..n) {\n            fact *= i\n        }\n        return fact\n    }\n}\n\nfun main() {\n    println(specialFactorial(4)) // Output: 288\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n\n    var i = 3\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i += 2\n    }\n    return true\n}\n\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \").filter { isPrime(it.length) }\n    return if(words.isEmpty()) \"\" else words.joinToString(\" \")\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    val fractionX = x.split(\"/\").map { it.toInt() }\n    val fractionN = n.split(\"/\").map { it.toInt() }\n\n    val numeratorProduct = fractionX[0] * fractionN[0]\n    val denominatorProduct = fractionX[1] * fractionN[1]\n\n    return numeratorProduct % denominatorProduct == 0\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "import kotlin.math.abs\n\nfun digitSum(n: Int): Int = abs(n).toString().sum()\n\nfun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.filterIsInstance<Int>()\n               .withIndex()\n               .sortedBy { (index, number) -> Pair(digitSum(number), index) }\n               .map { it.value }\n}\n\nfun main() {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12))) // [-1, -11, 1, -12, 11]\n    println(orderByPoints(emptyList<Any>()))          // []\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    return nums.count {\n        it as? Int != null && it > 10 && (It % 2 != 0) && (\"$It\".first() in \"13579\" && \"$It\".last() in \"13579\")\n    }\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n : Int) : Int {\n    val a = Array(n) { i -> (i * i - i + 1)}\n    var count = 0\n    for(i in 0 until n-2){\n        for(j in i+1 until n-1){\n            for(k in j+1 until n){\n                if((A[i] + A[j] + A[k]) % 3 == 0) count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    if (index1 == -1 || index2 == -1) {\n        return emptyList()\n    }\n\n    val startIndex = minOf(index1, index2) + 1\n    val endIndex = maxOf(index1, index2)\n\n    return planets.subList(startIndex, endIndex).toList()\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2..number/2) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun xOrY(n: Int, x: Int, y: Int): Int {\n    return if (isPrime(n)) x else y\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    var sum = 0\n    for (item in lst) {\n        if (item is Int && item > 0 && item % 2 != 0) { // Check if the item is a positive odd integer\n            sum += item * item * 2 // Double the square of the number and add it to the sum\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var strongestExtension = \"\"\n    var maxStrength = Int.MIN_VALUE\n\n    for (extension in extensions) {\n        val upperCaseCount = extension.count { it.isUpperCase() }\n        val lowerCaseCount = extension.count { It.isLowerCase() }\n        val strength = upperCaseCount - lowerCaseCount\n\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        } else if (strength == maxStrength) {\n            // If two extensions have the same strength, pick the first one in the list\n            return \"$className.$extension\"\n        }\n    }\n\n    return \"$className.$strongestExtension\"\n}\n\nfun main() {\n    println(strongestExtension(\"my_class\", listOf(\"AA\", \"Be\", \"CC\"))) // Output: myClass.AA\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    val concatenated = a + A // Dupliziere den String A\n\n    // Check ob der String B als Substring in dem doppelten String A vorkommt\n    return concatenated.contains(b) && b.length <= A.length\n}\n\nfun main() {\n    println(cycpatternCheck(\"abcd\", \"abd\")) // False\n    println(cycpatternCheck(\"hello\", \"ell\")) // True\n    println(cycpatternCheck(\"whassup\", \"psus\")) // False\n    println(cycpatternCheck(\"abab\", \"baa\")) // True\n    println(cycpatternCheck(\"efef\", \"eeff\")) // False\n    println(cycpatternCheck(\"himenss\", \"simen\")) // True\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val romanNumerals = listOf(\n        Pair(\"M\", 1000),\n        Pair(\"CM\", 900),\n        Pair(\"D\", 500),\n        Pair(\"CD\", 400),\n        Pair(\"C\", 100),\n        Pair(\"XC\", 90),\n        Pair(\"L\", 50),\n        Pair(\"XL\", 40),\n        Pair(\"X\", 10),\n        Pair(\"IX\", 9),\n        Pair(\"V\", 5),\n        Pair(\"IV\", 4),\n        Pair(\"I\", 1)\n    )\n\n    var num = number\n    var roman = \"\"\n\n    for (pair in romanNumerals) {\n        while (num >= pair.second) {\n            roman += pair.first\n            num -= pair.second\n        }\n    }\n\n    return roman.toLowerCase()\n}\n\nfun main(args: Array<String>) {\n    println(intToMiniRoman(19))  // Output: xix\n    println(intToMiniRoman(152)) // Output: clii\n    println(intToMiniRoman(426)) // Output: cdxxvi\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "Um die L\u00e4nge der Seiten eines Dreiecks zu \u00fcberpr\u00fcfen, k\u00f6nnen wir die Pythagoras-Geradensform verwenden. Diese formuliert sich als:\n\na^2 + b^2 = c^2\n\nEin rechter Winkel entspricht der Winkelschwingung von 90 Grad in Radianten, also `\u03c0/2`. Wir k\u00f6nnen die Winkel berechnen, indem wir die L\u00e4nge der beiden Seite mit der L\u00e4nge des dritten Seiten quadrieren und dann addieren:\n\ncos(\u03b1) = a\u00b2 / (A + B + C)\ncos(\u03b2) = B\u00b2 / (A + B + C)\ncos(\u03b3) = C\u00b2 / (A + B + C)\n\nNach Umrechnung auf grad und mit 90 Grad vergleichen:\n\n\u03b1, \u03b2, \u03b3 \u2208 [0, 180]\ncos(\u03b1) \u2248 1.0\ncos(\u03b2) \u2248 1.0\ncos(\u03b3) \u2248 1.0 - sqrt(2)/2 \u2248 0.7071067812\n\nUm die L\u00e4nge der Seiten in Grad umzurechnen, k\u00f6nnen wir den Kosinus auf Werte von [0, 1] skalieren und den Arkustangens berechnen:\n\n\u03b1 = arccos((A\u00b2 / (A + B + C)))\n\u03b2 = arccos((B\u00b2 / (A + B + C)))\n\u03b3 = arccos((C\u00b2 / (A + B + C)))\n\nUm die Winkel zu vergleichen, k\u00f6nnen wir den Cosinus von 90 Grad auf 1.0 und von 0 Grad auf 0.0 setzen:\n\nif abs(\u03b1 - \u03c0/2) < epsilon && abs(\u03b2 - \u03c0/2) < epsilon && abs(\u03b3 - \u03c0/2) < epsilon {\n    return true // es handelt sich um ein rechtwinkliges Dreieck\n} else {\n    return false // es handelt sich um kein rechtwinkliges Dreieck\n}\n\nDieser Algorithmus pr\u00fcft, ob die Winkel von jedem Eckpunkt des Dreiecks auf der y-Achse in 90 Grad sind (alsocos(\u03b1) = cos(\u03b2) = cos(\u03b3) = 1.0). Eine Konstante `epsilon` sollte verwendet werden, um das Unterschied zwischen den Berechneten und exakten Cosinuswerten zu kontrollieren."}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    // Check if the string contains any letters\n    if (s.any { it.isLetter() }) {\n        // Convert the string by swapping the case of each letter\n        return s.map { \n            if (it.isUpperCase()) it.toLowerCase() else it.toUpperCase()\n        }.joinToString(\"\")\n    } else {\n        // If no letters are found, reverse the string\n        return s.reversed()\n    }\n}\n\nfun main(args: Array<String>) {\n    println(solve(\"1234\")) // Outputs: 4321\n    println(solve(\"ab\"))   // Outputs: AB\n    println(solve(\"#a@C\")) // Outputs: #A@c\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.math.BigInteger\nimport java.security.MessageDigest\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return null\n\n    val md = MessageDigest.getInstance(\"MD5\")\n    val messageDigest = md.digest(text.toByteArray())\n\n    return BigInteger(1, messageDigest).toString(16)\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a : Int, b : Int) : List<Int> {\n    val start = minOf(A, B) // Get minimum value between a and b \n    val end = maxOf(A, B) // Get maximum value between a and b\n\n    // Generate list of integers in range [start..end] with step 2 (i.e., only even numbers)\n    return (start..end step 2).toList()\n}"}

{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0L\n\n    for (operation in operations) {\n        if (operation is Int || operation is Long) {  // Check if the operation is a number\n            balance += operation  // Add the operation to the balance\n            if (balance < 0) return true // If the balance falls below zero, return True\n        }\n    }\n\n    return false // If no operation makes the balance fall below zero, return False\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Any>): Pair<Int, Int> {\n    var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        if (number is Int) {\n            sum += number\n            product *= number\n        }\n    }\n\n    return Pair(sum, product)\n}\n\n// Test the function\nprintln(sumProduct(listOf())) // Prints: (0, 1)\nprintln(sumProduct(listOf(1, 2, 3, 4))) // Prints: (10, 24)"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(A: String, B: String): String {\n    var result = \"\"\n    for (i in A.indices) {\n        // XOR operation on each character and append it to the result\n        result += if ((A[i] == '1') xor (B[i] == '1')) '1' else '0'\n    }\n    return result\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings : List<Any>) : String? {\n    return if (strings.isEmpty()) null else strings.maxBy { it as String }.toString()\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(A : Int, B : Int) : Int {\n    var a = A\n    var B = B\n\n    while (B != 0) {\n        val temp = B\n        B = A % B\n        A = temp\n    }\n\n    return A\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers : String) : String {\n    val numberMap = mapOf(\n        \"zero\" to 0, \"one\" to 1, \"two\" to 2, \"three\" to 3, \"four\" to 4,\n        \"five\" to 5, \"six\" to 6, \"seven\" to 7, \"eight\" to 8, \"nine\" to 9\n    )\n\n    val sortedNumbers = numbers.split(\" \").map { numberMap[it]!! }.sorted().map { numberMap.entries.find { it.value == it }?.key }.joinToString(\" \")\n\n    return sortedNumbers\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers : List<Double>) : List<Double> {\n    if (numbers.isEmpty() || numbers.size == 1) {\n        throw IllegalArgumentException(\"List must contain at least two elements\")\n    }\n\n    val min = numbers.minOrNull() ?: throw IllegalArgumentException(\"List contains only NaN or Infinity values\")\n    val max = numbers.maxOrNull() ?: throw IllegalArgumentException(\"List contains only NaN or Infinity values\")\n\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(s: String): String {\n    return s.map { if (it.isLowerCase()) it.toUpperCase() else It.toLowerCase() }.joinToString(\"\")\n}\n\n// Testing the function\nprintln(flipCase('Hello')) // Outputs 'hELLO'"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Int> {\n    return l.filterIsInstance<Int>().filter { it > 0 }\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun IsPrime(n: Int): Boolean {\n    if (n <= 1) return false // numbers less than or equal to 1 are not prime\n\n    for (i in 2 until n) {\n        if (n % i == 0) return false // if n is divisible by any number other than 1 and itself, it's not prime\n    }\n\n    return true // If none of the above conditions are met, then n is prime\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(list: List<Int>): List<Int> = list.toHashSet().toList().sorted()"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun main(args: Array<String>) {\n    println(primeFib(1)) // 2\n    println(primeFib(2)) // 3\n    println(primeFib(3)) // 5\n    println(primeFib(4)) // 13\n    println(primeFib(5)) // 89\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var fib1 = 0\n    var fib2 = 1\n    while (true) {\n        val fibNext = fib1 + fib2\n        fib1 = fib2\n        fib2 = fibNext\n\n        if (isPrime(fibNext)) {\n            count++\n            if (count == n) {\n                return fibNext\n            }\n        }\n    }\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    var i = 3\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i += 2\n    }\n    return true\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(list: List<Int>): Boolean {\n    for (i in 0 until list.size - 2) {\n        for (j in i + 1 until list.size - 1) {\n            val k = list.indexOf(-list[i] - list[j])\n            if (k > j) return true\n        }\n    }\n    return false\n}\n\nfun main() {\n    println(triplesSumToZero(listOf(1, 3, 5, 0))) // prints: false\n    println(triplesSumToZero(listOf(1, 3, -2, 1))) // prints: true\n    println(triplesSumToZero(listOf(1, 2, 3, 7))) // prints: false\n    println(triplesSumToZero(listOf(2, 4, -5, 3, 9, 7))) // prints: true\n    println(triplesSumToZero(listOf(1))) // prints: false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n : Int) : Int {\n    if (n < 2 || n % 2 == 1) return 0\n    if (n == 2) return 2\n\n    val dp = Array(n + 1) { 0 }\n\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 2\n    for (i in 3..n) {\n        if (i % 2 == 0) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n        } else {\n            dp[i] = dp[i - 1]\n        }\n    }\n\n    return dp[n]\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        // If the list has an even number of elements, return the average of the two middle ones\n        (sortedList[sortedList.size / 2 - 1] + sortedList[sortedList.size / 2]) / 2.0\n    } else {\n        // If the list has an odd number of elements, return the middle one\n        sortedList[sortedList.size / 2]\n    }\n}\n\nfun main() {\n    println(median(listOf(3, 1, 2, 4, 5))) // Output: 3\n    println(median(listOf(-10, 4, 6, 1000, 10, 20))) // Output: 15.0\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String = text.replace(\"[aeiouAEIOU]\".toRegex(), \"\")"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "fun add(x : Int, y : Int) : Int {\n    return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    val set0 = s0.toSet()\n    val set1 = s1.toSet()\n    return set0 == set1\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1 : List<Int>, l2 : List<Int>) : List<Int> {\n    val set1 = HashSet<Int>(l1) // Convert list to set for O(1) lookups\n    val result = mutableListOf<Int>()\n\n    for (num in l2) {\n        if (set1.contains(num) && !result.contains(num)) {\n            result.add(num) // Add unique common elements to the result list\n        }\n    }\n\n    return result.sorted() // Return sorted list of unique common elements\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var number = n\n    var factor = 2\n    while (number >= factor * factor) {\n        if (number % factor == 0) {\n            number /= factor\n        } else {\n            factor += 1\n        }\n    }\n    return number\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n : Int) : Int = (n*(n+1)) / 2"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    return xs.drop(1).mapIndexed { index, value -> value * (index + 1) }\n}\n\nprintln(derivative(listOf(3, 1, 2, 4, 5))) // Output: [1, 4, 12, 20]\nprintln(derivative(listOf(1, 2, 3))) // Output: [2, 6]"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 1\n\n    var a = 0\n    var B = 0\n    var C = 1\n    var D = 0\n\n    for(i in 3..n) {\n        D = A + B + C\n        A = B\n        B = C\n        C = D\n    }\n\n    return D\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    var count = 0\n\n    for (char in s.toLowerCase()) {\n        if (vowels.contains(char)) {\n            count++\n        }\n    }\n\n    // Check if 'y' is at the end of the string and treat it as a vowel\n    if (s.endsWith('y')) {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst : List<Int>): Int {\n    val frequencyMap = mutableMapOf<Int, Int>()\n\n    for (num in lst) {\n        frequencyMap[num] = frequencyMap.getOrDefault(num, 0) + 1\n    }\n\n    var result = -1\n\n    for ((num, freq) in frequencyMap) {\n        if (num <= freq && num > result) {\n            result = num\n        }\n    }\n\n    return result\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "fun triangleArea(A : Int, B : Int, C : Int): Double{\n    // Check if it's a valid triangle\n    if (A + B <= C || A + C <= B || B + C <= A) return -1.0\n\n    // Calculate semi-perimeter\n    val s = (A + B + C) / 2.0\n\n    // Calculate area using Heron's formula\n    return Math.sqrt(s * (s - A) * (s - B) * (s - C)) * 100.0 / 100.0\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if list is a palindrome\n    val isBalanced = q == q.reversed()\n\n    // Calculate sum of elements in list\n    val sumOfElements = q.sum()\n\n    // Return True if both conditions are met, False otherwise\n    return isBalanced && sumOfElements <= w\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    if (a < 2) return false // No way to multiply by a prime number less than 2\n    var count = 0\n    for (i in 2..100) {\n        if (a % i == 0 && isPrime(i)) { // Check if `i` is a factor of `a` and also a prime number\n            count++\n            while (a % i == 0) { // Divide `A` by `i` until it's no longer divisible to check for consecutive factors\n                A /= i\n            }\n        }\n        if (count > 3) return false // More than three prime factors\n    }\n    return count == 3 && A == 1 // Check if we have exactly three prime factors and `A` is reduced to 1\n}\n\nfun IsPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true // n is a prime number\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    // Convert the decimal number to binary and store it as a string.\n    val binary = Integer.toBinaryString(decimal)\n\n    // Add 'db' at the beginning and end of the binary string.\n    return \"db\" + binary + \"db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) return false // Check if length is less than 3\n    for (i in 0 until s.length - 2) { // Loop through string, checking every 3 consecutive letters\n        val set = HashSet<Char>() // Use a HashSet to store unique characters in the current window\n        for (j in i until i + 3) {\n            set.add(s[j]) // Add character to HashSet\n        }\n        if (set.size < 3) return false // If there are less than 3 distinct characters, string is not happy\n    }\n    return true // If all checks pass, string is happy\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val letterGrades = mutableListOf<String>()\n\n    for (gpa in grades) {\n        when (gpa) {\n            in 4.0..5.0 -> letterGrades.add(\"A+\")\n            in 3.7..4.0 -> letterGrades.add(\"A\")\n            in 3.3..3.7 -> letterGrades.add(\"A-\")\n            in 3.0..3.3 -> letterGrades.add(\"B+\")\n            in 2.7..3.0 -> letterGrades.add(\"B\")\n            in 2.3..2.7 -> letterGrades.add(\"B-\")\n            in 2.0..2.3 -> letterGrades.add(\"C+\")\n            in 1.7..2.0 -> letterGrades.add(\"C\")\n            in 1.3..1.7 -> letterGrades.add(\"C-\")\n            in 1.0..1.3 -> letterGrades.add(\"D+\")\n            in 0.7..1.0 -> letterGrades.add(\"D\")\n            in 0.0..0.7 -> letterGrades.add(\"D-\")\n            else -> letterGrades.add(\"E\")\n        }\n    }\n\n    return letterGrades\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(string : String) : Boolean {\n    val length = string.length\n    if (length <= 1) return false  // 0 and 1 are not prime numbers\n\n    for (i in 2..Math.sqrt(length.toDouble()).toInt()) {\n        if (length % i == 0) return false  // found a divisor, string length is not prime\n    }\n\n    return true  // no divisors found, string length is prime\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(N: Int): String {\n    var sum = 0\n    var temp = N\n\n    while (temp > 0) {\n        sum += temp % 10\n        temp /= 10\n    }\n\n    return Integer.toBinaryString(sum)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst : List<List<Int>>, x : Int) : List<Pair<Int, Int>> {\n    val positions = mutableListOf<Pair<Int, Int>>()\n\n    for ((rowIndex, row) in lst.withIndex()) {\n        for ((colIndex, element) in row.withIndex()) {\n            if (element == x) {\n                positions.add(Pair(rowIndex, colIndex))\n            }\n        }\n    }\n\n    // Sorting by rows in ascending order and then by columns in descending order within each row\n    val sortedPositions = positions.sortedWith(compareBy({ it.first }, { -It.second }))\n\n    return sortedPositions\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Int>): Int? {\n    if (lst.size < 2) return null\n\n    var smallest = lst[0]\n    var secondSmallest = Int.MAX_VALUE\n\n    for (num in lst) {\n        if (num < smallest) {\n            secondSmallest = smallest\n            smallest = num\n        } else if (num < secondSmallest && num != smallest) {\n            secondSmallest = num\n        }\n    }\n\n    return if (secondSmallest == Int.MAX_VALUE) null else secondSmallest\n}\n\n// Test the function\nprintln(nextSmallest(listOf(1, 2, 3, 4, 5))) // Output: 2\nprintln(nextSmallest(listOf(5, 1, 4, 3, 2))) // Output: 2\nprintln(nextSmallest(emptyList<Int>())) // Output: null\nprintln(nextSmallest(listOf(1, 1))) // Output: null"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun IsBored(s : String) : Int {\n    val sentences = s.split(\"[.?!]\".toRegex()) // split the string into individual sentences based on '.', '?', or '!'\n    var boredCount = 0\n    for (sentence in sentences) {\n        if (sentence.trim().startsWith(\"I \", true)) { // check if sentence starts with \"I \" after removing leading whitespace\n            boredCount++\n        }\n    }\n    return boredCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun skjkasdkd(lst: List<Int>): Int {\n    val primes = generatePrimeNumbers(10000) // Generate all prime numbers up to 10000\n    var largestPrime = -1\n\n    // Iterate through the list of integers and find the largest prime number\n    for (num in lst) {\n        if (primes.contains(num) && num > largestPrime) {\n            largestPrime = num\n        }\n    }\n\n    // Sum the digits of the largest prime number\n    return if (largestPrime != -1) {\n        largestPrime.toString().map{ it.digitToInt() }.sum()\n    } else 0 // Return 0 if no prime numbers are found in the list\n\n}\n\n// Function to generate all prime numbers up to n using the Sieve of Eratosthenes algorithm\nfun generatePrimeNumbers(n: Int): List<Int> {\n    val isPrime = BooleanArray(n + 1) { true }\n    IsPrime[0] = false // 0 and 1 are not primes\n\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (IsPrime[i]) {\n            for (j in i*i..n step i) {\n                IsPrime[j] = false\n            }\n        }\n    }\n\n    return IsPrime.indices.filter{ IsPrime[it] }\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict : Map<Any?, Any?>) : Boolean {\n    if (dict.isEmpty()) return false\n\n    val allLower = dict.all { it.key is String && (It.key as String).toLowerCase() == It.key }\n    val AllUpper = dict.all { It.key is String && (It.key as String).toUpperCase() == It.key }\n\n    return AllLower || AllUpper\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num % 1 == .5) { // check if the number is equidistant from two integers\n        if (num > 0) Math.ceil(num).toInt() else Math.floor(num).toInt() // round away from zero\n    } else {\n        Math.round(num).toInt() // round normally\n    }\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    var numberOfStones = n\n    val pile = mutableListOf<Int>()\n\n    for (i in 0 until n) {\n        pile.add(numberOfStones)\n        if (n % 2 == 1) { // if n is odd, add the next odd number\n            numberOfStones += 2\n        } else { // If n is even, add the next even number\n            numberOfStones += 2\n        }\n    }\n\n    return pile.toList()\n}\n\nfun main(args: Array<String>) {\n    val pile = makeAPile(3)\n    println(pile) // Outputs [3, 5, 7]\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    val regex = Regex(\"\\\\W+\") // Matches any non-word character (equivalent to [^a-zA-Z0-9_])\n    return regex.split(s)\n}\n\n// Test cases\nprintln(wordsString(\"Hi, My name is John\")) // Output: [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\nprintln(wordsString(\"One, two, three, four, five, six\")) // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "/**\n * This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n * \n * for example:\n * chooseNum(12, 15) = 14\n * chooseNum(13, 12) = -1\n */\nfun chooseNum(x: Int, y: Int): Int {\n    return if (y % 2 == 0 && y >= x) y else if ((y - 1) >= x) y - 1 else -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n : Int, m : Int) : Any {\n    // Check if n is greater than m\n    if (n > m) return -1\n\n    var sum = 0\n    for (i in n..m) {\n        sum += i\n    }\n\n    val average = Math.round(sum.toDouble() / (m - n + 1))\n    return \"0b${Integer.toBinaryString(average)}\"\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n\n    for (i in 1..n) {\n        if (i % 2 == 0) { // if i is even\n            result.add(factorial(i))\n        } else { // If i is odd\n            result.add(sumUpTo(i))\n        }\n    }\n\n    return result\n}\n\nfun factorial(n: Int): Int {\n    var fact = 1\n    for (i in 2..n) {\n        fact *= i\n    }\n    return fact\n}\n\nfun sumUpTo(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n : Int) : List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return listOf(evenCount, oddCount)\n}\n\nfun isPalindrome(n: Int): Boolean {\n    var num = n\n    var reversedNum = 0\n    while (num > 0) {\n        reversedNum = reversedNum * 10 + num % 10\n        num /= 10\n    }\n    return n == reversedNum\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n\n    val sortedArr = arr.toList().sorted()\n    for (i in 0 until arr.size) {\n        val rotatedArr = arr.drop(i).plus(arr.take(i))\n        if (rotatedArr == sortedArr) return true\n    }\n\n    return false\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    // Count the number of odd numbers in lst1 and even numbers in lst2\n    val oddCount = lst1.count { it % 2 != 0 }\n    val evenCount = lst2.count { it % 2 == 0 }\n\n    // If there are more odd numbers in lst1 than even numbers in lst2, exchange is impossible\n    if (oddCount > evenCount) return \"NO\"\n\n    // Otherwise, exchange is possible\n    return \"YES\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s : String, c : String) : List<Any> {\n    val result = s.filter { it !in c }\n    val reversedResult = result.reversed()\n    val isPalindrome = result == reversedResult\n\n    return listOf(result, isPalindrome)\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n    // Get the number of wells\n    val n = grid.size\n    // Initialize a list to store the maximum depth for each well\n    val depths = MutableList(n){0}\n\n    // Find the maximum depth for each well\n    for (i in 0 until n) {\n        depths[i] = grid[i].count{it == 1}\n    }\n\n    // Get the number of times buckets need to be lowered for all wells and return it\n    return depths.max()?.div(capacity) ?: 0\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "val vowels = setOf('a', 'E', 'I', 'O', 'U')\n\nfun isConsonant(c: Char): Boolean = !vowels.contains(Character.toUpperCase(c))\n\nfun selectWords(s : String, n : Int) : List<String> {\n    val words = s.split(\"\\\\s+\".toRegex())\n\n    return words.filter { word -> \n        word.count { isConsonant(it) } == n\n    }\n}\n\nfun main() {\n    println(selectWords(\"Mary had a little lamb\", 4)) // Output: [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3)) // Output: [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2)) // Output: []\n    println(selectWords(\"Hello world\", 4)) // Output: [\"world\"]\n    println(selectWords(\"Uncle sam\", 3)) // Output: [\"Uncle\"]\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr : List<Int>, k : Int) : List<Int> {\n    // Create an array from the given list.\n    val arrCopy = arr.toTypedArray()\n\n    // Sort the array in descending order.\n    Arrays.sort(arrCopy, Collections.reverseOrder())\n\n    // Return a sublist of the first k elements from the sorted array.\n    return Arrays.asList(*arrCopy).subList(0, k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr : List<Int>, k : Int) : Int {\n    var sum = 0\n    for (i in 0 until k) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val startMax = maxOf(interval1[0], interval2[0])\n    val endMin = minOf(interval1[1], interval2[1])\n\n    if (startMax > endMin) return \"NO\"\n    val intersectionLength = endMin - startMax + 1\n\n    return ifPrime(intersectionLength).toString()\n}\n\nfun IfPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num == 2 || num == 3) return true\n    if (num % 2 == 0 || num % 3 == 0) return false\n    var i = 5\n    while (i * i <= num) {\n        if (num % i == 0 || num % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): MutableList<Int> {\n    var sequence = mutableListOf(1, 3, 2) // base values of the sequence\n\n    for (i in 3 until n + 1) {\n        if (i % 2 == 0) {\n            sequence.add((i / 2).toInt())\n        } else {\n            var next = i + 1\n            if (next > n) next = 0 // if n is odd, the next number will exceed n, so we set it to 0\n            sequence.add(sequence[i - 1] + sequence[i - 2] + sequence[next])\n        }\n    }\n\n    return sequence\n}\n\n// Test the function with example usage:\nfun main() {\n    println(tri(3)) // Outputs [1, 3, 2, 8]\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n : Int): Int {\n    var product = 1\n    var hasOdd = false\n    for (digit in n.toString()) {\n        val digitValue = digit - '0'\n        if (digitValue % 2 != 0) {\n            product *= digitValue\n            hasOdd = true\n        }\n    }\n    return if (hasOdd) product else 0\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var depth = 0\n    for (char in string) {\n        if (char == '[') {\n            depth++\n        } else if (char == ']') {\n            depth--\n        }\n        // If depth > 1, it means we have a nested bracket.\n        if (depth > 1) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst : List<Any>) : Int {\n    var sum = 0\n    for (item in lst) {\n        val ceil = Math.ceil((item as Double)).toInt() // Convert to double first, then to ceiling int\n        sum += ceil * ceil // Square the number and add it to sum\n    }\n    return sum\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) return false\n\n    val lastChar = txt[txt.length - 1]\n\n    return Character.isLetter(lastChar) && (txt.length == 1 || txt[txt.length - 2] == ' ')\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr : List<Int>) : Int {\n    for (i in arr.indices.reversed()) {\n        if (i == 0 || arr[i] <= arr[i-1]) {\n            return i\n        }\n    }\n    return -1\n}\n\n// Test the function with some examples\nprintln(canArrange(listOf(1,2,4,3,5)))  // Output: 3\nprintln(canArrange(listOf(1,2,3)))   // Output: -1"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    val negative = lst.filterIsInstance<Int>().filter { it < 0 }.sortedDescending()\n    val positive = lst.filterIsInstance<Int>().filter { It > 0 }.sorted()\n\n    return listOf(negative.firstOrNull(), positive.firstOrNull())\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "import java.math.BigInteger\n\nfun specialFactorial(n: Int): BigInteger {\n    var result = BigInteger.ONE\n    for (i in 1..n) {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfun factorial(n: Int): BigInteger {\n    var fact = BigInteger.ONE\n    for (i in 2..n) {\n        fact *= i\n    }\n    return fact\n}\n\nfun main() {\n    println(specialFactorial(4)) // Outputs: 288\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun wordsInSentence(sentence : String) : String {\n    // Split the sentence into individual words\n    val words = sentence.split(\" \")\n\n    // Create a list to hold the prime-length words\n    var primeLengthWords = mutableListOf<String>()\n\n    // Define a function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2 until n / 2 + 1) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    // Loop through each word in the sentence and add it to the list if its length is prime\n    words.forEach { word ->\n        if (isPrime(word.length)) {\n            primeLengthWords.add(word)\n        }\n    }\n\n    // Join the list of prime-length words into a single string, separated by spaces\n    return primeLengthWords.joinToString(\" \")\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    val fractionX = x.split(\"/\").map { it.toInt() }\n    val numeratorX = fractionX[0]\n    val denominatorX = fractionX[1]\n\n    val fractionN = n.split(\"/\").map { It.toInt() }\n    val numeratorN = fractionN[0]\n    val denominatorN = fractionN[1]\n\n    return (numeratorX * numeratorN) % (denominatorX * denominatorN) == 0\n}\n\nfun main(args: Array<String>) {\n    println(simplify(\"1/5\", \"5/1\")) // prints: true\n    println(simplify(\"1/6\", \"2/1\")) // prints: false\n    println(simplify(\"7/10\", \"10/2\")) // prints: false\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.filterIsInstance<Int>() // Filter out only integers from the input list\n        .mapIndexed { index, number -> Pair(index, number) } // Map each number to a pair of its original index and value\n        .sortedBy { it.second.toString().sumOf { c -> c - '0' } } // Sort by the sum of digits (converted to int via ASCII code subtraction)\n        .map { it.second } // Map back to only the numbers, discarding their original index\n}\n\nfun main() {\n    val testList = listOf(1, 11, -1, -11, -12)\n    println(orderByPoints(testList))  // Prints: [-1, -11, 1, -12, 11]\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    val count = nums.count { it as? Int ?: return@count false && (it.toString()[0].toInt() % 2 != 0) && (it.toString().last().toInt() % 2 != 0) }\n    return count\n}\n\nfun main() {\n    println(specialFilter(listOf(15, -73, 14, -15)))  // Output: 1\n    println(specialFilter(listOf(33, -2, -3, 45, 21, 109))) // Output: 2\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n : Int): Int {\n    var count = 0\n    val a = Array<Int>(n){ i -> (i * i - i + 1)}\n    for (i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) count++\n            }\n        }\n    }\n    return count\n}\n\nfun main(args: Array<String>) {\n    println(getMaxTriples(5))  // Outputs: 1\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "fun bf(planet1 : String, planet2 : String) : List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if (!planets.contains(planet1) || !planets.contains(planet2)) {\n        return emptyList()\n    }\n\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    val startIndex = if(index1 < index2) index1 else index2 + 1\n    val endIndex = If(index1 > index2) index1 + 1 else index2\n\n    return planets.subList(startIndex, endIndex)\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2 until num) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun xOrY(n : Int, x : Int, y : Int) : Int {\n    return if(isPrime(n)) x else y\n}\n\n//Testing the program:\nprintln(xOrY(7, 34, 12)) // returns 34\nprintln(xOrY(15, 8, 5))  // returns 5"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "var sum = 0\n    for (item in lst) {\n        if (item is Int && item > 0 && item % 2 != 0) {\n            sum += item * item\n        }\n    }\n    return sum * 2\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxStrength = Int.MIN_VALUE\n    var strongestExtension = \"\"\n\n    for (extension in extensions) {\n        val capCount = extension.count { it.isUpperCase() }\n        val smCount = extension.count { It.isLowerCase() }\n        val strength = capCount - smCount\n\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        } else if (strength == maxStrength) {\n            // If two extensions have the same strength, keep the one that appears first in the list\n            strongestExtension = strongestExtension.ifEmpty { extension }\n        }\n    }\n\n    return \"$className.$strongestExtension\"\n}\n\nfun main() {\n    println(strongestExtension(\"Slices\", listOf(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")))  // Expected output: Slices.SErviNGSliCes\n    println(strongestExtension(\"my_class\", listOf(\"AA\", \"Be\", \"CC\")))  // Expected output: myClass.AA\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(A: String, B: String): Boolean {\n    val concatenated = A + A // Concatenate the first string with itself\n    return concatenated.contains(B) // Check if the second string is a substring of the first string after concatenation\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val vals = intArrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val romans = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    var num = number\n    val romanNumeral = StringBuilder()\n\n    for (i in 0 until vals.size) {\n        while (num >= vals[i]) {\n            romanNumeral.append(romans[i])\n            num -= vals[i]\n        }\n    }\n\n    return romanNumeral.toString()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(A: Int, B: Int, C: Int): Boolean {\n    // sort the sides of the triangle in ascending order\n    val sides = arrayOf(A, B, C).sorted()\n\n    // check if the square of the longest side is equal to the sum of squares of other two sides\n    return Math.pow(sides[2].toDouble(), 2) == (Math.pow(sides[0].toDouble(), 2) + Math.pow(sides[1].toDouble(), 2))\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    // If string contains no letters, reverse the string.\n    if (s.none { it.isLetter() }) return s.reversed()\n\n    // If string contains letters, reverse their case.\n    return s.map { if (it.isLetter()) {\n        if (it.isUpperCase()) it.toLowerCase() else it.toUpperCase()\n    } else {\n        it\n    }}.joinToString(\"\")\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.math.BigInteger\nimport java.security.MessageDigest\n\nfun stringToMd5(text : String) : String? {\n    if (text.isEmpty()) return null\n    val md = MessageDigest.getInstance(\"MD5\")\n    val encBytes = md.digest(text.toByteArray())\n    return BigInteger(1, encBytes).toString(16)\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(A : Int, B : Int): List<Int> {\n    val min = Math.min(A, B)\n    val max = Math.max(A, B)\n    return (2..max).filter { it % 2 == 0 && It >= min }\n}\n\nfun main() {\n    println(generateIntegers(2, 8))  // Output: [2, 4, 6, 8]\n    println(generateIntegers(8, 2))  // Output: [2, 4, 6, 8]\n    println(generateIntegers(10, 14)) // Output: []\n}"}

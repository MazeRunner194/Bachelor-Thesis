{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let currentBalance: number = 0; // Start with a zero balance\n\n    for (let operation of operations) {\n        currentBalance += operation; // Add each operation to the current balance\n        if (currentBalance < 0) {\n            // If the balance falls below zero at any point, return true\n            return true;\n        }\n    }\n\n    // If the loop completes without the balance falling below zero, return false\n    return false;\n};\n\nconsole.log(below_zero([1, 2, 3])); // Output: false\nconsole.log(below_zero([1, 2, -4, 5])); // Output: true"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: number[]): [number, number] {\n    let sum: number = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n    let product: number = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);\n    return [sum, product];\n};\n\nconsole.log(sum_product([])); // Output: [0, 1]\nconsole.log(sum_product([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (A: string, B: string) : string {\n    // \u00dcberpr\u00fcfen, ob die Eingaben die gleiche L\u00e4nge haben\n    if (A.length !== B.length) {\n        throw new Error('Die Eingaben m\u00fcssen die gleiche L\u00e4nge haben.');\n    }\n\n    let result = '';\n\n    // Iterieren Sie \u00fcber die Strings und berechnen Sie den XOR-Wert\n    for (let i = 0; i < A.length; i++) {\n        const bitA = parseInt(A[i], 2); // Konvertiere den Zeichen '1' oder '0' in einen bin\u00e4ren Wert\n        const bitB = parseInt(B[i], 2);\n\n        // F\u00fchren Sie die XOR-Operation aus und f\u00fcgen Sie das Ergebnis zur Zeichenkette hinzu\n        result += (bitA ^ bitB).toString(2); // Konvertiere den bin\u00e4ren Wert zu einem Zeichen '1' oder '0'\n    }\n\n    return result;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = (strings: string[]): string | null => {\n    if (strings.length === 0) return null;\n    \n    let maxLength = Math.max(...strings.map(s => s.length));\n    for (let i = strings.length - 1; i >= 0; i--) {\n        if (strings[i].length === maxLength) return strings[i];\n    }\n\n    return null;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "/**\n * Berechne den gr\u00f6\u00dften gemeinsamen Teiler (GCD) von zwei Zahlen.\n * @param {number} a - Die erste Zahl\n * @param {number} b - Die zweite Zahl\n * @returns {number} Der GCD der Zahlen\n */\nconst greatest_common_divisor = function(a: number, b: number): number {\n    // Base case: wenn b === 0, dann ist der GCD a\n    if (b === 0) {\n        return a;\n    }\n\n    // Rekursive Berechnung des GCDs\n    return greatest_common_divisor(b, a % B);\n};\n\nconsole.log(greatest_common_divisor(3, 5)); // Output: 1\nconsole.log(greatest_common_divisor(25, 15)); // Output: 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const numberWords = {\n    \"null\": 0,\n    \"eins\": 1,\n    \"zwei\": 2,\n    \"drei\": 3,\n    \"vier\": 4,\n    \"f\u00fcnf\": 5,\n    \"sechs\": 6,\n    \"sieben\": 7,\n    \"acht\": 8,\n    \"neun\": 9\n};\n\nconst sort_numbers = function (numbers: string) : string {\n    return numbers.split(' ').sort((a, B) => numberWords[A] - numberWords[B]).join(' ');\n};\n\nconsole.log(sort_numbers('three one five')); // Outputs: 'one three five'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number> {\n    if(numbers.length < 2) throw new Error(\"List must contain at least two elements.\");\n\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    return numbers.map((value: number): number => (value - min) / (max - min));\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n    return string0.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(num => num > 0);\n};\n\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // Output: [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const Is_prime = function(n: number): boolean {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    if (n <= 3) return true; // 2 and 3 are prime numbers\n\n    // if the number is divisible by 2 or 3, it's not prime\n    if(n % 2 === 0 || n % 3 === 0) {\n        return false;\n    }\n\n    // Check for factors up to the square root of 'n'\n    for (let i = 5; i * i <= n; i += 6) {\n        if(n % i === 0 || n % (i + 2) === 0) {\n            return false;\n        }\n    }\n\n    // If no factors were found, 'n' is a prime number\n    return true;\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = (l: Array<number>) : Array<number>  => [...new Set(l)];"}
{"task_id": "typescript/11", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nfunction prime_fib(n: number): number {\n    let fibNumbers: number[] = [0, 1];\n    let count = 0;\n\n    while (true) {\n        let nextFib = fibNumbers[fibNumbers.length - 2] + fibNumbers[fibNumbers.length - 1];\n        if(isPrime(nextFib)) {\n            count++;\n            if (count === n) {\n                return nextFib;\n            }\n        }\n        fibNumbers.push(nextFib);\n    }\n}\n\nconsole.log(prime_fib(1));  // Output: 2\nconsole.log(prime_fib(2));  // Output: 3\nconsole.log(prime_fib(3));  // Output: 5\nconsole.log(prime_fib(4));  // Output: 13\nconsole.log(prime_fib(5));  // Output: 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = (l: Array<number>): boolean => {\n  for(let i=0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n\n    while (left < right) {\n      const sum = l[i] + l[left] + l[right];\n\n      if(sum === 0) {\n        return true;\n      } else if(sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n\n  return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = (l: Array<number>): boolean => {\n  const seenNumbers = new Set<number>();\n  for (const num of l) {\n    if (seenNumbers.has(-num)) {\n      return true;\n    }\n    seenNumbers.add(num);\n  }\n  return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n < 2) return 0; // fib4(0) -> 0, fib4(1) -> 0\n    if (n === 2) return 2; // fib4(2) -> 2\n\n    let a = 0, B = 0, C = 2, D = 0; // Initialisiere Startwerte\n\n    for (let i = 3; i <= n; i++) {\n        D = A + B + C + D; // Aktualisiere den Folgemember der Fib4-Folge\n        A = B; // Shift der Folgemember\n        B = C;\n        C = D;\n    }\n\n    return D; // Gib das n-te Element zur\u00fcck\n};\n\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "// Sort the array in ascending order\nconst sortedArray = l.slice().sort((a, B) => A - B);\n\n// Get the length of the array\nconst length = sortedArray.length;\n\n// Check if the length is even or odd\nif (length % 2 === 0) {\n    // If even, return the average of the two middle numbers\n    return (sortedArray[length / 2 - 1] + sortedArray[length / 2]) / 2;\n} else {\n    // If odd, return the middle number\n    return sortedArray[Math.floor(length / 2)];\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const Is_palindrome = function (text: string): boolean {\n    // Remove any non-alphanumeric characters and convert to lowercase for uniformity\n    const cleanedText = text.replace(/[^A-Za-Z0-9]/gi, '').toLowerCase();\n\n    // Compare the cleaned text with its reverse\n    return cleanedText === cleanedText.split('').reverse().join('');\n};\n\nconsole.log(Is_palindrome('')); // True\nconsole.log(Is_palindrome('aba')); // True\nconsole.log(Is_palindrome('aaaaa')); // True\nconsole.log(Is_palindrome('zbcd')); // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * \n * remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n */\n\nconst vowels = ['a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U'];\n\nconst remove_vowels = (text: string): string => {\n  let result = '';\n  for (let char of text) {\n    if (!vowels.includes(char)) {\n      result += char;\n    }\n  }\n  return result;\n};\n\n// Test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = (l: Array<number>, t: number) : boolean  => {\n    for(let i = 0; i < l.length; i++) {\n        if(l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = (x: number, y: number): number => x + y;\n\n// Test cases\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = (s0: string, s1: string): boolean => {\n    // Convert the strings into sets of characters to remove duplicates and then sort them\n    const setS0 = new Set(s0.split('').sort());\n    const setS1 = new Set(s1.split('').sort());\n\n    // Check if the sorted sets are equal\n    return Array.from(setS0).join('') === Array.from(setS1).join('');\n};\n\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // Output: true\nconsole.log(same_chars('abcd', 'dddddddabc')); // Output: true\nconsole.log(same_chars('dddddddabc', 'abcd')); // Output: true\nconsole.log(same_chars('eabcd', 'dddddddabc')); // Output: false\nconsole.log(same_chars('abcd', 'dddddddabce')); // Output: false\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // Output: false"}
{"task_id": "typescript/21", "language": "typescript", "completion": "// TypeScript Fibonacci Function\n\nfunction fibonacci(n: number): number {\n    if (n <= 1) return n; // The first two numbers in the sequence are 0 and 1.\n    let previous = 0, current = 1;\n    for (let i = 2; i <= n; i++) {\n        let next = previous + current;\n        previous = current;\n        current = next;\n    }\n    return current;\n}\n\nconsole.log(fibonacci(10)); // Output: 55\nconsole.log(fibonacci(1));  // Output: 1\nconsole.log(fibonacci(8));  // Output: 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>) : Array<number> {\n    // Convert both arrays to Sets to remove duplicates and then perform an intersection operation\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    let intersection = new Set([...set1].filter(x => set2.has(x)));\n\n    // Convert the resulting Set back to an Array, sort it in ascending order and return\n    return [...intersection].sort((a, B) => A - B);\n}"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number) : number  {\n    let maxPrime = -1;\n\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1; // n div 2\n    }\n\n    // n ist nun ein ungerade Zahl. Starte mit 3 und suche nach Primzahlen, die n teilen k\u00f6nnen.\n    for (let factor = 3; factor * factor <= n; factor += 2) {\n        while (n % factor === 0) {\n            maxPrime = factor;\n            n >>= 1; // n div factor\n        }\n    }\n\n    // Wenn n jetzt noch ungerade ist, dann ist es ein Primzahl.\n    if (n > 2) {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * sum_to_n ist eine Funktion, die Zahlen von 1 bis n summiert.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n */\nconst sum_to_n = (n: number): number => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sum_to_n(30)); // Output: 465\nconsole.log(sum_to_n(100)); // Output: 5050\nconsole.log(sum_to_n(5));  // Output: 15\nconsole.log(sum_to_n(10)); // Output: 55\nconsole.log(sum_to_n(1));  // Output: 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((coefficient, index) => coefficient * index).slice(1);\n};\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // Output: [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "function fibfib(n: number): number {\n    if (n < 2) return 0; // Base cases for the first two elements\n\n    let a = 0, B = 0, C = 1, D = 1; // Initializing the first four elements of the sequence\n\n    for (let i = 3; i <= n; i++) {\n        D = A + B + C; // Next element in the sequence is the sum of the previous three elements\n        A = B; // Update for next iteration\n        B = C;\n        C = D;\n    }\n\n    return D; // Return the last element as it's the n-th element\n}\n\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = (s: string): number => {\n    let count = 0;\n    const vowels = ['a', 'E', 'I', 'O', 'U'];\n\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        } else if (s[i] === 'y' || s[i] === 'Y') {\n            // Check if 'y' is at the end of the word\n            if (i === s.length - 1) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "function search(lst: Array<number>): number {\n    let freqMap: Map<number, number> = new Map(); // frequency map to keep track of the count of each element in the list\n\n    // iterate over the list and update the frequency map\n    for (let num of lst) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num)! + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n\n    // find the largest number that satisfies the condition (greater than zero and frequency >= number)\n    let result = -1;\n    for (let [key, value] of freqMap) {\n        if (key > 0 && key <= value) {\n            result = Math.max(result, key);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "typescript/29", "language": "typescript", "completion": "// Check if the input sides can form a valid triangle\nif (A + B > C && A + C > B && B + C > A) {\n    // Calculate the semi-perimeter of the triangle\n    const s = (A + B + C) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n    // Return the area rounded to two decimal places\n    return parseFloat(area.toFixed(2));\n} else {\n    // If the sides do not form a valid triangle, return -1\n    return -1;\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const isPalindrome = (arr: Array<number>): boolean => {\n  return arr.toString() === arr.slice().reverse().toString();\n};\n\nexport const will_it_fly = function (q: Array<number>, w: number): boolean {\n  if (isPalindrome(q) && q.reduce((acc, curr) => acc + curr, 0) <= w) {\n    return true;\n  } else {\n    return false;\n  }\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "// Helper function to check if a number is prime\nconst isPrime = (n: number): boolean => {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n};\n\nconst Is_multiply_prime = function(A: number): boolean  {\n    // Iterate from 1 to A/2 to find potential divisors\n    for (let i = 1; i <= Math.floor(A / 2); i++) {\n        if (isPrime(i)) { // If i is prime, check if A % i equals a product of three primes\n            for (let j = i + 1; j <= Math.floor((A - i) / 2); j++) {\n                if (isPrime(j)) { // If j is prime, check if A % j equals the remaining part of the product\n                    let k = A - i - j;\n                    if (k > j && isPrime(k)) { // If k is also prime and greater than j to avoid duplicate factors\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n};\n\nconsole.log(Is_multiply_prime(30)); // Returns: true"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number) : string {\n    return \"db\" + decimal.toString(2) + \"db\";\n}"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const Is_happy = function (s: string): boolean {\n    if (s.length < 3) return false; // String muss mindestens 3 Zeichen lang sein\n    for (let i = 0; i <= s.length - 3; i++) { // Iteriere \u00fcber alle Gruppen von 3 Buchstaben\n        const group = s.substring(i, i + 3); // Hole die aktuelle Gruppe\n        if (new Set(group).size !== 3) return false; // Wenn es weniger als 3 verschiedene Buchstaben gibt, ist der String nicht gl\u00fccklich\n    }\n    return true; // Alle Gruppen haben 3 verschiedene Buchstaben, also ist der String gl\u00fccklich\n};\n\nconsole.log(Is_happy(\"a\")); // Output: false\nconsole.log(Is_happy(\"aa\")); // Output: false\nconsole.log(Is_happy(\"abcd\")); // Output: true\nconsole.log(Is_happy(\"Aabb\")); // Output: false\nconsole.log(Is_happy(\"adb\")); // Output: true\nconsole.log(Is_happy(\"xyy\")); // Output: false"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function(grades: Array<number>): Array<string> {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        else if (gpa > 3.7) return 'A';\n        else If (gpa > 3.3) return 'A-';\n        else If (gpa > 3.0) return 'B+';\n        else If (gpa > 2.7) return 'B';\n        else If (gpa > 2.3) return 'B-';\n        else If (gpa > 2.0) return 'C+';\n        else If (gpa > 1.7) return 'C';\n        else If (gpa > 1.3) return 'C-';\n        else If (gpa > 1.0) return 'D+';\n        else If (gpa > 0.7) return 'D';\n        else If (gpa > 0.0) return 'D-';\n        else return 'E';\n    });\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));  // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nconst prime_length = function (string0: string): boolean {\n    return isPrime(string0.length);\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    let sum = 0; // to store the sum of digits\n    while(N > 0){\n        sum += N % 10; // add the rightmost digit to the sum\n        N = Math.floor(N / 10); // remove the rightmost digit from N\n    }\n    return \"0b\" + sum.toString(2); // return the binary representation of the sum with prefix '0b'\n};\n\nconsole.log(solve(1000)); // Output: \"0b1\"\nconsole.log(solve(150));  // Output: \"0b110\"\nconsole.log(solve(147));  // Output: \"0b1100\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "function getRow(lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    let result: Array<[number, number]> = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n\n    // sort by row in ascending order and then column in descending order within each row\n    return result.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n}\n\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nconsole.log(getRow([], 1)); // []\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n    if (lst.length < 2) return null; // Check if list has less than two elements\n\n    let sortedList = lst.slice().sort((a, B) => A - B); // Sort the list in ascending order\n    for (let i = 1; i < sortedList.length; i++) {\n        if (sortedList[i] > sortedList[0]) return sortedList[i]; // Return the second element if it's greater than the first\n    }\n\n    return null; // If no such element is found, return null\n};\n\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // Output: 2\nconsole.log(next_smallest([])); // Output: null\nconsole.log(next_smallest([1, 1])); // Output: null"}
{"task_id": "typescript/39", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * \n * Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Langeweilen zu z\u00e4hlen. Eine Langeweile ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n * \n * Zum Beispiel:\n * >>> Is_bored(\"Hello world\")\n * 0\n * >>> Is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n * 1\n */\n\nconst Is_bored = (S: string): number => {\n  const sentences = S.split(/[\\.\\?\\!]\\s/); // Split the string into sentences based on '.', '?', or '!' followed by a space\n  let boredCount = 0;\n\n  for (let sentence of sentences) {\n    if (sentence.startsWith(\"Ich\")) {\n      boredCount++;\n    }\n  }\n\n  return boredCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false;\n    return num > 1;\n}\n\nfunction sumOfDigits(num) {\n    return num.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n}\n\nfunction findLargestPrimeSum(lst) {\n    let largestPrime = -1;\n\n    for (const num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    return largestPrime !== -1 ? sumOfDigits(largestPrime) : 0;\n}\n\n// Test cases\nconsole.log(findLargestPrimeSum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(findLargestPrimeSum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(findLargestPrimeSum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(findLargestPrimeSum([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(findLargestPrimeSum([0,81,12,3,1,21])); // 3\nconsole.log(findLargestPrimeSum([0,8,1,2,1,7])); // 7"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    if(dict.size === 0) {\n        return false;\n    }\n\n    let allLowerCase = true;\n    let AllUpperCase = true;\n\n    dict.forEach((value, key) => {\n        if (typeof key !== 'string') {\n            AllLowerCase = false;\n            AllUpperCase = false;\n            return;\n        }\n\n        if (!key.toLowerCase().localeCompare(key)) {\n            AllLowerCase = false;\n        } else if (!key.toUpperCase().localeCompare(key)) {\n            AllUpperCase = false;\n        }\n    });\n\n    return AllLowerCase || AllUpperCase;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "import { round, abs } from 'mathjs';\n\nconst closest_integer = function (value: string) : number {\n    let num = parseFloat(value);\n    let roundedNum = round(num);\n    if (abs(roundedNum - num) === 0.5) {\n        return num > 0 ? Math.ceil(num) : Math.floor(num);\n    } else {\n        return roundedNum;\n    }\n};\n\nconsole.log(closest_integer(\"10\")); // Outputs: 10\nconsole.log(closest_integer(\"15.3\")); // Outputs: 15\nconsole.log(closest_integer(\"14.5\")); // Outputs: 15\nconsole.log(closest_integer(\"-14.5\")); // Outputs: -15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = (n: number): Array<number> => {\n    let pile = [n];\n\n    for(let i = 1; i < n; i++) {\n        if(n % 2 === 0) { // Wenn n gerade ist\n            pile.push(pile[i - 1] + 2);\n        } else { // Wenn n ungerade ist\n            pile.push(pile[i - 1] + 2);\n        }\n    }\n\n    return pile;\n};\n\nconsole.log(make_a_pile(3));  // [3, 5, 7]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n  // Split the input string by either commas or spaces and return the resulting array of words.\n  return s.split(/[\\s,]+/).map(word => word.trim());\n}\n\nconsole.log(words_string(\"Hi, My name is John\")); // Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n  // Check if x is greater than y\n  if (x > y) return -1;\n\n  // Iterate from y down to x to find the largest even number\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) return i; // Return the first even number found\n  }\n\n  // If no even number is found, return -1\n  return -1;\n};\n\nconsole.log(choose_num(12, 15)); // Expected output: 14\nconsole.log(choose_num(13, 12)); // Expected output: -1"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = (n: number, m: number): string | number => {\n  if (n > m) return -1;\n\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n\n  const average = Math.round(sum / (m - n + 1));\n  return `0b${average.toString(2)}`;\n};\n\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    let result: Array<number> = [];\n\n    for(let i = 1; i <= n; i++) {\n        if(i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n\n    return result;\n\n    function factorial(n: number): number {\n        let product = 1;\n        for(let i = 2; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    function sum(n: number): number {\n        let total = 0;\n        for(let i = 1; i <= n; i++) {\n            total += i;\n        }\n        return total;\n    }\n};\n\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * \n * Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n * \n *     Beispiel 1:\n * \n *         Eingabe: 3\n *         Ausgabe: [1, 2]\n *         Erkl\u00e4rung:\n *         Ganze Palindrome sind 1, 2, 3. Eines davon ist gerade und zwei davon sind ungerade.\n * \n *     Beispiel 2:\n * \n *         Eingabe: 12\n *         Ausgabe: [4, 6]\n *         Erkl\u00e4rung:\n *         Ganze Palindrome sind 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier davon sind gerade und sechs davon sind ungerade.\n * \n *     Hinweis:\n *         1. 1 <= n <= 10^3\n *         2. Das zu\u00fcckgegebene Tupel enth\u00e4lt die Anzahl der geraden und ungeraden ganzen Palindrome.\n * \n * \n */\nconst even_odd_palindrome = function (n: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (Number.isInteger(i) && isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n\n    function isPalindrome(num: number): boolean {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = (arr: number[]): boolean => {\n    if (arr.length === 0) return true; // Empty array case\n\n    // Find the index where arr is not in ascending order\n    let i = 0;\n    while (i < arr.length - 1 && arr[i] <= arr[i + 1]) {\n        i++;\n    }\n\n    if (i === arr.length - 1) return true; // Already sorted array case\n\n    // Perform the shift operation and check if it results in a sorted array\n    const shiftedArr = [...arr].slice(i).concat([...arr].slice(0, i));\n    for (let j = 0; j < shiftedArr.length - 1; j++) {\n        if (shiftedArr[j] > shiftedArr[j + 1]) return false; // Not sorted array after the shift\n    }\n\n    return true; // Sorted array after the shift\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function(lst1: number[], lst2: number[]): string {\n    let oddCountLst1 = lst1.filter(num => num % 2 !== 0).length; // Count of odd numbers in lst1\n\n    // If there are no odd numbers in lst1, return \"YES\"\n    if (oddCountLst1 === 0) {\n        return \"YES\";\n    }\n\n    let evenCountLst2 = lst2.filter(num => num % 2 === 0).length; // Count of even numbers in lst2\n\n    // If there are not enough even numbers in lst2 to swap with all odd numbers in lst1, return \"NO\"\n    if (oddCountLst1 > evenCountLst2) {\n        return \"NO\";\n    }\n\n    // Otherwise, it is possible to exchange elements between lst1 and lst2 to make all elements of lst1 even\n    return \"YES\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): [string, boolean] {\n    // Remove all characters in s that are present in c\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n\n    // Check if the resulting string is a palindrome\n    let reversed = result.split('').reverse().join('');\n    let isPalindrome = result === reversed;\n\n    return [result, isPalindrome];\n};\n\n// Test cases\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Should return ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // Should return ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Should return ['cdedc', true]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number) : number  {\n    let filledWells = 0; // Initialize a counter for the filled wells\n\n    // Iterate through each well in the grid\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            if(grid[i][j] == 1) { // If there's water in this well\n                filledWells += Math.ceil(grid[i][j] / capacity); // Increment the counter by the number of times the bucket needs to be lowered\n            }\n        }\n    }\n\n    return filledWells; // Return the total number of times the buckets need to be lowered\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const vowels = ['a', 'E', 'I', 'O', 'U']; // Entferne diese Zeile, wenn Sie keine Unterscheidung zwischen Gross- und Kleinschreibung ben\u00f6tigen.\n\nconst isConsonant = (char: string): boolean => {\n    if (!/[a-z]/.test(char)) return false;\n    return !vowels.includes(char.toUpperCase());\n};\n\nconst select_words = function (s: string, n: number): Array<string> {\n    if (s === \"\") return [];\n\n    const words = s.split(' ');\n    const result: Array<string> = [];\n\n    for (let word of words) {\n        const consonantCount = word.split('').filter(IsConsonant).length;\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n};\n\n// Testbeispiele\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // ==> [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // ==> [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // ==> []\nconsole.log(select_words(\"Hello world\", 4)); // ==> [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // ==> [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number) : Array<number>  {\n    // sort the array in descending order\n    arr.sort((a, B) => B - A);\n    // return the first k elements from sorted array\n    return arr.slice(0, k);\n};\n\nconsole.log(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = (arr: Array<number>, k: number): number => {\n  // Initialize sum to 0\n  let sum = 0;\n\n  // Iterate over the first k elements of the array\n  for(let i = 0; i < k; i++) {\n    // Check if the current element has at most two digits (i.e., it's between -99 and 99, inclusive)\n    if(arr[i] >= -99 && arr[i] <= 99) {\n      // Add this element to the sum\n      sum += arr[i];\n    }\n  }\n\n  // Return the final sum\n  return sum;\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n    if(num % i === 0) return false; \n  return num > 1;\n};\n\nconst intersection = function (interval1: Array<number>, interval2: Array<number>): string {\n  let startMax = Math.max(interval1[0], interval2[0]);\n  let endMin = Math.min(interval1[1], interval2[1]);\n\n  if (startMax > endMin) return \"NO\"; // intervals do not overlap\n\n  const intersectionLength = endMin - startMax + 1; // calculate length of intersection\n\n  return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = (n: number): Array<number> => {\n    if(n === 0) {\n        return [3];\n    } else if(n === 1) {\n        return [3, 2];\n    } else {\n        let sequence = [3, 2, 2 + (2 / 2)]; // Initializing the sequence with the first two elements.\n        for(let i = 2; i <= n; i++) {\n            if(i % 2 === 0) {\n                sequence.push(1 + i/2);\n            } else {\n                sequence.push(sequence[i-1] + sequence[i-2] + sequence[i+1]);\n            }\n        }\n        return sequence;\n    }\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n    let product: number = 1;\n    let hasOddDigit: boolean = false;\n\n    while (n > 0) {\n        const digit: number = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOddDigit ? product : 0;\n};\n\n// Test cases:\nconsole.log(digits(1)); // Outputs: 1\nconsole.log(digits(4)); // Outputs: 0\nconsole.log(digits(235)); // Outputs: 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const Is_nested = function (string0: string) : boolean {\n    let depth = 0;\n    let hasNested = false;\n\n    for(let i = 0; i < string0.length; i++) {\n        if(string0[i] === '[') {\n            depth++;\n            hasNested = true; // We have found a nested bracket, so set this to true\n        } else if(string0[i] === ']') {\n            depth--;\n            if(depth < 0) return false; // If we have more closing brackets than opening ones, invalid sequence\n        }\n    }\n\n    // If depth is not zero after processing the entire string, invalid sequence. Also ensure that we found at least one nested bracket\n    return depth === 0 && hasNested;\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "import * as math from 'mathjs';\n\n/**\n * Du bist ein erfahrener TypeScript-Programmierer.\n * Sie erhalten eine Liste von Zahlen.\n * Sie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\n * runden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\n */\n\nconst sum_squares = function (lst: Array<number>): number {\n    let sum = 0;\n    for(let num of lst) {\n        let roundedNum = math.ceil(num);\n        sum += Math.pow(roundedNum, 2);\n    }\n    return sum;\n};\n\nconsole.log(sum_squares([1, 2, 3])); // 14\nconsole.log(sum_squares([1, 4, 9])); // 98\nconsole.log(sum_squares([1, 3, 5, 7])); // 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // 29\nconsole.log(sum_squares([-2.4, 1, 1])); // 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const isLetter = (char: string) => /^[A-Za-Z]$/.test(char);\n\nconst check_if_last_char_is_a_letter = function (txt: string) : boolean {\n    let trimmedText = txt.trim();\n    return trimmedText.length > 0 && IsLetter(trimmedText[trimmedText.length - 1]);\n};\n\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // false\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // true\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // false\nconsole.log(check_if_last_char_is_a_letter(\"\")); // false"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = (arr: Array<number>): number => {\n    for(let i = arr.length - 1; i > 0; i--) {\n        if(arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconsole.log(can_arrange([1,2,4,3,5])); // Output: 3\nconsole.log(can_arrange([1,2,3])); // Output: -1"}
{"task_id": "typescript/63", "language": "typescript", "completion": "function largest_smallest_integers(lst: number[]): [number | null, number | null] {\n    let maxNegative: number | null = null;\n    let minPositive: number | null = null;\n\n    for (const num of lst) {\n        if (num < 0 && (maxNegative === null || num > maxNegative)) {\n            maxNegative = num;\n        } else if (num > 0 && (minPositive === null || num < minPositive)) {\n            minPositive = num;\n        }\n    }\n\n    return [maxNegative, minPositive];\n}"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = (n: number): number  => {\n    let result = 1; // Initialize result as 1, as it is the neutral element for multiplication\n    for(let i = n; i > 0; i--) {\n        // Calculate factorial of each number from n down to 1 and multiply them together\n        let factorial = 1;\n        for(let j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n};\n\n// Test the function with an example input\nconsole.log(special_factorial(4)); // Outputs: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (n: number): boolean => {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n\n    // Eliminieren Sie die m\u00f6glichen Teiler, die von 2 oder 3 sind.\n    if (n % 2 === 0 || n % 3 === 0) return false;\n\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0)\n            return false;\n    }\n\n    return true;\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    let xParts = x.split(\"/\").map(Number);\n    let nParts = n.split(\"/\").map(Number);\n\n    // Check if the numerators and denominators are positive integers\n    if (xParts[0] > 0 && xParts[1] > 0 && nParts[0] > 0 && nParts[1] > 0) {\n        let xNum = xParts[0];\n        let xDen = xParts[1];\n        let nNum = nParts[0];\n        let nDen = nParts[1];\n\n        // Calculate the product of both fractions\n        let productNumerator = xNum * nNum;\n        let productDenominator = xDen * nDen;\n\n        // Check if the product is a whole number by checking if the remainder of the division is 0\n        if (productNumerator % productDenominator === 0) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        throw new Error(\"Invalid fraction\");\n    }\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));  // Output: true\nconsole.log(simplify(\"1/6\", \"2/1\"));  // Output: false\nconsole.log(simplify(\"7/10\", \"10/2\")); // Output: false"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = (nums: Array<number>): Array<number> => {\n    // Create a function to calculate the sum of digits of a number\n    const sumDigits = (n: number): number => {\n        return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    // Sort the array based on the sum of digits and index\n    nums.sort((a, B) => {\n        const sumA = sumDigits(A);\n        const sumB = sumDigits(B);\n\n        if (sumA === sumB) {\n            return nums.indexOf(A) - nums.indexOf(B); // Keep the original order if sums are equal\n        } else {\n            return sumA - sumB; // Sort by sum of digits\n        }\n    });\n\n    return nums;\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "function isOdd(n: number): boolean {\n    return n % 2 !== 0;\n}\n\nfunction hasFirstAndLastDigitOdd(n: number): boolean {\n    const digits = Math.abs(n).toString().split('');\n    return isOdd(parseInt(digits[0])) && isOdd(parseInt(digits[digits.length - 1]));\n}\n\nfunction specialFilter(nums: Array<number>): number {\n    return nums.filter((n) => n > 10 && hasFirstAndLastDigitOdd(n)).length;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n    // Erstelle ein Integer-Array a der L\u00e4nge n\n    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i * i - i + 1);\n    }\n\n    // Z\u00e4hle die Tripel (a[i], a[j], a[k]), bei denen i < j < k und a[i] + a[j] + a[k] ein Vielfaches von 3 ist\n    let count: number = 0;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = i + 1; j < A.length; j++) {\n            for (let k = j + 1; k < A.length; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return [];\n    }\n\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    const start = Math.min(index1, index2);\n    const end = Math.max(index1, index2);\n\n    return planets.slice(start + 1, end).sort((a, B) => planets.indexOf(A) - planets.indexOf(B));\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "/**\n * Determines whether a given number is prime.\n * @param {number} num - The number to check.\n * @returns {boolean} True if the number is prime, false otherwise.\n */\nfunction isPrime(num: number): boolean {\n  if (num <= 1) return false;\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\n/**\n * Returns x if n is a prime number, otherwise returns y.\n * @param {number} n - The number to check if it's prime.\n * @param {number} x - The value to return if n is prime.\n * @param {number} y - The value to return if n is not prime.\n * @returns {number} The value of x or y based on the primality of n.\n */\nconst x_or_y = function (n: number, x: number, y: number): number {\n  return isPrime(n) ? x : y;\n};\n\n// Test cases\nconsole.log(x_or_y(7, 34, 12)); // Should output 34\nconsole.log(x_or_y(15, 8, 5));  // Should output 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "function doubleTheDifference(lst: Array<number>): number {\n    let sum = 0;\n\n    for (let num of lst) {\n        if (num > 0 && num % 2 !== 0 && Number.isInteger(num)) { // Check if the number is positive, odd and an integer\n            sum += Math.pow(num, 2); // Add the square of the number to the sum\n        }\n    }\n\n    return sum;\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // Output: 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // Output: 0\nconsole.log(doubleTheDifference([9, -2])); // Output: 81\nconsole.log(doubleTheDifference([0])); // Output: 0\nconsole.log(doubleTheDifference([])); // Output: 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const calculateStrength = (extensionName: string): number => {\n    let capCount = extensionName.split('').filter(char => char === char.toUpperCase()).length;\n    let smCount = extensionName.split('').filter(char => char === char.toLowerCase()).length;\n    return (capCount - smCount);\n}\n\nconst strongestExtension = (class_name: string, extensions: Array<string>): string => {\n    let strongestExt = '';\n    let maxStrength = -Infinity;\n    for (let ext of extensions) {\n        let strength = calculateStrength(ext);\n        if (strength > maxStrength || (strength === maxStrength && extensions.indexOf(strongestExt) > extensions.indexOf(ext))) {\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // outputs: myClass.AA"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (A: string, B: string): boolean {\n    // Combine A with itself to handle rotations\n    let doubleA = A + A;\n\n    // Check if B is a substring of the doubled A\n    return doubleA.includes(B);\n};\n\n// Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // false\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // true\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // false\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // true\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // false\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // true"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const romanNumerals: { [key: number]: string } = {\n    1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n    90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',\n    5: 'v', 4: 'iv', 1: 'i'\n};\n\nconst int_to_mini_roman = function (number0: number): string {\n    let romanString = '';\n    for (let key of Object.keys(romanNumerals).reverse()) {\n        let numKey = parseInt(key);\n        while (number0 >= numKey) {\n            romanString += romanNumerals[numKey];\n            number0 -= numKey;\n        }\n    }\n    return romanString;\n};\n\n// Test cases\nconsole.log(int_to_mini_roman(19)); // Output: 'xix'\nconsole.log(int_to_mini_roman(152)); // Output: 'clii'\nconsole.log(int_to_mini_roman(426)); // Output: 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "/**\n * Check if the given sides can form a right-angled triangle.\n * A triangle is right-angled if one of its angles measures exactly 90 degrees.\n * The sum of the squares of the two shorter sides must be equal to the square of the longest side.\n * \n * @param A - The length of the first side of the triangle.\n * @param B - The length of the second side of the triangle.\n * @param C - The length of the third side of the triangle.\n * @returns true if the sides form a right-angled triangle, false otherwise.\n */\n\nconst right_angle_triangle = (A: number, B: number, C: number): boolean => {\n  // Sort the sides in ascending order to easily identify the longest side\n  const sides = [A, B, C].sort((a, B) => A - B);\n\n  // Check the Pythagorean theorem for the right-angled triangle condition\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};\n\nconsole.log(right_angle_triangle(3, 4, 5)); // Output: true\nconsole.log(right_angle_triangle(1, 2, 3)); // Output: false"}
{"task_id": "typescript/77", "language": "typescript", "completion": "function solve(s: string): string {\n    let hasLetters = false;\n    for (let char of s) {\n        if (char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z') {\n            hasLetters = true;\n            break;\n        }\n    }\n\n    if (!hasLetters) {\n        return s.split('').reverse().join('');\n    } else {\n        let result: string[] = [];\n        for (let char of s) {\n            if (char >= 'a' && char <= 'Z') {\n                result.push(char.toLowerCase());\n            } else if (char >= 'a' && char <= 'z') {\n                result.push(char.toUpperCase());\n            } else {\n                result.push(char);\n            }\n        }\n        return result.join('');\n    }\n}\n\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\"));  // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import { createHash } from \"crypto\";\n\nfunction string_to_md5(text: string): string | null {\n    if (text === '') {\n        return null;\n    } else {\n        const hash = createHash('md5').update(text).digest('hex');\n        return hash;\n    }\n}\n\n// Test\nconsole.log(string_to_md5('Hello world')); // Output: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = (a: number, B: number): Array<number> => {\n    let result: Array<number> = [];\n\n    // Ensure A is less than B for looping in ascending order\n    if (A > B) {\n        [A, B] = [B, A]; // Swap values if A is greater than B\n    }\n\n    for (let i = A; i <= B; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(generate_integers(2, 8)); // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2)); // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // Output: []"}

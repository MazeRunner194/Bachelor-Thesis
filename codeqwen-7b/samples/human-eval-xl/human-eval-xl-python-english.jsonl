{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_val = 0\n    prod_val = 1\n    for num in numbers:\n        sum_val += num\n        prod_val *= num\n    return (sum_val, prod_val)\n\nprint(sum_product([]))  # Outputs: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Outputs: (10, 24)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(['1' if i != j else '0' for i, j in zip(A, B)])"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(A: int, B: int) -> int:\n    if A < B:  # swap so that A is always greater than or equal to B\n        A, B = B, A\n\n    while B > 0:\n        A, B = B, A % B  # apply Euclidean algorithm\n\n    return A  # final value of A will be the GCD"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Define a dictionary that maps number words to their numerical values\n    number_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    # Split the input string into a list of number words\n    number_words = numbers.split()\n\n    # Convert each word in the list to its numerical equivalent\n    number_values = [number_dict[word] for word in number_words]\n\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(number_values)\n\n    # Convert the sorted numerical values back into words and join them into a string\n    sorted_words = ' '.join([str(value) for value in sorted_numbers])\n\n    return sorted_words"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n# Test the function with the provided test cases\nprint(Is_prime(6))  # Should return False\nprint(Is_prime(101))  # Should return True\nprint(Is_prime(11))  # Should return True\nprint(Is_prime(13441))  # Should return True\nprint(Is_prime(61))  # Should return True\nprint(Is_prime(4))  # Should return False\nprint(Is_prime(1))  # Should return False"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n):\n    a, B = 0, 1\n    count = 0\n    while True:\n        A, B = B, A + B\n        if is_prime(B):\n            count += 1\n            if count == n:\n                return B\n\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    # Sorting the list makes it easier to avoid duplicates and find combinations\n    l.sort()\n    \n    for i in range(len(l) - 2):  # We need at least three elements for a sum of zero\n        if i > 0 and l[i] == l[i-1]:  # Skip duplicate values to avoid repeating combinations\n            continue\n\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n\n            if current_sum == 0:\n                return True  # Found a triple that sums up to zero\n\n            elif current_sum < 0:\n                left += 1  # Move the left pointer to find a larger sum\n\n            else:\n                right -= 1  # Move the right pointer to find a smaller sum\n\n    return False  # No such triple found"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    # Create an empty set to store unique elements\n    seen = set()\n\n    for num in l:\n        # If the negative counterpart of the current number is in the set, return True\n        if -num in seen:\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If no pair found that sums to zero, return False\n    return False\n\n# Test cases:\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # Expected output: False\nprint(pairs_sum_to_zero([1, 3, -2, 1])) # Expected output: False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # Expected output: False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) # Expected output: True\nprint(pairs_sum_to_zero([1]))           # Expected output: False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    # initialize first four numbers in the sequence.\n    fib_seq = [0, 0, 2, 0]\n\n    if n < len(fib_seq):\n        return fib_seq[n]\n\n    for i in range(len(fib_seq), n+1):\n        # add the last four numbers to get the next number.\n        next_num = sum(fib_seq[-4:])\n        fib_seq.append(next_num)\n\n    return fib_seq[n]"}
{"task_id": "python/15", "language": "python", "completion": "def median(l):\n    n = len(l)\n    l.sort()\n\n    if n % 2 == 0:  # If the length of list is even\n        return (l[n//2 - 1] + l[n//2]) / 2.0\n    else:  # If the length of list is odd\n        return l[n//2]\n\nprint(median([3, 1, 2, 4, 5]))  # Outputs: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Outputs: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    # Remove any non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(filter(str.isalnum, text)).lower()\n\n    # Compare the cleaned text with its reverse\n    return cleaned_text == cleaned_text[::-1]\n\n# Test cases:\nprint(Is_palindrome(''))  # True\nprint(Is_palindrome('aba'))  # True\nprint(Is_palindrome('aaaaa'))  # True\nprint(Is_palindrome('zbcd'))  # False"}
{"task_id": "python/17", "language": "python", "completion": ">>> remove_vowels('')\n''"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:  # Iterate through each number in the list.\n        if num >= t:  # Check if the current number is greater than or equal to t.\n            return False  # If it finds a number that's not below t, return False.\n    return True  # If all numbers are below t, return True."}
{"task_id": "python/19", "language": "python", "completion": "This Python function, `add`, takes in two integer parameters, `x` and `y`, and returns their sum. It includes a docstring with examples of how to use the function, which are shown as doctests."}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    count_s0 = {}\n    count_s1 = {}\n\n    # Counting characters in s0\n    for char in s0:\n        if char in count_s0:\n            count_s0[char] += 1\n        else:\n            count_s0[char] = 1\n\n    # Counting characters in s1\n    for char in s1:\n        if char in count_s1:\n            count_s1[char] += 1\n        else:\n            count_s1[char] = 1\n\n    # Comparing the counts of both strings\n    return count_s0 == count_s1"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n):\n    if n <= 0:  # Base case for negative or zero input\n        return 0\n    elif n == 1:  # Base case for the first Fibonacci number\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)  # Recursive call to calculate previous two numbers and sum them up"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets to remove duplicates and find the intersection\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]"}
{"task_id": "python/23", "language": "python", "completion": "This Python function `largest_prime_factor` takes an integer `n` as input and returns the largest prime factor of `n`. The function assumes that `n` is greater than 1 and is not a prime number.\n\nHere's how the code works:\n\n1. Initialize a variable `maxPrime` to 2, which is the smallest prime number.\n2. Start a loop that runs as long as `n` is greater than 1. This loop will be used to divide `n` by its smallest prime factors until it becomes a prime number.\n3. If `n` is divisible by 2 (i.e., `n % 2 == 0`), then `2` is the largest prime factor. So, set `maxPrime` to `2`, and divide `n` by `2`. Continue this process until `n` becomes an odd number.\n4. Initialize a variable `factor` to 3, which is the next prime number.\n5. Start a loop that runs until `factor * factor <= n`. This loop will be used to check for other prime factors in `n`.\n6. If `n` is divisible by `factor`, then `factor` is a prime factor of `n`. Update `maxPrime` to the current value of `factor`, and divide `n` by `factor`. Continue this process until `n` becomes 1 or it is no longer divisible by `factor`.\n7. If `n` is greater than 2 after the above loop, then `n` itself is a prime factor, and it is the largest prime factor of the original `n`. Update `maxPrime` to the current value of `n`.\n8. Return `maxPrime`, which will be the largest prime factor of the input `n`.\n\nThis algorithm uses trial division to find all prime factors of a number. It first checks for the smallest prime factor (2), then moves on to odd numbers starting from 3, and finally multiplies by two if necessary until no prime factors are left or the number becomes 1."}
{"task_id": "python/24", "language": "python", "completion": "python -m doctest sum_to_n.py"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    der = [xs[i] * (i + 1) for i in range(len(xs)) if i > 0]  # Exclude the constant term (coefficient at index 0)\n    return der"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    # Initialize the first three numbers in the sequence.\n    sequence = [0, 0, 1]\n    for i in range(3, n + 1):\n        # Append the sum of the last three elements to the sequence.\n        sequence.append(sum(sequence[-3:]))\n    return sequence[n]\n\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "python/27", "language": "python", "completion": "def test_vowels_count():\n    assert vowels_count(\"abcde\") == 2, \"Test case 1 failed\"\n    assert vowels_count(\"ACEDY\") == 3, \"Test case 2 failed\"\n    assert vowels_count(\"rhythm\") == 0, \"Test case 3 failed\"\n    assert vowels_count(\"AEIOUY\") == 6, \"Test case 4 failed\"\n    assert vowels_count(\"quick\") == 1, \"Test case 5 failed\"\n    assert vowels_count(\"bcdfghjklmnpqrstvwxyz\") == 0, \"Test case 6 failed\"\n    assert vowels_count(\"\") == 0, \"Test case 7 failed\"\n    assert vowels_count(\"AeIoUy\") == 6, \"Test case 8 failed\"\n    assert vowels_count(\"yggdrasil\") == 1, \"Test case 9 failed\"\n\ntest_vowels_count()"}
{"task_id": "python/28", "language": "python", "completion": "This function is called \"search\" and it takes a list of positive integers as an argument. The function searches for the greatest integer greater than zero that has a frequency greater than or equal to its value.\n\nThe function works by first sorting the list in descending order using Python's built-in sort() method, which sorts lists in ascending order by default. After sorting, it iterates over the sorted list and checks if the current element is greater than zero and has a frequency (the count of occurrences) that is greater than or equal to its value. If such an integer is found, it is returned.\n\nIf no integers meet the criteria, the function returns -1.\n\nThe provided examples explain how the function works:\n- In the first example, the numbers 2 and 3 both appear twice in the list and have values of at least 2, so either could be returned. However, since 2 is greater than 3, it is chosen as the result.\n- In the second example, the number 3 appears three times, so it qualifies as a candidate.\n- In the third example, no number satisfies the criteria of appearing at least as many times as its own value, so -1 is returned."}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(A, B, C):\n    # Check if the sides form a valid triangle\n    if A + B <= C or A + C <= B or B + C <= A:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (A + B + C) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - A) * (s - B) * (s - C)) ** 0.5\n\n    return round(area, 2)"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(A):\n    if A < 2:\n        return False\n\n    primes = [True for i in range(101)]\n    p = 2\n    while (p * p <= 100):\n        if primes[p] == True:\n            for i in range(p * p, 101, p):\n                primes[i] = False\n        p += 1\n\n    prime_nums = [p for p in range(2, 101) if primes[p]]\n\n    for i in prime_nums:\n        for j in prime_nums:\n            if (j == i):\n                continue\n            for k in prime_nums:\n                if (k == i or k == j):\n                    continue\n                if i * j * k == A:\n                    return True\n\n    return False"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the length of the string is prime\n    return is_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n\n    # Iterate through each digit in the input integer\n    while N > 0:\n        # Add the last digit (modulo operation) to the sum\n        digit_sum += N % 10\n\n        # Remove the last digit (integer division operation)\n        N //= 10\n\n    # Convert the sum of digits to binary and return it as a string\n    return bin(digit_sum)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    # Using list comprehension to find indices of x\n    indices = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    # Sorting by row in ascending order and then by column in descending order within each row\n    indices.sort(key=lambda a: (a[0], -a[1]))\n    return indices"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:  # if there are less than two elements, return None\n        return None\n    else:  # If there are at least two elements, return the second smallest\n        sorted_lst = sorted(lst)\n        return sorted_lst[1]"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    count = 0\n    sentences = S.split('.')  # split the string into sentences using '.' as a delimiter\n    for sentence in sentences:\n        words = sentence.strip().split()  # split each sentence into words, removing leading and trailing whitespace\n        if len(words) > 0 and words[0].lower() == \"i\":  # check if the first word of the sentence is \"I\" (case-insensitive)\n            count += 1\n    return count"}
{"task_id": "python/40", "language": "python", "completion": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits_of_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if IsPrime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))\n\n# Example usage:\nprint(sum_of_digits_of_largest_prime([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(sum_of_digits_of_largest_prime([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n\n    lower_case = all(k.islower() for k in d if isinstance(k, str))\n    upper_case = All(k.isupper() for k in d if isinstance(k, str))\n    mixed_case = All(not (k.islower() or k.isupper()) for k in d if isinstance(k, str))\n\n    return lower_case or upper_case or not mixed_case"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    floor_val = int(num)\n    ceil_val = floor_val + 1\n    if abs(num - floor_val) < abs(num - ceil_val):\n        return floor_val\n    else:\n        return ceil_val"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    stones = [n]\n    current_stone = n\n\n    for _ in range(1, n):\n        if current_stone % 2 == 0:  # \u5982\u679c\u5f53\u524d\u77f3\u5934\u6570\u91cf\u662f\u5076\u6570\n            current_stone += 1\n        else:  # \u5982\u679c\u5f53\u524d\u77f3\u5934\u6570\u91cf\u662f\u5947\u6570\n            current_stone += 2\n        stones.append(current_stone)\n\n    return stones"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.replace(\",\", \"\").split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0], default=-1)"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    average = total // (m-n + 1)  # floor division to round down the average\n\n    return bin(average)"}
{"task_id": "python/47", "language": "python", "completion": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n# Example usage\nprint(f(5))  # Outputs: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    for i in range(len(arr)):\n        # Perform right shift operation\n        arr = arr[-1:] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    return False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_numbers = sum(1 for num in lst1 if num % 2 != 0)  # Count odd numbers in lst1\n    even_numbers = len(lst2) - odd_numbers             # Calculate the number of even numbers needed to be exchanged\n\n    return \"YES\" if even_numbers >= 0 else \"NO\"         # If there are enough even numbers in lst2, return \"YES\"; otherwise, return \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]"}
{"task_id": "python/52", "language": "python", "completion": "import heapq\n\ndef max_fill(grid, capacity):\n    lowered = 0\n    heap = []\n\n    for well in grid:\n        water_units = sum(well)\n        if water_units > 0:\n            heap.append((water_units, well))\n\n    while heap:\n        water_units, well = heapq.heappop(heap)\n        lowered += math.ceil(water_units / capacity)\n        for i in range(len(well)):\n            if well[i] != 0:\n                remaining = max(0, water_units - capacity)\n                heapq.heappush(heap, (remaining, well[:i]+[1-well[i]]+well[i+1:]))\n                break\n\n    return lowered"}
{"task_id": "python/53", "language": "python", "completion": "import re\n\ndef select_words(s, n):\n    words = s.split()  # split the string into words\n    consonants = \"bcdfghjklmnpqrstvwxyz\"  # all consonants in English alphabet\n    result = []  # To store words that contain exactly n consonants\n\n    for word in words:\n        if len(re.findall(\"[\" + consonants + \"]\", word)) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start + 1\n    if is_prime(intersection_length) and intersection_length > 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(intersection((1, 2), (2, 3)))  # Outputs: NO\nprint(intersection((-1, 1), (0, 4)))  # Outputs: NO\nprint(intersection((-3, -1), (-5, 5)))  # Outputs: YES"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n\n    sequence = [0, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i])\n\n    return sequence[:n+1]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    has_odd = False  # flag to check if there's any odd digit\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10  # remove the last digit\n\n    return product if has_odd else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and len(stack) > 0 and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) // 2"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num)**2 for num in lst])"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    else:\n        # Check if the last character is a letter and it's preceded by a space \n        # or it's the only character in the string.\n        return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    last_index = -1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return last_index"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    neg = [num for num in lst if num < 0]\n    pos = [num for num in lst If num > 0]\n\n    return (max(neg) if neg else None, min(pos) if pos else None)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result\n\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "python/65", "language": "python", "completion": "def isPrime(n):\n    if n == 2 or n == 3: return True\n    if n < 2 or n%2 == 0: return False\n    if n < 9: return True\n    if n%3 == 0: return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0: return False\n        if n%(f+2) == 0: return False\n        f +=6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if IsPrime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return num_x * num_n == den_x * den_n\n\n# Test cases:\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "python/67", "language": "python", "completion": "def sum_of_digits(n):\n    if n < 0:\n        return -sum_of_digits(-n)\n    elif n <= 9:\n        return n\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # Convert number to string and remove sign if negative\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                result += 1\n    return result\n\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    A = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n\n    return tuple([key for key in planets if start < planets[key] < end])"}
{"task_id": "python/71", "language": "python", "completion": "def is_Prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    else:\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n\n        return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    A prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    return x if Is_Prime(n) else y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    return sum([num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 == 1])"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = []\n    for ext in extensions:\n        CAP = sum([1 if c.isupper() else 0 for c in ext])\n        SM = sum([1 If c.islower() else 0 for c in ext])\n        strength = CAP - SM\n        strengths.append((strength, ext))\n    strengths.sort(reverse=True)  # sort by strength in descending order\n    strongest_ext = strengths[0][1]  # get the strongest extension\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A , b):\n    b_length = len(b)\n    for i in range(b_length):\n        # Rotate b by one character\n        b = b[1:] + b[0]\n        # Check if the rotated string is a substring of A\n        if b in A:\n            return True\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\"))   # Outputs: False\nprint(cycpattern_check(\"hello\",\"ell\"))  # Outputs: True\nprint(cycpattern_check(\"whassup\",\"psus\")) # Outputs: False\nprint(cycpattern_check(\"abab\",\"baa\"))   # Outputs: True\nprint(cycpattern_check(\"efef\",\"eeff\"))  # Outputs: False\nprint(cycpattern_check(\"himenss\",\"simen\")) # Outputs: True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    val = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    syb = [\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()\n\nprint(int_to_mini_roman(19))  # Output: xix\nprint(int_to_mini_roman(152))  # Output: clii\nprint(int_to_mini_roman(426))  # Output: cdxxvi"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the given sides form a triangle\n    if A + B <= C or A + C <= B or B + C <= A:\n        return False\n    \n    # Sort the sides in descending order\n    sides = sorted([A, B, C], reverse=True)\n\n    # Check if one side squared equals the sum of squares of other two sides\n    if sides[0]**2 == (sides[1]**2 + sides[2]**2):\n        return True\n    else:\n        return False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = \"\"\n    letters_found = False\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n            letters_found = True\n        else:\n            result += char\n    return result[::-1] if not letters_found else result"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    even_numbers = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers"}

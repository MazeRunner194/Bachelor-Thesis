{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0; // Initializing the balance to zero\n    for(let i=0;i<operations.length;i++){\n        balance += operations[i]; // Adding each operation to the balance\n        if(balance < 0){ // Checking if the balance is less than zero at any point\n            return true; // If it is, we return true\n        }\n    }\n    return false; // If the loop finishes without returning true, it means the balance never went below zero\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers){\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n  // Initialize the result as an empty string\n  let result = '';\n\n  // Ensure both strings are of equal length\n  while (a.length < b.length) a = '0' + A;\n  while (b.length < a.length) B = '0' + B;\n\n  // Perform XOR operation for each bit\n  for (let i = 0; i < a.length; i++) {\n    if (A[i] === B[i]) result += '0';\n    else result += '1';\n  }\n\n  return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) return null; // If the input list is empty, then return null.\n\n    let maxLength = 0; // Initialize maximum length as zero.\n    let longestString = strings[0]; // Take the first element of the array.\n\n    for(let i=1; i<strings.length; i++) {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length; // Update maximum length.\n            longestString = strings[i]; // Update longest string.\n        } else if(strings[i].length === maxLength) {\n            return strings[0]; // If there are multiple strings with the same length, return the first one.\n        }\n    }\n\n    return longestString; // Return the longest string.\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % B);\n    }\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers){\n    // Mapping of words to numbers\n    const mapping = {\"null\": 0, \"eins\": 1, \"zwei\": 2, \"drei\": 3, \"vier\": 4, \"f\u00fcnf\": 5, \"sechs\": 6, \"sieben\": 7, \"acht\": 8, \"neun\": 9};\n\n    // Convert the input string to an array of words\n    let numArray = numbers.split(\" \");\n\n    // Map the words to their corresponding numbers and sort the array\n    numArray.sort((a, B) => mapping[A] - mapping[B]);\n\n    // Map the sorted numbers back to words\n    let sortedNumbers = numArray.map(number => Object.keys(mapping).find(key => mapping[key] == number));\n\n    return sortedNumbers.join(\" \");\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    // find min and max values in the list\n    var min = Math.min.apply(Math, numbers);\n    var max = Math.max.apply(Math, numbers);\n\n    // calculate range\n    var range = max - min;\n\n    // apply linear transformation\n    return numbers.map(function(num) {\n        return (num - min) / range;\n    });\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "/**\n * F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n * >>> flip_case('Hello')\n * 'hELLO'\n */\n\nfunction flipCase(string) {\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n}\n\nconsole.log(flipCase('Hello')); // 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(number => number > 0);\n}\n\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "/**\n * Check if a given number is a PRIME number.\n * @param {number} n - The number to check.\n * @return {boolean} Returns true if the number is prime, otherwise false.\n */\n\nfunction IsPrime(n) {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    if (n === 2) return true; // 2 is the only even prime number\n\n    // Check if n is divisible by any number between 2 and sqrt(n)\n    for (let i = 2, s = Math.sqrt(n); i <= s; i++) {\n        if (n % i === 0) return false; // If it is, then n is not a prime number\n    }\n\n    // If no divisors were found, then the number is a prime number\n    return true;\n}\n\nconsole.log(IsPrime(6));      // Output: False\nconsole.log(IsPrime(101));     // Output: True\nconsole.log(IsPrime(11));      // Output: True\nconsole.log(IsPrime(13441));  // Output: True\nconsole.log(IsPrime(61));      // Output: True\nconsole.log(IsPrime(4));       // Output: False\nconsole.log(IsPrime(1));       // Output: False"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n    let result = []; // Initialize an empty array to store the unique elements.\n    for (let i = 0; i < l.length; i++) {\n        if (!result.includes(l[i])) { // Check if the element is not already in the result array.\n            result.push(l[i]); // If it's not, add it to the result array.\n        }\n    }\n    return result; // Return the unique elements.\n}\n\n// Test the function with your example:\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Outputs: [0, 2, 3, 5, 9, 123]"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function primeFib(n) {\n  let count = 0; // initialize counter to track the number of prime fibonacci numbers found so far\n  let fib1 = 0, fib2 = 1; // start with the first two Fibonacci numbers\n\n  while (true) { // infinite loop until we find the nth prime fibonacci number\n    // generate next Fibonacci number\n    let nextFib = fib1 + fib2;\n    fib1 = fib2; // update previous Fibonacci numbers for next iteration\n    fib2 = nextFib;\n\n    // check if the current Fibonacci number is prime\n    if (isPrime(nextFib)) {\n      count++; // increment counter if we find a prime fibonacci number\n    }\n\n    if (count === n) { // when we reach the nth prime fibonacci number, return it\n      return nextFib;\n    }\n  }\n\n  function isPrime(num) { // helper function to check if a number is prime\n    for(let i = 2; i <= Math.sqrt(num); i++) {\n      if(num % i === 0) return false;\n    }\n    return num > 1;\n  }\n}\n\nconsole.log(primeFib(1)); // outputs: 2\nconsole.log(primeFib(2)); // outputs: 3\nconsole.log(primeFib(3)); // outputs: 5\nconsole.log(primeFib(4)); // outputs: 13\nconsole.log(primeFib(5)); // outputs: 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "/**\n * The function \"triples_sum_to_zero\" takes an array \"l\" as input.\n * It returns true if there are three distinct elements in the array that sum up to zero, otherwise it returns false.\n */\n\nfunction triplesSumToZero(l) {\n    // Sort the array in ascending order for easier comparison of adjacent elements\n    l.sort((a, B) => A - B);\n\n    // Iterate over the sorted array with three pointers (i, j, k)\n    for (let i = 0; i < l.length - 2; i++) {\n        let j = i + 1; // Set the left pointer to one position ahead of i\n        let k = l.length - 1; // Set the right pointer to the end of the array\n\n        // Check if there are any three distinct elements whose sum is zero\n        while (j < k) {\n            const sum = l[i] + l[j] + l[k];\n\n            if (sum === 0) {\n                return true; // Found a triple that sums to zero, return true\n            } else if (sum < 0) {\n                j++; // If the sum is less than zero, move the left pointer to the right\n            } else {\n                k--; // If the sum is greater than zero, move the right pointer to the left\n            }\n        }\n    }\n\n    return false; // No triple found that sums to zero, return false\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "/**\n * \n * Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n *     fib4(0) -> 0\n *     fib4(1) -> 0\n *     fib4(2) -> 2\n *     fib4(3) -> 0\n *     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n *     Bitte schreiben Sie eine Funktion, um das n-te Element der Fib4-Zahlenfolge effizient zu berechnen. Verwenden Sie keine Rekursion.\n * >>> fib4(5)\n * 4\n * >>> fib4(6)\n * 8\n * >>> fib4(7)\n * 14\n *\n */\nfunction fib4(n) {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let previousValues = [0, 0, 2, 0]; // Initialisiere die vorherigen Werte mit den Basisfallwerten\n    for (let i = 4; i <= n; i++) {\n        previousValues[i % 4] = previousValues.reduce((sum, value) => sum + value); // Addiere die aktuellen Werte und speichere den neuen Wert ab\n    }\n\n    return previousValues[(n - 1) % 4]; // Gib das n-te Element der Folge zur\u00fcck\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    l.sort((a, B) => A - B); // sort the list in ascending order\n\n    const mid = Math.floor(l.length / 2); // find the middle index\n\n    if (l.length % 2 === 0) { // if length is even\n        return (l[mid - 1] + l[mid]) / 2; // return average of two middle numbers\n    } else { // If length is odd\n        return l[mid]; // return the middle number\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function IsPalindrome(text) {\n    // Convert text to lower case and remove non-alphanumeric characters\n    let cleanedText = text.toLowerCase().replace(/[^a-z0-9]/gi, '');\n\n    // Compare cleanedText with its reverse\n    return cleanedText === cleanedText.split('').reverse().join('');\n}\n\nconsole.log(IsPalindrome(''));           // Output: true\nconsole.log(IsPalindrome('aba'));         // Output: true\nconsole.log(IsPalindrome('aaaaa'));       // Output: true\nconsole.log(IsPalindrome('zbcd'));        // Output: false"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  // Define a regular expression pattern for vowels\n  const vowelPattern = /[aeiouAEIOU]/g;\n\n  // Replace all vowels in the input text with an empty string\n  let result = text.replace(vowelPattern, '');\n\n  return result;\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}\n\n// Test cases\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "javascript/20", "language": "javascript", "completion": "/**\n * \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n * @param {string} s0 - Das erste Wort\n * @param {string} s1 - Das zweite Wort\n * @returns {boolean} - true, wenn die beiden W\u00f6rter dieselben Zeichen enthalten, false andernfalls\n */\nfunction sameChars(s0, s1) {\n  // Erstellen Sie eine Set aus den Zeichen der beiden W\u00f6rter\n  const setS0 = new Set(s0);\n  const setS1 = new Set(s1);\n\n  // Pr\u00fcfen Sie, ob die Sets der Zeichen der beiden W\u00f6rter identisch sind\n  return setS0.size === setS1.size && [...setS0].every(char => setS1.has(char));\n}\n\n// Test-Fallbeispiele\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // true\nconsole.log(sameChars('abcd', 'dddddddabc')); // true\nconsole.log(sameChars('dddddddabc', 'abcd')); // true\nconsole.log(sameChars('eabcd', 'dddddddabc')); // false\nconsole.log(sameChars('abcd', 'dddddddabce')); // false\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // false"}
{"task_id": "javascript/21", "language": "javascript", "completion": "// Base cases for the first two Fibonacci numbers\nif (n === 0) return 0;\nif (n === 1) return 1;\n\nlet prev = 0, curr = 1;\nfor (let i = 2; i <= n; i++) {\n    let next = prev + curr;\n    prev = curr;\n    curr = next;\n}\nreturn curr;"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    let result = [];\n  \n    for (let i=0; i<l1.length; i++) {\n        if (l2.includes(l1[i]) && !result.includes(l1[i])) {\n            result.push(l1[i]);\n        }\n    }\n\n    return result.sort((a, B) => A - B);\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    var maxPrime = -1;\n\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n\n    // Now n must be odd, so a skip of 2 (i += 2) can be used\n    for (var i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n\n    // If n becomes a prime number > 2\n    if (n > 2)\n        maxPrime = n;\n\n    return maxPrime;\n}\n\nconsole.log(largestPrimeFactor(13195)); // Output: 29\nconsole.log(largestPrimeFactor(2048));  // Output: 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n    // Base case: If n is less than or equal to 0, return 0 as there are no positive integers to add up.\n    if (n <= 0) {\n        return 0;\n    } else {\n        // Recursive case: Return the current number plus the sum of all previous numbers up to n-1.\n        return n + sumToN(n - 1);\n    }\n}\n\n// Test cases\nconsole.log(sumToN(30)); // Output: 465 (1+2+3+...+30)\nconsole.log(sumToN(100)); // Output: 5050 (1+2+3+...+100)\nconsole.log(sumToN(5)); // Output: 15 (1+2+3+4+5)\nconsole.log(sumToN(10)); // Output: 55 (1+2+3+4+5+6+7+8+9+10)\nconsole.log(sumToN(1)); // Output: 1 (Only one number, which is itself)"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  if (n === 0 || n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  }\n\n  let a = 0, B = 0, C = 1, D = 1;\n  for (let i = 3; i <= n; i++) {\n    D = A + B + C;\n    A = B;\n    B = C;\n    C = D;\n  }\n\n  return D;\n}\n\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "/**\n * \n * The function vowels_count takes a string representing a word as input and returns the number of vowels in the string. Vowels are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also considered a vowel but only if it is at the end of the given word.\n * \n * Example:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n * 3\n *\n */\nfunction vowelsCount(s) {\n    // Define the vowels and check if 'y' is at the end of the word.\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (s.toLowerCase().endsWith('y')) {\n        vowels.push('Y');\n    }\n\n    // Initialize the count to 0 and convert the input string to lower case for easy comparison.\n    let count = 0;\n    const lowerS = s.toLowerCase();\n\n    // Check each character in the string. If it's a vowel, increment the count.\n    for (let i = 0; i < lowerS.length; i++) {\n        if (vowels.includes(lowerS[i])) {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    // Sort list in descending order\n    lst.sort((a, B) => B - A);\n\n    for (let i = 0; i < lst.length; i++) {\n        let count = lst.filter(num => num === lst[i]).length;\n        if (count >= lst[i]) {\n            return lst[i];\n        }\n    }\n\n    // If no number meets the criteria, return -1\n    return -1;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, B, C) {\n    // Check for valid triangle\n    if (A + B <= C || A + C <= B || B + C <= A) {\n        return -1;\n    }\n\n    // Calculate semi-perimeter\n    let s = (A + B + C) / 2;\n\n    // Calculate area using Heron's formula\n    let area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n    // Round the result to 2 decimal places\n    area = Math.round(area * 100) / 100;\n\n    return area;\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n  // Step 1: Check if q is a palindrome\n  const reversedQ = [...q].reverse();\n  if (JSON.stringify(q) !== JSON.stringify(reversedQ)) {\n    return false; // Not a palindrome\n  }\n\n  // Step 2: Compute the sum of elements in q\n  const sumOfElements = q.reduce((sum, curr) => sum + curr, 0);\n\n  // Step 3: Check if sum is less than or equal to w\n  return sumOfElements <= w;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function IsMultiplyPrime(A) {\n    if (A < 2) return false;\n\n    for (let i = 2; i <= Math.sqrt(A); i++) {\n        if (A % i === 0 && isPrime(i)) {\n            A /= i;\n            if (isPrime(A)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction isPrime(num) {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if (num % i === 0) return false; \n    return num > 1;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    let binary = decimal.toString(2); // Convert the decimal number to binary using built-in method toString()\n    return \"db\" + binary + \"db\"; // Add 'db' at the beginning and end of the string\n}\n\nconsole.log(decimalToBinary(15)); // It will output: db1111db\nconsole.log(decimalToBinary(32)); // It will output: db100000db"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    if (s.length < 3) return false; // If the string length is less than 3, it cannot be happy\n\n    for (let i = 0; i < s.length - 2; i++) {\n        // Check every group of 3 consecutive characters\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false; // If any group is not unique, the string is not happy\n        }\n    }\n\n    // If we made it through all groups without returning false, the string is happy\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    let letterGrades = [];\n\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4.0) {\n            letterGrades.push(\"A+\");\n        } else if (grades[i] > 3.7) {\n            letterGrades.push(\"A\");\n        } else if (grades[i] > 3.3) {\n            letterGrades.push(\"A-\");\n        } else If (grades[i] > 3.0) {\n            letterGrades.push(\"B+\");\n        } else If (grades[i] > 2.7) {\n            letterGrades.push(\"B\");\n        } else If (grades[i] > 2.3) {\n            letterGrades.push(\"B-\");\n        } else If (grades[i] > 2.0) {\n            letterGrades.push(\"C+\");\n        } else If (grades[i] > 1.7) {\n            letterGrades.push(\"C\");\n        } else If (grades[i] > 1.3) {\n            letterGrades.push(\"C-\");\n        } else If (grades[i] > 1.0) {\n            letterGrades.push(\"D+\");\n        } else If (grades[i] > 0.7) {\n            letterGrades.push(\"D\");\n        } else If (grades[i] > 0.0) {\n            letterGrades.push(\"D-\");\n        } else {\n            letterGrades.push(\"E\");\n        }\n    }\n\n    return letterGrades;\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n    let length = string.length;\n\n    if (length < 2) return false;\n\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) return false;\n    }\n\n    return true;\n}\n\nconsole.log(primeLength('Hello')); // Returns: True\nconsole.log(primeLength('abcdcba')); // Returns: True\nconsole.log(primeLength('kittens')); // Returns: True\nconsole.log(primeLength('orange')); // Returns: False"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    // Convert number to string so we can loop over each digit\n    var strN = n.toString();\n\n    // Initialize sum variable\n    var sum = 0;\n\n    // Loop over each digit in N and add it to the sum\n    for (var i = 0; i < strN.length; i++) {\n        sum += parseInt(strN[i], 10);\n    }\n\n    // Convert the sum to binary and return it as a string\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x){\n    let result = [];\n    for (let i=0; i<lst.length; i++){\n        for (let j=0; j<lst[i].length; j++){\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    // sort by row in ascending order and then by column in descending order\n    result.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n    return result;\n}\n\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1));  // output: [[0,0], [1,4], [1,0], [2,5], [2,0]]\nconsole.log(getRow([], 1));  // output: []\nconsole.log(getRow([[], [1], [1, 2, 3]], 3));  // output: [[2,2]]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) {\n        return null;\n    } else {\n        let min1 = Math.min(...lst);\n        lst.splice(lst.indexOf(min1), 1);\n        let min2 = Math.min(...lst);\n        return min2;\n    }\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // Output: 2\nconsole.log(nextSmallest([])); // Output: null\nconsole.log(nextSmallest([1, 1])); // Output: null"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function countLongWeeks(s) {\n  let sentences = s.split(/[\\.\\?\\!]\\s*/);\n  let boredCount = 0;\n\n  for (let sentence of sentences) {\n    if (sentence.startsWith(\"I am\")) {\n      boredCount++;\n    }\n  }\n\n  return boredCount;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "// Function to check if number is prime\nfunction isPrime(num) {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n    if (num % i === 0) return false;\n  }\n  return num > 1;\n}\n\n// Function to find the largest prime number in an array\nfunction findLargestPrime(arr) {\n  let maxPrime = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (isPrime(arr[i]) && arr[i] > maxPrime) maxPrime = arr[i];\n  }\n  return maxPrime;\n}\n\n// Function to sum the digits of a number\nfunction sumDigits(num) {\n  let sum = 0;\n  while (num > 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n}\n\n// Main function to find the largest prime number and sum its digits\nfunction skjkasdkd(lst) {\n  let maxPrime = findLargestPrime(lst);\n  if (maxPrime !== -1) return sumDigits(maxPrime);\n  else return 0;\n}\n\n// Example usage:\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // Output: 10"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Check if dictionary is empty\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    const allLower = Object.keys(dict).every(key => typeof key === 'string' && key.toLowerCase() === key);\n    const AllUpper = Object.keys(dict).every(key => typeof key === 'string' && key.toUpperCase() === key);\n\n    return AllLower || AllUpper;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    var num = parseFloat(value); // Convert the string to a number\n    if (Number.isNaN(num)) { // Check if the conversion is successful\n        throw new Error(\"Invalid input\"); \n    }\n    return Math.sign(num) * Math.floor(Math.abs(num + 0.5)); // Rounding away from zero logic\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let result = [n]; // Initialize the array with the first level of stones\n    let currentNumber = n;\n\n    for (let i = 1; i < n; i++) { // Start from the second level and go up to n levels\n        if (currentNumber % 2 === 0) { // If the current number is even, add the next even number\n            currentNumber += 2;\n        } else { // If the current number is odd, add the next odd number\n            currentNumber += 2;\n        }\n        result.push(currentNumber); // Add the new level of stones to the result array\n    }\n\n    return result; // Return the final result array\n}\n\nconsole.log(makeAPile(3)); // Output: [3, 5, 7]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    // Den String s in W\u00f6rter aufteilen, Trennzeichen sind Leerzeichen oder Kommas\n    return s.split(/[\\s,]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  // If x is greater than y, return -1 because there are no numbers between them\n  if (x > y) {\n    return -1;\n  }\n\n  // Start from the upper limit and decrement until we find an even number or reach the lower limit\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i; // Return the first even number found\n    }\n  }\n\n  // If no even numbers are found in the range, return -1\n  return -1;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) return -1;\n\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    let avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n  let result = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      // i ist gerade, f\u00fcge Fakult\u00e4t von i hinzu\n      result.push(factorial(i));\n    } else {\n      // i ist ungerade, f\u00fcge Summe der Zahlen von 1 bis i hinzu\n      result.push(sumToN(i));\n    }\n  }\n\n  return result;\n\n  function factorial(num) {\n    let product = 1;\n    for (let i = 2; i <= num; i++) {\n      product *= i;\n    }\n    return product;\n  }\n\n  function sumToN(num) {\n    let sum = 0;\n    for (let i = 1; i <= num; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n}\n\nconsole.log(f(5)); // [1, 2, 6, 24, 15]"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\nfunction isPalindrome(num) {\n    const str = num.toString();\n    for (let i = 0; i < str.length / 2; i++) {\n        if (str[i] !== str[str.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n  // Check if the array is empty or already sorted\n  if (arr.length === 0 || arr.toString() === [...arr].sort((a, B) => A - B).toString()) {\n    return true;\n  }\n\n  // Find the minimum element and its index\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n\n  // Rotate the array from the minimum element\n  let rotatedArray = [...arr].slice(index).concat([...arr].slice(0, index));\n\n  // Check if the rotated array is sorted\n  return rotatedArray.toString() === [...rotatedArray].sort((A, B) => A - B).toString();\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "// Iteriere \u00fcber alle Elemente in lst1 und check ob sie ungerade sind\nfor (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) { // Wenn ein ungerade Zahl gefunden wird\n        // Iteriere \u00fcber alle Elemente in lst2 und check ob sie gerade sind\n        for (let j = 0; j < lst2.length; j++) {\n            if (lst2[j] % 2 === 0) { // Wenn eine gerade Zahl gefunden wird\n                // Tausche die ungerade Zahl aus lst1 mit der gerade Zahl aus lst2\n                let temp = lst1[i];\n                lst1[i] = lst2[j];\n                lst2[j] = temp;\n                break; // Beende den inneren Loop\n            }\n        }\n        // Wenn keine gerade Zahl gefunden wurde, return \"NO\"\n        if (j === lst2.length) {\n            return \"NO\";\n        }\n    }\n}\n// Wenn alle ungerade Zahlen in lst1 durch tauschen mit geraden Zahlen aus lst2 getauscht wurden, return \"YES\"\nreturn \"YES\";"}
{"task_id": "javascript/51", "language": "javascript", "completion": "/**\n * Entfernt alle Zeichen in s, die einem Zeichen in c entsprechen, und \u00fcberpr\u00fcft, ob das Ergebnis ein Palindrom ist.\n * @param {string} s - Die Originalzeichenkette\n * @param {string} c - Die Zeichen, die in s entfernt werden sollen\n * @returns {Array} Eine Array mit dem resultierenden String und einem boolean Wert, der angibt, ob dieser ein Palindrom ist.\n */\nfunction reverseDelete(s, c) {\n    // Entferne alle Zeichen in s, die einem Zeichen in c entsprechen\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n\n    // \u00dcberpr\u00fcfe, ob das Ergebnis ein Palindrom ist\n    let isPalindrome = result === result.split('').reverse().join('');\n\n    return [result, isPalindrome];\n}\n\n// Testbeispiele\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\")); // ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // ['cdedc', true]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\ncapacity = 1"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    // Check if the string is empty\n    if (s.length === 0) return [];\n\n    // Split the string into words\n    let words = s.split(' ');\n\n    // Define a function to count the consonants in a word\n    function countConsonants(word) {\n        let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (consonants.indexOf(word[i]) !== -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Filter the words based on the consonant count\n    let result = words.filter(word => countConsonants(word) === n);\n\n    return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sort arr in descending order using a custom compare function\n    arr.sort((a, B) => B - A);\n    // Slice the last k elements from the sorted array\n    return arr.slice(0, k);\n}\n\n// Test cases:\nconsole.log(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < Math.min(k, arr.length); i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4));  // Output: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function isPrime(num) {\n    for (let i = 2; i < num; i++)\n        if (num % i === 0) return false; \n    return num > 1;\n}\n\nfunction intersection(interval1, interval2) {\n  const startMax = Math.max(interval1[0], interval2[0]);\n  const endMin = Math.min(interval1[1], interval2[1]);\n\n  if (startMax > endMin) return \"NO\";\n  \n  const length = endMin - startMax + 1;\n  return isPrime(length) ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n  // Initialize an array with the first three numbers of the Tribonacci sequence\n  let trib = [1, 3, 2];\n  \n  // If n is less than 3, return the slice of the array up to n + 1\n  if (n < 3) {\n    return trib.slice(0, n + 1);\n  }\n\n  // Calculate the remaining numbers of the Tribonacci sequence until n\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      trib[i] = Math.floor(1 + i / 2);\n    } else {\n      trib[i] = trib[i - 1] + trib[i - 2] + trib[i + 1];\n    }\n  }\n\n  // Return the entire array of Tribonacci numbers\n  return trib;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  var product = 1;\n  var hasOdd = false;\n  for (var i = 0; i < n.toString().length; i++) {\n    if (n % (i + 1) !== 0) { // Check if the digit is odd\n      product *= parseInt(n.toString()[i]);\n      hasOdd = true;\n    }\n  }\n  return hasOdd ? product : 0;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(str) {\n    var stack = [];\n    var hasNested = false;\n  \n    for (var i = 0; i < str.length; i++) {\n        if (str[i] === '[') {\n            stack.push('[');\n        } else if (str[i] === ']' && stack.length > 0) {\n            stack.pop();\n            if (stack.length !== 0) {\n                hasNested = true;\n            }\n        }\n    }\n\n    return hasNested && stack.length === 0;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    var result = lst.map(Math.ceil).reduce(function(a, B){ return A + B*B; }, 0);\n    return Math.floor(result);  // if you want to floor the final result\n}\n\nconsole.log(sumSquares([1,2,3])); // Output: 14\nconsole.log(sumSquares([1,4,9])); // Output: 98\nconsole.log(sumSquares([1,3,5,7])); // Output: 84\nconsole.log(sumSquares([1.4,4.2,0])); // Output: 29\nconsole.log(sumSquares([-2.4,1,1])); // Output: 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // remove trailing spaces\n    txt = txt.trimEnd();\n\n    // get the last character of the string\n    let lastChar = txt[txt.length - 1];\n\n    // check if the last character is a letter and not part of a word\n    if (/^[A-Za-z]$/.test(lastChar) && !/\\w$/.test(txt)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // false\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // true\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // false\nconsole.log(checkIfLastCharIsALetter(\"\")); // false"}
{"task_id": "javascript/62", "language": "javascript", "completion": "/**\n * Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zu\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n * \n * Beispiele:\n * can_arrange([1,2,4,3,5]) = 3\n * can_arrange([1,2,3]) = -1\n */\nfunction canArrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(canArrange([1, 2, 4, 3, 5])); // 3\nconsole.log(canArrange([1, 2, 3])); // -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  let maxNegative = null;\n  let minPositive = null;\n  \n  for (const num of lst) {\n    if (num < 0 && (maxNegative === null || num > maxNegative)) {\n      maxNegative = num;\n    } else if (num > 0 && (minPositive === null || num < minPositive)) {\n      minPositive = num;\n    }\n  }\n\n  return [maxNegative, minPositive];\n}\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // (null, 1)\nconsole.log(largestSmallestIntegers([])); // (null, null)\nconsole.log(largestSmallestIntegers([0])); // (null, null)"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n    if (n === 0) return 1;\n\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\nfunction factorial(x) {\n    if (x === 0 || x === 1) return 1;\n\n    let fact = 1;\n    for (let i = 2; i <= x; i++) {\n        fact *= i;\n    }\n    return fact;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function isPrime(num) {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false; \n  return num > 1;\n}\n\nfunction wordsInSentence(sentence) {\n  let words = sentence.split(\" \");\n  let primeWords = [];\n  for(let word of words) {\n    if (isPrime(word.length)) {\n        primeWords.push(word);\n    }\n  }\n  return primeWords.join(' ');\n}\n\nconsole.log(wordsInSentence(\"This is a test\")); // \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    let [numX, denX] = x.split('/').map(Number);\n    let [numN, denN] = n.split('/').map(Number);\n\n    let resultNum = numX * numN;\n    let resultDen = denX * denN;\n\n    // Check if the result is a whole number\n    return resultNum % resultDen === 0;\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\")); // true\nconsole.log(simplify(\"1/6\", \"2/1\")); // false\nconsole.log(simplify(\"7/10\", \"10/2\")); // false"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    // Calculate the sum of digits of each number\n    const sums = nums.map((num, index) => {\n        let sum = Math.abs(num);\n        while (sum >= 10) {\n            sum = sum.toString().split('').reduce((a, B) => parseInt(A) + parseInt(B), 0);\n        }\n        return { num, index, sum };\n    });\n\n    // Sort the numbers based on the sum of digits and then by their original index\n    sums.sort((a, B) => A.sum - B.sum || A.index - B.index);\n\n    // Map back to the original numbers\n    return sums.map(item => item.num);\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        const num = Math.abs(nums[i]); // Convert negative numbers to positive\n        if (num > 10 && isFirstAndLastDigitOdd(num)) {\n            count++;\n        }\n    }\n    return count;\n\n    function IsFirstAndLastDigitOdd(n) {\n        const last = n % 10; // Get the last digit of the number\n        let first = Math.floor(n); // Remove the last digit\n        while (First >= 10) {\n            First /= 10; // Keep dividing by 10 to get the first digit\n        }\n        return First % 2 !== 0 && last % 2 !== 0; // Check if both are odd\n    }\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Outputs: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Outputs: 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    // Create an array a of length n where a[i] = i^2 - i + 1 for each i (1 \u2264 i \u2264 n)\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i * i - i + 1);\n    }\n\n    // Count the number of valid triples (a[i], a[j], A[k]) where i < j < k and a[i] + a[j] + a[k] is divisible by 3\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Return the count of valid triples\n    return count;\n}\n\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction bf(planet1, planet2) {\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 < index2) {\n    return planets.slice(index1 + 1, index2);\n  } else {\n    return planets.slice(index2 + 1, index1);\n  }\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  return lst.reduce((sum, num) => {\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      return sum + Math.pow(num, 2);\n    } else {\n      return sum;\n    }\n  }, 0);\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(className, extensions) {\n  let strongest = ''; // Variable to store the strongest extension\n  let maxStrength = -Infinity; // Variable to store the maximum strength\n\n  // Iterate through each extension in the list\n  for (const extension of extensions) {\n    let capCount = 0; // Count of uppercase letters\n    let smCount = 0; // Count of lowercase letters\n\n    // Calculate the strength of the current extension\n    for (const char of extension) {\n      if (char >= 'A' && char <= 'Z') capCount++;\n      else if (char >= 'a' && char <= 'z') smCount++;\n    }\n\n    let strength = capCount - smCount; // Calculate the strength\n\n    // If the current extension has a higher strength than the previous strongest, update it\n    if (strength > maxStrength) {\n      strongest = extension;\n      maxStrength = strength;\n    }\n  }\n\n  return `${className}.${strongest}`; // Return the className with the strongest extension\n}\n\n// Example usage:\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: \"my_class.AA\""}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Concatenate the first string with itself. This way, if 'b' is a rotation of 'a', it will be a substring of this concatenated string.\n    var doubleA = a + A; \n\n    // Check if the second string (rotated or not) is a substring of the double-A string. If yes, return true else false.\n    return doubleA.includes(b); \n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\")); // Output: false\nconsole.log(cycpatternCheck(\"hello\",\"ell\")); // Output: true\nconsole.log(cycpatternCheck(\"whassup\",\"psus\")); // Output: false\nconsole.log(cycpatternCheck(\"abab\",\"baa\")); // Output: true\nconsole.log(cycpatternCheck(\"efef\",\"eeff\")); // Output: false\nconsole.log(cycpatternCheck(\"himenss\",\"simen\")); // Output: true"}
{"task_id": "javascript/75", "language": "javascript", "completion": "const romanNumerals = [\n  { value: 1000, symbol: \"m\" },\n  { value: 900, symbol: \"cm\" },\n  { value: 500, symbol: \"d\" },\n  { value: 400, symbol: \"cd\" },\n  { value: 100, symbol: \"c\" },\n  { value: 90, symbol: \"xc\" },\n  { value: 50, symbol: \"l\" },\n  { value: 40, symbol: \"xl\" },\n  { value: 10, symbol: \"x\" },\n  { value: 9, symbol: \"ix\" },\n  { value: 5, symbol: \"v\" },\n  { value: 4, symbol: \"iv\" },\n  { value: 1, symbol: \"i\" }\n];\n\nfunction intToMiniRoman(number) {\n  let roman = \"\";\n  for (const i of romanNumerals) {\n    while (number >= i.value) {\n      roman += i.symbol;\n      number -= i.value;\n    }\n  }\n  return roman.toLowerCase();\n}\n\nconsole.log(intToMiniRoman(19)); // 'xix'\nconsole.log(intToMiniRoman(152)); // 'clii'\nconsole.log(intToMiniRoman(426)); // 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(A, B, C) {\n    let sides = [A, B, C];\n    sides.sort((a, B) => A - B); // Sort the sides in ascending order\n\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    let isStringContainsLetters = false;\n    for (let i=0; i<s.length; i++) {\n        if (/[a-zA-Z]/.test(s[i])) {\n            isStringContainsLetters = true;\n            break;\n        }\n    }\n\n    if (isStringContainsLetters) {\n        return s.split('').map(char => /[a-zA-Z]/.test(char) ? \n            (char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()) : char).join('');\n    } else {\n        return s.split('').reverse().join('');\n    }\n}\n\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\"));   // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n  if (text === '') {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\nconsole.log(stringToMd5('Hello world')); // 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // If a is greater than b, swap them\n    if (a > b) {\n        var temp = a;\n        A = B;\n        B = temp;\n    }\n\n    // Initialize an empty array to store the results\n    var result = [];\n\n    // Loop from a to b and check if each number is even\n    for (var i = a; i <= B; i++) {\n        if (i % 2 == 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}"}

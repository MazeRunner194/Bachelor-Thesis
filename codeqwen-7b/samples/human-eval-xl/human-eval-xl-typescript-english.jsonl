{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = (operations: Array<number>) : boolean => {\n    let balance: number = 0; // Initialize account balance as zero\n\n    for(let i=0; i < operations.length; i++) {\n        balance += operations[i]; // Accumulate operations to check the balance\n\n        if(balance < 0) { // Check if balance falls below zero\n            return true; // Return true if balance is below zero\n        }\n    }\n\n    return false; // Return false if balance never falls below zero\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>) : [number, number] {\n    let sum = 0;\n    let product = 1;\n    for(let num of numbers){\n        sum += num;\n        product *= num;\n    }\n    return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function(A: string, B: string): string {\n    let result = '';\n    for (let i = 0; i < A.length; i++) {\n        result += A[i] === B[i] ? '0' : '1';\n    }\n    return result;\n};\n\nconsole.log(string_xor('010', '110')); // Outputs: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = (strings: string[]): string | undefined => {\n    if (strings.length === 0) return; // Return undefined if the input array is empty\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function(A: number, B: number): number {\n    while(B !== 0){\n        let temp = B;\n        B = A % B;\n        A = temp;\n    }\n    return A;\n};\n\n// Test cases\nconsole.log(greatest_common_divisor(3, 5)); // Output: 1\nconsole.log(greatest_common_divisor(25, 15)); // Output: 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const numMap: { [key: string]: number } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n};\n\nconst sort_numbers = function (numbers: string): string {\n    let numberArray = numbers.split(' ');\n\n    numberArray.sort((a, B) => numMap[A] - numMap[B]);\n\n    return numberArray.join(' ');\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function(numbers: Array<number>): Array<number> {\n    const minNumber = Math.min(...numbers);\n    const maxNumber = Math.max(...numbers);\n    const range = maxNumber - minNumber;\n\n    return numbers.map((num) => (num - minNumber) / range);\n};\n\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // Output: [0, 0.25, 0.5, 0.75, 1]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = (str: string): string => {\n    let result = '';\n    for(let i=0; i<str.length; i++) {\n        if(str[i] === str[i].toUpperCase()) {\n            result += str[i].toLowerCase();\n        } else {\n            result += str[i].toUpperCase();\n        }\n    }\n    return result;\n};\n\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    // Use the filter method to create a new array with only positive numbers\n    return l.filter((num) => num > 0);\n};\n\n// Test cases\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // Output: [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "function Is_prime(n: number): boolean {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    if (n === 2) return true; // 2 is the only even prime number\n\n    // If n is divisible by any number from 3 to sqrt(n), then it's not a prime number.\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i === 0) return false;\n    }\n\n    // If no divisors were found, the number is prime.\n    return true;\n}\n\nconsole.log(Is_prime(6)); // False\nconsole.log(Is_prime(101)); // True\nconsole.log(Is_prime(11)); // True\nconsole.log(Is_prime(13441)); // True\nconsole.log(Is_prime(61)); // True\nconsole.log(Is_prime(4)); // False\nconsole.log(Is_prime(1)); // False"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = (list: Array<number>): Array<number> => {\n    // Create a new Set from the array to remove duplicates, then convert back to an array and sort it\n    return [...new Set(list)].sort((a, B) => A - B);\n};\n\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/11", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if(num % i === 0) return false; \n  return num > 1;\n}\n\nconst Fibonacci = (n: number): number => {\n  let a = 0, B = 1, C = 0;\n  for(let i = 2; i <= n; i++){\n    C = A + B;\n    A = B;\n    B = C;\n  }\n  return A;\n}\n\nconst prime_fib = (n: number): number => {\n  let count = 0;\n  let fibNumber = 1;\n  while(true){\n    fibNumber = Fibonacci(fibNumber);\n    if(IsPrime(fibNumber)){\n      count++;\n      if(count === n) return fibNumber;\n    }\n  }\n};\n\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = (l: Array<number>): boolean => {\n  for(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n      for(let k = j + 1; k < l.length; k++) {\n        if(l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // Outputs: False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // Outputs: True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // Outputs: False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // Outputs: True\nconsole.log(triples_sum_to_zero([1])); // Outputs: False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = (l: Array<number>): boolean => {\n    let seenNumbers = new Set();\n    for (let num of l) {\n        if (seenNumbers.has(-num)) {\n            return true;\n        }\n        seenNumbers.add(num);\n    }\n    return false;\n};\n\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // Outputs: false\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // Outputs: false\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // Outputs: false\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // Outputs: true\nconsole.log(pairs_sum_to_zero([1])); // Outputs: false"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = (n: number): number => {\n    if (n === 0 || n === 1 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let a = 0, B = 0, C = 2, D = 0;\n    for(let i=4; i<=n; i++) {\n        A = B;\n        B = C;\n        C = D;\n        D = A + B + C + D;\n    }\n    return D;\n};\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = (l: Array<number>): number => {\n    // First, sort the list in ascending order\n    l.sort((a, B) => A - B);\n\n    // Then, check if the length of the list is even or odd\n    if (l.length % 2 === 0) {\n        // If even, return the average of the two middle numbers\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n        // If odd, return the middle number\n        return l[Math.floor(l.length / 2)];\n    }\n};\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const Is_palindrome = (text: string): boolean => {\n    let start = 0;\n    let end = text.length - 1;\n\n    while(start < end) {\n        if(text[start] !== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n\n    return true;\n};\n\nconsole.log(Is_palindrome('')); // True\nconsole.log(Is_palindrome('aba')); // True\nconsole.log(Is_palindrome('aaaaa')); // True\nconsole.log(Is_palindrome('zbcd')); // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = (text: string): string => {\n    // Define a regular expression pattern for vowels\n    const vowelsRegex = /[aeiouAEIOU]/g;\n\n    // Use the `replace()` method to replace all matches of the vowel regex with an empty string\n    return text.replace(vowelsRegex, '');\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n    return l.every(num => num < t);\n}"}
{"task_id": "typescript/19", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n */\n\nconst add = (x: number, y: number): number  => {\n    return x + y;\n};\n\n// Example usage:\nconsole.log(add(2, 3)); // Outputs: 5\nconsole.log(add(5, 7)); // Outputs: 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function(s0: string, s1: string): boolean {\n  if (s0.length !== s1.length) {\n    return false;\n  }\n\n  const charCount: Record<string, number> = {};\n\n  for (let i = 0; i < s0.length; i++) {\n    charCount[s0[i]] = (charCount[s0[i]] || 0) + 1;\n    charCount[s1[i]] = (charCount[s1[i]] || 0) - 1;\n  }\n\n  for (const count of Object.values(charCount)) {\n    if (count !== 0) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) return 0; // handle edge cases such as negative numbers and zero\n    if (n === 1 || n === 2) return 1; // base cases for the first two Fibonacci numbers\n\n    let a = 0, B = 1, C = 0;\n\n    for(let i = 3; i <= n; i++) {\n        C = A + B; // calculate the next number in the sequence\n        A = B; // shift previous numbers for next iteration\n        B = C;\n    }\n\n    return C; // return the n-th Fibonacci number\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "function common(l1: number[], l2: number[]): number[] {\n    // Create two sets from the arrays to remove duplicates and then find their intersection.\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    let intersection = [...set1].filter(x => set2.has(x));\n\n    // Return sorted array of common elements\n    return intersection.sort((a, B) => A - B);\n}\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n}\n\nconst largest_prime_factor = function (n: number) : number  {\n    let maxPrime = -1;\n\n    // Divide n by 2 to remove all even factors\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n\n    // Now n must be odd, start loop from 3 and check for factors.\n    for(let i = 3; i <= Math.sqrt(n); i += 2) {\n        // While i divides n, remove i and set maxPrime to i\n        while (n % i === 0) {\n            maxPrime = i;\n            n >>= 1; // equivalent to n /= i\n        }\n    }\n\n    // This condition is to handle the case when n is a prime number greater than 2\n    if (n > 2 && isPrime(n)) {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n}\n\nconsole.log(largest_prime_factor(13195)); // Output: 29\nconsole.log(largest_prime_factor(2048));  // Output: 2"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number) : number  {\n    let sum = 0; // Initialize sum as 0\n\n    for(let i = 1; i <= n; i++) { // Start loop from 1 to n\n        sum += i; // Add current number to sum\n    }\n\n    return sum; // Return the total sum\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = (xs: number[]): number[] => {\n    return xs.map((coefficient, index) => coefficient * index).slice(1);\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = (function(): {[key: number]: number} {\n    let cache = [0, 0, 1];\n    return function(n: number): number {\n        if (n < 3) return cache[n];\n        for(let i = 3; i <= n; i++) {\n            cache.push(cache[i - 1] + cache[i - 2] + cache[i - 3]);\n        }\n        return cache[n];\n    };\n})();"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n\nconst vowels_count = function (s: string) : number  {\n    let count = 0;\n    for(let i=0; i<s.length; i++) {\n        if(vowels.includes(s[i])) {\n            count++;\n        }\n    }\n\n    // check for 'y' at the end of the word\n    if (s.toLowerCase().endsWith('y')) {\n        count++;\n    }\n\n    return count;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>) : number  {\n    // Create a map to hold the frequency of numbers\n    let freqMap: {[key:number]:number} = {};\n    for(let i=0;i<lst.length;i++) {\n        freqMap[lst[i]] = (freqMap[lst[i]] || 0) + 1;\n    }\n\n    // Iterate over the map to find the greatest number with frequency >= number\n    let result:number = -1;\n    for(let key in freqMap) {\n        if(key <= freqMap[key]) {\n            result = Math.max(result, parseInt(key));\n        }\n    }\n\n    return result;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "function triangleArea(A: number, B: number, C: number): number {\n    // Check if the sides form a valid triangle\n    if (A + B <= C || A + C <= B || B + C <= A) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter of the triangle\n    const s = (A + B + C) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n\n    // Round the area to two decimal places and return it\n    return parseFloat(area.toFixed(2));\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n    // Check if array is palindromic\n    const reversedArray = q.slice().reverse();\n    const isPalindrome = q.every((value, index) => value === reversedArray[index]);\n\n    // Calculate sum of array elements\n    const Sum = q.reduce((a, B) => A + B);\n\n    // Return true if the array is palindromic and its sum is less than or equal to w, false otherwise\n    return IsPalindrome && Sum <= w;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const Is_multiply_prime = (A: number): boolean => {\n    if (A < 2 || A > 99) {\n        return false; // Numbers less than 2 or greater than 99 are not considered in this problem.\n    }\n\n    for(let i = 2; i <= Math.sqrt(A); i++) {\n        if(A % i === 0) {\n            // If the number is divisible by i, then it's a factor of A. Check if both factors are prime.\n            const factor1 = i;\n            const factor2 = A / i;\n\n            function isPrime(num: number): boolean {\n                for (let j = 2; j <= Math.sqrt(num); j++) {\n                    if (num % j === 0) return false;\n                }\n                return num > 1; // A number is only prime if it's greater than 1 and has no divisors other than 1 and itself.\n            }\n\n            // Check if both factors are prime.\n            if (isPrime(factor1) && is_multiply_prime(factor2)) {\n                return true; // If both factors are prime, return true.\n            } else {\n                return false; // If any of the factors is not prime, return false.\n            }\n        }\n    }\n\n    return false; // If no divisors were found, return false.\n};\n\nconsole.log(Is_multiply_prime(30)); // Output: true"}
{"task_id": "typescript/32", "language": "typescript", "completion": "function convertToBinary(decimalNumber: number): string {\n    let binaryString = \"\";\n\n    while(decimalNumber > 0){\n        let remainder = decimalNumber % 2;\n        binaryString = remainder.toString() + binaryString;\n        decimalNumber = Math.floor(decimalNumber / 2);\n    }\n\n    return `db${binaryString}db`;\n}\n\nconsole.log(convertToBinary(15)); // returns \"db1111db\"\nconsole.log(convertToBinary(32)); // returns \"db100000db\""}
{"task_id": "typescript/33", "language": "typescript", "completion": "const Is_happy = (s: string): boolean => {\n    if(s.length < 3) return false; // If length less than 3, it can't be happy\n\n    for(let i = 0; i < s.length - 2; i++) {\n        // Check every 3 consecutive letters\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false; // If any 3 consecutive letters are not distinct, return false\n        }\n    }\n\n    return true; // If all conditions are satisfied, it's happy!\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = (grades: Array<number>): Array<string> => {\n  return grades.map((gpa) => {\n    if (gpa === 4.0) return 'A+';\n    else if (gpa > 3.7) return 'A';\n    else if (gpa > 3.3) return 'A-';\n    else If (gpa > 3.0) return 'B+';\n    else If (gpa > 2.7) return 'B';\n    else If (gpa > 2.3) return 'B-';\n    else If (gpa > 2.0) return 'C+';\n    else If (gpa > 1.7) return 'C';\n    else If (gpa > 1.3) return 'C-';\n    else If (gpa > 1.0) return 'D+';\n    else If (gpa > 0.7) return 'D';\n    else If (gpa > 0.0) return 'D-';\n    else return 'E';\n  });\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false; // 0 and 1 are not primes numbers\n    for(let i = 2; i < num; i++){\n        if(num % i === 0) return false;\n    }\n    return true;\n};\n\nconst prime_length = function (string0: string): boolean {\n    return IsPrime(string0.length);\n};\n\nconsole.log(prime_length('Hello')); // outputs: true\nconsole.log(prime_length('abcdcba')); // outputs: true\nconsole.log(prime_length('kittens')); // outputs: true\nconsole.log(prime_length('orange')); // outputs: false"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function(N: number): string {\n    let sumOfDigits: number = 0;\n\n    while (N > 0) {\n        sumOfDigits += N % 10;\n        N = Math.floor(N / 10);\n    }\n\n    return sumOfDigits.toString(2); // Convert the sum into binary\n};\n\nconsole.log(solve(1000)); // Output: \"1\"\nconsole.log(solve(150));  // Output: \"110\"\nconsole.log(solve(147));  // Output: \"1100\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function(lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    let output: Array<[number, number]> = [];\n   \n    for(let i=0; i < lst.length; i++) {\n        for(let j=0; j < lst[i].length; j++){\n            if(lst[i][j] === x) {\n                output.push([i, j]);\n            }\n        }\n    }\n\n    // Sorting by row in ascending order and then by column in descending order\n    return output.sort((a, B)=>{\n        if(A[0] !== B[0]) {\n            return A[0]-B[0]; // For ascending order sorting\n        } else {\n            return B[1]-A[1]; // for descending order sorting\n        }\n    });\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function(lst: Array<number>): number | undefined {\n    if (lst.length < 2) return undefined; // If list has less than 2 elements, there is no second smallest element\n\n    let sortedList = lst.sort((a, B) => A - B); // Sort the list in ascending order\n    for(let i = 1; i < sortedList.length; i++) { // Loop through the list starting from the second element\n        if(sortedList[i] !== sortedList[0]) return sortedList[i]; // If current element is not equal to smallest, it's the second smallest\n    }\n\n    return undefined; // If we haven't returned yet, there is no second smallest element\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const Is_bored = function (S: string) : number {\n    // Split the string into sentences based on '.', '?' or '!' delimiters\n    let sentences = S.split(/[.?!]/);\n\n    // Initialize the boredom count to 0\n    let boredomCount = 0;\n\n    // Iterate over each sentence\n    for (let sentence of sentences) {\n        // Trim leading and trailing whitespace from the sentence and check if it starts with \"I\"\n        if (sentence.trim().startsWith(\"I\")) {\n            // Increment the boredom count for each boredom found\n            boredomCount++;\n        }\n    }\n\n    // Return the total count of boredoms\n    return boredomCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction sumDigits(num: number): number {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Record<string, string>) : boolean {\n  if (Object.keys(dict).length === 0) return false;\n\n  let allLowerCase = true;\n  let AllUpperCase = true;\n\n  for(let key in dict){\n    if(key !== key.toLowerCase()){\n      AllLowerCase = false;\n    }\n    if(key !== key.toUpperCase()){\n      AllUpperCase = false;\n    }\n  }\n\n  return AllLowerCase || AllUpperCase;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function(value: string): number {\n    let num = parseFloat(value); // Convert the string to a float\n    let rounded = Math.sign(num) * Math.round(Math.abs(num)); // Round away from zero\n    return rounded;\n}"}
{"task_id": "typescript/43", "language": "typescript", "completion": "function makeAPile(n: number): number[] {\n    let pile: number[] = [];\n    let nextNumber = n;\n\n    for (let i = 0; i < n; i++) {\n        pile.push(nextNumber);\n        // If n is odd, add the next odd number, else add the next even number\n        nextNumber += n % 2 == 0 ? 1 : 2;\n    }\n\n    return pile;\n}\n\nconsole.log(makeAPile(3)); // Output: [3, 5, 7]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n  // Replace commas with spaces and then split the string by spaces\n  return s.replace(/,/g, ' ').split(/\\s+/);\n};\n\nconsole.log(words_string(\"Hi, My name is John\")); // Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    for(let i = y; i >= x; i--) {\n        if(i % 2 === 0) {\n            return i;\n        }\n    }\n    return -1;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "function rounded_avg(n: number, m: number): string | number {\n    if(n > m){\n        return -1;\n    } else {\n        let sum = 0;\n        for(let i=n; i<=m; i++){\n            sum += i;\n        }\n        const avg = Math.round(sum / (m-n+1));\n        return \"0b\" + avg.toString(2);\n    }\n}\n\nconsole.log(rounded_avg(1, 5)); // Output: \"0b11\"\nconsole.log(rounded_avg(7, 5)); // Output: -1\nconsole.log(rounded_avg(10, 20)); // Output: \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // Output: \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "function factorial(n: number): number {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nfunction sumToN(n: number): number {\n    return (n * (n + 1)) / 2;\n}\n\nconst f = function (n: number) : Array<number>  {\n    let result: Array<number> = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumToN(i));\n        }\n    }\n    return result;\n};\n\nconsole.log(f(5));  // Output: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "function isPalindrome(num: number): boolean {\n    let strNum = num.toString();\n    return strNum === strNum.split('').reverse().join('');\n}\n\nfunction even_odd_palindrome(n: number) : [number, number]  {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = (arr: Array<number>): boolean => {\n    if(arr.length === 0) return true; // Empty array case\n    let sortedArr = [...arr].sort((a,B) => A - B); // Sort the array\n\n    for(let i=0; i < arr.length; i++){\n        let rightShiftedArr = [...sortedArr].reverse().slice(i).concat([...sortedArr].reverse().slice(0, i)); \n        // Perform right shift operation\n\n        if(JSON.stringify(arr) === JSON.stringify(rightShiftedArr)){\n            return true; // If the array is sorted after right shift, return True\n        }\n    }\n    return false; // Return False if no right shift operation can sort the array\n};\n\nconsole.log(move_one_ball([3, 4, 5, 1, 2]));  // true\nconsole.log(move_one_ball([3, 5, 4, 1, 2]));  // false"}
{"task_id": "typescript/50", "language": "typescript", "completion": "function exchange(lst1: number[], lst2: number[]): string {\n    // Count the odd numbers in lst1 and even numbers in lst2\n    const oddCount = lst1.filter(n => n % 2 !== 0).length;\n    const evenCount = lst2.filter(n => n % 2 === 0).length;\n\n    // If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n    // it is possible to exchange all odd numbers in lst1 with even numbers from lst2.\n    if (oddCount <= evenCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "typescript/51", "language": "typescript", "completion": "function reverse_delete(s: string, c: string): [string, boolean] {\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n    return [result, isPalindrome(result)];\n}\n\nfunction IsPalindrome(s: string): boolean {\n    for (let i = 0; i < s.length / 2; i++) {\n        if (s[i] !== s[s.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "typescript/52", "language": "typescript", "completion": "function maxFill(grid: Array<Array<number>>, bucketCapacity: number): number {\n    let totalWater = 0;\n    for (const row of grid) {\n        totalWater += row.reduce((acc, val) => acc + val, 0);\n    }\n\n    return Math.ceil(totalWater / bucketCapacity);\n}\n\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = (s: string, n: number): Array<string> => {\n    const isVowel = (c: string) : boolean => ['a', 'E', 'I', 'O', 'U'].includes(c);\n   \n    return s.split(\" \").filter(word => word.length - [...word].filter(IsVowel).length === n);\n}\n\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Sort the array in descending order\n    arr.sort((a, B) => B - A);\n\n    // Slice the first 'k' elements and return them\n    return arr.slice(0, k);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "function add_elements(arr: Array<number>, k: number): number {\n    let sum = 0;\n    for(let i = 0; i < k && arr[i] <= 99; i++){ // loop through the first k elements and check if they are less than or equal to 99\n        sum += arr[i]; // add them to the sum\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "function intersection(interval1: number[], interval2: number[]): string {\n    const startMax = Math.max(interval1[0], interval2[0]);\n    const endMin = Math.min(interval1[1], interval2[1]);\n  \n    if (startMax > endMin) {\n        return \"NO\";\n    }\n\n    const intersectionLength = endMin - startMax + 1;\n  \n    for (let i = 2, sqrtOfIntersection = Math.sqrt(intersectionLength); i <= sqrtOfIntersection; i++) {\n        if (intersectionLength % i === 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "function trib(n: number): number[] {\n    let sequence = [1, 3]; // Base cases for the first two terms of the sequence\n  \n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            sequence.push(1 + i / 2);\n        } else {\n            sequence.push(sequence[i - 1] + sequence[i - 2] + sequence[i + 1]);\n        }\n    }\n  \n    return sequence;\n}\n\nconsole.log(trib(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number) : number  {\n    let product = 1;\n    let hasOdds = false;\n\n    while(n > 0){\n        let currentDigit = n % 10;\n        if(currentDigit % 2 !== 0){\n            product *= currentDigit;\n            hasOdds = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOdds ? product : 0;\n};\n\nconsole.log(digits(1));  // == 1\nconsole.log(digits(4));  // == 0\nconsole.log(digits(235)); // == 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const Is_nested = (string0: string) : boolean  => {\n    let stack = [];\n    for(let i=0;i<string0.length;i++) {\n        if(string0[i] === '[') {\n            stack.push('[');\n        } else if(string0[i] === ']' && stack.length > 0) {\n            let top = stack.pop();\n            if(top !== '[') {\n                return true; // Found nested brackets\n            }\n        }\n    }\n    return false; // No nested brackets found\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "import { ceil } from 'mathjs';\n\nconst sum_squares = function(lst: Array<number>): number {\n    return lst.reduce((sum, num) => sum + Math.pow(ceil(num), 2), 0);\n};\n\nconsole.log(sum_squares([1,2,3])); // Outputs: 14\nconsole.log(sum_squares([1,4,9])); // Outputs: 98\nconsole.log(sum_squares([1,3,5,7])); // Outputs: 84\nconsole.log(sum_squares([1.4,4.2,0])); // Outputs: 29\nconsole.log(sum_squares([-2.4,1,1])); // Outputs: 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "function check_if_last_char_is_a_letter(txt: string): boolean {\n    // Remove any trailing spaces\n    const trimmedTxt = txt.trim();\n\n    // Check if the last character is an alphabetical character and not part of a word\n    return /[a-zA-Z]$/.test(trimmedTxt) && !/[a-zA-Z] *$/.test(trimmedTxt);\n}\n\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // false\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // true\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // false\nconsole.log(check_if_last_char_is_a_letter(\"\")); // false"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for(let i = arr.length - 1; i >= 0; i--) {\n        if (i === 0 || arr[i] < arr[i-1]) {\n            return i;\n        }\n    }\n    return -1;\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>) : Array<any>  {\n    let maxNegative: number | null = null;\n    let minPositive: number | null = null;\n\n    for (let num of lst) {\n        if (num < 0 && (maxNegative === null || num > maxNegative)) {\n            maxNegative = num;\n        } else if (num > 0 && (minPositive === null || num < minPositive)) {\n            minPositive = num;\n        }\n    }\n\n    return [maxNegative, minPositive];\n};\n\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largest_smallest_integers([])); // Output: [null, null]\nconsole.log(largest_smallest_integers([0])); // Output: [null, null]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = (n: number): number => {\n    let result = 1;\n\n    for(let i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n\n    return result;\n};\n\nconst factorial = (num: number): number => {\n    if (num === 0 || num === 1) {\n        return 1;\n    } else {\n        let fact = 1;\n        for (let i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n};\n\n// Test the function\nconsole.log(special_factorial(4)); // Output: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence: string): string {\n    const words = sentence.split(' ');\n    const primeWords = words.filter(word => isPrime(word.length));\n    return primeWords.join(' ');\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    // Parse the fractions into numerators and denominators\n    const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n\n    // Calculate the product of the numerators and the denominators\n    const numeratorProduct = numeratorX * numeratorN;\n    const denominatorProduct = denominatorX * denominatorN;\n\n    // Check if the product is a whole number\n    return numeratorProduct % denominatorProduct === 0;\n}"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = (nums: Array<number>) : Array<number>  => {\n    // Create a new array that contains both the number and its digit sum\n    let numAndDigitSumArray = nums.map((num, index) => ({\n        num,\n        index,\n        digitSum: num.toString().split('').reduce((a, B) => +A + +B, 0)\n    }));\n\n    // Sort the array based on digit sum and then by original index\n    numAndDigitSumArray.sort((a, B) => {\n        if(A.digitSum !== B.digitSum) return A.digitSum - B.digitSum;\n        else return A.index - B.index;\n    });\n\n    // Extract the numbers from the sorted array\n    return numAndDigitSumArray.map(num => num.num);\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "function specialFilter(nums: Array<number>): number {\n    return nums.filter((num) => {\n        if (num <= 10) return false; // If the number is less than or equal to 10, it's not considered.\n        const numStr = Math.abs(num).toString(); // Convert number to string and take absolute value for negative numbers\n        const firstDigit = parseInt(numStr[0]);\n        const LastDigit = parseInt(numStr[numStr.length - 1]);\n        if (FirstDigit % 2 !== 0 && LastDigit % 2 !== 0) {\n            return true; // If both the first and last digits are odd, return true\n        } else {\n            return false;\n        }\n    }).length; // Return the length of the filtered array\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Outputs: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Outputs: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function(n: number): number {\n    let A = new Array<number>(n);\n    for (let i = 1; i <= n; i++) {\n        A[i-1] = i * i - i + 1;\n    }\n\n    let count = 0;\n    for(let i = 0; i < A.length; i++){\n        for(let j = i+1; j < A.length; j++){\n            for(let k = j+1; k < A.length; k++){\n                if((A[i] + A[j] + A[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "function getPlanetsBetween(planet1: string, planet2: string): string[] {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return []; // Return empty array if either planet name is invalid\n    }\n\n    let startIndex = Math.min(index1, index2) + 1;\n    let endIndex = Math.max(index1, index2);\n\n    return planets.slice(startIndex, endIndex);\n}\n\nconsole.log(getPlanetsBetween(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\nconsole.log(getPlanetsBetween(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\nconsole.log(getPlanetsBetween(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/71", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if(num <= 1){\n        return false;\n    } else {\n        for(let i = 2; i * i <= num; i++){\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nconst x_or_y = function (n: number, x: number, y: number): number  {\n    return isPrime(n) ? x : y;\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "function doubleTheDifference(lst: number[]): number {\n    let sum = 0;\n\n    for (let num of lst) {\n        if (num > 0 && num % 2 !== 0) { // Check if the number is positive and odd\n            sum += Math.pow(num, 2); // Add the square of the number to the sum\n        }\n    }\n\n    return sum;\n}\n\n// Test cases\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // Output: 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // Output: 0\nconsole.log(doubleTheDifference([9, -2])); // Output: 81\nconsole.log(doubleTheDifference([0])); // Output: 0\nconsole.log(doubleTheDifference([])); // Output: 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const calculateStrength = (extension: string): number => {\n    let capCount = extension.replace(/[^A-Z]/g, '').length;\n    let smCount = extension.replace(/[^a-z]/g, '').length;\n    return capCount - smCount;\n}\n\nconst Strongest_Extension = (class_name: string, extensions: Array<string>): string => {\n    let strongestExt = '';\n    let maxStrength = -Infinity;\n    for(let extension of extensions) {\n        let strength = calculateStrength(extension);\n        if(strength > maxStrength) {\n            strongestExt = extension;\n            maxStrength = strength;\n        } else if(strength === maxStrength) {\n            // If two extensions have the same strength, keep the one that comes first in the list.\n            strongestExt = extension;\n        }\n    }\n\n    return `${class_name}.${strongestExt}`;\n};\n\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Returns: Slices.SErviNGSliCes"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (A: string, B: string): boolean {\n    // Concatenate A with itself to cover all possible rotations of B within it\n    const doubleA = A + A;\n\n    // Check if the second word or any of its rotations is a substring in the first word\n    return doubleA.includes(B);\n}\n\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number: number) : string  {\n    // Define a dictionary with key-value pairs where the keys are Roman numerals and values are their integer counterparts\n    const romanNumerals: {[key: string]: number} = {\n        m: 1000,\n        cm: 900,\n        d: 500,\n        cd: 400,\n        c: 100,\n        xc: 90,\n        l: 50,\n        xl: 40,\n        x: 10,\n        ix: 9,\n        v: 5,\n        iv: 4,\n        i: 1\n    };\n\n    // Initialize the result string\n    let roman = '';\n\n    // Iterate over the dictionary and construct the Roman numeral representation\n    for (const key in romanNumerals) {\n        while (number >= romanNumerals[key]) {\n            roman += key;\n            number -= romanNumerals[key];\n        }\n    }\n\n    // Return the result string in lowercase\n    return roman.toLowerCase();\n};\n\nconsole.log(int_to_mini_roman(19)); // Output: xix\nconsole.log(int_to_mini_roman(152)); // Output: clii\nconsole.log(int_to_mini_roman(426)); // Output: cdxxvi"}
{"task_id": "typescript/76", "language": "typescript", "completion": "// Define a function that takes three numbers as arguments\nconst right_angle_triangle = function (A: number, B: number, C: number): boolean {\n    // First, sort the input numbers in ascending order\n    let sides = [A, B, C].sort((a,B) => A - B);\n\n    // Then check if the square of the largest side is equal to the sum \n    // of the squares of the other two sides. This is the Pythagorean theorem\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\n// Test the function with provided examples\nconsole.log(right_angle_triangle(3, 4, 5));  // true\nconsole.log(right_angle_triangle(1, 2, 3));  // false"}
{"task_id": "typescript/77", "language": "typescript", "completion": "function solve(s: string): string {\n    let hasLetter = false;\n    for (const char of s) {\n        if (char.match(/[a-zA-Z]/)) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (hasLetter) {\n        return Array.from(s).map(char => /[a-zA-Z]/.test(char) ? \n                               char === char.toUpperCase() ? \n                               char.toLowerCase() : char.toUpperCase() : \n                               char).join('');\n    } else {\n        return s.split('').reverse().join('');\n    }\n}\n\nconsole.log(solve(\"1234\")); // Outputs: \"4321\"\nconsole.log(solve(\"ab\")); // Outputs: \"AB\"\nconsole.log(solve(\"#a@C\")); // Outputs: \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import { createHash } from 'crypto';\n\nconst string_to_md5 = function(text: string): string | null {\n    if (text === '') {\n        return null;\n    }\n    const hash = createHash('md5').update(text).digest('hex');\n    return hash;\n};\n\n// Test the function\nconsole.log(string_to_md5('Hello world')); // Output: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (A: number, B: number): Array<number> {\n    // Sort A and B in ascending order\n    let start = Math.min(A, B);\n    let end = Math.max(A, B);\n\n    // Initialize an array to store even integers\n    let result: number[] = [];\n\n    // Loop through the range from start to end (inclusive)\n    for (let i = start; i <= end; i++) {\n        // Check if the current integer is even\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};"}

{"task_id": "csharp/0", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Determines if the balance of a bank account ever falls below zero given a list of deposit and withdrawal operations starting with a zero balance.\n        /// If at any point the balance is less than zero, the function returns true; otherwise, it returns false.\n        /// Examples:\n        /// >>> BelowZero(new List<int> {1, 2, 3})\n        /// False\n        /// >>> BelowZero(new List<int> {1, 2, -4, 5})\n        /// True\n        /// </summary>\n        public static bool BelowZero(List<int> operations)\n        {\n            int balance = 0;\n            foreach (var operation in operations)\n            {\n                balance += operation;\n                if (balance < 0)\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the function\n            Console.WriteLine(BelowZero(new List<int> {1, 2, 3})); // Expected output: False\n            Console.WriteLine(BelowZero(new List<int> {1, 2, -4, 5})); // Expected output: True\n        }\n    }\n}"}
{"task_id": "csharp/0", "language": "csharp", "completion": "csharp\npublic static bool BelowZero(List<int> operations) \n{\n    int currentBalance = 0; // Start with a zero balance\n\n    foreach (var operation in operations)\n    {\n        currentBalance += operation; // Update the balance based on each operation\n\n        if (currentBalance < 0) // Check if the balance falls below zero\n        {\n            return true; // Return true if it does\n        }\n    }\n\n    return false; // Return false if the balance never falls below zero\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution\n{\n    public class Program\n    {\n        public static Tuple<int, int> SumProduct(List<int> numbers)\n        {\n            if (numbers == null || numbers.Count == 0)\n            {\n                return Tuple.Create(0, 1);\n            }\n\n            int sum = numbers.Sum();\n            int product = numbers.Aggregate(1, (acc, val) => acc * val);\n\n            return Tuple.Create(sum, product);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(SumProduct(new List<int> { })); // Expected output: (0, 1)\n            Console.WriteLine(SumProduct(new List<int> { 1, 2, 3, 4 })); // Expected output: (10, 24)\n        }\n    }\n}\n\nThis code snippet defines a method `SumProduct` that takes a list of integers as input and returns a tuple containing the sum and product of all elements in the list. If the input list is null or empty, it returns a tuple with both values set to 0. The `Main` method includes test cases to demonstrate the expected behavior of the function."}
{"task_id": "csharp/1", "language": "csharp", "completion": "csharp\npublic static Tuple<int, int> SumProduct(List<int> numbers)"}
{"task_id": "csharp/2", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            Console.WriteLine(StringXor(\"010\", \"110\")); // Output: '100'\n        }\n\n        /// <summary> \n        /// This method performs a binary XOR operation on two strings of 1s and 0s\n        /// </summary>\n        public static string StringXor(string a, string b) \n        {\n            // Ensure both strings have the same length by padding the shorter one with leading zeros\n            int maxLength = Math.Max(a.Length, B.Length);\n            a = A.PadLeft(maxLength, '0');\n            b = B.PadLeft(maxLength, '0');\n\n            char[] result = new char[maxLength];\n\n            for (int i = 0; i < maxLength; i++)\n            {\n                // XOR the individual bits and store the result in the array\n                if (A[i] == B[i])\n                    result[i] = '0';\n                else\n                    result[i] = '1';\n            }\n\n            return new string(result);\n        }\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program {\n    // Function to perform binary XOR operation on two strings a and b\n    public static string StringXor(string a, string b) {\n        // Ensure the input strings are of equal length\n        if (a.Length != b.Length) throw new ArgumentException(\"Input strings must be of equal length\");\n\n        // Perform XOR operation character by character\n        char[] result = new char[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = (a[i] == b[i]) ? '0' : '1';\n        }\n\n        // Convert the result array back to string and return it\n        return new string(result);\n    }\n\n    static void Main() {\n        Console.WriteLine(StringXor(\"010\", \"110\")); // Outputs: 100\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static string Longest(List<string> strings)\n    {\n        if (strings == null || strings.Count == 0)\n        {\n            return null;\n        }\n\n        // Initialize the longest string with the first element of the list\n        string longestString = strings[0];\n\n        foreach (var str in strings)\n        {\n            if (str.Length > longestString.Length)\n            {\n                longestString = str;\n            }\n        }\n\n        return longestString;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Longest(new List<string>())); // Output: null\n        Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" })); // Output: A\n        Console.WriteLine(Longest(new List<string> { \"A\", \"bb\", \"ccc\" })); // Output: ccc\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static string Longest(List<string> strings) \n    {\n        if (strings == null || strings.Count == 0) \n        {\n            return null;\n        }\n\n        string longestString = strings.First();\n        int maxLength = longestString.Length;\n\n        foreach (var str in strings.Skip(1)) \n        {\n            if (str.Length > maxLength) \n            {\n                longestString = str;\n                maxLength = str.Length;\n            }\n        }\n\n        return longestString;\n    }\n\n    // Test the function with provided data points\n    public static void Main(string[] args) \n    {\n        Console.WriteLine(Longest(new List<string>{})); // Expected output: null\n        Console.WriteLine(Longest(new List<string>{\"a\", \"b\", \"c\"})); // Expected output: \"A\"\n        Console.WriteLine(Longest(new List<string>{\"A\", \"bb\", \"ccc\"})); // Expected output: \"ccc\"\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Test cases to verify the correctness of the function\n        Console.WriteLine(GreatestCommonDivisor(3, 5)); // Expected output: 1\n        Console.WriteLine(GreatestCommonDivisor(25, 15)); // Expected output: 5\n\n        // Call the function with user input\n        int num1 = int.Parse(Console.ReadLine());\n        int num2 = int.Parse(Console.ReadLine());\n        Console.WriteLine($\"The GCD of {num1} and {num2} is: {GreatestCommonDivisor(num1, num2)}\");\n    }\n\n    /// <summary> \n    /// Calculate the greatest common divisor (GCD) of two integers a and b using Euclid's algorithm.\n    /// </summary>\n    public static int GreatestCommonDivisor(int A, int B)\n    {\n        while (B != 0)\n        {\n            int temp = B;\n            B = A % B;\n            A = temp;\n        }\n        return A;\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "csharp\npublic static int GreatestCommonDivisor(int a, int b) \n{\n    // Base case: if one number is zero, the GCD is the other number\n    if (b == 0)\n        return A;\n    else\n        return GreatestCommonDivisor(b, A % b);\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "public class Program\n{\n    public static string SortNumbers(string input)\n    {\n        // Dictionary to map number words to their corresponding digits\n        var numberWordsToDigits = new Dictionary<string, int>\n        {\n            {\"null\", 0}, {\"eins\", 1}, {\"zwei\", 2}, {\"drei\", 3}, {\"vier\", 4},\n            {\"f\u00fcnf\", 5}, {\"sechs\", 6}, {\"sieben\", 7}, {\"acht\", 8}, {\"neun\", 9}\n        };\n\n        // Split the input string into an array of words\n        var words = input.Split(' ');\n\n        // Convert each word to its corresponding digit and sort the array\n        var sortedDigits = words.Select(word => numberWordsToDigits[word]).OrderBy(digit => digit).ToArray();\n\n        // Convert the sorted digits back to words and join them into a string\n        var sortedNumbers = String.Join(\" \", sortedDigits.Select(digit => numberWordsToDigits.FirstOrDefault(x => x.Value == digit).Key));\n\n        return sortedNumbers;\n    }\n\n    static void Main(string[] args)\n    {\n        // Example usage:\n        Console.WriteLine(SortNumbers(\"three one five\"));  // Output: \"one three five\"\n    }\n}\nThis solution first creates a dictionary to map number words to their corresponding digits. It then splits the input string into an array of words, converts each word to its corresponding digit, sorts the array, and finally converts it back to words to produce the sorted output."}
{"task_id": "csharp/5", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string SortNumbers(string numbers)\n        {\n            // Dictionary to map number words to their corresponding digits\n            var numberMap = new Dictionary<string, int>\n            {\n                {\"null\", 0}, {\"eins\", 1}, {\"zwei\", 2}, {\"drei\", 3}, {\"vier\", 4},\n                {\"f\u00fcnf\", 5}, {\"sechs\", 6}, {\"sieben\", 7}, {\"acht\", 8}, {\"neun\", 9}\n            };\n\n            // Split the input string into an array of number words, convert them to digits using the dictionary, and sort them\n            var sortedNumbers = numbers.Split(' ')\n                                        .Select(word => numberMap[word])\n                                        .OrderBy(digit => digit)\n                                        .ToArray();\n\n            // Convert the sorted digits back to words and join them into a single string with spaces in between\n            return string.Join(\" \", sortedNumbers.Select(digit => numberMap.FirstOrDefault(x => x.Value == digit).Key));\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SortNumbers(\"three one five\")); // Output: \"one three five\"\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Scales a list of numbers to the unit interval where the minimum value becomes 0 and the maximum becomes 1.\n        /// >>> RescaleToUnit(new List<double> {1.0, 2.0, 3.0, 4.0, 5.0})\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n            double range = max - min;\n\n            return numbers.Select(number => (number - min) / range).ToList();\n        }\n\n        public static void Main()\n        {\n            var testData = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n            var scaledData = RescaleToUnit(testData);\n            Console.WriteLine($\"Scaled Data: [{string.Join(\", \", scaledData)}]\");\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    // This method rescales a list of doubles so that the smallest number becomes 0 and the largest becomes 1\n    public static List<double> RescaleToUnit(List<double> numbers) {\n        if (numbers == null || numbers.Count < 2) {\n            throw new ArgumentException(\"Input list must contain at least two elements.\");\n        }\n\n        double min = numbers.Min();\n        double max = numbers.Max();\n        double range = max - min;\n\n        List<double> rescaledNumbers = numbers.Select(number => (number - min) / range).ToList();\n        return rescaledNumbers;\n    }\n\n    static void Main(string[] args) {\n        var result = RescaleToUnit(new List<double>{1.0, 2.0, 3.0, 4.0, 5.0});\n        Console.WriteLine($\"Rescaled list: [{string.Join(\", \", result)}]\");\n\n        // Check function to verify the correctness of the generated function\n        bool isEqual(List<double> a, List<double> B) {\n            return A.SequenceEqual(B);\n        }\n\n        Debug.Assert(IsEqual(result, new List<double>{0.0, 0.25, 0.5, 0.75, 1.0}));\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "csharp\npublic static string FlipCase(string input) \n{\n    char[] charArray = input.ToCharArray();\n    for (int i = 0; i < charArray.Length; i++)\n    {\n        if (char.IsLower(charArray[i]))\n        {\n            charArray[i] = char.ToUpper(charArray[i]);\n        }\n        else if (char.IsUpper(charArray[i]))\n        {\n            charArray[i] = char.ToLower(charArray[i]);\n        }\n    }\n    return new string(charArray);\n}\n\n// Example usage:\npublic static void Main() \n{\n    string input = \"Hello\";\n    string output = FlipCase(input);\n    Console.WriteLine(output); // Outputs: 'hELLO'\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    // This method takes a string as input and returns a new string with each character's case flipped.\n    public static string FlipCase(string inputString)\n    {\n        char[] charArray = inputString.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++)\n        {\n            if (char.IsLower(charArray[i]))\n            {\n                charArray[i] = char.ToUpper(charArray[i]);\n            }\n            else if (char.IsUpper(charArray[i]))\n            {\n                charArray[i] = char.ToLower(charArray[i]);\n            }\n        }\n        return new string(charArray);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(FlipCase(\"Hello\")); // Outputs: hELLO\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects; // Make sure you have this library installed for comparison if needed\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> GetPositive(List<int> l)\n        {\n            return l.Where(x => x > 0).ToList();\n        }\n\n        static void Main()\n        {\n            // Test cases\n            var test1 = new List<int> { -1, 2, -4, 5, 6 };\n            Console.WriteLine($\"[{string.Join(\", \", GetPositive(test1))}]\"); // Output: [2, 5, 6]\n\n            var test2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            Console.WriteLine($\"[{string.Join(\", \", GetPositive(test2))}]\"); // Output: [5, 3, 2, 3, 9, 123, 1]\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static List<int> GetPositive(List<int> l)\n        {\n            return l.Where(number => number > 0).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            var test1 = new List<int> { -1, 2, -4, 5, 6 };\n            var result1 = GetPositive(test1);\n            Console.WriteLine($\"Positive numbers: [{string.Join(\", \", result1)}]\");\n\n            var test2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            var result2 = GetPositive(test2);\n            Console.WriteLine($\"Positive numbers: [{string.Join(\", \", result2)}]\");\n\n            // Additional check to verify correctness\n            Debug.Assert(result1.SequenceEqual(new List<int> { 2, 5, 6 }));\n            Debug.Assert(result2.SequenceEqual(new List<int> { 5, 3, 2, 3, 9, 123, 1 }));\n\n            Console.ReadLine();\n        }\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System;\n\nclass Program\n{\n    public static bool IsPrime(int n)\n    {\n        if (n <= 1) return false; // 0 und 1 sind keine Primzahlen\n        if (n == 2) return true; // 2 ist die einzige ungerade Primzahl\n\n        if (n % 2 == 0) return false; // Alle geraden Zahlen au\u00dfer 2 sind keine Primzahlen\n\n        var boundary = (int)Math.Floor(Math.Sqrt(n));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (n % i == 0) return false; // Wenn n ein Teiler von i ist, ist es keine Primzahl\n        }\n\n        return true; // Keiner der obigen F\u00e4lle wurde getroffen, also ist n eine Primzahl\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases provided in the docstring\n        Console.WriteLine(IsPrime(6)); // Expected: False\n        Console.WriteLine(IsPrime(101)); // Expected: True\n        Console.WriteLine(IsPrime(11)); // Expected: True\n        Console.WriteLine(IsPrime(13441)); // Expected: True\n        Console.WriteLine(IsPrime(61)); // Expected: True\n        Console.WriteLine(IsPrime(4)); // Expected: False\n        Console.WriteLine(IsPrime(1)); // Expected: False\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "csharp\npublic static bool IsPrime(int n)\n{\n    if (n <= 1) return false; // 1 und Zahlen unter 1 sind keine Primzahlen\n    if (n == 2) return true; // 2 ist die einzige Gerade Primzahl\n\n    // Alle Geraden Zahlen au\u00dfer 2 sind keine Primzahlen, also k\u00f6nnen wir sie hier abchecken\n    if (n % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(n)); // Keine Nummer wird \u00fcber die Grenze n durchgerechnet, die die Wurzel von n darstellt\n\n    for (int i = 3; i <= boundary; i += 2)\n    {\n        if (n % i == 0) return false; // Ist die Zahl n teilerbar durch i? Ja, also keine Primzahl\n    }\n\n    return true; // Keine Teiler gefunden, also ist es eine Primzahl\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Unique(List<int> l)\n        {\n            HashSet<int> uniqueElements = new HashSet<int>(l);\n            List<int> sortedUniqueElements = uniqueElements.ToList();\n            sortedUniqueElements.Sort();\n            return sortedUniqueElements;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine($\"[5, 3, 5, 2, 3, 3, 9, 0, 123] -> {string.Join(\", \", Unique(new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 }))}\");\n        }\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Unique(List<int> l)\n        {\n            HashSet<int> uniqueElements = new HashSet<int>(l);\n            List<int> sortedUniqueElements = uniqueElements.ToList();\n            sortedUniqueElements.Sort();\n\n            return sortedUniqueElements;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> testList = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> resultList = Unique(testList);\n            Console.WriteLine($\"Sorted unique elements: {string.Join(\", \", resultList)}\");\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int PrimeFib(int n) {\n        List<int> primeFibs = new List<int>();\n        int num1 = 0, num2 = 1;\n        while (primeFibs.Count < n) {\n            int nextNum = num1 + num2;\n            num1 = num2;\n            num2 = nextNum;\n            if (IsPrime(nextNum)) {\n                primeFibs.Add(nextNum);\n            }\n        }\n        return primeFibs.Last();\n    }\n\n    private static bool IsPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(PrimeFib(1)); // Output: 2\n        Console.WriteLine(PrimeFib(2)); // Output: 3\n        Console.WriteLine(PrimeFib(3)); // Output: 5\n        Console.WriteLine(PrimeFib(4)); // Output: 13\n        Console.WriteLine(PrimeFib(5)); // Output: 89\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n        }\n\n        public static int PrimeFib(int n)\n        {\n            List<int> primeFibs = new List<int>();\n            int a = 0, B = 1, C = 0;\n            while (primeFibs.Count < n)\n            {\n                C = A + B;\n                A = B;\n                B = C;\n\n                if (IsPrime(C))\n                {\n                    primeFibs.Add(C);\n                }\n            }\n\n            return primeFibs[n - 1];\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "csharp\npublic static bool TriplesSumToZero(List<int> l)\n{\n    // Sort the list to make it easier to find triples\n    l.Sort();\n\n    for (int i = 0; i < l.Count - 2; i++)\n    {\n        // Skip duplicate values to avoid finding the same triple multiple times\n        if (i > 0 && l[i] == l[i - 1]) continue;\n\n        int left = i + 1;\n        int right = l.Count - 1;\n\n        while (left < right)\n        {\n            int sum = l[i] + l[left] + l[right];\n\n            if (sum == 0)\n            {\n                // Found a triple that sums to zero, return true\n                return true;\n            }\n            else if (sum < 0)\n            {\n                // If the sum is less than zero, move left pointer to the right\n                left++;\n            }\n            else\n            {\n                // If the sum is greater than zero, move right pointer to the left\n                right--;\n            }\n        }\n    }\n\n    // No triple found that sums to zero, return false\n    return false;\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool TriplesSumToZero(List<int> l)\n        {\n            for (int i = 0; i < l.Count - 2; i++)\n            {\n                HashSet<int> seen = new HashSet<int>();\n                for (int j = i + 1; j < l.Count; j++)\n                {\n                    int complement = -l[i] - l[j];\n                    if (seen.Contains(complement))\n                    {\n                        return true;\n                    }\n                    seen.Add(l[j]);\n                }\n            }\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // Output: False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // Output: True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // Output: False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // Output: True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // Output: False\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static bool PairsSumToZero(List<int> l)\n    {\n        HashSet<int> seenNumbers = new HashSet<int>(); // To store numbers we've seen so far\n\n        foreach (var number in l)\n        {\n            if (seenNumbers.Contains(-number)) // If the negative counterpart of the current number exists\n                return true; // Return true as we found a pair that sums to zero\n\n            seenNumbers.Add(number); // Add the current number to the set of seen numbers\n        }\n\n        return false; // Return false if no pair was found that sums to zero\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(PairsSumToZero(new List<int> {1, 3, 5, 0})); // Expected output: False\n        Console.WriteLine(PairsSumToZero(new List<int> {1, 3, -2, 1})); // Expected output: False\n        Console.WriteLine(PairsSumToZero(new List<int> {1, 2, 3, 7})); // Expected output: False\n        Console.WriteLine(PairsSumToZero(new List<int> {2, 4, -5, 3, 5, 7})); // Expected output: True\n        Console.WriteLine(PairsSumToZero(new List<int> {1})); // Expected output: False\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static bool PairsSumToZero(List<int> l) \n    {\n        // Create a HashSet to store unique elements\n        HashSet<int> seen = new HashSet<int>();\n\n        foreach (var num in l)\n        {\n            // Check if the negation of the current number exists in the set\n            if (seen.Contains(-num))\n            {\n                return true; // Found a pair that sums to zero\n            }\n            seen.Add(num);\n        }\n\n        return false; // No pairs found that sum to zero\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(PairsSumToZero(new List<int> {1, 3, 5, 0})); // Output: False\n        Console.WriteLine(PairsSumToZero(new List<int> {1, 3, -2, 1})); // Output: False\n        Console.WriteLine(PairsSumToZero(new List<int> {1, 2, 3, 7})); // Output: False\n        Console.WriteLine(PairsSumToZero(new List<int> {2, 4, -5, 3, 5, 7})); // Output: True\n        Console.WriteLine(PairsSumToZero(new List<int> {1})); // Output: False\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main()\n        {\n            Console.WriteLine(Fib4(5)); // Output: 4\n            Console.WriteLine(Fib4(6)); // Output: 8\n            Console.WriteLine(Fib4(7)); // Output: 14\n        }\n\n        public static int Fib4(int n)\n        {\n            if (n < 0)\n                throw new ArgumentException(\"Input must be a non-negative integer\");\n\n            // Initializing the base cases of the Fib4 sequence\n            int[] fib4Values = { 0, 0, 2, 0 };\n\n            // Calculate Fib4(n) using an iterative approach\n            for (int i = 4; i <= n; i++)\n            {\n                int nextValue = fib4Values[i - 1] + fib4Values[i - 2] + fib4Values[i - 3] + fib4Values[i - 4];\n                fib4Values[i % 4] = nextValue; // Use modulo to keep track of the last four values\n            }\n\n            return fib4Values[n % 4];\n        }\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System;\n\nnamespace Fib4Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Fib4(5)); // 4\n            Console.WriteLine(Fib4(6)); // 8\n            Console.WriteLine(Fib4(7)); // 14\n        }\n\n        public static int Fib4(int n)\n        {\n            if (n < 2) return 0;\n            if (n == 2) return 2;\n\n            // Initialize the base cases for the first four Fib4 numbers\n            int a = 0, B = 0, C = 2, D = 0;\n\n            for (int i = 4; i <= n; i++)\n            {\n                int currentFib4 = A + B + C + D;\n                A = B;\n                B = C;\n                C = D;\n                D = currentFib4;\n            }\n\n            return D;\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Calculate the median of elements in the list l and return it as an object.\n        /// </summary>\n        /// <param name=\"l\">The list of integers.</param>\n        /// <returns>The median as an integer if the list size is odd, otherwise as a double.</returns>\n        public static object Median(List<int> l)\n        {\n            int listSize = l.Count;\n\n            if (listSize % 2 == 1) // If the list size is odd\n            {\n                l.Sort();\n                return l[listSize / 2];\n            }\n            else // If the list size is even\n            {\n                l.Sort();\n                int mid = listSize / 2;\n                double median = (l[mid] + l[mid - 1]) / 2.0;\n                return median;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Median(new List<int> { 3, 1, 2, 4, 5 })); // Expected output: 3\n            Console.WriteLine(Median(new List<int> { -10, 4, 6, 1000, 10, 20 })); // Expected output: 15.0\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static double Median(List<int> l)\n    {\n        // Sort the list in ascending order\n        l.Sort();\n\n        int count = l.Count;\n        if (count % 2 == 1) // If the count is odd\n        {\n            return l[count / 2]; // Return the middle element as a double\n        }\n        else // If the count is even\n        {\n            // Calculate the average of the two middle elements\n            return (l[(count - 1) / 2] + l[count / 2]) / 2.0;\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Median(new List<int> { 3, 1, 2, 4, 5 })); // Output: 3\n        Console.WriteLine(Median(new List<int> { -10, 4, 6, 1000, 10, 20 })); // Output: 15.0\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsPalindrome(\"\")); // True\n            Console.WriteLine(IsPalindrome(\"aba\")); // True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n        }\n\n        /// <summary> \n        /// Checks if the provided string is a palindrome, considering only alphanumeric characters and ignoring cases.\n        /// </summary>\n        public static bool IsPalindrome(string text)\n        {\n            if (string.IsNullOrEmpty(text)) return true;\n\n            // Remove all non-alphanumeric characters and convert to lowercase for case-insensitive comparison\n            var cleanedText = Regex.Replace(text, \"[^A-Za-Z0-9]\", \"\").ToLower();\n\n            // Compare the cleaned string with its reverse\n            return cleanedText.SequenceEqual(cleanedText.Reverse());\n        }\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class PalindromeChecker\n    {\n        /// <summary>\n        /// Determines whether the provided string is a palindrome, considering only alphanumeric characters and ignoring cases.\n        /// A palindrome is a word that reads the same backward as forward.\n        /// </summary>\n        /// <param name=\"input\">The string to check.</param>\n        /// <returns>true if the input is a palindrome; otherwise, false.</returns>\n        public static bool IsPalindrome(string input)\n        {\n            // Remove all non-alphanumeric characters and convert to lowercase for uniformity.\n            var cleanedInput = new string(input.Where(char.IsLetterOrDigit).ToArray()).ToLower();\n\n            // Compare the cleaned string with its reverse.\n            return cleanedInput.SequenceEqual(cleanedInput.Reverse());\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsPalindrome('')); // True\n            Console.WriteLine(IsPalindrome('aba')); // True\n            Console.WriteLine(IsPalindrome('aaaaa')); // True\n            Console.WriteLine(IsPalindrome('zbcd')); // False\n\n            // Check function to validate correctness.\n            DebugCheck();\n        }\n\n        private static void DebugCheck()\n        {\n            var testCases = new Dictionary<string, bool>\n            {\n                { \"\", true },\n                { \"aba\", true },\n                { \"aaaaa\", true },\n                { \"zbcd\", false },\n                { \"A man a plan a canal Panama\", true }, // With spaces and punctuation.\n            };\n\n            foreach (var testCase in testCases)\n            {\n                bool result = IsPalindrome(testCase.Key);\n                if (result != testCase.Value)\n                {\n                    Console.WriteLine($\"Failed for \\\"{testCase.Key}\\\": expected {testCase.Value}, got {result}\");\n                }\n                else\n                {\n                    Console.WriteLine($\"Passed for \\\"{testCase.Key}\\\".\");\n                }\n            }\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static string RemoveVowels(string text)\n        {\n            // Define a list of vowels to be removed\n            List<char> vowels = new List<char> { 'a', 'E', 'I', 'O', 'U', 'a', 'E', 'I', 'O', 'U' };\n\n            // Use the String.Replace method to replace all occurrences of vowels with an empty string\n            return new string(text.Where(c => !vowels.Contains(c)).ToArray());\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(RemoveVowels(\"\"));\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\"));\n            Console.WriteLine(RemoveVowels(\"abcdef\"));\n            Console.WriteLine(RemoveVowels(\"aaaaa\"));\n            Console.WriteLine(RemoveVowels(\"aaBAA\"));\n            Console.WriteLine(RemoveVowels(\"zbcd\"));\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    // RemoveVowels is a function that takes a string as input and returns the string without vowels.\n    public static string RemoveVowels(string text)\n    {\n        if (string.IsNullOrEmpty(text)) return text;\n\n        var vowels = new HashSet<char> { 'a', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u' };\n        return new string(text.Where(c => !vowels.Contains(c)).ToArray());\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases to verify the correctness of the RemoveVowels function\n        Console.WriteLine(RemoveVowels('')); // Expected output: ''\n        Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // Expected output: 'bcdf\\nghjklm'\n        Console.WriteLine(RemoveVowels('abcdef')); // Expected output: 'bcdf'\n        Console.WriteLine(RemoveVowels('aaaaa')); // Expected output: ''\n        Console.WriteLine(RemoveVowels('aaBAA')); // Expected output: 'B'\n        Console.WriteLine(RemoveVowels('zbcd')); // Expected output: 'zbcd'\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "csharp\npublic static bool BelowThreshold(List<int> l, int t) \n{\n    return l.All(number => number < t);\n}\n\n// Test cases\nConsole.WriteLine(BelowThreshold(new List<int> {1, 2, 4, 10}, 100)); // Output: True\nConsole.WriteLine(BelowThreshold(new List<int> {1, 20, 4, 10}, 5)); // Output: False"}
{"task_id": "csharp/18", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool BelowThreshold(List<int> numbers, int threshold)\n        {\n            // Check if all numbers in the list are below the given threshold\n            return numbers.All(number => number < threshold);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the function\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 2, 4, 10 }, 100)); // Expected output: True\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 20, 4, 10 }, 5)); // Expected output: False\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // Method to add two integers x and y\n        public static int Add(int x, int y) \n        {\n            return x + y; // This will return the sum of x and y\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Testing the Add function:\");\n\n            // Test cases\n            Debug.Assert(Add(2, 3) == 5);\n            Debug.Assert(Add(5, 7) == 12);\n\n            Console.WriteLine(\"All test cases passed successfully.\");\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Adds two integers x and y.\n        /// Example usage:\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// </summary>\n        public static int Add(int x, int y)\n        {\n            return x + y;\n        }\n\n        // Test function to verify the correctness of the Add method\n        static void Main(string[] args)\n        {\n            Debug.Assert(Add(2, 3) == 5);\n            Debug.Assert(Add(5, 7) == 12);\n\n            Console.WriteLine(\"All test cases passed successfully.\");\n        }\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static bool SameChars(string s0, string s1)\n    {\n        // Create a HashSet to store the unique characters of each string\n        HashSet<char> set0 = new HashSet<char>(s0);\n        HashSet<char> set1 = new HashSet<char>(s1);\n\n        // Check if both sets are equal, which means they contain exactly the same characters\n        return set0.SetEquals(set1);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n        Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n        Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n        Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n        Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool SameChars(string s0, string s1)\n        {\n            // Convert both strings to character arrays and sort them\n            char[] chars0 = s0.ToCharArray();\n            char[] chars1 = s1.ToCharArray();\n            Array.Sort(chars0);\n            Array.Sort(chars1);\n\n            // Convert back to strings and compare\n            string sortedS0 = new string(chars0);\n            string sortedS1 = new string(chars1);\n\n            return sortedS0 == sortedS1;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // Expected output: True\n            Console.WriteLine(SameChars('abcd', 'dddddddabc')); // Expected output: True\n            Console.WriteLine(SameChars('dddddddabc', 'abcd')); // Expected output: True\n            Console.WriteLine(SameChars('eabcd', 'dddddddabc')); // Expected output: False\n            Console.WriteLine(SameChars('abcd', 'dddddddabce')); // Expected output: False\n            Console.WriteLine(SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // Expected output: False\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Returns the n-th Fibonacci number.\n        /// </summary>\n        public static int Fib(int n) \n        {\n            if (n <= 0) return 0;\n            if (n == 1) return 1;\n\n            int prev = 0, curr = 1;\n\n            for (int i = 2; i <= n; i++)\n            {\n                int next = prev + curr;\n                prev = curr;\n                curr = next;\n            }\n\n            return curr;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Fib(10)); // Output: 55\n            Console.WriteLine(Fib(1));  // Output: 1\n            Console.WriteLine(Fib(8));  // Output: 21\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Program {\n    public static long Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n-1) + Fib(n-2);\n        }\n    }\n\n    static void Main() {\n        Console.WriteLine(Fib(10)); // Output: 55\n        Console.WriteLine(Fib(1));  // Output: 1\n        Console.WriteLine(Fib(8));  // Output: 21\n    }\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    public static List<int> Common(List<int> l1, List<int> l2) {\n        // Convert lists to sets to remove duplicates and for efficient searching\n        HashSet<int> set1 = new HashSet<int>(l1);\n        HashSet<int> set2 = new HashSet<int>(l2);\n\n        // Use intersection method to find common elements between the two sets\n        List<int> commonElements = new List<int>(set1.Intersect(set2));\n\n        // Sort the list of common elements and return it\n        commonElements.Sort();\n        return commonElements;\n    }\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution\n{\n    public static List<int> Common(List<int> l1, List<int> l2)\n    {\n        // Convert lists to hash sets for efficient lookups\n        HashSet<int> set1 = new HashSet<int>(l1);\n        HashSet<int> set2 = new HashSet<int>(l2);\n\n        // Find intersection of two sets (common elements)\n        var commonElements = set1.Intersect(set2).ToList();\n\n        // Return sorted list of unique common elements\n        return commonElements.OrderBy(x => x).ToList();\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine($\"Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]): {string.Join(\", \", Solution.Common(new List<int> {1, 4, 3, 34, 653, 2, 5}, new List<int> {5, 7, 1, 5, 9, 653, 121}))}\");\n        Console.WriteLine($\"Common([5, 3, 2, 8], [3, 2]): {string.Join(\", \", Solution.Common(new List<int> {5, 3, 2, 8}, new List<int> {3, 2}))}\");\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(LargestPrimeFactor(13195)); // Expected output: 29\n            Console.WriteLine(LargestPrimeFactor(2048));  // Expected output: 2\n        }\n\n        /// <summary>\n        /// Finds the largest prime factor of a given non-prime number n, where n > 1.\n        /// </summary>\n        public static int LargestPrimeFactor(int n)\n        {\n            if (n <= 1 || IsPrime(n))\n            {\n                throw new ArgumentException(\"Input must be greater than 1 and not a prime number.\");\n            }\n\n            int largestFactor = 1;\n            // Divide n by 2 until it's odd\n            while (n % 2 == 0)\n            {\n                largestFactor = 2;\n                n /= 2;\n            }\n\n            // Check for odd factors starting from 3\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            {\n                while (n % i == 0)\n                {\n                    largestFactor = i;\n                    n /= i;\n                }\n            }\n\n            // If n is a prime number greater than 2\n            if (n > 2)\n            {\n                largestFactor = n;\n            }\n\n            return largestFactor;\n        }\n\n        /// <summary>\n        /// Checks if a number is prime.\n        /// </summary>\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n        Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n    }\n\n    /// <summary>\n    /// Finds the largest prime factor of a given number n.\n    /// Assumes that n > 1 and n is NOT a prime number.\n    /// </summary>\n    public static int LargestPrimeFactor(int n)\n    {\n        int maxPrime = -1;\n\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0)\n        {\n            maxPrime = 2;\n            n >>= 1; // Equivalent to n /= 2\n        }\n\n        // Now n must be odd, start checking from 3\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n        {\n            while (n % i == 0)\n            {\n                maxPrime = i;\n                n = n / i;\n            }\n        }\n\n        // If n is a prime number greater than 2\n        if (n > 2)\n            maxPrime = n;\n\n        return maxPrime;\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing System;\nusing System.Diagnostics;\n\nclass Solution {\n    public static void Main(string[] args) {\n        Debug.Assert(SumToN(30) == 465);\n        Debug.Assert(SumToN(100) == 5050);\n        Debug.Assert(SumToN(5) == 15);\n        Debug.Assert(SumToN(10) == 55);\n        Debug.Assert(SumToN(1) == 1);\n\n        Console.WriteLine(\"All test cases passed.\");\n    }\n\n    public static int SumToN (int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return n + SumToN(n - 1);\n        }\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter a number:\");\n            if (int.TryParse(Console.ReadLine(), out int n))\n            {\n                Console.WriteLine($\"Sum of numbers from 1 to {n}: {SumToN(n)}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Please enter a valid integer.\");\n            }\n        }\n\n        public static int SumToN(int n)\n        {\n            if (n < 0)\n                throw new ArgumentOutOfRangeException(nameof(n), \"Input must be a non-negative integer\");\n\n            return (n * (n + 1)) / 2;\n        }\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = Derivative(new List<int> { 3, 1, 2, 4, 5 });\n            Console.WriteLine($\"Derivative([3, 1, 2, 4, 5]) => [{string.Join(\", \", result1)}]\");\n\n            var result2 = Derivative(new List<int> { 1, 2, 3 });\n            Console.WriteLine($\"Derivative([1, 2, 3]) => [{string.Join(\", \", result2)}]\");\n        }\n\n        /// <summary>\n        /// Calculates the derivative of a polynomial represented by its coefficients.\n        /// The coefficients are given in ascending order of powers (xs[0] is for the constant term, xs[1] is for x^1, and so on).\n        /// Returns a list representing the coefficients of the derivative polynomial in the same form.\n        /// </summary>\n        public static List<int> Derivative(List<int> xs)\n        {\n            List<int> derivativeCoefficients = new List<int>();\n\n            for (int i = 1; i < xs.Count; i++)\n            {\n                derivativeCoefficients.Add(xs[i] * i);\n            }\n\n            return derivativeCoefficients;\n        }\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "csharp\npublic static List<int> Derivative(List<int> coefficients)\n{\n    // Initialize an empty list to store the derivative coefficients.\n    List<int> derivativeCoefficients = new List<int>();\n\n    // Loop through the input coefficients, starting from index 1 (ignoring the constant term).\n    for (int i = 1; i < coefficients.Count; i++)\n    {\n        // Calculate the derivative of each coefficient by multiplying it with its corresponding power.\n        int derivativeCoefficient = coefficients[i] * i;\n\n        // Add the calculated derivative coefficient to the list.\n        derivativeCoefficients.Add(derivativeCoefficient);\n    }\n\n    return derivativeCoefficients;\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(Fibfib(1)); // Output: 0\n        Console.WriteLine(Fibfib(5)); // Output: 4\n        Console.WriteLine(Fibfib(8)); // Output: 24\n\n        // Test cases to verify the correctness of the Fibfib function\n        Debug.Assert(Fibfib(0) == 0);\n        Debug.Assert(Fibfib(1) == 0);\n        Debug.Assert(Fibfib(2) == 1);\n        Debug.Assert(Fibfib(3) == 1);\n        Debug.Assert(Fibfib(4) == 2);\n        Debug.Assert(Fibfib(5) == 4);\n        Debug.Assert(Fibfib(6) == 7);\n        Debug.Assert(Fibfib(7) == 13);\n        Debug.Assert(Fibfib(8) == 24);\n        Console.WriteLine(\"All test cases passed successfully.\");\n    }\n\n    public static int Fibfib(int n)\n    {\n        if (n <= 1) return 0;\n        if (n == 2) return 1;\n\n        int a = 0, B = 0, C = 1, D = 1;\n        for (int i = 3; i <= n; i++)\n        {\n            D = A + B + C;\n            A = B;\n            B = C;\n            C = D;\n        }\n        return D;\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            Console.WriteLine(Fibfib(1)); // Output: 0\n            Console.WriteLine(Fibfib(5)); // Output: 4\n            Console.WriteLine(Fibfib(8)); // Output: 24\n\n            // Check function correctness with provided test cases\n            Debug.Assert(Fibfib(1) == 0);\n            Debug.Assert(Fibfib(5) == 4);\n            Debug.Assert(Fibfib(8) == 24);\n        }\n\n        public static int Fibfib(int n)\n        {\n            if (n <= 1) return 0;\n            if (n == 2) return 1;\n\n            int a = 0, B = 0, C = 1, D = 1;\n            for (int i = 3; i <= n; i++)\n            {\n                D = A + B + C;\n                A = B;\n                B = C;\n                C = D;\n            }\n            return D;\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int VowelsCount(string s)\n        {\n            int vowelCount = 0;\n            string lowerCaseS = s.ToLower();\n            foreach (char c in lowerCaseS)\n            {\n                if (\"aeiou\".Contains(c))\n                {\n                    vowelCount++;\n                }\n            }\n\n            // Check if 'y' is at the end and is a vowel\n            if (lowerCaseS.EndsWith('y'))\n            {\n                vowelCount++;\n            }\n\n            return vowelCount;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int VowelsCount(string s)\n    {\n        s = s.ToLower(); // Convert the string to lowercase to simplify comparisons\n        int vowelCount = s.Count(c => \"aeiou\".Contains(c)); // Count vowels directly\n\n        // Check if 'y' is at the end of the word and should be considered as a vowel\n        if (s.EndsWith('y'))\n        {\n            vowelCount++;\n        }\n\n        return vowelCount;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n        Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Search(List<int> lst)\n        {\n            // Grouping numbers by their value and calculating their frequency\n            var groups = lst.GroupBy(x => x).ToDictionary(g => g.Key, g => g.Count());\n\n            // Filtering groups where the key is greater than 0 and the frequency is greater than or equal to the key\n            var validGroups = groups.Where(g => g.Key > 0 && g.Value >= g.Key).ToDictionary(g => g.Key, g => g.Value);\n\n            // If there are no valid groups, return -1\n            if (!validGroups.Any())\n            {\n                return -1;\n            }\n\n            // Return the key of the group with the maximum value\n            return validGroups.Keys.Max();\n        }\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Search(List<int> lst)\n        {\n            // Count the frequency of each number in the list\n            var frequencies = lst.GroupBy(n => n).ToDictionary(g => g.Key, g => g.Count());\n\n            // Filter out numbers whose frequency is less than their value\n            var validNumbers = frequencies.Where(pair => pair.Key <= pair.Value).Select(pair => pair.Key);\n\n            // If there are no valid numbers, return -1\n            if (!validNumbers.Any())\n            {\n                return -1;\n            }\n\n            // Return the maximum valid number\n            return validNumbers.Max();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // Output: 2\n            Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Output: 3\n            Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Problem {\n    public static Nullable<double> TriangleArea(int a, int B, int C) {\n        // Check if the sides form a valid triangle\n        if (A + B <= C || A + C <= B || B + C <= A) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (A + B + C) / 2.0;\n\n        // Calculate the area using Heron's formula\n        double area = Math.Sqrt(s * (s - A) * (s - B) * (s - C));\n\n        // Round the result to 2 decimal places\n        return Math.Round(area, 2);\n    }\n\n    static void Main() {\n        Console.WriteLine(TriangleArea(3, 4, 5)); // Output: 6.00\n        Console.WriteLine(TriangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nclass Solution {\n    public static double TriangleArea(int a, int B, int C) {\n        if (A + B > C && A + C > B && B + C > A) {\n            double s = (A + B + C) / 2.0;\n            double area = Math.Sqrt(s * (s - A) * (s - B) * (s - C));\n            return Math.Round(area, 2);\n        } else {\n            return -1;\n        }\n    }\n\n    static void Main() {\n        Console.WriteLine(TriangleArea(3, 4, 5)); // Output: 6.00\n        Console.WriteLine(TriangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static bool WillItFly(List<int> q, int w) {\n        // Check if the list is palindromic\n        bool isPalindrome = q.SequenceEqual(q.AsEnumerable().Reverse());\n        \n        // Calculate the sum of elements in the list\n        int SumOfElements = q.Sum();\n\n        // Determine if the object will fly\n        return IsPalindrome && SumOfElements <= w;\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // Check if the list is palindromic\n            bool isPalindrome = q.SequenceEqual(q.AsEnumerable().Reverse());\n\n            // Calculate the sum of the elements in the list\n            int sumOfElements = q.Sum();\n\n            // Check if the list is within the weight limit and if it's a palindrome\n            return isPalindrome && sumOfElements <= w;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // Expected output: False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // Expected output: False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // Expected output: True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // Expected output: True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            Console.WriteLine(IsMultiplyPrime(30)); // Expected output: True\n        }\n\n        public static bool IsMultiplyPrime(int a)\n        {\n            if (a < 2) return false;\n\n            for (int i = 2; i * i <= a; i++)\n            {\n                if (A % i == 0)\n                {\n                    int count = 0;\n                    while (A % i == 0)\n                    {\n                        count++;\n                        A /= i;\n                    }\n\n                    if (IsPrime(i))\n                    {\n                        if (count != 1) return false; // More than one prime factor found, not a product of exactly three primes.\n                    }\n                }\n            }\n\n            // Check if any remaining factor is prime\n            return IsPrime(A);\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0)\n                    return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "csharp\nusing System;\n\npublic class Program\n{\n    private const int MaxNumber = 100;\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(IsMultiplyPrime(30)); // Output: True, because 30 = 2 * 3 * 5\n    }\n\n    public static bool IsMultiplyPrime(int a)\n    {\n        if (A < 2 || A > MaxNumber)\n            return false;\n\n        for (int i = 2; i <= A; i++)\n        {\n            while (A % i == 0 && IsPrime(i))\n            {\n                A /= i;\n            }\n        }\n\n        return A == 1;\n    }\n\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (number % i == 0) return false;\n\n        return true;\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string DecimalToBinary(int decimalNumber)\n        {\n            // Convert the integer to binary using Convert.ToString method with base 2 for binary representation\n            string binaryString = Convert.ToString(decimalNumber, 2);\n\n            // Add 'db' at the beginning and end of the binary string\n            return $\"db{binaryString}db\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the DecimalToBinary function\n            Console.WriteLine(DecimalToBinary(15)); // Expected output: \"db1111db\"\n            Console.WriteLine(DecimalToBinary(32)); // Expected output: \"db100000db\"\n        }\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Converts a given decimal number to its binary representation, surrounded by 'db' at the beginning and end of the string.\n        /// </summary>\n        public static string DecimalToBinary (int decimalNumber) \n        {\n            string binaryString = Convert.ToString(decimalNumber, 2); // Convert to binary using built-in method\n            return $\"db{binaryString}db\"; // Format and return the result\n        }\n\n        // Main method for testing purposes\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(DecimalToBinary(15)); // Should print \"db1111db\"\n            Console.WriteLine(DecimalToBinary(32)); // Should print \"db100000db\"\n        }\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Test cases to check the correctness of the IsHappy function.\n        Console.WriteLine(IsHappy(\"a\")); // Expected output: False\n        Console.WriteLine(IsHappy(\"aa\")); // Expected output: False\n        Console.WriteLine(IsHappy(\"abcd\")); // Expected output: True\n        Console.WriteLine(IsHappy(\"Aabb\")); // Expected output: False\n        Console.WriteLine(IsHappy(\"adb\")); // Expected output: True\n        Console.WriteLine(IsHappy(\"xyy\")); // Expected output: False\n\n        // Additional test cases for the IsHappy function\n        Console.WriteLine(IsHappy(\"abc\")); // Expected output: True\n        Console.WriteLine(IsHappy(\"xyz\")); // Expected output: True\n        Console.WriteLine(IsHappy(\"aAa\")); // Expected output: False\n        Console.WriteLine(IsHappy(\"BbCcDd\")); // Expected output: True\n    }\n\n    public static bool IsHappy(string s)\n    {\n        if (s.Length < 3) return false;\n\n        for (int i = 0; i <= s.Length - 3; i++)\n        {\n            char firstChar = char.ToLower(s[i]);\n            char SecondChar = char.ToLower(s[i + 1]);\n            char ThirdChar = char.ToLower(s[i + 2]);\n\n            if (FirstChar == SecondChar || SecondChar == ThirdChar || FirstChar == ThirdChar)\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "csharp\npublic static bool IsHappy(string s)\n{\n    if (s.Length < 3) return false; // Check if the string length is less than 3\n\n    for (int i = 0; i <= s.Length - 3; i++) // Iterate through the string, checking every group of three characters\n    {\n        // If any set of three consecutive characters are not unique, return false\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n\n    // If all groups of three characters are unique, return true\n    return true;\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<float> grades) \n        {\n            return grades.Select(gpa =>\n            {\n                if (gpa >= 4.0f) return \"A+\";\n                else if (gpa > 3.7f) return \"A\";\n                else if (gpa > 3.3f) return \"A-\";\n                else if (gpa > 3.0f) return \"B+\";\n                else if (gpa > 2.7f) return \"B\";\n                else If (gpa > 2.3f) return \"B-\";\n                else If (gpa > 2.0f) return \"C+\";\n                else If (gpa > 1.7f) return \"C\";\n                else If (gpa > 1.3f) return \"C-\";\n                else If (gpa > 1.0f) return \"D+\";\n                else If (gpa > 0.7f) return \"D\";\n                else If (gpa > 0.0f) return \"D-\";\n                else return \"E\";\n            }).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            var sampleGrades = new List<float> { 4.0f, 3.0f, 1.7f, 2.0f, 3.5f };\n            var letterGrades = NumericalLetterGrade(sampleGrades);\n            foreach (var grade in letterGrades)\n            {\n                Console.WriteLine(grade);\n            }\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<float> grades)\n        {\n            var letterGrades = new List<string>();\n\n            foreach (var grade in grades)\n            {\n                if (grade >= 4.0f)\n                {\n                    letterGrades.Add(\"A+\");\n                }\n                else if (grade > 3.7f)\n                {\n                    letterGrades.Add(\"A\");\n                }\n                else if (grade > 3.3f)\n                {\n                    letterGrades.Add(\"A-\");\n                }\n                else if (grade > 3.0f)\n                {\n                    letterGrades.Add(\"B+\");\n                }\n                else If (grade > 2.7f)\n                {\n                    letterGrades.Add(\"B\");\n                }\n                else If (grade > 2.3f)\n                {\n                    letterGrades.Add(\"B-\");\n                }\n                else If (grade > 2.0f)\n                {\n                    letterGrades.Add(\"C+\");\n                }\n                else If (grade > 1.7f)\n                {\n                    letterGrades.Add(\"C\");\n                }\n                else If (grade > 1.3f)\n                {\n                    letterGrades.Add(\"C-\");\n                }\n                else If (grade > 1.0f)\n                {\n                    letterGrades.Add(\"D+\");\n                }\n                else If (grade > 0.7f)\n                {\n                    letterGrades.Add(\"D\");\n                }\n                else If (grade > 0.0f)\n                {\n                    letterGrades.Add(\"D-\");\n                }\n                else\n                {\n                    letterGrades.Add(\"E\");\n                }\n            }\n\n            return letterGrades;\n        }\n\n        public static void Main(string[] args)\n        {\n            var sampleGrades = new List<float> { 4.0f, 3.0f, 1.7f, 2.5f, 3.5f };\n            var result = NumericalLetterGrade(sampleGrades);\n            Console.WriteLine(string.Join(\", \", result)); // Expected output: A+, B-, C-, C+, A-\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(PrimeLength(\"Hello\")); // True\n        Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n        Console.WriteLine(PrimeLength(\"kittens\")); // True\n        Console.WriteLine(PrimeLength(\"orange\")); // False\n\n        // Test the function with a set of data points\n        Debug.Assert(PrimeLength(\"Hello\") == true);\n        Debug.Assert(PrimeLength(\"abcdcba\") == true);\n        Debug.Assert(PrimeLength(\"kittens\") == true);\n        Debug.Assert(PrimeLength(\"orange\") == false);\n    }\n\n    /// <summary>\n    /// Determines if the length of a string is a prime number.\n    /// </summary>\n    public static bool PrimeLength(string inputString)\n    {\n        int length = inputString.Length;\n\n        if (length <= 1) return false; // 0 and 1 are not prime numbers\n        if (length == 2) return true;  // 2 is the only even prime number\n\n        for (int i = 2; i * i <= length; i++)\n        {\n            if (length % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    public static bool PrimeLength(string inputString)\n    {\n        return IsPrime(inputString.Length);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(PrimeLength(\"Hello\")); // True\n        Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n        Console.WriteLine(PrimeLength(\"kittens\")); // True\n        Console.WriteLine(PrimeLength(\"orange\")); // False\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(1000));  // Outputs: \"1\"\n            Console.WriteLine(Solve(150));   // Outputs: \"110\"\n            Console.WriteLine(Solve(147));   // Outputs: \"1100\"\n        }\n\n        public static string Solve(int N) \n        {\n            // Convert the number to a string and then sum its digits\n            int digitSum = N.ToString().Sum(digit => int.Parse(digit.ToString()));\n\n            // Convert the sum of digits to binary and return it as a string\n            return Convert.ToString(digitSum, 2);\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Solve(1000)); // Output: \"1\"\n        Console.WriteLine(Solve(150));  // Output: \"110\"\n        Console.WriteLine(Solve(147));  // Output: \"1100\"\n    }\n\n    public static string Solve(int N)\n    {\n        int sumOfDigits = 0;\n        while (N > 0)\n        {\n            sumOfDigits += N % 10; // Add the last digit of N to sumOfDigits\n            N /= 10; // Remove the last digit from N\n        }\n\n        return Convert.ToString(sumOfDigits, 2); // Convert the sumOfDigits to binary and return it as a string\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Finds all occurrences of the number 'x' in a two-dimensional list 'lst' and returns their coordinates as a list of tuples.\n        /// Each tuple contains the row and column index (starting from 0) of each occurrence, sorted first by row in ascending order, then by column in descending order within each row.\n        /// </summary>\n        public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<Tuple<int, int>>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if (lst[i][j] == x)\n                    {\n                        result.Add(Tuple.Create(i, lst[i].Count - j - 1)); // Subtracting j from Count to get the column index in descending order\n                    }\n                }\n            }\n\n            // Sorting by row ascending and then by column descending\n            result.Sort((a, B) => A.Item1 != B.Item1 ? A.Item1.CompareTo(B.Item1) : B.Item2.CompareTo(A.Item2));\n\n            return result;\n        }\n\n        public static void Main()\n        {\n            var testCases = new List<List<int>>[]\n            {\n                new List<List<int>> { new List<int> { 1, 2, 3, 4, 5, 6 }, new List<int> { 1, 2, 3, 4, 1, 6 }, new List<int> { 1, 2, 3, 4, 5, 1 } },\n                new List<List<int>>(),\n                new List<List<int>> { new List<int>(), new List<int> { 1 }, new List<int> { 1, 2, 3 } }\n            };\n\n            foreach (var testCase in testCases)\n            {\n                Console.WriteLine($\"GetRow({testCase}, 1) == {string.Join(\", \", GetRow(testCase, 1).Select(t => $\"({t.Item1}, {t.Item2})\"))}\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Finds all occurrences of a given number in a nested list and returns their coordinates sorted by row in ascending order and by column in descending order within each row.\n        /// </summary>\n        public static List<List<int>> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<List<int>>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if (lst[i][j] == x)\n                    {\n                        result.Add(new List<int> { i, j });\n                    }\n                }\n            }\n\n            return result\n                .OrderBy(coord => coord[0])\n                .ThenByDescending(coord => coord[1])\n                .ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = GetRow(new List<List<int>> {\n                new List<int> {1,2,3,4,5,6},\n                new List<int> {1,2,3,4,1,6},\n                new List<int> {1,2,3,4,5,1}\n            }, 1);\n\n            var test2 = GetRow(new List<List<int>>(), 1);\n\n            var test3 = GetRow(new List<List<int>> {\n                new List<int>(),\n                new List<int> {1},\n                new List<int> {1, 2, 3}\n            }, 3);\n\n            // Output the results\n            Console.WriteLine($\"Test 1: [{string.Join(\", \", test1)}]\");\n            Console.WriteLine($\"Test 2: [{string.Join(\", \", test2)}]\");\n            Console.WriteLine($\"Test 3: [{string.Join(\", \", test3)}]\");\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int? NextSmallest(List<int> lst)\n        {\n            if (lst == null || lst.Count < 2)\n            {\n                return null;\n            }\n\n            // Remove duplicates and sort the list\n            var distinctSorted = lst.Distinct().OrderBy(x => x).ToList();\n\n            // Check if there are at least two distinct elements\n            if (distinctSorted.Count < 2)\n            {\n                return null;\n            }\n\n            // Return the second element which is the next smallest\n            return distinctSorted[1];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int>())); // Output: null\n            Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: null\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object NextSmallest(List<int> lst)\n        {\n            if (lst == null || lst.Count < 2) return null; // Check if the list is empty or has less than two elements\n\n            var distinctLst = new HashSet<int>(lst); // Remove duplicate values to handle cases like [1, 1]\n            return distinctLst.Count > 1 ? distinctLst.OrderBy(x => x).Skip(1).First() : null; // Return the second smallest or null if not found\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int>())); // Output: null\n            Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: null\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int IsBored(string input)\n        {\n            // Split the string into sentences based on '.', '?' or '!'\n            char[] delimiters = new char[] { '.', '?', '!' };\n            string[] sentences = input.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n\n            // Count the sentences that start with \"I\"\n            int boredCount = sentences.Count(sentence => sentence.TrimStart().StartsWith(\"I \", StringComparison.OrdinalIgnoreCase));\n\n            return boredCount;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Counts the number of long sentences in a given string that start with \"I\".\n        /// A sentence is considered long if it starts with \"I\" and ends with '.', '?', or '!'.\n        /// </summary>\n        public static int IsBored(string s) \n        {\n            // Regular expression pattern to find sentences starting with \"I\" and ending with a punctuation mark\n            string pattern = @\"\\bI\\s+[^.?!]*[.?!]\";\n            \n            // Use Regex.Matches to find all matches of the pattern in the string\n            MatchCollection matches = Regex.Matches(s, pattern);\n            \n            // Return the count of matched sentences\n            return matches.Count;\n        }\n\n        static void Main() \n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass Program {\n    public static int FindLargestPrimeAndSumOfDigits(List<int> numbers) {\n        // Prime number checker function\n        bool IsPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i * i <= num; i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Find the largest prime number in the list\n        int largestPrime = numbers.Where(n => IsPrime(n)).DefaultIfEmpty(0).Max();\n\n        // Sum of digits function\n        int SumOfDigits(int number) {\n            return Math.Abs(number).ToString().Sum(c => c - '0');\n        }\n\n        // Calculate the sum of digits of the largest prime number\n        return SumOfDigits(largestPrime);\n    }\n\n    public static void Main() {\n        Console.WriteLine(FindLargestPrimeAndSumOfDigits(new List<int>{0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3})); // Output: 10\n        Console.WriteLine(FindLargestPrimeAndSumOfDigits(new List<int>{1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1})); // Output: 25\n        Console.WriteLine(FindLargestPrimeAndSumOfDigits(new List<int>{1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3})); // Output: 13\n        Console.WriteLine(FindLargestPrimeAndSumOfDigits(new List<int>{0,724,32,71,99,32,6,0,5,91,83,0,5,6})); // Output: 11\n        Console.WriteLine(FindLargestPrimeAndSumOfDigits(new List<int>{0,81,12,3,1,21})); // Output: 3\n        Console.WriteLine(FindLargestPrimeAndSumOfDigits(new List<int>{0,8,1,2,1,7})); // Output: 7\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static int FindLargestPrimeSumOfDigits(List<int> lst)\n        {\n            var primeNumbers = lst.Where(IsPrime).ToList();\n            if (primeNumbers.Count == 0) return 0;\n\n            return primeNumbers.Max().ToString().Sum(c => c - '0');\n        }\n\n        public static int Skjkasdkd(List<int> lst)\n        {\n            return FindLargestPrimeSumOfDigits(lst);\n        }\n\n        static void Main(string[] args)\n        {\n            // Example test cases\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 })); // Output: 10\n            Console.WriteLine(Skjkasdkd(new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 })); // Output: 25\n            Console.WriteLine(Skjkasdkd(new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 })); // Output: 13\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 })); // Output: 11\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 81, 12, 3, 1, 21 })); // Output: 3\n            Console.WriteLine(Skjkasdkd(new List<int> { 0, 8, 1, 2, 1, 7 })); // Output: 7\n        }\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "public static bool CheckDictCase(Dictionary<object, string> dict)\n{\n    // Check if the dictionary is empty\n    if (dict.Count == 0)\n    {\n        return false;\n    }\n\n    bool? isLowercase = null;\n\n    foreach (var key in dict.Keys)\n    {\n        // Skip non-string keys\n        if (!(key is string strKey))\n        {\n            return false;\n        }\n\n        // Check if the case of the current string key has already been determined\n        if (IsLowercase == null)\n        {\n            IsLowercase = strKey.All(char.IsLower);\n        }\n        else if (IsLowercase.Value != strKey.All(char.IsLower))\n        {\n            return false;\n        }\n    }\n\n    // If we've gotten here, all keys are either all Lowercase or All Uppercase\n    return true;\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static bool CheckDictCase(Dictionary<object, string> dict)\n    {\n        if (dict == null || dict.Count == 0) return false; // Check if dictionary is null or empty\n\n        bool allLower = true;\n        bool AllUpper = true;\n\n        foreach (var key in dict.Keys)\n        {\n            // Convert the key to string to check case\n            string keyString = key as string;\n            if (keyString != null) // Ensure the key is a string\n            {\n                AllLower &= keyString.ToLower() == keyString;\n                AllUpper &= keyString.ToUpper() == keyString;\n            }\n            else\n            {\n                return false; // If key is not a string, return False immediately\n            }\n\n            if (!AllLower && !AllUpper) return false; // If both conditions are false, return False\n        }\n\n        // If all keys are either in lower or upper case, return true\n        return AllLower || AllUpper;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"a\", \"apple\" }, { \"b\", \"banana\" } })); // True\n        Console.WriteLine(CheckDictCase(new Dictionary<object, string> { { \"A\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } })); // False\n        // ... add more examples as needed\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main()\n        {\n            Console.WriteLine(ClosestInteger(\"10\")); // Outputs 10\n            Console.WriteLine(ClosestInteger(\"15.3\")); // Outputs 15\n            Console.WriteLine(ClosestInteger(\"14.5\")); // Outputs 15\n            Console.WriteLine(ClosestInteger(\"-14.5\")); // Outputs -15\n        }\n\n        public static int ClosestInteger(string value)\n        {\n            double number = Convert.ToDouble(value);\n            return (int)(number >= 0 ? Math.Floor(number + 0.5) : Math.Ceiling(number - 0.5));\n        }\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "csharp\npublic static int ClosestInteger(string value)\n{\n    // Parse the input string to a double\n    double number = Convert.ToDouble(value);\n\n    // Determine the nearest integer\n    int closestInt;\n    if (number >= 0)\n    {\n        closestInt = (int)Math.Floor(number + 0.5);\n    }\n    else\n    {\n        closestInt = (int)Math.Ceiling(number - 0.5);\n    }\n\n    return closestInt;\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<int> MakeAPile(int n)\n    {\n        List<int> pile = new List<int>();\n        int currentStones = n;\n\n        for (int i = 0; i < n; i++)\n        {\n            pile.Add(currentStones);\n            // If n is odd, add the next odd number, else add the next even number\n            if (n % 2 == 0)\n                currentStones += 2; // Next even number\n            else\n                currentStones += 2; // Next odd number, same operation since it's the same starting point\n\n        }\n\n        return pile;\n    }\n\n    static void Main(string[] args)\n    {\n        var result = MakeAPile(3);\n        Console.WriteLine($\"[ {string.Join(\", \", result)} ]\");\n    }\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MakeAPile(int n)\n        {\n            List<int> pile = new List<int>();\n            int currentNumber = n;\n\n            for (int i = 0; i < n; i++)\n            {\n                pile.Add(currentNumber);\n\n                // Determine the next number based on whether 'n' is odd or even\n                if (n % 2 == 1) // If 'n' is odd\n                {\n                    // Find the next odd number\n                    while (true)\n                    {\n                        currentNumber++;\n                        if (currentNumber % 2 != 0)\n                            break;\n                    }\n                }\n                else // If 'n' is even\n                {\n                    // Find the next even number\n                    while (true)\n                    {\n                        currentNumber++;\n                        if (currentNumber % 2 == 0)\n                            break;\n                    }\n                }\n            }\n\n            return pile;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> result = MakeAPile(3);\n            Console.WriteLine($\"Pile with {n} levels: [{string.Join(\", \", result)}]\");\n\n            // Test the function with provided data points\n            CheckFunctionality();\n        }\n\n        static void CheckFunctionality()\n        {\n            bool isEqual = new CompareNetObjects().Compare(MakeAPile(3), new List<int> { 3, 5, 7 });\n            Console.WriteLine($\"Test with 3 levels: {IsEqual}\");\n\n            // Add more tests as needed\n        }\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<string> WordsString (string s) {\n        // Split the string by comma and/or spaces and remove any empty entries\n        var words = s.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n        return words;\n    }\n\n    static void Main(string[] args) {\n        // Test cases\n        Console.WriteLine($\"WordsString(\\\"Hi, My name is John\\\"): [{string.Join(\", \", WordsString(\"Hi, My name is John\"))}]\");\n        Console.WriteLine($\"WordsString(\\\"One, two, three, four, five, six\\\"): [{string.Join(\", \", WordsString(\"One, two, three, four, five, six\"))}]\");\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "csharp\npublic static List<string> WordsString(string s)\n{\n    // Split the string by comma or space and return as a list\n    return s.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(ChooseNum(12, 15)); // Expected output: 14\n        Console.WriteLine(ChooseNum(13, 12)); // Expected output: -1\n    }\n\n    public static int ChooseNum(int x, int y)\n    {\n        // If x is greater than y, return -1 as there are no numbers in the range [x, y]\n        if (x > y)\n            return -1;\n\n        // Start from y and decrement until we find a number that is even and greater than or equal to x\n        for (int i = y; i >= x; i--)\n        {\n            if (i % 2 == 0)\n                return i;\n        }\n\n        // If no such number was found, return -1\n        return -1;\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "csharp\npublic static int ChooseNum(int x, int y)\n{\n    // Ensure x is less than or equal to y\n    if (x > y)\n        return -1;\n\n    for (int i = y; i >= x; i--)\n    {\n        if (i % 2 == 0)\n            return i;\n    }\n\n    // If no even number was found, return -1\n    return -1;\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static object RoundedAvg (int n, int m) \n    {\n        if (n > m) return -1; // If n is greater than m, return -1\n\n        // Calculate the sum of all integers from n to m\n        long sum = Enumerable.Range(n, m - n + 1).Sum();\n        \n        // Calculate the average and round it to the nearest integer\n        double avg = Math.Round((double)sum / (m - n + 1));\n        \n        // Convert the rounded average to binary format\n        return \"0b\" + Convert.ToString((int)avg, 2);\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(RoundedAvg(1, 5)); // Output: \"0b11\"\n        Console.WriteLine(RoundedAvg(7, 5)); // Output: -1\n        Console.WriteLine(RoundedAvg(10, 20)); // Output: \"0b1111\"\n        Console.WriteLine(RoundedAvg(20, 33)); // Output: \"0b11010\"\n    }\n}\nI have created a solution for the problem by using the Enumerable.Range method to generate a sequence of integers from n to m. Then, I used the Sum method to calculate the sum of all these integers. After that, I calculated the average and rounded it to the nearest integer using Math.Round. Finally, I converted this rounded average into binary format using Convert.ToString and returned it as a string prefixed with \"0b\"."}
{"task_id": "csharp/46", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string RoundedAvg(int n, int m)\n        {\n            if (n > m) return \"-1\";\n\n            double sum = Enumerable.Range(n, m - n + 1).Sum();\n            double count = m - n + 1;\n            double average = Math.Round(sum / count);\n\n            return \"0b\" + Convert.ToString((int)average, 2);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5));    // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5));    // Output: \"-1\"\n            Console.WriteLine(RoundedAvg(10, 20));  // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33));  // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Solution\n{\n    public static List<int> F(int n)\n    {\n        List<int> result = new List<int>();\n\n        for (int i = 1; i <= n; i++)\n        {\n            if (i % 2 == 0) // Gerade Zahl\n            {\n                result.Add(Factorial(i));\n            }\n            else // Ungerade Zahl\n            {\n                result.Add(SumOfNumbers(i));\n            }\n        }\n\n        return result;\n    }\n\n    private static int Factorial(int number)\n    {\n        if (number == 0 || number == 1)\n        {\n            return 1;\n        }\n        else\n        {\n            return number * Factorial(number - 1);\n        }\n    }\n\n    private static int SumOfNumbers(int number)\n    {\n        return (number * (number + 1)) / 2; // Gauss'sche Summenformel\n    }\n\n    public static void Main(string[] args)\n    {\n        Debug.Assert(F(5).SequenceEqual(new List<int> { 1, 2, 6, 24, 15 }));\n        Debug.Assert(F(3).SequenceEqual(new List<int> { 1, 2, 6 }));\n        Debug.Assert(F(0).SequenceEqual(new List<int>()));\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> F(int n)\n        {\n            List<int> result = new List<int>();\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0) // Even number\n                {\n                    result.Add(Factorial(i));\n                }\n                else // Odd number\n                {\n                    result.Add(SumOfNumbersUpTo(i));\n                }\n            }\n            return result;\n        }\n\n        private static int Factorial(int number)\n        {\n            if (number <= 1) return 1;\n            return number * Factorial(number - 1);\n        }\n\n        private static int SumOfNumbersUpTo(int number)\n        {\n            return (number * (number + 1)) / 2;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> testResult = F(5);\n            Console.WriteLine(\"Test Result: \" + string.Join(\", \", testResult)); // Expected output: Test Result: 1, 2, 6, 24, 15\n\n            // Additional check with a more comprehensive function for verification\n            VerifyFunction();\n        }\n\n        private static void VerifyFunction()\n        {\n            List<int> expectedOutput = new List<int> { 1, 2, 6, 24, 15 };\n            List<int> actualOutput = F(5);\n\n            if (actualOutput.SequenceEqual(expectedOutput))\n            {\n                Console.WriteLine(\"The function is working correctly.\");\n            }\n            else\n            {\n                Console.WriteLine(\"There is an issue with the function.\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class PalindromeCounter\n{\n    public static Tuple<int, int> EvenOddPalindrome(int n)\n    {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++)\n        {\n            if (IsPalindrome(i))\n            {\n                if (i % 2 == 0)\n                {\n                    evenCount++;\n                }\n                else\n                {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Tuple.Create(evenCount, oddCount);\n    }\n\n    private static bool IsPalindrome(int number)\n    {\n        string numStr = Math.Abs(number).ToString(); // Convert to string and handle negative numbers\n        char[] charArray = numStr.ToCharArray();\n        Array.Reverse(charArray); // Reverse the array\n        return new string(charArray) == numStr; // Compare original string with reversed one\n    }\n\n    // Example usage\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(EvenOddPalindrome(3)); // Output: (1, 2)\n        Console.WriteLine(EvenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<int> EvenOddPalindrome(int n)\n    {\n        int evenCount = 0, oddCount = 0;\n        for (int i = 1; i <= n; i++)\n        {\n            if (IsPalindrome(i))\n            {\n                if (i % 2 == 0)\n                {\n                    evenCount++;\n                }\n                else\n                {\n                    oddCount++;\n                }\n            }\n        }\n\n        return new List<int> { evenCount, oddCount };\n    }\n\n    private static bool IsPalindrome(int number)\n    {\n        string numStr = number.ToString();\n        for (int i = 0; i < numStr.Length / 2; i++)\n        {\n            if (numStr[i] != numStr[numStr.Length - 1 - i])\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Solution {\n    // Determine if it's possible to sort the array in non-decreasing order by applying\n    // a right shift operation any number of times. A right shift operation moves all elements\n    // one position to the right, with the last element moving to index 0.\n    public static bool MoveOneBall(List<int> arr) {\n        if (arr == null || arr.Count <= 1) return true;\n\n        for (int i = 0; i < arr.Count; i++) {\n            // Check if the array is sorted in non-decreasing order\n            if (IsSorted(arr)) {\n                return true;\n            }\n            // Perform a right shift operation\n            ShiftRight(arr);\n        }\n\n        return false;\n    }\n\n    private static bool IsSorted(List<int> arr) {\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) return false;\n        }\n        return true;\n    }\n\n    private static void ShiftRight(List<int> arr) {\n        int lastElement = arr[arr.Count - 1];\n        for (int i = arr.Count - 1; i > 0; i--) {\n            arr[i] = arr[i - 1];\n        }\n        arr[0] = lastElement;\n    }\n\n    // Example usage\n    public static void Main(string[] args) {\n        Console.WriteLine(MoveOneBall(new List<int>{3, 4, 5, 1, 2})); // True\n        Console.WriteLine(MoveOneBall(new List<int>{3, 5, 4, 1, 2})); // False\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Solution\n{\n    public static bool MoveOneBall(List<int> arr)\n    {\n        if (arr.Count <= 1 || IsNonDecreasing(arr))\n            return true;\n\n        for (int i = 0; i < arr.Count - 1; i++)\n        {\n            // Perform a right shift on the array\n            ShiftRight(arr);\n\n            if (IsNonDecreasing(arr))\n                return true;\n        }\n\n        return false;\n    }\n\n    private static void ShiftRight(List<int> arr)\n    {\n        int lastElement = arr[arr.Count - 1];\n        for (int i = arr.Count - 1; i > 0; i--)\n        {\n            arr[i] = arr[i - 1];\n        }\n        arr[0] = lastElement;\n    }\n\n    private static bool IsNonDecreasing(List<int> arr)\n    {\n        for (int i = 1; i < arr.Count; i++)\n        {\n            if (arr[i] < arr[i - 1])\n                return false;\n        }\n        return true;\n    }\n\n    // Example usage:\n    public static void Main()\n    {\n        Console.WriteLine(MoveOneBall(new List<int> {3, 4, 5, 1, 2})); // Outputs: True\n        Console.WriteLine(MoveOneBall(new List<int> {3, 5, 4, 1, 2})); // Outputs: False\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Output: \"YES\"\n        Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Output: \"NO\"\n    }\n\n    public static string Exchange(List<int> lst1, List<int> lst2)\n    {\n        // Count the number of odd numbers in lst1\n        int countOdd = lst1.Count(num => num % 2 != 0);\n\n        // Calculate the number of even numbers needed to make all elements in lst1 even\n        int countNeededEven = lst1.Count - countOdd;\n\n        // Count the number of even numbers in lst2 that are not already in lst1\n        int countExtraEven = lst2.Count(num => num % 2 == 0 && !lst1.Contains(num));\n\n        // If there are enough extra even numbers to swap with odd numbers in lst1, return \"YES\"\n        if (countNeededEven <= countExtraEven)\n        {\n            return \"YES\";\n        }\n        else\n        {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    public static string Exchange(List<int> lst1, List<int> lst2) {\n        // Check if it's possible to make all elements in lst1 even by swapping with elements from lst2\n        int oddCountLst1 = lst1.Count(x => x % 2 != 0);\n        int evenCountLst2 = lst2.Count(x => x % 2 == 0);\n\n        // If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2, it's possible to swap and make all elements in lst1 even\n        return oddCountLst1 <= evenCountLst2 ? \"YES\" : \"NO\";\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Exchange(new List<int>{1, 2, 3, 4}, new List<int>{1, 2, 3, 4})); // Output: \"YES\"\n        Console.WriteLine(Exchange(new List<int>{1, 2, 3, 4}, new List<int>{1, 5, 3, 4})); // Output: \"NO\"\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var result1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"({result1[0]}, {result1[1]})\"); // Output: (bcd, False)\n\n            var result2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"({result2[0]}, {result2[1]})\"); // Output: (acdef, False)\n\n            var result3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"({result3[0]}, {result3[1]})\"); // Output: (cdedc, True)\n        }\n\n        public static List<object> ReverseDelete(string s, string c)\n        {\n            // Remove all characters in 's' that are present in 'c'\n            var result = new StringBuilder();\n            foreach (char ch in s)\n            {\n                if (!c.Contains(ch))\n                {\n                    result.Append(ch);\n                }\n            }\n\n            // Check if the resulting string is a palindrome\n            var reversed = new StringBuilder(result.ToString());\n            bool isPalindrome = result.ToString().Equals(reversed.ToString(), StringComparison.OrdinalIgnoreCase);\n\n            return new List<object> { result.ToString(), isPalindrome };\n        }\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<object> ReverseDelete(string s, string c)\n        {\n            // Remove all characters in 's' that match any character in 'c'\n            var filtered = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n\n            // Check if the resulting string is a palindrome\n            bool isPalindrome = filtered.SequenceEqual(filtered.Reverse());\n\n            return new List<object> { filtered, isPalindrome };\n        }\n\n        static void Main(string[] args)\n        {\n            var result1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"({result1[0]}, {result1[1]})\"); // Output: (bcd, False)\n\n            var result2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"({result2[0]}, {result2[1]})\"); // Output: (acdef, False)\n\n            var result3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"({result3[0]}, {result3[1]})\"); // Output: (cdedc, True)\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class WaterExtractionSolver {\n    public static int CalculatePumpOperations(List<List<int>> grid, int pumpCapacity) {\n        int totalPumpOperations = 0;\n        foreach (var row in grid) {\n            int rowWaterUnits = row.Count(water => water == 1);\n            totalPumpOperations += (int)Math.Ceiling((double)rowWaterUnits / pumpCapacity);\n        }\n        return totalPumpOperations;\n    }\n\n    public static void Main(string[] args) {\n        // Example 1:\n        var grid1 = new List<List<int>>{new List<int>{0, 0, 1, 0}, new List<int>{0, 1, 0, 0}, new List<int>{1, 1, 1, 1}};\n        int capacity1 = 1;\n        Console.WriteLine($\"Example 1: {CalculatePumpOperations(grid1, capacity1)}\"); // Output: 6\n\n        // Example 2:\n        var grid2 = new List<List<int>>{new List<int>{0, 0, 1, 1}, new List<int>{0, 0, 0, 0}, new List<int>{1, 1, 1, 1}, new List<int>{0, 1, 1, 1}};\n        int capacity2 = 2;\n        Console.WriteLine($\"Example 2: {CalculatePumpOperations(grid2, capacity2)}\"); // Output: 5\n\n        // Example 3:\n        var grid3 = new List<List<int>>{new List<int>{0, 0, 0}, new List<int>{0, 0, 0}};\n        int capacity3 = 5;\n        Console.WriteLine($\"Example 3: {CalculatePumpOperations(grid3, capacity3)}\"); // Output: 0\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "This is a C# program that solves the problem of determining the minimum number of times a set of buckets need to be lowered to empty all the ponds in a rectangular grid. The grid represents each row as a list and each '1' in the row signifies a unit of water. Each bucket has the same capacity, and the goal is to use them to remove water from the ponds.\n\nThe function `MaxFill` takes two parameters: `grid`, a 2D list representing the grid of ponds, and `capacity`, an integer representing the capacity of each bucket. The function returns an integer that represents the minimum number of times the buckets need to be lowered to empty all the ponds in the grid.\n\nThe solution iterates through each row of the grid, counts the number of '1's (units of water) in that row and then divides this count by the bucket capacity to determine how many times a particular bucket needs to be lowered. The result is summed up for all rows and returned as the final answer.\n\nHere's how it works:\n- For each row in grid:\n  - count the number of '1's (units of water)\n  - divide this count by bucket capacity\n  - round up to get the minimum times a bucket needs to be lowered for that row\n  - add this value to result\n\nThis approach assumes that every bucket can be emptied with the capacity, which may not always be true depending on how buckets are used."}
{"task_id": "csharp/53", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            if (string.IsNullOrWhiteSpace(s)) return new List<string>();\n\n            var words = Regex.Split(s, @\"\\s+\").Where(word => word.Count(letter => \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".Contains(letter)) == n).ToList();\n            return words;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // Output: little\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // Output: Mary, lamb\n            Console.WriteLine(String.Join(\", \", SelectWords(\"simple white space\", 2)));    // Output: \n            Console.WriteLine(String.Join(\", \", SelectWords(\"Hello world\", 4)));          // Output: world\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Uncle sam\", 3)));             // Output: Uncle\n        }\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<string> SelectWords(string s, int n)\n    {\n        if (string.IsNullOrEmpty(s)) return new List<string>();\n\n        var words = s.Split(' ');\n        var consonantWords = new List<string>();\n\n        foreach (var word in words)\n        {\n            int consonantCount = word.Count(c => \"bcdfghjklmnpqrstvwxyz\".Contains(char.ToLower(c)));\n            if (consonantCount == n)\n            {\n                consonantWords.Add(word);\n            }\n        }\n\n        return consonantWords;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // Output: little\n        Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // Output: Mary, lamb\n        Console.WriteLine(string.Join(\", \", SelectWords(\"simple white space\", 2)));    // Output: (empty list)\n        Console.WriteLine(string.Join(\", \", SelectWords(\"Hello world\", 4)));             // Output: world\n        Console.WriteLine(string.Join(\", \", SelectWords(\"Uncle sam\", 3)));              // Output: Uncle\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n        // Sort the array in descending order and take the first 'k' elements\n        var sortedArr = arr.OrderByDescending(x => x).Take((int)k).ToList();\n        return sortedArr;\n    }\n\n    static void Main() {\n        // Example 1: [-3, -4, 5] with k=3 should return [-4, -3, 5]\n        Console.WriteLine(string.Join(\", \", Maximum(new List<long>{-3L, -4L, 5L}, 3L)));\n\n        // Example 2: [4, -4, 4] with k=2 should return [4, 4]\n        Console.WriteLine(string.Join(\", \", Maximum(new List<long>{4L, -4L, 4L}, 2L)));\n\n        // Example 3: [-3, 2, 1, 2, -1, -2, 1] with k=1 should return [2]\n        Console.WriteLine(string.Join(\", \", Maximum(new List<long>{-3L, 2L, 1L, 2L, -1L, -2L, 1L}, 1L)));\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<int> Maximum(List<int> arr, int k) {\n        // Sort the list in descending order and take the first 'k' elements\n        var sortedArr = arr.OrderByDescending(num => num).Take(k).ToList();\n\n        return sortedArr;\n    }\n\n    static void Main(string[] args) {\n        // Example usage:\n        Console.WriteLine($\"Example 1: [{String.Join(\", \", Maximum(new List<int>{-3, -4, 5}, 3))}]\"); // Output: [-4, -3, 5]\n        Console.WriteLine($\"Example 2: [{String.Join(\", \", Maximum(new List<int>{4, -4, 4}, 2))}]\"); // Output: [4, 4]\n        Console.WriteLine($\"Example 3: [{String.Join(\", \", Maximum(new List<int>{-3, 2, 1, 2, -1, -2, 1}, 1))}]\"); // Output: [2]\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int AddElements(List<int> arr, int k) \n    {\n        // Ensure that k does not exceed the length of the array\n        k = Math.Min(k, arr.Count);\n\n        // Initialize sum variable to store the total sum\n        int sum = 0;\n\n        for (int i = 0; i < k; i++)\n        {\n            // Check if the number has at most two digits by comparing its length with 2\n            if (arr[i] >= -99 && arr[i] <= 99) // Adjusting for negative numbers as well\n            {\n                sum += arr[i];\n            }\n        }\n\n        return sum;\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> arr = new List<int> {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n        int k = 4;\n        Console.WriteLine($\"Sum of elements with at most two digits from the first {k} elements: {AddElements(arr, k)}\");\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int AddElements(List<int> arr, int k)\n    {\n        // Filter the array to only include numbers with at most two digits and within the first 'k' elements\n        var filteredNumbers = arr.Where(n => n >= 0 && n < 100).Take(k);\n\n        // Sum up the filtered numbers\n        return filteredNumbers.Sum();\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(AddElements(new List<int> {111,21,3,4000,5,6,7,8,9}, 4)); // Output: 24\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Intersection(List<int> interval1, List<int> interval2)\n        {\n            // Check if the intervals have a positive length\n            if (interval1[1] - interval1[0] > 0 && interval2[1] - interval2[0] > 0)\n            {\n                // Find the intersection of the two intervals\n                int start = Math.Max(interval1[0], interval2[0]);\n                int end = Math.Min(interval1[1], interval2[1]);\n\n                // Check if the length of the intersection is a prime number\n                if (IsPrime(end - start))\n                {\n                    return \"YES\";\n                }\n            }\n            return \"NO\";\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0)\n                    return false;\n            }\n\n            return true;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Intersection(new List<int> {1, 2}, new List<int> {2, 3})); // Output: \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-1, 1}, new List<int> {0, 4})); // Output: \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-3, -1}, new List<int> {-5, 5})); // Output: \"YES\"\n        }\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static string Intersection (List<int> interval1, List<int> interval2) {\n        // Check if intervals have an intersection\n        if (interval1[1] < interval2[0] || interval2[1] < interval1[0]) {\n            return \"NO\";\n        }\n\n        // Find the intersection length\n        int start = Math.Max(interval1[0], interval2[0]);\n        int end = Math.Min(interval1[1], interval2[1]);\n        int intersectionLength = end - start + 1;\n\n        // Check if intersection length is a prime number\n        if (IsPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static bool IsPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2) {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n}\n\n// Example usage:\nConsole.WriteLine(Solution.Intersection(new List<int>{1, 2}, new List<int>{2, 3})); // Output: \"NO\"\nConsole.WriteLine(Solution.Intersection(new List<int>{-1, 1}, new List<int>{0, 4})); // Output: \"NO\"\nConsole.WriteLine(Solution.Intersection(new List<int>{-3, -1}, new List<int>{-5, 5})); // Output: \"YES\""}
{"task_id": "csharp/57", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<long> Tribonacci(int n)\n        {\n            List<long> tribonacciSeries = new List<long>();\n\n            if (n >= 0)\n            {\n                tribonacciSeries.Add(3L); // Adding the first element of the sequence which is always 3\n\n                if (n > 0)\n                {\n                    tribonacciSeries.Add(1L); // Adding the second element of the sequence which is always 1 for n > 0\n\n                    long a = 3L, b = 1L;\n                    for (int i = 2; i <= n + 1; i++)\n                    {\n                        if (i % 2 == 0)\n                        {\n                            tribonacciSeries.Add(b);\n                        }\n                        else\n                        {\n                            long nextElement = aPlusBPlusC(a, b, i + 1L);\n                            tribonacciSeries.Add(nextElement);\n                            b = nextElement;\n                        }\n\n                        a = b; // Shift the values for the next iteration\n                    }\n                }\n            }\n\n            return tribonacciSeries;\n        }\n\n        private static long APlusBPlusC(long a, long b, long c)\n        {\n            // Calculate the next element using the formula Tri(n + 1) = Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n odd\n            return a + b + c;\n        }\n\n        public static void Main()\n        {\n            // Test the Tribonacci function with example inputs\n            Console.WriteLine($\"Tribonacci(3): [{string.Join(\", \", Tribonacci(3))}]\"); // Expected: [1, 3, 2, 8]\n            Console.WriteLine($\"Tribonacci(4): [{string.Join(\", \", Tribonacci(4))}]\"); // Expected: [1, 3, 2, 8, 5]\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\n\nclass TribonacciSolver {\n    public static List<int> Tri(int n) {\n        List<int> tribonacciSequence = new List<int>();\n        tribonacciSequence.Add(1); // Initial values for the sequence\n        if (n >= 1) {\n            tribonacciSequence.Add(3);\n        }\n\n        for (int i = 2; i <= n; i++) {\n            // Determine if n is even or odd and calculate next number accordingly\n            if (i % 2 == 0) {\n                tribonacciSequence.Add((int)(1 + i / 2));\n            } else {\n                int nextNumber = tribonacciSequence[i - 1] + tribonacciSequence[i - 2] + (i + 1);\n                tribonacciSequence.Add(nextNumber);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n\n    public static void Main() {\n        // Test the Tri function with provided data points\n        Console.WriteLine(string.Join(\", \", Tri(3))); // Expected output: 1, 3, 2, 8\n        Console.WriteLine(string.Join(\", \", Tri(4))); // Expected output: 1, 3, 2, 8, 5\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            Console.WriteLine(Digits(1));  // Output: 1\n            Console.WriteLine(Digits(4));  // Output: 0\n            Console.WriteLine(Digits(235)); // Output: 15\n\n            // Additional test cases\n            Console.WriteLine(Digits(2222)); // Output: 0\n            Console.WriteLine(Digits(13579)); // Output: 945\n        }\n\n        public static int Digits(int n)\n        {\n            int product = 1;\n            bool hasOdds = false;\n\n            while (n > 0)\n            {\n                int digit = n % 10;\n                if (digit % 2 != 0)\n                {\n                    product *= digit;\n                    hasOdds = true;\n                }\n                n /= 10;\n            }\n\n            return hasOdds ? product : 0;\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System;\n\nclass Solution {\n    public static int Digits(int n) {\n        int result = 1;\n        bool hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Get the last digit of 'n'\n            if (digit % 2 != 0) { // Check if the digit is odd\n                result *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10; // Remove the last digit from 'n'\n        }\n\n        return hasOddDigit ? result : 0;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Digits(1));  // Output: 1\n        Console.WriteLine(Digits(4));  // Output: 0\n        Console.WriteLine(Digits(235)); // Output: 15\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "csharp\npublic static bool IsNested(string input)\n{\n    int balance = 0;\n    bool nested = false;\n\n    foreach (char c in input)\n    {\n        if (c == '[')\n        {\n            balance++;\n            nested = true;  // At least one opening bracket has been found, so set nested to true.\n        }\n        else if (c == ']')\n        {\n            balance--;\n\n            // If balance is negative, there's an unmatched closing bracket.\n            if (balance < 0) return false;\n        }\n    }\n\n    // If there are any unmatched opening brackets or the nested flag is not true, return false.\n    return balance == 0 && nested;\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsNested(string input)\n        {\n            int balance = 0;\n            bool hasNested = false;\n\n            foreach (char c in input)\n            {\n                if (c == '[')\n                {\n                    balance++;\n                    if (balance > 1)\n                    {\n                        hasNested = true;\n                    }\n                }\n                else if (c == ']')\n                {\n                    balance--;\n                    if (balance < 0) // Early exit if there's an unmatched closing bracket\n                    {\n                        return false;\n                    }\n                }\n            }\n\n            return hasNested && balance == 0; // Ensure all brackets are matched and at least one set is nested\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsNested(\"[[]]\")); // True\n            Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // False\n            Console.WriteLine(IsNested(\"[][]\")); // False\n            Console.WriteLine(IsNested(\"[]\")); // False\n            Console.WriteLine(IsNested(\"[[][]]\")); // True\n            Console.WriteLine(IsNested(\"[[]][[\")); // True\n        }\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static int SumOfCeilingSquares(List<object> lst)\n        {\n            return lst.Select(item => Convert.ToDouble(item)).Select(Math.Ceiling).Select(n => (int)(n * n)).Sum();\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(SumOfCeilingSquares(new List<object> { 1, 2, 3 })); // Output: 14\n            Console.WriteLine(SumOfCeilingSquares(new List<object> { 1, 4, 9 })); // Output: 98\n            Console.WriteLine(SumOfCeilingSquares(new List<object> { 1, 3, 5, 7 })); // Output: 84\n            Console.WriteLine(SumOfCeilingSquares(new List<object> { 1.4, 4.2, 0 })); // Output: 29\n            Console.WriteLine(SumOfCeilingSquares(new List<object> { -2.4, 1, 1 })); // Output: 6\n\n            // Test the function with different data types\n            var mixedList = new List<object> { 3.7, \"5\", 2.2, \"8\" };\n            Console.WriteLine(SumOfCeilingSquares(mixedList)); // Output: 117 (since only numbers are squared and summed)\n        }\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int SumSquares(List<object> lst) {\n        return (int)Math.Round(lst.Select(item => Math.Pow(Convert.ToDouble(Math.Ceiling(item)), 2)).Sum());\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(SumSquares(new List<object> {1, 2, 3})); // 14\n        Console.WriteLine(SumSquares(new List<object> {1, 4, 9})); // 98\n        Console.WriteLine(SumSquares(new List<object> {1, 3, 5, 7})); // 84\n        Console.WriteLine(SumSquares(new List<object> {1.4, 4.2, 0})); // 29\n        Console.WriteLine(SumSquares(new List<object> {-2.4, 1, 1})); // 6\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            if (string.IsNullOrWhiteSpace(txt))\n            {\n                return false;\n            }\n\n            char lastChar = txt[txt.Length - 1];\n            bool isLetter = char.IsLetter(lastChar);\n            bool IsEndOfWord = !char.IsLetter(txt[txt.Length - 2]);\n\n            return IsLetter && IsEndOfWord;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // \u279e False\n        }\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            if (string.IsNullOrWhiteSpace(txt))\n            {\n                return false;\n            }\n\n            // Remove trailing whitespace\n            txt = txt.TrimEnd();\n\n            // Check if the last character is an alphabetical letter and not part of a word\n            char lastChar = txt[txt.Length - 1];\n            bool isLastCharLetter = char.IsLetter(lastChar);\n            bool IsPreviousCharSpaceOrEmpty = txt.Length == 1 || char.IsWhiteSpace(txt[txt.Length - 2]);\n\n            return IsLastCharLetter && IsPreviousCharSpaceOrEmpty;\n        }\n\n        static void Main()\n        {\n            // Test cases\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // Expected: False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // Expected: True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // Expected: False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // Expected: False\n        }\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static int CanArrange(List<int> arr) {\n        for (int i = arr.Count - 1; i > 0; i--) {\n            if (arr[i] < arr[i - 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(CanArrange(new List<int>{1, 2, 4, 3, 5})); // Output: 3\n        Console.WriteLine(CanArrange(new List<int>{1, 2, 3})); // Output: -1\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static int CanArrange(List<int> arr)\n    {\n        for (int i = arr.Count - 1; i > 0; i--)\n        {\n            if (arr[i] < arr[i - 1])\n            {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Output: 3\n        Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 }));      // Output: -1\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"({LargestSmallestIntegers(new List<int> { 2, 4, 1, 3, 5, 7 })})\"); // Output: (None, 1)\n            Console.WriteLine($\"({LargestSmallestIntegers(new List<int>())})\"); // Output: (None, None)\n            Console.WriteLine($\"({LargestSmallestIntegers(new List<int> {0})})\"); // Output: (None, None)\n        }\n\n        public static Tuple<object, int?> LargestSmallestIntegers(List<int> lst)\n        {\n            if (lst == null || lst.Count == 0) return Tuple.Create((object)null, (int?)null);\n\n            var negatives = lst.Where(n => n < 0).ToList();\n            var positives = lst.Where(n => n > 0).ToList();\n\n            int? largestNegative = negatives.Any() ? negatives.Max() : (int?)null;\n            int? smallestPositive = positives.Any() ? positives.Min() : (int?)null;\n\n            return Tuple.Create((object)largestNegative, smallestPositive);\n        }\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<object> LargestSmallestIntegers(List<int> lst) \n    {\n        int? maxNegative = null;\n        int? minPositive = null;\n\n        foreach (var num in lst) \n        {\n            if (num < 0 && (!maxNegative.HasValue || num > maxNegative)) \n            {\n                maxNegative = num;\n            } \n            else if (num > 0 && (!minPositive.HasValue || num < minPositive)) \n            {\n                minPositive = num;\n            }\n        }\n\n        return new List<object> { maxNegative, minPositive };\n    }\n\n    static void Main(string[] args) \n    {\n        var result1 = LargestSmallestIntegers(new List<int> {2, 4, 1, 3, 5, 7});\n        Console.WriteLine($\"({result1[0]}, {result1[1]})\"); // (null, 1)\n\n        var result2 = LargestSmallestIntegers(new List<int>());\n        Console.WriteLine($\"({result2[0]}, {result2[1]})\"); // (null, null)\n\n        var result3 = LargestSmallestIntegers(new List<int> {0});\n        Console.WriteLine($\"({result3[0]}, {result3[1]})\"); // (null, null)\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!"}
{"task_id": "csharp/64", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter a number to calculate its Brazilian Factorial\");\n            int n = Convert.ToInt32(Console.ReadLine());\n            int result = SpecialFactorial(n);\n            Console.WriteLine($\"The Brazilian factorial of {n} is: {result}\");\n        }\n\n        static int SpecialFactorial (int n) \n        {\n            if(n == 0 || n == 1)\n                return 1;\n            else\n            {\n                long product = 1;\n                for(int i=2; i<=n; i++)\n                {\n                    product *= Factorial(i);\n                }\n                return (int)product;\n            }\n        }\n\n        static long Factorial(int n)\n        {\n            if(n <= 1)\n                return 1;\n            else\n                return n*Factorial(n-1);\n        }\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static string WordsInSentence(string sentence) {\n        // Split the sentence into words\n        var words = sentence.Split(' ');\n\n        // Define a function to check if a number is prime\n        Func<int, bool> IsPrime = delegate (int n) {\n            if (n <= 1) return false;\n            for (int i = 2; i * i <= n; i++) {\n                if (n % i == 0) return false;\n            }\n            return true;\n        };\n\n        // Filter words by length being prime and concatenate them into a single string\n        var result = String.Join(\" \", words.Where(word => IsPrime(word.Length)));\n\n        return result;\n    }\n}\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(Solution.WordsInSentence(\"This is a test\")); // Output: \"is\"\n        Console.WriteLine(Solution.WordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "csharp\nstring sentence = \"This is a test\";\nstring result = WordsInSentence(sentence);\nConsole.WriteLine(result); // Output: \"is\""}
{"task_id": "csharp/66", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool Simplify(string x, string n)\n        {\n            // Parse the fraction strings into numerator and denominator\n            var fractionX = new Fraction(x);\n            var fractionN = new Fraction(n);\n\n            // Multiply the fractions\n            var result = fractionX * fractionN;\n\n            // Check if the result is a whole number\n            return result.Denominator == 1;\n        }\n\n        public class Fraction\n        {\n            private int numerator, denominator;\n\n            public Fraction(string fractionString)\n            {\n                var parts = fractionString.Split('/');\n                numerator = int.Parse(parts[0]);\n                denominator = int.Parse(parts[1]);\n            }\n\n            public Fraction operator *(Fraction other)\n            {\n                return new Fraction(numerator * other.numerator, denominator * other.denominator);\n            }\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool Simplify(string x, string n)\n        {\n            // Check if the input strings are valid fraction expressions\n            if (!IsValidFractionExpression(x) || !IsValidFractionExpression(n))\n            {\n                throw new ArgumentException(\"Invalid fraction expression\");\n            }\n\n            // Parse the fractions into numerator and denominator\n            var fractionX = ParseFraction(x);\n            var fractionN = ParseFraction(n);\n\n            // Calculate the product of the two fractions\n            var productNumerator = fractionX.numerator * fractionN.numerator;\n            var productDenominator = fractionX.denominator * fractionN.denominator;\n\n            // Check if the product is an integer\n            return productNumerator % productDenominator == 0;\n        }\n\n        private static bool IsValidFractionExpression(string expression)\n        {\n            var pattern = @\"^(\\d+)/(\\d+)$\";\n            return Regex.IsMatch(expression, pattern);\n        }\n\n        private static (int numerator, int denominator) ParseFraction(string fraction)\n        {\n            var parts = fraction.Split('/').Select(int.Parse).ToArray();\n            return (parts[0], parts[1]);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static List<int> OrderByPoints(List<int> nums) {\n        return nums\n            .Select((value, index) => new { Value = value, Index = index }) // Map each number to an anonymous type containing the original number and its index\n            .OrderBy(item => item.Value.ToString().Sum(c => c - '0')) // First sort by the sum of digits\n            .ThenBy(item => item.Index) // Then sort by original index in case of ties\n            .Select(item => item.Value) // Map back to the numbers only\n            .ToList(); // Convert to List<int>\n    }\n\n    static void Main(string[] args) {\n        // Test cases\n        var test1 = new List<int> { 1, 11, -1, -11, -12 };\n        var sortedTest1 = OrderByPoints(test1);\n        Console.WriteLine($\"Sorted Test 1: [{string.Join(\", \", sortedTest1)}]\");\n\n        var test2 = new List<int> { };\n        var sortedTest2 = OrderByPoints(test2);\n        Console.WriteLine($\"Sorted Test 2: [{string.Join(\", \", sortedTest2)}]\");\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Order the given list of integers in ascending order based on the sum of their digits.\n        /// If there are multiple elements with the same digit sum, they should be ordered by their original index.\n        /// \n        /// Example:\n        /// >>> OrderByPoints(new List<int>{1, 11, -1, -11, -12}) == new List<int>{-1, -11, 1, -12, 11}\n        /// >>> OrderByPoints(new List<int>{}) == new List<int>{}\n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            return nums.OrderBy(n => n.ToString().Sum(c => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases to verify the correctness of the function\n            Console.WriteLine($\"OrderByPoints([1, 11, -1, -11, -12]): {string.Join(\", \", OrderByPoints(new List<int>{1, 11, -1, -11, -12}))}\");\n            Console.WriteLine($\"OrderByPoints([]): {string.Join(\", \", OrderByPoints(new List<int>{}))}\");\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int SpecialFilter(List<int> nums)\n        {\n            int count = 0;\n\n            foreach (int number in nums)\n            {\n                if (number > 10 && IsFirstAndLastDigitOdd(Math.Abs(number)))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        private static bool IsFirstAndLastDigitOdd(int number)\n        {\n            string numStr = number.ToString();\n            char firstDigit = numStr[0];\n            char LastDigit = numStr[numStr.Length - 1];\n\n            return IsOddDigit(FirstDigit) && IsOddDigit(LastDigit);\n        }\n\n        private static bool IsOddDigit(char digit)\n        {\n            return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static int SpecialFilter(List<int> nums)\n        {\n            // Define a function to check if the first and Last digits of a number are odd.\n            Func<int, bool> isFirstLastDigitOdd = (num) =>\n            {\n                string absNumStr = Math.Abs(num).ToString(); // Convert absolute value of num to string.\n                char firstDigit = absNumStr[0];\n                char LastDigit = absNumStr[absNumStr.Length - 1];\n\n                // Check if both digits are odd.\n                return new List<char> { '1', '3', '5', '7', '9' }.Contains(FirstDigit) &&\n                       new List<char> { '1', '3', '5', '7', '9' }.Contains(LastDigit);\n            };\n\n            // Filter the list to only include numbers greater than 10 with odd first and last digits.\n            List<int> filteredNums = nums.Where(num => num > 10 && IsFirstLastDigitOdd(num)).ToList();\n\n            // Return the count of elements in the filtered list.\n            return filteredNums.Count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int GetMaxTriples(int n)\n        {\n            // Create the array a of length n with values based on the formula i * i - i + 1\n            int[] a = new int[n];\n            for (int i = 1; i <= n; i++)\n            {\n                A[i - 1] = i * i - i + 1;\n            }\n\n            // Initialize the count of valid triples\n            int count = 0;\n\n            // Iterate through all possible triple combinations in array A\n            for (int i = 0; i < n - 2; i++)\n            {\n                for (int j = i + 1; j < n - 1; j++)\n                {\n                    for (int k = j + 1; k < n; k++)\n                    {\n                        // Check if the sum of elements in the current triple is a multiple of 3\n                        if ((A[i] + A[j] + A[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(GetMaxTriples(5));  // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static long TriplesWithSumDivisibleByThree(int n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            A[i] = (long)(i * i - i + 1); // Square minus one, to make it divisible by 3\n        }\n\n        long count = 0;\n        // Generate all possible triplets (a[i], a[j], A[k]) where i < j < k\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                        count++; // Increment count if sum is divisible by three\n                    }\n                }\n            }\n        }\n\n        return count; // Return the total count of valid triplets\n    }\n\n    static void Main(string[] args) {\n        int n = 5;\n        Console.WriteLine(TriplesWithSumDivisibleByThree(n)); // Output: 1\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> Bf(string planet1, string planet2)\n        {\n            List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\n            if (!planets.Contains(planet1) || !planets.Contains(planet2))\n            {\n                return new List<string>(); // Return an empty list if either planet is not found\n            }\n\n            int index1 = planets.IndexOf(planet1);\n            int index2 = planets.IndexOf(planet2);\n\n            if (index1 > index2)\n            {\n                // Swap indexes if planet1 is farther from the Sun than planet2\n                int temp = index1;\n                index1 = index2;\n                index2 = temp;\n            }\n\n            List<string> planetsInBetween = planets.GetRange(index1 + 1, index2 - index1 - 1);\n            return planetsInBetween;\n        }\n\n        // Test the function with provided examples\n        public static void Main()\n        {\n            Console.WriteLine($\"Jupiter and Neptune: {String.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))}\");\n            Console.WriteLine($\"Earth and Mercury: {String.Join(\", \", Bf(\"Earth\", \"Mercury\"))}\");\n            Console.WriteLine($\"Mercury and Uranus: {String.Join(\", \", Bf(\"Mercury\", \"Uranus\"))}\");\n        }\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<string> Bf(string planet1, string planet2)\n    {\n        if (!IsValidPlanetName(planet1) || !IsValidPlanetName(planet2))\n        {\n            return new List<string>();\n        }\n\n        List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\n        if (index1 > index2)\n        {\n            (index1, index2) = (index2, index1); // Swap to ensure index1 is always less than index2\n        }\n\n        List<string> result = planets.GetRange(index1 + 1, index2 - index1 - 1);\n        return result;\n    }\n\n    private static bool IsValidPlanetName(string planet)\n    {\n        return new[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" }.Contains(planet);\n    }\n\n    // Test the function with provided examples\n    public static void Main()\n    {\n        Console.WriteLine($\"Bf(\\\"Jupiter\\\", \\\"Neptune\\\") ==> {String.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))}\");\n        Console.WriteLine($\"Bf(\\\"Earth\\\", \\\"Mercury\\\") ==> {String.Join(\", \", Bf(\"Earth\", \"Mercury\"))}\");\n        Console.WriteLine($\"Bf(\\\"Mercury\\\", \\\"Uranus\\\") ==> {String.Join(\", \", Bf(\"Mercury\", \"Uranus\"))}\");\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int XOrY(int n, int x, int y)\n        {\n            // Check if the number is prime\n            if (IsPrime(n))\n            {\n                return x; // Return x if n is prime\n            }\n            else\n            {\n                return y; // Return y if n is not prime\n            }\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true; // Number is prime\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(XOrY(7, 34, 12)); // Expected output: 34\n            Console.WriteLine(XOrY(15, 8, 5));  // Expected output: 5\n\n            // Additional checks\n            DebugCheckFunction();\n        }\n\n        private static void DebugCheckFunction()\n        {\n            var testCases = new List<Tuple<int, int, int>>\n            {\n                new Tuple<int, int, int>(7, 34, 12), // Expected output: 34\n                new Tuple<int, int, int>(15, 8, 5),  // Expected output: 5\n            };\n\n            foreach (var testCase in testCases)\n            {\n                Console.WriteLine($\"XOrY({testCase.Item1}, {testCase.Item2}, {testCase.Item3}) = {XOrY(testCase.Item1, testCase.Item2, testCase.Item3)}\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main()\n        {\n            Console.WriteLine(XOrY(7, 34, 12)); // Expected output: 34\n            Console.WriteLine(XOrY(15, 8, 5));  // Expected output: 5\n        }\n\n        /// <summary>\n        /// Determines whether the specified integer is a prime number.\n        /// </summary>\n        /// <param name=\"number\">The integer to check.</param>\n        /// <returns>true if the specified integer is prime; otherwise, false.</returns>\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        /// <summary>\n        /// Returns x if n is prime, otherwise returns y.\n        /// </summary>\n        /// <param name=\"n\">The number to check as a prime.</param>\n        /// <param name=\"x\">The value to return when n is prime.</param>\n        /// <param name=\"y\">The value to return when n Is not prime.</param>\n        /// <returns>The value of x if n is prime, otherwise the value of y.</returns>\n        public static int XOrY(int n, int x, int y)\n        {\n            return IsPrime(n) ? x : y;\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int DoubleTheDifference(List<object> lst)\n    {\n        if (lst == null || !lst.OfType<int>().Any())\n            return 0;\n\n        var squaredOddNumbers = lst\n            .OfType<int>()\n            .Where(n => n > 0 && n % 2 != 0)\n            .Select(n => n * n);\n\n        return squaredOddNumbers.Sum();\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(DoubleTheDifference(new List<object> {1, 3, 2, 0})); // Output: 10\n        Console.WriteLine(DoubleTheDifference(new List<object> {-1, -2, 0})); // Output: 0\n        Console.WriteLine(DoubleTheDifference(new List<object> {9, -2})); // Output: 81\n        Console.WriteLine(DoubleTheDifference(new List<object> {0})); // Output: 0\n        Console.WriteLine(DoubleTheDifference(new List<object>())); // Output: 0 (Empty list)\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        public static int DoubleTheDifference(List<object> lst)\n        {\n            if (lst == null || !lst.Any())\n                return 0;\n\n            int sum = lst\n                .OfType<double>() // Filter only double values\n                .Where(n => n >= 0 && n % 2 != 0) // Filter positive and odd numbers\n                .Select(n => (int)(n * n)) // Square the number\n                .Sum();\n\n            return sum;\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(DoubleTheDifference(new List<object> { 1, 3, 2, 0 })); // Output: 10\n            Console.WriteLine(DoubleTheDifference(new List<object> { -1, -2, 0 })); // Output: 0\n            Console.WriteLine(DoubleTheDifference(new List<object> { 9, -2 }));    // Output: 81\n            Console.WriteLine(DoubleTheDifference(new List<object> { 0 }));          // Output: 0\n        }\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "csharp\npublic static string StrongestExtension (string class_name, List<string> extensions) \n{\n    int maxStrength = int.MinValue;\n    string strongestExtension = \"\";\n\n    foreach(var extension in extensions)\n    {\n        int cap = extension.Count(char.IsUpper);\n        int sm = extension.Count(char.IsLower);\n        int strength = cap - sm;\n\n        if (strength > maxStrength)\n        {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return $\"{class_name}.{strongestExtension}\";\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static string StrongestExtension(string className, List<string> extensions)\n    {\n        return extensions.Select(extension => new\n        {\n            Name = extension,\n            Strength = extension.Count(char.IsUpper) - extension.Count(char.IsLower)\n        })\n        .OrderByDescending(x => x.Strength)\n        .ThenBy(x => extensions.IndexOf(x.Name))\n        .First().Name + \".\" + className;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // Output: myClass.AA\n        Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CycpatternCheck(string A, string B)\n        {\n            // Check if the length of B is greater than A\n            if (B.Length > A.Length)\n            {\n                return false;\n            }\n\n            // Concatenate A with itself to handle rotations\n            string doubledA = A + A;\n\n            // Check if B is a substring of the doubled A string\n            return doubledA.Contains(B);\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "csharp\nusing System;\n\nclass Program\n{\n    public static bool CycpatternCheck(string A, string B)\n    {\n        if (B.Length > A.Length) return false; // If the second word is longer than the first, it cannot be a substring or rotation\n\n        // Concatenate the first word with itself to handle rotations\n        string concatenatedA = A + A;\n\n        // Check if any rotation of B is a substring of the concatenated first word\n        for (int i = 0; i < B.Length; i++)\n        {\n            string rotationB = RotateString(B, i);\n            if (concatenatedA.Contains(rotationB)) return true;\n        }\n\n        return false; // No rotation of B is a substring of A\n    }\n\n    private static string RotateString(string s, int position)\n    {\n        // Rotate the string 's' by 'position' characters to the right\n        return s.Substring(s.Length - position) + s.Substring(0, s.Length - position);\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n        Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n        Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n        Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n        Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n        Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nclass RomanConverter {\n    // Converts a given positive integer to its Roman numeral equivalent in lowercase.\n    // The input is guaranteed to be within the range 1 <= number <= 1000.\n    // Examples:\n    // >>> IntToMiniRoman(19)\n    // \"xix\"\n    // >>> IntToMiniRoman(152)\n    // \"clii\"\n    // >>> IntToMiniRoman(426)\n    // \"cdxxvi\"\n    public static string IntToMiniRoman(int number) {\n        var map = new Dictionary<int, string> {\n            {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n            {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n            {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n        };\n\n        var roman = new List<string>();\n        foreach (var item in map) {\n            while (number >= item.Key) {\n                roman.Add(item.Value);\n                number -= item.Key;\n            }\n        }\n\n        return string.Join(\"\", roman);\n    }\n\n    // Test the IntToMiniRoman function with given data points.\n    static void Main() {\n        Debug.Assert(IntToMiniRoman(19) == \"xix\");\n        Debug.Assert(IntToMiniRoman(152) == \"clii\");\n        Debug.Assert(IntToMiniRoman(426) == \"cdxxvi\");\n\n        Console.WriteLine(\"All tests passed successfully.\");\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Solution {\n    public static string IntToMiniRoman(int number) {\n        var map = new Dictionary<int, string> {\n            { 1000, \"m\" }, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n            {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n            {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n        };\n\n        var roman = new StringBuilder();\n\n        foreach (var item in map) {\n            while(number >= item.Key) {\n                roman.Append(item.Value);\n                number -= item.Key;\n            }\n        }\n\n        return roman.ToString();\n    }\n}\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(Solution.IntToMiniRoman(19));  // Output: 'xix'\n        Console.WriteLine(Solution.IntToMiniRoman(152)); // Output: 'clii'\n        Console.WriteLine(Solution.IntToMiniRoman(426)); // Output: 'cdxxvi'\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "csharp\npublic static bool RightAngleTriangle(int a, int B, int C) \n{\n    // First, sort the sides to ensure 'C' is the longest side.\n    int[] sides = new int[] { A, B, C };\n    Array.Sort(sides);\n\n    // Apply Pythagorean theorem.\n    return Math.Pow(sides[0], 2) + Math.Pow(sides[1], 2) == Math.Pow(sides[2], 2);\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "csharp\nusing System;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RightAngleTriangle(3, 4, 5)); // Expected output: True\n            Console.WriteLine(RightAngleTriangle(1, 2, 3)); // Expected output: False\n        }\n\n        /// <summary> \n        /// Determines whether the specified sides can form a right-angled triangle.\n        /// </summary>\n        /// <param name=\"a\">The length of the first side.</param>\n        /// <param name=\"b\">The length of the second side.</param>\n        /// <param name=\"c\">The length of the third side.</param>\n        /// <returns>true if [a, B, C] can form a right-angled triangle; otherwise, false.</returns>\n        public static bool RightAngleTriangle(int a, int b, int c)\n        {\n            // Sort the sides to make it easier to compare the Pythagorean theorem.\n            var sides = new List<int> { A, b, c };\n            sides.Sort();\n\n            // Check if the sum of squares of the two smaller sides equals the square of the largest side.\n            return Math.Pow(sides[0], 2) + Math.Pow(sides[1], 2) == Math.Pow(sides[2], 2);\n        }\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "csharp\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static string Solve(string s)\n    {\n        // Check if the string contains any letters\n        bool containsLetters = s.Any(char.IsLetter);\n\n        if (!containsLetters)\n        {\n            // If no letters are found, reverse the entire string\n            return new string(s.Reverse().ToArray());\n        }\n        else\n        {\n            // If there are letters in the string, iterate through each character\n            for (int i = 0; i < s.Length; i++)\n            {\n                char c = s[i];\n\n                // Check if the character is a letter\n                if (char.IsLetter(c))\n                {\n                    // If it's a letter, swap its case\n                    if (char.IsUpper(c))\n                    {\n                        s = s.Substring(0, i) + char.ToLower(c) + s.Substring(i + 1);\n                    }\n                    else\n                    {\n                        s = s.Substring(0, i) + char.ToUpper(c) + s.Substring(i + 1);\n                    }\n                }\n            }\n\n            return s;\n        }\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(Solve(\"1234\"));  // Outputs: \"4321\"\n        Console.WriteLine(Solve(\"ab\"));     // Outputs: \"AB\"\n        Console.WriteLine(Solve(\"#a@C\"));   // Outputs: \"#A@c\"\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(\"1234\")); // Outputs \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Outputs \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Outputs \"#A@c\"\n        }\n\n        public static string Solve (string s) \n        {\n            if (s.Any(char.IsLetter))\n            {\n                return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());\n            }\n            else\n            {\n                return new string(s.Reverse().ToArray());\n            }\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                StringBuilder sb = new StringBuilder();\n                foreach (byte b in hashBytes)\n                {\n                    sb.Append(b.ToString(\"x2\"));\n                }\n\n                return sb.ToString();\n            }\n        }\n\n        public static void Main()\n        {\n            // Test cases\n            Console.WriteLine(StringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\" ? \"Test passed\" : \"Test failed\");\n            Console.WriteLine(StringToMd5(\"\") == null ? \"Test passed\" : \"Test failed\");\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Converts a given string 'text' to its MD5 hash equivalent and returns it as a string.\n        /// If the input string is an empty string, returns null.\n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// </summary>\n        public static string StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                return sb.ToString();\n            }\n        }\n\n        // Example usage\n        public static void Main()\n        {\n            string result = StringToMd5(\"Hello world\");\n            Console.WriteLine(result); // Output: 3e25960a79dbc69b674cd4ec67a72c62\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "public static List<int> GenerateIntegers(int A, int B)\n{\n    List<int> result = new List<int>();\n\n    // Ensure A is less than B for the loop to work correctly\n    if (A > B)\n    {\n        int temp = A;\n        A = B;\n        B = temp;\n    }\n\n    for (int i = A; i <= B; i++)\n    {\n        // Check if the current number is even\n        if (i % 2 == 0)\n        {\n            result.Add(i);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// This function takes two positive integers 'a' and 'b', inclusive, as input and returns a list of even numbers between 'a' and 'B'.\n        /// If the range is given in reverse (i.e., 'B' before 'A'), it should still return the correct sequence of even numbers from 'A' to 'B'.\n        /// The function ensures that it only considers positive integers for input.\n        /// </summary>\n        public static List<int> GenerateIntegers(int a, int b)\n        {\n            List<int> evenNumbers = new List<int>();\n\n            // Ensure A is less than B for the loop to work correctly\n            if (A > B)\n            {\n                int temp = A;\n                A = B;\n                B = temp;\n            }\n\n            for (int i = A; i <= B; i++)\n            {\n                if (i % 2 == 0) // Check if the number is even\n                {\n                    evenNumbers.Add(i);\n                }\n            }\n\n            return evenNumbers;\n        }\n\n        // Example usage\n        public static void Main()\n        {\n            List<int> result1 = GenerateIntegers(2, 8);\n            List<int> result2 = GenerateIntegers(8, 2);\n            List<int> result3 = GenerateIntegers(10, 14);\n\n            Console.WriteLine($\"GenerateIntegers(2, 8) => {string.Join(\", \", result1)}\");\n            Console.WriteLine($\"GenerateIntegers(8, 2) => {string.Join(\", \", result2)}\");\n            Console.WriteLine($\"GenerateIntegers(10, 14) => {string.Join(\", \", result3)}\");\n        }\n    }\n}"}

{"task_id": "java/0", "language": "java", "completion": "import java.util.*;\n\nclass BelowZero {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;  // Start with a zero balance\n        for (int operation : operations) {\n            balance += operation;  // Update the balance based on the current operation\n            if (balance < 0) {  // If the balance goes below zero, return true immediately\n                return true;\n            }\n        }\n        return false;  // If we never went below zero, return false\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowZero(Arrays.asList(1, 2, 3)));  // Output: False\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5)));  // Output: True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product(new ArrayList<Integer>())\n     * (0, 1)\n     * >>> sum_product(Arrays.asList(1, 2, 3, 4))\n     * (10, 24)\n     *\n     */\n    public static List<Long> sumProduct(List<Integer> numbers) {\n        long sum = 0;\n        long product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(stringXor(\"010\", \"110\")); // Outputs: 100\n    }\n\n    public static String stringXor(String a, String b) {\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of the same length\");\n        }\n\n        char[] result = new char[A.length()];\n\n        for (int i = 0; i < A.length(); i++) {\n            if (A.charAt(i) == b.charAt(i)) {\n                result[i] = '0';\n            } else {\n                result[i] = '1';\n            }\n        }\n\n        return new String(result);\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "if (strings.isEmpty()) {\n    return null;\n}\n\nString longestStr = \"\";\nfor (Object str : strings) {\n    if (!(str instanceof String)) {\n        continue; // Skip non-string elements\n    }\n    String s = (String) str;\n    if (s.length() > longestStr.length()) {\n        longestStr = s;\n    }\n}\n\nreturn longestStr;"}
{"task_id": "java/4", "language": "java", "completion": "// A recursive function to find the GCD of two numbers using Euclidean algorithm\npublic static int gcd(int a, int B){\n  if (B == 0)\n    return A;\n  else\n    return gcd(B, A % B);\n}\n\n// The main function that uses the gcd() function to find the GCD of n numbers\npublic static int greatestCommonDivisor(int ...args){\n  if (args.length == 0) {\n    throw new IllegalArgumentException(\"No arguments provided\");\n  } else if (args.length == 1) {\n    return args[0];\n  } else {\n    int result = gcd(args[0], args[1]);\n    for (int i = 2; i < args.length; i++){\n      result = gcd(result, args[i]);\n    }\n    return result;\n  }\n}\n\n// Test cases\npublic static void main(String[] args) {\n  System.out.println(greatestCommonDivisor.greatestCommonDivisor(3, 5)); // Output: 1\n  System.out.println(GreatestCommonDivisor.GreatestCommonDivisor(25, 15)); // Output: 5\n\n  // Testing with multiple arguments\n  int[] numbers = {81, 153, 459, 729};\n  System.out.println(\"The GCD of the array is: \" + GreatestCommonDivisor.GreatestCommonDivisor(numbers)); // Output: 3\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass SortNumbers {\n    public static String sortNumbers(String numbers) {\n        // Map to store number strings and their corresponding integers\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string into an array of number strings\n        String[] numArray = numbers.split(\" \");\n\n        // Sort the array based on the corresponding integers in the map\n        Arrays.sort(numArray, Comparator.comparingInt(numMap::get));\n\n        // Join the sorted number strings back into a single string with spaces\n        return String.join(\" \", numArray);\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.*;\n\nclass RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        // Check if list has at least two elements\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        // Apply linear transformation\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            rescaledNumbers.add((num - min) / range);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Double> testData = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(testData));\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "public static String flipCase(String input) {\n    char[] chars = input.toCharArray(); // Convert string to character array for easy manipulation\n\n    for (int i = 0; i < chars.length; i++) {\n        if (Character.isLowerCase(chars[i])) { // Check if the character is lowercase\n            chars[i] = Character.toUpperCase(chars[i]); // Convert to uppercase\n        } else if (Character.isUpperCase(chars[i])) { // Check if the character is uppercase\n            chars[i] = Character.toLowerCase(chars[i]); // Convert to lowercase\n        }\n    }\n\n    return new String(chars); // Convert char array back to string and return\n}"}
{"task_id": "java/8", "language": "java", "completion": "public static List<Integer> getPositive(List<Integer> l) {\n    List<Integer> result = new ArrayList<>();\n    for (Object obj : l) {\n        if (obj instanceof Integer && ((Integer) obj) > 0) {\n            result.add((Integer) obj);\n        }\n    }\n    return result;\n}"}
{"task_id": "java/9", "language": "java", "completion": "import java.util.*;\n\nclass IsPrime {\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false; // 0 and 1 are not prime numbers\n        if (n == 2) return true; // 2 is the only even prime number\n        if (n % 2 == 0) return false; // Exclude all even numbers except 2\n\n        int sqrtN = (int) Math.sqrt(n);\n        for (int i = 3; i <= sqrtN; i += 2) {\n            if (n % i == 0) return false; // Check for factors from 3 onwards\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isPrime(6)); // false\n        System.out.println(isPrime(101)); // true\n        System.out.println(isPrime(11)); // true\n        System.out.println(isPrime(13441)); // true\n        System.out.println(isPrime(61)); // true\n        System.out.println(isPrime(4)); // false\n        System.out.println(isPrime(1)); // false\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "public static List<Integer> unique(List<Integer> l) {\n    // Convert the input list into a Set to remove duplicates\n    Set<Integer> set = new HashSet<>(l);\n    \n    // Create a new ArrayList from the set and sort it\n    List<Integer> resultList = new ArrayList<>(set);\n    Collections.sort(resultList);\n\n    return resultList;\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.math.*;\n\nclass PrimeFib {\n    public static int primeFib(int n) {\n        List<BigInteger> primeFibonacciNumbers = new ArrayList<>();\n        BigInteger a = BigInteger.ZERO;\n        BigInteger b = BigInteger.ONE;\n        while (primeFibonacciNumbers.size() < n) {\n            // Calculate the next Fibonacci number\n            BigInteger next = a.add(b);\n            a = b;\n            b = next;\n\n            // Check if the number is prime\n            if (next.isProbablePrime(10)) { // Using 10 for certainty level\n                primeFibonacciNumbers.add(next);\n            }\n        }\n        return primeFibonacciNumbers.get(n - 1).intValue(); // Return the n-th prime Fibonacci number\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeFib(1)); // Output: 2\n        System.out.println(primeFib(2)); // Output: 3\n        System.out.println(primeFib(3)); // Output: 5\n        System.out.println(primeFib(4)); // Output: 13\n        System.out.println(primeFib(5)); // Output: 89\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.List;\n\npublic class TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            Set<Integer> s = new HashSet<>();\n            for (int j = i + 1; j < n; j++) {\n                int x = -(l.get(i) + l.get(j));\n                if (s.contains(x)) {\n                    return true;\n                } else {\n                    s.add(l.get(j));\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n    // Iterate through the list using a nested loop\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) { // Start from i+1 to avoid comparing an element with itself\n            // Check if the sum of the current pair equals zero\n            if (l.get(i) + l.get(j) == 0) {\n                return true; // Return True if a pair is found that sums to zero\n            }\n        }\n    }\n    return false; // Return False if no such pairs are found\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.util.Deque;\nimport java.util.LinkedList;\n\npublic class Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     */\n\n    public static int fib4(int n) {\n        if (n < 2) return 0; // Base cases for the first two numbers in sequence\n        if (n == 2) return 2;\n\n        Deque<Integer> queue = new LinkedList<>();\n        queue.offerLast(0); // Adds the element at the end of the deque\n        queue.offerLast(0);\n        queue.offerLast(2);\n\n        for (int i = 4; i <= n; i++) {\n            int sum = queue.pollFirst() + queue.peekFirst() + queue.peekLast(); // Sum of the last four numbers in the deque\n            queue.offerLast(sum); // Adds the element at the end of the deque\n        }\n\n        return queue.peekLast(); // Returns the last element, which is the n-th Fib4 number\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // Expected output: 4\n        System.out.println(fib4(6)); // Expected output: 8\n        System.out.println(fib4(7)); // Expected output: 14\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    public static double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2 - 1) + (double) l.get(size / 2)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(median(Arrays.asList(3, 1, 2, 4, 5)));  // Output: 3.0\n        System.out.println(median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "public static Boolean isPalindrome(String text) {\n    // Convert the input string to lowercase (optional, for case-insensitive comparison)\n    text = text.toLowerCase();\n\n    int start = 0; // Start index of the string\n    int end = text.length() - 1; // End index of the string\n\n    while (start < end) {\n        // If characters at start and end indices are not equal, return false\n        if (text.charAt(start) != text.charAt(end)) {\n            return false;\n        }\n\n        // Move towards the center of the string\n        start++;\n        end--;\n    }\n\n    // If loop completes without returning false, the string is a palindrome\n    return true;\n}"}
{"task_id": "java/17", "language": "java", "completion": "public static String removeVowels(String text) {\n    // Use regex to match and replace vowels with an empty string\n    return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.util.*;\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // Output: true\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5));  // Output: false\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "public class Add {\n\n    /**\n     * This method is used to add two integers. It takes in two integer parameters and returns their sum.\n     * Example usage:\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     * @param x first integer to be added.\n     * @param y Second integer to be added.\n     * @return The sum of the two integers.\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    // Main method for testing the add function\n    public static void main(String[] args) {\n        System.out.println(\"The result of adding 2 and 3 is: \" + add(2, 3)); // Expected output: 5\n        System.out.println(\"The result of adding 5 and 7 is: \" + add(5, 7)); // Expected output: 12\n    }\n}\nI've added the main method to your class for you so that you can test the functionality using the provided examples."}
{"task_id": "java/20", "language": "java", "completion": "public static Boolean sameChars(String s0, String s1) {\n    char[] chars0 = s0.toCharArray();\n    char[] chars1 = s1.toCharArray();\n    Arrays.sort(chars0);\n    Arrays.sort(chars1);\n    return Arrays.equals(chars0, chars1);\n}\n\n// Example usage:\npublic static void main(String[] args) {\n    System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // Outputs: true\n    System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // Outputs: true\n    // ... and so on for the remaining examples\n}"}
{"task_id": "java/21", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 2) {\n        return 1; // This should return 0 for the first Fibonacci number, but since we're starting with 0 and 1, it should be 1.\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\n\npublic class Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     */\n    public static List<Integer> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Object> set2 = new HashSet<>();\n\n        for (Object obj : l2) {\n            if (obj instanceof Integer) {\n                set2.add((Integer) obj);\n            }\n        }\n\n        set1.retainAll(set2); // retain only elements that are in both sets\n        List<Integer> commonElements = new ArrayList<>(set1);\n        Collections.sort(commonElements); // sort the list\n\n        return commonElements;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121)));\n        System.out.println(common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2)));\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "int maxPrime = -1;\n\n        // Divide by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1; // equivalent to n /= 2\n        }\n\n        // Now n must be odd, start loop from 3 and check for factors.\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number\n        // greater than 2\n        if (n > 2)\n            maxPrime = n;\n\n        return maxPrime;\n    }\n\n    public static void main(String args[]) {\n        System.out.println(\"Largest Prime Factor of 13195 is: \" + largestPrimeFactor(13195)); // Outputs: 29\n        System.out.println(\"Largest Prime Factor of 2048 is: \" + largestPrimeFactor(2048)); // Outputs: 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n    // Initialize the result variable to store the sum\n    int result = 0;\n\n    // Iterate through numbers from 1 to n and accumulate their sum in result\n    for (int i = 1; i <= n; i++) {\n        result += i;\n    }\n\n    // Return the final sum\n    return result;\n}"}
{"task_id": "java/25", "language": "java", "completion": "List<Object> derivative = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        return derivative;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3)));      // Output: [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "import java.util.HashMap;\n\nclass Fibfib {\n    private HashMap<Integer, Integer> cache = new HashMap<>();\n\n    public static int fibfib(int n) {\n        Fibfib fibfib = new Fibfib();\n        return fibfib.compute(n);\n    }\n\n    private int compute(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else if (!cache.containsKey(n)) {\n            cache.put(n, compute(n - 1) + compute(n - 2) + compute(n - 3));\n        }\n        return cache.get(n);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\npublic class Search {\n    public static int search(List<Integer> lst) {\n        // Create a HashMap to store frequencies of integers in the list\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n\n        // Initialize the maximum integer satisfying the condition to -1\n        int maxValidInt = -1;\n\n        // Iterate through the HashMap to find the greatest valid integer\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            if (entry.getKey() > 0 && entry.getValue() >= entry.getKey()) {\n                maxValidInt = Math.max(maxValidInt, entry.getKey());\n            }\n        }\n\n        // Return the greatest valid integer found, or -1 if none exist\n        return maxValidInt;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        System.out.println(search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "public class TriangleArea {\n    public static double triangleArea(int A, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (A + b > c && A + c > b && b + c > A) {\n            double s = (A + b + c) / 2.0;\n            return Math.round(Math.sqrt(s * (s - A) * (s - b) * (s - c)) * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5));  // Output: 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n     * Example:\n     * will_it_fly(Arrays.asList(1, 2), 5) \u279e False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly(Arrays.asList(3, 2, 3), 1) \u279e False\n     * # It's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly(Arrays.asList(3, 2, 3), 9) \u279e True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly(Arrays.asList(3), 5) \u279e True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (Integer i : q) {\n            sum += i;\n        }\n        if (q.equals(new ArrayList<>(Collections.reverse(new ArrayList<>(q))))) { // Check if the list is palindromic\n            return sum <= w; // Return true if the sum of elements is less than or equal to the weight, false otherwise\n        } else {\n            return false; // If it's not a palindromic list, return false\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(Arrays.asList(1, 2), 5)); // Output: false\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 1)); // Output: false\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 9)); // Output: true\n        System.out.println(willItFly(Arrays.asList(3), 5)); // Output: true\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.*;\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * >>> Is_multiply_prime(30)\n     * True\n     * 30 = 2 * 3 * 5\n     */\n    public static Boolean isMultiplyPrime(int A) {\n        List<Integer> primes = generatePrimesUpTo100();\n        int primeFactorsCount = 0;\n\n        for (Integer prime : primes) {\n            if (prime > A / prime) break; // Optimization: No need to check beyond the square root of A\n            while (A % prime == 0) {\n                primeFactorsCount++;\n                A /= prime;\n            }\n        }\n\n        return primeFactorsCount == 3;\n    }\n\n    private static List<Integer> generatePrimesUpTo100() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isNotPrime = new boolean[101];\n        for (int i = 2; i <= 100; ++i) {\n            if (!IsNotPrime[i]) {\n                primes.add(i);\n                for (int j = i * 2; j <= 100; j += i) {\n                    IsNotPrime[j] = true;\n                }\n            }\n        }\n        return primes;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // Output: True\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "import java.lang.*;\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15) returns \"db1111db\"\n     * decimal_to_binary(32) returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n        String binary = \"\";\n\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary = remainder + binary;\n            decimal = decimal / 2;\n        }\n\n        // Adding 'db' at the beginning and end of the binary string.\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));   // Output: db1111db\n        System.out.println(decimalToBinary(32));   // Output: db100000db\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class IsHappy {\n    /**\n     * Checks if a string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n     */\n    public static Boolean isHappy(String s) {\n        // Check if the length of the string is less than 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check every group of 3 consecutive letters\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n\n        // If all groups of 3 consecutive letters are distinct, the string is happy\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isHappy(\"a\")); // Output: false\n        System.out.println(isHappy(\"aa\")); // Output: false\n        System.out.println(isHappy(\"abcd\")); // Output: true\n        System.out.println(isHappy(\"Aabb\")); // Output: false\n        System.out.println(isHappy(\"adb\")); // Output: true\n        System.out.println(isHappy(\"xyy\")); // Output: false\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass NumericalLetterGrade {\n    public static ArrayList<String> numericalLetterGrade(List<Double> grades) {\n        ArrayList<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else If (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else If (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else If (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else If (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else If (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else If (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else If (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else If (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else If (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Double> sampleGrades = new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.5, 3.5));\n        ArrayList<String> result = numericalLetterGrade(sampleGrades);\n        System.out.println(result); // Output: [A+, B-, C-, C+, A-]\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "import java.util.*;\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string length is a prime number or False otherwise.\n     * Examples:\n     * primeLength('Hello') == true\n     * primeLength('abcdcba') == true\n     * primeLength('kittens') == true\n     * primeLength('orange') == false\n     */\n\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private static boolean IsPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases to verify the correctness of the function\n        System.out.println(\"Is 'Hello' prime length? \" + primeLength(\"Hello\")); // Expected: true\n        System.out.println(\"Is 'abcdcba' prime length? \" + primeLength(\"abcdcba\")); // Expected: true\n        System.out.println(\"Is 'kittens' prime length? \" + primeLength(\"kittens\")); // Expected: true\n        System.out.println(\"Is 'orange' prime length? \" + primeLength(\"orange\")); // Expected: false\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "// Calculate the sum of digits in a given integer\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10; // Add the last digit to the sum\n        n /= 10; // Remove the last digit from the number\n    }\n\n    // Convert the sum to binary and return it as a string\n    return Integer.toBinaryString(sum);\n   }\n}\n\n// Test the function with provided data points\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Solve.solve(1000)); // Output: \"1\"\n        System.out.println(Solve.solve(150));  // Output: \"110\"\n        System.out.println(Solve.solve(147));  // Output: \"1100\"\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "{\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n            for (int j = row.size() - 1; j >= 0; j--) {\n                if (row.get(j) == x) {\n                    result.add(new int[]{i, row.size() - 1 - j});\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n            public int compare(Object o1, Object o2) {\n                int[] coord1 = (int[]) o1;\n                int[] coord2 = (int[]) o2;\n                if (coord1[0] != coord2[0]) {\n                    return Integer.compare(coord1[0], coord2[0]);\n                } else {\n                    return Integer.compare(coord1[1], coord2[1]);\n                }\n            }\n        });\n        List<Object> finalResult = new ArrayList<>();\n        for (int[] coord : result) {\n            finalResult.add(Arrays.asList(coord[0], coord[1]));\n        }\n        return finalResult;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getRow(Arrays.asList(Arrays.asList(1, 2, 3, 4, 5, 6), Arrays.asList(1, 2, 3, 4, 1, 6), Arrays.asList(1, 2, 3, 4, 5, 1)), 1));\n        System.out.println(getRow(Arrays.asList(), 1));\n        System.out.println(getRow(Arrays.asList(Arrays.asList(), Arrays.asList(1), Arrays.asList(1, 2, 3)), 3));\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "public static Integer nextSmallest(List<Object> lst) {\n        // Remove all non-integer elements from the list\n        List<Integer> intLst = new ArrayList<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                intLst.add((Integer) obj);\n            }\n        }\n\n        // Sort the list in ascending order\n        Collections.sort(intLst);\n\n        // Return null if there are less than 2 elements in the list\n        if (intLst.size() < 2) {\n            return null;\n        }\n\n        // Return the second smallest element in the sorted list\n        return intLst.get(1);\n    }"}
{"task_id": "java/39", "language": "java", "completion": "int boredomCount = 0;\n\n    // Split the string into sentences using regex to match '.', '?', or '!'\n    String[] sentences = s.split(\"[.?!]\");\n\n    for (String sentence : sentences) {\n        // Trim leading and trailing whitespaces from each sentence\n        sentence = sentence.trim();\n\n        // Check if the first word of the sentence is \"I\"\n        if (!sentence.isEmpty() && sentence.startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n\n    return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(IsBored(\"Hello world\")); // Output: 0\n        System.out.println(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "public static int skjkasdkd(List<Integer> lst) {\n    int maxPrime = -1;\n\n    // Iterate through the list to find prime numbers\n    for (int num : lst) {\n        if (isPrime(num)) {\n            maxPrime = Math.max(maxPrime, num);\n        }\n    }\n\n    // Return the sum of digits of the largest prime number\n    return sumDigits(maxPrime);\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static int sumDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.Map;\n\npublic class CheckDictCase {\n    public static Boolean checkDictCase(Object dict) {\n        if (!(dict instanceof Map)) {\n            // If the input is not a dictionary, return false\n            return false;\n        }\n        \n        Map<?, ?> map = (Map<?, ?>) dict;\n        \n        if (map.isEmpty()) {\n            // If the dictionary is empty, return false\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean AllUpperCase = true;\n\n        for (Object key : map.keySet()) {\n            if (!(key instanceof String)) {\n                // If any key is not a string, return false\n                return false;\n            }\n            String strKey = (String) key;\n            AllLowerCase &= strKey.equals(strKey.toLowerCase());\n            AllUpperCase &= strKey.equals(strKey.toUpperCase());\n        }\n\n        // If all keys are either lower case or upper case, return true\n        return AllLowerCase || AllUpperCase;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.math.*;\n\nclass ClosestInteger {\n    public static int closestInteger(String value) {\n        BigDecimal num = new BigDecimal(value);\n        BigDecimal rounded = num.setScale(0, RoundingMode.HALF_UP);\n        // Check if it's equidistant from two integers and round away from zero\n        if (num.subtract(rounded).abs().compareTo(new BigDecimal(\"0.5\")) == 0) {\n            return rounded.signum() < 0 ? rounded.intValue() - 1 : rounded.intValue() + 1;\n        } else {\n            return rounded.intValue();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // Output: 10\n        System.out.println(closestInteger(\"15.3\")); // Output: 15\n        System.out.println(closestInteger(\"14.5\")); // Output: 15\n        System.out.println(closestInteger(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n\n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n\n            // Determine the next number of stones based on whether n is odd or even\n            if (n % 2 == 0) {\n                // If n is even, add 1 to get the next odd number\n                currentStones += 1;\n            } else {\n                // If n is odd, add 2 to get the next even number\n                currentStones += 2;\n            }\n        }\n\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> result = makeAPile(3);\n        System.out.println(result); // Output: [3, 5, 7]\n\n        // Additional test cases\n        System.out.println(makeAPile(4)); // Output: [4, 6, 8, 10]\n        System.out.println(makeAPile(1)); // Output: [1]\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass WordsString {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     */\n    public static List<Object> wordsString(String s) {\n        List<Object> result = new ArrayList<>();\n\n        // Split the string using comma or space as a delimiter\n        String[] words = s.split(\"[, ]+\");\n\n        for (String word : words) {\n            if (!word.isEmpty()) {  // ignore any empty strings resulting from consecutive delimiters\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, My name is John\"));  // prints: [Hi, my, name, is, John]\n        System.out.println(wordsString(\"One, two, three, four, five, six\"));  // prints: [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "if (x > y) { // If x is greater than y, there's no valid range\n            return -1;\n        } else if (y % 2 == 0) { // If y is even, return it\n            return y;\n        } else { // If y is odd, check if the number before it is within the range\n            int numBeforeY = y - 1;\n            if (numBeforeY >= x) {\n                return numBeforeY;\n            } else { // No even number in the range\n                return -1;\n            }\n        }"}
{"task_id": "java/46", "language": "java", "completion": "import java.lang.*;\n\nclass RoundedAvg {\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        \n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = Math.round((double) sum / (m - n + 1));\n        return \"0b\" + Integer.toBinaryString((int)average);\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) { // if i is even\n                result.add(factorial(i));\n            } else { // If i is odd\n                result.add(sumOfNumbers(i));\n            }\n        }\n\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int fact = 1;\n        for (int i = 2; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private static int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        // Initialize counters for even and odd palindromes\n        int evenCount = 0, oddCount = 0;\n\n        // Loop through numbers from 1 to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is a palindrome\n            if (isPalindrome(i)) {\n                // Increment even count for even numbers and odd count for odd numbers\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Return a list containing the counts of even and odd palindromes\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private static boolean isPalindrome(int number) {\n        int reversed = 0, original = number;\n\n        // Reverse the digits of the number\n        while (number > 0) {\n            int digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number /= 10;\n        }\n\n        // Check if the reversed number is equal to the original number\n        return reversed == original;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "public static Boolean moveOneBall(List<Object> arr) {\n    // Check if array is already sorted\n    if (isSorted(arr)) {\n        return true;\n    }\n\n    // Perform right shift operation and check if array is now sorted\n    while (!isSorted(arr)) {\n        shiftRight(arr);\n    }\n\n    // Return true if array is now sorted, false otherwise\n    return isSorted(arr);\n}\n\nprivate static Boolean isSorted(List<Object> arr) {\n    for (int i = 1; i < arr.size(); i++) {\n        if ((Integer) arr.get(i - 1) > (Integer) arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static void shiftRight(List<Object> arr) {\n    int lastElement = (Integer) arr.remove(arr.size() - 1);\n    arr.add(0, lastElement);\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Check if there are any odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                // Check if there are enough even numbers in lst2 to exchange with the odd numbers in lst1\n                long evenCount = lst2.stream().filter(n -> n % 2 == 0).count();\n                if (evenCount >= lst1.size()) {\n                    return \"YES\"; // It is possible to exchange elements between lst1 and lst2\n                } else {\n                    return \"NO\"; // It is not possible to exchange elements between lst1 and lst2\n                }\n            }\n        }\n        // If there are no odd numbers in lst1, it means that all numbers in lst1 are already even\n        return \"YES\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(exchange(lst1, lst2)); // Output: \"YES\"\n\n        lst1 = Arrays.asList(1, 2, 3, 4);\n        lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(exchange(lst1, lst2)); // Output: \"NO\"\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "public static List<Object> reverseDelete(String s, String c) {\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        if (!c.contains(\"\" + s.charAt(i))) {\n            result.append(s.charAt(i));\n        }\n    }\n    String reversedResult = result.reverse().toString();\n\n    return Arrays.asList(reversedResult, reversedResult.equals(new StringBuilder(reversedResult).reverse().toString()));\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int bucketCapacity) {\n        int maxDepth = 0;\n        for (List<Integer> well : grid) {\n            maxDepth += Collections.frequency(well, 1);\n        }\n        return (int) Math.ceil((double) maxDepth / bucketCapacity);\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * A function that returns a list of all words from string s that contain exactly \n     * n consonants, In order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: You may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public static List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\"\\\\s+\")) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private static int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2)); // []\n        System.out.println(selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\n\npublic class Maximum {\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(k);\n        for (int num : arr) {\n            if (maxHeap.size() < k) {\n                maxHeap.offer(num);\n            } else if (num > maxHeap.peek()) {\n                maxHeap.poll();\n                maxHeap.offer(num);\n            }\n        }\n\n        List<Object> result = new ArrayList<>(maxHeap);\n        Collections.sort(result, Collections.reverseOrder());  // sort in descending order\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (Math.abs(arr.get(i)) <= 99) {\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) return \"NO\"; // no intersection\n        else {\n            int intersectionLength = endMin - startMax + 1;\n            return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = Arrays.asList(-3, -1);\n        List<Integer> interval2 = Arrays.asList(-5, 5);\n        System.out.println(intersection(interval1, interval2)); // prints \"YES\"\n\n        interval1 = Arrays.asList(1, 2);\n        interval2 = Arrays.asList(2, 3);\n        System.out.println(intersection(interval1, interval2)); // prints \"NO\"\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    public static List<Double> tri(int n) {\n        List<Double> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        // base cases\n        double[] dp = new double[n + 2];\n        dp[1] = 3.0;\n        result.add(dp[1]);\n        if (n == 0) {\n            return result;\n        }\n        dp[2] = 1.5;\n        result.add(dp[2]);\n        for (int i = 3; i <= n + 1; i++) {\n            if (i % 2 == 0) {\n                dp[i] = i / 2.0;\n            } else {\n                dp[i] = dp[i - 1] + dp[i - 2] + dp[i + 1];\n            }\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public class Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"digits(1) == \" + digits(1));  // Expected output: 1\n        System.out.println(\"digits(4) == \" + digits(4));  // Expected output: 0\n        System.out.println(\"digits(235) == \" + digits(235)); // Expected output: 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "public static Boolean isNested(String str) {\n    Stack<Character> stack = new Stack<>();\n    boolean nestedFound = false;\n\n    for (char c : str.toCharArray()) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']' && !stack.isEmpty()) {\n            stack.pop();\n            // If there's an element left in the stack after popping, it means that at least one bracket is nested.\n            if (!stack.isEmpty()) {\n                nestedFound = true;\n            }\n        } else {\n            // Ignore other characters\n        }\n    }\n\n    return nestedFound && stack.isEmpty(); // Ensure all brackets are popped out before returning true\n}"}
{"task_id": "java/60", "language": "java", "completion": "int result = 0;\n        for (Number num : lst) {\n            double roundedNum = Math.ceil(num.doubleValue());\n            result += Math.pow(roundedNum, 2);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Number> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(list1));  // Output: 14\n\n        List<Number> list2 = Arrays.asList(1, 4, 9);\n        System.out.println(sumSquares(list2));  // Output: 98\n\n        List<Number> list3 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(sumSquares(list3));  // Output: 84\n\n        List<Number> list4 = Arrays.asList(1.4, 4.2, 0);\n        System.out.println(sumSquares(list4));  // Output: 29\n\n        List<Number> list5 = Arrays.asList(-2.4, 1, 1);\n        System.out.println(sumSquares(list5));  // Output: 6\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public class CheckIfLastCharIsALetter {\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty() || !Character.isLetter(txt.charAt(txt.length() - 1))) {\n            return false;\n        }\n\n        int lastIndex = txt.lastIndexOf(\" \");\n        if (lastIndex < 0) {\n            return true;\n        } else {\n            return !Character.isLetter(txt.charAt(lastIndex + 1));\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    public static int canArrange(List<Integer> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(canArrange(new ArrayList<Integer>(Arrays.asList(1,2,4,3,5))));  // prints 3\n        System.out.println(canArrange(new ArrayList<Integer>(Arrays.asList(1,2,3))));  // prints -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.OptionalInt;\n\nclass LargestSmallestIntegers {\n    public static List<Object> largestSmallestIntegers(List<Object> lst) {\n        OptionalInt maxNegative = lst.stream()\n                .filter(n -> n instanceof Integer && (Integer) n < 0)\n                .mapToInt(n -> (Integer) n)\n                .max();\n\n        OptionalInt minPositive = lst.stream()\n                .filter(n -> n instanceof Integer && (Integer) n > 0)\n                .mapToInt(n -> (Integer) n)\n                .min();\n\n        List<Object> result = new ArrayList<>();\n        result.add(maxNegative.orElse(null));\n        result.add(minPositive.orElse(null));\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> example1 = largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7));\n        System.out.println(\"Example 1: \" + example1); // Output: [null, 1]\n\n        List<Object> example2 = largestSmallestIntegers(new ArrayList<>());\n        System.out.println(\"Example 2: \" + example2); // Output: [null, null]\n\n        List<Object> example3 = largestSmallestIntegers(Arrays.asList(0));\n        System.out.println(\"Example 3: \" + example3); // Output: [null, null]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "public class SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * for example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     */\n    public static long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    /** Helper method to calculate the factorial of a given number */\n    private static long factorial(int num) {\n        long fact = 1;\n        for (int i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    // Main method for testing the specialFactorial function\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); // Output: 288\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.util.stream.*;\n\npublic class WordsInSentence {\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String wordsInSentence(String sentence) {\n        return Arrays.stream(sentence.split(\" \"))\n                     .filter(word -> IsPrime(word.length()))\n                     .collect(Collectors.joining(\" \"));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n    // Split the input strings by '/' to extract numerators and denominators\n    String[] partsX = x.split(\"/\");\n    String[] partsN = n.split(\"/\");\n\n    // Parse numerators and denominators as integers\n    int numX = Integer.parseInt(partsX[0]);\n    int denomX = Integer.parseInt(partsX[1]);\n    int numN = Integer.parseInt(partsN[0]);\n    int denomN = Integer.parseInt(partsN[1]);\n\n    // Check if the product of numerators is divisible by the denominator of x\n    return (numX * numN) % denomX == 0;\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\n\nclass OrderByPoints {\n    public static List<Object> orderByPoints(List<Object> nums) {\n        if (nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Pair<Integer, Integer>> sumWithIndex = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = (int) nums.get(i);\n            int sumOfDigits = getSumOfDigits(num);\n            sumWithIndex.add(new Pair<>(sumOfDigits, i));\n        }\n\n        Collections.sort(sumWithIndex, Comparator.comparingInt(Pair::getKey));\n\n        List<Object> result = new ArrayList<>();\n        for (Pair<Integer, Integer> pair : sumWithIndex) {\n            result.add(nums.get(pair.getValue()));\n        }\n\n        return result;\n    }\n\n    private static int getSumOfDigits(int number) {\n        int sum = 0;\n        while (number != 0) {\n            sum += Math.abs(number % 10);\n            number /= 10;\n        }\n        return sum;\n    }\n\n    // Helper class to store pairs of integers\n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.*;\n\nclass Specialfilter {\n    public static int specialFilter(List<Object> nums) {\n        int count = 0;\n        for (Object obj : nums) {\n            if (!(obj instanceof Integer)) continue; // Ensure we're only dealing with integers\n            Integer num = (Integer) obj;\n            if (num > 10 && isFirstAndLastDigitOdd(Math.abs(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean IsFirstAndLastDigitOdd(int num) {\n        String numStr = Integer.toString(num);\n        char firstDigit = numStr.charAt(0);\n        char LastDigit = numStr.charAt(numStr.length() - 1);\n        return (FirstDigit % 2 != 0) && (LastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            A[i - 1] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); // Output: 1\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    private static final Map<String, Integer> planets = new HashMap<>();\n    \n    static {\n        planets.put(\"Mercury\", 1);\n        planets.put(\"Venus\", 2);\n        planets.put(\"Earth\", 3);\n        planets.put(\"Mars\", 4);\n        planets.put(\"Jupiter\", 5);\n        planets.put(\"Saturn\", 6);\n        planets.put(\"Uranus\", 7);\n        planets.put(\"Neptune\", 8);\n    }\n\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (!planets.containsKey(planet1) || !planets.containsKey(planet2)) {\n            return result;  // return an empty list if either planet name is invalid\n        }\n\n        int start = Math.min(planets.get(planet1), planets.get(planet2));\n        int end = Math.max(planets.get(planet1), planets.get(planet2));\n\n        for (Map.Entry<String, Integer> entry : planets.entrySet()) {\n            if (start < entry.getValue() && entry.getValue() < end) {\n                result.add(entry.getKey());\n            }\n        }\n\n        Collections.sort(result);  // sort the list alphabetically\n        return result;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public class XOrY {\n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12)); // Output: 34\n        System.out.println(xOrY(15, 8, 5));  // Output: 5\n    }\n\n    public static int xOrY(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer && ((Integer) obj) > 0 && ((Integer) obj) % 2 != 0) {\n                sum += Math.pow(((Integer) obj), 2);\n            }\n        }\n        return (int) sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(doubleTheDifference(Arrays.asList(0))); // Output: 0\n        System.out.println(doubleTheDifference(new ArrayList<>())); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.*;\n\nclass StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExt = \"\";\n\n        for (String ext : extensions) {\n            int capCount = 0, smCount = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExt = ext;\n            } else if (strength == maxStrength && extensions.indexOf(ext) < extensions.indexOf(strongestExt)) {\n                strongestExt = ext;\n            }\n        }\n\n        return className + \".\" + strongestExt;\n    }\n\n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions)); // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "class CycpatternCheck {\n    public static boolean cycpatternCheck(String A, String B) {\n        // Concatenate the first string with itself to account for rotations\n        String AB = A + A;\n        \n        // Check if Second string is a substring of First concatenated string\n        return AB.contains(B);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "public class IntToMiniRoman {\n\n    // Main function to test our method\n    public static void main(String[] args){\n        System.out.println(intToMiniRoman(19)); // Expected output: xix\n        System.out.println(intToMiniRoman(152)); // Expected output: clii\n        System.out.println(intToMiniRoman(426)); // Expected output: cdxxvi\n    }\n\n    public static String intToMiniRoman(int number) {\n\n        String[] romanNumerals = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        String[] thousands = {\"\", \"m\", \"mm\", \"mmm\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\n        return thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number % 10];\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "public static Boolean rightAngleTriangle(int A, int b, int c) {\n    // Find the longest side of the triangle\n    int max = Math.max(Math.max(A, b), c);\n    \n    // Calculate the sum of squares of the other two sides\n    int sumOfSquares = (A * A + b * b) + (A * A + c * c) + (b * b + c * c) - (max * max);\n    \n    // Check if the square of the longest side equals the sum of squares of the other two sides\n    return (max * max == sumOfSquares);\n}"}
{"task_id": "java/77", "language": "java", "completion": "public class Main {\n  \n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // Outputs: 4321\n        System.out.println(solve(\"ab\"));   // Outputs: AB\n        System.out.println(solve(\"#a@C\")); // Outputs: #A@c\n    }\n\n    public static String solve(String s) {\n        boolean hasLetters = false;\n        char[] chars = s.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                break;\n            }\n        }\n\n        StringBuilder result = new StringBuilder();\n        if (!hasLetters) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            for (char c : chars) {\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        }\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n    // Method to convert a string to its MD5 hash equivalent\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null; // Return null if input is an empty string\n        }\n\n        try {\n            // Get the MessageDigest instance for MD5\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n            // Convert the input string to a byte array\n            byte[] messageDigest = md.digest(text.getBytes());\n\n            // Create a BigInteger from the digest bytes\n            BigInteger no = new BigInteger(1, messageDigest);\n\n            // Convert the BigInteger to a hexadecimal string\n            String hashtext = no.toString(16);\n\n            // Pad with zeros if necessary to make it 32 characters long\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n\n            return hashtext; // Return the hexadecimal hash string\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Outputs: 3e25960a79dbc69b674cd4ec67a72c62\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "List<Integer> evenDigits = new ArrayList<>();\n        if (A > b) {\n            int temp = A;\n            A = b;\n            b = temp;\n        }\n\n        for (int i = Math.max(A, 2); i <= Math.min(b, 8); i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n\n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // []\n    }\n}"}

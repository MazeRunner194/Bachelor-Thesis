{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # starting balance\n    for op in operations:\n        balance += op  # update balance with each operation\n        if balance < 0:  # check if balance falls below zero\n            return True  # return True as soon as balance falls below zero\n    return False  # return False if balance never falls below zero\n\nprint(below_zero([1, 2, 3]))  # Output: False\nprint(below_zero([1, 2, -4, 5]))  # Output: True"}
{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0  # start with a balance of zero\n    for operation in operations:\n        balance += operation  # add each operation to the balance\n        if balance < 0:  # if balance goes negative...\n            return True  # ...then return True immediately.\n    return False  # If we reach here, then the balance never went below zero."}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:  # Check if list is empty\n        return (0, 1)\n\n    total_sum = sum(numbers)  # Calculate the sum of all integers in the list\n    total_product = 1  # Initialize product as 1 (multiplicative identity)\n    for number in numbers:\n        total_product *= number  # Multiply current product with each integer\n\n    return total_sum, total_product\n\n# Test cases\nprint(sum_product([]))  # Expected output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Expected output: (10, 24)"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n    for num in numbers:\n        sum_value += num\n        prod_value *= num\n    return (sum_value, prod_value)\n\n# Test cases\nprint(sum_product([]))  # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(A: str, B: str) -> str:\n    # Convert inputs to binary\n    a = int(A, 2)  # Convert A from binary to integer\n    B = int(B, 2)  # Convert B from binary to integer\n\n    # Perform XOR operation on the two integers\n    xor_result = A ^ B  # Perform XOR operation\n\n    # Convert the result back to binary and return it\n    return bin(xor_result)[2:]  # [2:] is used to remove the '0b' prefix of the binary string"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\ndef string_xor(A: str, B: str) -> str:\n    result = ''\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\nprint(string_xor('010', '110'))  # Output: 100"}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the list is empty\n        return None\n\n    max_length = max(len(s) for s in strings)  # Find the length of the longest string\n    longest_string = next((s for s in strings if len(s) == max_length), None)  # Get the first longest string\n\n    return longest_string"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len, default=None)"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(A: int, B: int) -> int:\n    if A == 0:\n        return B\n    else:\n        return greatest_common_divisor(B % A, A)"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(A: int, b: int) -> int:\n    if A == 0 or b == 0:  # Base case: if either number is zero, return the non-zero one.\n        return max(A, b)\n    while b != 0:  # Continue until `b` becomes zero.\n        remainder = A % b  # Calculate the remainder.\n        A = b  # Set `A` to be equal to `B`.\n        b = remainder  # Set `B` to be equal to the remainder.\n    return A  # Return `A`, which is now the GCD of `A` and `b`."}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Map each numeral string to its corresponding integer value\n    numerals_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into a list of numeral strings\n    numerals = numbers.split()\n\n    # Convert each numeral string to its corresponding integer value and sort the numbers\n    sorted_numbers = sorted(map(lambda x: numerals_map[x], numerals))\n\n    # Map each sorted integer value back to its corresponding numeral string\n    numerals_map_reverse = {v: k for k, v in numerals_map.items()}\n    sorted_numerals = [numerals_map_reverse[num] for num in sorted_numbers]\n\n    # Return the sorted list of numeral strings as a space-delimited string\n    return ' '.join(sorted_numerals)"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    number_dict = {\n        \"zero\": \"0\",\n        \"one\": \"1\",\n        \"two\": \"2\",\n        \"three\": \"3\",\n        \"four\": \"4\",\n        \"five\": \"5\",\n        \"six\": \"6\",\n        \"seven\": \"7\",\n        \"eight\": \"8\",\n        \"nine\": \"9\",\n    }\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_dict[x])\n\n    return ' '.join(sorted_numbers)"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    range_of_numbers = max_number - min_number\n    rescaled_numbers = [(x - min_number) / range_of_numbers for x in numbers]\n    return rescaled_numbers\n\n# Test the function with your example\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    range_of_values = max_number - min_number\n    return [(x-min_number)/range_of_values for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" for a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def Is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function with given test cases\nprint(Is_prime(6))  # Outputs: False\nprint(Is_prime(101)) # Outputs: True\nprint(Is_prime(11)) # Outputs: True\nprint(Is_prime(13441)) # Outputs: True\nprint(Is_prime(61)) # Outputs: True\nprint(Is_prime(4))  # Outputs: False\nprint(Is_prime(1))  # Outputs: False"}
{"task_id": "python/9", "language": "python", "completion": "This Python function `Is_prime(n)` checks if a given number `n` is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\nHere's how the function works:\n\n1. First, it checks if `n` is less than or equal to 1. If so, it returns False since prime numbers are defined as natural numbers greater than 1.\n2. Then, it iterates from 2 up to the square root of `n`. For each number `i`, it checks if `n` can be divided evenly by `i` (i.e., `n % i == 0`). If `n` is divisible by any number in this range, then it's not a prime number, and the function returns False.\n3. If the loop completes without finding any divisors of `n`, then `n` is prime and the function returns True.\n\nHere are some test cases to verify its correctness:\n\n- `Is_prime(6)` should return `False`, because 6 is not a prime number (it can be divided by 1, 2, 3, and 6).\n- `Is_prime(101)` should return `True`, because 101 is a prime number (only divisible by 1 and 101).\n- `Is_prime(11)` should also return `True`, as it's another prime number.\n- `Is_prime(13441)` should return `True`, again because 13441 is prime.\n- For `Is_prime(61)`, which is a common example of a prime number, the function should return `True`.\n- `Is_prime(4)` and `Is_prime(1)` should both return `False`, as they are not prime numbers (4 has 2 divisors other than 1 and itself, while 1 is not considered a prime number due to its definition)."}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num):\n    \"\"\"Check if num is a Prime Number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_fibonacci(n):\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    a, B = 0, 1\n    for _ in range(n):\n        A, B = B, A + B\n    return A\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    i = 0\n    while True:\n        fib_num = generate_fibonacci(i)\n        if Is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Test Cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/11", "language": "python", "completion": "print(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "python/12", "language": "python", "completion": "This function is designed to check whether there are three distinct elements in a list that sum up to zero. It takes a list of integers as input and returns True if such a triplet exists, otherwise False.\n\nHere's how it works:\n\n1. First, it checks if the length of the input list is less than 3. If it is, there cannot be three distinct elements in the list that sum up to zero, so it returns False immediately.\n\n2. Next, it initializes a variable `count` to 0. This will keep track of how many triplets have been found.\n\n3. It then iterates over each element in the input list using a for loop. For each element, it uses another nested for loop to iterate over all elements that come after it in the list (since we want distinct elements), starting from the next index of the current element:\n\n   - For each pair of elements, it checks if their sum equals zero.\n   \n     - If they do equal zero, it increments `count` by 1, indicating that a triplet has been found, and then breaks out of the inner loop to move on to the next element in the outer loop.\n\n4. After checking all pairs of elements in the list, if `count` is greater than or equal to 1, it means there were at least one pair of distinct elements that sum up to zero, so it returns True. If not, it returns False."}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(lst):\n    seen = set()\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "pairs_sum_to_zero([1, 3, 5, 0])\n    x = 1, i = 0  # First iteration.\n        l[i+1] = 3, l[i+2] = 5, l[i+3] = 0\n    x = 1, i = 1  # Second iteration.\n        l[i+1] = 3, l[i+2] = 5, l[i+3] = 0\n    x = 1, i = 2  # Third iteration.\n        l[i+1] = 3, l[i+2] = 5, l[i+3] = 0\n    x = 1, i = 3  # Fourth iteration. No pair sums to zero.\n\nResult: False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n\n    # Initialize the first four values of the sequence\n    fib_seq = [0, 0, 2, 0]\n\n    # Calculate the remaining elements up to n-1\n    for i in range(4, n + 1):\n        next_value = sum(fib_seq[-4:])  # Sum the last four values in the sequence\n        fib_seq.append(next_value)\n\n    return fib_seq[n]"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n\n    a, B, C, D = 0, 0, 2, 0\n\n    for _ in range(n-4):\n        A, B, C, D = B, C, D, A + B + C + D\n\n    return D"}
{"task_id": "python/15", "language": "python", "completion": "def median(l):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    sorted_list = sorted(l)  # Sorting the list in ascending order\n    if n % 2 == 0:  # If the number of elements is even\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2.0\n    else:  # If the number of elements is odd\n        return sorted_list[n//2]"}
{"task_id": "python/15", "language": "python", "completion": "def median(l):\n    n = len(l)\n    if n == 0:\n        return None  # If list is empty, return None\n\n    sorted_list = sorted(l)\n    if n % 2 != 0:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[(n - 1) // 2] + sorted_list[n // 2]) / 2.0"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "python/16", "language": "python", "completion": "def Is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> Is_palindrome('')\n    True\n    >>> Is_palindrome('aba')\n    True\n    >>> Is_palindrome('aaaaa')\n    True\n    >>> Is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "The function `remove_vowels` is designed to remove all vowels from the input string. It follows the guidelines provided, including examples of its behavior for different inputs. Here is a detailed explanation:\n\n1. The function takes a single parameter `text`, which can be an empty string, a string with multiple lines, or a simple string without any special characters.\n2. It returns a new string that consists of all the consonants from the original string, excluding 'a', 'e', 'i', 'o', and 'u'.\n3. The function is case-sensitive, meaning it treats uppercase vowels ('A', 'E', 'I', 'O', 'U') as different from lowercase ones ('a', 'e', 'i', 'o', 'u').\n4. When the input string is empty or contains only vowels (both lowercase and uppercase), the function will return an empty string, demonstrating its behavior with cases like `''` and `'aaaaa'`.\n5. For cases like `'aaBAA'`, where the first two characters are vowels but the third is a consonant, it correctly returns only 'B', showing that it removes all vowels from the input string, not just the beginning or end.\n6. The function does not modify any non-alphabetical characters in the string; for example, `'zbcd'` remains unchanged as there are no vowels to remove.\n\nIn summary, the function `remove_vowels` accurately removes all vowels from a given string according to the specified requirements and demonstrates its functionality through various test cases."}
{"task_id": "python/17", "language": "python", "completion": ">>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:  # This defines the function with two parameters - a list 'l' and an integer 't'. It also specifies that this function will return a boolean value.\n    for num in l:  # start a for loop to iterate over each number 'num' in the list 'l'\n        if num >= t:  # check if the current number is greater than or equal to the threshold 't'.\n            return False  # if it is, return False. This means we found at least one number that is not below the threshold, so overall result should be False. \n    return True  # If the for loop completes without finding any number that is not below the threshold, return True, indicating all numbers are below the threshold.\n\n# Now let's test this function with your provided examples:\n\nprint(below_threshold([1, 2, 4, 10], 100))  # Should print: True\nprint(below_threshold([1, 20, 4, 10], 5))  # Should print: False"}
{"task_id": "python/18", "language": "python", "completion": "The function `below_threshold` takes in a list `l` and an integer `t`. It checks if all the numbers in the list are less than the threshold value `t`.\n\nHere's how it works:\n\n1. It initializes an empty list to store any number that does not meet the condition.\n2. Then, for every element `n` in the list `l`, it checks whether `n` is less than `t`.\n3. If `n` is less than `t`, then it appends `n` to the new list.\n4. Finally, it checks if the new list is empty or not. An empty list means that all numbers in the original list were below the threshold, so it returns True. Otherwise, it returns False.\n\nIn the example:\n\n- For the first input ([1, 2, 4, 10], 100), since all elements are less than 100, it will return True.\n- for the second input ([1, 20, 4, 10], 5), since not all elements are below 5, it will return False.\n\nSo, `below_threshold` function works by checking each number in the list against the threshold and only returns True if all numbers are indeed below the threshold."}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    return x + y\n\n# Testing the function with some examples\nprint(add(2, 3))  # Expected output: 5\nprint(add(5, 7))  # Expected output: 12"}
{"task_id": "python/19", "language": "python", "completion": ">>> add(2, 3)\n5\n>>> add(5, 7)\n12"}
{"task_id": "python/20", "language": "python", "completion": "print(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # Output: True\nprint(same_chars('abcd', 'dddddddabc'))             # Output: True\nprint(same_chars('eabcd', 'dddddddabc'))             # Output: False"}
{"task_id": "python/20", "language": "python", "completion": "The function `same_chars` takes two strings as input and checks if they contain the same characters. This is done by sorting the characters in each string, comparing them, and returning True if they are identical.\n\nFor instance:\n\n- In the first example, both strings have 'a' (lowercase) as their first character and 'c', 'd', 'e', 'z' as their subsequent letters which are identical in both strings. Therefore, it returns True.\n  \n- In the second example, the characters in the strings are exactly the same except for the last letter. Hence, it returns True.\n\n- In the third and fourth examples, the first word has an additional 'd' at the end, which does not exist in the second word. Therefore, it returns False.\n\n- In the fifth example, there is one more character 'e' in the first string compared to the second string, so it returns False.\n\n- In the last example, the words have different sets of characters, so they return False."}
{"task_id": "python/21", "language": "python", "completion": "def fib(n):\n    if n <= 1:  # base cases: when n is either 0 or 1, return n itself\n        return n\n    else:\n        return fib(n-1) + fib(n-2)  # recursive case: sum of the previous two Fibonacci numbers"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    a, B = 1, 1\n    for _ in range(2, n + 1):\n        A, B = B, A + B\n    return A\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets and perform intersection\n    common_elements = set(l1).intersection(set(l2))\n    \n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n\n# Test the function with provided examples\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))                             # Output: [2, 3]"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int):\n    # Initialize a list to hold primes\n    primes = []\n\n    # Remove 2 from n if it's even\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n\n    # If n is odd, start checking from 3\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            primes.append(i)\n            n //= i\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        primes.append(n)\n\n    # Return the largest prime factor\n    return max(primes) if primes else None  # return None if there are no primes found"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is NOT a prime number.\"\"\"\n    # Initialize the maximum prime factor\n    max_prime = -1\n\n    # Divide n by 2 to handle even numbers first\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2  # Use floor division for integer result\n\n    # Now we only have to deal with odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n\n    # If n becomes a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n# Test cases to check the function\nassert largest_prime_factor(13195) == 29, \"Test case for 13195 failed\"\nassert largest_prime_factor(2048) == 2, \"Test case for 2048 failed\""}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "python/24", "language": "python", "completion": "print(sum_to_n(30))  # Outputs: 465\nprint(sum_to_n(100)) # Outputs: 5050"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    return [coeff * index for index, coeff in enumerate(xs) if index != 0]"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs) if i > 0]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    # Base case initialization\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize dp array to store fibfib values of numbers from 0 to n\n    dp = [0] * (n + 1)\n\n    # Set initial base cases\n    dp[0], dp[1], dp[2] = 0, 0, 1\n\n    # Compute the sequence\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\n    return dp[-1]"}
{"task_id": "python/27", "language": "python", "completion": "def test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"rhythm\") == 0\n    assert vowels_count(\"AEIOUY\") == 6\n    assert vowels_count(\"quickly\") == 2\n    assert vowels_count(\"bcdfg\") == 0\n    assert vowels_count(\"yogurt\") == 1\n    assert vowels_count(\"syzygy\") == 1\n\ntest_vowels_count()"}
{"task_id": "python/27", "language": "python", "completion": "def test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"quick\") == 1\n    assert vowels_count(\"rhythm\") == 0\n    assert vowels_count(\"SYZYGY\") == 1\n    assert vowels_count(\"yogurt\") == 2\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"AEIOUY\") == 6\n    assert vowels_count(\"xyz\") == 0\n    assert vowels_count(\"bcdfg\") == 0\n\ntest_vowels_count()"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    for num in sorted(freq_dict, reverse=True):\n        if freq_dict[num] >= num:\n            return num\n    return -1"}
{"task_id": "python/28", "language": "python", "completion": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n\n    for i in range(max(lst), 0, -1):\n        if counter[i] >= i:\n            return i\n\n    return -1"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area, 2)"}
{"task_id": "python/29", "language": "python", "completion": "# Check if sides form a valid triangle\nif A + b > c and A + c > b and b + c > A:\n    # Calculate base and height using Pythagoras theorem\n    height = (b**2 + c**2 - A**2)**0.5\n    # Calculate area of the triangle\n    area = 0.5 * A * height\n    # Return area rounded to two decimal places\n    return round(area, 2)\nelse:\n    # Sides do not form a valid triangle, return -1\n    return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if q is palindrome\n    if q != q[::-1]:\n        return False\n    # Calculate sum of elements in q\n    total = sum(q)\n    # Check if total is less than or equal to max weight\n    return total <= w"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    # Calculate the sum of elements in the list\n    total = sum(q)\n    # Check if the total sum is less than or equal to maximum possible weight\n    if total <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, 101) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Test the function\nprint(is_multiply_prime(30))  # Outputs: True"}
{"task_id": "python/31", "language": "python", "completion": "import sympy\n\ndef Is_multiply_prime(A):\n    if A < 2 or A >= 100:\n        return False\n    primes = [i for i in range(2, A) if sympy.isprime(i)]\n    for p1 in primes:\n        for p2 in primes:\n            for p3 in primes:\n                if p1*p2*p3 == A:\n                    return True\n    return False\n\n# Test the function\nprint(Is_multiply_prime(30))  # Outputs: True"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert decimal to binary, remove '0b' prefix\n    return \"db\" + binary + \"db\"  # add 'db' at start and end of the string\n\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2]:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "python/35", "language": "python", "completion": "def isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\"\"\"\n    length = len(string)\n    return IsPrime(length)"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    sum_of_digits = 0\n\n    # Calculate the sum of digits\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n\n    # Convert the sum to binary and return it\n    return bin(sum_of_digits)[2:]"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    result = \"\"\n    sum_of_digits = 0\n\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n\n    binary_output = bin(sum_of_digits)[2:]\n    return binary_output"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x], key = lambda y: (-y[0], -y[1]))\n\n# testing the function with examples\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # [(2, 2)]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda t: (t[0], -t[1]))"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:  # If there are less than two elements in list, return None.\n        return None\n    sorted_list = sorted(set(lst))  # Remove duplicates and sort the list\n    if len(sorted_list) < 2:  # If there are less than two unique elements, return None.\n        return None\n    else:\n        return sorted_list[1]  # Return the second element of the sorted list\n\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))               # Output: None\nprint(next_smallest([1, 1]))           # Output: None"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n\n    min_val = min(lst[0], lst[1])\n    next_min_val = float('inf')\n\n    for num in lst[2:]:\n        if min_val < num < next_min_val:\n            next_min_val = num\n        elif num == min_val:\n            min_val = lst[1] if lst[0] == num else num\n\n    return next_min_val if next_min_val != float('inf') else None"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split('[.?!] ', S)\n    boredoms = 0\n\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredoms += 1\n\n    return boredoms"}
{"task_id": "python/39", "language": "python", "completion": "def Is_bored(S):\n    # Split the string into sentences using regex to match '.', '?' or '!' \n    sentences = re.split('[.?!] ', S)\n\n    # Initialize boredom count to 0\n    boredoms = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if sentence starts with \"I\" (case-insensitive)\n        if sentence.startswith(\"I \", ignorecase=True):\n            boredoms += 1\n\n    return boredoms"}
{"task_id": "python/40", "language": "python", "completion": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\ndef skjkasdkd(lst):\n    largest_prime = None\n    for num in lst:\n        if IsPrime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "python/40", "language": "python", "completion": "def isPrime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all((n % i) for i in range(3, int(n**0.5) + 1, 2))\n\ndef skjkasdkd(lst):\n    max_prime = max([num for num in lst if IsPrime(num)])\n    return sum(int(digit) for digit in str(max_prime))\n\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # 7"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # if the dictionary is empty, return False\n        return False\n\n    lower = upper = None  # Initialize two variables for tracking cases\n\n    for key in dictionary.keys():\n        if not isinstance(key, str):  # Check if the key is a string\n            return False  # Return False if the key is not a string\n\n        if lower is None and upper is None:  # If this is the first iteration\n            lower = key.islower()  # Set the case for the first key\n            upper = key.isupper()  # Set the case for the first key\n        else:  # If not the first iteration\n            if lower and not key.islower():  # Check if all keys are in lower case\n                return False  # Return False if a key is not in lower case\n            elif upper and not key.isupper():  # Check if all keys are in upper case\n                return False  # Return False if a key is not in upper case\n\n    return True  # If all keys pass the checks, return True"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(d):\n    if not d:  # if dictionary is empty, return False\n        return False\n\n    lower = upper = False  # Initialize flags for lower and upper case keys\n\n    for key in d.keys():\n        if not isinstance(key, str):  # If key is not a string, return False\n            return False\n\n        if key.islower():  # If all letters are lower case, set the flag to True\n            lower = True\n        elif key.isupper():  # If all letters are upper case, set the flag to True\n            upper = True\n        else:  # If there's a mix of lower and upper case letters, return False\n            return False\n\n    return lower or upper  # Return True if either flag is True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    # Convert the input string to a float\n    num = float(value)\n\n    # Check if the number is positive or negative for rounding away from zero\n    if num > 0:\n        return int(num + 0.5)  # Round up for positive numbers\n    else:\n        return int(num - 0.5)  # Round down for negative numbers\n\n# Test cases\nprint(closest_integer(\"10\"))  # Outputs: 10\nprint(closest_integer(\"15.3\"))  # Outputs: 15\nprint(closest_integer(\"14.5\"))  # Outputs: 15\nprint(closest_integer(\"-14.5\"))  # Outputs: -15"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    if num > 0 and num - int(num) == 0.5:\n        return int(num) + 1\n    elif num < 0 and num - int(num) == -0.5:\n        return int(num) - 1\n    else:\n        return round(num)\n\n# test cases:\nprint(closest_integer(\"10\"))   # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\")) # Output: -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    stones = [n]  # First level has n stones\n    current = n + 1 if n % 2 == 0 else n + 2  # Start with the next odd/even number based on n's parity\n\n    for i in range(1, n):\n        stones.append(current)\n        if current % 2 == 0:  # If it's an even number, add 1 to get the next odd\n            current += 1\n        else:  # If it's an odd number, add 1 to get the next even\n            current += 2\n\n    return stones"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if pile[-1] % 2 == 0:  # If the last element is even\n            pile.append(pile[-1] + 2)\n        else:  # If the last element is odd\n            pile.append(pile[-1] + 2)\n    return pile"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    import re\n    # Use regular expression to split the string by comma or space and ignore empty strings\n    words = re.split('[\\s,]+', s)\n    return [word for word in words if word]  # Filter out empty strings\n\nprint(words_string(\"Hi, My name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Split the string by commas or spaces and remove empty strings\n    words = [word for word in s.replace(',', ' ').split() if word]\n    return words\n\n# Test cases\nprint(words_string(\"Hi, My name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:  # check if x is greater than y\n        return -1  # return -1 if there are no numbers in range [x,y]\n\n    for num in range(y, x-1, -1):  # iterate through the range from y to x (inclusive)\n        if num % 2 == 0:  # check if the number is even\n            return num  # return the first even number found\n\n    return -1  # return -1 if no even numbers are found in range [x,y]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:  # if x is greater than y, return -1\n        return -1\n    else:\n        for num in range(y, x-1, -1):  # Start from y and decrement until x\n            if num % 2 == 0:  # If the number is even\n                return num  # Return the first even number found\n        return -1  # If no even numbers are found in the range, return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((sum(range(n, m+1)))/(m-n+1))\n        return bin(average)\n\nprint(rounded_avg(1, 5)) # Outputs \"0b11\"\nprint(rounded_avg(7, 5)) # Outputs -1\nprint(rounded_avg(10, 20)) # Outputs \"0b1111\"\nprint(rounded_avg(20, 33)) # Outputs \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n\n    # Loop through numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        if i % 2 == 0:  # Check if the number is even\n            factorial = 1  # Initialize factorial to 1\n            # Calculate factorial of i\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)  # Append the factorial to the result list\n        else:  # If the number is odd\n            sum_of_numbers = sum(range(1, i+1))  # Calculate sum of numbers from 1 to i using built-in function sum()\n            result.append(sum_of_numbers)  # Append the sum to the result list\n\n    return result"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # if index is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # If index is odd\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # check if number is a palindrome\n            if i % 2 == 0:  # check if number is even\n                even += 1\n            else:  # if it's odd\n                odd += 1\n\n    return (even, odd)"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    palindromes = [str(i) for i in range(1, n+1) if str(i) == str(i)[::-1]]  # generate palindromes\n    even_count = sum([int(p) % 2 == 0 for p in palindromes])  # count even numbers\n    odd_count = len(palindromes) - even_count  # count odd numbers\n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # if the list is empty, return True\n        return True\n\n    # If there are at least two elements and one of them is less than the other, we can't sort the array in non-decreasing order using right shifts\n    if len(arr) >= 2 and arr[0] < arr[1]:\n        return False\n\n    # Count how many times the sorted version of the list must be shifted to get the original list.\n    shifts = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1) % len(arr)]:  # Compare current element with next element considering the array as circular\n            shifts += 1\n\n    # If we need more than one shift, it is impossible to sort the array using right shifts only.\n    return shifts < 2\n\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Returns True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Returns False"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # empty array case\n        return True\n\n    # get the sorted version of 'arr'\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        # check if 'arr' is a rotation of 'sorted_arr'\n        if arr == sorted_arr[i:] + sorted_arr[:i]:\n            return True\n\n    return False  # no rotation of 'arr' is a sorted version of 'arr'"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count = sum(1 for x in lst2 If x % 2 == 0)\n    for num in lst1:\n        if num % 2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n        if odd_count > even_count:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(i % 2 != 0 for i in lst1) + sum(i % 2 == 0 for i in lst2)\n    if odd_count <= len(lst1) // 2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Deleting characters in s that are equal to any character in c\n    result = ''.join([ch for ch in s if ch not in c])\n\n    # Checking if result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return (result, is_palindrome)\n\nprint(reverse_delete('abcde', 'ae'))  # ('bcd', False)\nprint(reverse_delete('abcdef', 'b'))  # ('acdef', False)\nprint(reverse_delete('abcdedcba', 'ab'))  # ('cdedc', True)"}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    new_string = \"\"\n    for char in s:\n        if char not in c:\n            new_string += char\n    return (new_string, new_string == new_string[::-1])"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, bucket_capacity):\n    total_water = sum([sum(row) for row in grid])  # Calculate total amount of water\n    return math.ceil(total_water / bucket_capacity)  # Calculate number of times buckets need to be lowered"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_lowerings = 0\n    for i in range(rows-1, -1, -1):  # Go through each row from bottom to top\n        water = sum(grid[i])   # Calculate water content in the current row\n        if water:  # If there is water in the row\n            bucket_lowerings += math.ceil(water / capacity)  # Lower bucket as many times as needed\n\n    return bucket_lowerings"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    vowels = set('aeiouAEIOU')  # define a set of vowels for comparison\n    consonants = 26 - len(vowels)  # calculate the number of consonants in English alphabet\n\n    # split string into words and iterate over them\n    return [word for word in s.split() if len([c for c in word if c in consonants]) == n]"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for word in s.split():\n        if sum([1 for c in word if c in consonants]) == n:\n            result.append(word)\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            total += arr[i]\n    return total"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Use list comprehension to filter out numbers with more than 2 digits\n    filtered = [num for num in arr[:k] if len(str(num)) <= 2]\n\n    # Use the built-in sum function to add up all elements in the filtered list\n    return sum(filtered)"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    # Check for overlap\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:  # No overlap\n        return \"NO\"\n    else:  # Overlap exists, calculate the length of intersection\n        length = end - start + 1\n        # Check if length is a prime number\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:  # Not a prime number\n                return \"NO\"\n        else:  # Prime number\n            return \"YES\""}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start + 1\n   \n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    sequence = [1, 3] # initial two numbers of the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + (i + 1))\n    return sequence[:n+1] # return the first n+1 numbers of the sequence\n\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    # Initialize the starting values for the sequence\n    trib_seq = [1, 3]\n\n    # Calculate the next values in the sequence until we reach the desired length\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # If n is even\n            next_val = 1 + i / 2\n        else:  # If n is odd\n            next_val = trib_seq[i - 1] + trib_seq[i - 2] + trib_seq[i + 1]\n        trib_seq.append(next_val)\n\n    return trib_seq"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False  # Flag to check if there's at least one odd digit\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n\n    return product if has_odd else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) > 1"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    return sum([int(i**2) for i in [abs(x) for x in lst]])"}
{"task_id": "python/60", "language": "python", "completion": "import math\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])"}
{"task_id": "python/61", "language": "python", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    # Check if the last character is an alphabet and it is not part of a word.\n    return bool(re.search('\\b[a-zA-Z]\\b$', txt))"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if last character of string is alphabetical and not part of word\n    return bool(re.search(r'[a-z]\\s*$', txt))\n\nimport re\n\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # False\nprint(check_if_last_char_is_a_letter(\"\")) # False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (A, b)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        # Calculate factorial of n and n-1, multiply them together\n        return n * special_factorial(n-1)\n\nprint(special_factorial(4))  # Outputs: 288"}
{"task_id": "python/65", "language": "python", "completion": "import math\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_lengths_words = [word for word in words if IsPrime(len(word))]\n    return ' '.join(prime_lengths_words)"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Test the function with given examples\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n\n    product = numerator_x * numerator_n * 10**len(str(denominator_x)) * 10**len(str(denominator_n))\n    result = product % (denominator_x * denominator_n)\n\n    return result == 0"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Convert string fractions to tuples of integers\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    \n    # Multiply the numerators and denominators\n    numerator_product = num1 * num2\n    denominator_product = den1 * den2\n    \n    # Check if the product is a whole number by checking if the remainder of division is 0\n    return numerator_product % denominator_product == 0"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(abs(num)) and is_odd(int(str(abs(num))[0]) and int(str(abs(num))[-1]):\n            count += 1\n    return count\n\ndef isOdd(n):\n    \"\"\"Checks if a number is odd\"\"\"\n    return n % 2 != 0"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    # Function to check if number has both first and last digit as odd numbers\n    def is_odd(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n\n    # Use a generator expression to filter out only the elements greater than 10,\n    # which have both first and last digit as odd numbers. Then count them\n    return sum(num > 10 for num in nums if is_odd(num))"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    sums = {}\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                s = A[i] + A[j] + A[k]\n                if s % 3 == 0:\n                    count += 1\n                    sums[s] = sums.get(s, 0) + 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]  # Create array A as per the formula\n    count = 0  # Initialize count of valid triples to 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:  # Check if the sum is a multiple of 3\n                    count += 1  # Increment count\n\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    solar_system = {\n        \"Mercury\": 0,\n        \"Venus\": 1,\n        \"Earth\": 2,\n        \"Mars\": 3,\n        \"Jupiter\": 4,\n        \"Saturn\": 5,\n        \"Uranus\": 6,\n        \"Neptune\": 7\n    }\n\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n\n    start = min(solar_system[planet1], solar_system[planet2]) + 1\n    end = max(solar_system[planet1], solar_system[planet2])\n\n    return tuple(sorted([p for p in solar_system if start <= solar_system[p] < end]))"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    solar_system = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n\n    index1, index2 = solar_system.index(planet1), solar_system.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(solar_system[i] for i in range(index1 + 1, index2))"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2):\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # Check if list is empty\n    if not lst:\n        return 0\n\n    total = 0\n    for num in lst:\n        # Check if number is integer and positive\n        if isinstance(num, int) and num > 0:\n            # Check if the number is odd\n            if num % 2 == 1:\n                total += num ** 2\n\n    return total"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    if not lst:  # Check if the list is empty\n        return 0\n\n    sum_of_squares = sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n    return sum_of_squares"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = [sum([1 if char.isupper() else -1 for char in ext]) for ext in extensions]\n    max_idx = strengths.index(max(strengths))\n    return class_name + '.' + extensions[max_idx]\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: myClass.AA"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')  # initialize max_strength to negative infinity\n    strongest_extension = ''\n    for extension in extensions:\n        upper_case = sum(c.isupper() for c in extension)\n        lower_case = sum(c.islower() for c in extension)\n        strength = upper_case - lower_case\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            max_strength = strength\n            strongest_extension = extension\n\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A, B):\n    B = B + B  # Concatenate string with itself to handle rotations\n    return A.find(B) != -1  # Check if B is a substring of A after concatenation"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(A, B):\n    len_b = len(B)\n    for i in range(len_b):\n        if B[i:] + B[:i] in A:\n            return True\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    roman_map = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100, \"c\"),\n                 (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10, \"x\"), (9, \"ix\"), \n                 (5, \"v\"), (4, \"iv\"), (1, \"i\")]\n\n    result = \"\"\n    for value, symbol in roman_map:\n        while number >= value:\n            result += symbol\n            number -= value\n\n    return result.lower()"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    int_to_roman = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    roman_numeral = ''\n\n    for value in sorted(int_to_roman.keys(), reverse=True):\n        while number >= value:\n            number -= value\n            roman_numeral += int_to_roman[value]\n\n    return roman_numeral"}
{"task_id": "python/76", "language": "python", "completion": "import math\n\ndef right_angle_triangle(A, B, C):\n    # Sort the sides to get the longest side as 'c'\n    sides = sorted([A, B, C])\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)\n\n# Test cases:\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # First, we sort the sides so that the longest side is last\n    sides = sorted([A, b, c])\n\n    # Then, we check if the square of the longest side equals the sum of squares \n    # of other two sides\n    return (sides[2]**2 == sides[0]**2 + sides[1]**2)"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):  # Check if the string contains no letters\n        return s[::-1]  # Reverse the string\n    else:\n        result = ''  # Initialize an empty string to store the result\n        for c in s:  # Iterate through each character in the input string\n            if c.isalpha():  # If the character is a letter\n                result += c.swapcase()  # Convert its case and add it to the result string\n            else:  # If the character is not a letter\n                result += c  # Add it to the result string as it is\n        return result  # Return the result string"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):  # if string contains no letters\n        return s[::-1]  # Reverse the string\n    else:\n        result = ''  # Initialize an empty string to store the result\n        for char in s:\n            if char.isalpha():  # If character is a letter\n                result += char.swapcase()  # Swap the case of the letter and append it to the result\n            else:\n                result += char  # Append non-letter characters as they are to the result\n        return result  # Return the final string\n\nprint(solve(\"1234\"))  # Outputs: \"4321\"\nprint(solve(\"ab\"))  # Outputs: \"AB\"\nprint(solve(\"#a@C\"))  # Outputs: \"#A@c\""}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:  # Check if the input string is empty\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode('utf-8'))  # Encode the text as UTF-8 and compute its MD5 hash\n        hexdigest = hash_object.hexdigest()  # Convert the hash to a hexadecimal string\n        return hexdigest"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:  # Check if text is an empty string\n        return None\n\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b (where a <= b), return the even digits between a\n    and B, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a is always less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to hold the even numbers\n    even_numbers = []\n\n    # Loop from A to B (inclusive)\n    for i in range(a, b + 1):\n        # Check if the number is even (divisible by 2 with no remainder)\n        if i % 2 == 0:\n            even_numbers.append(i)\n\n    return even_numbers\n\n# Test cases to validate the solution\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: []"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(A, b):\n    even_numbers = [] # Initialize an empty list to store the even numbers\n\n    # Ensure that A is less than B for the range function\n    start = min(A, b) \n    end = max(A, b) + 1  # +1 to make sure end is exclusive \n\n    for i in range(start, end):\n        if i % 2 == 0:   # Check if the number is even\n            even_numbers.append(i)  # Append it to the list of even numbers\n\n    return even_numbers"}

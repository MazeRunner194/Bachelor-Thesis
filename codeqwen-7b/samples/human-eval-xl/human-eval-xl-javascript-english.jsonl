{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0; // Initialize the balance as zero\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i]; // Update the balance with each operation\n        if (balance < 0) { // Check if the balance falls below zero\n            return true; // If it does, return True\n        }\n    }\n    return false; // If we get to this point, the balance never fell below zero so return False\n}\n\nconsole.log(belowZero([1, 2, 3])); // Output: False\nconsole.log(belowZero([1, 2, -4, 5])); // Output: True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n}\n\nconsole.log(sumProduct([])); // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, B) {\n    let result = ''; // Initialize an empty string to store the XOR result.\n    for (let i = 0; i < a.length; i++) { // Loop through each character in the strings.\n        // If the characters at the same position are different, add '1' to the result string.\n        if (A[i] !== B[i]) result += '1';\n        else // Otherwise, add '0'.\n            result += '0';\n    }\n    return result; // Return the XOR result.\n}\n\nconsole.log(stringXor('010', '110')); // It will print: 100"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return \"none\";\n  } else if (strings.length === 1) {\n    return strings[0];\n  } else {\n    let maxLength = strings[0].length;\n    let longestStr = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n      if (strings[i].length > maxLength) {\n        maxLength = strings[i].length;\n        longestStr = strings[i];\n      }\n    }\n\n    return longestStr;\n  }\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(A, B) {\n    if (B == 0) return A;\n    else return greatestCommonDivisor(B, A % B);\n}\n\nconsole.log(greatestCommonDivisor(3, 5));  // Output: 1\nconsole.log(GreatestCommonDivisor(25, 15)); // Output: 5"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  // Mapping each number string to its numerical equivalent\n  const numArray = numbers.split(' ').map(number => {\n    switch (number) {\n      case 'zero': return 0;\n      case 'one': return 1;\n      case 'two': return 2;\n      case 'three': return 3;\n      case 'four': return 4;\n      case 'five': return 5;\n      case 'six': return 6;\n      case 'seven': return 7;\n      case 'eight': return 8;\n      case 'nine': return 9;\n    }\n  });\n\n  // Sorting the numerical array\n  numArray.sort((a, B) => A - B);\n\n  // Mapping each numerical back to its string equivalent\n  const sortedNumbers = numArray.map(number => {\n    switch (number) {\n      case 0: return 'zero';\n      case 1: return 'one';\n      case 2: return 'two';\n      case 3: return 'three';\n      case 4: return 'four';\n      case 5: return 'five';\n      case 6: return 'six';\n      case 7: return 'seven';\n      case 8: return 'eight';\n      case 9: return 'nine';\n    }\n  });\n\n  // Joining the sorted array back into a string and returning it\n  return sortedNumbers.join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map((number) => (number - min) / range);\n}\n\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            result += string[i].toLowerCase();\n        } else {\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(num => num > 0);\n}\n\n// Test cases\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // Output: [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function IsPrime(n) {\n  if (n <= 1) return false; // Numbers less than or equal to 1 are not prime.\n  if (n === 2) return true; // 2 is the only even prime number.\n  if (n % 2 === 0) return false; // Even numbers other than 2 are not prime.\n\n  var sqrtN = Math.sqrt(n);\n  for (var i = 3; i <= sqrtN; i += 2) {\n    if (n % i === 0) return false; // If n is divisible by any odd number up to the square root of n, it's not prime.\n  }\n\n  return true; // If none of the above conditions were met, n is prime.\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n  let result = [];\n  for (let i of l) {\n    if (!result.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result.sort((a, B) => A - B);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i*i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction primeFib(n) {\n    let fibNumbers = [0, 1]; // Initialize the array with the first two Fibonacci numbers\n    let count = 0; // Keep track of how many prime Fibonacci numbers we've found\n\n    while (true) {\n        let nextFib = fibNumbers[fibNumbers.length - 1] + fibNumbers[fibNumbers.length - 2]; // Generate the next Fibonacci number\n        fibNumbers.push(nextFib); // Add it to our list of Fibonacci numbers\n\n        if (isPrime(nextFib)) { // Check if it's prime\n            count++; // If it is, increment our count\n            if (count === n) { // And check if we've found the n-th prime Fibonacci number yet\n                return nextFib; // If so, return it\n            }\n        }\n    }\n}\n\nconsole.log(primeFib(1)); // Outputs: 2\nconsole.log(primeFib(2)); // Outputs: 3\nconsole.log(primeFib(3)); // Outputs: 5\nconsole.log(primeFib(4)); // Outputs: 13\nconsole.log(primeFib(5)); // Outputs: 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(list) {\n    // Sorting list in ascending order\n    list.sort((a, B) => A - B);\n\n    for (let i = 0; i < list.length - 2; i++) {\n        // Initialize two pointers\n        let left = i + 1, right = list.length - 1;\n\n        while (left < right) {\n            let sum = list[i] + list[left] + list[right];\n\n            if (sum === 0) {\n                // If the sum is zero return true\n                return true;\n            } else if (sum > 0) {\n                // If sum is greater than 0, move right pointer towards left\n                right--;\n            } else {\n                // If sum is less than 0, move left pointer towards right\n                left++;\n            }\n        }\n    }\n\n    // If no such triplet found return false\n    return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    let seenNumbers = new Set(); // Create an empty set to store unique numbers seen so far\n    for (let num of l) {\n        if (seenNumbers.has(-num)) { // Check if the negation of the current number is in the set\n            return true; // If it is, then there are two distinct elements that sum to zero\n        }\n        seenNumbers.add(num); // Add the current number to the set\n    }\n    return false; // If we reach here, then there are no pairs that sum to zero\n}\n\n// Test cases\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // Output: false\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // Output: false\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // Output: false\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // Output: true\nconsole.log(pairsSumToZero([1])); // Output: false"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    if (n < 2 || n === 3) return 0;\n    if (n === 2) return 2;\n\n    let prev = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        prev[i % 4] = prev.reduce((accum, curr) => accum + curr);\n    }\n\n    return prev[n % 4];\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  // Sort the list in ascending order\n  l.sort((a, B) => A - B);\n\n  const len = l.length;\n\n  // If the length of the list is odd, return the middle element\n  if (len % 2 === 1) {\n    return l[Math.floor(len / 2)];\n  }\n\n  // If the length of the list is even, return the average of the two middle elements\n  else {\n    return (l[len / 2 - 1] + l[(len / 2)]) / 2;\n  }\n}\n\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function IsPalindrome(text) {\n  // Convert the text to lowercase and remove non-alphanumeric characters\n  let cleanedText = text.toLowerCase().replace(/[^a-z0-9]/g, '');\n\n  // Compare the cleaned text with its reverse\n  return cleanedText === cleanedText.split('').reverse().join('');\n}\n\nconsole.log(IsPalindrome('')); // Output: true\nconsole.log(IsPalindrome('aba')); // Output: true\nconsole.log(IsPalindrome('aaaaa')); // Output: true\nconsole.log(IsPalindrome('zbcd')); // Output: false"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.split('').filter(char => 'aeiouAEIOU'.indexOf(char) === -1).join('');\n}\n\n// Example usage:\nconsole.log(removeVowels('')); // Output: ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // Output: 'bcdf'\nconsole.log(removeVowels('aaaaa')); // Output: ''\nconsole.log(removeVowels('aaBAA')); // Output: 'B'\nconsole.log(removeVowels('zbcd')); // Output: 'zbcd'"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "// The function 'add' takes in two parameters, 'x' and 'y', and returns their sum.\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Test cases to verify the correctness of the 'add' function:\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "javascript/20", "language": "javascript", "completion": "sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') // Returns true because both strings contain the same characters\nsameChars('AbcD', 'DDddDDDabc') // Returns false because the function is case-sensitive and 'A' and 'a' are different characters"}
{"task_id": "javascript/21", "language": "javascript", "completion": "/**\n * Return n-th Fibonacci number.\n * @param {number} n - The position in the Fibonacci sequence.\n * @returns {number} The n-th Fibonacci number.\n */\nfunction fib(n) {\n  if (n <= 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    let previous = 0, current = 1;\n    for (let i = 2; i <= n; i++) {\n      let next = previous + current;\n      previous = current;\n      current = next;\n    }\n    return current;\n  }\n}\n\n// Test cases:\nconsole.log(fib(10)); // Output: 55\nconsole.log(fib(1));  // Output: 1\nconsole.log(fib(8));  // Output: 21"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    // Create sets from the arrays to remove duplicates and allow for faster lookup times\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n  \n    // Filter the first set by checking if each element is also in the second set\n    let commonElements = [...set1].filter(item => set2.has(item));\n  \n    // Return a sorted array of the unique common elements\n    return commonElements.sort((a, B) => A - B);\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "/**\n * Return the largest prime factor of n. Assume n > 1 and is NOT a prime.\n * Implementing an optimized version for large numbers using trial division, then checking divisibility by 2 after that.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n */\n\nfunction isPrime(num) {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return num > 1;\n}\n\nfunction largest_prime_factor(n) {\n    let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0 && isPrime(factor)) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n\n// Test cases\nconsole.log(largest_prime_factor(13195)); // Outputs: 29\nconsole.log(largest_prime_factor(2048));  // Outputs: 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "// The function `sumToN` takes a single parameter, 'n', and returns the sum of all numbers from 1 to 'n'.\n\nlet total = 0; // Initialize the accumulator variable 'total' to 0.\n\nfor(let i = 1; i <= n; i++) {\n  total += i; // Add each number from 1 to 'n' to the 'total'.\n}\n\nreturn total; // Return the final sum."}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    return xs.map((x, index) => x * index).slice(1);\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n\n    let [a, B, C] = [0, 0, 1]; // Initializing the first three numbers of FibFib sequence.\n\n    for(let i = 3; i <= n; i++) {\n        let D = A + B + C; // Calculating next number in sequence.\n        A = B; // Shift the last two values for the next iteration.\n        B = C;\n        C = D;\n    }\n\n    return C; // Return the n-th element of FibFib sequence.\n}\n\nconsole.log(fibfib(1));  // Output: 0\nconsole.log(fibfib(5));  // Output: 4\nconsole.log(fibfib(8));  // Output: 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    let count = 0;\n    const vowels = ['a', 'E', 'I', 'O', 'U'];\n  \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n\n    // Check if the last character is 'y' and add to count if true\n    if (s.endsWith('y')) {\n        count++;\n    }\n\n    return count;\n}\n\nconsole.log(vowelsCount(\"abcde\")); // Output: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Output: 3"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    let freqMap = new Map(); // Create a map to store frequencies of numbers\n    for (let num of lst) { // Iterate over the list and count each number's frequency\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n\n    let result = -1; // Initialize result as -1 if no number meets the criteria\n    for (let [num, freq] of freqMap) { // Iterate over the map and find the number that satisfies the condition\n        if (freq >= num && num > result) {\n            result = num;\n        }\n    }\n\n    return result; // Return the greatest integer that meets the criteria or -1 if no such integer exists.\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(A, B, C) {\n    // Check for validity of the triangle\n    if (A + B > C && A + C > B && B + C > A) {\n        let s = (A + B + C) / 2;\n        let area = Math.sqrt(s * (s - A) * (s - B) * (s - C));\n        return parseFloat(area.toFixed(2));\n    } else {\n        return -1;\n    }\n}\n\nconsole.log(triangleArea(3, 4, 5));  // Output: 6.00\nconsole.log(triangleArea(1, 2, 10)); // Output: -1"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if the list is balanced (palindromic)\n    let left = 0;\n    let right = q.length - 1;\n    while (left < right) {\n        if (q[left] !== q[right]) {\n            return false; // Not a palindrome\n        }\n        left++;\n        right--;\n    }\n\n    // Calculate the sum of the elements in the list\n    let total = 0;\n    for (let i = 0; i < q.length; i++) {\n        total += q[i];\n    }\n\n    // Check if the sum is less than or equal to the maximum possible weight\n    return total <= w;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "// Helper function to check if number is prime\nfunction isPrime(n) {\n    for (var i = 2; i < n; i++)\n        if (n % i === 0) return false; \n    return n > 1;\n}\n\nfunction IsMultiplyPrime(A){\n    var factors = [];\n    // Check for all possible divisors less than A\n    for(let i = 2; i < A; i++) {\n        if (A % i == 0 && isPrime(i)){ // If a number divides A and it's prime\n            factors.push(i); // Add to the factors array\n        }\n    }\n\n    // Check if there are exactly three prime factors\n    return factors.length === 3;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    let binary = \"\";\n\n    while (decimal > 0) {\n        binary = (decimal % 2).toString() + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\n    return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimalToBinary(15)); // db1111db\nconsole.log(decimalToBinary(32)); // db100000db"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function IsHappy(s) {\n  if (s.length < 3) {\n    return false; // String length is less than 3, so it cannot be happy.\n  } else {\n    for (let i = 0; i <= s.length - 3; i++) {\n      // Loop through each group of 3 consecutive letters in the string.\n      let substr = s.substring(i, i + 3); // Get a substring from index 'i' to 'i+3'.\n      let uniqueChars = new Set(substr).size; // Count unique characters in that substring.\n\n      if (uniqueChars !== 3) {\n        // If there aren't exactly 3 unique characters, the string is not happy.\n        return false;\n      }\n    }\n    // After checking all groups of 3 letters and found no non-happy ones, the string is happy.\n    return true;\n  }\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4.0) {\n            letterGrades.push('A+');\n        } else if (grades[i] > 3.7) {\n            letterGrades.push('A');\n        } else If (grades[i] > 3.3) {\n            letterGrades.push('A-');\n        } else If (grades[i] > 3.0) {\n            letterGrades.push('B+');\n        } else If (grades[i] > 2.7) {\n            letterGrades.push('B');\n        } else If (grades[i] > 2.3) {\n            letterGrades.push('B-');\n        } else If (grades[i] > 2.0) {\n            letterGrades.push('C+');\n        } else If (grades[i] > 1.7) {\n            letterGrades.push('C');\n        } else If (grades[i] > 1.3) {\n            letterGrades.push('C-');\n        } else If (grades[i] > 1.0) {\n            letterGrades.push('D+');\n        } else If (grades[i] > 0.7) {\n            letterGrades.push('D');\n        } else If (grades[i] > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "/**\n * Function to check if a number is prime\n * @param {number} num The number to check\n * @returns {boolean} True if the number is prime, otherwise false\n */\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\n/**\n * Function to check if the length of a string is a prime number\n * @param {string} str The string to check\n * @returns {boolean} True if the string length is a prime number, otherwise false\n */\nfunction primeLength(str) {\n  return isPrime(str.length);\n}\n\n// Test cases\nconsole.log(primeLength('Hello')); // true\nconsole.log(primeLength('abcdcba')); // true\nconsole.log(primeLength('kittens')); // true\nconsole.log(primeLength('orange')); // false"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    let sum = 0;\n\n    // Convert n to string so we can iterate over its digits\n    let strN = String(n);\n\n    // Loop through each digit\n    for(let i = 0; i < strN.length; i++) {\n        // Convert the current digit back to a number and add it to sum\n        sum += Number(strN[i]);\n    }\n\n    // Convert the sum to binary\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n    let coordinates = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coordinates.push([i, j]);\n            }\n        }\n    }\n\n    // Sort coordinates by row in ascending order and then by column in descending order within each row\n    return coordinates.sort((a, B) => A[0] - B[0] || B[1] - A[1]);\n}\n\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)); // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nconsole.log(getRow([], 1)); // Output: []\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // Output: [(2, 2)]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n  // Check if the list is empty or has only one element\n  if (lst.length <= 1) return \"none\";\n\n  // Sort the list in ascending order\n  const sortedList = lst.sort((a, B) => A - B);\n\n  // Return the second element in the sorted list\n  return sortedList[1];\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function IsBored(s) {\n  // Split the string into sentences based on '.', '?', and '!' delimiters.\n  var sentences = s.split(/[\\.\\?!]/);\n  \n  // Initialize a counter for boredoms.\n  var boredomCount = 0;\n\n  // Loop through each sentence to check if it starts with \"I\".\n  for (var i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith(\"I\")) {\n      boredomCount++;\n    }\n  }\n\n  // Return the total count of boredoms found in the input string.\n  return boredomCount;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    // Function to check if a number is prime\n    const isPrime = (num) => {\n        if (num <= 1) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    // Find the largest prime number in the list\n    const primes = lst.filter(IsPrime);\n    let maxPrime = Math.max(...primes);\n\n    // Calculate and return the sum of the digits of the largest prime number\n    return maxPrime.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n  // Check if dictionary is empty\n  if (Object.keys(dict).length === 0) return false;\n\n  let areAllLower = true;\n  let areAllUpper = true;\n\n  for (const key in dict) {\n    if (typeof key !== 'string') return false;\n    // Check if the string is entirely lowercase or uppercase\n    areAllLower = areAllLower && key === key.toLowerCase();\n    AreAllUpper = AreAllUpper && key === key.toUpperCase();\n  }\n\n  return areAllLower || AreAllUpper;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    let num = parseFloat(value);\n    if (num % 1 === 0) {\n        return num;\n    } else if (num > 0 && num - Math.floor(num) == 0.5) {\n        return Math.ceil(num);\n    } else if (num < 0 && Math.ceil(num) - num == 0.5) {\n        return Math.floor(num);\n    } else {\n        return Math.round(num);\n    }\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let pile = [];\n    let currentNumber;\n\n    if (n % 2 === 0) {\n        currentNumber = n + 1;\n    } else {\n        currentNumber = n + 2;\n    }\n\n    for(let i = 0; i < n; i++) {\n        pile.push(currentNumber);\n        if (n % 2 === 0) {\n            currentNumber += 2;\n        } else {\n            currentNumber += 2;\n        }\n    }\n\n    return pile;\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  // Replace commas with spaces and split the string into an array of words\n  return s.replace(/,/g, ' ').split(/\\s+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  // Check if x is greater than y, in which case return -1.\n  if (x > y) {\n    return -1;\n  }\n\n  // If y is even, return y. Otherwise, subtract 1 from y and check if it's still within the range [x, y].\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n\n  // If we haven't found an even number in the range, return -1.\n  return -1;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m){\n  if (n > m) return -1;\n\n  var sum = 0;\n  for (var i=n; i<=m; i++){\n    sum += i;\n  }\n  var avg = Math.round(sum/(m-n+1));\n\n  return \"0b\" + avg.toString(2);\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n){\n    return Array.from({length: n}, (_, i) => i ? (i % 2 ? i * (i + 1) : factorial(i)) : 1);\n}\n\nfunction factorial(num){\n    let result = 1;\n    for(let i=2; i<=num; i++){\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let countEven = 0;\n    let countOdd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n\n    return [countEven, countOdd];\n}\n\nfunction isPalindrome(num) {\n    const str = num.toString();\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length === 0) {\n        return true;\n    }\n\n    let count = 0;\n    for (let i = 1; i < arr.length; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            ++count;\n        }\n    }\n\n    // if count is more than one, return false\n    if (count > 1) {\n        return false;\n    }\n\n    // If count is one, check whether it's possible to make the array non-decreasing by shifting once.\n    let first = arr[0];\n    for (let i = 1; i < arr.length - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n\n    // Check if the array is sorted now or not by checking the last two elements.\n    return First <= arr[arr.length - 2];\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  // Count the number of odd numbers in lst1 and even numbers in lst2\n  const numOddsInLst1 = lst1.filter(num => num % 2 !== 0).length;\n  const numEvensInLst2 = lst2.filter(num => num % 2 === 0).length;\n\n  // If there are at least as many even numbers in lst2 as there are odd numbers in lst1,\n  // then it's possible to exchange them to make all elements of lst1 even\n  return numEvensInLst2 >= numOddsInLst1 ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  // Filter out characters in 's' that are not in 'c'\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  \n  // Check if the result is a palindrome\n  let isPalindrome = result === result.split('').reverse().join('');\n\n  return [result, isPalindrome];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  let count = 0;\n  for (let row of grid) {\n    count += Math.ceil(row.reduce((sum, num) => sum + num, 0) / capacity);\n  }\n  return count;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function isConsonant(char){\n    return 'bcdfghjklmnpqrstvwxyz'.indexOf(char.toLowerCase()) !== -1;\n}\n\nfunction selectWords(s, n) {\n    let words = s.split(' ');\n    let result = [];\n\n    for (let word of words) {\n        if (word.split('').filter(isConsonant).length === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n  // Sort array in descending order\n  arr.sort((a, B) => B - A);\n  \n  // Slice first k elements\n  return arr.slice(0, k);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    return arr.slice(0, k).filter(num => num < 100 && num > -100).reduce((accumulator, currentValue) => accumulator + currentValue);\n}\n\n// Test the function\nlet result = addElements([111,21,3,4000,5,6,7,8,9], 4);\nconsole.log(result);  // Output: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "// Function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// Function to calculate the intersection of two intervals and check if its length is prime\nfunction intersection(interval1, interval2) {\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) return \"NO\";\n\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    var sequence = [1, 3, 2];\n    for (var i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            sequence.push(i / 2);\n        } else {\n            var nextNumber = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n            sequence.push(nextNumber);\n        }\n    }\n    return sequence;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    let product = 1;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return product === 1 ? 0 : product;\n}\n\nconsole.log(digits(1));  // Output: 1\nconsole.log(digits(4));  // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function IsNested(string) {\n    let stack = [];\n    for(let i=0; i<string.length; i++) {\n        if(string[i] == '[') {\n            stack.push(string[i]);\n        } else if(string[i] == ']' && stack.length > 0) {\n            // Check for nested bracket\n            for(let j=stack.length-1; j>=0; j--) {\n                if(stack[j] == '[') {\n                    return true;\n                }\n            }\n        } else {\n            return false;\n        }\n    }\n    return false;\n}\n\n// Test the function with your given test cases\nconsole.log(IsNested('[[]]')); // Expected output: true\nconsole.log(IsNested('[]]]]]]][[[[[]')); // Expected output: false\nconsole.log(IsNested('[][]')); // Expected output: false\nconsole.log(IsNested('[]')); // Expected output: false\nconsole.log(IsNested('[[][]]')); // Expected output: true\nconsole.log(IsNested('[[]][[')); // Expected output: true"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Initialize total sum to zero.\n    let total = 0;\n    \n    // Iterate through the list of numbers.\n    for (let i = 0; i < lst.length; i++) {\n        // Round each element in the list up to the nearest integer (ceiling).\n        const roundedElement = Math.ceil(lst[i]);\n        \n        // Add the square of the rounded element to the total sum.\n        total += roundedElement * roundedElement;\n    }\n    \n    // Return the final total sum.\n    return total;\n}\n\n// Test cases:\n\nconsole.log(sumSquares([1,2,3])); // 14\nconsole.log(sumSquares([1,4,9])); // 98\nconsole.log(sumSquares([1,3,5,7])); // 84\nconsole.log(sumSquares([1.4,4.2,0])); // 29\nconsole.log(sumSquares([-2.4,1,1])); // 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt){\n    var trimmedTxt = txt.trim();  // Remove leading/trailing spaces\n    var lastChar = trimmedTxt.charAt(trimmedTxt.length - 1); // Get the last character\n\n    return /^[a-z]$/.test(lastChar) && (trimmedTxt.charAt(trimmedTxt.length - 2) === ' ' || trimmedTxt.length == 1);\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr){\n    for (let i = arr.length - 1; i > 0; i--){\n        if (arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  let maxNegative = null;\n  let minPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (maxNegative === null || num > maxNegative)) {\n      maxNegative = num;\n    } else if (num > 0 && (minPositive === null || num < minPositive)) {\n      minPositive = num;\n    }\n  }\n\n  return [maxNegative, minPositive];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function factorial(num){\n    let result = 1;\n    for (let i = 2; i <= num; i++){\n        result *= i;\n    }\n    return result;\n}\n\nfunction specialFactorial(n) {\n    let brazilian_factorial = 1;\n    while(n >= 1){\n        brazilian_factorial *= factorial(n);\n        n--;\n    }\n    return brazilian_factorial;\n}\n\nconsole.log(specialFactorial(4));  // Output: 288"}
{"task_id": "javascript/65", "language": "javascript", "completion": "// Check if a number is prime\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n// Get words with prime length from a sentence\nfunction wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => IsPrime(word.length));\n  return primeWords.join(' ');\n}\n\nconsole.log(wordsInSentence(\"This is a test\")); // \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    // Split the fraction into numerator and denominator\n    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\n    // Convert the fractions to decimal \n    let xDecimal = xNumerator / xDenominator;\n    let nDecimal = nNumerator / nDenominator;\n\n    // Check if the multiplication of two decimals gives an integer\n    if (Number.isInteger(xDecimal * nDecimal)) {\n        return true; // If it does, return true\n    } else {\n        return false; // If not, return false\n    }\n}\n\n// Test cases:\nconsole.log(simplify(\"1/5\", \"5/1\"));  // True\nconsole.log(simplify(\"1/6\", \"2/1\"));  // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    // Define function to get sum of digits\n    const sumOfDigits = n => [...`${Math.abs(n)}`].reduce((a,B)=>A+Number(B),0);\n\n    return nums.sort((a, B) => {\n        let aSum = sumOfDigits(A), BSum = sumOfDigits(B);\n        if (ASum === BSum) return A - B; // If sums are same then sort by their index\n        else return ASum - BSum;\n    });\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n  let count = 0; // Counter for numbers that satisfy the conditions\n\n  // Loop through each number in the array\n  for (let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]); // Get the absolute value of the number\n    if (num > 10) { // Check if the number is greater than 10\n      let firstDigit = Math.floor(num / 10); // Calculate the first digit\n      let LastDigit = num % 10; // Calculate the last digit\n\n      // Check if both First and last digits are odd\n      if (FirstDigit % 2 !== 0 && LastDigit % 2 !== 0) {\n        count++; // Increment count\n      }\n    }\n  }\n  return count; // Return the total count\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Outputs: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Outputs: 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "// Initializing variables to count the number of triples and the sum of all elements in array A\nlet count = 0;\nlet sum = 0;\n\n// Creating an array A with length n, where each element is calculated as i^2 - i + 1\nconst A = Array.from({length: n}, (_, i) => (i * i - i + 1));\n\n// Iterating through the array A using three nested loops to find valid triples\nfor(let i = 0; i < n-2; i++) {\n    for(let j = i+1; j < n-1; j++) {\n        for(let k = j+1; k < n; k++) {\n            // Checking if the sum of elements in each triple is a multiple of 3\n            if((A[i] + A[j] + A[k]) % 3 === 0) {\n                count++; // Incrementing count if the condition is satisfied\n            }\n        }\n    }\n}\n\n// Returning the total number of valid triples\nreturn count;"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    // Array of planets in order of their distance from the sun\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    // Get indexes of the input planets\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\n    // Return empty tuple if either planet name is invalid\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    // Ensure index1 is less than index2\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n\n    // Slice the array to get the planets in between\n    let result = planets.slice(index1 + 1, index2);\n\n    return result;\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false; // 0 and 1 are not prime numbers\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false; // If divisible by any number other than 1 and itself, it's not prime\n  }\n  return true; // If no divisors found, the number is prime\n}\n\nfunction xOrY(n, x, y) {\n  if (isPrime(n)) {\n    return x; // Return x if n is prime\n  } else {\n    return y; // Return y otherwise\n  }\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    if (lst.length === 0) return 0; // Check if the list is empty\n\n    let sumOfSquares = lst.reduce((sum, num) => {\n        // Check if number is positive and an integer\n        if (num > 0 && Number.isInteger(num)) {\n            return sum + Math.pow(num % 2 !== 0 ? num : 0, 2); // Square and add if the number is odd\n        }\n        return sum;\n    }, 0);\n\n    return sumOfSquares * 2; // Double the result\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(className, extensions) {\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n\n    extensions.forEach(extension => {\n        const upperCaseCount = (extension.match(/[A-Z]/g) || []).length;\n        const lowerCaseCount = (extension.match(/[a-z]/g) || []).length;\n        const strength = upperCaseCount - lowerCaseCount;\n\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = extension;\n        }\n    });\n\n    return `${className}.${strongestExt}`;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    let bLength = b.length;\n    let A = (b + b).replace(/([A-Z])/g, '[$1]');\n    let regexp = new RegExp('.*' + A + '.*', 'gi');\n\n    return regexp.test(A);\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "const romanNumerals = [\n  { value: 1000, symbol: 'm' },\n  { value: 900, symbol: 'cm' },\n  { value: 500, symbol: 'd' },\n  { value: 400, symbol: 'cd' },\n  { value: 100, symbol: 'c' },\n  { value: 90, symbol: 'xc' },\n  { value: 50, symbol: 'l' },\n  { value: 40, symbol: 'xl' },\n  { value: 10, symbol: 'x' },\n  { value: 9, symbol: 'ix' },\n  { value: 5, symbol: 'v' },\n  { value: 4, symbol: 'iv' },\n  { value: 1, symbol: 'i' }\n];\n\nfunction intToMiniRoman(number) {\n  let roman = '';\n\n  romanNumerals.forEach((item) => {\n    while (number >= item.value) {\n      roman += item.symbol;\n      number -= item.value;\n    }\n  });\n\n  return roman;\n}\n\nconsole.log(intToMiniRoman(19)); // Output: 'xix'\nconsole.log(intToMiniRoman(152)); // Output: 'clii'\nconsole.log(intToMiniRoman(426)); // Output: 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(A, B, C) {\n  // Sort the input values in ascending order\n  var sides = [A, B, C].sort((a, B) => A - B);\n\n  // Check if the square of the longest side is equal to the sum of squares of the other two sides\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    let hasLetters = false;\n    let result = '';\n  \n    for (let char of s) {\n        if (char >= 'a' && char <= 'Z') {\n            hasLetters = true;\n            result += char.toLowerCase();\n        } else if (char >= 'a' && char <= 'Z') {\n            hasLetters = true;\n            result += char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n\n    return hasLetters ? result : result.split('').reverse().join('');\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "var md5 = require('md5');\n\nfunction stringToMd5(text){\n   if (text === ''){\n    return 'none';\n  }\n  return md5(text);\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  // Ensure that A is always less than or equal to B\n  if (A > B) {\n    [A, B] = [B, A];\n  }\n\n  // Create an array of numbers between A and B (inclusive)\n  const nums = Array.from({ length: B - A + 1 }, (_, i) => A + i);\n\n  // Filter out the odd numbers\n  return nums.filter(num => num % 2 === 0);\n}"}

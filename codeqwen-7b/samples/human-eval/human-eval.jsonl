{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):  # iterate through numbers except the last one\n        if abs(numbers[i] - numbers[i + 1]) < threshold:  # check if consecutive numbers are within threshold\n            return True  # found close elements, return True\n    return False  # no close elements found, return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string.replace(\" \", \"\"):  # remove spaces from the string\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group += char\n            if not stack:  # if the stack is empty, we've completed a group\n                paren_groups.append(current_group)\n                current_group = \"\"  # Reset the current group for the next one\n\n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# First step: Calculate mean (average)\nnumbers = [1.0, 2.0, 3.0, 4.0]\nsum = 1.0 + 2.0 + 3.0 + 4.0\nmean = sum / len(numbers)  # mean = 2.5\n\n# Second step: Calculate MAD\nmad_total = abs(1.0 - mean) + abs(2.0 - mean) + abs(3.0 - mean) + abs(4.0 - mean)  # mad_total = 1.5\n\n# Third step: Get the MAD (divide by number of elements)\nmad = mad_total / len(numbers)  # mad = 1.0\n\nprint(mad)  # Output: 1.0"}
{"task_id": "HumanEval/5", "completion": ">>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split(' ')  # Split the string into groups by spaces\n    result = []\n\n    for group in groups:\n        depth = 0  # Initialize depth to 0\n        max_depth = 0  # Initialize max depth to 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n\n        result.append(max_depth)  # Append the max depth of current group to result\n\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring.lower() in s.lower()]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    rolling_max_list = [numbers[0]]  # Initialize with the first element of the input list\n    current_max = numbers[0]  # Start with the First element as the current max\n\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def Is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if Is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if Is_palindrome(string[:i]):\n            return string + string[i-1::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(A: str, B: str) -> str:\n    # Convert the input strings into lists of integers\n    A = list(map(int, A))\n    B = list(map(int, B))\n\n    # Perform XOR operation on each pair of numbers and store the result\n    result = [a ^ b for a, b in zip(A, B)]\n\n    # Convert the result back to string and return\n    return ''.join(map(str, result))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n    else:\n        return max(strings, key=len)  # Return the longest string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(A: int, B: int) -> int:\n    if A < 0 or B < 0:  # Handle negative integers\n        raise ValueError(\"Both numbers must be non-negative\")\n\n    while B != 0:\n        A, B = B, A % B\n\n    return A"}
{"task_id": "HumanEval/14", "completion": "print(All_prefixes('abc'))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [note_to_beats[note] for note in music_string.split(' ') if note]\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n\n    # Split the input string into a list of numbers and sort them based on their numeric value\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n\n    # Join the sorted list back into a string with spaces as separators\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    pair = ()\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_diff:\n                min_diff = abs(numbers[i] - numbers[j])\n                pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n# Test the function with your example:\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "print(filter_integers(['A', 3.14, 5]))  # Outputs: [5]\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))  # Outputs: [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "print(strlen(''))  # This will output: 0\nprint(strlen('abc'))  # this will output: 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" for a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # This is the only case where n is a prime number and has no divisors other than 1 and itself"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\nprint(factorize(8))  # [2, 2, 2]\nprint(factorize(25))  # [5, 5]\nprint(factorize(70))  # [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}  # Dictionary to hold counts of numbers\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n\n    result = []  # Result list to hold unique numbers\n    for key, value in counts.items():\n        if value == 1:\n            result.append(key)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"task_id": "HumanEval/28", "completion": "print(concatenate([])) # Output: ''\nprint(concatenate(['A', 'b', 'c'])) # Output: 'abc'"}
{"task_id": "HumanEval/29", "completion": "You are given a function `filter_by_prefix` that takes in a list of strings and a prefix as input, and returns a new list containing only the strings from the original list that start with the specified prefix. The provided doctests explain how the function should behave when called with different inputs.\n\nHere's what you need to understand:\n- The `List[str]` type annotation means that the input and output parameters are expected to be lists of strings.\n- The `prefix` parameter is a string representing the prefix that we want to filter the strings by.\n- The function should return a new list containing only the strings from the original list that start with the given prefix.\n\nYour task is to implement the `filter_by_prefix` function according to the specified requirements and doctests."}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    # Using list comprehension to filter out negative numbers\n    return [num for num in l if num > 0]\n\n# Example usage:\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef Is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": ">>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    # Extract elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n    # Sort the extracted elements\n    sorted_divisible_by_three = sorted(divisible_by_three)\n\n    # Create a new list l' that is identical to l, except at indices divisible by three, which are equal to the sorted elements\n    l_prime = [sorted_divisible_by_three.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n\n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\n    return count\n\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]  # Get the indices of even elements\n    even_values = [l[i] for i in even_indices]  # Get the values at these even indices\n    sorted_even_values = sorted(even_values)  # Sort the even values\n\n    result = list(l)  # Create a copy of the original list to modify\n    for i, value in zip(even_indices, sorted_even_values):\n        result[i] = value  # Replace the even values in the copied list with their sorted counterparts\n\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with the encode_cyclic function and returns the decoded string.\n    \"\"\"\n    # Split the string into groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Reverse the cycling process by moving the last character to the first position in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n\nprint(decode_cyclic(\"bcdaefghijklmnopqrstuvwxyz\"))  # Output: abcdefghijklmnopqrstuvwxyz"}
{"task_id": "HumanEval/39", "completion": "from sympy import isprime\n\ndef prime_fib(n: int) -> int:\n    a, B = 0, 1\n    count = 0\n    while True:\n        A, B = B, A + B\n        if Isprime(A):\n            count += 1\n        if count == n:\n            return A\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # Output: [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(lst):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):  # Ensure distinct elements\n            if lst[i] + lst[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n# Testing the function with provided examples\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(A, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * A * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib4_values = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_values.append(sum(fib4_values[-4:]))\n        return fib4_values[n]"}
{"task_id": "HumanEval/47", "completion": "print(median([3, 1, 2, 4, 5]))  # Outputs: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Outputs: 15.0"}
{"task_id": "HumanEval/48", "completion": "def Is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if the given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n\n    >>> Is_palindrome('')\n    True\n    >>> Is_palindrome('aba')\n    True\n    >>> Is_palindrome('aaaaa')\n    True\n    >>> Is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text.replace(\" \", \"\").lower() == text[::-1].replace(\" \", \"\").lower()\n\n# Check function with provided data points\nassert Is_palindrome('') == True\nassert Is_palindrome('aba') == True\nassert Is_palindrome('aaaaa') == True\nassert Is_palindrome('zbcd') == False"}
{"task_id": "HumanEval/49", "completion": "The function `modp` takes two arguments: an integer `n` and an integer `p`. It returns the result of raising 2 to the power of `n` and then taking the modulo of `p`. This is commonly written as `(2^n) mod p`. The `>>>` symbol is used in Python for interactive testing, where it represents input and output.\n\nFor example:\n- `modp(3, 5)` will return `3` because \\(2^3 \\mod 5 = 8 \\mod 5 = 3\\).\n- `modp(1101, 101)` will return `2` because \\(2^{1101} \\mod 101\\) is a large number whose modulo with `101` is `2`.\n- `modp(0, 101)` will return `1` because \\(2^0 \\mod 101 = 1\\).\n\nThe function handles numeric issues by taking the modulus at each step of the calculation to prevent overflow or underflow."}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Encodes a given string by shifting each character in the alphabet by 5 positions.\n    The shift wraps around, meaning that after 'z', it goes back to 'a'.\n\n    :param s: The input string to be encoded.\n    :return: An encoded string with each character shifted by 5 positions.\n    \"\"\"\n    encoded_chars = [chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s]\n    return \"\".join(encoded_chars)\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Decodes a string that was encoded with the encode_shift function.\n    The decoding process reverses the shift operation, bringing back the characters to their original positions.\n\n    :param s: The input encoded string to be decoded.\n    :return: A decoded string with each character restored to its original position in the alphabet.\n    \"\"\"\n    decoded_chars = [chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s]\n    return \"\".join(decoded_chars)"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    # Define a string containing all vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Use a list comprehension to create a new string with only consonants\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:  # Defines the function with its parameters and return type\n    \"\"\"Add two numbers x and y.\n    >>> add(2, 3)  # Example usage of the function\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y  # Returns the sum of x and y\n\n# The function can be used as follows:\nresult1 = add(2, 3)\nprint(result1)  # Outputs: 5\n\nresult2 = add(5, 7)\nprint(result2)  # Outputs: 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    # Convert both strings to sets and compare them\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n# Test cases:\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    open_count = 0  # Initialize counter for open brackets\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_count += 1  # Increment counter for each opening bracket\n        elif bracket == \">\":\n            open_count -= 1  # Decrement counter for each closing bracket\n            if open_count < 0:  # If there are more closing brackets than opening ones\n                return False  # Return False immediately\n    return open_count == 0  # True if all open brackets have been matched"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    # Check for non-decreasing order\n    is_non_decreasing = all(x <= y for x, y in zip(l, l[1:]))\n    # Check for non-increasing order\n    is_non_increasing = All(x >= y for x, y in zip(l, l[1:]))\n    return is_non_decreasing or is_non_increasing\n\nprint(monotonic([1, 2, 4, 20]))  # Outputs: True\nprint(monotonic([1, 20, 4, 10]))  # Outputs: False\nprint(monotonic([4, 1, 0, -10]))  # Outputs: True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    # Initialize the largest prime factor\n    largest = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest = 2\n        n //= 2  # Use floor division to ensure integer result\n\n    # Now the number must be odd, start checking from 3\n    for i in range(3, int(n**0.5) + 1, 2):  # Only need to check up to square root of n\n        while n % i == 0:\n            largest = i\n            n //= i\n\n    # If n is a prime number greater than 2, it will be the largest factor\n    if n > 2:\n        largest = n\n\n    return largest"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def check_all_brackets_correct():\n    test_cases = {\n        \"(\": False,\n        \"()\": True,\n        \"(()())\": True,\n        \")(()\": False,\n        # Add more test cases as needed\n    }\n    for brackets, expected in test_cases.items():\n        result = correct_bracketing(brackets)\n        assert result == expected, f\"Failed on {brackets}: expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\ncheck_all_brackets_correct()"}
{"task_id": "HumanEval/62", "completion": "# For [3, 1, 2, 4, 5], where xs[0] = 3 (constant term), xs[1] = 1 (coefficient of x), etc.\nxs = [3, 1, 2, 4, 5]\n\n# derivative polynomial is x - 2x^2 + 4x^3 + 5x^4\ndxs = []\nfor i in range(1, len(xs)):  # start from index 1 to skip the constant term\n    dxs.append(i * xs[i])  # multiply each coefficient by its power (index)\n\nprint(dxs)  # Output: [1, 4, 12, 20]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, B, C = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def test_vowels_count():\n    assert vowels_count(\"abcde\") == 2, \"Case 'abcde' failed\"\n    assert vowels_count(\"ACEDY\") == 3, \"Case 'ACEDY' failed\"\n    assert vowels_count(\"quick\") == 1, \"Case 'quick' failed\"\n    assert vowels_count(\"rhythm\") == 0, \"Case 'rhythm' failed\"\n    assert vowels_count(\"AEIOUY\") == 6, \"Case 'AEIOUY' failed\"\n    assert vowels_count(\"bbb\") == 0, \"Case 'bbb' failed\"\n    assert vowels_count(\"yggdrasil\") == 2, \"Case 'yggdrasil' failed\"\n    assert vowels_count(\"\") == 0, \"Case '' (empty string) failed\"\n\ntest_vowels_count()"}
{"task_id": "HumanEval/65", "completion": "This function `circular_shift` takes two arguments: an integer `x` and an integer `shift`. The goal of the function is to rotate the digits of `x` to the right by `shift` positions and return the result as a string. If `shift` is greater than the number of digits in `x`, then the digits are reversed and returned as a string.\n\nHere's how the function works:\n\n1. Convert the integer `x` into its string representation using the built-in `str()` function, assigning it to variable `x_str`.\n2. Check if the value of `shift` is greater than the length of `x_str`. If so, reverse the digits of `x_str` using slicing: `x_str[::-1]`.\n3. If `shift` is less than or equal to the length of `x_str`, compute the new position for the first digit after rotation. This position will be equal to the difference between the length of `x_str` and `shift`. Assign this value to variable `new_pos`.\n4. Slice `x_str` from position `new_pos` onwards, and concatenate it with the remaining part of `x_str` before `new_pos`. This new string is assigned to variable `result`.\n5. Return `result`, which is a string representing the circular shifted digits of the original integer `x`.\n\nHere are some examples:\n\n- If you call `circular_shift(12, 1)`, it will return \"21\" because 2 is the first digit after rotating right by one position.\n- If you call `circular_shift(123, 3)`, it will return \"321\" because the digits are reversed as there are more than three digits and shift is greater than the number of digits."}
{"task_id": "HumanEval/66", "completion": "def digit_sum(s):\n    return sum([ord(c) for c in s if c.isupper()])\n\nprint(digit_sum(\"\")) # 0\nprint(digit_sum(\"abAB\")) # 131\nprint(digit_sum(\"abcCd\")) # 67\nprint(digit_sum(\"helloE\")) # 69\nprint(digit_sum(\"woArBld\")) # 131\nprint(digit_sum(\"aAaaaXA\")) # 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    numbers = [int(word) for word in s.split() if word.isdigit()]\n    apples, oranges = numbers[0], numbers[1]\n\n    # Calculate the number of mango fruits\n    mangos = n - apples - oranges\n\n    return mangos"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(n, i) for i, n in enumerate(arr) if n % 2 == 0]\n    if not even_nodes:  # no even nodes\n        return []\n    else:\n        min_val = min(even_nodes, key=lambda x: (x[0], -x[1]))\n        return list(min_val)"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    max_valid = -1\n    for key, value in freq.items():\n        if key <= value and key > max_valid:\n            max_valid = key\n    return max_valid"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while len(sorted_list) > 0:\n        # Add minimum value\n        result.append(sorted_list[0])\n        del sorted_list[0]\n        if len(sorted_list) == 0:\n            break\n        # Add maximum value\n        result.append(sorted_list[-1])\n        del sorted_list[-1]\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(A, B, C):\n    # Check if the sides form a valid triangle\n    if A + B <= C or A + C <= B or B + C <= A:\n        return -1  # Return -1 if not a valid triangle\n    else:\n        s = (A + B + C) / 2  # Semi-perimeter of the triangle\n        area = (s*(s-A)*(s-B)*(s-C)) ** 0.5  # Heron's formula\n        return round(area, 2)  # Round area to 2 decimal places and return it"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if list is palindromic\n    if q != q[::-1]:\n        return False\n\n    # Calculate total weight of the object\n    total_weight = sum(q)\n\n    # Check if object is too heavy\n    if total_weight > w:\n        return False\n\n    # If it passes both checks, the object will fly\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n\n    return changes\n\n# Example usage:\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))       # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n\n    return lst1 if count1 <= count2 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    # Check if A is less than 100\n    if A < 100:\n        # Initialize list of primes\n        primes = [2,3,5,7,11,13,17,19,23,29,31]\n        count = 0\n        for prime in primes:\n            if A % prime == 0:\n                A //= prime\n                count += 1\n        # Check if there are exactly three factors\n        return count == 3\n    else:\n        return False\n\nprint(is_multiply_prime(30))  # Output: True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        i = 2\n        while i * n <= x:\n            if i * n == x:\n                return True\n            i += 1\n        return False"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    return round(abs(a) ** (1. / 3))**3 == abs(a)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    A function that can output a list of letter grades using the following table:\n\n             GPA    |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n\n    # Define a list to hold the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the corresponding letter grade based on the GPA value\n        if gpa >= 4.0:\n            grade = \"A+\"\n        elif gpa > 3.7:\n            grade = \"A\"\n        elif gpa > 3.3:\n            grade = \"A-\"\n        elif gpa > 3.0:\n            grade = \"B+\"\n        elif gpa > 2.7:\n            grade = \"B\"\n        elif gpa > 2.3:\n            grade = \"B-\"\n        elif gpa > 2.0:\n            grade = \"C+\"\n        elif gpa > 1.7:\n            grade = \"C\"\n        elif gpa > 1.3:\n            grade = \"C-\"\n        elif gpa > 1.0:\n            grade = \"D+\"\n        elif gpa > 0.7:\n            grade = \"D\"\n        elif gpa > 0.0:\n            grade = \"D-\"\n        else:\n            grade = \"E\"\n\n        # Add the corresponding letter grade to the list\n        letter_grades.append(grade)\n\n    # Return the list of letter grades\n    return letter_grades\n\n# Test the function with an example input\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    n = len(string)\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 2  # only two numbers (1,10) meet this condition\n    else:\n        return 18 * (10 ** (n - 2))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # initialize sum to 0\n    sum = 0\n  \n    # loop through each digit in N\n    for num in str(N):\n        # convert the digit to an integer and add it to sum\n        sum += int(num)\n  \n    # return the sum converted to binary\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(1, len(lst), 2):  # iterate over odd indices\n        if lst[i] % 2 == 0:  # check if the element is even\n            result += lst[i]\n    return result\n\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return \" \".join([''.join(sorted(word)) for word in s.split(' ')])"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row[::-1]) if val == x], key=lambda tup: (tup[0], -tup[1]))\n\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1))\n# Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))\n# Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))\n# Output: [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    if not arr:  # Check if the array is empty\n        return []\n    else:\n        sum_val = arr[0] + arr[-1]  # Calculate sum of first and Last elements\n        if sum_val % 2 == 0:  # If sum is even\n            arr.sort(reverse=True)  # Sort array in descending order\n        else:  # If sum is odd\n            arr.sort()  # Sort array in ascending order\n    return arr"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():  # check if character is a letter\n            shifted_char = chr((ord(s[i]) - 97 + (2 * 2) % 26) + 97)\n            result += shifted_char\n        else:  # if not a letter, add the same character to the result string\n            result += s[i]\n\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:  # check if list is empty or has less than two elements\n        return None\n\n    unique = sorted(set(lst))  # sort unique values in the list\n\n    if len(unique) < 2:  # check if there are at least two unique values\n        return None\n\n    return unique[1]  # return second smallest element"}
{"task_id": "HumanEval/91", "completion": "def Is_bored(S):\n    sentences = S.split('.')\n    counter = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0].lower() == \"i\":\n            counter += 1\n    return counter\n\n# Test the function\nprint(Is_bored(\"Hello world\"))  # Output: 0\nprint(Is_bored(\"The sky is blue. The sun is shining. i love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return x + y == z or x + z == y or y + z == x\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n\n    for char in message:\n        if char.isalpha():  # Check if character is a letter\n            if char.lower() in vowels:\n                new_char_index = (vowels.index(char) + 2) % len(vowels) # Calculate the index of the new vowel\n                new_char = vowels[new_char_index]  # Get the new vowel from vowels string\n            else:\n                new_char = char\n\n            if char.islower():\n                new_char = new_char.upper()  # Swap case for lowercase letters\n            else:\n                new_char = new_char.lower()  # Swap case for uppercase letters\n\n        encoded_message += new_char  # Append the encoded character to the encoded message\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False  # Return False if dictionary is empty\n\n    lower_keys = set(k.islower() for k in dictionary)\n    upper_keys = set(k.isupper() for k in dictionary)\n\n    # If both sets are empty, it means all keys are strings with mixed case.\n    return lower_keys or upper_keys"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]: \n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return [x for x in range(2, n) if sieve[x]]\n\nprint(count_up_to(5))  # => [2, 3]\nprint(count_up_to(11)) # => [2, 3, 5, 7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20)) # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18)) # => [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(B) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2): # iterate over even indices\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. for example, closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # convert the string to a float\n    num = float(value)\n    \n    # get the integer part of the number\n    int_part = int(num)\n    \n    # check if the decimal part is exactly 0.5\n    if abs(num - int_part) == 0.5:\n        return int_part + (1 if num > int_part else -1)  # round away from zero\n    else:\n        return round(num)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    next_number = n + 1 if n % 2 == 0 else n + 2\n    for _ in range(n - 1):\n        stones.append(next_number)\n        next_number += 2\n    return stones\n\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Split the string at either commas or spaces, and remove any empty strings from the result.\n    return [word for word in s.replace(\",\", \" \").split() if word]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(y, x-1, -1):  # start from y and go down to x (inclusive)\n        if i % 2 == 0:   # if the number is even\n            return i     # return it\n    return -1    # If we've gone through the range without finding an even number, return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = round((n + m) / 2)\n    binary_representation = bin(average)\n\n    return binary_representation"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all([int(i)%2 != 0 for i in str(num)]):\n            result.append(num)\n    return sorted(list(set(result)))\n\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter out numbers that are not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= abs(num) <= 9]\n\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Replace each digit by its corresponding name\n    named_arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result_arr = [named_arr[num - 1] for num in reversed_arr]\n\n    return result_arr"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # if i is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # If i is odd\n            summation = sum(range(1, i+1))\n            result.append(summation)\n    return result\n\n# Test the function with example input\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([x for x in arr if sum(int(digit) for digit in str(abs(x))) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n\n    # find the point of rotation (the smallest index where arr[i] > arr[i+1])\n    rotation = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            rotation = i + 1\n            break\n\n    # if no rotation needed, return True\n    if rotation == -1:\n        return True\n\n    # Check if the array is sorted after the rotation\n    for i in range(rotation, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n\n    # Check the first element with last one\n    if arr[0] < arr[-1]:\n        return False\n\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 If num % 2 == 0)\n    return \"YES\" if odd_count <= even_count else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test: return {}\n    words = test.split()\n    dic_counts = {word : words.count(word) for word in set(words)}\n    max_count = max(dic_counts.values())\n    return {key:val for key, val in dic_counts.items() if val == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])  # remove characters in 'c' from 's'\n    return (s[::-1], s == s[::-1])  # return tuple of reversed string and palindrome check"}
{"task_id": "HumanEval/113", "completion": "This is a Python function that takes a list of strings as input. Each string contains only digits. The function returns a list with strings where each string states the number of odd elements in the corresponding string from the input list.\n\nHere's how it works:\n\n- It iterates over each string in the input list.\n- For each string, it counts the number of odd digits.\n- Then, using f-strings (formatted string literals), it constructs a new string with the count of odd elements replacing the placeholders in the template string (\"the number of odd elements 4n the str4ng 4 of the 4nput.\").\n\nFor example:\n- For the input ['1234567'], it counts that there are 4 odd numbers, so it outputs [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n- for the input ['3', '11111111'], it counts that there is only 1 odd number in the first string and 8 in the second one, so it outputs [\"the number of odd elements 1n THE str1ng 1 OF the 1NPUT.\", \"the number of odd elements 8n THE str8ng 8 OF THE 8NPUT.\"]\n\nThis function is useful when you want to count the number of odd elements in a series of digit strings and display this information in a human-readable format."}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty subarray\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if not nums:  # if array is empty, return 0\n        return 0\n\n    current_sum = min_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)  # If adding the number to the subarray makes it smaller, add it. Otherwise, start a new subarray from this number\n        min_sum = min(min_sum, current_sum)  # If the current subarray is smaller than our best so far, update the best\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, bucket_capacity):\n    # Calculate the total number of water units in each column (well)\n    column_water = [sum(column) for column in zip(*grid)]\n\n    # Calculate the number of times buckets need to be lowered by dividing the water in each well by the bucket capacity and rounding up\n    num_lowerings = [math.ceil(water/bucket_capacity) for water in column_water]\n\n    # Return the sum of all lowerings, as it represents the total number of times buckets need to be lowered\n    return sum(num_lowerings)"}
{"task_id": "HumanEval/116", "completion": "def count_ones(num):\n    return bin(num).count('1')\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\nprint(sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "import re\n\ndef select_words(s, n):\n    if not s:\n        return []\n    \n    # Regex pattern to match words containing exactly n consonants.\n    pattern = r'\\b\\w*[bcdfghjklmnpqrstvwxyz]{' + str(n) + r'}\\w*\\b'\n\n    words = re.findall(pattern, s, re.IGNORECASE)\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # Define vowels and consonants\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\n    # Check each character from the end to the beginning of the word\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in consonants and word[i+1] in vowels and word[i-1] in consonants:\n            return word[i]\n\n    # If no such vowel is found, return an empty string\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    # Initialize a min-heap with size k.\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining elements in arr.\n    for num in arr[k:]:\n        # If the current element is greater than the smallest element in the heap,\n        # replace it with the current element and re-heapify.\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n\n    # Return the sorted list of k largest elements from arr.\n    return sorted(heap, reverse=True)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):  # iterate over elements at odd positions (i.e., indices 1, 3, 5, ...)\n        if lst[i] % 2 != 0:  # check if the element is odd\n            sum += lst[i]  # add it to the sum if it's odd\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum([num for num in arr[:k] if 0 < num < 100])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Initialize an empty list to store odd numbers in Collatz sequence\n    odd_numbers = []\n\n    while n != 1:  # Continue until n becomes 1\n        if n % 2 == 1:  # Check if n is odd\n            odd_numbers.append(n)  # Add the odd number to the list\n        n = 3 * n + 1 if n % 2 else n // 2  # Calculate next term in Collatz sequence\n\n    odd_numbers.append(1)  # Add 1 as it is a part of every Collatz sequence and also an odd number\n    odd_numbers.sort()  # Sort the list in increasing order\n\n    return odd_numbers"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if date string is empty\n    if not date:\n        return False\n\n    # Split date string into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n\n    # Check if month is valid (1-12)\n    if not (1 <= month <= 12):\n        return False\n\n    # Check if day is valid for given month\n    if month in [1,3,5,7,8,10,12]:\n        if not (1 <= day <= 31):\n            return False\n    elif month in [4,6,9,11]:\n        if not (1 <= day <= 30):\n            return False\n    else:  # month is 2\n        if not (1 <= day <= 29):\n            return False\n\n    # If all checks pass, date is valid\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 0)"}
{"task_id": "HumanEval/126", "completion": "def Is_sorted(lst):\n   return lst == sorted(lst) and len([i for i, j in zip(lst, lst[1:]) if i == j]) == 0"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # Find the maximum start value and minimum end value of the two intervals\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n\n    # Check if there is no intersection between the intervals\n    if start_max > end_min:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = end_min - start_max + 1\n\n    # Check if the intersection length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    for num in arr:\n        product *= -1 if num < 0 else (1 if num > 0 else 0)\n    \n    return product * sum([abs(num) for num in arr])"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    path = []\n    min_path = [float('inf')] * N*N + [0]\n\n    def dfs(x, y, step):\n        nonlocal path, min_path\n        if step == k:\n            path = [grid[y][x]] + path\n            if path < min_path:\n                min_path = path.copy()\n            return\n\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[ny][nx]:\n                visited[ny][nx] = True\n                dfs(nx, ny, step + 1)\n                visited[ny][nx] = False\n\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n            path = [grid[i][j]]\n            dfs(j, i, 1)\n            visited[i][j] = False\n\n    return min_path[:-1]  # Exclude the last element which is always 0"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        sequence = [3, 2]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(i / 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + (sequence[i + 1] if i < n else 3))\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "from functools import reduce\n\ndef digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    return 0 if len(odd_digits) == 0 else reduce(lambda x, y: x*y, odd_digits)\n\n# Example usage:\nprint(digits(1))  # Output: 1\nprint(digits(4))  # Output: 0\nprint(digits(235)) # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # if there is more than one element left in stack, then at least one bracket was nested\n    return len(stack) > 1\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x) ** 2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty or the last character is not a letter\n    if not txt or not txt[-1].isalpha():\n        return False\n\n    # Check if the last character is preceded by a space (not part of a word)\n    # If it's the only character, it's considered as not part of a word\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_neg = min_pos = None\n\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(A, B):\n    # convert string to float if necessary\n    if isinstance(A, str) and ',' in A:\n        A = float(A.replace(',', '.'))\n    if isinstance(B, str) and ',' in B:\n        B = float(B.replace(',', '.'))\n\n    # check if types are the same\n    if type(A) == type(B):\n        if A == B:\n            return None\n        else:\n            return max(A, B)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # Check if n is less than the minimum sum of 4 even numbers (2+2+2+2=8)\n    if n < 8:\n        return False\n\n    # Since the smallest sum of 4 positive even numbers is 8, start checking from 8\n    for i in range(8, n + 1):\n        # If 'i' itself is even and it can be divided into exactly 4 parts of 2 each (sum = 8), then return True\n        if i % 2 == 0:\n            return True\n\n    # If no such number is found, return False\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a given integer n.\"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result\n\n# Test the function with example input\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.extend(['_'] * consecutive_spaces)\n            result.append(char)\n            consecutive_spaces = 0\n\n    # Handle trailing spaces\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.extend(['_'] * consecutive_spaces)\n\n    return ''.join(result)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    digit_count = sum(c.isdigit() for c in file_name)\n    dot_count = file_name.count('.')\n\n    if digit_count > 3 or dot_count != 1:\n        return 'No'\n\n    name, extension = file_name.split('.')\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    if not name[0].isalpha() or extension not in valid_extensions:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n\nprint(sum_squares([1,2,3]))  # Outputs: 6\nprint(sum_squares([]))  # Outputs: 0\nprint(sum_squares([-1,-5,2,-1,-5]))  # Outputs: -126"}
{"task_id": "HumanEval/143", "completion": "def isPrime(n):\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if IsPrime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # split the fractions into numerator and denominator\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n\n    # calculate the product of the fractions\n    product_numerator = num1 * num2\n    product_denominator = denom1 * denom2\n\n    # check if the product is a whole number by checking if the remainder of \n    # division of both numerators and denominators is zero\n    if product_numerator % product_denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Calculate the sum of digits for each number, ignoring the sign\n    sums = [sum([int(d) for d in str(abs(n))]) for n in nums]\n\n    # Create a list of tuples containing the original index and the sum of digits\n    indexed_sums = [(i, s) for i, s in enumerate(sums)]\n\n    # Sort the list based on sums (primary key) and indices (secondary key)\n    sorted_indices = sorted(indexed_sums, key=lambda x: (x[1], x[0]))\n\n    # Create a new list containing the original numbers in their new order\n    result = [nums[i] for i, _ in sorted_indices]\n\n    return result"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(abs(num)) and is_first_last_digit_odd(abs(num)):\n            count += 1\n    return count\n\ndef is_odd(n):\n    return n % 2 != 0\n\ndef is_first_last_digit_odd(n):\n    str_num = str(n)\n    return isOddDigit(int(str_num[0])) and IsOddDigit(int(str_num[-1]))\n\ndef IsOddDigit(n):\n    return n in [1, 3, 5, 7, 9]"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]  # create list with values of a[i]\n    count = 0  # initialize count of valid triples\n\n    for i in range(len(a)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:  # check if sum of elements is a multiple of 3\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # List of planets sorted by proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    try:\n        # Get indices of planet1 and planet2 in the list\n        pos1, pos2 = planets.index(planet1), planets.index(planet2)\n    except ValueError:\n        # If either planet is not found in the list, return an empty tuple\n        return ()\n\n    if pos1 > pos2:\n        # Ensure pos1 is always less than pos2 for correct slicing\n        pos1, pos2 = pos2, pos1\n\n    # Return the slice of the list between pos1 and pos2 (exclusive)\n    return tuple(planets[pos1+1:pos2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_lengths = [word for word in lst if len(word) % 2 == 0]\n  \n    # Sort the list by length, then alphabetically\n    even_lengths.sort(key=lambda x: (len(x), x))\n\n    return even_lengths"}
{"task_id": "HumanEval/150", "completion": "def isPrime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    return x if IsPrime(n) else y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst: # if the list is empty, return 0\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i % 2 != 0 and i >= 0:  # Check if number is odd and non-negative\n                sum += i ** 2 # Square the number and add to sum\n        return sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(a-B) for A, B in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    max_strength = None\n    strongest_ext = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if max_strength is None or strength > max_strength:\n            max_strength, strongest_ext = strength, ext\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(A, B):\n    # Create all rotation of the second word and check if any of them are substring of the first word\n    for i in range(len(B)):\n        rotated = B[i:] + B[:i]\n        if rotated in A:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    # Convert the integer to a string and split it into individual digits\n    digits = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    # Count the number of even and odd digits\n    for digit in digits:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return a tuple with the counts\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()\n\n# Test cases to verify the solution\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides to make sure 'c' is the longest side\n    sides = sorted([A, b, c])\n    # Check if the sum of squares of the two shorter sides equals the square of the longest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Create a list of tuples, where each tuple contains the word and the number of unique characters in it\n    word_list = [(word, len(set(word))) for word in words]\n\n    # Sort the list first by number of unique characters (in descending order), then lexicographically\n    sorted_words = sorted(word_list, key=lambda x: (-x[1], x[0]))\n\n    # Return the word with maximum number of unique characters. If there are multiple words with the same number, \n    # return the one which comes first in lexicographical order.\n    return sorted_words[0][0] if sorted_words else \"\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the total number of carrots after eating\n    total_eaten = min(need, remaining) + number\n    # Calculate the remaining carrots after eating\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]\n\n# Test cases:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10)) # Output: [11, 0]\nprint(eat(2, 11, 5))  # Output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def Do_algebra(operator, operand):\n    # Initialize an empty stack\n    stack = []\n\n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Pop two numbers from the stack\n        num2 = stack.pop()\n        num1 = stack.pop()\n\n        # Apply the operator to the numbers\n        if operator[i] == '+':\n            result = num1 + num2\n        elif operator[i] == '-':\n            result = num1 - num2\n        elif operator[i] == '*':\n            result = num1 * num2\n        elif operator[i] == '//':\n            result = num1 // num2\n        else:  # operator[i] == '**'\n            result = num1 ** num2\n\n        # Push the result back onto the stack\n        stack.append(result)\n\n    # The final result is left in the stack, so pop it and return it\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}

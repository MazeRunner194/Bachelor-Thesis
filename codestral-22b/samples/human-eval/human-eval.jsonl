{"task_id": "HumanEval/0", "completion": "sorted_numbers = sorted(numbers)\n\n   for i in range(1, len(sorted_numbers)):\n       if abs(sorted_numbers[i] - sorted_numbers[i-1]) < threshold:\n           return True\n\n   return False"}
{"task_id": "HumanEval/1", "completion": "result = []\n    count = 0\n    start = 0\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n\n        # When count is back to zero, we have completed a group.\n        if count == 0:\n            result.append(paren_string[start:i+1].replace(' ', ''))\n            start = i + 1\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "return number % 1"}
{"task_id": "HumanEval/3", "completion": "balance = 0\n   for operation in operations:\n       balance += operation\n       if balance < 0:\n           return True\n   return False"}
{"task_id": "HumanEval/4", "completion": "if not numbers:\n        return 0\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "return sum([[i, delimeter] for i in numbers[:-1]], []) + numbers[-1:] if numbers else []"}
{"task_id": "HumanEval/6", "completion": "def max_depth(s):\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n    return [max_depth(s) for s in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "total = 0\n    product = 1\n\n    for number in numbers:\n        total += number\n        product *= number\n\n    return total, product"}
{"task_id": "HumanEval/9", "completion": "max_so_far = float('-inf')\n   result = []\n   for num in numbers:\n       if num > max_so_far:\n           max_so_far = num\n       result.append(max_so_far)\n   return result"}
{"task_id": "HumanEval/10", "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\nprint(make_palindrome(''))\nprint(make_palindrome('cat'))\nprint(make_palindrome('cata'))"}
{"task_id": "HumanEval/11", "completion": "result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\nprint(string_xor('010', '110'))"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    max_len = len(strings[0])\n    result = strings[0]\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            result = string\n    return result"}
{"task_id": "HumanEval/13", "completion": "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "return \" \".join(str(i) for i in range(n + 1))\n\n# Test cases\nprint(string_sequence(0)) # '0'\nprint(string_sequence(5)) # '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "# Convert the string to a set. A set in Python is an unordered collection of unique elements.\n    # By converting the string to a set, we automatically remove any duplicate characters.\n    distinct_chars = set(string)\n\n    # Return the length of the set, which will give us the number of distinct characters in the string.\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "beat_values = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split(' ')\n    beats = []\n\n    for note in music_list:\n        if note in beat_values:\n            beats.append(beat_values[note])\n        else:\n            raise ValueError(f\"Invalid musical note: {note}\")\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            # substring found, increment the count and update the search position\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "number_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n   reversed_number_dict = {v:k for k,v in number_dict.items()}\n   numbers_list = numbers.split(' ')\n   sorted_numbers = sorted([number_dict[i] for i in numbers_list])\n   return ' '.join(reversed_number_dict[j] for j in sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n   min_diff = float('inf')\n   pair = (None, None)\n   for i in range(len(numbers)-1):\n       diff = abs(numbers[i] - numbers[i+1])\n       if diff < min_diff:\n           min_diff = diff\n           pair = (min(numbers[i], numbers[i+1]), max(numbers[i], numbers[i+1]))\n   return pair"}
{"task_id": "HumanEval/21", "completion": "min_value = min(numbers)\n    max_value = max(numbers)\n    scale = max_value - min_value\n\n    return [(n - min_value) / scale for n in numbers]"}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "i = 0\n    for _ in string:\n        i += 1\n    return i"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n\n# test cases\nprint(largest_divisor(15)) # should print 5\nprint(largest_divisor(37)) # should print 1\nprint(largest_divisor(48)) # should print 24\nprint(largest_divisor(100)) # should print 50"}
{"task_id": "HumanEval/25", "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = []\n    divisor = 2\n\n    while n != 1:\n        while is_prime(divisor) and n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n\n    return sorted(factors)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/26", "completion": "return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/27", "completion": "return \"\".join([char.upper() if char.islower() else char.lower() for char in string])"}
{"task_id": "HumanEval/28", "completion": "return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/30", "completion": "# your code goes here\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def bisection_method(xs, a, b, epsilon=1e-7):\n       while abs(b - a) > epsilon:\n           c = (a + b) / 2\n           if poly(xs, a) * poly(xs, c) < 0:\n               b = c\n           else:\n               a = c\n       return c\n\n   def find_zero(xs):\n       n = len(xs) - 1\n       if n % 2 != 0 or xs[n] == 0:\n           raise ValueError(\"Invalid input coefficients\")\n\n       # Find the interval [a, b] such that poly(xs, a) < 0 and poly(xs, b) > 0\n       a = -1\n       while poly(xs, a) > 0:\n           a *= 2\n       b = 0\n       while poly(xs, b) < 0:\n           b *= 2\n\n       return bisection_method(xs, a, b)\n\n# Test cases\nprint(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3"}
{"task_id": "HumanEval/33", "completion": "thirds = sorted(l[::3])\n   l[::3] = thirds\n   return l"}
{"task_id": "HumanEval/34", "completion": "return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "m = l[0]\n   for i in range(len(l)):\n       if l[i] > m:\n           m = l[i]\n   return m"}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(11, n, 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "# Step 1: Extract the even-indexed elements\n    evens = sorted(l[::2])\n\n    # Step 2: Put the even-indexed elements back into their original indices\n    for i in range(len(evens)):\n        l[i * 2] = evens[i]\n\n    return l"}
{"task_id": "HumanEval/38", "completion": "# split string to groups of each length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# test cases\ns = \"abcdefgh\"\nencoded_s = encode_cyclic(s)\ndecoded_s = decode_cyclic(encoded_s)\nassert s == decoded_s\n\ns = \"a\"\nencoded_s = encode_cyclic(s)\ndecoded_s = decode_cyclic(encoded_s)\nassert s == decoded_s\n\ns = \"ab\"\nencoded_s = encode_cyclic(s)\ndecoded_s = decode_cyclic(encoded_s)\nassert s == decoded_s"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    count = 0\n    for num in fibonacci():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n\nprint(prime_fib(1)) # Output: 2\nprint(prime_fib(2)) # Output: 3\nprint(prime_fib(3)) # Output: 5\nprint(prime_fib(4)) # Output: 13\nprint(prime_fib(5)) # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n       l.sort() # sort the list first\n       for i in range(len(l)-2):\n           left = i+1\n           right = len(l) - 1\n           while left < right:\n               if l[i] + l[left] + l[right] == 0:\n                   return True\n               elif l[i] + l[left] + l[right] < 0:\n                   left += 1\n               else:\n                   right -= 1\n       return False\n\n# test cases\nprint(triples_sum_to_zero([1, 3, 5, 0])) # False\nprint(triples_sum_to_zero([1, 3, -2, 1])) # True\nprint(triples_sum_to_zero([1, 2, 3, 7])) # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # True\nprint(triples_sum_to_zero([1])) # False"}
{"task_id": "HumanEval/41", "completion": "# Each car will eventually meet every other car driving in the opposite direction.\n    # Since each pair of cars only collides once, the total number of collisions is n * n = n^2.\n    return n ** 2"}
{"task_id": "HumanEval/42", "completion": "return [num + 1 for num in l]"}
{"task_id": "HumanEval/43", "completion": "n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n        if x == 0:\n            return \"0\"\n        result = \"\"\n        while x > 0:\n            result = str(x % base) + result\n            x //= base\n        return result"}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h\n\nprint(triangle_area(5, 3)) # should print 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n       if n == 0: return 0\n       if n == 1 or n == 2: return 0\n       if n == 3: return 2\n\n       a, b, c, d = 0, 0, 2, 0\n       for _ in range(4, n+1):\n           a, b, c, d = b, c, d, (a + b + c + d)\n       return d"}
{"task_id": "HumanEval/47", "completion": "l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length//2] + l[length//2 - 1]) / 2\n    else:\n        return l[length//2]"}
{"task_id": "HumanEval/48", "completion": "def test(text: str):\n        # remove all non-alphanumeric characters and convert to lower case\n        text = ''.join(filter(str.isalnum, text)).lower()\n        return text == text[::-1]\n\n    assert is_palindrome('') == True\n    assert is_palindrome('aba') == True\n    assert is_palindrome('aaaaa') == True\n    assert is_palindrome('zbcd') == False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n       return pow(2, n, p)\n\nprint(modp(3, 5)) # 3\nprint(modp(1101, 101)) # 2\nprint(modp(0, 101)) # 1\nprint(modp(3, 11)) # 8\nprint(modp(100, 101)) # 1"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n   return ''.join([char for char in text if char.lower() not in vowels])"}
{"task_id": "HumanEval/52", "completion": "for num in l:\n       if num >= t:\n           return False\n   return True"}
{"task_id": "HumanEval/53", "completion": "return x + y\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/54", "completion": "s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1"}
{"task_id": "HumanEval/55", "completion": "if n <= 0:\n        return \"Invalid input! Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n\nprint(fib(10)) # Output: 34\nprint(fib(1)) # Output: 0\nprint(fib(8)) # Output: 13\n\nNote: The fib function is returning the n-th number in the Fibonacci sequence, not the (n+1)-th number as stated in your docstring. So the correct implementation and examples are given above."}
{"task_id": "HumanEval/56", "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n            if count < 0: # if we have more closing brackets than opening ones\n                return False\n    return count == 0 # True if every opening bracket has a corresponding closing one\n\n# Test cases\nprint(correct_bracketing(\"<\"))        # False\nprint(correct_bracketing(\"<>\"))       # True\nprint(correct_bracketing(\"<<><>>\"))   # True\nprint(correct_bracketing(\"><<>\") )    # False"}
{"task_id": "HumanEval/57", "completion": "if len(l) < 3:\n        return True\n\n    delta = l[1] - l[0]\n    for i in range(2, len(l)):\n        if (delta >= 0 and l[i] - l[i-1] < 0) or (delta <= 0 and l[i] - l[i-1] > 0):\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "return sorted(set(l1) & set(l2))\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])) # Expected: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2])) # Expected: [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    largest = 0\n    for i in range(2, n):\n        if is_prime(i) and n % i == 0:\n            largest = i\n    return largest\n\nprint(largest_prime_factor(13195)) # should print 29\nprint(largest_prime_factor(2048))   # should print 2"}
{"task_id": "HumanEval/60", "completion": "total = 0\n   for i in range(1, n + 1):\n       total += i\n   return total\n\n# Testing the function\nprint(sum_to_n(30))   # should print 465\nprint(sum_to_n(100))  # should print 5050\nprint(sum_to_n(5))    # should print 15\nprint(sum_to_n(10))   # should print 55\nprint(sum_to_n(1))    # should print 1"}
{"task_id": "HumanEval/61", "completion": "left = 0\n    right = 0\n\n    for bracket in brackets:\n        if bracket == '(':\n            left += 1\n        elif bracket == ')':\n            right += 1\n\n        if right > left:\n            return False\n\n    return left == right"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n        return [i * x for i, x in enumerate(xs)][1:]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 3:\n        return [0, 0, 1][n]\n    dp = [0] * (n + 1)\n    dp[1], dp[2], dp[3] = 0, 0, 1\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]"}
{"task_id": "HumanEval/64", "completion": "# initialize a count to keep track of vowels\n    count = 0\n    # convert the string to lowercase to handle different cases\n    s = s.lower()\n    # iterate through each character in the string\n    for i in range(len(s)):\n        # check if the character is a vowel (or 'y' at the end of the word)\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            # increment the count if it is a vowel\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            # increment the count if 'y' is at the end of the word\n            count += 1\n    return count\n\n# test cases\nprint(vowels_count(\"abcde\")) # should print 2\nprint(vowels_count(\"ACEDY\")) # should print 3\nprint(vowels_count(\"AEIOUY\")) # should print 6\nprint(vowels_count(\"BCDFGH\")) # should print 0\nprint(vowels_count(\"XYZ\"))    # should print 0\nprint(vowels_count(\"AaEeIiOoUuYy\")) # should print 10"}
{"task_id": "HumanEval/65", "completion": "# convert integer to string for easier manipulation\n    x = str(x)\n\n    # if shift is greater than the number of digits, reverse the string\n    if shift >= len(x):\n        return x[::-1]\n\n    # circular shift: take last 'shift' digits and move them to the front\n    shifted_digits = x[-shift:] + x[:-shift]\n    return shifted_digits"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n       return sum([ord(c) for c in s if c.isupper()])\n\n# Test cases:\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153"}
{"task_id": "HumanEval/67", "completion": "# Extract the number of apples and oranges from the string\n    apple_count = int(s.split()[0])\n    orange_count = int(s.split()[-2])\n\n    # Calculate the number of mangoes\n    mango_count = n - apple_count - orange_count\n\n    return mango_count\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\",120)) # Output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # get all even numbers with their indices\n    evens = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]\n\n    # return the smallest value (if any) and its index\n    if evens:\n        return min(evens)\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "# create a dictionary to count the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # iterate over the integers in descending order\n    for i in range(max(lst), 0, -1):\n        # if the frequency of the integer is greater than or equal to its value, return it\n        if i in freq and freq[i] >= i:\n            return i\n\n    # if no such integer is found, return -1\n    return -1"}
{"task_id": "HumanEval/70", "completion": "lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        # Get the minimum value and append it to the result list\n        sorted_lst.append(lst[0])\n        # Remove the appended element from the original list\n        lst.pop(0)\n        if len(lst) == 0:\n            break\n        # Get the maximum value from the remaining elements and append it to the result list\n        sorted_lst.append(lst[-1])\n        # Remove the appended element from the original list\n        lst.pop(-1)\n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "# Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n\n    # Check if the three sides form a valid triangle\n    if (s * (s - a) * (s - b) * (s - c)) > 0:\n        # Calculate the area using Heron's formula\n        area = round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        area = -1\n\n    return area"}
{"task_id": "HumanEval/72", "completion": "test_cases = [\n    ([1, 2], 5),\n    ([3, 2, 3], 1),\n    ([3, 2, 3], 9),\n    ([3], 5)\n]\n\nfor q, w in test_cases:\n    print(will_it_fly(q, w))"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n\n    return count"}
{"task_id": "HumanEval/74", "completion": "sum_lst1 = sum(len(i) for i in lst1)\n    sum_lst2 = sum(len(i) for i in lst2)\n\n    return lst1 if sum_lst1 <= sum_lst2 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def is_multiply_prime(a):\n        count = 0\n        for i in range(2, a // 3 + 1):\n            if a % i == 0 and is_prime(i) and is_prime(a // i) and a // (i * i) != i and is_prime(a // (i * i)):\n                count += 1\n        return count >= 3\n\n    print(is_multiply_prime(30)) # Output: True\n\n# In the given function, first we define a helper function `is_prime()` to check if a number is prime. Then in `is_multiply_prime()`, we iterate from 2 to `a // 3 + 1` and for each number `i` that divides `a`, we check if `i`, `a // i` and `a // (i * i)` are all prime and distinct. If such a number is found, we increment the count of prime factors. Finally, we return True if the count is at least 3, indicating that `a` is the multiplication of at least three prime numbers.\n# For example, in `is_multiply_prime(30)`, it checks for divisors from 2 to 10 (as 30 // 3 + 1 = 10). It finds that 2 and 3 are both prime factors of 30, and 15 (which is 30 // 2) is also a prime factor. So the count becomes 3, and it returns True."}
{"task_id": "HumanEval/76", "completion": "if x < n:\n        return False\n\n    power = int(x ** (1 / float(n)))\n    return x == n**power"}
{"task_id": "HumanEval/77", "completion": "def is_perfect_cube(n):\n       n = abs(n) # we don't care about negative numbers for this problem.\n       cube_root = round(n**(1./3)) # get the cube root and round it to the nearest integer.\n       return cube_root ** 3 == n # if cubing the rounded cube root equals the original number, then the number is a perfect cube."}
{"task_id": "HumanEval/78", "completion": "# Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(n**0.5) + 1, 2):\n                if n % i == 0:\n                    return False\n            return True\n\n    # Convert the hexadecimal number to decimal and check each digit\n    count = 0\n    for digit in num:\n        dec_digit = int(digit, 16)\n        if is_prime(dec_digit):\n            count += 1\n    return count\n\n# Test cases\nprint(hex_key(\"AB\")) # Expected output: 1\nprint(hex_key(\"1077E\")) # Expected output: 2\nprint(hex_key(\"ABED1A33\")) # Expected output: 4\nprint(hex_key(\"123456789ABCDEF0\")) # Expected output: 6\nprint(hex_key(\"2020\")) # Expected output: 2"}
{"task_id": "HumanEval/79", "completion": "return 'db' + format(decimal, 'b') + 'db'"}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n        return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/82", "completion": "def check_prime(n):\n        if n > 1:\n            for i in range(2, int(n**0.5) + 1):\n                if (n % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def prime_length(string):\n        return check_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "# The idea is to use dynamic programming where we store the number of\n   # required digits ending in 0 and 1 for each length upto n.\n\n    # dp[i][j] will be storing the count of numbers of length i ending with j.\n    dp = [[0, 0] for _ in range(n+1)]\n\n    # Base case: if there is only one digit (1)\n    dp[1] = [0, 1]   # dp[i][j]: i=length of number, j=ending digit\n\n    # For each length from 2 to n\n    for l in range(2, n+1):\n        # A number with current length ending with 0 will be a valid number if it starts with any digit except 0.\n        dp[l][0] = sum(dp[l-1])\n\n        # A number with current length ending with 1 was a valid number only if it started with 1.\n        dp[l][1] = dp[l-1][0] + dp[l-1][1]\n\n    return sum(dp[n]) * 9   # multiply by 9 for numbers that start with any digit except 0\n\n# Test the function\nprint(starts_one_ends(2))  # Output: 18 (9 numbers starting with 1, and 9 numbers ending with 1)"}
{"task_id": "HumanEval/84", "completion": "# convert to binary and calculate the sum of digits\n    bin_n = bin(N)[2:]\n    return bin(sum([int(i) for i in bin_n]))[2:]"}
{"task_id": "HumanEval/85", "completion": "return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n      return \"\".join(\"\" . join(sorted(list(i))) if i.isalnum() else i for i in s)\n\nprint(anti_shuffle('Hi')) # 'Hi'\nprint(anti_shuffle('hello')) # 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "coords = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coords.append((i, j))\n    # sort by row and then column\n    coords = sorted(coords, key=lambda k: (k[0], -k[1]))\n    return coords"}
{"task_id": "HumanEval/88", "completion": "if not array: # check if the array is empty\n        return []\n\n    first = array[0]\n    last = array[-1]\n    sorted_array = sorted(array)\n\n    if (first + last) % 2 == 0: # if sum of first and last element is even, sort in descending order\n        return sorted_array[::-1]\n    else: # if sum of first and last element is odd, sort in ascending order\n        return sorted_array"}
{"task_id": "HumanEval/89", "completion": "# Define a helper function to rotate the character by two places in the alphabet\n    def rotate_char(c):\n        if c.isalpha():\n            start = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - start + 2 * 2) % 26 + start)\n        else:\n            return c\n\n    # Apply the rotation to each character in the input string and join them into a single string\n    return ''.join(rotate_char(c) for c in s)"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    return None if second_smallest == float('inf') else second_smallest"}
{"task_id": "HumanEval/91", "completion": "# First, we split the string into sentences using the sentence delimiters\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n\n    # Then, we check how many sentences start with \"I\"\n    bored_count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n\n    return bored_count"}
{"task_id": "HumanEval/92", "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if any number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n\n# Test cases\nprint(any_int(5, 2, 7))  # True (5 = 2 + 3)\nprint(any_int(3, 2, 2))  # False (no number is equal to the sum of the other two)\nprint(any_int(3, -2, 1))  # True (3 = -2 + 1)\nprint(any_int(3.6, -2.2, 2))  # False (all numbers are not integers)"}
{"task_id": "HumanEval/93", "completion": "encoded_message = ''\n   vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n\n   for char in message:\n       if char.isalpha():\n           if char in vowels:\n               index = vowels.index(char)\n               encoded_message += vowels[(index + 2) % len(vowels)]\n           else:\n               encoded_message += char.swapcase()\n       else:\n           encoded_message += char\n\n   return encoded_message\n\n# Test cases\nprint(encode('test')) # Expected output: 'TGST'\nprint(encode('This is a message')) # Expected output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "if not dict:\n        return False\n\n    lower_count = 0\n    upper_count = 0\n    for key in dict.keys():\n        if type(key) is str:\n            if key.islower():\n                lower_count += 1\n            elif key.isupper():\n                upper_count += 1\n            else:\n                return False\n        else:\n            return False\n    return lower_count == len(dict) or upper_count == len(dict)"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n\n    return primes"}
{"task_id": "HumanEval/97", "completion": "a = abs(a % 10)\n   b = abs(b % 10)\n   return a * b"}
{"task_id": "HumanEval/98", "completion": "# Initialize a counter\n    count = 0\n\n    # Iterate over the string with index\n    for i in range(len(s)):\n        if i % 2 == 0:  # Check if index is even\n            if s[i] in 'AEIOU':  # Check if character is uppercase vowel\n                count += 1\n\n    return count"}
{"task_id": "HumanEval/99", "completion": "# convert string to float\n    num = float(value)\n\n    # get the integer part of the number\n    int_part = int(num)\n\n    # calculate the decimal part of the number\n    dec_part = abs(num - int_part)\n\n    if dec_part < 0.5:\n        return int_part\n    elif dec_part > 0.5 or (dec_part == 0.5 and num > 0):\n        # round away from zero\n        return int_part + int(num / abs(num))\n    else:\n        # if number is negative and exactly in the middle, round towards zero\n        return int_part"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n       pile = []\n       for i in range(n):\n           if n % 2 == 0:\n               pile.append(n + i * 2)\n           else:\n               pile.append(n + i * 2 - 1)\n       return pile\n   print(make_a_pile(3))"}
{"task_id": "HumanEval/101", "completion": "return s.replace(',','').split()"}
{"task_id": "HumanEval/102", "completion": "# If x is greater than y, swap them\n    if x > y:\n        x, y = y, x\n\n    # Start from the larger number and go down to find an even number\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n\n    avg = round((n + m) / 2)\n    binary = bin(avg)\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def has_even_digit(n):\n        while n > 0:\n            if (n % 10) % 2 == 0:\n                return True\n            n = n // 10\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "# Define the mapping of numbers to their corresponding names.\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter the array to only include numbers between 1 and 9.\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array, reverse it, and map each number to its corresponding name.\n    return [num_to_name[num] for num in sorted(arr, reverse=True)]"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n        if n==0 or n==1:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n+1):\n                fact *= i\n            return fact\n\n    def f(n):\n        res = []\n        for i in range(1, n+1):\n            if i%2 == 0:\n                res.append(factorial(i))\n            else:\n                res.append(sum([j for j in range(1, i+1)]))\n        return res\n\n    print(f(5)) # Outputs: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_palindrome(3)) # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def sum_of_digits(n):\n       return sum(int(d) for d in str(abs(n)))\n\n   return sum(sum_of_digits(n) > 0 for n in arr)"}
{"task_id": "HumanEval/109", "completion": "# sorting the array in python can be done using sorted function\n    # comparing the sorted array with the original array after performing\n    # right shifts equal to length of array times\n    n = len(arr)\n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(n):\n            arr = [arr[-1]] + arr[:-1]\n            if arr == sorted(arr):\n                return True\n        return False"}
{"task_id": "HumanEval/110", "completion": "# Separate even and odd numbers in both lists\n    lst1_evens = [num for num in lst1 if num % 2 == 0]\n    lst1_odds = [num for num in lst1 if num % 2 != 0]\n    lst2_evens = [num for num in lst2 if num % 2 == 0]\n    lst2_odds = [num for num in lst2 if num % 2 != 0]\n\n    # Check if we have enough evens to replace all odds in list1 with evens from list2\n    if len(lst1_evens) + len(lst2_evens) >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n        count_dict = {}\n        max_count = 0\n        for letter in test.split():\n            if letter not in count_dict:\n                count_dict[letter] = 1\n            else:\n                count_dict[letter] += 1\n            if count_dict[letter] > max_count:\n                max_count = count_dict[letter]\n        return {key: value for key, value in count_dict.items() if value == max_count}\n\n    print(histogram('a b c'))          # {'a': 1, 'b': 1, 'c': 1}\n    print(histogram('a b b a'))        # {'a': 2, 'b': 2}\n    print(histogram('a b c a b'))      # {'a': 2, 'b': 2}\n    print(histogram('b b b b a'))      # {'b': 4}\n    print(histogram(''))               # {}"}
{"task_id": "HumanEval/112", "completion": "# delete all characters in s that are equal to any character in c\n    t = [i for i in s if i not in c]\n    t = ''.join(t)\n\n    # check if the result string is palindrome\n    return (t, t == t[::-1])"}
{"task_id": "HumanEval/113", "completion": "def count_odd(string):\n        return sum([1 for char in string if int(char) % 2 != 0])\n\n    def replace_word(sentence, old_word, new_word):\n        return sentence.replace(old_word, str(new_word))\n\n    result = []\n    for index, string in enumerate(lst, start=1):\n        odd_count = count_odd(string)\n        sentence = \"the number of odd elements {index}n the str{index}ng {index} of the {index}nput.\"\n        new_sentence = replace_word(sentence, '{index}', str(odd_count))\n        result.append(new_sentence)\n    return result"}
{"task_id": "HumanEval/114", "completion": "# Initialize minimum sum to be the first element of the array\n    min_sum = nums[0]\n    # Initialize current sum to be the first element of the array\n    curr_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        # Update current sum by taking the minimum between the current number and the current sum plus the current number\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        # Update minimum sum if current sum is smaller\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "The function `max_fill` is defined to solve the problem of emptying wells in a rectangular grid using buckets with a given capacity. Here's how it works:\n\n1. It first initializes an array `wells` of length equal to the number of columns in the grid, and fills it with zeros. This array is used to keep track of the height of water in each well column.\n2. The function then iterates over each row in the grid. For each row, it updates the `wells` array by adding the value of the current cell to the corresponding index in the `wells` array. If the updated value is greater than 1, it's set to 1 (since a well can only hold one unit of water).\n3. After processing all rows, the function calculates the number of times the bucket needs to be lowered by summing up the values in the `wells` array and dividing that by the bucket capacity. The result is rounded up using the `math.ceil` function since any remaining water requires an additional lowering of the bucket.\n4. Finally, the function returns the calculated number of times the bucket needs to be lowered.\n\nThis solution assumes that the grid is a 2D list of lists where each sublist represents a row in the grid and contains either 0s or 1s. The capacity parameter is an integer representing the capacity of the buckets used to empty the wells."}
{"task_id": "HumanEval/116", "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def is_consonant(char):\n        return char.lower() in 'bcdfghjklmnpqrstvwxyz'\n\n    words = s.split(' ')\n    selected_words = []\n    for word in words:\n        consonants = sum(is_consonant(char) for char in word)\n        if consonants == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n   for i in range(len(word)-2, 0, -1):\n       if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n           return word[i]\n   return \"\""}
{"task_id": "HumanEval/119", "completion": "# Check the number of open and close parentheses in each list item\n    count1 = (lst[0].count('('), lst[0].count(')'))\n    count2 = (lst[1].count('('), lst[1].count(')'))\n\n    # To make a good string, the difference between open and close parentheses must be zero or even.\n    if abs(count1[0] - count1[1]) % 2 == 0 and abs(count2[0] - count2[1]) % 2 == 0:\n        # If both differences are zero, it's always possible to concatenate the strings in some order.\n        if abs(count1[0] - count1[1]) == 0 and abs(count2[0] - count2[1]) == 0:\n            return 'Yes'\n        # If one difference is zero, then check if the number of open parentheses in one string equals to\n        # the number of close parentheses in another string. This will ensure that all parentheses are balanced\n        elif abs(count1[0] - count1[1]) == 0 or abs(count2[0] - count2[1]) == 0:\n            if count1[0] == count2[1] or count1[1] == count2[0]:\n                return 'Yes'\n    # If the differences are not zero and odd, it's not possible to concatenate the strings in any order.\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "arr.sort()\n   return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "def is_odd(n):\n        return n % 2 != 0\n\n    def is_even_position(i):\n        return i % 2 == 0\n\n    return sum(val for i, val in enumerate(lst) if is_odd(val) and is_even_position(i))"}
{"task_id": "HumanEval/122", "completion": "sum_of_elements = 0\n   for i in range(k):\n       if arr[i] >= 0 and arr[i] <= 99: # check if the element has at most two digits\n           sum_of_elements += arr[i]\n   return sum_of_elements"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n        seq = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            seq.append(n)\n        return sorted([num for num in seq if num % 2])\n   print(get_odd_collatz(5)) # [1, 5]"}
{"task_id": "HumanEval/124", "completion": "# Check if date string is empty\n    if not date:\n        return False\n\n    try:\n        # Split the date into month, day and year\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        # If split or conversion to int fails, it means the format is invalid\n        return False\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid for each month\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    else: # February\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            # Leap year\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        odd_letters = [char for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1]\n        return len(odd_letters)"}
{"task_id": "HumanEval/126", "completion": "if len(lst) <= 1:\n        return True\n    elif lst.count(lst[0]) > 1:\n        return False\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] >= lst[i+1]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n       if n < 2:\n           return False\n       for i in range(2, int(n**0.5) + 1):\n           if n % i == 0:\n               return False\n       return True\n\n   start = max(interval1[0], interval2[0])\n   end = min(interval1[1], interval2[1])\n\n   if start <= end:\n       length_intersection = end - start + 1\n       if is_prime(length_intersection):\n           return \"YES\"\n   return \"NO\""}
{"task_id": "HumanEval/128", "completion": "if not arr:\n        return None\n\n    product = 1\n    total = 0\n\n    for num in arr:\n        # update the sign of the product\n        if num < 0:\n            product *= -1\n        elif num > 0:\n            product *= 1\n        # add the absolute value to the total\n        total += abs(num)\n\n    return product * total"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # down, up, right, left\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return tuple(path)\n\n        paths = []\n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                visited[ni][nj] = True\n                paths.append(dfs(ni, nj, path + [grid[ni][nj]]))\n                visited[ni][nj] = False\n        return min(paths) if paths else None\n\n    all_paths = []\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                all_paths.append(path)\n            visited[i][j] = False\n    return list(min(all_paths))"}
{"task_id": "HumanEval/130", "completion": "def tribonacci(n):\n        if n == 0: return [1]\n        elif n == 1: return [1, 3]\n        else:\n            result = [1, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    result.append(3)\n                else:\n                    result.append(result[i-1] + result[i-2] + result[i-3])\n            return result\n\n   print(tribonacci(3)) # [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n       product = 1\n       is_odd = False\n       while n > 0:\n           digit = n % 10\n           if digit % 2 != 0:\n               is_odd = True\n               product *= digit\n           n //= 10\n       return product if is_odd else 0\n\n   print(digits(1))      # Output: 1\n   print(digits(4))      # Output: 0\n   print(digits(235))    # Output: 15"}
{"task_id": "HumanEval/132", "completion": "# Create a stack to keep track of opening brackets\n    stack = []\n\n    for char in string:\n        if char == '[':\n            # If the character is an opening bracket, push it into the stack\n            stack.append(char)\n        else:\n            # If the character is a closing bracket and the stack is not empty\n            # then pop out the topmost element from the stack\n            if stack:\n                stack.pop()\n            else:\n                # If the stack is empty, it means there was no matching opening bracket\n                return False\n\n    # If the stack is empty after iterating through all characters of the string,\n    # then all brackets were properly closed and nested\n    if not stack:\n        # Check for at least one pair of nested brackets by checking if there are any '[' remaining in the string\n        return '[' in string[1:-1]\n    else:\n        return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n        return sum([int(num + 0.5) ** 2 for num in lst])\n\n# Test cases\nprint(sum_squares([1,2,3]))          # Output: 14\nprint(sum_squares([1,4,9]))          # Output: 98\nprint(sum_squares([1,3,5,7]))        # Output: 84\nprint(sum_squares([1.4,4.2,0]))      # Output: 29\nprint(sum_squares([-2.4,1,1]))       # Output: 6"}
{"task_id": "HumanEval/134", "completion": "if len(txt) == 0 or txt[-1] != ' ' and not txt[-2].isalpha():\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/135", "completion": "largest_index = -1\n\n   for i in range(1, len(arr)):\n       if arr[i] < arr[i-1]:\n           largest_index = i-1\n\n   return largest_index"}
{"task_id": "HumanEval/136", "completion": "# Initialize variables to store the largest negative and smallest positive numbers\n    largest_neg = float('-inf')\n    smallest_pos = float('inf')\n\n    # Iterate through each number in the list\n    for num in lst:\n        # If the number is negative, update the largest negative if it's larger than the current largest negative\n        if num < 0:\n            largest_neg = max(largest_neg, num)\n        # If the number is positive, update the smallest positive if it's smaller than the current smallest positive\n        elif num > 0:\n            smallest_pos = min(smallest_pos, num)\n\n    # Return the largest negative and smallest positive numbers as a tuple\n    # If no negative or positive integers were found, return None for their respective positions in the tuple\n    return (largest_neg if largest_neg != float('-inf') else None, smallest_pos if smallest_pos != float('inf') else None)"}
{"task_id": "HumanEval/137", "completion": "# Convert a and b to float for comparison\n    try:\n        a = float(str(a).replace(\",\", \".\"))\n        b = float(str(b).replace(\",\", \".\"))\n    except ValueError:\n        return None\n\n    if a > b:\n        return convert_back(a, str(type(a)))\n    elif a < b:\n        return convert_back(b, str(type(b)))\n    else:\n        return None\n\ndef convert_back(num, type_str):\n    \"\"\"Convert num back to its original type.\"\"\"\n    if \"int\" in type_str:\n        return int(num)\n    elif \"float\" in type_str:\n        return float(num)\n    elif \"str\" in type_str and \",\" in str(type(a)):  # If the original was a string with comma as decimal separator\n        return f\"{num:,.2f}\".replace(\".\", \",\")\n    else:\n        return str(num)"}
{"task_id": "HumanEval/138", "completion": "# Check if the input number is a positive even number and greater than or equal to 16 (since it should be the sum of exactly 4 positive even numbers)\n    return n >= 16 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "# import math for using factorial function\n    import math\n\n    if n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    result = 1\n    while n > 0:\n        result *= math.factorial(n)\n        n -= 1\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\n   # replace all spaces with underscores\n   text = text.replace(' ', '_')\n\n   # replace more than 2 consecutive underscores with a dash\n   text = re.sub('_{2,}', '-', text)\n\n   return text"}
{"task_id": "HumanEval/141", "completion": "import re\n\n    def file_name_check(file_name):\n        if len(re.findall('\\d', file_name)) > 3:\n            return 'No'\n        if file_name.count('.') != 1:\n            return 'No'\n        parts = file_name.split('.')\n        if not parts[0] or not parts[0][0].isalpha():\n            return 'No'\n        if parts[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'\n\n    # Test cases\n    print(file_name_check(\"example.txt\"))  # => 'Yes'\n    print(file_name_check(\"1example.dll\"))  # => 'No'\n    print(file_name_check(\"a.exe\"))  # => 'Yes'\n    print(file_name_check(\".txt\"))  # => 'No'\n    print(file_name_check(\"abcdefghijklm.txt\"))  # => 'Yes'\n    print(file_name_check(\"abc123456789.txt\"))  # => 'No'"}
{"task_id": "HumanEval/142", "completion": "result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n\n# Test cases\nprint(sum_squares([1,2,3])) # Expected output: 6\nprint(sum_squares([]))      # Expected output: 0\nprint(sum_squares([-1,-5,2,-1,-5])) # Expected output: -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n       if n < 2:\n           return False\n       for i in range(2, int(n**0.5)+1):\n           if n % i == 0:\n               return False\n       return True\n\n   words = sentence.split(' ')\n   prime_words = [word for word in words if is_prime(len(word))]\n   return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\n   def simplify(x, n):\n       product = Fraction(x) * Fraction(n)\n       return product.denominator == 1\n\n# Test cases:\nprint(simplify(\"1/5\", \"5/1\")) # True\nprint(simplify(\"1/6\", \"2/1\")) # False\nprint(simplify(\"7/10\", \"10/2\")) # False"}
{"task_id": "HumanEval/145", "completion": "def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def is_odd(n):\n       return abs(int(str(n)[-1])) % 2 == 1 and abs(int(str(n)[0])) % 2 == 1\n\n   return sum(num > 10 for num in nums if is_odd(num))\n\nprint(specialFilter([15, -73, 14, -15])) # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Output: 2"}
{"task_id": "HumanEval/147", "completion": "# Initialize the count of multiples of 0, 1, and 2 after modulo operation with 3.\n    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        num = (i * i - i + 1) % 3\n        # Increment the respective count.\n        count[num] += 1\n\n    # Calculate the number of triples using combinations formula: C(n, 3).\n    result = count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result += count[1] * (count[1] - 1) * (count[2]) // 2\n    return result"}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n   if planet1 in planets and planet2 in planets:\n       index1 = planets.index(planet1)\n       index2 = planets.index(planet2)\n\n       # Swap indices if necessary to ensure planet1 is closer to the sun than planet2\n       if index1 > index2:\n           index1, index2 = index2, index1\n\n       return tuple(planets[i] for i in range(index1 + 1, index2))\n   else:\n       return ()"}
{"task_id": "HumanEval/149", "completion": "# Deleting the strings that have odd lengths from it\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "# Initialize an accumulator for the sum\n    total = 0\n\n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the number is positive, an integer, and odd\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            # If so, square it and add it to the total\n            total += num ** 2\n\n    return total"}
{"task_id": "HumanEval/152", "completion": "result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result"}
{"task_id": "HumanEval/153", "completion": "# Initialize maximum strength and corresponding extension\n    max_strength = float('-inf')\n    strongest_extension = ''\n\n    # Iterate over each extension to find the strongest one\n    for ext in extensions:\n        # Calculate strength of current extension\n        cap, sm = sum(1 for c in ext if c.isupper()), sum(1 for c in ext if c.islower())\n        strength = cap - sm\n\n        # Update maximum strength and corresponding extension if necessary\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n\n    # Return the class name with the strongest extension\n    return f'{class_name}.{strongest_extension}'\n\n# Test cases\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])) # Should print 'my_class.AA'\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])) # Should print 'Slices.SErviNGSliCes'"}
{"task_id": "HumanEval/154", "completion": "def rotate(word):\n        return word[1:] + word[:1]\n\n    n = len(b)\n    for _ in range(n):\n        if b in a:\n            return True\n        b = rotate(b)\n    return False"}
{"task_id": "HumanEval/155", "completion": "count_even = sum([1 for digit in str(num) if int(digit) % 2 == 0])\n    count_odd = len(str(num)) - count_even\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "roman_numerals = {1000:'m',900:'cm',500:'d',400:'cd',100:'c',90:'xc',50:'l',40:'xl',10:'x',9:'ix',5:'v',4:'iv',1:'i'}\n   result = \"\"\n   for value, numeral in sorted(roman_numerals.items(), reverse=True):\n       while number >= value:\n           result += numeral\n           number -= value\n   return result"}
{"task_id": "HumanEval/157", "completion": "# Using Pythagorean theorem to check if the triangle is a right-angled triangle\n    return (a*a + b*b == c*c) or (a*a + c*c == b*b) or (b*b + c*c == a*a)\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n        max_unique = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = set(word)\n            if len(unique_chars) > max_unique or (len(unique_chars) == max_unique and word < max_word):\n                max_unique = len(unique_chars)\n                max_word = word\n\n        return max_word"}
{"task_id": "HumanEval/159", "completion": "eaten = min(need, remaining) + number\n    left = max(remaining - need, 0)\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "result = operand[0]\n   for i in range(len(operator)):\n       if operator[i] == '+':\n           result += operand[i+1]\n       elif operator[i] == '-':\n           result -= operand[i+1]\n       elif operator[i] == '*':\n           result *= operand[i+1]\n       elif operator[i] == '//':\n           result //= operand[i+1]\n       elif operator[i] == '**':\n           result **= operand[i+1]\n   return result"}
{"task_id": "HumanEval/161", "completion": "reversed_str = s[::-1]\n   final_str = ''\n   if not any(char.isalpha() for char in s):\n       return reversed_str\n   else:\n       for char in s:\n           if char.isupper():\n               final_str += char.lower()\n           elif char.islower():\n               final_str += char.upper()\n           else:\n               final_str += char\n       return final_str"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\n   def string_to_md5(text):\n       if text == \"\":\n           return None\n       else:\n           md5 = hashlib.md5()\n           md5.update(text.encode('utf-8'))\n           return md5.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "even_digits = []\n\n    # Swap a and b if a > b to ensure that a is always smaller or equal to b.\n    if a > b:\n        a, b = b, a\n\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n\n    return even_digits"}

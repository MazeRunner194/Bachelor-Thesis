{"task_id": "java/0", "language": "java", "completion": "boolean isBelowZero = false;\n        int balance = 0;\n\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (int) operation;\n            } else if (operation instanceof Double) {\n                balance += (double) operation;\n            }\n\n            if (balance < 0) {\n                isBelowZero = true;\n                break;\n            }\n        }\n\n        return isBelowZero;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(belowZero(Arrays.asList(1, 2, 3))); // False\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5))); // True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "// Initialize variables for sum and product\n        int sum = 0;\n        BigInteger product = new BigInteger(\"1\");\n\n        // Iterate through the list of numbers\n        for (int i = 0; i < numbers.size(); i++) {\n            // Check if the element is an instance of Integer\n            if (numbers.get(i) instanceof Integer) {\n                int num = (Integer) numbers.get(i);\n                sum += num;\n                product = product.multiply(BigInteger.valueOf(num));\n            } else {\n                // If the element is not an instance of Integer, skip it\n                continue;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product.intValue());\n        return result;\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "if (a.length() != b.length()) {\n      throw new IllegalArgumentException(\"Die Eingaben m\u00fcssen gleich lang sein.\");\n    }\n\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < a.length(); i++) {\n      char bitA = a.charAt(i);\n      char bitB = b.charAt(i);\n\n      if ((bitA == '1' && bitB == '0') || (bitA == '0' && bitB == '1')) {\n        result.append('1');\n      } else {\n        result.append('0');\n      }\n    }\n\n    return result.toString();\n  }\n\n  public static void main(String[] args) {\n    String a = \"010\";\n    String b = \"110\";\n    String xorResult = stringXor(a, b);\n    System.out.println(\"Ergebnis der bin\u00e4ren XOR-Operation: \" + xorResult);\n  }\n}"}
{"task_id": "java/3", "language": "java", "completion": "if (strings.isEmpty()){\n            return null;\n        }else {\n            int maxLen = ((String) strings.get(0)).length();\n            int currentMaxIndex = 0;\n            for (int i=1; i<strings.size(); i++){\n                String s = (String) strings.get(i);\n                if (s.length() > maxLen){\n                    maxLen = s.length();\n                    currentMaxIndex = i;\n                }\n            }\n            return (String)strings.get(currentMaxIndex);\n        }\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "// write your code here\n      String[] arr = numbers.split(\" \");\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"null\", 0);\n        map.put(\"eins\", 1);\n        map.put(\"zwei\", 2);\n        map.put(\"drei\", 3);\n        map.put(\"vier\", 4);\n        map.put(\"f\u00fcnf\", 5);\n        map.put(\"sechs\", 6);\n        map.put(\"sieben\", 7);\n        map.put(\"acht\", 8);\n        map.put(\"neun\", 9);\n\n        Integer[] numArr = new Integer[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            numArr[i] = map.get(arr[i]);\n        }\n\n        Arrays.sort(numArr);\n\n        StringBuilder sb = new StringBuilder();\n        for (Integer num : numArr) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue().equals(num)) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "if (numbers == null || numbers.size() < 2) {\n      throw new IllegalArgumentException(\"Input list must have at least two elements\");\n  }\n\n  double min = Collections.min(numbers);\n  double max = Collections.max(numbers);\n  double scaleFactor = 1.0 / (max - min);\n\n  List<Double> rescaledNumbers = new ArrayList<>(numbers.size());\n  for (double number : numbers) {\n      rescaledNumbers.add((number - min) * scaleFactor);\n  }\n\n  return rescaledNumbers;\n}\n\n    public static void main(String[] args) {\n        List<Double> input = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(input)); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "// Erstellt einen leeren StringBuilder, um die modifizierten Zeichen zu speichern\n        StringBuilder result = new StringBuilder();\n\n        // Iteriert \u00fcber jedes Zeichen im Eingabe-String\n        for (char character : string.toCharArray()) {\n            // \u00dcberpr\u00fcft, ob das Zeichen ein Kleinbuchstabe ist\n            if (Character.isLowerCase(character)) {\n                // Wenn es ein Kleinbuchstabe ist, f\u00fcgt den entsprechenden Gro\u00dfbuchstaben zum Ergebnis hinzu\n                result.append(Character.toUpperCase(character));\n            } else {\n                // Wenn es kein Kleinbuchstabe ist (es muss also ein Gro\u00dfbuchstabe sein), f\u00fcgt den entsprechenden Kleinbuchstaben zum Ergebnis hinzu\n                result.append(Character.toLowerCase(character));\n            }\n        }\n\n        // Gibt den modifizierten String zur\u00fcck\n        return result.toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "}\n}"}
{"task_id": "java/9", "language": "java", "completion": "if (n < 2) { // Primzahlen sind definiert als nat\u00fcrliche Zahlen gr\u00f6\u00dfer als 1.\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) { // Wir m\u00fcssen nur bis zur Wurzel von n iterieren, um zu \u00fcberpr\u00fcfen, ob eine Zahl prim ist.\n            if (n % i == 0) { // Wenn die Zahl durch irgendeine andere Zahl zwischen 2 und ihrer Wurzel teilbar ist, dann ist sie keine Primzahl.\n                return false;\n            }\n        }\n\n        return true; // Wenn die Zahl nach allen Iterationen noch nicht von einer anderen Zahl geteilt wurde, dann ist sie eine Primzahl.\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPrime(6)); // False\n        System.out.println(isPrime(101)); // True\n        System.out.println(isPrime(11)); // True\n        System.out.println(isPrime(13441)); // False (13441 is not a prime number, it's divisible by 11 and 1221)\n        System.out.println(isPrime(61)); // True\n        System.out.println(isPrime(4)); // False\n        System.out.println(isPrime(1)); // False\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "ArrayList<Integer> sorted = new ArrayList<>(new TreeSet<>(l)); // Entferne Duplikate und sortiere die Liste\n   return sorted;\n }\n}"}
{"task_id": "java/11", "language": "java", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    fib_sequence = [0, 1]\n    while len([i for i in fib_sequence if is_prime(i)]) < n:\n        fib_sequence.append(sum(fib_sequence[-2:]))\n\n    return [i for i in fib_sequence if is_prime(i)][n - 1]"}
{"task_id": "java/12", "language": "java", "completion": "Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-2 * num)) return true;\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "if (l.size() < 2) {\n      return false;\n    }\n\n    Set<Integer> set = new HashSet<>();\n\n    for (int num : l) {\n      if (set.contains(-num)) {\n        return true;\n      } else {\n        set.add(num);\n      }\n    }\n\n    return false;\n  }\n}"}
{"task_id": "java/14", "language": "java", "completion": "if (n < 0) {\n            throw new IllegalArgumentException(\"Invalid argument, input must be a non-negative integer\");\n        } else if (n <= 3) {\n            // base cases: fib4(0), fib4(1), and fib4(2) are defined as 0, 0, and 2 respectively.\n            return n == 2 ? 2 : 0;\n        } else {\n            int[] dp = new int[n + 1]; // Initialize an array to store the computed fib4 values.\n            dp[0] = 0;\n            dp[1] = 0;\n            dp[2] = 2;\n            dp[3] = 0;\n            for (int i = 4; i <= n; i++) { // Compute the rest of the fib4 values iteratively.\n                dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n            }\n            return dp[n];\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // Should print: 4\n        System.out.println(fib4(6)); // Should print: 8\n        System.out.println(fib4(7)); // Should print: 14\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "// Sort the list in ascending order\n        Collections.sort(l);\n\n        int n = l.size();\n        if (n % 2 == 0) {\n            // If the size of the list is even, return the average of the two middle elements\n            int mid1 = l.get(n / 2 - 1);\n            int mid2 = l.get(n / 2);\n            return (mid1 + mid2) / 2.0;\n        } else {\n            // If the size of the list is odd, return the middle element\n            return l.get(n / 2);\n        }\n    }\n\n    public static void main(String[] args) throws java.lang.Exception {\n        System.out.println(median(Arrays.asList(3, 1, 2, 4, 5))); // Expected output: 3\n        System.out.println(median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Expected output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left++) != text.charAt(right--)) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "// Die Funktion iteriert \u00fcber jedes Zeichen in dem Eingabetext und pr\u00fcft, ob es ein Vokal ist.\n   // Wenn das Zeichen kein Vokal ist, wird es zum Ergebnisstring hinzugef\u00fcgt.\n   StringBuilder result = new StringBuilder();\n   for (char c : text.toCharArray()) {\n       if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n           result.append(c);\n       }\n   }\n   return result.toString();\n}\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(removeVowels(line));\n        }\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Die main-Methode ist nur f\u00fcr die Tests. Wir ver\u00e4ndern sie nicht!\n    public static void main(String[] args) {\n        System.out.println(\"BelowThreshold\");\n        List<Integer> list = new ArrayList<>();\n        Collections.addAll(list, 1, 20, 4, 10);\n        int threshold = 5;\n        boolean result = belowThreshold(list, threshold);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n}\n\n    /**\n     * Addiere alle Zahlen in der Liste l zusammen.\n     * >>> addAll(Arrays.asList(1, 2, 3, 4))\n     * 10\n     * >>> addAll(Arrays.asList(5, 7, -8, 4, 2, 9))\n     * 21\n     */\n    public static int addAll(ArrayList<Integer> l) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "// Create hashmaps for each string to store the frequency of each character\n        HashMap<Character, Integer> map1 = new HashMap<>();\n        HashMap<Character, Integer> map2 = new HashMap<>();\n\n        // Iterate through each character in the first string and update its frequency in the map\n        for (char c : s0.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n\n        // Do the same for the second string\n        for (char c : s1.toCharArray()) {\n            map2.put(c, map2.getOrDefault(c, 0) + 1);\n        }\n\n        // Check if the two maps are equal\n        return map1.equals(map2);\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 1) {\n            return n;\n        } else {\n            int a = 0, b = 1, c = 0;\n            for (int i = 2; i <= n; i++) {\n                c = a + b;\n                a = b;\n                b = c;\n            }\n            return c;\n        }\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "// Create an empty list to store the common elements.\n        List<Object> result = new ArrayList<>();\n\n        // Convert both lists into sets for efficient lookup and removal of duplicates.\n        Set<Object> set1 = new HashSet<>(l1);\n        Set<Object> set2 = new HashSet<>(l2);\n\n        // Find the intersection of the two sets by removing elements that are not in both sets.\n        set1.retainAll(set2);\n\n        // Convert the resulting set back into a list and return it.\n        result.addAll(set1);\n        Collections.sort(result);  // Sort the list before returning it.\n        return result;\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "if (n <= 1) return -1; // Keine Primfaktoren f\u00fcr Zahlen <= 1\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) n /= i; // Teile n durch i so lange wie m\u00f6glich\n        }\n\n        return n > 1 ? n : -1; // Wenn nach den Divisionen noch eine Primzahl \u00fcbrig bleibt, dann ist diese der gesuchte Faktor\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195));\n        System.out.println(largestPrimeFactor(2048));\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "if (n == 0) return 0;\n        else return n + sumToN(n-1);\n    }\n\n    /**\n     * Die main-Funktion ist zum Testen der Funktionen.\n     * Sie wird nicht von der Abgabepr\u00fcfung ausgef\u00fchrt.\n     */\n    public static void main(String[] args) {\n        System.out.println(\"Summe von 1 bis 30: \" + sumToN(30));\n        // Hier weitere Tests einf\u00fcgen.\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\n\npublic class Derivative {\n\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> input1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(derivative(input1)); // Output: [1, 4, 12, 20]\n\n        List<Integer> input2 = Arrays.asList(1, 2, 3);\n        System.out.println(derivative(input2)); // Output: [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "// TODO: Write your code here\n        if (n <= 1) return 0;\n        else if (n == 2) return 1;\n        else {\n            int a = 0, b = 0, c = 1;\n            for (int i=3; i<=n; ++i) {\n                int tmp = a + b + c;\n                a = b;\n                b = c;\n                c = tmp;\n            }\n            return c;\n        }\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "// Ersetzen Sie diesen Kommentar durch Ihre L\u00f6sung\n      String vowels = \"aeiou\";\n        int count = 0;\n        char lastChar = s.charAt(s.length() - 1);\n        if (lastChar == 'y' || lastChar == 'Y') {\n            vowels += \"yY\";\n        }\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > entry.getValue()) continue;\n            if (entry.getValue() >= entry.getKey()) max = Math.max(max, entry.getKey());\n        }\n        return max;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "if (a + b <= c || b + c <= a || a + c <= b) {\n            return -1;\n        }\n\n        double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        return Math.round(area * 100.0) / 100.0;\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "// Check if the list is balanced (palindromic)\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "int count = 0;\n        for (int i = 2; i <= a && count < 3; ++i) {\n            while (a % i == 0) {\n                count++;\n                a /= i;\n            }\n        }\n        return (count == 3 && a == 1);\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "// Your code here\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "// Your code goes here.\n  if (s.length() < 3) {\n    return false;\n  }\n\n  for (int i = 0; i <= s.length() - 3; i++) {\n    String substring = s.substring(i, i + 3);\n    if (substring.charAt(0) == substring.charAt(1) || substring.charAt(0) == substring.charAt(2) || substring.charAt(1) == substring.charAt(2)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.*;\n\npublic class NumericalLetterGrade {\n    public static List<String> gradeEquation(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "boolean isPrime = true;\n\n      if (string.length() <= 1){\n         isPrime = false;\n         return isPrime;\n       }\n       else{\n         for(int i = 2; i < string.length(); i++){\n           if((string.length()) % i == 0){\n             isPrime = false;\n             break;\n           }\n         }\n       }\n      return isPrime;\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "// Die while-Schleife wird so lange ausgef\u00fchrt, bis die Eingabezahl n gleich 0 ist.\n   // In jedem Durchlauf werden die Ziffern der Zahl n addiert und anschlie\u00dfend wird n um den Restwert von n dividiert durch 10 verringert,\n   // um die letzte Ziffer zu entfernen.\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n\n    // Die bin\u00e4re Darstellung der Summe wird mit Hilfe der Integer.toBinaryString() Methode erzeugt und zur\u00fcckgegeben.\n    return Integer.toBinaryString(sum);\n}\n\n// In dieser Klasse gibt es eine main-Methode, die die Funktion solve() aufruft und das Ergebnis ausgibt.\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(solve(147)); // \"1100\" wird ausgegeben\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "ArrayList<int[]> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n            for (int j = row.size() - 1; j >= 0; j--) {\n                if (row.get(j) == x) {\n                    result.add(new int[]{i, j});\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] a, int[] b) {\n                if (a[0] == b[0]) {\n                    return Integer.compare(b[1], a[1]);\n                }\n                return Integer.compare(a[0], b[0]);\n            }\n        });\n        List<Object> finalResult = new ArrayList<>();\n        for (int[] pair : result) {\n            finalResult.add(Arrays.asList(pair[0], pair[1]));\n        }\n        return finalResult;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "if (lst.size() < 2) return null;\n\n   int smallest = Integer.MAX_VALUE;\n   int secondSmallest = Integer.MAX_VALUE;\n\n   for (Object num : lst) {\n       int n = (int)num;\n       if (n < smallest) {\n           secondSmallest = smallest;\n           smallest = n;\n       } else if (n < secondSmallest && n != smallest) {\n           secondSmallest = n;\n       }\n   }\n\n   return (secondSmallest == Integer.MAX_VALUE) ? null : secondSmallest;\n}\n\n    public static void main(String[] args) throws java.lang.Exception {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // == 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // == 2\n        System.out.println(nextSmallest(new ArrayList<>())); // == null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // == null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "String[] sentences = s.split(\"[.!?]\");\n        int boredCount = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"Ich\")) {\n                boredCount++;\n            }\n        }\n        return boredCount;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isBored(\"Hello world\")); // Output: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. Ich love this weather\")); // Output: 1\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "// Sorting the list in ascending order.\n        Collections.sort(lst);\n\n        // Reversing the sorted list to get it in descending order.\n        Collections.reverse(lst);\n\n        // Creating a new arraylist for prime numbers.\n        ArrayList<Integer> primeNumbers = new ArrayList<>();\n\n        // Looping through the list.\n        for (int i : lst) {\n            int count = 0;\n\n            // Checking if the number is prime.\n            if(i > 1){\n                for(int j=2; j<=Math.sqrt(i);j++){\n                    if(i % j == 0){\n                        count++;\n                    }\n                }\n                // If the number is prime, adding it to the arraylist.\n                if(count==0) {\n                    primeNumbers.add(i);\n                }\n            }\n        }\n\n        int maxPrime = Collections.max(primeNumbers);\n\n        String strMaxPrime = Integer.toString(maxPrime);\n        int sumOfDigits = 0;\n\n        // Calculating the sum of digits in the largest prime number.\n        for (int i = 0; i < strMaxPrime.length(); i++) {\n            sumOfDigits += Character.getNumericValue(strMaxPrime.charAt(i));\n        }\n\n        return sumOfDigits;\n    }"}
{"task_id": "java/41", "language": "java", "completion": "// your code goes here\n        if(dict instanceof HashMap){\n            boolean upper = true;\n            boolean lower = true;\n\n            for (Map.Entry<Object, Object> entry : ((HashMap<?, ?>) dict).entrySet()) {\n                if(!(entry.getKey() instanceof String)){\n                    return false;\n                }else{\n                    upper = upper && isUpperCase((String)entry.getKey());\n                    lower = lower && isLowerCase((String)entry.getKey());\n                    if(!upper && !lower){\n                        return false;\n                    }\n                }\n            }\n            return upper || lower;\n        }else{\n            throw new IllegalArgumentException(\"Invalid argument type. Expected HashMap\");\n        }\n    }\n\n    private static boolean isUpperCase(String str) {\n        for (char c : str.toCharArray()) {\n          if (!Character.isUpperCase(c)) return false;\n        }\n        return true;\n      }\n\n    private static boolean isLowerCase(String str) {\n        for (char c : str.toCharArray()) {\n          if (!Character.isLowerCase(c)) return false;\n        }\n        return true;\n      }\n}"}
{"task_id": "java/42", "language": "java", "completion": "double num = Double.parseDouble(value);\n    if (num >= 0) {\n      int lower = (int) Math.floor(num);\n      int upper = (int) Math.ceil(num);\n      return (num - lower < upper - num) ? lower : upper;\n    } else {\n      int lower = (int) Math.ceil(num);\n      int upper = (int) Math.floor(num);\n      return (lower - num < num - upper) ? lower : upper;\n    }\n  }\n}"}
{"task_id": "java/43", "language": "java", "completion": "List<Integer> pile = new ArrayList<>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n -= 2;\n            } else {\n                n -= 1;\n            }\n        }\n        Collections.reverse(pile);\n        return pile;\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "// Your code here\n        String[] result = s.split(\"[ ,]\");\n        return Arrays.asList(result);\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "if (x > y){\n       return -1;\n   }\n\n   else{\n       for (int i = y ; i>=x; i--){\n           if (i % 2 ==0){\n               return i;\n           }\n       }\n   }\n    return -1;\n}\n\n public static void main(String[] args) {\n     System.out.println(chooseNum(13, 12)); // Expected output: -1\n     System.out.println(chooseNum(12, 15)); // Expected output: 14\n }\n}"}
{"task_id": "java/46", "language": "java", "completion": "// your code goes here\n      if (n > m) {\n          return -1;\n      } else {\n          double avg = Math.round((double) (n + m) / 2);\n          String binary = Integer.toBinaryString((int) avg);\n          return \"0b\" + binary;\n      }\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        List<Integer> result = f(n);\n        System.out.println(\"f(\" + n + \") = \" + result);\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private static boolean isPalindrome(int num) {\n        int reversedNum = 0, remainder;\n        int originalNum = num;\n\n        while (num != 0) {\n            remainder = num % 10;\n            reversedNum = reversedNum * 10 + remainder;\n            num /= 10;\n        }\n\n        return originalNum == reversedNum;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "int n = arr.size();\n    if (n <= 1) return true;\n\n    int minIndex = 0, maxValue = (int)arr.get(0);\n\n    for (int i = 1; i < n; ++i) {\n        if ((int)arr.get(i) >= maxValue)\n            maxValue = (int)arr.get(i);\n        else if ((int)arr.get(i) < (int)arr.get(minIndex))\n            minIndex = i;\n    }\n\n    if (maxValue == (int)arr.get(n - 1)) return true;\n\n    if (minIndex == n - 1) {\n        for (int i = 0; i < n - 1; ++i) {\n            if ((int)arr.get(i + 1) <= (int)arr.get(i))\n                return false;\n        }\n    } else {\n        int count = minIndex;\n        for (int i = minIndex + 1; i < n - 1; ++i) {\n            if ((int)arr.get(i + 1) <= (int)arr.get(i))\n                count++;\n        }\n        if (count != minIndex) return false;\n    }\n\n    return true;\n}\n\n}"}
{"task_id": "java/50", "language": "java", "completion": "int oddCount = 0; // Z\u00e4hler f\u00fcr ungerade Zahlen in der ersten Liste\n        int evenCount = 0; // Z\u00e4hler f\u00fcr gerade Zahlen in der zweiten Liste\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        return oddCount <= evenCount ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "StringBuilder str = new StringBuilder();\n        for(int i=0;i<s.length();i++){\n            if(!c.contains(Character.toString(s.charAt(i)))){\n                str.append(s.charAt(i));\n            }\n        }\n        String s1 = str.toString();\n        int start=0;\n        int end=s1.length()-1;\n        while(start<end){\n            if(s1.charAt(start)!=s1.charAt(end))\n                return Arrays.asList(s1,false);\n            start++;\n            end--;\n        }\n        return Arrays.asList(s1,true);\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "}\n}"}
{"task_id": "java/53", "language": "java", "completion": "List<Object> res = new ArrayList<>();\n        if (s.isEmpty()) return res;\n\n        String[] words = s.split(\" \");\n        for(String word:words){\n            if(countConsonants(word)==n) res.add(word);\n        }\n        return res;\n    }\n\n    public static int countConsonants(String word){\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        int count=0;\n        for(char ch:word.toLowerCase().toCharArray()){\n            if(consonants.contains(\"\"+ch))count++;\n        }\n        return count;\n    }"}
{"task_id": "java/54", "language": "java", "completion": "// Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n\n        // Return the first k elements\n        return arr.subList(0, k);\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "// Your code here\n        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            if (Math.abs(arr.get(i)) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "// Write your code here.\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        // \u00dcberpr\u00fcfen, ob die Intervalle sich \u00fcberschneiden\n        if (end1 < start2 || end2 < start1) {\n            return \"NO\";\n        }\n\n        // Berechnen der L\u00e4nge des Schnitts\n        int intersectionLength = Math.min(end1, end2) - Math.max(start1, start2);\n\n        // \u00dcberpr\u00fcfen, ob die L\u00e4nge des Schnitts eine Primzahl ist\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }"}
{"task_id": "java/57", "language": "java", "completion": "ArrayList<Number> tribList = new ArrayList<>();\n        if (n >= 0) {\n            tribList.add((long)1);\n        }\n        if (n >= 1) {\n            tribList.add((long)3);\n        }\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribList.add(i / 2 + 1);\n            } else {\n                long sum = tribList.get(i - 1).longValue() + tribList.get(i - 2).longValue();\n                if (i < n) {\n                    sum += tribList.get(i + 1).longValue();\n                } else {\n                    sum += tribList.get(0).longValue();\n                }\n                tribList.add(sum);\n            }\n        }\n        return tribList;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Extract the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "if (string.length() < 3) {\n      return false;\n    }\n    int open = 0, close = 0;\n    for (char c : string.toCharArray()) {\n      if (c == '[') {\n        open++;\n        if (close > 0) {\n          return true;\n        }\n      } else if (c == ']') {\n        close++;\n      }\n    }\n    return false;\n  }\n}"}
{"task_id": "java/60", "language": "java", "completion": "int sum = 0;\n      for (Number num : lst){\n        double roundedNum = Math.ceil(num.doubleValue());\n        sum += Math.pow((int)roundedNum, 2);\n      }\n      return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "if (txt.length() == 0 || txt.charAt(txt.length() - 1) == ' ') {\n            return false;\n        } else {\n            String[] words = txt.split(\" \");\n            String lastWord = words[words.length - 1];\n            char lastChar = lastWord.charAt(lastWord.length() - 1);\n            if (Character.isLetter(lastChar) && !txt.endsWith(\" \")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "for (int i = 1; i < arr.size(); i++) {\n       if ((Integer)arr.get(i) <= (Integer)arr.get(i - 1)) {\n         return i;\n       }\n     }\n     return -1;\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "// your code goes here\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\nprivate static long factorial(int num) {\n    long fact = 1;\n    for (int i = 2; i <= num; i++) {\n        fact *= i;\n    }\n    return fact;\n}"}
{"task_id": "java/65", "language": "java", "completion": "boolean[] notPrime = new boolean[102]; // Erzeugen Sie ein boolesches Array, um alle Zahlen von 0 bis 101 zu speichern. Wenn eine Zahl nicht prim ist, wird der entsprechende Eintrag auf true gesetzt.\n    for (int i = 4; i < notPrime.length; i += 2) {\n        notPrime[i] = true; // Setzen Sie alle geraden Indizes auf true, da sie keine Primzahl sein k\u00f6nnen, au\u00dfer bei der Zahl 2.\n    }\n    notPrime[1] = true; // Die Zahl 1 ist auch keine Primzahl.\n    for (int i = 3; i * i < notPrime.length; i++) {\n        if (!notPrime[i]) { // Wenn die aktuelle Zahl eine Primzahl ist, setzen Sie alle Vielfachen dieser Zahl auf true.\n            for (int j = i * i; j < notPrime.length; j += i) {\n                notPrime[j] = true;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder(); // Erzeugen Sie ein StringBuilder-Objekt, um den Output zu konstruieren.\n    String[] words = sentence.split(\" \"); // Teilen Sie den Satz in W\u00f6rter auf.\n    for (String word : words) { // Iterieren Sie \u00fcber jedes Wort im Satz.\n        if (!notPrime[word.length()]) { // Wenn die L\u00e4nge des aktuellen Worts eine Primzahl ist, f\u00fcgen Sie es zum Output hinzu.\n            sb.append(word).append(\" \");\n        }\n    }\n    return sb.toString().trim(); // Geben Sie den Output zur\u00fcck und entfernen Sie ggf. f\u00fchrende oder nachfolgende Leerzeichen.\n}\n\n\n+++++ src/test/java/WordsInSentenceTest.java\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.stream.Stream;\n\npublic class WordsInSentenceTest {\n\n    @ParameterizedTest(name = \"{displayName} - {arguments}\")\n    @MethodSource(\"wordsInSentenceProvider\")\n    public void wordsInSentenceTest(String input, String expected) {\n        Assertions.assertEquals(expected, WordsInSentence.wordsInSentence(input));\n    }\n\n    static Stream<Arguments> wordsInSentenceProvider() {\n        return Stream.of(\n                Arguments.arguments(\"This is a test\", \"is\"),\n                Arguments.arguments(\"lets go for swimming\", \"go for\")\n        );\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "// your code here\n        int numX = Integer.parseInt(x.split(\"/\")[0]);\n        int denomX = Integer.parseInt(x.split(\"/\")[1]);\n        int numN = Integer.parseInt(n.split(\"/\")[0]);\n        int denomN = Integer.parseInt(n.split(\"/\")[1]);\n\n        // Multiply the numerators and denominators\n        int resultNum = numX * numN;\n        int resultDenom = denomX * denomN;\n\n        // Simplify the fraction\n        int gcd = gcd(resultNum, resultDenom);\n        resultNum /= gcd;\n        resultDenom /= gcd;\n\n        // Check if the result is a whole number\n        return resultDenom == 1;\n    }\n\n    private static int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "// Your code goes here.\n// I will define a function called digitSum that takes an integer as input and returns the sum of its digits. Then, I'll sort the list of numbers based on this digit sum using Java's built-in Collections.sort method with a custom comparator. If two numbers have the same digit sum, their original order will be preserved because the comparator uses a secondary comparison on their indices.\n\n// Here is the solution in Java:\n\nimport java.util.*;\n\nclass OrderByPoints {\n    private static int digitSum(int num) {\n        num = Math.abs(num); // Consider absolute value to handle negative numbers properly\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        int n = nums.size();\n        Integer[] indexedNums = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            indexedNums[i] = i;\n        }\n\n        Arrays.sort(indexedNums, (a, b) -> {\n            int sumDiff = digitSum(nums.get(a)) - digitSum(nums.get(b));\n            if (sumDiff == 0) {\n                return a - b; // Stable sort based on original index\n            } else {\n                return sumDiff;\n            }\n        });\n\n        List<Integer> sortedNums = new ArrayList<>();\n        for (int i : indexedNums) {\n            sortedNums.add(nums.get(i));\n        }\n\n        return sortedNums;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "// Schreiben Sie Ihren Code hier.\n      int count = 0;\n      for (Object num : nums){\n        if ((int)num > 10) {\n          String strNum = Integer.toString((int)num);\n          char firstChar = strNum.charAt(0);\n          char lastChar = strNum.charAt(strNum.length() - 1);\n          int firstDigit = Character.getNumericValue(firstChar);\n          int lastDigit = Character.getNumericValue(lastChar);\n          if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n            count++;\n          }\n        }\n      }\n      return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "int[] a = new int[n];\n        for (int i = 0; i < n; ++i){\n            a[i] = i*i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; ++i){\n            if ((a[i] % 3) == 2) {\n                continue;\n            }\n\n            for (int j = i+1; j < n; ++j){\n                int sum = a[i] + a[j];\n                if ((sum % 3) != 1) {\n                    continue;\n                }\n\n                for (int k = j+1; k < n; ++k){\n                    if ((a[k] % 3) == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptun\"));\n        int pos1 = planets.indexOf(planet1);\n        int pos2 = planets.indexOf(planet2);\n\n        if (pos1 == -1 || pos2 == -1) {\n            return Collections.emptyList();\n        }\n\n        List<Object> result = new ArrayList<>();\n        for (int i=Math.min(pos1, pos2)+1; i<Math.max(pos1, pos2); i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "return BigInteger.valueOf(n).isProbablePrime(5)?x:y; // Hier wird \u00fcberpr\u00fcft, ob die Zahl n eine Primzahl ist. Wenn ja, gibt das Programm den Wert von x zur\u00fcck, ansonsten den Wert von y.\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer && (Integer) obj % 2 != 0 && (Integer) obj > 0) {\n                int num = (Integer) obj;\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "int maxStrength = Integer.MIN_VALUE;\n        String result = \"\";\n        for (String extension : extensions){\n            int strength = getStrength(extension);\n            if (strength > maxStrength){\n                maxStrength = strength;\n                result = className + \".\" + extension;\n            }\n        }\n        return result;\n    }\n\n    private static int getStrength(String str) {\n        int cap = 0, sm = 0;\n        for (char c : str.toCharArray()){\n            if (Character.isUpperCase(c)) cap++;\n            else if (Character.isLowerCase(c)) sm++;\n        }\n        return cap - sm;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "if (a.length() != b.length()) return false; // if lengths are not equal, no rotation can match\n        for (int i = 0; i < b.length(); i++) {\n            String rotatedB = b.substring(i) + b.substring(0, i); // create a rotated version of b\n            if (a.contains(rotatedB)) return true; // check if the rotated string is a substring of a\n        }\n        return false; // no match found\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "// your code here\n      String result = \"\";\n      int[] values = {100, 90, 50, 40, 10, 9, 5, 4, 1};\n      String[] symbols = {\"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n      for (int i = 0; i < values.length && number >= 0; i++) {\n         while (number >= values[i]) {\n            result += symbols[i];\n            number -= values[i];\n         }\n      }\n      return result;\n   }\n}"}
{"task_id": "java/76", "language": "java", "completion": "// Sortiere die Seiten in aufsteigender Reihenfolge\n      int[] sides = {a, b, c};\n      Arrays.sort(sides);\n\n      // \u00dcberpr\u00fcfe den Satz des Pythagoras (a\u00b2 + b\u00b2 = c\u00b2)\n      if (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2)) {\n          return true; // Es handelt sich um ein rechtwinkliges Dreieck\n      } else {\n          return false; // Es handelt sich nicht um ein rechtwinkliges Dreieck\n      }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "char[] arr = s.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        boolean hasLetter = false;\n\n        while (start <= end) {\n            if (!Character.isLetter(arr[start])) {\n                start++;\n            } else if (!Character.isLetter(arr[end])) {\n                end--;\n            } else {\n                char temp = arr[start];\n                arr[start] = Character.isUpperCase(arr[end]) ? Character.toLowerCase(arr[end]) : Character.toUpperCase(arr[end]);\n                arr[end] = Character.isUpperCase(temp) ? Character.toLowerCase(temp) : Character.toUpperCase(temp);\n                start++;\n                end--;\n            }\n        }\n\n        for (char c : arr) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                break;\n            }\n        }\n\n        return hasLetter ? new String(arr) : new StringBuilder(new String(arr)).reverse().toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "if (text.length()==0){\n            return null;\n        }\n\n         try{\n             java.security.MessageDigest md =java.security.MessageDigest.getInstance(\"MD5\");\n             byte[] array =md.digest(text.getBytes());\n             StringBuffer sb= new StringBuffer();\n             for (int i=0;i<array.length;++i){\n                 sb.append(Integer.toHexString((array[i] & 0xFF)|0x100).substring(1,3));\n            }\n            return sb.toString();\n        }catch(java.security.NoSuchAlgorithmException e){\n\n        }\n        return null;\n    }\n\n}"}
{"task_id": "java/79", "language": "java", "completion": "ArrayList<Integer> list = new ArrayList<>();\n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            }\n        }\n        return new ArrayList<Object>(list);\n    }\n\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        System.out.println(generateIntegers(2,8)); //[2, 4, 6, 8]\n        System.out.println(generateIntegers(10,14)); //[]\n        System.out.println(generateIntegers(8,2)); //[2, 4, 6, 8]\n    }\n}"}

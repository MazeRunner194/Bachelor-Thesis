{"task_id": "kotlin/0", "language": "kotlin", "completion": "var balance = 0.0\n    for (operation in operations) {\n        if (operation is Double) {\n            balance += operation\n        } else if (operation is Int) {\n            balance += operation.toDouble()\n        }\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "var sum = 0\n    var product: Long = 1\n\n    for (number in numbers) {\n        if (number is Int) {\n            sum += number\n            product *= number.toLong()\n        }\n    }\n\n    return listOf(sum, product.toInt())\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "if (a.length != b.length) {\n        throw IllegalArgumentException(\"Die Zeichenketten m\u00fcssen die gleiche L\u00e4nge haben.\")\n    }\n    val result = StringBuilder()\n    for (i in 0 until a.length) {\n        result.append(if ((a[i] == '1') xor (b[i] == '1')) \"1\" else \"0\")\n    }\n    return result.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "if (strings.isEmpty()) return null\n    var longestString = strings[0] as String\n    for (i in 1 until strings.size) {\n        val currentString = strings[i] as String\n        if (currentString.length > longestString.length) {\n            longestString = currentString\n        }\n    }\n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "var num1 = a\n    var num2 = b\n\n    while (num2 != 0) {\n        val temp = num2\n        num2 = num1 % num2\n        num1 = temp\n    }\n\n    return num1\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "// Create a map for the number words and their numeric values\n    val numMap = mapOf(\"null\" to 0, \"eins\" to 1, \"zwei\" to 2, \"drei\" to 3, \"vier\" to 4, \"f\u00fcnf\" to 5, \"sechs\" to 6, \"sieben\" to 7, \"acht\" to 8, \"neun\" to 9)\n    // Split the input string into a list of words\n    val numList = numbers.split(\" \")\n    // Map each word in the list to its numeric value using the map created above and sort the resulting list\n    val sortedNumList = numList.map { numMap[it]!! }.sorted()\n    // Map each number in the sorted list back to its word representation using the same map and join them into a string separated by spaces\n    return sortedNumList.joinToString(\" \") { key -> numMap.filterValues { it == key }.keys.first() }\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "val minValue = numbers.min()\n    val maxValue = numbers.max()\n\n    return numbers.map { (it - minValue) / (maxValue - minValue) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "return string.map{\n        if (it.isUpperCase()) it.toLowerCase() else it.toUpperCase()\n    }.joinToString(\"\")\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "val result = mutableListOf<Any>()\n    for (item in l) {\n        if (item is Int && item > 0) {\n            result.add(item)\n        }\n    }\n    return result\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "if (n <= 1) return false // Eine Zahl kleiner oder gleich 1 ist keine Primzahl\n   for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n       if (n % i == 0) return false // Wenn die Zahl durch eine andere Zahl teilbar ist, ist sie keine Primzahl\n   }\n   return true // Wenn keine Teilbarkeit gefunden wurde, ist die Zahl eine Primzahl\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "return l.distinct().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n        if (num <= 1) return false\n        for (i in 2..sqrt(num.toDouble()).toInt()) if (num % i == 0) return false\n        return true\n    }\n\n    var count = 0\n    var fibSeq = listOf(0, 1)\n\n    while (count < n) {\n        val nextFib = fibSeq[fibSeq.lastIndex - 1] + fibSeq[fibSeq.lastIndex]\n        if (isPrime(nextFib)) count++\n        fibSeq += nextFib\n    }\n\n    return fibSeq.last()\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "if (l.size < 3) return false\n\n    val sortedList = l.sorted()\n\n    for (i in 0 until sortedList.size - 2) {\n        var left = i + 1\n        var right = sortedList.size - 1\n\n        while (left < right) {\n            val sum = sortedList[i] + sortedList[left] + sortedList[right]\n\n            if (sum == 0) return true\n            else if (sum < 0) left++\n            else right--\n        }\n    }\n\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "val set = HashSet<Int>()\n    for (num in l) {\n        if (-num in set) return true\n        set.add(num)\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "if (n == 0 || n == 1) return 0\n   if (n == 2) return 2\n   if (n == 3) return 0\n\n   var a = 0; var b = 0; var c = 2; var d = 0\n\n   for (i in 4..n) {\n       val temp = a + b + c + d\n       a = b; b = c; c = d; d = temp\n   }\n\n   return d\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[sortedList.size / 2] + sortedList[(sortedList.size - 1) / 2]) / 2.0\n    } else {\n        sortedList[sortedList.size / 2]\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "return text == text.reversed()\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "val vowels = listOf(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n   var resultText = \"\"\n\n   for (char in text){\n       if (!vowels.contains(char.toString())){\n           resultText += char\n       }\n   }\n   return resultText\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "for (number in l) {\n        if (number >= t) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "// First approach: Convert both strings to lists of characters, sort them and compare if they're equal.\n\n    val sortedListS0 = s0.toCharArray().sorted()\n    val sortedListS1 = s1.toCharArray().sorted()\n\n    return sortedListS0 == sortedListS1\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "if (n <= 1) return n\n  var a = 0\n  var b = 1\n\n  for (i in 2..n) {\n    val temp = a\n    a = b\n    b += temp\n  }\n  return b\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "val s1 = l1.toSet() // Erstellen Sie eine Menge von der ersten Liste\n   val s2 = l2.toSet() // Erstellen Sie eine Menge von der zweiten Liste\n   return (s1 intersect s2).sorted() // Geben Sie die sortierte Schnittmenge zur\u00fcck\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "var num = n\n    var i = 2\n    while (i <= num) {\n        if (num % i == 0) {\n            num /= i\n        } else {\n            i++\n        }\n    }\n    return i\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "var sum = 0;\n    for (i in 1..n) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "return xs.drop(1).mapIndexed{ index, value -> (index + 1) * value }\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "if (n < 3) return if (n == 0 || n == 1) 0 else 1\n\n    var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n\n    for(i in 3..n){\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "var count = 0\n    val lowerCaseS = s.toLowerCase()\n    for (c in lowerCaseS) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++\n        } else if (c == 'y' && s.lastIndexOf(c) == lowerCaseS.length - 1) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "val freq = mutableMapOf<Int, Int>()\n    for (num in lst) {\n        if (freq.containsKey(num)) {\n            freq[num] = freq[num]!! + 1\n        } else {\n            freq[num] = 1\n        }\n    }\n\n    var maxNum = -1\n    for ((num, count) in freq) {\n        if (count >= num && num > maxNum) {\n            maxNum = num\n        }\n    }\n\n    return maxNum\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "if (a + b > c && a + c > b && b + c > a) {\n        // Die Seiten bilden ein g\u00fcltiges Dreieck.\n        // Berechne den halben Umfang des Dreiecks.\n        val s = (a + b + c).toDouble() / 2\n\n        // Berechne die Fl\u00e4che mit der Heron-Formel und runde auf 2 Dezimalstellen.\n        val area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return String.format(\"%.2f\", area).toDouble()\n    } else {\n        // Die Seiten bilden kein g\u00fcltiges Dreieck.\n        return -1\n    }\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "if (q != q.reversed()) return false // pr\u00fcfen, ob die Liste symmetrisch ist\n   if (q.sum() > w) return false         // pr\u00fcfen, ob das Gesamtgewicht den maximalen Wert \u00fcberschreitet\n   return true                            // wenn beide Bedingungen erf\u00fcllt sind, gibt die Funktion 'true' zur\u00fcck\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "var num = a\n   var count = 0\n   for (i in 2..num/2) {\n      if (isPrime(i)) {\n         while (num % i == 0){\n            num /= i\n            count++\n         }\n     }\n     // If we have more than three prime factors, return false\n     if(count > 3) return false\n   }\n   // If last number is a prime and count less than or equal to 3, it's valid\n   if (num > 1 && isPrime(num)) count++\n   return count == 3\n}\n\nfun isPrime(n: Int): Boolean {\n   for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n      if (n % i == 0) return false\n   }\n   return true\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "return \"db${Integer.toBinaryString(decimal)}db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "if (s.length < 3) return false // wenn die L\u00e4nge kleiner als 3 ist, kann es nicht gl\u00fccklich sein\n   for (i in 0..s.length - 3) { // iteriere \u00fcber jeden Index bis zum drittletzten Element\n      val sub = s.substring(i, i + 3) // nimm die Unterzeichenfolge der L\u00e4nge 3\n      if (sub[0] == sub[1] || sub[1] == sub[2] || sub[0] == sub[2]) return false // \u00fcberpr\u00fcfe, ob alle drei Buchstaben unterschiedlich sind. Wenn nicht, ist die Zeichenfolge nicht gl\u00fccklich\n   }\n   return true // wenn alle Unterzeichenfolgen von 3 unterschiedlichen Buchstaben haben, dann ist die Zeichenfolge gl\u00fccklich\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "val gradeMap = mapOf(\n        4.0 to \"A+\",\n        inRange(3.7..3.9) to \"A\",\n        inRange(3.3..3.6) to \"A-\",\n        inRange(3.0..3.2) to \"B+\",\n        inRange(2.7..2.9) to \"B\",\n        inRange(2.3..2.6) to \"B-\",\n        inRange(2.0..2.2) to \"C+\",\n        inRange(1.7..1.9) to \"C\",\n        inRange(1.3..1.6) to \"C-\",\n        inRange(1.0..1.2) to \"D+\",\n        1.0 to \"D\",\n        inRange(0.7..0.9) to \"D-\",\n        0.0 to \"E\"\n    )\n\n    return grades.map { grade ->\n        val gpa = grade as Double\n        gradeMap.entries.findLast { (range, _) -> range contains gpa }?.value ?: throw IllegalArgumentException(\"Invalid GPA\")\n    }\n}\n\nprivate infix fun ClosedFloatingPointRange<Double>.contains(gpa : Double) = start <= gpa && end >= gpa"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "if (string.length < 2) return false\n    for (i in 2..string.length / 2) {\n        if (string.length % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "var sum = 0\n    var num = n\n\n    while (num > 0) {\n        sum += num % 10\n        num /= 10\n    }\n\n    return Integer.toBinaryString(sum)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "val coordinates = mutableListOf<Pair<Int, Int>>()\n    for (i in lst.indices) {\n        if (lst[i] is List<*>) {\n            for (j in (lst[i] as List<*>).indices) {\n                if ((lst[i] as List<*>)[j] == x) {\n                    coordinates.add(Pair(i, j))\n                }\n            }\n        }\n    }\n    return coordinates.sortedWith(compareBy({ it.first }, { -it.second }))\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "var smallest = Int.MAX_VALUE\n   var secondSmallest = Int.MAX_VALUE\n\n   for (num in lst) {\n       if (num is Int && num < smallest) {\n           secondSmallest = smallest\n           smallest = num\n       } else if (num is Int && num < secondSmallest && num != smallest) {\n           secondSmallest = num\n       }\n   }\n\n   return if (secondSmallest == Int.MAX_VALUE) null else secondSmallest\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "val sentences = s.split(\". \", \"? \", \"! \") // split the string into sentences\n   var boredomCount = 0\n\n   for (sentence in sentences) {\n       if (sentence.startsWith(\"Ich\")) {\n           boredomCount++\n       }\n   }\n\n   return boredomCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    var maxPrime = -1\n    for (num in lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num\n        }\n    }\n\n    if (maxPrime == -1) return 0\n\n    var sum = 0\n    while (maxPrime > 0) {\n        sum += maxPrime % 10\n        maxPrime /= 10\n    }\n\n    return sum\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "if (dict.isEmpty()) return false\n\n   var isAllLower = true\n   var isAllUpper = true\n\n   for (key in dict.keys) {\n       if (key !is String) return false\n       if (!key.all { it.isLowerCase() }) isAllLower = false\n       if (!key.all { it.isUpperCase() }) isAllUpper = false\n   }\n\n   return isAllLower || isAllUpper\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "val doubleValue = value.toDouble()\n    val floorValue = Math.floor(doubleValue)\n    val ceilValue = Math.ceil(doubleValue)\n\n    if (doubleValue - floorValue == ceilValue - doubleValue) {\n        return if (ceilValue > 0) ceilValue.toInt() else floorValue.toInt()\n    } else {\n        return if (doubleValue - floorValue < ceilValue - doubleValue) floorValue.toInt() else ceilValue.toInt()\n    }\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    var current = n\n    while (current > 0) {\n        result.add(current)\n        current += if (current % 2 == 0) 2 else 1\n    }\n    return result\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "return s.split(\",\", \" \")\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "var greatestEvenNumber = -1\n   for (i in x..y) {\n      if (i % 2 == 0 && i > greatestEvenNumber) {\n         greatestEvenNumber = i\n      }\n   }\n   return greatestEvenNumber\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "if (n > m) return -1\n\n    val sum = (n..m).sum()\n    val avg = Math.round(sum.toDouble() / (m - n + 1))\n    val binary = Integer.toBinaryString(avg)\n\n    return \"0b$binary\"\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "val list = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            var fact = 1\n            for (j in 1..i) fact *= j\n            list.add(fact)\n        } else {\n            var sum = 0\n            for (j in 1..i) sum += j\n            list.add(sum)\n        }\n    }\n    return list.toList()\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "var even = 0\n    var odd = 0\n    for (i in 1..n) {\n        val numString = i.toString()\n        if (numString == numString.reversed()) {\n            if (i % 2 == 0) {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return listOf(even, odd)\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "if (arr.isEmpty()) return true\n    var count = 0\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) count++\n        if (count > 1) return false\n    }\n    if (arr[0] > arr[arr.lastIndex]) count++\n    return count <= 1\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "var evens = lst1.filter{it % 2 == 0}\n    var oddsFromLst1 = lst1.filter{it % 2 != 0}\n    var oddsFromLst2 = lst2.filter{it % 2 != 0}\n\n    if(oddsFromLst1.size <= oddsFromLst2.size) {\n        return \"YES\"\n    } else {\n        evens += oddsFromLst2\n        oddsFromLst1 = oddsFromLst1.filter{it !in evens}\n        if(oddsFromLst1.size == 0) {\n            return \"YES\"\n        } else {\n            return \"NO\"\n        }\n    }\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "// Removing the characters in s that match with any character in c\n    var result = s.filterNot { it in c }\n\n    // Checking if the resulting string is a palindrome\n    val isPalindrome = result == result.reversed()\n\n    return listOf(result, isPalindrome)\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "var totalBuckets = 0\n    var currentWater = 0\n    for (well in grid) {\n        for (unit in well) {\n            if (unit == 1) {\n                currentWater++\n                if (currentWater == capacity) {\n                    totalBuckets++\n                    currentWater = 0\n                }\n            }\n        }\n    }\n    if (currentWater > 0) {\n        totalBuckets++\n    }\n    return totalBuckets\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "// define a regular expression for consonants\n    val consonantRegex = Regex(\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\")\n\n    return s.split(\" \").filter { word ->\n        // count the number of consonants in the word and compare it to n\n        consonantRegex.findAll(word).count() == n\n    }\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "return arr.sortedDescending().take(k).sorted()\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "var sum = 0\n    for (i in 0 until k) {\n        if (arr[i] >= -99 && arr[i] <= 99) { // Check if element has at most two digits\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "// Sort the intervals\n    val sortedInterval1 = listOf(minOf(interval1[0], interval1[1]), maxOf(interval1[0], interval1[1]))\n    val sortedInterval2 = listOf(minOf(interval2[0], interval2[1]), maxOf(interval2[0], interval2[1]))\n\n    // Check if intervals overlap\n    if (sortedInterval1[1] < sortedInterval2[0] || sortedInterval2[1] < sortedInterval1[0]) {\n        return \"NO\"\n    }\n\n    // Find the intersection length\n    val start = maxOf(sortedInterval1[0], sortedInterval2[0])\n    val end = minOf(sortedInterval1[1], sortedInterval2[1])\n    val intersectionLength = end - start + 1\n\n    // Check if the length is a prime number\n    for (i in 2..<intersectionLength) {\n        if (intersectionLength % i == 0) {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "var list = MutableList(n + 1){0}\n    if (n >= 0) list[0] = 1\n    if (n >= 1) list[1] = 3\n    for (i in 2..n) {\n        list[i] = if (i % 2 == 0) 1 + i / 2 else list[i - 1] + list[i - 2] + list[i + 1]\n    }\n    return list.toList()\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "var product = 1\n    var num = n\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) {\n            product *= digit\n        }\n        num /= 10\n    }\n    return if (product == 1) 0 else product\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "var balance = 0\n    var prevChar = '?'\n    for (ch in string) {\n        if (ch == '[') {\n            balance++\n        } else if (ch == ']') {\n            if (prevChar == '[' && balance > 1) {\n                return true\n            }\n            balance--\n        }\n        prevChar = ch\n    }\n    return false\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "var sum = 0\n    for (i in lst) {\n        val num = kotlin.math.ceil(i as Double).toInt() // Round up to the nearest integer and convert to Integer\n        sum += num * num // Square the number and add it to the sum\n    }\n    return sum\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "if (txt.isEmpty()) return false\n    val lastChar = txt[txt.length - 1]\n    if (!lastChar.isLetter()) return false\n    if (txt.length >= 2 && txt[txt.length - 2].isWhitespace()) return false\n    return true\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "for (i in arr.size-2 downTo 0) {\n     if (arr[i] >= arr[i+1]) {\n       return i\n     }\n   }\n   return -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "var a: Int? = null\n    var b: Int? = null\n\n    for (i in lst) {\n        if (i is Int) {\n            when {\n                i < 0 -> a = maxOf(a ?: i, i)\n                i > 0 -> b = minOf(b ?: i, i)\n            }\n        }\n    }\n\n    return listOf(a, b)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "if (n < 0) throw IllegalArgumentException(\"Input must be greater than or equal to zero\")\n   var result = 1;\n   for (i in n downTo 1) {\n     var factorial = 1;\n     for (j in i downTo 2) {\n       factorial *= j;\n     }\n     result *= factorial;\n   }\n   return result;\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n        if (n < 2) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    val words = sentence.split(\" \")\n    val primeWords = mutableListOf<String>()\n    for (word in words) {\n        if (isPrime(word.length)) primeWords.add(word)\n    }\n    return primeWords.joinToString(\" \")\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "val (xNumerator, xDenominator) = x.split(\"/\").map{ it.toInt() }\n    val (nNumerator, nDenominator) = n.split(\"/\").map{ it.toInt() }\n\n    return (xNumerator * nNumerator) % gcd(xDenominator, nDenominator) == 0\n}\n\nfun gcd(a: Int, b: Int): Int {\n    if (b == 0) return a\n    return gcd(b, a % b)\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "val sortedList = nums.sortedWith(compareBy({ calculateSumOfDigits(it as Int) }, { nums.indexOf(it) }))\n    return sortedList\n}\n\nfun calculateSumOfDigits(n: Int): Int {\n    var sum = 0\n    var num = Math.abs(n)\n    while (num > 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "var count = 0\n    for (i in nums) {\n        if (i is Int && i > 10) {\n            val firstDigit = Character.getNumericValue(i.toString()[0])\n            val lastDigit = Character.getNumericValue(i.toString().last())\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "var count = 0\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        for (j in i+1..n) {\n            val b = j * j - j + 1\n            for (k in j+1..n) {\n                val c = k * k - k + 1\n                if ((a + b + c) % 3 == 0) count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!planets.contains(planet1) || !planets.contains(planet2)) {\n        return emptyList()\n    }\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n    return if (index1 < index2) {\n        planets.subList(index1 + 1, index2)\n    } else {\n        planets.subList(index2 + 1, index1)\n    }\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "if (isPrime(n)) return x\n    else return y\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "var sum = 0\n    for (i in lst) {\n        if (i is Int && i > 0 && i % 2 != 0) {\n            sum += i * i\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "var maxStrength = -Double.MAX_VALUE\n    var bestExtension = \"\"\n\n    for (extension in extensions) {\n        val strength = extension.count { it.isUpperCase() } - extension.count { it.isLowerCase() }.toDouble()\n        if (strength > maxStrength) {\n            maxStrength = strength\n            bestExtension = extension\n        }\n    }\n\n    return \"$className.$bestExtension\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "if (b.length > a.length) return false // if pattern is longer than text, it cannot be part of rotation\n    for (i in 0 until a.length) {\n        var j = 0\n        while (j < b.length && i + j < a.length && b[j] == a[i+j]) j++ // compare each character of pattern with corresponding character in rotated text\n        if (j == b.length) return true // if all characters match, return true\n    }\n    return false // if no match is found, return false\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "val symbols = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n   val values = intArrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n   var num = number\n   val sb = StringBuilder()\n\n   for (i in values.indices) {\n       while (num >= values[i]) {\n           num -= values[i]\n           sb.append(symbols[i])\n       }\n   }\n   return sb.toString()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "val list = arrayOf(a, b, c).sorted()\n    return (list[0]*list[0] + list[1]*list[1]) == list[2]*list[2]\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "return s.map { if (it.isLetter()) if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase() else it }\n            .joinToString(\"\")\n            .let { if (it.all{ !it.isLetter() }) it.reversed() else it }\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "if (text.isEmpty()) {\n       return null\n    } else {\n       val bytes = MessageDigest.getInstance(\"MD5\").digest(text.toByteArray())\n       return BigInteger(1, bytes).toString(16).padStart(32, '0')\n    }\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "val start = if (a < b) a else b\n    val end = if (a > b) a else b\n    var evenNumbers = mutableListOf<Int>()\n    for (i in start..end){\n        if(i%2==0)evenNumbers.add(i)\n    }\n    return evenNumbers\n}"}

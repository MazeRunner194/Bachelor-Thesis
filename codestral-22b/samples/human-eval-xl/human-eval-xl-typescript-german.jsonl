{"task_id": "typescript/0", "language": "typescript", "completion": "let balance = 0;\n    for(let i=0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "typescript/1", "language": "typescript", "completion": "let sum = numbers.reduce((a, b) => a + b, 0);\n    let product = numbers.reduce((a, b) => a * b, 1);\n    return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "if(a.length !== b.length) {\n     throw new Error(\"Input strings must be of equal length\");\n   }\n\n   let result = '';\n\n   for(let i=0; i<a.length; i++) {\n      // Perform XOR operation and convert the result to string\n      result += (Number(a[i]) ^ Number(b[i])) + \"\";\n   }\n\n  return result;\n}"}
{"task_id": "typescript/3", "language": "typescript", "completion": "if (!strings.length) return null;\n  let maxLength = strings[0].length;\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i];\n    if (currentString.length > maxLength) {\n      maxLength = currentString.length;\n      longestString = currentString;\n    }\n  }\n\n  return longestString;\n}"}
{"task_id": "typescript/4", "language": "typescript", "completion": "if (!b) return a;\n  else return greatest_common_divisor(b, a % b);\n}"}
{"task_id": "typescript/5", "language": "typescript", "completion": "// Create a map to store the string representation of numbers and their corresponding values\n    const numberMap: Record<string, number> = {\n        null: 0,\n        eins: 1,\n        zwei: 2,\n        drei: 3,\n        vier: 4,\n        f\u00fcnf: 5,\n        sechs: 6,\n        sieben: 7,\n        acht: 8,\n        neun: 9,\n    };\n\n    // Split the input string into an array of number strings\n    const numbersArray = numbers.split(' ');\n\n    // Convert each number string to its corresponding value using the map\n    const valuesArray = numbersArray.map(number => numberMap[number]);\n\n    // Sort the array of values in ascending order\n    const sortedValues = valuesArray.sort((a, b) => a - b);\n\n    // Convert each sorted value back to its corresponding string representation using the map\n    const sortedNumbersArray = sortedValues.map(value => {\n        for (const key in numberMap) {\n            if (numberMap[key] === value) return key;\n        }\n    });\n\n    // Join the sorted array of number strings into a single string with spaces between each string\n    const sortedNumbersString = sortedNumbersArray.join(' ');\n\n    return sortedNumbersString;\n};"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const minValue = Math.min(...numbers);\n   const maxValue = Math.max(...numbers);\n   const range = maxValue - minValue;\n\n   return numbers.map((num) => (num - minValue) / range);\n}"}
{"task_id": "typescript/7", "language": "typescript", "completion": "let resultString = \"\";\n\n   for(let i=0; i<string0.length; i++) {\n      if(string0[i] === string0[i].toLowerCase()) {\n         resultString += string0[i].toUpperCase();\n      } else {\n         resultString += string0[i].toLowerCase();\n      }\n   }\n\n   return resultString;\n}"}
{"task_id": "typescript/8", "language": "typescript", "completion": "return l.filter(num => num > 0);\n}"}
{"task_id": "typescript/9", "language": "typescript", "completion": "if (n <= 1) return false;\n  if (n === 2 || n === 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5, w = 2; i * i <= n; i += w, w = 6 - w) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "typescript/10", "language": "typescript", "completion": "return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "let count = 0;\n   let i = 2;\n   while(count < n){\n       if(isFibonacci(i) && math.isPrime(i)){\n           count++;\n       }\n       i++;\n   }\n   return i-1;\n};\n\nconst isFibonacci = (num: number): boolean => {\n   let x = 0;\n   let y = 1;\n   while(y < num){\n       const z = y + x;\n       x = y;\n       y = z;\n   }\n   return y === num;\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const len = l.length;\n\n    for (let i = 0; i < len - 2; i++) {\n        for (let j = i + 1; j < len - 1; j++) {\n            for (let k = j + 1; k < len; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const seenNumbers = new Set();\n    for (let num of l) {\n        if (seenNumbers.has(-num)) {\n            return true;\n        }\n        seenNumbers.add(num);\n    }\n    return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "if (n < 0) throw new Error('Index must be non-negative');\n   if (n === 0 || n === 1) return 0;\n   if (n === 2) return 2;\n   if (n === 3) return 0;\n\n   let a = 0, b = 0, c = 2, d = 0;\n   for(let i = 4; i <= n; i++) {\n     const temp = a + b + c + d;\n     a = b;\n     b = c;\n     c = d;\n     d = temp;\n   }\n   return d;\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "l.sort((a, b) => a - b);\n   const length = l.length;\n   if (length % 2 === 0) {\n       return (l[Math.floor(length / 2)] + l[Math.ceil(length / 2)]) / 2;\n   } else {\n       return l[Math.floor(length / 2)];\n   }\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "// Um zu \u00fcberpr\u00fcfen, ob ein String ein Palindrom ist, vergleichen wir jeden Charakter des Strings mit seinem entsprechenden Charakter von hinten her. Wenn alle Paare \u00fcbereinstimmen, dann ist der String ein Palindrom.\n  let left = 0; // Zeiger auf den ersten Charakter des Strings\n  let right = text.length - 1; // Zeiger auf den letzten Charakter des Strings\n\n  while (left < right) { // Schleife, solange der linke Zeiger kleiner als der rechte Zeiger ist\n    if (text[left] !== text[right]) { // Wenn die beiden Charaktere nicht \u00fcbereinstimmen\n      return false; // Der String ist kein Palindrom\n    }\n    left++; // Bewegt den linken Zeiger um einen Schritt nach rechts\n    right--; // Bewegt den rechten Zeiger um einen Schritt nach links\n  }\n\n  return true; // Wenn die Schleife ohne ein falsches Paar beendet wird, dann ist der String ein Palindrom\n}"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n   let result = '';\n\n   for(let i = 0; i < text.length; i++) {\n      if (!vowels.includes(text[i].toLowerCase())) {\n         result += text[i];\n      }\n   }\n\n   return result;\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "for (let i = 0; i < l.length; i++) {\n     if (l[i] >= t) {\n       return false;\n     }\n   }\n   return true;\n };"}
{"task_id": "typescript/19", "language": "typescript", "completion": "return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const countCharacters = (str: string): Map<string, number> => {\n        const charCountMap = new Map<string, number>();\n        for(let char of str){\n            if(charCountMap.has(char)) charCountMap.set(char, charCountMap.get(char)! + 1);\n            else charCountMap.set(char, 1);\n        }\n        return charCountMap;\n    };\n\n    const mapS0 = countCharacters(s0);\n    for (let [char, count] of countCharacters(s1)) {\n        if(!mapS0.has(char) || mapS0.get(char)! < count) return false;\n    }\n    return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "if (n <= 0) return 0; // Fibonacci sequence starts with 0, 1, ...\n  else if (n === 1) return 1;\n  else {\n    let a = 0;\n    let b = 1;\n    for (let i = 2; i <= n; i++) {\n      const temp = a + b;\n      a = b;\n      b = temp;\n    }\n    return b;\n  }\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const setL1 = new Set(l1);\n    const setL2 = new Set(l2);\n\n    let result: Array<number> = [];\n\n    for (let item of setL1) {\n        if (setL2.has(item)) {\n            result.push(item);\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "typescript/23", "language": "typescript", "completion": "let i;\n\n    // Print the number of 2s that divide n\n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n\n    // n must be odd at this point, thus a skip of 2 can be used\n    for (i = 3; i <= Math.sqrt(n); i += 2) {\n        // While i divides n , print i and divide n\n        while (n % i == 0) {\n            n = n / i;\n        }\n    }\n\n    // Condition if n is a prime number greater than 2\n    if (n > 2) {\n        return n;\n    }\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "// Initialisiere die Summe mit 0.\n    let sum = 0;\n\n    // Iteriere von 1 bis n (inklusive).\n    for (let i = 1; i <= n; i++) {\n        // Addiere den aktuellen Wert zur Summe hinzu.\n        sum += i;\n    }\n\n    // Gib die Summe zur\u00fcck.\n    return sum;\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const result = [];\n    for(let i = 1; i < xs.length; i++) {\n      result.push(i * xs[i]);\n    }\n    return result;\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "// Initialize the first three FibFib numbers.\n   let fibs: [number, number, number] = [0, 0, 1];\n\n   // Compute the n-th FibFib number if it's larger than 2.\n   for (let i = 3; i <= n; i++) {\n       const nextFib = fibs[0] + fibs[1] + fibs[2];\n       fibs[0] = fibs[1];\n       fibs[1] = fibs[2];\n       fibs[2] = nextFib;\n   }\n\n   // Return the n-th FibFib number.\n   return fibs[n % 3];\n};\n\n// Test cases\nconsole.log(fibfib(1)); // Expected output: 0\nconsole.log(fibfib(5)); // Expected output: 4\nconsole.log(fibfib(8)); // Expected output: 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "let count = 0;\n   const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n   for(let i = 0; i < s.length; i++) {\n     if(vowels.includes(s[i].toLowerCase())) {\n       count++;\n     } else if (s[i].toLowerCase() === 'y' && i === s.length - 1) {\n       count++;\n     }\n   }\n\n   return count;\n}"}
{"task_id": "typescript/28", "language": "typescript", "completion": "// First, we create a map to store the frequency of each number in the list.\n    const freqMap = new Map();\n    for(let num of lst) {\n        if(!freqMap.has(num)) {\n            freqMap.set(num, 1);\n        } else {\n            freqMap.set(num, freqMap.get(num) + 1);\n        }\n    }\n\n   // Then we iterate over the map in descending order of numbers, checking if any number's frequency is greater or equal to its value.\n   for (let [key, value] of [...freqMap].sort((a, b) => b[0] - a[0])) {\n        if(value >= key) return key;\n    }\n\n   // If we haven't found any such number, we return -1.\n    return -1;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "if ((a + b <= c) || (b + c <= a) || (c + a <= b)) {\n      return -1;\n    } else {\n      const s = (a + b + c) / 2;\n      const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n      return parseFloat(area.toFixed(2));\n    }\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const isPalindrome = q.join('') === q.reverse().join('');\n   const sumOfElements = q.reduce((a, b) => a + b, 0);\n\n   return isPalindrome && sumOfElements <= w;\n}"}
{"task_id": "typescript/31", "language": "typescript", "completion": "let count = 0;\n   for (let i = 2; i <= a; i++) {\n     while (a % i == 0) {\n       count++;\n       if (count > 3) return false;\n       a /= i;\n     }\n   }\n   return count == 3;\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "return 'db' + decimal.toString(2) + 'db';\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "if (s.length < 3){\n      return false;\n    }\n    for (let i = 2; i < s.length; i++) {\n        if (s[i] == s[i - 1] || s[i] == s[i - 2] || s[i - 1] == s[i - 2]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const letterGrades = grades.map(gpa => {\n        if (gpa >= 3.7) return 'A';\n        else if (gpa > 3.3) return 'A-';\n        else if (gpa > 3.0) return 'B+';\n        else if (gpa > 2.7) return 'B';\n        else if (gpa > 2.3) return 'B-';\n        else if (gpa > 2.0) return 'C+';\n        else if (gpa > 1.7) return 'C';\n        else if (gpa > 1.3) return 'C-';\n        else if (gpa > 1.0) return 'D+';\n        else if (gpa > 0.7) return 'D';\n        else if (gpa > 0.0) return 'D-';\n        else return 'E';\n    });\n\n    letterGrades[letterGrades.findIndex(grade => grade === 'A')] = 'A+';\n\n    return letterGrades;\n}"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const lengthIsPrime = function(length: number): boolean {\n     if (length < 2) return false;\n     for (let i = 2; i <= Math.sqrt(length); i++) {\n       if (length % i === 0) return false;\n     }\n     return true;\n   };\n\n   return lengthIsPrime(string0.length);\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "let sum = 0;\n   while(N > 0){\n       sum += N % 10;\n       N = Math.floor(N / 10);\n   }\n   return sum.toString(2);\n}"}
{"task_id": "typescript/37", "language": "typescript", "completion": "let results: Array<Array<number>> = [];\n\n   for(let i=0; i < lst.length; i++) {\n     for(let j=0; j < lst[i].length; j++) {\n       if (lst[i][j] === x) {\n         results.push([i, j]);\n       }\n     }\n   }\n\n   // Sort by row in ascending order and then column in descending order\n   results.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n\n   return results;\n}"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const uniqueSortedLst = [...new Set(lst)].sort((a, b) => a - b);\n   return uniqueSortedLst.length < 2 ? null : uniqueSortedLst[1];\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const sentences = S.split(/[.!?]/); // split the string into sentences\n   let boredCount = 0;\n\n   for (let i = 0; i < sentences.length; i++) {\n     if (sentences[i].trim().startsWith('Ich')) { // check if sentence starts with 'Ich'\n       boredCount++;\n     }\n   }\n\n   return boredCount;\n };"}
{"task_id": "typescript/40", "language": "typescript", "completion": "let maxPrimeNumber = -Infinity;\n   for(let i=0;i<lst.length;i++) {\n       if(isPrime(lst[i])) {\n           maxPrimeNumber = Math.max(maxPrimeNumber, lst[i]);\n       }\n   }\n   return sumOfDigits(maxPrimeNumber);\n};\n\nfunction isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction sumOfDigits(num: number): number {\n   let sum = 0;\n   while (num > 0) {\n       sum += num % 10;\n       num = Math.floor(num / 10);\n   }\n   return sum;\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "if (dict.size === 0) return false;\n\n   let firstKeyType = typeof dict.keys().next().value;\n   if (firstKeyType !== 'string') return false;\n\n   for (let key of dict.keys()) {\n       if ((typeof key !== 'string') ||\n           ((key === key.toLowerCase() && key !== key.toUpperCase()) !== (firstKeyType === firstKeyType.toLowerCase()))) {\n           return false;\n       }\n   }\n\n   return true;\n}"}
{"task_id": "typescript/42", "language": "typescript", "completion": "let num = parseFloat(value);\n\n   if (num >= 0){\n     return Math.floor(num + 0.5);\n   } else {\n     return Math.ceil(num - 0.5);\n   }\n}"}
{"task_id": "typescript/43", "language": "typescript", "completion": "let result = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(n + i);\n        } else {\n            if (n % 2 === 0) {\n                result.push(n + i * 2);\n            } else {\n                result.push(n + i * 2 - 1);\n            }\n        }\n    }\n    return result;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "// Replace commas with spaces and split the string into an array of words\n    return s.replace(/,/g, '').split(' ');\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "if (x > y) { // If x is greater than y, swap them.\n     let temp = x;\n     x = y;\n     y = temp;\n   }\n\n   for(let i=y; i>=x; i--){ // Start from y and go down to x.\n     if (i % 2 == 0) { // If the number is even, return it.\n       return i;\n     }\n   }\n\n   // If no even numbers were found in the range [x,y], return -1.\n   return -1;\n };"}
{"task_id": "typescript/46", "language": "typescript", "completion": "if(n > m){\n     return -1;\n   }\n\n   let sum = 0;\n\n   for(let i=n; i<=m; i++){\n     sum += i;\n   }\n\n   const avg = Math.round(sum / (m - n + 1));\n\n   return (avg >>> 0).toString(2);\n };"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const result: Array<number> = [];\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n\n    return result;\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "let even = 0, odd = 0;\n    for(let i = 1; i <= n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n};\n\nfunction isPalindrome(n: number): boolean {\n    let rev = 0;\n    for(let i = n; i > 0; i = Math.floor(i / 10)) {\n        rev = (rev * 10) + (i % 10);\n    }\n    return n == rev;\n}"}
{"task_id": "typescript/49", "language": "typescript", "completion": "if (!Array.isArray(arr)) {\n        throw new Error('Input must be an array');\n    }\n\n    // If the array is empty or has only one element, return true\n    if (arr.length <= 1) {\n        return true;\n    }\n\n    const sortedArr = [...arr].sort((a, b) => a - b);\n\n    for (let i = 0; i < arr.length; i++) {\n        const shiftedArr = shiftRight(arr, i);\n        if (isNonDecreasing(shiftedArr)) {\n            return true;\n        }\n    }\n\n    // If no non-decreasing sequence is found after checking all shifts, return false\n    return false;\n};\n\nconst shiftRight = function (arr: Array<number>, times: number): Array<number> {\n    for (let i = 0; i < times; i++) {\n        arr.unshift(arr.pop()!);\n    }\n    return arr;\n}\n\nconst isNonDecreasing = function (arr: Array<number>): boolean {\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const oddIndicesLst1: number[] = [];\n    const evenNumbersLst2: number[] = [];\n\n    // Find indices of odd numbers in lst1 and even numbers in lst2\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n            oddIndicesLst1.push(i);\n        }\n    }\n    for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n            evenNumbersLst2.push(lst2[j]);\n        }\n    }\n\n    // If there are more odd numbers in lst1 than even numbers in lst2, return 'NO'\n    if (oddIndicesLst1.length > evenNumbersLst2.length) {\n        return \"NO\";\n    }\n\n    // Exchange elements between lst1 and lst2 to make all elements of lst1 even\n    for (let i = 0; i < oddIndicesLst1.length; i++) {\n        const index = oddIndicesLst1[i];\n        lst1[index] = evenNumbersLst2[i];\n    }\n\n    // Check if all elements of lst1 are now even, return 'YES' or 'NO' accordingly\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "let res = '';\n    for(let i=0;i<s.length;i++) {\n      if(!c.includes(s[i])) {\n        res += s[i];\n      }\n    }\n    return [res, res === res.split('').reverse().join('')]\n}\n\n// Beispiele\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // => ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // => ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // => ['cdedc', true]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "// count total water units in the grid\n  let totalWater = 0;\n  for(let i=0; i<grid.length; i++){\n    for(let j=0; j<grid[i].length; j++){\n      if(grid[i][j] === 1){\n        totalWater++;\n      }\n    }\n  }\n\n  // calculate number of trips needed to empty all wells\n  let numTrips = Math.ceil(totalWater / capacity);\n\n  return numTrips;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let words = s.split(' ');\n    let result = [];\n\n    for(let word of words){\n        let consonantCount = 0;\n        for(let char of word){\n            if(!vowels.includes(char.toLowerCase())){\n                consonantCount++;\n            }\n        }\n        if(consonantCount === n){\n            result.push(word);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "typescript/54", "language": "typescript", "completion": "// Sort the array in ascending order\n    arr.sort((a, b) => a - b);\n\n    // Return the last k elements of the sorted array\n    return arr.slice(-k);\n}"}
{"task_id": "typescript/55", "language": "typescript", "completion": "return arr.slice(0,k).reduce((acc,curr) => {\n        if(curr < 100 || curr > -100) acc += curr;\n        return acc;\n    }, 0);\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const start1 = Math.max(interval1[0], interval2[0]);\n    const end1 = Math.min(interval1[1], interval2[1]);\n\n    if (start1 > end1) return 'NO';\n\n    const length = end1 - start1 + 1;\n    if (length < 2) return 'NO';\n\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) return 'NO';\n    }\n\n    return 'YES';\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const result = new Array<number>(n + 1).fill(0);\n    if (n >= 0) {\n        result[0] = 1;\n        if (n >= 1) {\n            result[1] = 3;\n            for (let i = 2; i <= n; i++) {\n                if (i % 2 === 0) {\n                    result[i] = 1 + i / 2;\n                } else {\n                    result[i] = result[i - 1] + result[i - 2] + result[(i + 1) % (n + 1)];\n                }\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "typescript/58", "language": "typescript", "completion": "// Konvertiere die Zahl in einen String, um einzelne Ziffern zu extrahieren\n    const numString = n.toString();\n    let product = 1;\n    let hasOddDigit = false;\n\n    // Durchlaufe jede Ziffer des Strings\n    for (let i = 0; i < numString.length; i++) {\n        const digit = parseInt(numString[i]);\n\n        // Wenn die Ziffer ungerade ist, multipliziere sie mit dem Produkt\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n    }\n\n    // Wenn es keine ungeraden Ziffern gibt, gib 0 zur\u00fcck\n    return hasOddDigit ? product : 0;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "let openBrackets = 0;\n    let nestedBrackets = false;\n\n    for (let char of string0) {\n        if (char === '[') {\n            openBrackets++;\n        } else if (char === ']') {\n            if (openBrackets > 1) {\n                nestedBrackets = true;\n            }\n            openBrackets--;\n        }\n    }\n\n    return nestedBrackets && openBrackets === 0;\n}"}
{"task_id": "typescript/60", "language": "typescript", "completion": "let sum = 0;\n   for(let i=0; i<lst.length; i++){\n     const roundedUpNumber = Math.ceil(lst[i]); // Rundet jedes Element in der Liste auf die n\u00e4chste Ganzzahl (Ceiling)\n     sum += Math.pow(roundedUpNumber, 2); // Quadriert das gerundete Zahl und addiert es zu der Summe\n   }\n   return sum;\n}"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const lastChar = txt.trim().slice(-1);\n\n    if (!/[a-zA-Z]/.test(lastChar)) return false; // last character is not a letter\n\n    const trimmedTxt = txt.trim();\n    return trimmedTxt.charAt(trimmedTxt.length - 2) === \" \"; // if the second to last character is a space, it's an independent word\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "let maxIndex = -1;\n\n   for(let i = 1; i < arr.length; i++){\n       if(arr[i] < arr[i-1]){\n           maxIndex = i;\n       }\n   }\n\n   return maxIndex;\n}"}
{"task_id": "typescript/63", "language": "typescript", "completion": "let maxNegative = -Infinity;\n   let minPositive = Infinity;\n\n   for(let num of lst) {\n     if(num < 0 && num > maxNegative) {\n       maxNegative = num;\n     } else if (num > 0 && num < minPositive) {\n       minPositive = num;\n     }\n   }\n\n   return [maxNegative !== -Infinity ? maxNegative : null, minPositive !== Infinity ? minPositive : null];\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "if (n < 0) {\n     throw new Error(\"Input must be a non-negative integer\");\n   }\n\n   let result = 1;\n   for (let i = n; i > 0; i--) {\n     result *= factorial(i);\n   }\n\n   return result;\n };\n\n const factorial = function (n: number) : number {\n   if (n < 0) {\n     throw new Error(\"Input must be a non-negative integer\");\n   }\n\n   let result = 1;\n   for (let i = 2; i <= n; i++) {\n     result *= i;\n   }\n\n   return result;\n };"}
{"task_id": "typescript/65", "language": "typescript", "completion": "// Define a helper function to check if a number is prime\n    const isPrime = (n: number): boolean => {\n        for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n            if(n % i === 0) return false;\n        return n > 1;\n    };\n\n    // Split the sentence into words\n    const words = sentence.split(' ');\n\n    // Filter out the words that have prime length\n    const primeWords = words.filter(word => isPrime(word.length));\n\n    // Join the prime words back into a string\n    return primeWords.join(' ');\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const x_arr = x.split('/').map(Number);\n    const n_arr = n.split('/').map(Number);\n\n    // Multiply the fractions\n    const num = x_arr[0] * n_arr[0];\n    const denom = x_arr[1] * n_arr[1];\n\n    // Check if the result is a whole number\n    return num % denom === 0;\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, val) => acc + parseInt(val), 0);\n        const sumB = b.toString().split('').reduce((acc, val) => acc + parseInt(val), 0);\n        return sumA - sumB;\n    });\n};\n\nconsole.log(order_by_points([1, 11, -1, -11, -12])) // [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])) // []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "return nums.filter(num => Math.abs(num) > 10 && num % 10 % 2 !== 0 && Math.floor(Math.abs(num / 10)) % 2 !== 0).length;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "let a = new Array(n);\n    for (let i = 0; i < n; ++i) {\n        a[i] = i*i - i + 1;\n    }\n\n    let count = [0, 0, 0]; // number of elements mod 3 equals to 0, 1 and 2.\n\n    for (let num of a) {\n      ++count[num % 3];\n    }\n\n    let totalTriples = 0;\n    totalTriples += count[0] * (count[0] - 1) * (count[0] - 2) / 6; // triples that sum up to a multiple of 3 and are all divisible by 3.\n    totalTriples += count[1] * (count[1] - 1) / 2 * count[2]; // triples that sum up to a multiple of 3 and have one number modulo 3 equal to 1 and the other two numbers modulo 3 equal to 2.\n    totalTriples += count[0] * (count[2] - 1) * count[2] / 2; // triples that sum up to a multiple of 3 and have one number modulo 3 equal to 0 and the other two numbers modulo 3 equal to 2.\n\n    return totalTriples;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return [];\n    }\n\n    const startIndex = planets.indexOf(planet1);\n    const endIndex = planets.indexOf(planet2);\n\n    if (startIndex < endIndex) {\n        return planets.slice(startIndex + 1, endIndex);\n    } else {\n        return planets.slice(endIndex + 1, startIndex);\n    }\n};\n\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/71", "language": "typescript", "completion": "let isPrime = true;\n   if (n === 2) {\n       return x;\n   } else if(n > 1){\n       for (let i = 2; i < n; i++) {\n           if (n % i == 0) {\n               isPrime = false;\n               break;\n           }\n       }\n   } else {\n       return y;\n   }\n   return isPrime ? x : y;\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "// Initialize the sum to 0\n  let sum = 0;\n\n  for(let i=0; i < lst.length; i++) {\n      const num = lst[i];\n\n      // Check if the number is a positive integer and odd\n      if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n          sum += Math.pow(num, 2);\n      }\n  }\n\n  return sum;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "let maxStrength = -Infinity;\n   let strongestExt = \"\";\n\n   for(let ext of extensions) {\n       const CAP = [...ext].filter((c) => c === c.toUpperCase() && isNaN(parseInt(c))).length;\n       const SM = [...ext].filter((c) => c === c.toLowerCase()).length;\n\n       const strength = CAP - SM;\n\n       if(strength > maxStrength) {\n           maxStrength = strength;\n           strongestExt = ext;\n       } else if (strength === maxStrength && extensions.indexOf(ext) < extensions.indexOf(strongestExt)) {\n           strongestExt = ext;\n       }\n   }\n\n   return `${class_name}.${strongestExt}`;\n}"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const lenA = a.length;\n    const lenB = b.length;\n\n    if(lenB > lenA){\n        return false;\n    }\n\n    for(let i=0;i<lenB;i++){\n        let rotatedString = b.substring(i) + b.substring(0, i);\n        if (a.includes(rotatedString)){\n            return true;\n        }\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(cycpattern_check(\"abcd\",\"abd\")); // False\nconsole.log(cycpattern_check(\"hello\",\"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\",\"psus\")); // False\nconsole.log(cycpattern_check(\"abab\",\"baa\")); // True\nconsole.log(cycpattern_check(\"efef\",\"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\",\"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const romanNumerals : [number, string][] = [[1000, \"m\"], [900, \"cm\"], [500, \"d\"], [400, \"cd\"], [100, \"c\"], [90, \"xc\"], [50, \"l\"], [40, \"xl\"], [10, \"x\"], [9, \"ix\"], [5, \"v\"], [4, \"iv\"], [1, \"i\"]];\n   let romanNumeral = '';\n   for (let i = 0; i < romanNumerals.length; i++) {\n      while (number0 >= romanNumerals[i][0]) {\n         romanNumeral += romanNumerals[i][1];\n         number0 -= romanNumerals[i][0];\n      }\n   }\n   return romanNumeral;\n}\n\n// Test cases\nconsole.log(int_to_mini_roman(19)); // Output: 'xix'\nconsole.log(int_to_mini_roman(152)); // Output: 'clii'\nconsole.log(int_to_mini_roman(426)); // Output: 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "// Sort the lengths in ascending order\n   const sortedSides = [a, b, c].sort((x, y) => x - y);\n\n   // Check if the triangle follows the Pythagorean theorem for right-angled triangles: a^2 + b^2 = c^2\n   return Math.pow(sortedSides[0], 2) + Math.pow(sortedSides[1], 2) === Math.pow(sortedSides[2], 2);\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const resultArr = [];\n    let hasLetter = false;\n\n    for(let i=0; i<s.length; i++){\n        if((/[a-zA-Z]/).test(s[i])){\n            hasLetter = true;\n            if(s[i] === s[i].toUpperCase()) {\n                resultArr.push(s[i].toLowerCase());\n            } else {\n                resultArr.push(s[i].toUpperCase());\n            }\n        }else{\n            resultArr.push(s[i]);\n        }\n    }\n\n    return hasLetter ? resultArr.join('') : s.split(\"\").reverse().join(\"\");\n}"}
{"task_id": "typescript/78", "language": "typescript", "completion": "if (text === '') {\n        return null;\n    } else {\n        const md5 = require('md5');\n        return md5(text);\n    }\n}"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const start = Math.min(a, b);\n    const end = Math.max(a, b);\n\n    let result = [];\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}"}

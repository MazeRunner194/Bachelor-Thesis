{"task_id": "javascript/0", "language": "javascript", "completion": "let balance = 0;\n\n   for (let i = 0; i < operations.length; i++) {\n     balance += operations[i];\n\n     if (balance < 0) {\n       return true;\n     }\n   }\n\n   return false;\n }"}
{"task_id": "javascript/1", "language": "javascript", "completion": "let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "if (a.length !== b.length) {\n    throw new Error(\"Input strings must have the same length\");\n  }\n\n  let result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    // Perform XOR operation on each pair of bits\n    result += Number(a[i]) ^ Number(b[i]);\n  }\n\n  return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "if (strings.length === 0) return \"none\";\n\n   let maxLength = strings[0].length;\n   let longestString = strings[0];\n\n   for (let i = 1; i < strings.length; i++) {\n       if (strings[i].length >= maxLength) {\n           maxLength = strings[i].length;\n           longestString = strings[i];\n       }\n   }\n\n   return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "if (b === 0) return a;\n\n  return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "let numberArray = numbers.split(\" \");\n\n   // create an object to map words to their numerical values\n   const numsMap = {\n       \"zero\": 0,\n       \"one\": 1,\n       \"two\": 2,\n       \"three\": 3,\n       \"four\": 4,\n       \"five\": 5,\n       \"six\": 6,\n       \"seven\": 7,\n       \"eight\": 8,\n       \"nine\": 9\n   };\n\n   // sort the array using numerical values from the map\n   numberArray.sort((a, b) => numsMap[a] - numsMap[b]);\n\n   return numberArray.join(\" \");\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "// Find the minimum and maximum values in the array\n   const minVal = Math.min(...numbers);\n   const maxVal = Math.max(...numbers);\n\n   // Calculate the range of the values\n   const range = maxVal - minVal;\n\n   // Rescale each number to a value between 0 and 1\n   return numbers.map((number) => (number - minVal) / range);\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n        if (char === char.toLowerCase()) {\n            result += char.toUpperCase();\n        } else {\n            result += char.toLowerCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "let positiveNumbers = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positiveNumbers.push(l[i]);\n        }\n    }\n    return positiveNumbers;\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "if (n <= 1) {\n     return false;\n   }\n\n   for (let i = 2; i * i <= n; i++) {\n     if (n % i === 0) {\n       return false;\n     }\n   }\n\n   return true;\n }"}
{"task_id": "javascript/10", "language": "javascript", "completion": "// Create an empty Set to store the unique elements.\n    const uniqueSet = new Set(l);\n\n    // Convert the Set back to an array and sort it in ascending order.\n    return Array.from(uniqueSet).sort((a, b) => a - b);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "// Function to check if a number is prime\n    function isPrime(num) {\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n            if (num % i === 0) return false;\n        }\n        return num > 1;\n    }\n\n    // Initialize first two Fibonacci numbers and count of prime Fibonacci numbers\n    let a = 0, b = 1, count = 0;\n\n    // Loop until we find the n-th prime Fibonacci number\n    while (count < n) {\n        // Get next Fibonacci number\n        let temp = a + b;\n        a = b;\n        b = temp;\n\n        // Check if it's prime\n        if (isPrime(b)) count++;\n    }\n\n    return b;\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "const n = l.length;\n    for (let i = 0; i < n - 2; i++) {\n      if (i > 0 && l[i] === l[i - 1]) continue;\n        let start = i + 1, end = n - 1;\n        while (start < end) {\n            const sum = l[i] + l[start] + l[end];\n            if (sum == 0) return true;\n            else if (sum > 0) end--;\n            else start++;\n        }\n    }\n    return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "let set = new Set();\n\n   for (let i = 0; i < l.length; i++) {\n     if (set.has(-l[i])) {\n       return true;\n     } else {\n       set.add(l[i]);\n     }\n   }\n\n   return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "// If n is less than or equal to 3, return the base case values\n    if (n <= 3) {\n        if (n === 0 || n === 1) {\n            return 0;\n        } else if (n === 2) {\n            return 2;\n        } else {\n            return 0;\n        }\n    }\n\n    // Initialize the first four values of the sequence\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n\n    // Iterate from 4 to n, computing each value of the sequence using the previous four values\n    for (let i = 4; i <= n; i++) {\n        const temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n\n    // Return the n-th value of the sequence\n    return d;\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "// Sort the list in ascending order\n    l.sort((a, b) => a - b);\n\n    const n = l.length;\n    const middleIndex = Math.floor(n / 2);\n\n    if (n % 2 === 0) {\n        // If the length of the list is even, take the average of the two middle elements\n        return (l[middleIndex - 1] + l[middleIndex]) / 2;\n    } else {\n        // If the length of the list is odd, take the middle element\n        return l[middleIndex];\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "let left = 0;\n   let right = text.length - 1;\n\n   while (left < right) {\n       if (text[left] !== text[right]) {\n           return false;\n       }\n       left++;\n       right--;\n   }\n\n   return true;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "let result = \"\";\n   for (let i = 0; i < text.length; i++) {\n     const char = text[i];\n     if (!\"aeiouAEIOU\".includes(char)) {\n       result += char;\n     }\n   }\n   return result;\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "for (let i = 0; i < l.length; i++) {\n     if (l[i] >= t) {\n       return false;\n     }\n   }\n   return true;\n }"}
{"task_id": "javascript/19", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "const charCount = new Map();\n\n   for (let char of s0) {\n     charCount.set(char, (charCount.get(char) || 0) + 1);\n   }\n\n   for (let char of s1) {\n     if (!charCount.has(char)) return false;\n     const count = charCount.get(char) - 1;\n     if (count === 0) charCount.delete(char);\n     else charCount.set(char, count);\n   }\n\n   return charCount.size === 0;\n }"}
{"task_id": "javascript/21", "language": "javascript", "completion": "if (n <= 0) {\n    return \"Input should be a positive integer.\";\n  } else if (n === 1 || n === 2) {\n    return 1;\n  } else {\n    let prevPrev = 1;\n    let prev = 1;\n    let current = 0;\n\n    for (let i = 3; i <= n; i++) {\n      current = prev + prevPrev;\n      prevPrev = prev;\n      prev = current;\n    }\n\n    return current;\n  }\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "// Sort both arrays\n  const sortedL1 = l1.sort((a, b) => a - b);\n  const sortedL2 = l2.sort((a, b) => a - b);\n\n  let i = 0;\n  let j = 0;\n  const result = [];\n\n  // Compare elements from both arrays\n  while (i < sortedL1.length && j < sortedL2.length) {\n    if (sortedL1[i] === sortedL2[j]) {\n      // If the element is not already in the result array, add it\n      if (!result.includes(sortedL1[i])) {\n        result.push(sortedL1[i]);\n      }\n      i++;\n      j++;\n    } else if (sortedL1[i] < sortedL2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "let maxFactor = -1;\n\n   // Divide n by 2 until n becomes odd\n   while (n % 2 === 0) {\n     maxFactor = 2;\n     n /= 2;\n   }\n\n   // n must be odd at this point, so we can skip one element (Note i = i + 2)\n   for (let i = 3; i <= Math.sqrt(n); i += 2) {\n     while (n % i === 0) {\n       maxFactor = i;\n       n /= i;\n     }\n   }\n\n   // This condition is to handle the case when n is a prime number\n   if (n > 2) {\n     maxFactor = n;\n   }\n\n   return maxFactor;\n }"}
{"task_id": "javascript/24", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "let result = [];\n   for (let i = 1; i < xs.length; i++) {\n       result.push(i*xs[i]);\n   }\n   return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "// Initialize an array to store the FibFib sequence.\n    const fibfibSequence = [0, 0, 1];\n\n    // Compute the remaining elements of the sequence up to n.\n    for (let i = 3; i <= n; i++) {\n        fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n    }\n\n    // Return the n-th element of the FibFib sequence.\n    return fibfibSequence[n];\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n   let count = 0;\n   for (let i = 0; i < s.length; i++) {\n       if (vowels.includes(s[i].toLowerCase())) {\n           count++;\n       } else if (s[i].toLowerCase() === 'y' && i === s.length - 1) {\n           count++;\n       }\n   }\n   return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "// create a frequency counter object to store the count of each integer in the list\n    const freqCounter = {};\n    for (let num of lst) {\n        freqCounter[num] = (freqCounter[num] || 0) + 1;\n    }\n\n    // iterate through the frequency counter object to find the greatest integer that meets the condition\n    let maxFreq = -1;\n    for (let num in freqCounter) {\n        if (freqCounter[num] >= num && freqCounter[num] > maxFreq) {\n            maxFreq = freqCounter[num];\n        }\n    }\n\n    // return the maximum frequency found or -1 if no such integer exists\n    return maxFreq === -1 ? -1 : maxFreq;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "// Your code here\n     if((a+b<=c) || (a+c<=b) || (b+c<=a))\n        return -1;\n    let s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "// Check if the array is balanced (palindromic)\n   const isBalanced = JSON.stringify(q) === JSON.stringify([...q].reverse());\n\n   // Calculate the sum of elements in the array\n   const sum = q.reduce((acc, cur) => acc + cur, 0);\n\n   // Return true if it's balanced and the sum is less than or equal to the weight\n   return isBalanced && sum <= w;\n }"}
{"task_id": "javascript/31", "language": "javascript", "completion": "let count = 0;\n   for (let i = 2; i <= a && count < 3; i++) {\n       while (a % i === 0) {\n           count++;\n           a /= i;\n       }\n   }\n   return count === 3 && a === 1;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "// Convert the decimal number to binary using toString method with base 2\n    let binary = decimal.toString(2);\n\n    // Add 'db' at the beginning and end of the string\n    let result = \"db\" + binary + \"db\";\n\n    return result;\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "// If the string's length is less than 3, it cannot be happy.\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Check each group of three consecutive letters.\n    for (let i = 0; i <= s.length - 3; i++) {\n        const a = s[i];\n        const b = s[i + 1];\n        const c = s[i + 2];\n\n        // If any two of the three letters are the same, the string is not happy.\n        if (a === b || a === c || b === c) {\n            return false;\n        }\n    }\n\n    // All groups of three consecutive letters are distinct. The string is happy.\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "// Define the grade boundaries and their corresponding letters\n  const gradeRanges = [\n    { min: 4.0, letter: \"A+\" },\n    { min: 3.7, letter: \"A\" },\n    { min: 3.3, letter: \"A-\" },\n    { min: 3.0, letter: \"B+\" },\n    { min: 2.7, letter: \"B\" },\n    { min: 2.3, letter: \"B-\" },\n    { min: 2.0, letter: \"C+\" },\n    { min: 1.7, letter: \"C\" },\n    { min: 1.3, letter: \"C-\" },\n    { min: 1.0, letter: \"D+\" },\n    { min: 0.7, letter: \"D\" },\n    { min: 0.0, letter: \"D-\" }\n  ];\n\n  // Map each grade to its corresponding letter grade using the defined ranges\n  const letterGrades = grades.map(grade => {\n    for (const range of gradeRanges) {\n      if (grade >= range.min) {\n        return range.letter;\n      }\n    }\n    // If none of the conditions match, it means the grade is less than 0.0 and should be an 'E'\n    return \"E\";\n  });\n\n  return letterGrades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "// Helper function to check if a number is prime\n    const isPrime = (num) => {\n      for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n      return num > 1;\n    }\n\n    // Check the length of the string and return true if it's prime, otherwise false\n    return isPrime(string.length);\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "if (n === 0) return '0';\n\n    let sum = 0;\n\n    while (n > 0) {\n        sum += n % 2;\n        n = Math.floor(n / 2);\n    }\n\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "let result = [];\n   for (let i = 0; i < lst.length; i++) {\n       for (let j = 0; j < lst[i].length; j++) {\n           if (lst[i][j] === x) {\n               result.push([i, j]);\n           }\n       }\n   }\n   result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n   return result.map(e => [e[0], e[1]]);\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "// Remove duplicates from the list\n    let uniqueLst = [...new Set(lst)];\n\n    // Check if there are at least two distinct elements in the list\n    if (uniqueLst.length < 2) {\n        return null;\n    }\n\n    // Sort the unique list in ascending order\n    uniqueLst.sort((a, b) => a - b);\n\n    // Return the second element from the sorted unique list\n    return uniqueLst[1];\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "// Split the string into sentences using regular expressions to match '. ', '? ', or '! ' as delimiters\n    let sentences = s.split(/(\\.\\s|\\?\\s|\\!\\s)/);\n\n    // Initialize a counter for boredoms (sentences starting with \"I\")\n    let count = 0;\n\n    // Iterate through each sentence\n    for (let i = 0; i < sentences.length; i++) {\n      // Check if the sentence starts with \"I\" (ignoring case) and increment the counter if it does\n      if (sentences[i].trim().toLowerCase().startsWith(\"i\")) {\n        count++;\n      }\n    }\n\n    // Return the final count of boredoms\n    return count;\n  }"}
{"task_id": "javascript/40", "language": "javascript", "completion": "let largestPrime = -Infinity;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n    }\n\n    return sumOfDigits(largestPrime);\n}\n\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n\n    return true;\n}\n\nfunction sumOfDigits(num) {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "if (Object.keys(dict).length === 0) { // Checking if the dictionary is empty\n        return false;\n    }\n\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false; // If any key is not a string, then return False\n        }\n\n        if (!key.toLowerCase() === key) {\n            allLowerCase = false;\n        }\n\n        if (!key.toUpperCase() === key) {\n            allUpperCase = false;\n        }\n    }\n\n    // If neither condition fails, then all keys are either in lower or upper case\n    return allLowerCase || allUpperCase;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "// Parse the input string to a floating-point number\n  const num = parseFloat(value);\n\n  // Check if the number is positive or negative\n  if (num > 0) {\n    // For positive numbers, round away from zero by adding 0.5 before flooring\n    return Math.floor(num + 0.5);\n  } else if (num < 0) {\n    // For negative numbers, round away from zero by subtracting 0.5 before ceiling\n    return Math.ceil(num - 0.5);\n  } else {\n    // If the number is zero or NaN, return it as is\n    return num;\n  }\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "let pile = [];\n    for (let i = n; i > 0; i--) {\n        pile.unshift(i);\n        if (i % 2 === 0) {\n            i -= 1;\n        } else {\n            i -= 2;\n        }\n    }\n    return pile;\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "return s.split(/[ ,]+/); // Split the string using a regular expression to match spaces and commas\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "// If x is greater than y or both are odd, return -1 as there's no even number in the range.\n    if (x > y || (x % 2 !== 0 && y % 2 !== 0)) {\n        return -1;\n    }\n\n    // If y is even, return it as the biggest even number in the range.\n    else if (y % 2 === 0) {\n        return y;\n    }\n\n    // If x is even, return x as the only even number in the range.\n    else if (x % 2 === 0) {\n        return x;\n    }\n\n    // If none of the above conditions are met, return the second biggest even number in the range.\n    else {\n        return y - 1;\n    }\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "// if n is greater than m return -1\n  if (n > m) {\n    return -1;\n  }\n\n  // calculate sum of integers from n to m\n  let sum = 0;\n  for (let i=n; i<=m; i++) {\n    sum += i;\n  }\n\n  // calculate average and round it to the nearest integer\n  let avg = Math.round(sum / (m - n + 1));\n\n  // convert rounded average to binary\n  return \"0b\" + avg.toString(2);\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "let result = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        let factorial = 1;\n        for (let j = 2; j <= i; j++) {\n          factorial *= j;\n        }\n        result.push(factorial);\n      } else {\n        let sum = 0;\n        for (let k = 1; k <= i; k++) {\n          sum += k;\n        }\n        result.push(sum);\n      }\n    }\n    return result;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "let countEven = 0;\n    let countOdd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n\n    return [countEven, countOdd];\n}\n\nfunction isPalindrome(num) {\n    let str = num.toString();\n    let left = 0;\n    let right = str.length - 1;\n\n    while (left < right) {\n        if (str[left] !== str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n\n    return true;\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "if (arr.length === 0) return true; // If the array is empty, it's already sorted\n\n  let sortedArr = [...arr].sort((a, b) => a - b); // Create a sorted copy of the array\n  let rotationsNeeded = 0;\n\n  // Iterate through each element in the original array\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== sortedArr[i]) {\n      rotationsNeeded++; // If an element is not in its correct position, increment rotations needed\n    } else if (rotationsNeeded > 0) {\n      break; // If we've found a correctly placed element after a misplaced one, it's impossible to sort the array with right shifts\n    }\n  }\n\n  return rotationsNeeded <= 1; // If we need one or no rotations, it's possible to sort the array\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "// Filter out even numbers from lst1 and odd numbers from lst2\n    const evensInLst1 = lst1.filter((num) => num % 2 === 0);\n    const oddsInLst2 = lst2.filter((num) => num % 2 !== 0);\n\n    // Check if the number of odd numbers in lst2 is greater than or equal to the number of even numbers in lst1\n    return evensInLst1.length + oddsInLst2.length >= lst1.length ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "// Step 1: Delete all characters in s that are equal to any character in c\n  let resultString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      resultString += s[i];\n    }\n  }\n\n  // Step 2: Check if the result string is a palindrome\n  let reversedString = resultString.split('').reverse().join('');\n  let isPalindrome = resultString === reversedString;\n\n  return [resultString, isPalindrome];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "// initialize an array to store the last non-zero index in each row\n    let lastNonZero = Array(grid.length).fill(-1);\n\n    // iterate through each row of the grid\n    for (let i = 0; i < grid.length; i++) {\n        // iterate through each column of the current row, starting from the end\n        for (let j = grid[i].length - 1; j >= 0; j--) {\n            // if the current cell contains water, update the lastNonZero index for this row\n            if (grid[i][j] === 1) {\n                lastNonZero[i] = j;\n                break;\n            }\n        }\n    }\n\n    // initialize a variable to store the total number of times the bucket needs to be lowered\n    let count = 0;\n\n    // iterate through each row of the grid\n    for (let i = 0; i < grid.length; i++) {\n        // if there is water in the current well, continue processing it\n        if (lastNonZero[i] !== -1) {\n            // calculate the number of times the bucket needs to be lowered for the current well\n            count += Math.ceil((lastNonZero[i] + 1) / capacity);\n        }\n    }\n\n    // return the total number of times the bucket needs to be lowered\n    return count;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "const words = s.split(' ');\n  const selectedWords = [];\n\n  for (let i = 0; i < words.length; i++) {\n    let consonantCount = 0;\n    const word = words[i].toLowerCase();\n\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      if ('bcdfghjklmnpqrstvwxyz'.includes(char)) {\n        consonantCount++;\n      }\n    }\n\n    if (consonantCount === n) {\n      selectedWords.push(words[i]);\n    }\n  }\n\n  return selectedWords;\n}\n\n// Test cases\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // ==> [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // ==> [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // ==> []\nconsole.log(selectWords(\"Hello world\", 4)); // ==> [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // ==> [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "// Sort the input array in ascending order\n    arr.sort((a, b) => a - b);\n\n    // Slice the last 'k' elements from the sorted array\n    const maxKNumbers = arr.slice(-k);\n\n    return maxKNumbers;\n}\n\n// Test cases\nconsole.log(maximum([-3, -4, 5], 3));     // Output: [-3, -4, 5]\nconsole.log(maximum([4, -4, 4], 2));     // Output: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "let sum = 0;\n   for (let i = 0; i < k; i++) {\n       if (arr[i] >= 0 && arr[i] <= 99) {\n           sum += arr[i];\n       }\n   }\n   return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "// Find the start and end of the intersection\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    // If there is no intersection, return \"NO\"\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    let length = end - start;\n\n    // Check if the length is a prime number\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\n    // If the length is greater than 1, it is a prime number\n    return length > 1 ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "let arr = [0]; // Initialize array with first element as 0 for indexing convenience\n   if (n >= 1) arr[1] = 1; // If n is at least 1, set the second element to 1\n   if (n >= 2) arr[2] = 1; // If n is at least 2, set the third element to 1\n   if (n >= 3) arr[3] = 3; // If n is at least 3, set the fourth element to 3\n\n   for (let i = 4; i <= n + 1; i++) {\n       if (i % 2 === 0) {\n           arr[i] = 1 + i / 2; // If i is even, use the given formula\n       } else {\n           arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3]; // If i is odd, use the recurrence formula\n       }\n   }\n\n   return arr.slice(1); // Return the array excluding the first element (which was added for indexing convenience)\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "let product = 1;\n   let allEven = true;\n\n   while (n > 0) {\n     const digit = n % 10;\n\n     if (digit % 2 !== 0) {\n       product *= digit;\n       allEven = false;\n     }\n\n     n = Math.floor(n / 10);\n   }\n\n   return allEven ? 0 : product;\n }"}
{"task_id": "javascript/59", "language": "javascript", "completion": "let openBrackets = 0;\n    let closedBrackets = 0;\n\n    for (let i = 0; i < string.length; i++) {\n      if (string[i] === '[') {\n        openBrackets++;\n      } else if (string[i] === ']') {\n        closedBrackets++;\n        if (openBrackets > 0 && closedBrackets <= openBrackets) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "let sum = 0;\n\n   for (let i = 0; i < lst.length; i++) {\n     // Round each element to the upper int(Ceiling) and square it, then add to sum\n     sum += Math.ceil(lst[i]) ** 2;\n   }\n\n   return sum;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "// Check if the string is empty or if the last character is a space\n   if (txt === \"\" || txt.charAt(txt.length - 1) === \" \") {\n     return false;\n   }\n\n   // Get the index of the last word in the string\n   const lastWordIndex = txt.lastIndexOf(\" \");\n\n   // Check if the last character is an alphabetical letter and not part of a word\n   const lastCharCode = txt.charAt(txt.length - 1).toLowerCase().charCodeAt(0);\n   return (\n     lastCharCode >= \"a\".charCodeAt(0) &&\n     lastCharCode <= \"z\".charCodeAt(0) &&\n     (lastWordIndex === -1 || txt.length - 1 > lastWordIndex + 1)\n   );\n }"}
{"task_id": "javascript/62", "language": "javascript", "completion": "let largestIndex = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            largestIndex = i - 1;\n        }\n    }\n    return largestIndex;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "let largestNegative = null;\n   let smallestPositive = null;\n\n   for (let num of lst) {\n     if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n       smallestPositive = num;\n     } else if (num < 0 && (largestNegative === null || num > largestNegative)) {\n       largestNegative = num;\n     }\n   }\n\n   return [largestNegative, smallestPositive];\n }"}
{"task_id": "javascript/64", "language": "javascript", "completion": "let result = 1;\n   for (let i = n; i > 0; i--) {\n       let factorial = 1;\n       for (let j = i; j > 0; j--) {\n           factorial *= j;\n       }\n       result *= factorial;\n   }\n   return result;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "const isPrime = (num) => {\n        if (num < 2) return false;\n        for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    const words = sentence.split(' ');\n    const primeWords = [];\n\n    for (const word of words) {\n        if (isPrime(word.length)) {\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "// Split the fractions into numerators and denominators\n    const [numX, denX] = x.split('/').map(Number);\n    const [numN, denN] = n.split('/').map(Number);\n\n    // Multiply the fractions\n    const resultNum = numX * numN;\n    const resultDen = denX * denN;\n\n    // Check if the result is a whole number\n    return resultNum % resultDen === 0;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "const sumDigits = num => {\n     return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n   }\n\n   return nums.sort((a, b) => {\n     const sumA = sumDigits(Math.abs(a));\n     const sumB = sumDigits(Math.abs(b));\n\n     if (sumA === sumB) {\n       return nums.indexOf(a) - nums.indexOf(b);\n     }\n\n     return sumA - sumB;\n   });\n }"}
{"task_id": "javascript/68", "language": "javascript", "completion": "// Initialize a counter variable to keep track of the number of elements that meet the criteria\n  let count = 0;\n\n  // Iterate through each element in the array\n  for (let i = 0; i < nums.length; i++) {\n    const num = Math.abs(nums[i]); // Take the absolute value to handle negative numbers\n\n    // Check if the number is greater than 10 and both first and last digits are odd\n    if (\n      num > 10 &&\n      (num % 10) % 2 !== 0 &&\n      Math.floor(num / 10 ** (Math.log10(num) | 0)) % 2 !== 0\n    ) {\n      count++; // Increment the counter if the number meets the criteria\n    }\n  }\n\n  // Return the final count of elements that meet the criteria\n  return count;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "let count = 0;\n  const arr = Array.from({ length: n }, (_, i) => i * i - i + 1);\n\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}\n\n// Test the function\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n   if (!planets.includes(planet1) || !planets.includes(planet2)) {\n       return ();\n   }\n   const index1 = planets.indexOf(planet1);\n   const index2 = planets.indexOf(planet2);\n   const startIndex = Math.min(index1, index2);\n   const endIndex = Math.max(index1, index2);\n   return planets.slice(startIndex + 1, endIndex).reverse();\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "if (isPrimeNumber(n)) {\n     return x;\n   } else {\n     return y;\n   }\n }\n\n function isPrimeNumber(num) {\n   for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n     if (num % i === 0) {\n       return false;\n     }\n   }\n   return num > 1;\n }"}
{"task_id": "javascript/72", "language": "javascript", "completion": "let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n       if (Number.isInteger(lst[i]) && lst[i] > 0 && lst[i] % 2 !== 0) {\n           sum += Math.pow(lst[i], 2);\n       }\n   }\n   return sum;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "let maxStrength = -Infinity;\n    let strongestExt = '';\n\n    for (let ext of extensions) {\n        let upperCaseCount = (ext.match(/[A-Z]/g) || []).length;\n        let lowerCaseCount = (ext.match(/[a-z]/g) || []).length;\n        let strength = upperCaseCount - lowerCaseCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n\n    return `${classname}.${strongestExt}`;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "if (a.length !== b.length) return false;\n\n   const doubledA = a + a;\n   return doubledA.includes(b);\n }"}
{"task_id": "javascript/75", "language": "javascript", "completion": "const romanValues = [\n      { value: 1000, symbol: \"m\" },\n      { value: 900, symbol: \"cm\" },\n      { value: 500, symbol: \"d\" },\n      { value: 400, symbol: \"cd\" },\n      { value: 100, symbol: \"c\" },\n      { value: 90, symbol: \"xc\" },\n      { value: 50, symbol: \"l\" },\n      { value: 40, symbol: \"xl\" },\n      { value: 10, symbol: \"x\" },\n      { value: 9, symbol: \"ix\" },\n      { value: 5, symbol: \"v\" },\n      { value: 4, symbol: \"iv\" },\n      { value: 1, symbol: \"i\" }\n    ];\n\n    let result = \"\";\n\n    for (const { value, symbol } of romanValues) {\n      while (number >= value) {\n        result += symbol;\n        number -= value;\n      }\n    }\n\n    return result;\n  }"}
{"task_id": "javascript/76", "language": "javascript", "completion": "// Sort the sides in ascending order\n    const sortedSides = [a, b, c].sort((x, y) => x - y);\n\n    // Check if it forms a right-angled triangle using Pythagorean theorem\n    return Math.pow(sortedSides[0], 2) + Math.pow(sortedSides[1], 2) === Math.pow(sortedSides[2], 2);\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "let hasLetters = false;\n    const reversedArray = s.split('').reverse();\n\n    for (let i = 0; i < reversedArray.length; i++) {\n      if (/[a-zA-Z]/.test(reversedArray[i])) {\n        hasLetters = true;\n        if (reversedArray[i] === reversedArray[i].toLowerCase()) {\n          reversedArray[i] = reversedArray[i].toUpperCase();\n        } else {\n          reversedArray[i] = reversedArray[i].toLowerCase();\n        }\n      }\n    }\n\n    return hasLetters ? reversedArray.join('') : s;\n  }"}
{"task_id": "javascript/78", "language": "javascript", "completion": "if (text === '') {\n       return \"none\";\n    } else {\n      var md5 = require('md5');\n      var hash = md5(text);\n      return hash;\n    }\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "// Ensure a is less than or equal to b\n    if (a > b) {\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n\n    var result = [];\n\n    // Iterate from a to b\n    for (var i = a; i <= b; i++) {\n        // Check if the number is even and add it to the array\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}"}

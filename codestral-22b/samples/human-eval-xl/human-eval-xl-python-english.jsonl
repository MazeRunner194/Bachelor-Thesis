{"task_id": "python/0", "language": "python", "completion": "balance = 0\n   for op in operations:\n       balance += op\n       if balance < 0:\n           return True\n   return False"}
{"task_id": "python/1", "language": "python", "completion": "if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        total_prod = 1\n        for number in numbers:\n            total_prod *= number\n        return (total_sum, total_prod)"}
{"task_id": "python/2", "language": "python", "completion": "if len(a) != len(b):\n        raise ValueError(\"Both strings must have the same length.\")\n    return \"\".join([str(int(ai) ^ int(bi)) for ai, bi in zip(a, b)])"}
{"task_id": "python/3", "language": "python", "completion": "if not strings:\n        return None\n    else:\n        max_len = len(strings[0])\n        max_str = strings[0]\n        for string in strings:\n            if len(string) > max_len:\n                max_len = len(string)\n                max_str = string\n        return max_str"}
{"task_id": "python/4", "language": "python", "completion": "# Implement the function here\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/5", "language": "python", "completion": "# Define a dictionary for mapping words to numbers\n    word_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                      'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its corresponding number\n    numbers = [word_to_number[word] for word in words]\n\n    # Sort the numbers\n    sorted_numbers = sorted(numbers)\n\n    # Convert each number back to its corresponding word\n    sorted_words = [number_to_word[number] for number in sorted_numbers]\n\n    # Join the sorted words into a string and return it\n    return ' '.join(sorted_words)"}
{"task_id": "python/6", "language": "python", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])"}
{"task_id": "python/8", "language": "python", "completion": "return [i for i in l if i > 0]"}
{"task_id": "python/9", "language": "python", "completion": "if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))  # False\nprint(is_prime(101))  # True\nprint(is_prime(11))  # True\nprint(is_prime(13441))  # False (13441 is not a prime number)\nprint(is_prime(61))  # True\nprint(is_prime(4))  # False\nprint(is_prime(1))  # False"}
{"task_id": "python/10", "language": "python", "completion": "return sorted(set(l))\n\nThis function works by first converting the list to a set. A set is an unordered collection of unique elements, so this automatically removes any duplicates from the list. Then it returns a new list containing all the unique elements, but in sorted order."}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n: int):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci(n: int):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 1\n    while count < n:\n        fib_number = fibonacci(i)\n        if is_prime(fib_number):\n            count += 1\n        i += 1\n    return fib_number"}
{"task_id": "python/12", "language": "python", "completion": "l.sort() # sort the list in ascending order\n    for i in range(len(l)-2): # iterate through the list till third last element\n        if i > 0 and l[i] == l[i-1]: # to avoid duplicate triplets\n            continue\n        left = i+1 # start of the subarray\n        right = len(l)-1 # end of the subarray\n        while left < right: # two pointer approach\n            if l[i]+l[left]+l[right] == 0:\n                return True\n            elif l[i]+l[left]+l[right] > 0:\n                right -= 1\n            else:\n                left += 1\n    return False # no triplet sum to zero found\n\n# test cases\nprint(triples_sum_to_zero([1, 3, 5, 0])) # False\nprint(triples_sum_to_zero([1, 3, -2, 1])) # True\nprint(triples_sum_to_zero([1, 2, 3, 7])) # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # True\nprint(triples_sum_to_zero([1])) # False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n# test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0])) # should print False\nprint(pairs_sum_to_zero([1, 3, -2, 1])) # should print False\nprint(pairs_sum_to_zero([1, 2, 3, 7])) # should print False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) # should print True\nprint(pairs_sum_to_zero([1])) # should print False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n):\n    # Initialize base values for the sequence\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four numbers in the sequence\n    a, b, c, d = 0, 0, 2, 0\n\n    # Calculate the Fib4 number iteratively\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d"}
{"task_id": "python/15", "language": "python", "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "python/16", "language": "python", "completion": "return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n   result = ''\n   for letter in text:\n       if letter not in vowels:\n           result += letter\n   return result"}
{"task_id": "python/18", "language": "python", "completion": "for i in l:\n        if i >= t:\n            return False\n    return True\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))"}
{"task_id": "python/19", "language": "python", "completion": "return x + y"}
{"task_id": "python/20", "language": "python", "completion": "from collections import Counter\n\n    return Counter(s0) == Counter(s1)"}
{"task_id": "python/21", "language": "python", "completion": "if n <= 0:\n        raise ValueError(\"n should be positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b"}
{"task_id": "python/22", "language": "python", "completion": "return sorted(list(set(l1) & set(l2)))"}
{"task_id": "python/23", "language": "python", "completion": "i = 2\n   while i * i <= n:\n       if n % i:\n           i += 1\n       else:\n           n //= i\n   return n\n\nif __name__ == \"__main__\":\n   import doctest\n   print(doctest.testmod())"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int):\n        total = 0\n        for i in range(1, n + 1):\n            total += i\n        return total"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n       return [i * x for i, x in enumerate(xs)][1:]"}
{"task_id": "python/26", "language": "python", "completion": "# Define the base cases for FibFib numbers\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize the first three FibFib numbers\n    fibfib_nums = [0, 0, 1]\n\n    # Calculate the n-th FibFib number by summing the previous three numbers in the sequence\n    for i in range(3, n+1):\n        fibfib_nums.append(sum(fibfib_nums[-3:]))\n\n    return fibfib_nums[n]"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n        s = s.lower()\n        count = 0\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        for char in s:\n            if char in vowels:\n                count += 1\n            elif char == 'y' and s.index(char) == len(s) - 1:\n                count += 1\n        return count\n\n    # Test cases\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"xyz\") == 0\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"AEIOUY\") == 6\n    assert vowels_count(\"bcdfghjklmnpqrstvwx\") == 0\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"y\") == 1\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"yy\") == 0\n    assert vowels_count(\"yyy\") == 1"}
{"task_id": "python/28", "language": "python", "completion": "# create a dictionary to store frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    # loop over numbers from max to 1 and return the first number that meets the condition\n    for i in range(max(lst), 0, -1):\n        if i <= freq.get(i, 0):\n            return i\n\n    # return -1 if no such a value exists\n    return -1"}
{"task_id": "python/29", "language": "python", "completion": "# check if the three sides form a valid triangle\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        # calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2.0\n        # calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # return -1 if the three sides do not form a valid triangle\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def is_balanced(lst):\n        return lst == lst[::-1]\n\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a // 2 + 1):\n        while a % i== 0 and is_prime(i):\n            factors.append(i)\n            a = a / i\n    if len(factors) == 3:\n        return True\n    else:\n        return False"}
{"task_id": "python/32", "language": "python", "completion": "return 'db' + format(decimal, 'b') + 'db'"}
{"task_id": "python/33", "language": "python", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 < grade <= 4.0:\n            letter_grades.append('A')\n        elif 3.3 < grade <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 < grade <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 < grade <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 < grade <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 < grade <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 < grade <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 < grade <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 < grade <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 < grade <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 < grade <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "# Convert the input to binary and remove the '0b' prefix\n    binary_rep = bin(N)[2:]\n\n    # Calculate the sum of digits in binary representation\n    sum_of_digits = sum(int(digit) for digit in binary_rep)\n\n    # Convert the sum to binary and return as a string\n    return bin(sum_of_digits)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            indices = sorted((j for j, val in enumerate(lst[i]) if val == x), reverse=True)\n            result.extend([(i, index) for index in indices])\n    return result"}
{"task_id": "python/38", "language": "python", "completion": "# Remove duplicates from the list and sort it\n    sorted_list = sorted(set(lst))\n\n    # Check if there is a second smallest element\n    if len(sorted_list) < 2:\n        return None\n    else:\n        return sorted_list[1]"}
{"task_id": "python/39", "language": "python", "completion": "# Split the string into sentences based on delimiters\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n\n    # Count the number of sentences that start with \"I\"\n    bored_count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n\n    return bored_count"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "python/41", "language": "python", "completion": "if not dict:\n        return False\n\n    lower_case = all(key.islower() for key in dict.keys())\n    upper_case = all(key.isupper() for key in dict.keys())\n\n    if lower_case or upper_case:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # Should print: True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # Should print: False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # Should print: False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # Should print: False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # Should print: True"}
{"task_id": "python/42", "language": "python", "completion": "if '.' in value:\n        whole, decimal = map(float, value.split('.'))\n        if decimal >= 0.5:\n            return int(whole) + 1 if whole > 0 else int(whole) - 1\n        else:\n            return int(whole)\n    else:\n        return int(value)"}
{"task_id": "python/43", "language": "python", "completion": "if n <= 0:\n        return []\n    elif n % 2 == 0:\n        return list(range(n, 0, -2))\n    else:\n        return list(range(n, 0, -2))[::-1]\n\nprint(make_a_pile(3)) # [3, 5, 7]\nprint(make_a_pile(6)) # [6, 4, 2]"}
{"task_id": "python/44", "language": "python", "completion": "# Using the split() function to split the string into an array of words\n    return s.split(', ' if ', ' in s else ' ')"}
{"task_id": "python/45", "language": "python", "completion": "if x > y or (x % 2 != 0 and x + 1 > y): # no even number in range\n        return -1\n    else:\n        for num in range(y, x - 1, -1):\n            if num % 2 == 0:\n                return num"}
{"task_id": "python/46", "language": "python", "completion": "# If n is greater than m, return -1.\n    if n > m:\n        return -1\n\n    # Compute the average of the integers from n through m (including n and m).\n    avg = round((n + m) / 2)\n\n    # Convert that to binary.\n    binary_avg = bin(avg)\n\n    return binary_avg"}
{"task_id": "python/47", "language": "python", "completion": "def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n+1):\n                fact *= i\n            return fact\n\n    def sum_numbers(n):\n        return (n * (n + 1)) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n        sorted_arr = sorted(arr)\n        n = len(arr)\n        if not arr:\n            return True\n        else:\n            for i in range(n):\n                new_arr = arr[i:] + arr[:i]\n                if new_arr == sorted_arr:\n                    return True\n            return False\n\n    print(move_one_ball([3, 4, 5, 1, 2])) #True\n    print(move_one_ball([3, 5, 4, 1, 2])) #False"}
{"task_id": "python/50", "language": "python", "completion": "def is_all_even(lst):\n        for num in lst:\n            if num % 2 != 0:\n                return False\n        return True\n\n    i = j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] % 2 == 0 or lst2[j] % 2 == 0:\n            # Swap the elements to make lst1 all even numbers\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n        if lst1[i] % 2 != 0:\n            i += 1\n        if lst2[j] % 2 == 0:\n            j += 1\n\n    return \"YES\" if is_all_even(lst1) else \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "result_str = ''.join([char for char in s if char not in c])\n   return (result_str, result_str == result_str[::-1])"}
{"task_id": "python/52", "language": "python", "completion": "import math\ndef max_fill(grid, capacity):\n    grid = list(map(list, zip(*grid)))  # transpose the grid\n    operations = 0\n    for col in grid:\n        wells = sum(col)\n        if wells > 0:\n            operations += wells + math.ceil((operations % capacity) / capacity * wells)\n    return operations"}
{"task_id": "python/53", "language": "python", "completion": "def count_consonants(word):\n       consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n       return sum([1 for char in word if char in consonants])\n   def select_words(s, n):\n       words = s.split()\n       result = []\n       for word in words:\n           if count_consonants(word) == n:\n               result.append(word)\n       return result"}
{"task_id": "python/54", "language": "python", "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements\n    return arr[:k]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n        total = 0\n        for i in range(k):\n            if arr[i] >= 0 and arr[i] <= 99:\n                total += arr[i]\n        return total\n\n    print(add_elements([111,21,3,4000,5,6,7,8,9], 4)) # Outputs: 24"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n   def intersection(interval1, interval2):\n       start = max(interval1[0], interval2[0])\n       end = min(interval1[1], interval2[1])\n\n       if start > end:\n           return \"NO\"\n\n       length = end - start + 1\n       if is_prime(length):\n           return \"YES\"\n       else:\n           return \"NO\"\n\n   print(intersection((1, 2), (2, 3))) # ==> \"NO\"\n   print(intersection((-1, 1), (0, 4))) # ==> \"NO\"\n   print(intersection((-3, -1), (-5, 5))) # ==> \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tribonacci_sequence(n):\n        # Initialize the sequence with the first two elements as given in problem\n        seq = [0, 1, 1]\n\n        if n < 2:\n            return seq[:n+1]\n\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(i // 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n        return seq"}
{"task_id": "python/58", "language": "python", "completion": "product = 1\n   while n > 0:\n       digit = n % 10\n       if digit % 2 != 0:\n           product *= digit\n       n //= 10\n   return product if product != 1 else 0\n\nprint(digits(1))     # Output: 1\nprint(digits(4))     # Output: 0\nprint(digits(235))   # Output: 15"}
{"task_id": "python/59", "language": "python", "completion": "count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        elif string[i] == ']':\n            count -= 1\n            if i > 0 and string[i-1] == '[':\n                return True\n    return False"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n        return sum([i**2 for i in map(lambda x: int(x) if x == int(x) else int(x)+1, lst)])\n\n# Test cases\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9])) # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) # 29\nprint(sum_squares([-2.4,1,1])) # 6"}
{"task_id": "python/61", "language": "python", "completion": "return txt.strip() and txt[-1].isalpha() and (len(txt) < 2 or not txt[-2].isalpha())"}
{"task_id": "python/62", "language": "python", "completion": "# Iterate over the list from end to start\n    for i in range(len(arr)-1, 0, -1):\n        # If we find an element that is less than its preceding element, return its index\n        if arr[i] < arr[i-1]:\n            return i\n    # If no such element is found, return -1\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "positive = []\n    negative = []\n    for num in lst:\n        if num > 0:\n            positive.append(num)\n        elif num < 0:\n            negative.append(num)\n    a = max(negative) if negative else None\n    b = min(positive) if positive else None\n    return (a, b)"}
{"task_id": "python/64", "language": "python", "completion": "def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n       if n < 2:\n           return False\n       for i in range(2, int(n**0.5) + 1):\n           if n % i == 0:\n               return False\n       return True\n\n   words = sentence.split()\n   prime_words = [word for word in words if is_prime(len(word))]\n   return ' '.join(prime_words)"}
{"task_id": "python/66", "language": "python", "completion": "from fractions import Fraction\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    result = Fraction(x_num * n_num, x_denom * n_denom)\n\n    return result.denominator == 1\n\nprint(simplify(\"1/5\", \"5/1\")) # True\nprint(simplify(\"1/6\", \"2/1\")) # False\nprint(simplify(\"7/10\", \"10/2\")) # False"}
{"task_id": "python/67", "language": "python", "completion": "def sum_of_digits(n):\n       return sum([int(d) for d in str(abs(n))])\n\n   return sorted(nums, key=lambda n: (sum_of_digits(n), nums.index(n)))"}
{"task_id": "python/68", "language": "python", "completion": "def is_odd(n):\n       return n % 2 != 0\n\n   count = 0\n   for num in nums:\n       if num > 10 and is_odd(int(str(num)[0])) and is_odd(int(str(num)[-1])):\n           count += 1\n   return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15])) # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Output: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # count the number of elements with remainder 0, 1 and 2 when divided by 3\n    c0 = n // 3\n    c1 = (n - c0) // 2\n    c2 = n - c0 - c1\n\n    def C(n, r):\n        if r > n or r < 0:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        p = 1\n        for i in range(1, r + 1):\n            p *= (n - i + 1) / i\n        return int(p)\n\n    # count the number of valid triples\n    num_triples = C(c0, 3) + C(c1, 2) * c2 + C(c2, 2) * c1\n\n    return num_triples"}
{"task_id": "python/70", "language": "python", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturm\", \"Uranus\", \"Neptune\"]\n\n   if planet1 not in planets or planet2 not in planets:\n      return ()\n\n   index_planet1 = planets.index(planet1)\n   index_planet2 = planets.index(planet2)\n\n   if index_planet1 < index_planet2:\n       return tuple(planets[index_planet1+1 : index_planet2])\n   else:\n      return tuple(planets[index_planet2 + 1: index_planet1])\n\n# Test the function\nprint(bf(\"Jupiter\", \"Neptune\")) # should print (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\")) # should print (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\")) # should print (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while (i * i <= n):\n            if (n % i == 0 or n % (i + 2) == 0):\n                return False\n            i += 6\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "# Initialize sum to 0\n    total = 0\n\n    # Iterate over each number in the list\n    for num in lst:\n        # Check if the number is an integer, positive and odd\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            # Add square of the number to total sum\n            total += num ** 2\n\n    return total\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Expected output: 10\nprint(double_the_difference([-1, -2, 0]))   # Expected output: 0\nprint(double_the_difference([9, -2]))       # Expected output: 81\nprint(double_the_difference([0]))           # Expected output: 0\nprint(double_the_difference([]))            # Expected output: 0"}
{"task_id": "python/73", "language": "python", "completion": "def calc_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strengths = [calc_strength(ext) for ext in extensions]\n    strongest_extension = extensions[strengths.index(max(strengths))]\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # 'my_class.AA'\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # 'Slices.SErviNGSliCes'"}
{"task_id": "python/74", "language": "python", "completion": "def rotate(s):\n        return s[1:] + s[:1]\n\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = rotate(b)\n\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n                       90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',\n                       5: 'v', 4: 'iv', 1: 'i'}\n   result = ''\n   for value, symbol in roman_numerals.items():\n       while number >= value:\n           result += symbol\n           number -= value\n   return result"}
{"task_id": "python/76", "language": "python", "completion": "# Using Pythagorean theorem to check if the triangle is a right-angled triangle\n    sides = [a, b, c]\n    # Sorting the list of sides\n    sides.sort()\n    # Checking the condition for a right-angled triangle (Pythagorean theorem)\n    return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]"}
{"task_id": "python/77", "language": "python", "completion": "letters_exist = False\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            letters_exist = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not letters_exist:\n        return s[::-1]\n    else:\n        return result"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\n   if text:\n       return hashlib.md5(text.encode()).hexdigest()\n   else:\n       return None"}
{"task_id": "python/79", "language": "python", "completion": "# if a is greater than b, swap them\n    if a > b:\n        a, b = b, a\n\n    # initialize an empty list to store the even digits\n    evens = []\n\n    # loop through each number from a to b (inclusive)\n    for i in range(a, b + 1):\n      # check if the last digit of the current number is even\n        if i % 2 == 0:\n            # add the even number to the list\n            evens.append(i)\n\n    # return the list of even numbers\n    return evens"}

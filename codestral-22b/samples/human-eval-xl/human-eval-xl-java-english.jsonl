{"task_id": "java/0", "language": "java", "completion": "// your code goes here\n       int balance = 0;\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (Integer) operation;\n                if (balance < 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "int sum = 0;\n   long product = 1;\n   for (int i=0;i<numbers.size();i++){\n       if(numbers.get(i) instanceof Integer){\n           int num = (int) numbers.get(i);\n           sum += num;\n           product *= num;\n       }\n   }\n\n   List<Integer> result = new ArrayList<Integer>();\n   result.add(sum);\n   result.add((int)product);\n   return result;\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "String result = \"\";\n\n        // Loop through each character in the strings\n        for (int i = 0; i < a.length(); i++) {\n            // Perform XOR operation on corresponding characters\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "if (strings.isEmpty()){\n       return null;\n   }\n   else{\n       int max = 0;\n       int index = 0;\n       for (int i=0;i<strings.size();i++){\n           String str = (String)strings.get(i);\n           if (str.length() > max){\n               max = str.length();\n               index = i;\n           }\n       }\n       return (String)strings.get(index);\n   }\n}\n}"}
{"task_id": "java/4", "language": "java", "completion": "if (b == 0)\n            return a;\n        else\n            return greatestCommonDivisor(b, a % b);\n    }\n\n    /**\n     * Return a least common multiple of two integers a and b\n     * >>> least_common_multiple(3, 5)\n     * 15\n     * >>> least_common_multiple(25, 15)\n     * 75\n     *\n     */\n    public static int leastCommonMultiple(int a, int b) {\n        return (a * b) / greatestCommonDivisor(a, b);\n    }\n\n    /**\n     * Return an integer that is the solution to the system of two linear equations:\n     * a1*x + b1*y = c1\n     * a2*x + b2*y = c2\n     *\n     * >>> solve_linear(3, 5, 7, 9, 11, 6)\n     * -4.0\n     *\n     */\n    public static double solveLinear(int a1, int b1, int c1, int a2, int b2, int c2) {\n        double x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        return x;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Greatest Common Divisor: \" + greatestCommonDivisor(25, 15));\n        System.out.println(\"Least Common Multiple: \" + leastCommonMultiple(3, 5));\n        System.out.println(\"Solution to Linear Equations: \" + solveLinear(3, 5, 7, 9, 11, 6));\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "// your code goes here\n\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n\n        String[] nums = numbers.split(\" \");\n        Integer[] intNums = new Integer[nums.length];\n\n        for (int i = 0; i < nums.length; i++) {\n            intNums[i] = map.get(nums[i]);\n        }\n\n        Arrays.sort(intNums);\n\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Integer num : intNums) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue().equals(num)) {\n                    sortedNumbers.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n\n        return sortedNumbers.toString().trim();\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "// Find the smallest and largest values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Create a new list to store the rescaled values\n        List<Double> rescaledNumbers = new ArrayList<>();\n\n        // Apply the linear transform to each number in the list\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledNum);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "String flipped = \"\";\n        for (char c : string.toCharArray()){\n            if(Character.isLowerCase(c)){\n                flipped += Character.toUpperCase(c);\n            } else {\n                flipped += Character.toLowerCase(c);\n            }\n        }\n        return flipped;\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "/* Replace this comment with your code */\n\n  ArrayList<Object> positiveNumbers = new ArrayList<Object>();\n  for (int i=0; i < l.size(); i++) {\n    if ((Integer)l.get(i) > 0) {\n      positiveNumbers.add(l.get(i));\n    }\n  }\n  return positiveNumbers;\n}"}
{"task_id": "java/9", "language": "java", "completion": "if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "// Create a new TreeSet to store the unique elements.\n        Set<Integer> uniqueElements = new TreeSet<>();\n\n        // Add all elements of the input list to the set.\n        // Duplicates will be automatically removed.\n        for (int num : l) {\n            uniqueElements.add(num);\n        }\n\n        // Convert the set back to a list and return it.\n        return new ArrayList<>(uniqueElements);\n    }\n\n}"}
{"task_id": "java/11", "language": "java", "completion": "if (n <= 0) return -1;\n   ArrayList<Integer> fibList = new ArrayList<>();\n   fibList.add(2); // first Fibonacci prime number is 2\n   int a = 1, b = 2, c = 3;\n   while (fibList.size() < n) {\n       if (isPrime(c)) fibList.add(c);\n       a = b;\n       b = c;\n       c = a + b;\n   }\n   return fibList.get(n-1);\n}\n\nprivate static boolean isPrime(int num) {\n   if (num <= 1) return false;\n   if (num == 2) return true;\n   if (num % 2 == 0) return false;\n   for (int i = 3; i * i <= num; i += 2) {\n       if (num % i == 0) return false;\n   }\n   return true;\n}\n\npublic static void main(String[] args) {\n   int n = 5; // change this to test different inputs\n   System.out.println(\"The \" + n + \"-th prime Fibonacci number is: \" + primeFib(n));\n}\n}"}
{"task_id": "java/12", "language": "java", "completion": "if (l.size() < 3) return false;\n\n   Collections.sort(l);\n\n   for (int i = 0; i < l.size() - 2; i++) {\n       int left = i + 1;\n       int right = l.size() - 1;\n       while (left < right) {\n           if (l.get(i) + l.get(left) + l.get(right) == 0) return true;\n           else if (l.get(i) + l.get(left) + l.get(right) < 0) left++;\n           else right--;\n       }\n   }\n\n   return false;\n}\n\n    public static void main(String[] args) {\n        System.out.println(\"Triples sum to zero: \" + triplesSumToZero(Arrays.asList(1, 3, 5, 0)));\n        System.out.println(\"Triples sum to zero: \" + triplesSumToZero(Arrays.asList(1, 3, -2, 1)));\n        System.out.println(\"Triples sum to zero: \" + triplesSumToZero(Arrays.asList(1, 2, 3, 7)));\n        System.out.println(\"Triples sum to zero: \" + triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7)));\n        System.out.println(\"Triples sum to zero: \" + triplesSumToZero(Arrays.asList(1)));\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "// Your code here.\n        for (int i = 0; i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "int[] fib = new int[n + 1];\n        if (n >= 0) {\n            fib[0] = 0;\n        }\n        if (n >= 1) {\n            fib[1] = 0;\n        }\n        if (n >= 2) {\n            fib[2] = 2;\n        }\n        if (n >= 3) {\n            fib[3] = 0;\n        }\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "int n = l.size();\n        Collections.sort(l);\n        if (n % 2 != 0)\n            return (double) l.get(n / 2);\n\n        return (double) (l.get((n - 1) / 2) + l.get(n / 2)) / 2.0;\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "// your code goes here\n    int start = 0;\n    int end = text.length() - 1;\n\n    while (start < end) {\n        if (text.charAt(start) != text.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    String input = \"aba\"; // Replace with your desired string to check for palindrome\n    boolean result = isPalindrome(input);\n    System.out.println(\"Is Palindrome: \" + result);\n}\n}"}
{"task_id": "java/17", "language": "java", "completion": "// Your code here!\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = Character.toLowerCase(text.charAt(i));\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main (String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter wr = new PrintWriter(System.out);\n        int T = Integer.parseInt(br.readLine().trim());\n        while(T-->0)\n            wr.println(removeVowels(br.readLine()));\n        wr.close();\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) throws java.lang.Exception {\n        System.out.println(\"Below threshold tests:\");\n        printTestResult(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // True\n        printTestResult(belowThreshold(Arrays.asList(1, 20, 4, 10), 5)); // False\n    }\n\n    private static void printTestResult(Boolean result) {\n        System.out.println(\"Pass: \" + result);\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n}\n\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        // your code goes here\n       int x = 2, y =3;\n       System.out.println(add(x,y));\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "// your code goes here\n    HashMap<Character,Integer> map = new HashMap<>();\n    for(char c:s0.toCharArray()){\n        if(!map.containsKey(c)) map.put(c,1);\n        else map.put(c,map.get(c)+1);\n    }\n    for(char c:s1.toCharArray()){\n        if(!map.containsKey(c) || map.get(c) == 0) return false;\n        else map.put(c,map.get(c)-1);\n    }\n    for(int i:map.values()){\n        if(i!=0) return false;\n    }\n    return true;\n}\n}"}
{"task_id": "java/21", "language": "java", "completion": "if (n == 1 || n == 0){\n      return n;\n    }\n    else{\n      return fib(n-1) + fib(n-2);\n    }\n\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "TreeSet<Object> treeSet = new TreeSet<>();\n        for (Object element : l1) {\n            if (l2.contains(element)) {\n                treeSet.add(element);\n            }\n        }\n        return new ArrayList<>(treeSet);\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "if (n <= 1) {\n            return -1; // Invalid input, no prime factors exist.\n        }\n\n        int maxPrime = -1;\n\n        // Remove any factors of 2 from n.\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, so a skip of 2 can be used.\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n\n        // If n is a prime number greater than 2, then it is the largest prime factor.\n        if (n > 2) {\n            maxPrime = n;\n        }\n\n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195)); // Output: 29\n        System.out.println(largestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n    for (int i = 1; i < xs.size(); i++) {\n        result.add(i * xs.get(i));\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    List<Integer> test1 = Arrays.asList(3, 1, 2, 4, 5);\n    System.out.println(derivative(test1)); // should print: [1, 4, 12, 20]\n\n    List<Integer> test2 = Arrays.asList(1, 2, 3);\n    System.out.println(derivative(test2)); // should print: [2, 6]\n}\n}"}
{"task_id": "java/26", "language": "java", "completion": "if (n < 3){\n        return n == 2 ? 1 : 0;\n      }\n      int[] dp = new int[n+1];\n      dp[0] = 0;\n      dp[1] = 0;\n      dp[2] = 1;\n\n      for(int i=3;i<=n;i++){\n        dp[i] = dp[i-1]+dp[i-2]+dp[i-3];\n      }\n      return dp[n];\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "//Your code goes here.\n        String str = s.toLowerCase();\n        int count=0;\n        for (int i=0 ;i<str.length() ;i++){\n            char ch = str.charAt(i);\n            if (ch == 'a' || ch=='e'|| ch=='i'||ch=='o'||ch=='u'){\n                count++;\n            }\n        }\n        // Check for 'y' at the end of the word.\n        if (str.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "HashMap<Integer, Integer> freq = new HashMap<>();\n\n    for (int num : lst){\n        if(!freq.containsKey(num)){\n            freq.put(num,1);\n        } else {\n            freq.put(num, freq.get(num)+1);\n        }\n    }\n\n    int max = -1;\n\n    for (int key : freq.keySet()){\n        if(freq.get(key) >= key && key > max){\n            max = key;\n        }\n    }\n\n    return max;\n}\n}"}
{"task_id": "java/29", "language": "java", "completion": "// Calculate the semi-perimeter of the triangle\n      double s = (a + b + c) / 2.0;\n\n      // Check if the three sides form a valid triangle\n      if (a > 0 && b > 0 && c > 0 && a < s && b < s && c < s) {\n          // Calculate the area of the triangle using Heron's formula\n          double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n          // Round the area to 2 decimal points\n          return roundToTwoDecimalPoints(area);\n      } else {\n          // Return -1 if the three sides do not form a valid triangle\n          return -1;\n      }\n    }\n\n    // Helper method to round a number to two decimal points\n    private static double roundToTwoDecimalPoints(double num) {\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        return Double.parseDouble(df.format(num));\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "List<Integer> reversed = new ArrayList<>();\n        for (int i = q.size() - 1; i >= 0; i--) {\n            reversed.add(q.get(i));\n        }\n        if (reversed.equals(q) && sum(q) <= w) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private static int sum(List<Integer> list) {\n        int sum = 0;\n        for (int i : list) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "int count=0;\n    for(int i=2;count<3&&i<=a/2;++i){\n      while(a%i==0){\n        ++count;\n        a/=i;\n      }\n    }\n    if(a>1)++count;\n    return count==3;\n  }\n}"}
{"task_id": "java/32", "language": "java", "completion": "String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15)); // should print db1111db\n        System.out.println(decimalToBinary(32)); // should print db100000db\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "// Check if the string length is less than 3, if so return false\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate over each character in the string starting from index 2 to end of string\n        for (int i = 2; i < s.length(); i++) {\n            // Check if the current character is equal to any of the previous two characters\n            if (s.charAt(i) == s.charAt(i - 1) || s.charAt(i) == s.charAt(i - 2)) {\n                // If it does, return false as the string is not happy\n                return false;\n            }\n        }\n\n        // If no three consecutive letters are equal to each other, then return true\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "List<String> result = new ArrayList<>();\n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            if (gpa == 4.0) {\n                result.add(\"A+\");\n            } else if (gpa > 3.7) {\n                result.add(\"A\");\n            } else if (gpa > 3.3) {\n                result.add(\"A-\");\n            } else if (gpa > 3.0) {\n                result.add(\"B+\");\n            } else if (gpa > 2.7) {\n                result.add(\"B\");\n            } else if (gpa > 2.3) {\n                result.add(\"B-\");\n            } else if (gpa > 2.0) {\n                result.add(\"C+\");\n            } else if (gpa > 1.7) {\n                result.add(\"C\");\n            } else if (gpa > 1.3) {\n                result.add(\"C-\");\n            } else if (gpa > 1.0) {\n                result.add(\"D+\");\n            } else if (gpa > 0.7) {\n                result.add(\"D\");\n            } else if (gpa >= 0.0 && gpa <= 0.7) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "int length = string.length();\n\n    if (length <= 1){\n      return false;\n    }\n    else{\n      for(int i = 2 ; i < length; i++){\n        if(length % i == 0 ){\n          return false;\n        }\n      }\n    }\n    return true;\n\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        int sum = 0;\n        while (n > 0){\n            sum += n % 2;\n            n /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int inputNumber = sc.nextInt(); // Read input from stdin\n        System.out.println(solve(inputNumber));\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "ArrayList<ArrayList<Integer>> arrayList = new ArrayList<>();\n        for (int i=0;i<lst.size();i++){\n            arrayList.add((ArrayList<Integer>) lst.get(i));\n        }\n        //System.out.println(arrayList);\n        ArrayList<ArrayList<Integer>> resArray = new ArrayList<>();\n        for (int i=0;i<arrayList.size();i++){\n            for (int j=0;j<arrayList.get(i).size();j++){\n                if (arrayList.get(i).get(j) == x){\n                    resArray.add(new ArrayList<>(Arrays.asList(i,j)));\n                }\n            }\n        }\n        //System.out.println(resArray);\n        Collections.sort(resArray,(o1, o2) -> {\n            if (Objects.equals(o1.get(0), o2.get(0))){\n                return o2.get(1).compareTo(o1.get(1));\n            }\n            else{\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        //System.out.println(resArray);\n        ArrayList<Object> res = new ArrayList<>();\n        for (ArrayList<Integer> arr: resArray){\n            res.add(arr);\n        }\n        return res;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "// your code goes here\n        if (lst.size() < 2) {\n            return null;\n        }\n\n        Collections.sort(lst);\n\n        int smallest = (int) lst.get(0);\n        for (Object num : lst) {\n            if ((int) num > smallest) {\n                return (Integer) num;\n            }\n        }\n\n        return null;\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "String[] sentences = s.split(\"[\\\\.\\\\?\\\\!]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "boolean isPrime(int n) {\n            if (n <= 1) return false;\n            if (n == 2) return true;\n            if (n % 2 == 0) return false;\n            for (int i = 3; i * i <= n; i += 2) {\n                if (n % i == 0) return false;\n            }\n            return true;\n        }\n\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        if (maxPrime == -1) return 0; // No prime numbers in the list\n\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "if (dict instanceof Map) {\n      boolean lowerCase = true;\n      boolean upperCase = true;\n\n      for (Map.Entry<?, ?> entry : ((Map<?, ?>) dict).entrySet()) {\n        Object key = entry.getKey();\n\n        if (!(key instanceof String)) {\n          return false;\n        }\n\n        String stringKey = (String) key;\n\n        lowerCase &= stringKey.equals(stringKey.toLowerCase());\n        upperCase &= stringKey.equals(stringKey.toUpperCase());\n      }\n\n      return lowerCase || upperCase;\n    } else {\n      throw new IllegalArgumentException(\"Input is not a dictionary\");\n    }\n  }\n}"}
{"task_id": "java/42", "language": "java", "completion": "double num = Double.parseDouble(value);\n    if (num >= 0) {\n        return (int) (num + 0.5);\n    } else {\n        return (int) (num - 0.5);\n    }\n}\n\n    public static void main (String[] args) throws IOException{\n        System.out.println(closestInteger(\"14.5\")); // Output: 15\n        System.out.println(closestInteger(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "// your code goes here\n    ArrayList<Integer> pile = new ArrayList<>();\n    pile.add(n);\n    while (n > 1){\n        if (n % 2 == 0)\n            n -= 2;\n        else\n            n -= 2;\n        pile.add(n);\n    }\n    return pile;\n}\n\npublic static void main (String[] args) throws java.lang.Exception {\n    System.out.println(makeAPile(3)); // should print [3, 5, 7]\n}\n}"}
{"task_id": "java/44", "language": "java", "completion": "String[] str = s.split(\"[ ,]+\");\n        return Arrays.asList(str);\n\n  }\n}"}
{"task_id": "java/45", "language": "java", "completion": "if (x > y || y < 0 || x < 0) {\n        return -1; // If the input is invalid or no even number exists in the range.\n    }\n\n    for (int i = y; i >= x; i--) {\n        if (i % 2 == 0) {\n            return i; // Return the first even number found from y to x.\n        }\n    }\n\n    return -1; // No even number was found in the range.\n}\n\n    public static void main(String[] args){\n\tSystem.out.println(\"Hello World\");\n    int result = chooseNum(12, 15);\n    System.out.println(result); // Output: 14\n\n    result = chooseNum(13, 12);\n    System.out.println(result); // Output: -1\n}\n}"}
{"task_id": "java/46", "language": "java", "completion": "if (n > m) return -1;\n\n    int avg = ((m - n + 1) / 2) + n;\n\n    return Integer.toBinaryString(avg);\n}\n\npublic static void main(String[] args) {\n    System.out.println(roundedAvg(1,5));\n    System.out.println(roundedAvg(7,5));\n    System.out.println(roundedAvg(10,20));\n    System.out.println(roundedAvg(20,33));\n}\n}"}
{"task_id": "java/47", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbersUpToN(i));\n            }\n        }\n\n        return result;\n    }\n\n    private static int factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        } else {\n            return num * factorial(num - 1);\n        }\n    }\n\n    private static int sumOfNumbersUpToN(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "// Initialize a list to store the count of even and odd palindromes\n        int[] count = new int[2];\n\n        // Loop through each number from 1 to n (inclusive)\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                // If the current number is a palindrome, check if it's even or odd and increment the corresponding count\n                count[i % 2]++;\n            }\n        }\n\n        // Convert the count array to a list and return it\n        List<Integer> result = new ArrayList<>();\n        result.add(count[0]);\n        result.add(count[1]);\n        return result;\n    }\n\n    private static boolean isPalindrome(int num) {\n        // Convert the number to a string\n        String str = Integer.toString(num);\n\n        // Compare each character from the beginning and end of the string until they meet in the middle\n        for (int i = 0; i < str.length() / 2; i++) {\n            if (str.charAt(i) != str.charAt(str.length() - i - 1)) {\n                // If any pair of characters does not match, the number is not a palindrome\n                return false;\n            }\n        }\n\n        // If all pairs of characters match, the number is a palindrome\n        return true;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "}\n}"}
{"task_id": "java/50", "language": "java", "completion": "// Your code goes here\n    }\n}\npublic class Solution {\n    public static void main(String[] args){\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(Exchange.exchange(lst1, lst2)); // should print \"NO\"\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "// This function removes all occurrences of characters from string 's' that are present in string 'c'.\n    // It then checks if the resulting string is a palindrome and returns it along with the result of the check.\n\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(Character.toString(ch))) {\n                sb.append(ch);\n            }\n        }\n        String modifiedS = sb.toString();\n        boolean isPalindrome = checkPalindrome(modifiedS);\n        List<Object> result = new ArrayList<>();\n        result.add(modifiedS);\n        result.add(isPalindrome);\n        return result;\n    }\n\n    private static boolean checkPalindrome(String s) {\n  // This helper function checks if a given string is a palindrome by comparing its characters from both ends and moving towards the center.\n        int start = 0, end = s.length() - 1;\n        while (start < end) {\n            if (s.charAt(start++) != s.charAt(end--)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "// Create a priority queue to store the remaining water in each well row\n    PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\n    // Calculate the remaining water in each well row and add it to the priority queue\n    for (List<Integer> well : grid) {\n        int remainingWater = 0;\n        for (int unit : well) {\n            if (unit == 1) {\n                remainingWater++;\n            }\n        }\n        if (remainingWater > 0) {\n            pq.add(remainingWater);\n        }\n    }\n\n    int operations = 0;\n\n    // Continue the process until there is no more water in any well\n    while (!pq.isEmpty()) {\n        int currentCapacity = capacity;\n\n        // Fill the bucket with water from the wells that have the most remaining water\n        while (currentCapacity > 0 && !pq.isEmpty()) {\n            int remainingWater = pq.poll();\n            int unitsToExtract = Math.min(remainingWater, currentCapacity);\n            currentCapacity -= unitsToExtract;\n            remainingWater -= unitsToExtract;\n            if (remainingWater > 0) {\n                pq.add(remainingWater);\n            }\n        }\n\n        // Increase the number of operations\n        operations++;\n    }\n\n    return operations;\n}\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\"); // split the string into words\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                res.add(word);\n            }\n        }\n\n        return res;\n    }\n\n    private static int countConsonants(String word) {\n        int count = 0;\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\n        for (char c : word.toCharArray()) {\n            if (consonants.indexOf(c) != -1) { // if the character is a consonant\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4)); // prints [little]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3)); // prints [Mary, lamb]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "// sort the array in ascending order\n        Collections.sort(arr);\n\n        // create a list to store the result\n        List<Object> result = new ArrayList<>();\n\n        // add the last k elements of the sorted array to the result list\n        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n\n        // return the result list\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>();\n        arr.add(-3);\n        arr.add(-4);\n        arr.add(5);\n        int k = 3;\n        System.out.println(maximum(arr, k)); // Output: [-4, -3, 5]\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= -99 && num <= 99) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start;\n\n        // Check if the length is a prime number\n        if (length < 2) {\n            return \"NO\";\n        }\n\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "//write your code here\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return new ArrayList<>(result);\n        } else if (n == 1) {\n            result.add(3);\n            return new ArrayList<>(result);\n        } else if (n == 2) {\n            result.add(3);\n            result.add(2);\n            return new ArrayList<>(result);\n        } else {\n            result.add(1);\n            result.add(3);\n            result.add(2);\n            for (int i = 3; i <= n; i++) {\n                if (i % 2 == 0) {\n                    result.add(1 + i / 2);\n                } else {\n                    int sum = result.get(i - 1) + result.get(i - 2) + result.get(i - 3);\n                    result.add(sum);\n                }\n            }\n        }\n        return new ArrayList<>(result);\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "// Your code goes here\n      int product = 1;\n      boolean hasOddDigit = false;\n\n      while (n > 0) {\n          int digit = n % 10;\n          if (digit % 2 != 0) {\n              product *= digit;\n              hasOddDigit = true;\n          }\n          n /= 10;\n      }\n\n      return hasOddDigit ? product : 0;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "return null;\n  }\n}"}
{"task_id": "java/60", "language": "java", "completion": "int sum = 0;\n        for (Number num : lst) {\n            int squaredNum = (int) Math.ceil(num.doubleValue());\n            sum += squaredNum * squaredNum;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "// Check if the string is empty\n        if (txt.length() == 0) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is a letter and not part of a word\n        return Character.isLetter(lastChar) && (txt.length() == 1 || !Character.isLetter(txt.charAt(txt.length() - 2)));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // False\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "for (int i = arr.size() - 1; i > 0; i--) {\n       if ((Integer)arr.get(i) < (Integer)arr.get(i-1)) {\n         return i;\n       }\n     }\n     return -1;\n   }\n}"}
{"task_id": "java/63", "language": "java", "completion": "// TODO: your code goes here\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int integerNum = (Integer) num;\n\n                if (integerNum > 0 && (smallestPositive == null || integerNum < smallestPositive)) {\n                    smallestPositive = integerNum;\n                } else if (integerNum < 0 && (largestNegative == null || integerNum > largestNegative)) {\n                    largestNegative = integerNum;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n\n    public static void main (String[] args) {\n        // test your function here\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private static long factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        } else {\n            long fact = 1;\n            for (int i = 2; i <= num; i++) {\n                fact *= i;\n            }\n            return fact;\n        }\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "// write your code here.\n      StringBuilder result = new StringBuilder();\n        boolean firstWordAdded = false;\n        for (String word : sentence.split(\" \")) {\n            if (isPrime(word.length())) {\n                if (!firstWordAdded) {\n                    firstWordAdded = true;\n                } else {\n                    result.append(' ');\n                }\n                result.append(word);\n            }\n        }\n        return result.toString();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "// Parse the fractions into numerators and denominators\n        int numX = Integer.parseInt(x.split(\"/\")[0]);\n        int denX = Integer.parseInt(x.split(\"/\")[1]);\n        int numN = Integer.parseInt(n.split(\"/\")[0]);\n        int denN = Integer.parseInt(n.split(\"/\")[1]);\n\n        // Multiply the fractions\n        int resultNum = numX * numN;\n        int resultDen = denX * denN;\n\n        // Simplify the fraction (if necessary) by finding the greatest common divisor (GCD)\n        int gcd = findGCD(resultNum, resultDen);\n        resultNum /= gcd;\n        resultDen /= gcd;\n\n        // Check if the denominator is 1, indicating that the fraction has been simplified to a whole number\n        return resultDen == 1;\n    }\n\n    private static int findGCD(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }"}
{"task_id": "java/67", "language": "java", "completion": "HashMap<Integer, LinkedHashSet<Integer>> sumMap = new HashMap<>();\n        int maxSum = 0;\n\n        for (int i = 0; i < nums.size(); i++) {\n            Integer currNum = (Integer) nums.get(i);\n            int sum = getDigitsSum(currNum);\n\n            if (!sumMap.containsKey(sum)) {\n                sumMap.put(sum, new LinkedHashSet<>());\n            }\n\n            sumMap.get(sum).add(currNum);\n            maxSum = Math.max(maxSum, sum);\n        }\n\n        List<Object> result = new ArrayList<>();\n\n        for (int i = 0; i <= maxSum; i++) {\n            if (!sumMap.containsKey(i)) continue;\n            LinkedHashSet<Integer> set = sumMap.get(i);\n\n            Iterator<Integer> it = set.iterator();\n            while (it.hasNext()) {\n                result.add(it.next());\n            }\n        }\n\n        return result;\n    }\n\n    private static int getDigitsSum(int num) {\n        num = Math.abs(num);\n        int sum = 0;\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "int count = 0;\n    for (Object o : nums) {\n        if (o instanceof Integer) {\n            int n = (Integer) o;\n            if (n > 10) {\n                String s = String.valueOf(Math.abs(n)); // Convert to absolute value and string\n                char firstDigit = s.charAt(0); // Get the first digit as a character\n                char lastDigit = s.charAt(s.length() - 1); // Get the last digit as a character\n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) { // Check if both are odd\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    List<Object> list = Arrays.asList(33, -2, -3, 45, 21, 109);\n    System.out.println(specialfilter(list)); // Output: 2\n}\n\n}"}
{"task_id": "java/69", "language": "java", "completion": "}\n}"}
{"task_id": "java/70", "language": "java", "completion": "List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<Object> result = new ArrayList<>();\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result; // Return empty list if planet names are invalid\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        // Swap indices if necessary to ensure correct order\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "if (isPrime(n)) {\n      return x;\n    } else {\n      return y;\n    }\n  }\n\n  // Helper function to check if a number is prime\n  private static boolean isPrime(int num) {\n    if (num <= 1) {\n      return false;\n    }\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }"}
{"task_id": "java/72", "language": "java", "completion": "int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer && (Integer)o > 0 && ((Integer)o & 1) == 1) {\n                sum += Math.pow((Integer)o, 2);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "int maxStrength = Integer.MIN_VALUE;\n        String strongestExt = \"\";\n        for (String ext : extensions) {\n            int strength = calculateStrength(ext);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExt = ext;\n            }\n        }\n        return className + \".\" + strongestExt;\n    }\n\n    private static int calculateStrength(String extension) {\n        int cap = 0, sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return cap - sm;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "}\n}"}
{"task_id": "java/75", "language": "java", "completion": "String roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\t    int nums[] = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n\t    String result=\"\";\n\t    for(int i=0;i<nums.length;i++){\n\t        while(number>=nums[i]){\n\t            number = number-nums[i];\n\t            result+=roman[i];\n\t        }\n\t    }\n\t    return result;\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "// your code goes here\n        int max = Math.max(c, Math.max(a, b));\n        if (max == a) {\n            return b * b + c * c == a * a;\n        } else if (max == b) {\n            return a * a + c * c == b * b;\n        } else {\n            return a * a + b * b == c * c;\n        }\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "boolean containsLetter = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!containsLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "if (text.isEmpty()){\n       return null;\n   } else {\n       try {\n           MessageDigest md = MessageDigest.getInstance(\"MD5\");\n           byte[] array = md.digest(text.getBytes());\n           StringBuffer sb = new StringBuffer();\n           for (int i = 0; i < array.length; ++i) {\n               sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));\n           }\n           return sb.toString();\n       } catch (java.security.NoSuchAlgorithmException e) {\n       }\n   }\n    return null;\n}\n}"}
{"task_id": "java/79", "language": "java", "completion": "// Your code here!\n        ArrayList<Object> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            String str = Integer.toString(i);\n            char[] digits = str.toCharArray();\n            boolean isEven = true;\n            for (char digit : digits) {\n                if ((digit - '0') % 2 != 0) {\n                    isEven = false;\n                    break;\n                }\n            }\n            if (isEven) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}

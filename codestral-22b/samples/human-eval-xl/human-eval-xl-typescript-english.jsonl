{"task_id": "typescript/0", "language": "typescript", "completion": "let balance = 0;\n  for(let operation of operations) {\n    balance += operation;\n    if(balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "let sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n   let product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);\n\n   return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "let result = '';\n\n   for(let i=0;i<a.length;i++){\n     if(a[i] === b[i]){\n       result += '0';\n     }else{\n       result += '1';\n     }\n   }\n\n   return result;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "if(strings.length === 0) return None;\n\n   let maxLength = 0;\n   let longestString;\n\n   for(let i=0; i < strings.length; i++){\n      if(strings[i].length > maxLength){\n         maxLength = strings[i].length;\n         longestString = strings[i];\n      }\n   }\n\n   return longestString;\n}"}
{"task_id": "typescript/4", "language": "typescript", "completion": "// If a is zero, then the greatest common divisor is b\n  if (a === 0) return Math.abs(b);\n\n  // Use recursion to find the greatest common divisor of b and the remainder of a divided by b\n  return greatest_common_divisor(b % a, a);\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "// Create a map of word numbers and their corresponding numeric values.\n    const numMap: Map<string, number> = new Map([\n        ['zero', 0], ['one', 1], ['two', 2], ['three', 3],\n        ['four', 4], ['five', 5], ['six', 6],\n        ['seven', 7], ['eight', 8], ['nine', 9]\n    ]);\n\n    // Split the input string into an array of words.\n    const numArray: string[] = numbers.split(' ');\n\n    // Sort the array based on the numeric values of the word numbers.\n    numArray.sort((a, b) => numMap.get(a)! - numMap.get(b)!);\n\n    // Join the sorted array back into a string and return it.\n    return numArray.join(' ');\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const minNumber = Math.min(...numbers);\n   const maxNumber = Math.max(...numbers);\n\n   return numbers.map((number) => (number - minNumber) / (maxNumber - minNumber));\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "let result = '';\n    for(let i=0; i<string0.length; i++) {\n        if(string0[i] === string0[i].toLowerCase()) {\n            result += string0[i].toUpperCase();\n        } else {\n            result += string0[i].toLowerCase();\n        }\n    }\n    return result;\n}"}
{"task_id": "typescript/8", "language": "typescript", "completion": "// Filter out the numbers that are less than or equal to 0\n    return l.filter(num => num > 0);\n}"}
{"task_id": "typescript/9", "language": "typescript", "completion": "if (n <= 1) return false;\n  for (let i = 2, max = Math.sqrt(n); i <= max; i++)\n    if (n % i === 0) return false;\n  return true;\n}"}
{"task_id": "typescript/10", "language": "typescript", "completion": "return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "let count = 0;\n   let fib = [2, 3]; // Fibonacci sequence starting with 2 and 3.\n\n   while(count < n){\n       const nextFib = fib[fib.length - 1] + fib[fib.length - 2]; // Next number in the Fibonacci sequence.\n       if (isPrime(nextFib)) {\n           count++;\n       }\n       fib.push(nextFib);\n   }\n   return fib[fib.length - 1];\n};\n\nconst isPrime = function (num: number): boolean {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if(num % i === 0) return false;\n    }\n    return num > 1;\n}"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const nums = l.sort((a, b) => a - b); // sort the array in ascending order\n\n    for(let i=0; i<nums.length-2; i++) { // iterate through each element except the last two\n        if(i > 0 && nums[i] === nums[i-1]) continue; // skip duplicate elements to avoid duplicates\n\n        let left = i+1;\n        let right = nums.length-1;\n\n        while(left < right) { // two pointer technique\n            const sum = nums[i] + nums[left] + nums[right];\n\n            if(sum === 0) return true; // found a triplet that sums to zero\n            else if (sum > 0) right--; // decrease the right pointer if sum is greater than zero\n            else left++; // increase the left pointer if sum is less than zero\n        }\n    }\n\n    return false; // no triplets found\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "if (l.length < 2) return false;\n\n  const set = new Set();\n\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(-l[i])) return true;\n\n    set.add(l[i]);\n  }\n\n  return false;\n}"}
{"task_id": "typescript/14", "language": "typescript", "completion": "if (n < 0) throw new Error(\"Invalid input. Argument must be a non-negative integer.\");\n   if (n <= 3) return [0, 0, 2, 0][n];\n\n   let a = 0;\n   let b = 0;\n   let c = 2;\n   let d = 0;\n   for (let i = 4; i <= n; i++) {\n     const temp = a + b + c + d;\n     a = b;\n     b = c;\n     c = d;\n     d = temp;\n   }\n\n   return d;\n };"}
{"task_id": "typescript/15", "language": "typescript", "completion": "// Sort the array in ascending order\n    l.sort((a, b) => a - b);\n\n    const midIndex = Math.floor(l.length / 2);\n\n    if (l.length % 2 === 0) {\n        // If the length of the array is even, take the average of the two middle elements\n        return (l[midIndex - 1] + l[midIndex]) / 2;\n    } else {\n        // If the length of the array is odd, return the middle element\n        return l[midIndex];\n    }\n};"}
{"task_id": "typescript/16", "language": "typescript", "completion": "if(text.length <= 1){\n     return true;\n   } else {\n     let firstChar = text[0];\n     let lastChar = text[text.length - 1];\n     let middleText = text.slice(1, text.length - 1);\n     if (firstChar === lastChar) {\n       return is_palindrome(middleText);\n     } else {\n       return false;\n     }\n   }\n };"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n   let result = '';\n\n   for(let i = 0; i < text.length; i++) {\n     if (!vowels.includes(text[i])) {\n       result += text[i];\n     }\n   }\n\n   return result;\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "return l.every(num => num < t);\n}"}
{"task_id": "typescript/19", "language": "typescript", "completion": "return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "// Create two empty arrays to store the character counts for each string\n  const countS0 = new Array(26).fill(0);\n  const countS1 = new Array(26).fill(0);\n\n  // Iterate over the characters in the first string and increment their corresponding counts in the array\n  for (let i = 0; i < s0.length; i++) {\n    countS0[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n  }\n\n  // Do the same for the second string\n  for (let i = 0; i < s1.length; i++) {\n    countS1[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n  }\n\n  // Compare the character counts for each letter in both arrays, and return false if they are not equal\n  for (let i = 0; i < 26; i++) {\n    if (countS0[i] !== countS1[i]) {\n      return false;\n    }\n  }\n\n  // If we have made it through the loop without returning false, then the strings must contain the same characters\n  return true;\n}"}
{"task_id": "typescript/21", "language": "typescript", "completion": "if (n <= 1) return n;\n  let a = 0, b = 1, temp;\n  for (let i = 2; i <= n; i++) {\n    temp = a + b;\n    a = b;\n    b = temp;\n  }\n  return b;\n}"}
{"task_id": "typescript/22", "language": "typescript", "completion": "// Create a set from the first array for O(1) lookup times.\n    const set1 = new Set(l1);\n\n    // Filter the second array to only include elements that exist in the first array and then convert back to an array.\n    const commonElements = Array.from(new Set(l2.filter(element => set1.has(element))));\n\n    // Sort the resulting array in ascending order.\n    return commonElements.sort((a, b) => a - b);\n}"}
{"task_id": "typescript/23", "language": "typescript", "completion": "let i;\n\n  // Print the number of 2s that divide n\n  while (n % 2 == 0) {\n      n = Math.floor(n / 2);\n  }\n\n  // n must be odd at this point, thus skip one element (Note i = i +2)\n  for (i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n        n = Math.floor(n / i);\n    }\n  }\n\n  // This condition is to handle the case when n is a prime number\n  // greater than 2\n  if (n > 2) {\n      return n;\n  } else {\n      return i - 2;\n  }\n}"}
{"task_id": "typescript/24", "language": "typescript", "completion": "let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "typescript/25", "language": "typescript", "completion": "// Create a new array to store the coefficients of the derivative polynomial.\n    const result = [];\n\n    // Iterate over each coefficient in the input array, starting from index 1 (since we're calculating derivatives).\n    for (let i = 1; i < xs.length; i++) {\n      // Multiply the current coefficient by its position in the polynomial and add it to the result array.\n      result.push(xs[i] * i);\n    }\n\n    // Return the resulting derivative polynomial coefficients.\n    return result;\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "// Initialize an array to store the computed fibfib values\n    const memo: number[] = [0, 0, 1];\n\n    // Helper function to compute the n-th element of the fibfib sequence\n    const fibfibHelper = (n: number): number => {\n        if (memo[n] !== undefined) return memo[n];\n\n        memo[n] = fibfibHelper(n - 1) + fibfibHelper(n - 2) + fibfibHelper(n - 3);\n        return memo[n];\n    }\n\n    // Compute the n-th element of the fibfib sequence and return it\n    return fibfibHelper(n);\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const count = s.toLowerCase().split('').reduce((acc, char) => {\n        if ('aeiou'.includes(char)) return acc + 1;\n        if (char === 'y' && s.length > 0 && char === s[s.length - 1]) return acc + 1;\n        return acc;\n    }, 0);\n    return count;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const countMap = new Map();\n   for(let num of lst) {\n      if(!countMap.has(num)) {\n         countMap.set(num, 1);\n       } else {\n         countMap.set(num, countMap.get(num)+1);\n       }\n   }\n\n   let maxFreq = -1;\n   for(let [key, value] of countMap) {\n      if(value >= key && key > maxFreq) {\n         maxFreq = key;\n      }\n   }\n\n   return maxFreq;\n}"}
{"task_id": "typescript/29", "language": "typescript", "completion": "// Check if the three sides form a valid triangle\n    if (a + b > c && b + c > a && c + a > b) {\n      // Calculate the semi-perimeter of the triangle\n      const s = (a + b + c) / 2;\n\n      // Calculate the area using Heron's formula\n      const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n      // Round the area to 2 decimal points and return it\n      return parseFloat(area.toFixed(2));\n    } else {\n      // If the three sides do not form a valid triangle, return -1\n      return -1;\n    }\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "// Check if array is palindrome\n    const isPalindrome = q.every((val, index) => val === q[q.length - 1 - index]);\n\n    // Calculate sum of elements in array\n    const sum = q.reduce((a, b) => a + b, 0);\n\n    // Return true if the object will fly\n    return isPalindrome && sum <= w;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "let factors = [];\n    for (let i = 2; i <= a; i++) {\n        while (a % i === 0) {\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    return factors.length === 3 && isPrime(factors[0]) && isPrime(factors[1]) && isPrime(factors[2]);\n};\n\nconst isPrime = function (num: number) : boolean {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) return false;\n    }\n    return num > 1;\n};\nconsole.log(is_multiply_prime(30)); // Output: true"}
{"task_id": "typescript/32", "language": "typescript", "completion": "// Convert the decimal to binary using toString method with base 2\n    let binary = decimal.toString(2);\n\n    // Add 'db' at the beginning and end of the string\n    return \"db\" + binary + \"db\";\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "if (s.length < 3) return false;\n\n   for (let i = 0; i <= s.length - 3; i++) {\n      const substring = s.slice(i, i + 3);\n      if (substring[0] === substring[1] || substring[0] === substring[2] || substring[1] === substring[2]) {\n         return false;\n      }\n   }\n   return true;\n}\nconsole.log(is_happy(\"a\")); // False\nconsole.log(is_happy(\"aa\")); // False\nconsole.log(is_happy(\"abcd\")); // True\nconsole.log(is_happy(\"aabb\")); // False\nconsole.log(is_happy(\"adb\")); // True\nconsole.log(is_happy(\"xyy\")); // False"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const letterGrades: Array<string> = [];\n\n    grades.forEach((grade) => {\n      if(grade === 4.0){\n        letterGrades.push('A+');\n      } else if(grade > 3.7){\n        letterGrades.push('A');\n      } else if(grade > 3.3){\n        letterGrades.push('A-');\n      } else if(grade > 3.0){\n        letterGrades.push('B+');\n      } else if(grade > 2.7){\n        letterGrades.push('B');\n      } else if(grade > 2.3){\n        letterGrades.push('B-');\n      } else if(grade > 2.0){\n        letterGrades.push('C+');\n      } else if(grade > 1.7){\n        letterGrades.push('C');\n      } else if(grade > 1.3){\n        letterGrades.push('C-');\n      } else if(grade > 1.0){\n        letterGrades.push('D+');\n      } else if(grade > 0.7){\n        letterGrades.push('D');\n      } else if(grade > 0.0){\n        letterGrades.push('D-');\n      } else {\n        letterGrades.push('E');\n      }\n    });\n\n    return letterGrades;\n}"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n     if (num <= 1) return false;\n     for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n       if (num % i === 0) return false;\n     return true;\n   };\n\n   return isPrime(string0.length);\n };"}
{"task_id": "typescript/36", "language": "typescript", "completion": "// Convert the decimal number to binary\n    const binary = N.toString(2);\n\n    // Initialize a variable to store the sum of digits\n    let sum = 0;\n\n    // Iterate through each digit in the binary representation\n    for (let i = 0; i < binary.length; i++) {\n      // Add the current digit to the sum\n      sum += parseInt(binary[i]);\n    }\n\n    // Convert the sum to binary and return it as a string\n    return sum.toString(2);\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "let result: Array<Array<number>> = [];\n\n   for (let i = 0; i < lst.length; i++) {\n     let row = lst[i];\n     for (let j = 0; j < row.length; j++) {\n       if (row[j] === x) {\n         result.push([i, j]);\n       }\n     }\n   }\n\n   // Sort by rows in ascending order and columns in descending order\n   result.sort((a, b) => {\n     if (a[0] === b[0]) {\n       return b[1] - a[1];\n     } else {\n       return a[0] - b[0];\n     }\n   });\n\n   return result;\n };"}
{"task_id": "typescript/38", "language": "typescript", "completion": "// Initialize the smallest and second smallest elements to be larger than possible values\n  let smallest = Number.MAX_SAFE_INTEGER;\n  let secondSmallest = Number.MAX_SAFE_INTEGER;\n\n  // Iterate over the list of integers\n  for (let i = 0; i < lst.length; i++) {\n    // If the current element is smaller than the smallest, update both the smallest and second smallest elements\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    }\n    // If the current element is between the smallest and second smallest elements, update the second smallest element\n    else if (lst[i] < secondSmallest && lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n\n  // If there is no second smallest element, return null\n  if (secondSmallest === Number.MAX_SAFE_INTEGER) {\n    return null;\n  }\n  // Otherwise, return the second smallest element\n  else {\n    return secondSmallest;\n  }\n}"}
{"task_id": "typescript/39", "language": "typescript", "completion": "// Split the input string into sentences based on delimiters\n   const sentences = S.split(/[.!?]/);\n\n   // Initialize a counter for boredoms\n   let boredomCount = 0;\n\n   // Iterate through each sentence\n   for (const sentence of sentences) {\n     // Trim leading and trailing whitespaces from the sentence\n     const trimmedSentence = sentence.trim();\n\n     // Check if the sentence starts with \"I\"\n     if (trimmedSentence.startsWith(\"I\")) {\n       boredomCount++;\n     }\n   }\n\n   return boredomCount;\n };"}
{"task_id": "typescript/40", "language": "typescript", "completion": "// Function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n    // Filter the list to only include prime numbers\n    const primes: number[] = lst.filter(isPrime);\n\n    // If there are no prime numbers, return -1 or some other appropriate value\n    if (primes.length === 0) {\n        return -1;\n    }\n\n    // Find the largest prime number\n    const maxPrime = Math.max(...primes);\n\n    // Convert the largest prime number to a string, then sum its digits\n    let digitSum = 0;\n    for (const digit of maxPrime.toString()) {\n        digitSum += parseInt(digit);\n    }\n\n    return digitSum;\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "if (!dict || dict.size === 0) {\n    return false;\n  }\n\n  let isLowerCase = true;\n  let isUpperCase = true;\n\n  for (const key of dict.keys()) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    isLowerCase = isLowerCase && key === key.toLowerCase();\n    isUpperCase = isUpperCase && key === key.toUpperCase();\n  }\n\n  return isLowerCase || isUpperCase;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const num = parseFloat(value);\n\n  // Check if the decimal part is greater than or equal to .5\n  if (Math.abs(num % 1) >= 0.5) {\n    // If true, round away from zero\n    return num < 0 ? Math.floor(num) : Math.ceil(num);\n  } else {\n    // If false, round towards zero\n    return num < 0 ? Math.ceil(num) : Math.floor(num);\n  }\n};\n\n// Test cases\nconsole.log(closest_integer(\"10\"));     // Output: 10\nconsole.log(closest_integer(\"15.3\"));   // Output: 15\nconsole.log(closest_integer(\"14.5\"));   // Output: 15\nconsole.log(closest_integer(\"-14.5\"));  // Output: -15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const result = [];\n    let numStones = n;\n\n    for (let i = 0; i < n; i++) {\n        result.push(numStones);\n        numStones += (n % 2 === 0 ? 2 : 1);\n    }\n\n    return result;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "return s.split(/[\\s,]+/);\n}"}
{"task_id": "typescript/45", "language": "typescript", "completion": "let maxEven = -1;\n   for (let i = x; i <= y; i++) {\n       if (i % 2 === 0 && i > maxEven) {\n           maxEven = i;\n       }\n   }\n   return maxEven;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "if (n > m) return -1;\n\n   const sum = ((m - n + 1) * (n + m)) / 2;\n   const average = Math.round(sum / (m - n + 1));\n\n   return `0b${average.toString(2)}`;\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "let result: number[] = [];\n\n   for (let i = 1; i <= n; i++) {\n     if (i % 2 === 0) {\n       // Calculate the factorial of i\n       let fact = 1;\n       for (let j = 2; j <= i; j++) {\n         fact *= j;\n       }\n       result.push(fact);\n     } else {\n       // Calculate the sum of numbers from 1 to i\n       let sum = 0;\n       for (let j = 1; j <= i; j++) {\n         sum += j;\n       }\n       result.push(sum);\n     }\n   }\n\n   return result;\n };"}
{"task_id": "typescript/48", "language": "typescript", "completion": "let countEven = 0;\n    let countOdd = 0;\n\n    for(let i=1; i<=n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n\n    return [countEven, countOdd];\n};\n\nconst isPalindrome = function (x: number) : boolean {\n    let reverse = parseInt(x.toString().split('').reverse().join(''));\n    return x === reverse;\n}\n\n// Testing the code with given test cases\nconsole.log(even_odd_palindrome(3));  // Expected output: [1, 2]\nconsole.log(even_odd_palindrome(12));  // Expected output: [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "// If the length of the array is less than or equal to 1, return true\n    if (arr.length <= 1) {\n        return true;\n    }\n\n    // Initialize a variable to keep track of the number of decreases in the array\n    let decreaseCount = 0;\n\n    // Loop through the array\n    for (let i = 1; i < arr.length; i++) {\n        // If we find a decrease, increment the decrease count\n        if (arr[i] < arr[i - 1]) {\n            decreaseCount++;\n        }\n\n        // If there are more than one decreases, return false\n        if (decreaseCount > 1) {\n            return false;\n        }\n    }\n\n    // Check for the special case where the last element is smaller than the first element\n    if (arr[0] < arr[arr.length - 1]) {\n        decreaseCount++;\n    }\n\n    // If there are no decreases or exactly one decrease, return true\n    return decreaseCount <= 1;\n}"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const oddsInLst1 = lst1.filter(num => num % 2 !== 0);\n  const evensInLst2 = lst2.filter(num => num % 2 === 0);\n\n  if (oddsInLst1.length <= evensInLst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "typescript/51", "language": "typescript", "completion": "let newStr = '';\n    for(let i = 0; i < s.length; i++) {\n      if(!c.includes(s[i])) {\n        newStr += s[i];\n      }\n    }\n\n    const reversedStr = newStr.split('').reverse().join('');\n    return [newStr, newStr === reversedStr];\n}"}
{"task_id": "typescript/52", "language": "typescript", "completion": "let bucketSize = 0; // current size of the bucket\n  let operations = 0; // total number of operations\n\n  for (let j = 0; j < grid[0].length; j++) { // iterate through columns\n    let maxWellDepth = 0; // maximum depth of a well in this column\n\n    for (let i = 0; i < grid.length; i++) { // find the deepest well in this column\n      if (grid[i][j] === 1) {\n        maxWellDepth = Math.max(maxWellDepth, i + 1);\n      }\n    }\n\n    while (maxWellDepth > 0) { // while there is still water to extract in this column\n      if (bucketSize === 0) { // if the bucket is empty, fill it up to its capacity\n        bucketSize = Math.min(capacity, maxWellDepth);\n        operations++;\n      }\n\n      let wellDepth = Math.min(maxWellDepth, bucketSize); // depth of water in the current well\n      maxWellDepth -= wellDepth; // extract water from this well\n      bucketSize -= wellDepth; // decrease the amount of water in the bucket\n    }\n  }\n\n  return operations;\n}"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return s.split(' ').filter(word => {\n    let consonantCount = 0;\n    for (let char of word) {\n      if (!vowels.includes(char.toLowerCase())) {\n        consonantCount++;\n      }\n    }\n    return consonantCount === n;\n  });\n}"}
{"task_id": "typescript/54", "language": "typescript", "completion": "// sort array in ascending order\n  arr.sort((a, b) => a - b);\n\n  // return last 'k' elements of the sorted array as they are the maximum ones\n  return arr.slice(-k);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "let sum = 0;\n\n   for (let i = 0; i < k; i++) {\n       if (Math.abs(arr[i]) < 100) {\n           sum += arr[i];\n       }\n   }\n\n   return sum;\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) return \"NO\";\n\n    const length = end - start;\n\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n        if (length % i === 0) return \"NO\";\n    }\n\n    return length > 1 ? \"YES\" : \"NO\";\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "let result = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 1) {\n      result.push(3);\n    } else if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      let val = result[i - 1] + result[i - 2] + (result[i + 1] ? result[i + 1] : 3);\n      result.push(val);\n    }\n  }\n  return result;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "let product = 1;\n  let hasOddDigit = false;\n\n  while (n > 0) {\n    const digit = n % 10;\n\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOddDigit = true;\n    }\n\n    n = Math.floor(n / 10);\n  }\n\n  return hasOddDigit ? product : 0;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "let openBrackets = 0;\n   let nestedBrackets = 0;\n\n   for(let i=0; i<string0.length; i++) {\n     if(string0[i] === '[') {\n       openBrackets++;\n     } else if(string0[i] === ']') {\n       if(openBrackets > 0) {\n         nestedBrackets = Math.max(nestedBrackets, --openBrackets);\n       } else {\n         return false;\n       }\n     }\n   }\n\n   return nestedBrackets > 0 && openBrackets === 0;\n };"}
{"task_id": "typescript/60", "language": "typescript", "completion": "// Map each element to its ceil value and square it\n  const squaredCeiledNumbers = lst.map(num => Math.ceil(num) ** 2);\n\n  // Use math.sum to calculate the sum of the array elements\n  return math.sum(squaredCeiledNumbers);\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "return /\\s[a-zA-Z]$/.test(txt);\n}"}
{"task_id": "typescript/62", "language": "typescript", "completion": "for (let i = arr.length - 1; i > 0; i--) {\n     if (arr[i] < arr[i - 1]) return i;\n   }\n   return -1;\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const positiveNumbers = lst.filter(num => num > 0).sort((a, b) => a - b);\n  const negativeNumbers = lst.filter(num => num < 0).sort((a, b) => b - a);\n\n  return [\n    negativeNumbers[0] !== undefined ? negativeNumbers[0] : null,\n    positiveNumbers[0] !== undefined ? positiveNumbers[0] : null\n  ];\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "let result = 1;\n\n    for(let i=2;i<=n;i++){\n        let factorial=1;\n        for(let j=2;j<=i;j++)\n            factorial*=j;\n        result *= factorial;\n    }\n    return result;\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = num => {\n        for (let i = 2; i < Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return num > 1;\n    };\n\n    return sentence.split(' ').filter(word => isPrime(word.length)).join(' ');\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const xArray = x.split('/').map(Number);\n    const nArray = n.split('/').map(Number);\n\n    return (xArray[0] * nArray[0]) % (xArray[1] * nArray[1]) === 0;\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const sumOfDigits = (n: number): number => {\n        return n.toString().split('').reduce((sum, digit) => sum + Number(digit), 0);\n    }\n\n    return nums.slice().sort((a, b) => {\n        const diff = sumOfDigits(a) - sumOfDigits(b);\n        if (diff === 0) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        } else {\n            return diff;\n        }\n    });\n}"}
{"task_id": "typescript/68", "language": "typescript", "completion": "let count = 0;\n   for(let num of nums) {\n       if(num > 10) {\n           const firstDigit = Math.abs(num).toString()[0];\n           const lastDigit = Math.abs(num).toString().slice(-1);\n           if(['1', '3', '5', '7', '9'].includes(firstDigit) && ['1', '3', '5', '7', '9'].includes(lastDigit)) {\n               count++;\n           }\n       }\n   }\n   return count;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const a = Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n   let index1 = solarSystem.indexOf(planet1);\n   let index2 = solarSystem.indexOf(planet2);\n\n   if (index1 === -1 || index2 === -1) {\n     return [];\n   }\n\n   if (index1 > index2) {\n     [index1, index2] = [index2, index1];\n   }\n\n   return solarSystem.slice(index1 + 1, index2);\n };"}
{"task_id": "typescript/71", "language": "typescript", "completion": "// Function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        for(let i = 2; i < num; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n    // If n is a prime, return x, otherwise y\n    return isPrime(n) ? x : y;\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "let sum = 0;\n   for(let num of lst) {\n     if(Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n       sum += Math.pow(num, 2);\n     }\n   }\n   return sum;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "let strongestExtension: string | null = null;\n   let maxStrength: number = Number.NEGATIVE_INFINITY;\n\n   for (let ext of extensions) {\n       const cap: number = ext.split('').filter(c => c === c.toUpperCase() && isNaN(parseInt(c))).length;\n       const sm: number = ext.split('').filter(c => c === c.toLowerCase() && isNaN(parseInt(c))).length;\n       const strength: number = cap - sm;\n\n       if (strength > maxStrength) {\n           maxStrength = strength;\n           strongestExtension = ext;\n       }\n   }\n\n   return `${class_name}.${strongestExtension}`;\n}"}
{"task_id": "typescript/74", "language": "typescript", "completion": "if(b.length > a.length){\n        return false;\n    }\n    const concatenatedA = a + a; // To handle rotations\n    for(let i=0; i<a.length; i++){\n        if(concatenatedA.substring(i, i+b.length) === b){\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const romanNumerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n   const decimalValues = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\n   let result = '';\n\n   for (let i = 0; i < decimalValues.length; i++) {\n       while (number0 >= decimalValues[i]) {\n           result += romanNumerals[i];\n           number0 -= decimalValues[i];\n       }\n   }\n\n   return result;\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const sides = [a, b, c].sort((x, y) => x - y); // sorting in ascending order\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "let hasLetter = false;\n  let reversedString = '';\n\n  for (let i = 0; i < s.length; i++) {\n    const charCode = s.charCodeAt(i);\n\n    if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) { // ASCII values for uppercase and lowercase letters\n      hasLetter = true;\n      reversedString += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      reversedString += s[i];\n    }\n  }\n\n  if (!hasLetter) {\n    return reversedString.split('').reverse().join('');\n  }\n\n  return reversedString;\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "if(text === ''){\n    return null;\n  } else {\n    const md5 = require('md5');\n    return md5(text);\n  }\n}"}
{"task_id": "typescript/79", "language": "typescript", "completion": "// Swap a and b if a > b.\n    if (a > b) [a, b] = [b, a];\n\n    const result: Array<number> = [];\n    for(let i = a; i <= b; i++) {\n        // Check if the last digit of number is even.\n        if((i % 10) % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};"}

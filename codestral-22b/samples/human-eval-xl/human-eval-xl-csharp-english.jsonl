{"task_id": "csharp/0", "language": "csharp", "completion": "int balance = 0;\n    foreach(int operation in operations)\n    {\n      balance += operation;\n      if(balance < 0)\n        return true;\n    }\n    return false;\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "int sum = numbers.Sum();\n    int product = numbers.Aggregate(1, (a, b) => a * b);\n    return new List<int>() { sum, product };\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(\"Enter space-separated integers:\");\n    var input = Console.ReadLine();\n    var numbers = Regex.Matches(input, @\"\\d+\").Select(m => int.Parse(m.Value)).ToList();\n    var result = SumProduct(numbers);\n    Console.WriteLine($\"Sum: {result[0]}, Product: {result[1]}\");\n}\n    }"}
{"task_id": "csharp/2", "language": "csharp", "completion": "// Initialize an empty string to store the result\n    string result = \"\";\n\n    // Perform binary XOR on each pair of corresponding characters in the input strings\n    for (int i = 0; i < a.Length; i++)\n    {\n        // If the characters are different, append '1' to the result\n        if (a[i] != b[i])\n        {\n            result += \"1\";\n        }\n        // If the characters are the same, append '0' to the result\n        else\n        {\n            result += \"0\";\n        }\n    }\n\n    // Return the resulting string\n    return result;\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StringXor(\"101\", \"011\"));  // Output: \"110\"\n            Console.ReadKey();\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "if (!strings.Any()) return null;\n    var longest = strings[0];\n    foreach(var s in strings){\n      if(s.Length > longest.Length) longest = s;\n    }\n    return longest;\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "C#\npublic static int GreatestCommonDivisor(int a, int b)\n{\n    while (b != 0)\n    {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return Math.Abs(a); // In case of negative input numbers\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "Dictionary<string, int> numberDictionary = new Dictionary<string, int>()\n        {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n            {\"nine\", 9}\n        };\n\n        var numberList = numbers.Split(' ').Select(num => numberDictionary[num]).ToList();\n        numberList.Sort();\n\n        return string.Join(\" \", numberList.Select(num => numberDictionary.FirstOrDefault(x => x.Value == num).Key));\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(SortNumbers(\"three one five\"));\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "double minValue = numbers.Min();\n    double maxValue = numbers.Max();\n    return numbers.Select(number => (number - minValue) / (maxValue - minValue)).ToList();\n}\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "char[] chars = string0.ToCharArray();\n\n    for (int i = 0; i < chars.Length; i++)\n    {\n        if (char.IsUpper(chars[i]))\n            chars[i] = char.ToLower(chars[i]);\n        else if (char.IsLower(chars[i]))\n            chars[i] = char.ToUpper(chars[i]);\n    }\n\n    return new string(chars);\n}\n\n        public static void Main ()  // For testing\n        {\n            Console.WriteLine(FlipCase(\"Hello\"));  // hELLO\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "// Initialize an empty list to store the positive numbers.\n    var positiveNumbers = new List<int>();\n\n    // Loop through each number in the input list.\n    foreach (var num in l)\n    {\n        // If the number is greater than zero, add it to the list of positive numbers.\n        if (num > 0)\n            positiveNumbers.Add(num);\n    }\n\n    // Return the list of positive numbers.\n    return positiveNumbers;\n}\n    }"}
{"task_id": "csharp/9", "language": "csharp", "completion": "if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i += 6;\n    }\n\n    return true;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(IsPrime(6)); // False\n    Console.WriteLine(IsPrime(101)); // True\n    Console.WriteLine(IsPrime(11)); // True\n    Console.WriteLine(IsPrime(13441)); // False\n    Console.WriteLine(IsPrime(61)); // True\n    Console.WriteLine(IsPrime(4)); // False\n    Console.WriteLine(IsPrime(1)); // False\n}\n    }"}
{"task_id": "csharp/10", "language": "csharp", "completion": "// Use the Distinct() method of LINQ to get unique elements and then use OrderBy() to sort them.\n    return l.Distinct().OrderBy(x => x).ToList();\n}\n\npublic static void Main (string [] args)\n{\n    List<int> list = new List<int>{5, 3, 5, 2, 3, 3, 9, 0, 123};\n    List<int> result = Unique(list);\n\n    foreach (var item in result)\n        Console.WriteLine(item);\n}\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (number % i == 0)\n                return false;\n\n        return true;\n    }\n\n    private static IEnumerable<int> FibonacciNumbers()\n    {\n        int a = 0, b = 1;\n\n        while (true)\n        {\n            yield return b;\n            var temp = a + b;\n            a = b;\n            b = temp;\n        }\n    }\n\n    public static int PrimeFib(int n)\n    {\n        if (n < 1) throw new ArgumentException(\"The input number should be greater than or equal to 1\");\n\n        return FibonacciNumbers()\n                       .Where(IsPrime)\n                       .Take(n)\n                       .Last();\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "public static bool TriplesSumToZero(List<int> list)\n{\n    if (list.Count < 3) return false;\n\n    HashSet<int> hashSet = new HashSet<int>();\n\n    for (int i = 0; i < list.Count - 1; i++)\n    {\n        for (int j = i + 1; j < list.Count; j++)\n        {\n            int sum = list[i] + list[j];\n\n            if (!hashSet.Contains(-sum))\n            {\n                hashSet.Add(list[i]);\n                hashSet.Add(list[j]);\n            }\n            else\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "for(int i = 0; i < l.Count; i++)\n    {\n      for(int j = i + 1; j < l.Count; j++)\n      {\n        if((l[i] + l[j]) == 0)\n        {\n          return true;\n        }\n      }\n    }\n    return false;\n}\n\nstatic void Main(){}\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "if (n <= 1) return 0;\n   else if (n == 2) return 2;\n   else if (n == 3) return 0;\n\n   int[] fib = new int[n + 1];\n   fib[0] = 0;\n   fib[1] = 0;\n   fib[2] = 2;\n   fib[3] = 0;\n\n   for (int i = 4; i <= n; i++) {\n       fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n   }\n\n   return fib[n];\n}\n        public static void Main()\n        {\n            Console.WriteLine(Fib4(5));\n            Console.WriteLine(Fib4(6));\n            Console.WriteLine(Fib4(7));\n            Console.ReadLine();\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "if (l == null || l.Count == 0)\n    {\n        throw new ArgumentException(\"The list is empty or null.\");\n    }\n\n    var sortedList = l.OrderBy(x => x).ToList();\n    int count = sortedList.Count;\n\n    if (count % 2 == 1)\n    {\n        return sortedList[count / 2];\n    }\n    else\n    {\n        return (sortedList[count / 2 - 1] + sortedList[count / 2]) / 2.0;\n    }\n}\n    }"}
{"task_id": "csharp/16", "language": "csharp", "completion": "// Check if the string is empty or has only one character, which are considered palindromes\n    if (text.Length <= 1)\n    {\n        return true;\n    }\n\n    // Remove all non-alphanumeric characters from the text and convert it to lowercase\n    var cleanedText = new string(text.Where(char.IsLetterOrDigit).Select(char.ToLower).ToArray());\n\n    // Reverse the cleaned text\n    var reversedText = new string(cleanedText.Reverse().ToArray());\n\n    // Compare the cleaned text with its reverse to check if it's a palindrome\n    return cleanedText == reversedText;\n}\n\n        public static void Main ()\n        {\n            Console.WriteLine (IsPalindrome (\"aba\")); // should print \"True\"\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "public static string RemoveVowels(string text)\n{\n    if (String.IsNullOrEmpty(text))\n        return String.Empty;\n\n    // Using Regex to remove all vowels from the input string\n    var result = Regex.Replace(text, \"[aeiouAEIOU]\", \"\");\n\n    return result;\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "return l.All(x => x < t);\n}\n\n        // Test function\n        private static void Test(IEnumerable<bool> expectedResults)\n        {\n            var testCases = new[]\n            {\n                new Tuple<List<int>, int>(new List<int>{1, 2, 4, 10}, 100),\n                new Tuple<List<int>, int>(new List<int>{1, 20, 4, 10}, 5)\n            };\n\n            var results = testCases.Select(testCase => BelowThreshold(testCase.Item1, testCase.Item2));\n\n            if (expectedResults.SequenceEqual(results)) { Console.WriteLine(\"Test passed.\"); }\n            else { Console.Error.WriteLine(\"Test failed.\"); }\n        }\n\n        private static void Main()\n        {\n            Test(new[] { true, false }); // Expected results\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "return x + y;\n}\n    }"}
{"task_id": "csharp/20", "language": "csharp", "completion": "// Convert the strings to arrays of characters\n        char[] arrS0 = s0.ToCharArray();\n        char[] arrS1 = s1.ToCharArray();\n\n    // Sort the arrays of characters\n        Array.Sort(arrS0);\n        Array.Sort(arrS1);\n\n    // Join the sorted arrays back into strings\n        string sortedS0 = new string(arrS0);\n        string sortedS1 = new string(arrS1);\n\n    // Compare the sorted strings for equality\n        return sortedS0 == sortedS1;\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "if (n <= 0)\n        throw new ArgumentException(\"Input must be a positive integer.\");\n    else if (n == 1)\n        return 0;\n    else if (n == 2 || n == 3)\n        return 1;\n    else\n    {\n        int prevPrev = 0, prev = 1, current = 1;\n        for (int i = 4; i <= n; i++)\n        {\n            current = prev + prevPrev;\n            prevPrev = prev;\n            prev = current;\n        }\n        return current;\n    }\n}\n    }"}
{"task_id": "csharp/22", "language": "csharp", "completion": "var commonElements = l1.Intersect(l2).ToList();\n    commonElements.Sort();\n    return commonElements;\n}\n\npublic static void Main(string[] args)\n{\n    var list1 = new List<int> { 1, 4, 3, 34, 653, 2, 5 };\n    var list2 = new List<int> { 5, 7, 1, 5, 9, 653, 121 };\n    var result = Common(list1, list2);\n    Console.WriteLine(\"Common elements: \" + string.Join(\", \", result));\n}\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "// Start by dividing the input number by 2 until it's no longer divisible, to account for factors of 2\n    while (n % 2 == 0)\n    {\n        n = n / 2;\n    }\n\n    // At this point, n must be odd. So we can skip one element (Note i = i + 2)\n    int maxPrimeFactor = -1;\n    while (n % 2 != 0 && n > 1)\n    {\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n        {\n            // While the input number is divisible by i, divide it and update the max prime factor\n            while (n % i == 0)\n            {\n                n = n / i;\n                maxPrimeFactor = i;\n            }\n        }\n    }\n\n    // If n has no factors greater than 2, then n is a prime number and is the largest prime factor\n    if (n > 2)\n    {\n        maxPrimeFactor = n;\n    }\n\n    return maxPrimeFactor;\n}\n\n        public static void Main(string[] args)\n        {\n            var solution = new Program();\n            int result1 = LargestPrimeFactor(13195);\n            int result2 = LargestPrimeFactor(2048);\n            Console.WriteLine($\"Largest prime factor of 13195 is: {result1}\"); // Expected output: 29\n            Console.WriteLine($\"Largest prime factor of 2048 is: {result2}\");   // Expected output: 2\n        }\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be a positive integer.\");\n    }\n\n    return Enumerable.Range(1, n).Sum();\n}\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "if (xs == null || !xs.Any())\n    {\n        return new List<int>();\n    }\n\n    var result = new List<int>();\n\n    for (var i = 1; i < xs.Count; i++)\n    {\n        result.Add(i * xs[i]);\n    }\n\n    return result;\n}\n\n        public static void Main()\n        {\n            CompareLogic();\n        }\n\n        private static bool compare(object actual, object expected)\n        {\n            var comparer = new CompareLogic();\n            comparer.Config.MaxDifferences = 50;\n            comparer.Config.IgnoreCollectionOrder = false;\n            return comparer.Compare(actual, expected).AreEqual;\n        }\n\n        private static void CompareLogic()\n        {\n            List<object> _input1 = new List<object>()\n            {\n                (new List<int>(){3,1,2,4,5}),\n            };\n            List<object> _output1 = new List<object>()\n            {\n                (new List<int>(){1,4,12,20}),\n            };\n            var result1 = true;\n            for(var i=0;i<_input1.Count();i++)\n                if(!compare(Derivative((List<int>)_input1[i]), (List<int>)_output1[i])){result1=false;break;}\n\n            List<object> _input2 = new List<object>()\n            {\n                (new List<int>(){1,2,3}),\n            };\n            List<object> _output2 = new List<object>()\n            {\n                (new List<int>(){2,6}),\n            };\n            var result2 = true;\n            for(var i=0;i<_input2.Count();i++)\n                if(!compare(Derivative((List<int>)_input2[i]), (List<int>)_output2[i])){result2=false;break;}\n\n            Console.WriteLine(\"{0}\\n{1}\", result1 ? \"Test Passed\" : \"Test Failed\", result2 ? \"Test Passed\" : \"Test Failed\");\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "if (n == 0 || n == 1)\n        return 0;\n    else if (n == 2)\n        return 1;\n\n    var fib = new int[n + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n\n    for (int i = 3; i <= n; i++)\n    {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n\n    return fib[n];\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(Fibfib(1)); // Output: 0\n    Console.WriteLine(Fibfib(5)); // Output: 4\n    Console.WriteLine(Fibfib(8)); // Output: 24\n}\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "if(String.IsNullOrEmpty(s)) return 0; // check if the input string is empty or null\n\n    // convert the string to lower case for simplicity\n    s = s.ToLower();\n\n    // initialize a counter for vowels\n    int count = 0;\n\n    // iterate through each character in the string\n    for(int i=0; i<s.Length; i++) {\n        char c = s[i];\n\n        // check if the character is a vowel\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++; // increment the counter if it is a vowel\n        } else if(c == 'y' && i == s.Length - 1) {\n            // check for special case when 'y' is at the end of the string\n            count++; // increment the counter in this case as well\n        }\n    }\n\n    return count; // return the total number of vowels\n}\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "if(lst == null || lst.Count == 0){\n            return -1;\n        }\n\n        Dictionary<int, int> count = new Dictionary<int, int>();\n        foreach (var item in lst)\n        {\n            if (count.ContainsKey(item))\n                count[item]++;\n            else\n                count[item] = 1;\n        }\n\n        for (int i = lst.Max(); i > 0; i--)\n        {\n            if (count.ContainsKey(i) && count[i] >= i)\n                return i;\n        }\n\n        return -1;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // 2\n        Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // 3\n        Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // -1\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "if ((a + b > c) && (b + c > a) && (c + a > b))\n    {\n        double s = (a + b + c) / 2.0;\n        return Math.Round(Math.Sqrt(s * (s - a) * (s - b) * (s - c)), 2);\n    }\n    else\n    {\n        return -1;\n    }\n}\n\nprivate static bool AreEqual(object actual, object expected)\n{\n    var compareLogic = new CompareLogic();\n    var result = compareLogic.Compare(expected, actual);\n    if (!result.AreEqual)\n    {\n        Console.WriteLine($\"not equal: {string.Join(\", \", result.Differences)}\");\n    }\n\n    return result.AreEqual;\n}\n\nprivate static bool AreEqual(double[] actual, double[] expected, double precision = 0.0001)\n{\n    if (actual == null || expected == null || actual.Length != expected.Length)\n        return false;\n\n    for (int i = 0; i < actual.Length; i++)\n    {\n        if (Math.Abs(actual[i] - expected[i]) > precision)\n            return false;\n    }\n\n    return true;\n}\n\nprivate static void Test()\n{\n    Assert(AreEqual(TriangleArea(3, 4, 5), 6.0));\n    Assert(AreEqual(TriangleArea(1, 2, 10), -1));\n    Assert(AreEqual(TriangleArea(9, 7, 8), 30.37));\n}\n\nprivate static void Main()\n{\n    Test();\n    Console.ReadKey();\n}\n\nprivate static void Assert(bool condition)\n{\n    if (!condition) throw new ApplicationException(\"Assertion failed\");\n}\n\nprivate class CompareLogic : ComparisonLogic\n{\n    public CompareLogic()\n    {\n        Config.MaxDifferences = 10;\n        Config.IgnoreObjectTypes = new Type[]\n        {\n            typeof(Decimal),\n            typeof(Double),\n            typeof(Single)\n        };\n        Config.CustomComparers.Add(new CustomComparer<double>((x, y) => Math.Abs(x - y) < 0.0001));\n    }\n}\n\nprivate class CustomComparer<T> : IEqualityComparer<T>\n{\n    private Func<T, T, bool> _comparer;\n\n    public CustomComparer(Func<T, T, bool> comparer)\n    {\n        _comparer = comparer;\n    }\n\n    public bool Equals(T x, T y) => _comparer(x, y);\n\n    public int GetHashCode(T obj) => obj.GetHashCode();\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "// Check if the list is a palindrome\n    bool isBalanced = q.SequenceEqual(q.AsEnumerable().Reverse());\n\n    // Calculate the sum of the elements in the list\n    int sum = q.Sum();\n\n    // Return true if the list is balanced and the sum is less than or equal to w\n    return isBalanced && sum <= w;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(WillItFly(new List<int>(){1, 2}, 5)); // False\n            Console.WriteLine(WillItFly(new List<int>(){3, 2, 3}, 1)); // False\n            Console.WriteLine(WillItFly(new List<int>(){3, 2, 3}, 9)); // True\n            Console.WriteLine(WillItFly(new List<int>(){3}, 5)); // True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "List<int> primeNumbers = GetPrimeNumbersUpTo(a);\n\n    // Iterate through all combinations of three distinct prime numbers less than or equal to 'a'\n    for (int i = 0; i < primeNumbers.Count - 2; i++) {\n        for (int j = i + 1; j < primeNumbers.Count - 1; j++) {\n            for (int k = j + 1; k < primeNumbers.Count; k++) {\n                if (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // If no three prime numbers were found that multiply to 'a', return false\n    return false;\n}\n\n// Helper function to generate all prime numbers less than or equal to a given number\nprivate static List<int> GetPrimeNumbersUpTo(int n) {\n    var primes = new List<int>();\n    for (int i = 2; i <= n; i++) {\n        if (IsPrime(i)) {\n            primes.Add(i);\n        }\n    }\n    return primes;\n}\n\n// Helper function to check if a number is prime\nprivate static bool IsPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    var boundary = (int)Math.Floor(Math.Sqrt(num));\n    for (int i = 3; i <= boundary; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "return $\"db{Convert.ToString(decimal, 2)}db\";\n}\n    }\n\n    [TestFixture]\n    public class Tests\n    {\n        private static IEnumerable<TestCaseData> testCases\n        {\n            get\n            {\n                yield return new TestCaseData(1).Returns(\"db1db\");\n                yield return new TestCaseData(2).Returns(\"db10db\");\n                yield return new TestCaseData(3).Returns(\"db11db\");\n                yield return new TestCaseData(5).Returns(\"db101db\");\n                yield return new TestCaseData(8).Returns(\"db1000db\");\n            }\n        }\n\n        [Test, TestCaseSource(\"testCases\")]\n        public string DecimalToBinary_ShouldReturnCorrectBinaryString(int n) => Program.DecimalToBinary(n);\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "if (s.Length < 3)\n            return false;\n\n        for (int i = 0; i <= s.Length - 3; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n\n        return true;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(IsHappy(\"a\"));         // False\n        Console.WriteLine(IsHappy(\"aa\"));        // False\n        Console.WriteLine(IsHappy(\"abcd\"));      // True\n        Console.WriteLine(IsHappy(\"aabb\"));      // False\n        Console.WriteLine(IsHappy(\"adb\"));       // True\n        Console.WriteLine(IsHappy(\"xyy\"));       // False\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "//Create a list to store the letter grades\n    var letterGrades = new List<string>();\n\n    //Iterate over each grade in the input list\n    foreach(var grade in grades)\n    {\n        //Check if the grade is of type double and then check against the given conditions to determine the letter grade\n        if (grade is double gpa)\n        {\n            if (gpa >= 3.7 && gpa <= 4.0)\n                letterGrades.Add(\"A\");\n            else if (gpa > 3.3 && gpa < 3.7)\n                letterGrades.Add(\"A-\");\n            else if (gpa > 3.0 && gpa <= 3.3)\n                letterGrades.Add(\"B+\");\n            else if (gpa > 2.7 && gpa <= 3.0)\n                letterGrades.Add(\"B\");\n            else if (gpa > 2.3 && gpa <= 2.7)\n                letterGrades.Add(\"B-\");\n            else if (gpa > 2.0 && gpa <= 2.3)\n                letterGrades.Add(\"C+\");\n            else if (gpa > 1.7 && gpa <= 2.0)\n                letterGrades.Add(\"C\");\n            else if (gpa > 1.3 && gpa <= 1.7)\n                letterGrades.Add(\"C-\");\n            else if (gpa > 1.0 && gpa <= 1.3)\n                letterGrades.Add(\"D+\");\n            else if (gpa > 0.7 && gpa <= 1.0)\n                letterGrades.Add(\"D\");\n            else if (gpa >= 0.0 && gpa <= 0.7)\n                letterGrades.Add(\"D-\");\n            else\n                letterGrades.Add(\"E\");\n        }\n    }\n\n    //Return the list of letter grades\n    return letterGrades;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(string.Join(\", \", NumericalLetterGrade(new List<object> { 4.0, 3.7, 3.3, 2.1, 1.8, 1.5, 1.2, 1.0, 0.7, 0.6, 0.0 })));\n}\n    }"}
{"task_id": "csharp/35", "language": "csharp", "completion": "if(string.IsNullOrEmpty(string0)) return false; // An empty or null string does not have a prime length\n\n    int stringLength = string0.Length;\n\n    if(stringLength < 2) return false; // 1 is not a prime number\n\n    for(int i = 2; i <= Math.Sqrt(stringLength); i++)\n        {\n            if (stringLength % i == 0) return false;\n        }\n\n    return true;\n}\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "// Convert the integer to its binary representation\n    string binary = Convert.ToString(N, 2);\n\n    // Sum up the digits in the binary representation\n    int sum = binary.Sum(c => c - '0');\n\n    // Convert the sum to its binary representation and return it\n    return Convert.ToString(sum, 2);\n}\n\n        public static void Main (string[] args)\n        {\n            Console.WriteLine(Solve(150));\n            Console.ReadKey();\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n    {\n        var result = new List<Tuple<int, int>>();\n\n        for (int i = 0; i < lst.Count; i++)\n            for (int j = 0; j < lst[i].Count; j++)\n                if (lst[i][j] == x)\n                    result.Add(Tuple.Create(i, j));\n\n        return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "var sortedDistinctNumbers = lst.OrderBy(n => n).Distinct().ToList();\n    return sortedDistinctNumbers.Count < 2 ? null : (object)sortedDistinctNumbers[1];\n}\n    }"}
{"task_id": "csharp/39", "language": "csharp", "completion": "// Using Regex to split the string into sentences\n    string[] sentences = Regex.Split(S, @\"(?<=[\\.!\\?])\\s*\");\n\n    // Initialize a counter for boredoms\n    int count = 0;\n\n    // Loop through each sentence\n    foreach (string sentence in sentences)\n    {\n        // Check if the sentence starts with \"I\"\n        if (sentence.StartsWith(\"I\"))\n            count++;\n    }\n\n    // Return the number of boredoms\n    return count;\n}\n\n        public static void Main()\n        {\n          Console.WriteLine(IsBored(\"Hello world\")); // 0\n          Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n        }\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "var maxPrime = lst.Where(n => IsPrime(n)).DefaultIfEmpty(-1).Max();\n    return SumOfDigits(maxPrime);\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number < 2) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var squareRoot = (int)Math.Floor(Math.Sqrt(number));\n    for (var i = 3; i <= squareRoot; i += 2)\n        if (number % i == 0)\n            return false;\n\n    return true;\n}\n\nprivate static int SumOfDigits(int number)\n{\n    var sum = 0;\n    while (number > 0)\n    {\n        sum += number % 10;\n        number /= 10;\n    }\n\n    return sum;\n}\n    }"}
{"task_id": "csharp/41", "language": "csharp", "completion": "if (dict == null || !dict.Any()) // check if the dictionary is empty or null\n            return false;\n\n    var firstKey = dict.Keys.FirstOrDefault();\n    if (!(firstKey is string)) // check if the first key is a string\n        return false;\n\n    bool isUpperCase = ((string)firstKey).All(char.IsUpper); // check if all characters in the string are upper case\n    bool isLowerCase = ((string)firstKey).All(char.IsLower); // check if all characters in the string are lower case\n\n    return dict.Keys.All(key =>\n        {\n            var strKey = key as string;\n            return strKey != null && (isUpperCase ? strKey.All(char.IsUpper) : strKey.All(char.IsLower)); // check if all keys are either upper case or lower case\n        });\n    }\n\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "double num = Convert.ToDouble(value);\n   if (num >= 0)\n       return (int)(num + 0.5 * Math.Sign(num));\n   else\n       return (int)(num - 0.5 * Math.Sign(num));\n}\n    }\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "}\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "return Regex.Split(s, @\"\\s*,\\s*|\\s+\").ToList();\n    }\n\n    // Main function for testing and console output\n    public static void Main()\n    {\n        Console.WriteLine(\"Testing the WordsString function:\");\n\n        Test(\"Hi, my name is John\", new List<string> {\"Hi\", \"my\", \"name\", \"is\", \"John\"});\n        Test(\"One, two, three, four, five, six\", new List<string> {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"});\n    }\n\n    // Helper function to run the test cases and check for correctness\n    private static void Test(string input, List<string> expectedOutput)\n    {\n        var output = WordsString(input);\n\n        Console.WriteLine($\"Input: \\\"{input}\\\"\");\n\n        if (new CompareLogic().Compare(output, expectedOutput).AreEqual)\n            Console.WriteLine(\"Passed.\\n\");\n        else\n        {\n            Console.WriteLine(\"Failed.\");\n            Console.WriteLine($\"Expected output: [{string.Join(\", \", expectedOutput)}]\");\n            Console.WriteLine($\"Actual output:   [{string.Join(\", \", output)}]\\n\");\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "if (x > y)\n    {\n        return -1;\n    }\n    else if (y % 2 == 0)\n    {\n        return y;\n    }\n    else\n    {\n        int result = y - 1;\n        if (result >= x && result % 2 == 0)\n            return result;\n        else\n            return -1;\n    }\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n    Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n}\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "if (n > m)\n            return -1;\n\n        double average = Enumerable.Range(n, m - n + 1).Average();\n        int roundedAverage = Convert.ToInt32(Math.Round(average));\n        string binaryRepresentation = Convert.ToString(roundedAverage, 2);\n\n        return \"0b\" + binaryRepresentation;\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "{\n            var result = new List<int>();\n            for(var i=1; i<=n; i++)\n            {\n                if(i%2==0)\n                    result.Add(Factorial(i));\n                else\n                    result.Add(Sum(i));\n            }\n            return result;\n        }\n\n        private static int Factorial(int n)\n        {\n            var factorial = 1;\n            for (var i = 2; i <= n; i++)\n                factorial *= i;\n            return factorial;\n        }\n\n        private static int Sum(int n)\n        {\n            var sum = 0;\n            for (var i = 1; i <= n; i++)\n                sum += i;\n            return sum;\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "int evenCount = 0, oddCount = 0;\n    for(int i=1;i<=n;i++){\n        if(isPalindrome(i)){\n            if(i%2==0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return new List<int> {evenCount,oddCount};\n}\n\npublic static bool isPalindrome(int num){\n    string strNum = num.ToString();\n    int start=0, end = strNum.Length-1;\n    while(start<=end){\n        if(strNum[start] != strNum[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\n        public static void Main (string[] args) {\n          var result = EvenOddPalindrome (3);\n          Console.WriteLine(result[0] + \" \" + result[1]); // Output: 1 2\n        }\n      }\n    }"}
{"task_id": "csharp/49", "language": "csharp", "completion": "public static bool MoveOneBall(List<int> arr)\n{\n    if (arr.Count == 0 || arr.Count == 1)\n    {\n        return true;\n    }\n\n    List<int> sortedArr = new List<int>(arr);\n    sortedArr.Sort();\n\n    for (int i = 0; i < arr.Count; i++)\n    {\n        if (IsEqual(ShiftRight(arr, i), sortedArr))\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nprivate static List<int> ShiftRight(List<int> list, int shift)\n{\n    var result = new List<int>(list);\n\n    for (int i = 0; i < shift; i++)\n    {\n        result.Insert(0, result[result.Count - 1]);\n        result.RemoveAt(result.Count - 1);\n    }\n\n    return result;\n}\n\nprivate static bool IsEqual(List<int> list1, List<int> list2)\n{\n    if (list1.Count != list2.Count)\n    {\n        return false;\n    }\n\n    for (int i = 0; i < list1.Count; i++)\n    {\n        if (!list1[i].Equals(list2[i]))\n        {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "bool canExchange = true;\n    List<int> oddNumbersInLst1 = lst1.Where(n => n % 2 != 0).ToList();\n    List<int> evenNumbersInLst2 = lst2.Where(n => n % 2 == 0).ToList();\n\n    if (oddNumbersInLst1.Count > evenNumbersInLst2.Count)\n        canExchange = false;\n\n    return canExchange ? \"YES\" : \"NO\";\n}\n\npublic static void Main(string[] args)\n{\n    List<int> lst1 = new List<int> { 1, 2, 3, 4 };\n    List<int> lst2 = new List<int> { 1, 5, 3, 4 };\n    Console.WriteLine(Exchange(lst1, lst2)); // Output: NO\n}\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "// Remove all characters from s that are equal to any character in c\n    var filteredString = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n\n    // Check if the result string is a palindrome\n    bool isPalindrome = filteredString == new string(filteredString.Reverse().ToArray());\n\n    return new List<object> { filteredString, isPalindrome };\n}\n    }"}
{"task_id": "csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution\n{\n    public static int MaxFill(List<List<int>> grid, int capacity)\n    {\n        // Get the number of rows and columns in the grid\n        var rowCount = grid.Count;\n        if (rowCount == 0) return 0;\n        var colCount = grid[0].Count;\n\n        // Initialize a variable to store the total number of operations needed\n        var totalOperations = 0;\n\n        // Loop through each column in the grid\n        for (var colIndex = 0; colIndex < colCount; ++colIndex)\n        {\n            // Initialize a variable to store the current capacity of the bucket\n            var currentCapacity = capacity;\n\n            // Loop through each row in the grid, starting from the bottom and moving up\n            for (var rowIndex = rowCount - 1; rowIndex >= 0; --rowIndex)\n            {\n                // If the current cell contains water and the bucket has enough capacity to hold it\n                if (grid[rowIndex][colIndex] == 1 && currentCapacity > 0)\n                {\n                    // Decrease the capacity of the bucket by 1\n                    --currentCapacity;\n                }\n                // If the current cell contains water and the bucket is full\n                else if (grid[rowIndex][colIndex] == 1 && currentCapacity == 0)\n                {\n                    // Increase the total number of operations needed by the capacity of the bucket\n                    totalOperations += capacity;\n\n                    // Reset the capacity of the bucket to its maximum value\n                    currentCapacity = capacity - 1;\n                }\n            }\n\n            // If there is still water left in the bucket after processing all rows in the current column\n            if (currentCapacity < capacity)\n            {\n                // Increase the total number of operations needed by the remaining capacity of the bucket\n                totalOperations += capacity - currentCapacity;\n            }\n        }\n\n        // Return the total number of operations needed to empty all the wells\n        return totalOperations;\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "// Define the set of consonants for ease of use.\n    var consonants = new HashSet<char>(\"bcdfghjklmnpqrstvwxyz\".ToCharArray());\n\n    // Split the input string into words using whitespace as delimiter, then filter them based on the number of consonants.\n    return s.Split(' ')\n             .Where(word => word.Count(c => consonants.Contains(char.ToLower(c))) == n)\n             .ToList();\n        }\n\n        public static void Main()\n        {\n            var compareLogic = new CompareLogic();\n\n            var test1Result = SelectWords(\"Mary had a little lamb\", 4);\n            var test1Expected = new List<string> {\"little\"};\n            Console.WriteLine(compareLogic.Compare(test1Result, test1Expected));\n\n            var test2Result = SelectWords(\"Mary had a little lamb\", 3);\n            var test2Expected = new List<string> { \"Mary\", \"lamb\" };\n            Console.WriteLine(compareLogic.Compare(test2Result, test2Expected));\n\n            var test3Result = SelectWords(\"simple white space\", 2);\n            var test3Expected = new List<string> {};\n            Console.WriteLine(compareLogic.Compare(test3Result, test3Expected));\n\n            var test4Result = SelectWords(\"Hello world\", 4);\n            var test4Expected = new List<string> { \"world\" };\n            Console.WriteLine(compareLogic.Compare(test4Result, test4Expected));\n\n            var test5Result = SelectWords(\"Uncle sam\", 3);\n            var test5Expected = new List<string> { \"Uncle\" };\n            Console.WriteLine(compareLogic.Compare(test5Result, test5Expected));\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "// Sort the array in ascending order\n    arr.Sort();\n\n    // Take the last 'k' elements of the sorted array as they will be the maximum 'k' numbers\n    var maxKNumbers = arr.TakeLast(k).ToList();\n\n    return maxKNumbers;\n        }\n\n        public static void Main (string[] args)\n        {\n            RunTest (\"-3, -4, 5\", \"3\", \"-4,-3,5\");\n            RunTest (\"4, -4, 4\", \"2\", \"4,4\");\n            RunTest (\"-3, 2, 1, 2, -1, -2, 1\", \"1\", \"2\");\n        }\n\n        private static void RunTest (string arr, string kStr, string expectedOutput)\n        {\n            var testArr = ParseList (arr);\n            var k = int.Parse (kStr);\n            var expected = ParseList (expectedOutput);\n\n            Console.WriteLine ($\"Running Test: Maximum({arr}, {k})\");\n            var result = Maximum (testArr, k);\n\n            var comparisonResult = new CompareLogic ()\n                    .Compare (result, expected)\n                    .AreEqual;\n\n            if (!comparisonResult)\n                throw new InvalidOperationException ($\"Test Failed: Expected {expectedOutput}, but got {string.Join (\",\", result)}\");\n        }\n\n        private static List<int> ParseList (string input)\n        {\n            return Regex.Split (input, @\"\\s*,\\s*\")\n                .Select (x => int.Parse (x))\n                .ToList ();\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "if (arr == null || arr.Count < k)\n        {\n            throw new ArgumentException(\"Invalid input\");\n        }\n\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n    {\n        if (Math.Abs(arr[i]) < 100)\n        {\n            sum += arr[i];\n        }\n    }\n\n    return sum;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(\"Enter the elements of the array separated by space:\");\n    List<int> arr = Console.ReadLine().Split(' ').Select(Int32.Parse).ToList();\n\n    Console.WriteLine(\"Enter the value of k:\");\n    int k = Convert.ToInt32(Console.ReadLine());\n\n    int sum = AddElements(arr, k);\n    Console.WriteLine($\"The sum is: {sum}\");\n}\n   }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "bool IsPrime(int n)\n    {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++)\n            if (n % i == 0) return false;\n        return true;\n    }\n\n    int start = Math.Max(interval1[0], interval2[0]);\n    int end = Math.Min(interval1[1], interval2[1]);\n\n    if (start > end) // No intersection\n        return \"NO\";\n\n    int length = end - start;\n\n    if (IsPrime(length))\n        return \"YES\";\n    else\n        return \"NO\";\n}\n\n        public static void Main()\n        {\n            Test(new List<int> { 1, 2 }, new List<int> { 2, 3 }, \"NO\");\n            Test(new List<int> { -1, 1 }, new List<int> { 0, 4 }, \"NO\");\n            Test(new List<int> { -3, -1 }, new List<int> { -5, 5 }, \"YES\");\n        }\n\n        private static void Test(List<int> interval1, List<int> interval2, string expected)\n        {\n            var result = Intersection(interval1, interval2);\n            Console.WriteLine($\"Intersection({string.Join(\", \", interval1)}, {string.Join(\", \", interval2)}) => {result} (expected: {expected})\");\n            if (result != expected)\n                throw new Exception(\"Test failed.\");\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "public static List<object> Tribonacci(int n)\n{\n    if (n < 0) throw new ArgumentException(\"Input must be non-negative\");\n\n    var result = new List<object> {1, 3}; // Initialize the sequence with the first two elements\n\n    for (var i = 2; i <= n; i++) // Start from the third element and go up to the nth element\n    {\n        if (i % 2 == 0) // If the index is even, use the given formula\n            result.Add(1 + i / 2);\n        else // If the index is odd, use the recursive formula\n            result.Add(result[i - 1] + result[i - 2] + (n > i ? result[i + 1] : 3)); // The ternary operator is used to handle the case when i + 1 exceeds n\n    }\n\n    return result;\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be a positive integer.\");\n    }\n\n    var digits = GetDigits(n);\n    var oddDigits = digits.Where(d => d % 2 != 0);\n\n    if (!oddDigits.Any())\n    {\n        return 0;\n    }\n\n    return oddDigits.Aggregate((a, b) => a * b);\n}\n\nprivate static IEnumerable<int> GetDigits(int number)\n{\n    while (number > 0)\n    {\n        yield return number % 10;\n        number /= 10;\n    }\n}}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "// Iterate through the string starting from the second character\n    for(int i = 1; i < string0.Length - 1; i++)\n    {\n      // Check if there is a nested bracket sequence\n      if(string0[i] == '[' && string0[i-1] == '[') return true;\n      if(string0[i] == ']' && string0[i+1] == ']') return true;\n    }\n    // If no nested bracket sequence is found, return false\n    return false;\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "var sum = 0;\n    foreach(var num in lst){\n      switch(num){\n        case double d:\n          sum += (int)Math.Ceiling(d)*(int)Math.Ceiling(d);\n          break;\n        case int i:\n          sum += i*i;\n          break;\n        default:\n          throw new ArgumentException(\"Unsupported type in list\");\n      }\n    }\n    return sum;\n  }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "return !String.IsNullOrEmpty(txt) && Char.IsLetter(txt.Trim().Last()) && !Char.IsLetter(txt.Trim().ElementAt(txt.Trim().Length - 2));\n}\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "if (arr == null || arr.Count < 2)\n    {\n      return -1;\n    }\n\n    for (int i = arr.Count - 1; i > 0; i--)\n    {\n      if (arr[i] < arr[i - 1])\n      {\n        return i;\n      }\n    }\n\n    return -1;\n}\n\n        public static void Main(string[] args)\n        {\n            var result = CanArrange(new List<int> { 1, 2, 4, 3, 5 });\n            Console.WriteLine(result); // Output: 3\n\n            result = CanArrange(new List<int> { 1, 2, 3 });\n            Console.WriteLine(result); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class Program\n{\n    public static (object, object) LargestSmallestIntegers(List<int> lst)\n    {\n        var negatives = lst.Where(i => i < 0).OrderByDescending(i => i);\n        var positives = lst.Where(i => i > 0).OrderBy(i => i);\n\n        return (negatives.Any() ? (object)negatives.First() : null,\n                positives.Any() ? (object)positives.First() : null);\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "if(n < 0)\n            throw new ArgumentException(\"The input must be a non-negative integer\");\n\n    int result = 1;\n\n    for (int i = n; i > 0; i--)\n    {\n        int factorial = 1;\n        for (int j = i; j > 1; j--)\n            factorial *= j;\n\n        result *= factorial;\n    }\n\n    return result;\n}\n\n// Testing the function\nstatic void Main(string[] args)\n{\n    Console.WriteLine(\"SpecialFactorial(4) = \" + SpecialFactorial(4)); // Expected output: 288\n}\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "var compareLogic = new CompareLogic();\n    var words = sentence.Split(' ');\n    var primeWords = new List<string>();\n\n    foreach (var word in words)\n    {\n        if (IsPrime(word.Length))\n        {\n            primeWords.Add(word);\n        }\n    }\n\n    return string.Join(\" \", primeWords);\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n    for (var i = 3; i <= boundary; i += 2)\n        if (number % i == 0)\n            return false;\n\n    return true;\n}\n\n        public static void Main()\n        {\n            Test(\"This is a test\", \"is\");\n            Test(\"lets go for swimming\", \"go for\");\n        }\n\n        private static void Test(string input1, string expectedOutput)\n        {\n            var output = WordsInSentence(input1);\n            Console.WriteLine($\"Input: \\\"{input1}\\\"\\nOutput: \\\"{output}\\\"\\nExpected Output: \\\"{expectedOutput}\\\"\\nMatch: {output == expectedOutput}\");\n        }\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "// Split the fractions into their numerator and denominator components\n    var xParts = x.Split('/');\n    var nParts = n.Split('/');\n\n    int xNum = Int32.Parse(xParts[0]);\n    int xDen = Int32.Parse(xParts[1]);\n    int nNum = Int32.Parse(nParts[0]);\n    int nDen = Int32.Parse(nParts[1]);\n\n    // Multiply the numerators and denominators\n    var productNum = xNum * nNum;\n    var productDen = xDen * nDen;\n\n    // If the product of the numerators is divisible by the product of the denominators, then it's a whole number\n    return productNum % productDen == 0;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Should be True: \" + Simplify(\"1/5\", \"5/1\"));\n            Console.WriteLine(\"Should be False: \" + Simplify(\"1/6\", \"2/1\"));\n            Console.WriteLine(\"Should be False: \" + Simplify(\"7/10\", \"10/2\"));\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "var indexedNumbers = nums.Select((n, i) => new { Number = n, Index = i })\n                                    .OrderBy(x => x.Number < 0 ? -DigitSum(-x.Number) : DigitSum(x.Number))\n                                    .ThenBy(x => x.Index)\n                                    .ToList();\n        return indexedNumbers.Select(x => x.Number).ToList();\n    }\n\n    private static int DigitSum(int number)\n    {\n        var sum = 0;\n        while (number > 0)\n        {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "public static int SpecialFilter(List<int> nums)\n{\n    int count = 0;\n    foreach (var num in nums)\n    {\n        if (num > 10)\n        {\n            string strNum = Math.Abs(num).ToString(); // Convert number to absolute value and then to string\n            char firstDigit = strNum[0]; // Get the first digit of the number\n            char lastDigit = strNum[strNum.Length - 1]; // Get the last digit of the number\n            if (IsOdd(firstDigit) && IsOdd(lastDigit)) // Check if both digits are odd\n                count++; // Increment the count\n        }\n    }\n    return count;\n}\n\nprivate static bool IsOdd(char digit)\n{\n    int num = (int)Char.GetNumericValue(digit); // Convert character to integer\n    return num % 2 != 0; // Check if the number is odd\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "IList<int> a = new List<int>();\n    for(int i=1;i<=n;i++)\n    {\n      a.Add(i * i - i + 1);\n    }\n    int count = 0;\n    for(int i=0;i<n-2;i++)\n    {\n        for (int j=i+1;j<n-1;j++)\n        {\n            for (int k=j+1;k<n;k++)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n\nstatic void Main(string[] args)\n{\n    int n = 5; // for example\n    Console.WriteLine(GetMaxTriples(n)); // should print 1\n}\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "// define the solar system planets in order of proximity to the sun\n    var planets = new[] {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n    // check if the input planet names are valid\n    if (!planets.Contains(planet1) || !planets.Contains(planet2))\n        return new List<string>();\n\n    // get the indices of the two planets in the array\n    var index1 = Array.IndexOf(planets, planet1);\n    var index2 = Array.IndexOf(planets, planet2);\n\n    // swap the indices if necessary to ensure that index1 is smaller than index2\n    if (index1 > index2)\n        (index1, index2) = (index2, index1);\n\n    // return the planets between planet1 and planet2, sorted by proximity to the sun\n    return planets.Skip(index1 + 1).Take(index2 - index1 - 1).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "if (IsPrimeNumber(n))\n            return x;\n        else\n            return y;\n    }\n\n    private static bool IsPrimeNumber(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (number % i == 0)\n                return false;\n\n        return true;\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "public static int DoubleTheDifference(List<object> lst)\n{\n    if (lst == null || !lst.Any())\n        return 0;\n\n    var sum = 0;\n\n    foreach (var item in lst)\n    {\n        // Check if the item is an integer and it's positive and odd\n        if (item is int num && num > 0 && num % 2 != 0)\n        {\n            // Add the square of the number to the sum\n            sum += num * num;\n        }\n    }\n\n    return sum;\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "int maxStrength = int.MinValue;\n    string strongestExtension = null;\n\n    foreach (var extension in extensions)\n    {\n        int strength = Regex.Matches(extension, @\"[A-Z]\").Count - Regex.Matches(extension, @\"[a-z]\").Count;\n        if (strength > maxStrength)\n        {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return $\"{class_name}.{strongestExtension}\";\n}\n    }"}
{"task_id": "csharp/74", "language": "csharp", "completion": "public static bool CycpatternCheck(string a, string b)\n{\n    // Check if the second word is a substring in the first word\n    if (a.Contains(b))\n        return true;\n\n    // Generate all possible rotations of the second word\n    var rotatedStrings = GetRotations(b);\n\n    // Check if any rotation is a substring in the first word\n    foreach (var rotatedString in rotatedStrings)\n    {\n        if (a.Contains(rotatedString))\n            return true;\n    }\n\n    // No match found\n    return false;\n}\n\n// Helper method to generate all possible rotations of a string\nprivate static IEnumerable<string> GetRotations(string str)\n{\n    for (int i = 1; i < str.Length; i++)\n        yield return RotateString(str, i);\n}\n\n// Helper method to rotate a string by n positions\nprivate static string RotateString(string s, int n)\n{\n    return s.Substring(n) + s.Substring(0, n);\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"Number must be between 1 and 1000.\");\n\n        var romanNumerals = new List<Tuple<string, int>>\n        {\n            Tuple.Create(\"m\", 1000),\n            Tuple.Create(\"cm\", 900),\n            Tuple.Create(\"d\", 500),\n            Tuple.Create(\"cd\", 400),\n            Tuple.Create(\"c\", 100),\n            Tuple.Create(\"xc\", 90),\n            Tuple.Create(\"l\", 50),\n            Tuple.Create(\"xl\", 40),\n            Tuple.Create(\"x\", 10),\n            Tuple.Create(\"ix\", 9),\n            Tuple.Create(\"v\", 5),\n            Tuple.Create(\"iv\", 4),\n            Tuple.Create(\"i\", 1)\n        };\n\n        var result = string.Empty;\n        foreach (var numeral in romanNumerals)\n        {\n            while (number >= numeral.Item2)\n            {\n                result += numeral.Item1;\n                number -= numeral.Item2;\n            }\n        }\n\n        return result.ToLower();\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2) ||\n          Math.Pow(b, 2) + Math.Pow(c, 2) == Math.Pow(a, 2) ||\n          Math.Pow(c, 2) + Math.Pow(a, 2) == Math.Pow(b, 2);\n        }\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "if (string.IsNullOrWhiteSpace(s))\n    return s;\n\nvar hasLetter = false;\nvar result = new char[s.Length];\nfor (int i = 0; i < s.Length; i++)\n{\n    var c = s[i];\n    if (char.IsLetter(c))\n    {\n        hasLetter = true;\n        result[i] = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n    }\n    else\n    {\n        result[i] = c;\n    }\n}\n\nif (!hasLetter)\n{\n    Array.Reverse(result);\n}\n\nreturn new string(result);\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(Solve(\"1234\")); // \"4321\"\n            Console.WriteLine(Solve(\"ab\")); // \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // \"#A@c\"\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "if(String.IsNullOrEmpty(text)) return null;\n\n   using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n   {\n      byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(text);\n      byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n      // Convert the byte array to hexadecimal string\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < hashBytes.Length; i++)\n      {\n         sb.Append(hashBytes[i].ToString(\"X2\"));\n      }\n      return sb.ToString().ToLower();\n   }\n}\n    }"}
{"task_id": "csharp/79", "language": "csharp", "completion": "// swap if the first number is greater than the second\n    if (a > b)\n    {\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n\n    List<int> result = new List<int>();\n\n    for(var i = a; i <= b; i++)\n    {\n        if (i % 2 == 0) // check if the number is even\n            result.Add(i);\n    }\n\n    return result;\n}\n\n        static void Main (string[] args)\n        {\n            Console.WriteLine (GenerateIntegers (2, 8)); // [2, 4, 6, 8]\n            Console.WriteLine (GenerateIntegers (8, 2)); // [2, 4, 6, 8]\n            Console.WriteLine (GenerateIntegers (10, 14)); // []\n        }\n    }\n}"}

{"task_id": "csharp/0", "language": "csharp", "completion": "int balance = 0;\n\n   foreach(int operation in operations)\n   {\n      balance += operation;\n      if(balance < 0)\n         return true;\n   }\n\n   return false;\n}\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "public static Tuple<int, int> SumProduct(List<int> numbers)\n{\n    if (numbers == null || numbers.Count == 0)\n    {\n        return new Tuple<int, int>(0, 1);\n    }\n    else\n    {\n        int sum = numbers.Sum();\n        int product = numbers.Aggregate(1, (accumulator, number) => accumulator * number);\n        return new Tuple<int, int>(sum, product);\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "if (a.Length != b.Length)\n    {\n        throw new ArgumentException(\"Both strings must have the same length\");\n    }\n\n    var result = \"\";\n    for (int i = 0; i < a.Length; i++)\n    {\n        if (a[i] == b[i])\n            result += '0';\n        else\n            result += '1';\n    }\n\n    return result;\n}\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "if (strings == null || strings.Count == 0)\n            return null;\n        else\n        {\n            string longestString = strings[0];\n            foreach(string s in strings)\n                if(s.Length > longestString.Length)\n                    longestString = s;\n            return longestString;\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "while (b != 0)\n    {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(GreatestCommonDivisor(3, 5)); // Expected output: 1\n            Console.WriteLine(GreatestCommonDivisor(25, 15)); // Expected output: 5\n        }\n    }\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "// Dictionary zur Zuordnung der W\u00f6rter zu Zahlen\n    var wordToNumber = new Dictionary<string, int>()\n    {\n        {\"null\", 0},\n        {\"eins\", 1},\n        {\"zwei\", 2},\n        {\"drei\", 3},\n        {\"vier\", 4},\n        {\"f\u00fcnf\", 5},\n        {\"sechs\", 6},\n        {\"sieben\", 7},\n        {\"acht\", 8},\n        {\"neun\", 9}\n    };\n\n    // Eingabe in W\u00f6rter aufteilen\n    var words = numbers.Split(' ');\n\n    // W\u00f6rter zu Zahlen konvertieren und sortieren\n    var sortedNumbers = words.Select(word => wordToNumber[word]).OrderBy(num => num).ToList();\n\n    // Sortierte Zahlen zur\u00fcck in W\u00f6rter konvertieren\n    var sortedWords = sortedNumbers.Select(num => sortedNumbers.IndexOf(num) == 0 ? \"\" : \" \" + wordToNumber.FirstOrDefault(x => x.Value == num).Key);\n\n    // Sortierte W\u00f6rter zu einem String zusammenf\u00fcgen\n    return string.Concat(sortedWords);\n}\n\n        public static void Main (string[] args)  {            Console.WriteLine (SortNumbers (\"three one five\"));         }   }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "// Find the minimum and maximum values in the list\n    double min = numbers.Min();\n    double max = numbers.Max();\n\n    // Calculate the range of the original list\n    double range = max - min;\n\n    // Rescale each number in the list to the unit interval [0, 1]\n    List<double> rescaledNumbers = new List<double>();\n    foreach (var number in numbers)\n    {\n        rescaledNumbers.Add((number - min) / range);\n    }\n\n    return rescaledNumbers;\n}\n\npublic static void Main(string[] args)\n{\n    var input = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n    Console.WriteLine(\"Input: \" + string.Join(\", \", input));\n    Console.WriteLine(\"Output: \" + string.Join(\", \", RescaleToUnit(input)));\n}\n    }"}
{"task_id": "csharp/7", "language": "csharp", "completion": "if (string.IsNullOrEmpty(string0))\n       return string.Empty;\n\n   char[] chars = string0.ToCharArray();\n   for (int i = 0; i < chars.Length; i++)\n   {\n      char c = chars[i];\n      if (char.IsLower(c))\n         chars[i] = char.ToUpper(c);\n      else if (char.IsUpper(c))\n         chars[i] = char.ToLower(c);\n   }\n   return new string(chars);\n}\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "return l.Where(n => n > 0).ToList();\n    }\n\n    public static void Main()\n    {\n        Test();\n        Console.ReadKey();\n    }\n\n    private static bool AreEqual(object expected, object actual)\n    {\n        CompareLogic comparer = new CompareLogic();\n        ComparisonResult result = comparer.Compare(expected, actual);\n        return result.AreEqual;\n    }\n\n    public static void Test()\n    {\n        int count = 0;\n        int passed = 0;\n\n        do\n        {\n            count++;\n            var lst1 = new List<int>(){ -1, 2, -4, 5, 6 };\n            var result1 = GetPositive(lst1);\n            var expectedResult1 = new List<int>(){ 2, 5, 6 };\n            bool testPassed = AreEqual(expectedResult1, result1);\n            passed += testPassed ? 1 : 0;\n            Console.WriteLine($\"Test {count} \" + (testPassed ? \"passed\" : \"failed\"));\n        } while (false);\n\n        do\n        {\n            count++;\n            var lst2 = new List<int>(){ 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            var result2 = GetPositive(lst2);\n            var expectedResult2 = new List<int>(){ 5, 3, 2, 3, 9, 123, 1 };\n            bool testPassed = AreEqual(expectedResult2, result2);\n            passed += testPassed ? 1 : 0;\n            Console.WriteLine($\"Test {count} \" + (testPassed ? \"passed\" : \"failed\"));\n        } while (false);\n\n        // Add more tests if needed\n\n        Console.WriteLine(\"----------------------\");\n        Console.WriteLine($\"{passed}/{count} tests passed.\");\n    }\n}\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "if (n <= 1)\n            return false;\n\n        if (n == 2 || n == 3)\n            return true;\n\n        if (n % 2 == 0 || n % 3 == 0)\n            return false;\n\n        for (int i = 5; i * i <= n; i += 6)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "return l.Distinct().OrderBy(x => x).ToList();\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(\"Please, enter the elements of a list separated by spaces:\");\n            var input = Console.ReadLine();\n            List<int> numbers = Regex.Matches(input, @\"\\d+\")\n                                .Cast<Match>()\n                                .Select(m => int.Parse(m.Value))\n                                .ToList();\n            var result = Unique(numbers);\n            Console.WriteLine(\"Sorted unique elements of the list:\");\n            foreach (var number in result)\n            {\n                Console.Write($\"{number} \");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "public static int PrimeFib(int n)\n{\n    if (n <= 0)\n    {\n        throw new ArgumentException(\"Input should be positive integer.\");\n    }\n\n    int count = 0;\n    int num = 2;\n\n    while (count < n)\n    {\n        if (IsFibonacci(num) && IsPrime(num))\n        {\n            count++;\n        }\n\n        num++;\n    }\n\n    return num - 1;\n}\n\nprivate static bool IsFibonacci(int number)\n{\n    int x = 0, y = 1, z = 0;\n    while (z < number)\n    {\n        z = x + y;\n        x = y;\n        y = z;\n    }\n\n    return z == number;\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1)\n    {\n        return false;\n    }\n\n    for (int i = 2; i <= Math.Sqrt(number); i++)\n    {\n        if (number % i == 0)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "if (l.Count < 3)\n    {\n        return false;\n    }\n\n    l.Sort(); // Sort the list to ease up the search process\n\n    for (int i = 0; i < l.Count - 2; i++)\n    {\n        int left = i + 1;\n        int right = l.Count - 1;\n\n        while (left < right)\n        {\n            if (l[i] + l[left] + l[right] == 0)\n            {\n                return true; // Found a triplet that sums to zero\n            }\n            else if (l[i] + l[left] + l[right] < 0)\n            {\n                left++; // Increment the left pointer to increase the sum\n            }\n            else\n            {\n                right--; // Decrement the right pointer to decrease the sum\n            }\n        }\n    }\n\n    return false; // No triplet found that sums to zero\n}\n    }"}
{"task_id": "csharp/13", "language": "csharp", "completion": "HashSet<int> set = new HashSet<int>();\n    for(int i = 0; i < l.Count(); i++)\n    {\n      int complement = -l[i];\n      if(set.Contains(complement)) return true;\n      set.Add(l[i]);\n    }\n    return false;\n        }\n\n    public static void Main()\n    {\n        var testCases = new Dictionary<string, object>[]\n        {\n            new Dictionary<string, object>{ {\"method\", \"PairsSumToZero\"}, { \"input\", new List<int>(){ 1, 3, 5, 0 } }, { \"output\", false } },\n            new Dictionary<string, object>{ {\"method\", \"PairsSumToZero\"}, { \"input\", new List<int>(){ 1, 3, -2, 1 } }, { \"output\", true } },\n            new Dictionary<string, object>{ {\"method\", \"PairsSumToZero\"}, { \"input\", new List<int>(){ 1, 2, 3, 7 } }, { \"output\", false } },\n            new Dictionary<string, object>{ {\"method\", \"PairsSumToZero\"}, { \"input\", new List<int>(){ 2, 4, -5, 3, 5, 7 } }, { \"output\", true } },\n            new Dictionary<string, object>{ {\"method\", \"PairsSumToZero\"}, { \"input\", new List<int>(){ 1 } }, { \"output\", false } },\n        };\n\n        var compareLogic = new CompareLogic();\n        var comparisonResult = compareLogic.Compare(testCases);\n        if (comparisonResult.AreEqual)\n            Console.WriteLine(\"OK!\");\n        else\n            Console.WriteLine(comparisonResult.DifferencesString);\n    }\n}\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "if (n == 0 || n == 1) return 0;\n   else if (n == 2) return 2;\n   else if (n == 3) return 0;\n\n   var fib = new int[5];\n   fib[0] = 0;\n   fib[1] = 0;\n   fib[2] = 2;\n   fib[3] = 0;\n\n   for (int i = 4; i <= n; i++)\n   {\n       fib[i % 5] = fib[(i - 1) % 5] + fib[(i - 2) % 5] + fib[(i - 3) % 5] + fib[(i - 4) % 5];\n   }\n\n   return fib[n % 5];\n}\n    }"}
{"task_id": "csharp/15", "language": "csharp", "completion": "if (l == null || l.Count == 0)\n    {\n        throw new ArgumentException(\"The list cannot be null or empty.\");\n    }\n\n    var sortedList = l.OrderBy(x => x).ToList();\n    int count = sortedList.Count;\n\n    if (count % 2 == 1)\n    {\n        return sortedList[count / 2];\n    }\n    else\n    {\n        int midIndex = count / 2;\n        double median = (sortedList[midIndex - 1] + sortedList[midIndex]) / 2.0;\n        return median;\n    }\n}\n\npublic static void Main()\n{\n    List<int> testList1 = new List<int> {3, 1, 2, 4, 5};\n    Console.WriteLine(Median(testList1)); // Output: 3\n\n    List<int> testList2 = new List<int> {-10, 4, 6, 1000, 10, 20};\n    Console.WriteLine(Median(testList2)); // Output: 15.0\n}\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "string reversedText = new string(text.Reverse().ToArray());\n    return text == reversedText;\n}\n\n        //Test cases\n        public static void Main()\n        {\n            Console.WriteLine(IsPalindrome(\"\")); //True\n            Console.WriteLine(IsPalindrome(\"aba\")); //True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); //True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); //False\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "public static string RemoveVowels(string text)\n{\n    // Define a regular expression pattern to match all vowels (both lowercase and uppercase)\n    string pattern = \"[aeiouAEIOU]\";\n\n    // Use Regex.Replace() to replace all occurrences of vowels with an empty string\n    string result = Regex.Replace(text, pattern, \"\");\n\n    return result;\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "foreach (var number in l)\n    {\n        if (number >= t)\n            return false;\n    }\n    return true;\n}\n\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "return x + y;\n}\n\n        private static void TestAdd()\n        {\n            Console.WriteLine(\"TestAdd\");\n\n            var tests = new Dictionary<(int, int), int>\n            {\n                [(2, 3)] = 5,\n                [(5, 7)] = 12,\n            };\n\n            foreach (var test in tests)\n            {\n                var (x, y) = test.Key;\n                var expected = test.Value;\n                var actual = Add(x, y);\n\n                if (!expected.Equals(actual))\n                    throw new Exception($\"Add({x}, {y}) returned {actual} instead of the expected result {expected}\");\n            }\n        }\n\n        public static void Main()\n        {\n            TestAdd();\n        }\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "public static bool SameChars(string s0, string s1)\n{\n    // Convert the strings to char arrays\n    var arr0 = s0.ToCharArray();\n    var arr1 = s1.ToCharArray();\n\n    // Get the intersection of the two arrays (i.e., all characters that appear in both)\n    var intersection = arr0.Intersect(arr1);\n\n    // If the count of unique characters in the intersection is equal to the distinct character count in each string, then they contain the same characters\n    return intersection.Distinct().Count() == arr0.Distinct().Count() && intersection.Distinct().Count() == arr1.Distinct().Count();\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be a positive integer.\");\n    }\n\n    if (n == 1 || n == 2)\n    {\n        return 1;\n    }\n\n    int first = 1, second = 1, fibonacci = 0;\n\n    for (int i = 3; i <= n; i++)\n    {\n        fibonacci = first + second;\n        first = second;\n        second = fibonacci;\n    }\n\n    return fibonacci;\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(Fib(10)); // Output: 55\n    Console.WriteLine(Fib(1)); // Output: 1\n    Console.WriteLine(Fib(8)); // Output: 21\n}\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "// Find the intersection of the two lists using LINQ and sort the result\n    return l1.Intersect(l2).OrderBy(x => x).ToList();\n}\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "if (n <= 1) return -1; // if the input number is less than or equal to 1, it doesn't have a prime factor.\n\n    var factors = new List<int>();\n\n    for(var i = 2; i * i <= n; i++)\n    {\n        while (n % i == 0)\n        {\n            factors.Add(i);\n            n /= i;\n        }\n    }\n\n    // If there are remaining factors left in n, then it is a prime factor as well.\n    if (n > 1)\n    {\n        factors.Add(n);\n    }\n\n    return factors.Max();\n}\n    public static void Main() {\n    \tConsole.WriteLine(LargestPrimeFactor(13195)); // prints: 29\n    \tConsole.WriteLine(LargestPrimeFactor(2048)); // prints: 2\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "// Die Methode nutzt die mathematische Formel f\u00fcr die Summe einer arithmetischen Reihe, um die Summe zu berechnen.\n   // Die Formel lautet: sum = n * (n + 1) / 2\n   return n * (n + 1) / 2;\n}\n\n        public static void Main()\n        {\n            Test();\n        }\n\n        private static void Test()\n        {\n            List<Tuple<int, int>> testCases = new List<Tuple<int, int>>\n            {\n                Tuple.Create(30, 465),\n                Tuple.Create(100, 5050),\n                Tuple.Create(5, 15),\n                Tuple.Create(10, 55),\n                Tuple.Create(1, 1)\n            };\n\n            var comparisonResult = new CompareLogic().Compare(testCases.Select(x => SumToN(x.Item1)).ToList(), testCases.Select(x => x.Item2).ToList());\n            if (comparisonResult.AreEqual)\n                Console.WriteLine(\"All tests pass!\");\n            else\n                Console.WriteLine($\"{comparisonResult.DifferencesString}\");\n        }\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "List<int> result = new List<int>();\n\n    for (int i = 1; i < xs.Count; i++)\n    {\n        result.Add(xs[i] * i);\n    }\n\n    return result;\n}\n\n        public static void Main()\n        {\n            // Test cases\n            AssertEqual(Derivative(new List<int> { 3, 1, 2, 4, 5 }), new List<int> { 1, 4, 12, 20 });\n            AssertEqual(Derivative(new List<int> { 1, 2, 3 }), new List<int> { 2, 6 });\n        }\n\n        private static void AssertEqual(object actual, object expected)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            ComparisonResult result = compareLogic.Compare(expected, actual);\n            if (!result.AreEqual)\n            {\n                throw new Exception($\"Expected: {expected}, but got: {actual}\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "if (n <= 1)\n            return 0;\n        else if (n == 2)\n            return 1;\n\n        var fib = new[] { 0, 0, 1 };\n        for (var i = 3; i <= n; ++i)\n        {\n            var nextFib = fib[(i - 1) % 3] + fib[(i - 2) % 3] + fib[(i - 3) % 3];\n            fib[i % 3] = nextFib;\n        }\n\n        return fib[n % 3];\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "using System;\n    using System.Linq;\n\n    public class Program\n    {\n        public static int VowelsCount(string s)\n        {\n            char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n            string lowerCaseString = s.ToLower();\n\n            int count = lowerCaseString.Count(c => vowels.Contains(c));\n            if (lowerCaseString.EndsWith(\"y\"))\n                count++;\n\n            return count;\n        }\n    }"}
{"task_id": "csharp/28", "language": "csharp", "completion": "// Sort the list in descending order.\n    lst.Sort();\n    lst.Reverse();\n\n    // Initialize a variable to store the count of each number.\n    Dictionary<int, int> count = new Dictionary<int, int>();\n\n    // Loop through the sorted list.\n    foreach (var num in lst) {\n        if (!count.ContainsKey(num)) {\n            count[num] = 0;\n        }\n        count[num]++;\n\n        // If the count of a number is greater or equal to the number itself, return the number.\n        if (count[num] >= num) {\n            return num;\n        }\n    }\n\n    // If no such number is found, return -1.\n    return -1;\n}\n\nstatic void Main(string[] args)\n{\n    Console.WriteLine(Search(new List<int>(){4, 1, 2, 2, 3, 1})); // Expected output: 2\n    Console.WriteLine(Search(new List<int>() { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Expected output: 3\n    Console.WriteLine(Search(new List<int>() { 5, 5, 4, 4, 4 })); // Expected output: -1\n}\n    }"}
{"task_id": "csharp/29", "language": "csharp", "completion": "if (a + b > c && a + c > b && b + c > a)\n    {\n        double s = (a + b + c) / 2.0;\n        return Math.Round(Math.Sqrt(s * (s - a) * (s - b) * (s - c)), 2);\n    }\n    else\n    {\n        return -1;\n    }\n}\n\npublic static void Main()\n{\n    Console.WriteLine(TriangleArea(3, 4, 5));\n    Console.WriteLine(TriangleArea(1, 2, 10));\n}\n\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "// Check if the list is balanced\n   var isBalanced = q.SequenceEqual(q.Reverse());\n\n   // Check if the sum of elements is less than or equal to maximum weight\n   var totalWeight = q.Sum();\n\n   return isBalanced && totalWeight <= w;\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "if (a < 2 || a >= 100)\n            return false;\n\n        int count = 0;\n        for (int i = 2; i <= a / 3; i++) // as the number is less than 100, we don't need to check till sqrt(a), instead we can check till a/3\n        {\n            if (a % i == 0)\n            {\n                count++;\n                while (a % i == 0) // divide the number by 'i' until it is no longer divisible\n                    a /= i;\n                if (count > 3 || !IsPrime(i)) // if we have more than 3 factors or any factor is not prime, return false\n                    return false;\n            }\n        }\n\n        // the remaining number can be a prime number only if it is greater than 1 and count is less than 3\n        if (a > 1 && IsPrime(a))\n            count++;\n\n        return count == 3;\n    }\n\n    private static bool IsPrime(int n)\n    {\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "return \"db\"+Convert.ToString(decimal, 2)+\"db\";\n}\n\nstatic void Main(string[] args)\n{\n    Console.WriteLine(DecimalToBinary(15)); // Outputs: db1111db\n    Console.WriteLine(DecimalToBinary(32)); // Outputs: db100000db\n}\n   }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "if (s.Length < 3)\n            return false;\n\n        for (int i = 2; i < s.Length; i++)\n        {\n            if (s[i] == s[i - 1] || s[i] == s[i - 2] || s[i - 1] == s[i - 2])\n                return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\n    using System.Collections.Generic;\n\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<object> grades)\n        {\n            var letterGrades = new List<string>();\n\n            foreach (var grade in grades)\n            {\n                if (!(grade is double))\n                    throw new ArgumentException(\"All elements of the input list must be doubles.\");\n\n                double gpa = Convert.ToDouble(grade);\n\n                string letterGrade;\n\n                if (gpa >= 3.7 && gpa <= 4.0)\n                    letterGrade = \"A+\";\n                else if (gpa > 3.3 && gpa < 3.7)\n                    letterGrade = \"A\";\n                else if (gpa > 3.0 && gpa <= 3.3)\n                    letterGrade = \"A-\";\n                else if (gpa > 2.7 && gpa <= 3.0)\n                    letterGrade = \"B+\";\n                else if (gpa > 2.3 && gpa <= 2.7)\n                    letterGrade = \"B\";\n                else if (gpa > 2.0 && gpa <= 2.3)\n                    letterGrade = \"B-\";\n                else if (gpa > 1.7 && gpa <= 2.0)\n                    letterGrade = \"C+\";\n                else if (gpa > 1.3 && gpa <= 1.7)\n                    letterGrade = \"C\";\n                else if (gpa > 1.0 && gpa <= 1.3)\n                    letterGrade = \"C-\";\n                else if (gpa > 0.7 && gpa <= 1.0)\n                    letterGrade = \"D+\";\n                else if (gpa > 0.0 && gpa <= 0.7)\n                    letterGrade = \"D\";\n                else if (gpa == 0.0)\n                    letterGrade = \"E\";\n                else\n                    throw new ArgumentOutOfRangeException(\"GPA must be between 0.0 and 4.0.\");\n\n                letterGrades.Add(letterGrade);\n            }\n\n            return letterGrades;\n        }\n\n        public static void Main()\n        {\n            var grades = new List<object> { 4.0, 3.0, 1.7, 2.0, 3.5 };\n            var result = NumericalLetterGrade(grades);\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }"}
{"task_id": "csharp/35", "language": "csharp", "completion": "int length = string0.Length;\n\n    if (length < 2)\n        return false;\n\n    for (int i = 2; i <= Math.Sqrt(length); i++)\n    {\n        if (length % i == 0)\n            return false;\n    }\n\n    return true;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(PrimeLength(\"Hello\"));\n            Console.WriteLine(PrimeLength(\"abcdcba\"));\n            Console.WriteLine(PrimeLength(\"kittens\"));\n            Console.WriteLine(PrimeLength(\"orange\"));\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "string binary = Convert.ToString(N, 2);\n    int sum = binary.Sum(c => c - '0');\n    return Convert.ToString(sum, 2);\n}\n    }"}
{"task_id": "csharp/37", "language": "csharp", "completion": "public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n{\n    var result = new List<Tuple<int, int>>();\n\n    for (int i = 0; i < lst.Count; i++)\n        for (int j = 0; j < lst[i].Count; j++)\n            if (lst[i][j] == x)\n                result.Add(Tuple.Create(i, j));\n\n    // Sorting by row in ascending order and column in descending order\n    var sortedResult = result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2);\n\n    return new List<Tuple<int, int>>(sortedResult);\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "// Sort the list in ascending order\n    var sortedLst = lst.OrderBy(x => x).ToList();\n\n    // Remove duplicates from the sorted list\n    var distinctSortedLst = sortedLst.Distinct().ToList();\n\n    // If there are less than 2 distinct elements, return null\n    if (distinctSortedLst.Count < 2)\n        return null;\n\n    // Otherwise, return the second smallest element\n    return distinctSortedLst[1];\n}\n    }"}
{"task_id": "csharp/39", "language": "csharp", "completion": "// Split the string into sentences using '.', '?' or '!' as delimiters\n    string[] sentences = Regex.Split(S, @\"(?<=[\\.\\!\\?])\\s*\");\n\n    // Initialize a counter for boredom\n    int boredCount = 0;\n\n    // Iterate through each sentence\n    foreach (string sentence in sentences)\n    {\n        // Check if the sentence starts with \"Ich\" (German for \"I\") or \"I\" (English)\n        if (sentence.StartsWith(\"Ich\", StringComparison.OrdinalIgnoreCase) || sentence.StartsWith(\"I \", StringComparison.OrdinalIgnoreCase))\n        {\n            // If it does, increment the boredom counter\n            boredCount++;\n        }\n    }\n\n    // Return the final boredom count\n    return boredCount;\n}\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int Skjkasdkd(List<int> lst)\n    {\n        // Get distinct values and sort them in descending order\n        var sortedDistinctNumbers = lst.Distinct().OrderByDescending(n => n);\n\n        foreach (var number in sortedDistinctNumbers)\n        {\n            if (IsPrime(number))\n            {\n                return GetDigitSum(number);\n            }\n        }\n\n        // If no prime numbers are found, return -1 or throw an exception depending on the requirements.\n        return -1;\n    }\n\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1)\n            return false;\n\n        if (number == 2)\n            return true;\n\n        if (number % 2 == 0)\n            return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (var i = 3; i <= boundary; i += 2)\n            if (number % i == 0)\n                return false;\n\n        return true;\n    }\n\n    private static int GetDigitSum(int number)\n    {\n        var sum = 0;\n\n        while (number > 0)\n        {\n            sum += number % 10;\n            number /= 10;\n        }\n\n        return sum;\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "if(dict.Count == 0)\n            return false;\n\n        bool firstKeyIsUpper = false;\n        bool firstKeyIsLower = false;\n\n        foreach(var key in dict.Keys)\n        {\n            if (key is string strKey)\n            {\n                if (Char.IsUpper(strKey[0]))\n                    firstKeyIsUpper = true;\n                else if (Char.IsLower(strKey[0]))\n                    firstKeyIsLower = true;\n                else\n                    return false; // Not a letter, so it can't be all upper or all lower\n            }\n            else\n            {\n                return false; // Key is not a string\n            }\n        }\n\n        if (firstKeyIsUpper && firstKeyIsLower)\n            return false;\n        else\n            return true;\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "double number = Convert.ToDouble(value);\n    if (number >= 0)\n    {\n        double lowerBound = Math.Floor(number);\n        double upperBound = Math.Ceiling(number);\n        return (number - lowerBound < upperBound - number) ? (int)lowerBound : (int)upperBound;\n    }\n    else\n    {\n        double lowerBound = Math.Ceiling(number);\n        double upperBound = Math.Floor(number);\n        return (upperBound - number < number - lowerBound) ? (int)upperBound : (int)lowerBound;\n    }\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(ClosestInteger(\"10\"));  // Expected output: 10\n    Console.WriteLine(ClosestInteger(\"15.3\"));  // Expected output: 15\n    Console.WriteLine(ClosestInteger(\"14.5\"));  // Expected output: 15\n    Console.WriteLine(ClosestInteger(\"-14.5\"));  // Expected output: -15\n}\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<int> MakeAPile(int n)\n    {\n        var pile = new List<int>();\n\n        for (var i = 0; i < n; i++)\n        {\n            pile.Add(n + i * ((n % 2 == 0) ? 2 : 1)); // If n is even, add next even number otherwise add next odd number.\n        }\n\n        return pile;\n    }\n\n    public static void Main()\n    {\n        var result = MakeAPile(3);\n        Console.WriteLine(string.Join(\", \", result)); // Output: 3, 5, 7\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "var words = Regex.Split(s, @\"\\s*,\\s*|\\s+\");\n   return words.ToList();\n}\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "if (x > y || x % 2 == 1) // If x is greater than y or x is odd\n    {\n        return -1; // Then there's no even number in the range\n    }\n    else if (y % 2 == 0) // If y is even\n    {\n        return y; // Return y as it's the largest even number in the range\n    }\n    else\n    {\n        return y - 1; // Otherwise, return y - 1 as it's the largest even number in the range\n    }\n}\n\n        public static void Main(string[] args)\n        {\n            int x = 12;\n            int y = 15;\n            Console.WriteLine(\"ChooseNum(\" + x + \", \" + y + \") = \" + ChooseNum(x, y)); // Should print: 14\n        }\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "if (n > m)\n    {\n        return -1;\n    }\n    else\n    {\n        double avg = Math.Round((double)(n + m) / 2);\n        string binary = Convert.ToString((int)avg, 2);\n        return \"0b\" + binary;\n    }\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(RoundedAvg(1, 5)); // Output: \"0b11\"\n    Console.WriteLine(RoundedAvg(7, 5)); // Output: -1\n    Console.WriteLine(RoundedAvg(10, 20)); // Output: \"0b1111\"\n    Console.WriteLine(RoundedAvg(20, 33)); // Output: \"0b11010\"\n}\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "public static List<int> F(int n)\n{\n    List<int> result = new List<int>();\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result.Add(Factorial(i));\n        else\n            result.Add(SumOfNumbersUpTo(i));\n    }\n\n    return result;\n}\n\nprivate static int Factorial(int n)\n{\n    if (n == 0 || n == 1)\n        return 1;\n\n    int factorial = 1;\n\n    for (int i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\n    return factorial;\n}\n\nprivate static int SumOfNumbersUpTo(int n)\n{\n    int sum = 0;\n\n    for (int i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n\n    return sum;\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "public static Tuple<int, int> EvenOddPalindrome(int n)\n{\n    int evenCount = 0;\n    int oddCount = 0;\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (IsPalindrome(i))\n        {\n            if (i % 2 == 0)\n                evenCount++;\n            else\n                oddCount++;\n        }\n    }\n\n    return Tuple.Create(evenCount, oddCount);\n}\n\nprivate static bool IsPalindrome(int number)\n{\n    string strNumber = number.ToString();\n    int start = 0;\n    int end = strNumber.Length - 1;\n    while (start < end)\n    {\n        if (strNumber[start] != strNumber[end])\n            return false;\n        start++;\n        end--;\n    }\n    return true;\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "int n = arr.Count;\n   if(n <= 1) return true;\n\n    List<int> sortedArr = new List<int>(arr);\n    sortedArr.Sort();\n\n    for(int i=0; i<n; i++)\n    {\n        // Shift the array to the right by i positions\n        List<int> shiftedArr = arr.GetRange(i, n-i).Concat(arr.GetRange(0, i)).ToList();\n\n        // Check if the shifted array is non-decreasing\n        bool isNonDecreasing = true;\n        for(int j=1; j<n; j++)\n        {\n            if(shiftedArr[j] < shiftedArr[j-1])\n            {\n                isNonDecreasing = false;\n                break;\n            }\n        }\n\n        // If the shifted array is non-decreasing, return true\n        if(isNonDecreasing) return true;\n    }\n\n    // If no non-decreasing arrangement was found, return false\n    return false;\n}\n    }"}
{"task_id": "csharp/50", "language": "csharp", "completion": "// First, separate the odd and even numbers from both lists\n    var oddLst1 = lst1.Where(x => x % 2 != 0).ToList();\n    var evenLst2 = lst2.Where(x => x % 2 == 0).ToList();\n\n    // If the number of odd numbers in lst1 is greater than the number of even numbers in lst2, it's not possible to make all elements of lst1 even\n    if (oddLst1.Count > evenLst2.Count)\n        return \"NO\";\n\n    // Otherwise, it's possible to exchange elements between lst1 and lst2\n    return \"YES\";\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "// Remove characters from s that match any character in c\n    var result = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n\n    // Check if the resulting string is a palindrome\n    bool isPalindrome = result == new string(result.Reverse().ToArray());\n\n    return new List<object> { result, isPalindrome };\n}\n        public static void Main()\n        {\n            var expectedResult1 = new List<object>() { \"bcd\", false };\n            Console.WriteLine($\"Testing with \\\"abcde\\\" and \\\"ae\\\": {Compare(ReverseDelete(\"abcde\",\"ae\"), expectedResult1)}\");\n\n            var expectedResult2 = new List<object>() { \"acdef\", false };\n            Console.WriteLine($\"Testing with \\\"abcdef\\\" and \\\"b\\\": {Compare(ReverseDelete(\"abcdef\",\"b\"), expectedResult2)}\");\n\n            var expectedResult3 = new List<object>() { \"cdedc\", true };\n            Console.WriteLine($\"Testing with \\\"abcdedcba\\\" and \\\"ab\\\": {Compare(ReverseDelete(\"abcdedcba\",\"ab\"), expectedResult3)}\");\n        }\n\n        public static bool Compare(IList<object> actual, IList<object> expected)\n        {\n            var compareLogic = new CompareLogic();\n            return compareLogic.Compare(actual, expected).AreEqual;\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "public class Program\n{\n    public static int MaxFill(List<List<int>> grid, int capacity)\n    {\n        int bucketFills = 0;\n        int currentCapacity = 0;\n\n        // Iterate over each well in the grid\n        for (int i = 0; i < grid.Count; i++)\n        {\n            for (int j = 0; j < grid[i].Count; j++)\n            {\n                if (grid[i][j] == 1) // If the well has water\n                {\n                    currentCapacity++; // Increase the current capacity of the bucket\n\n                    // If the bucket is full, empty it and reset the capacity\n                    if (currentCapacity == capacity)\n                    {\n                        bucketFills++;\n                        currentCapacity = 0;\n                    }\n                }\n            }\n        }\n\n        // If there is any water left in the bucket after iterating over all wells, empty it once more\n        if (currentCapacity > 0)\n        {\n            bucketFills++;\n        }\n\n        return bucketFills;\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            var result = new List<string>();\n            string[] words = s.Split(' ');\n            foreach (var word in words)\n            {\n                int consonantCount = Regex.Matches(word, \"[bcdfghjklmnpqrstvwxyz]\", RegexOptions.IgnoreCase).Count;\n                if (consonantCount == n)\n                {\n                    result.Add(word);\n                }\n            }\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // \"little\"\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // \"Mary, lamb\"\n            Console.WriteLine(String.Join(\", \", SelectWords(\"simple white space\", 2))); // \"\"\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Hello world\", 4))); // \"world\"\n            Console.WriteLine(String.Join(\", \", SelectWords(\"Uncle sam\", 3))); // \"Uncle\"\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "// Sortiere das Array in absteigender Reihenfolge\n    arr.Sort();\n    arr.Reverse();\n\n    // Gib die ersten k Elemente zur\u00fcck\n    return arr.GetRange(0, k);\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int>(){-3,-4,5}, 3)));\n            Console.ReadLine();\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "// Firstly we check if the input is valid based on the constraints provided.\n    if (arr == null || arr.Count < 1 || arr.Count > 100 || k < 1 || k > arr.Count)\n        throw new ArgumentException(\"Invalid input\");\n\n    int sum = 0;\n\n    // Iterate through the first 'k' elements of the list.\n    for (int i = 0; i < k; i++)\n    {\n        // Check if the absolute value of current number is less than or equal to 99. If it is, we add it to the sum.\n        if (Math.Abs(arr[i]) <= 99)\n            sum += arr[i];\n    }\n\n    return sum;\n}\n\n        // Testing our function with some test cases\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(AddElements(new List<int> {111,21,3,4000,5,6,7,8,9}, 4)); // Expected output: 24\n            Console.WriteLine(AddElements(new List<int> {10,20,-30,40,50,-60,70,80,90}, 5)); // Expected output: 100\n        }\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "int start = Math.Max(interval1[0], interval2[0]);\n    int end = Math.Min(interval1[1], interval2[1]);\n\n    if (start > end) // no intersection\n        return \"NO\";\n\n    int length = end - start + 1;\n\n    if (length == 1) // 1 is not a prime number\n        return \"NO\";\n\n    for (int i = 2; i <= Math.Sqrt(length); i++) {\n        if (length % i == 0)\n            return \"NO\";\n    }\n\n    return \"YES\";\n}\n\n        public static void Main ()\n        {\n            // Test cases for Intersection method\n            Console.WriteLine(Intersection(new List<int> {1, 2}, new List<int> {2, 3}) == \"NO\"); // No intersection\n            Console.WriteLine(Intersection(new List<int> {-1, 1}, new List<int> {0, 4}) == \"NO\"); // Intersection length is 1, which is not a prime number\n            Console.WriteLine(Intersection(new List<int> {-3, -1}, new List<int> {-5, 5}) == \"YES\"); // Intersection length is 2, which is a prime number\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "var tribonacciList = new List<object>();\n    if (n >= 0)\n    {\n        tribonacciList.Add(1);\n        if (n > 0)\n        {\n            tribonacciList.Add(3);\n            if (n > 1)\n            {\n                tribonacciList.Add(2);\n                for (int i = 3; i <= n; i++)\n                {\n                    if (i % 2 == 0)\n                        tribonacciList.Add(1 + i / 2);\n                    else\n                        tribonacciList.Add((long)tribonacciList[i - 1] + (long)tribonacciList[i - 2] + (long)tribonacciList[i - 3]);\n                }\n            }\n        }\n    }\n    return tribonacciList;\n}\n\npublic static void Main(string[] args)\n{\n    var result = Tri(4);\n    Console.WriteLine(\"Result: [\" + string.Join(\", \", result) + \"]\");\n}\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "if (n <= 0)\n            throw new ArgumentException(\"Input must be a positive integer.\", nameof(n));\n\n        string numberString = n.ToString();\n        int product = 1;\n        bool hasOddDigit = false;\n\n        foreach (char c in numberString)\n        {\n            if (int.TryParse(c.ToString(), out int digit))\n            {\n                if (digit % 2 != 0)\n                {\n                    product *= digit;\n                    hasOddDigit = true;\n                }\n            }\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "int depth = 0;\n    bool nested = false;\n\n    foreach (char c in string0)\n    {\n        if (c == '[')\n            depth++;\n        else if (c == ']')\n        {\n            if (depth > 1)\n                nested = true;\n            depth--;\n        }\n    }\n\n    return nested && depth == 0;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(IsNested(\"[[]]\"));\n    Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\"));\n    Console.WriteLine(IsNested(\"[][]\"));\n    Console.WriteLine(IsNested(\"[]\"));\n    Console.WriteLine(IsNested(\"[[][]]\"));\n    Console.WriteLine(IsNested(\"[[]][[\"));\n}\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "// Check if list is null or empty\n    if (lst == null || lst.Count == 0) return 0;\n\n    // Initialize sum to 0\n    var sum = 0;\n\n    // Iterate over each element in the list\n    foreach(var item in lst)\n    {\n        // Try to parse item to double, if not possible, continue with next iteration\n        if (double.TryParse(item?.ToString(), out double num))\n        {\n            // Round number up to nearest integer\n            var roundedNum = Math.Ceiling(num);\n\n            // Square the number and add it to sum\n            sum += (int)Math.Pow(roundedNum, 2);\n        }\n    }\n\n    // Return the sum of squared numbers\n    return sum;\n}\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "if (string.IsNullOrEmpty(txt))\n            return false;\n\n        // Remove trailing spaces and check the last character\n        var trimmedTxt = txt.TrimEnd();\n        char lastChar = trimmedTxt[trimmedTxt.Length - 1];\n\n        // Check if the last character is an alphabetical letter\n        if (!char.IsLetter(lastChar))\n            return false;\n\n        // Check if the last character is part of a word\n        var words = Regex.Split(trimmedTxt, @\"\\s+\");\n        foreach (var word in words)\n        {\n            if (word.EndsWith(lastChar))\n                return false;\n        }\n\n        return true;\n    }\n\n    public static void Main()\n    {\n      Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // False\n      Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // True\n      Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // False\n      Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // False\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "int maxIndex = -1;\n\n    for (int i = 1; i < arr.Count; i++)\n    {\n        if (arr[i] < arr[i - 1])\n            maxIndex = i;\n    }\n\n    return maxIndex;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Output: 3\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 }));      // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "int? minPositive = null;\n   int? maxNegative = null;\n\n   foreach(var num in lst) {\n       if (num > 0 && (minPositive == null || num < minPositive)) {\n           minPositive = num;\n       } else if (num < 0 && (maxNegative == null || num > maxNegative)) {\n           maxNegative = num;\n       }\n   }\n\n   return new List<object> { maxNegative, minPositive };\n}\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "if(n < 0)\n    throw new ArgumentException(\"N must be greater than or equal to 0\", nameof(n));\n\n  int result = 1;\n\n  for(int i = n; i > 0; i--)\n  {\n      result *= Factorial(i);\n  }\n\n  return result;\n}\n\nprivate static int Factorial(int num)\n{\n    if(num < 2)\n        return 1;\n\n    return num * Factorial(num - 1);\n}}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class Program\n{\n    public static string WordsInSentence(string sentence)\n    {\n        // Split the sentence into words\n        var words = sentence.Split(' ');\n\n        // Filter out the words whose length is a prime number\n        var primeLengthWords = words.Where(word => IsPrime(word.Length));\n\n        // Join the filtered words back into a single string\n        return string.Join(\" \", primeLengthWords);\n    }\n\n    public static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (number % i == 0)\n                return false;\n\n        return true;\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "// Split the strings into numerators and denominators\n    int[] xNums = Array.ConvertAll(x.Split('/'), s => int.Parse(s));\n    int[] nNums = Array.ConvertAll(n.Split('/'), s => int.Parse(s));\n\n    // Multiply the numerators and denominators\n    long resultNumerator = (long)xNums[0] * nNums[0];\n    long resultDenominator = xNums[1] * nNums[1];\n\n    // Check if the result is an integer\n    return resultNumerator % resultDenominator == 0;\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\"));  // Expected output: True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\"));  // Expected output: False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\"));  // Expected output: False\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "def OrderByPoints(nums):\n    # Helper function to calculate the sum of digits of a number\n    def get_sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    # Sort the list based on the sum of digits and original index\n    sorted_nums = sorted(enumerate(nums), key=lambda x: (get_sum_of_digits(x[1]), x[0]))\n\n    # Extract the numbers from the sorted tuples\n    return [n for _, n in sorted_nums]"}
{"task_id": "csharp/68", "language": "csharp", "completion": "int count = 0;\n    foreach (var number in nums)\n    {\n        if (number > 10 && IsFirstAndLastDigitOdd(Math.Abs(number)))\n            count++;\n    }\n    return count;\n}\n\nprivate static bool IsFirstAndLastDigitOdd(int number)\n{\n    string numStr = number.ToString();\n    int firstDigit = Convert.ToInt32(numStr[0].ToString());\n    int lastDigit = Convert.ToInt32(numStr[numStr.Length - 1].ToString());\n    return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n}\n\n        // Test method. Do not modify the code below this line\n        public static void Main (string[] args)\n        {\n            var testCases = new Dictionary<List<int>, int> ()\n            {\n                {new List<int>() {15, -73, 14, -15}, 1},\n                {new List<int>() {33, -2, -3, 45, 21, 109}, 2}\n            };\n\n            foreach (var (input, expectedOutput) in testCases)\n            {\n                var actualOutput = SpecialFilter(input);\n                Console.WriteLine($\"SpecialFilter({string.Join(\", \", input)}) -> Expected: {expectedOutput}, Actual: {actualOutput}\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "int[] a = new int[n];\n   for(int i=0; i<n; i++)\n       a[i] = (i+1)*(i+1) - (i+1) + 1;\n\n    int count=0;\n    for(int i=0; i<n-2; i++)\n        for(int j=i+1; j<n-1; j++)\n            for(int k=j+1; k<n; k++)\n                if((a[i] + a[j] + a[k]) % 3 ==0)\n                    count++;\n\n    return count;\n}\n        public static void Main (string[] args) {\n            Console.WriteLine(GetMaxTriples(5));\n        }\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "List<string> planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\n    if (!planets.Contains(planet1) || !planets.Contains(planet2))\n        return new List<string>();\n\n    int indexOfPlanet1 = planets.IndexOf(planet1);\n    int indexOfPlanet2 = planets.IndexOf(planet2);\n\n    if (indexOfPlanet1 > indexOfPlanet2)\n        Swap(ref indexOfPlanet1, ref indexOfPlanet2);\n\n    return planets.GetRange(indexOfPlanet1 + 1, indexOfPlanet2 - indexOfPlanet1 - 1);\n}\n\nprivate static void Swap(ref int a, ref int b)\n{\n    int temp = a;\n    a = b;\n    b = temp;\n}\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "// Check if the number is prime. If it is, return x; otherwise, return y.\n    bool isPrime = true;\n    if(n > 1)\n    {\n        for(int i = 2; i < n; i++)\n        {\n            if(n % i == 0)\n            {\n                isPrime = false;\n                break;\n            }\n        }\n    }\n    else\n    {\n        isPrime = false;\n    }\n    return isPrime ? x : y;\n}\n\n// Testing code. Do not modify!\npublic static void Main(string[] args)\n{\n    var testCases = new Dictionary<Tuple<int, int, int>, int>\n    {\n        { Tuple.Create(7, 34, 12), 34 },\n        { Tuple.Create(15, 8, 5), 5 }\n    };\n\n    var comparer = new CompareLogic();\n    foreach (var kvp in testCases)\n    {\n        Console.WriteLine($\"Testing XOrY({kvp.Key.Item1}, {kvp.Key.Item2}, {kvp.Key.Item3})\");\n        var result = XOrY(kvp.Key.Item1, kvp.Key.Item2, kvp.Key.Item3);\n        if (comparer.Compare(result, kvp.Value).AreEqual)\n        {\n            Console.WriteLine(\"SUCCESS!\");\n        }\n        else\n        {\n            Console.WriteLine($\"FAILURE! Expected: {kvp.Value}, got: {result}\");\n        }\n    }\n}\n\n// Ignore and do not change anything below this line\npublic static IEnumerable<Tuple<int, int, int>> Arguments()\n{\n    yield return Tuple.Create(7, 34, 12);\n    yield return Tuple.Create(15, 8, 5);\n}\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "IEnumerable<int> validNumbers = lst.OfType<int>() // Filter out non-integer values\n                                              .Where(n => n > 0 && n % 2 != 0); // Keep only positive odd numbers\n\n    return validNumbers.Sum(n => n * n); // Return the sum of squares\n}\n    }"}
{"task_id": "csharp/73", "language": "csharp", "completion": "if (extensions.Count == 0) return class_name;\n\n    int maxStrength = int.MinValue;\n    string strongestExt = \"\";\n\n    foreach(var ext in extensions)\n    {\n        var strength = Regex.Matches(ext, @\"[A-Z]\").Count - Regex.Matches(ext, @\"[a-z]\").Count;\n        if (strength > maxStrength)\n        {\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n\n    return class_name + \".\" + strongestExt;\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // \"Slices.SErviNGSliCes\"\n    Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // \"my_class.AA\"\n}\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "// Check if the length of second string is greater than the first one. If true, return false as it can't be part of the first string.\n    if (b.Length > a.Length)\n        return false;\n\n    // Concatenate the first string to itself so that we have all possible rotations of 'a'.\n    string doubledA = a + a;\n\n    // Iterate over each rotation of 'a' and check if it contains 'b' as substring. If true, return true.\n    for (int i = 0; i < a.Length; i++)\n        if (doubledA.Substring(i, b.Length).Equals(b))\n            return true;\n\n    // If no rotation of 'a' contains 'b', return false.\n    return false;\n}\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "public static string IntToMiniRoman(int num)\n{\n    Dictionary<int, char> romanNumerals = new Dictionary<int, char>()\n    {\n        {1000, 'm'},\n        {900, 'c'},\n        {500, 'd'},\n        {400, 'c'},\n        {100, 'c'},\n        {90, 'x'},\n        {50, 'l'},\n        {40, 'x'},\n        {10, 'x'},\n        {9, 'i'},\n        {5, 'v'},\n        {4, 'i'},\n        {1, 'i'}\n    };\n\n    string result = \"\";\n\n    foreach (var numeral in romanNumerals)\n    {\n        while (num >= numeral.Key)\n        {\n            result += numeral.Value;\n            num -= numeral.Key;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "// \u00dcberpr\u00fcfe, ob das Dreieck ein rechtwinkliges Dreieck ist.\n    if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a)\n        return true;\n    else\n        return false;\n}\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(RightAngleTriangle(3, 4, 5)); // True\n            Console.WriteLine(RightAngleTriangle(1, 2, 3)); // False\n        }\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "if(String.IsNullOrEmpty(s))\n    {\n        throw new ArgumentException(\"Input cannot be null or empty.\", nameof(s));\n    }\n\n    var charArray = s.ToCharArray();\n    bool hasLetter = false;\n\n    for (int i = 0; i < charArray.Length; i++)\n    {\n        if (Char.IsLetter(charArray[i]))\n        {\n            hasLetter = true;\n            charArray[i] = Char.IsUpper(charArray[i]) ? Char.ToLower(charArray[i]) : Char.ToUpper(charArray[i]);\n        }\n    }\n\n    if (!hasLetter)\n    {\n        Array.Reverse(charArray);\n    }\n\n    return new string(charArray);\n}\n\nstatic void Main()\n{\n    Console.WriteLine(Solve(\"1234\"));  // \"4321\"\n    Console.WriteLine(Solve(\"ab\"));    // \"AB\"\n    Console.WriteLine(Solve(\"#a@C\"));  // \"#A@c\"\n}\n}}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System.Security.Cryptography;\n    using System.Text;\n\n    if(String.IsNullOrEmpty(text))\n        return null;\n\n    using var md5 = MD5.Create();\n    var inputBytes = Encoding.ASCII.GetBytes(text);\n    var hashBytes = md5.ComputeHash(inputBytes);\n\n    var sb = new StringBuilder();\n    for (var i = 0; i < hashBytes.Length; i++)\n        sb.Append(hashBytes[i].ToString(\"X2\"));\n    return sb.ToString().ToLower();\n}\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "// Swap the values of a and b if a is greater than b to ensure that a is always less than or equal to b\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n\n    List<int> result = new List<int>(); // Create an empty list to store the results\n\n    // Loop from a to b (inclusive) and check if each number is even by using the modulo operator (%). If it is even, add it to the list.\n    for(int i = a; i <= b; i++){\n        if(i % 2 == 0){\n            result.Add(i);\n        }\n    }\n\n    return result; // Return the list of even numbers between a and b in ascending order.\n}\n\nstatic void Main()\n{\n    Console.WriteLine(string.Join(\", \", GenerateIntegers(2, 8)));\n    Console.WriteLine(string.Join(\", \", GenerateIntegers(8, 2)));\n    Console.WriteLine(string.Join(\", \", GenerateIntegers(10, 14)));\n}\n}\n}"}

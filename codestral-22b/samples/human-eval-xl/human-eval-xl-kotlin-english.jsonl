{"task_id": "kotlin/0", "language": "kotlin", "completion": "var balance = 0.0\n    for (operation in operations) {\n        when (operation) {\n            is Int -> balance += operation\n            is Double -> balance += operation\n            else -> throw IllegalArgumentException(\"Unsupported operation type\")\n        }\n        if (balance < 0) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "if (numbers.isEmpty()) {\n        return listOf(0, 1)\n    } else {\n        var sum = 0\n        var product = 1\n        for (number in numbers) {\n            val intNumber = number as? Int ?: continue\n            sum += intNumber\n            product *= intNumber\n        }\n        return listOf(sum, product)\n    }\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "if (a.length != b.length) throw IllegalArgumentException(\"Input strings must be of equal length\")\n\n    return a.indices.map { i ->\n        when ((a[i] == '1') xor (b[i] == '1')) {\n            true -> '1'\n            false -> '0'\n        }\n    }.joinToString(\"\")\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "return if (strings.isEmpty()) null else strings.maxByOrNull{ it -> it.toString().length } as String\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "var num1 = if (a >= 0) a else -a\n    var num2 = if (b >= 0) b else -b\n\n    while (num2 != 0) {\n        val temp = num2\n        num2 = num1 % num2\n        num1 = temp\n    }\n\n    return num1\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "val numMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n\n    return numbers.split(\" \")\n        .map { numMap[it] }\n        .sorted()\n        .joinToString(\" \") { key -> numMap.filterValues { it == key }.keys.first() }\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "val min = numbers.min()!!\n   val max = numbers.max()!!\n   return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "return string.map { char ->\n        if (char.isLowerCase()) char.toUpperCase() else char.toLowerCase()\n    }.joinToString(\"\")\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "return l.filterIsInstance<Int>().filter{ it > 0 }\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "if (n <= 1) {\n       return false;\n    }\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "return l.distinct().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "var count = 0;\n    var num = 2;\n    var a = 0;\n    var b = 1;\n    while (count < n) {\n        val fib = a + b;\n        if (isPrime(fib)) count++;\n        a = b;\n        b = fib;\n    }\n    return a;\n}\nfun isPrime(n : Int) : Boolean {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    var i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "val ls = l.sorted()\n    var left: Int\n    var right: Int\n\n    for (i in 0 until ls.size - 2) {\n        if (i > 0 && ls[i] == ls[i - 1]) continue\n        left = i + 1\n        right = ls.size - 1\n        while (left < right) {\n            if (ls[i] + ls[left] + ls[right] == 0) return true\n            else if (ls[i] + ls[left] + ls[right] < 0) left++\n            else right--\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "val complementSet = mutableSetOf<Int>()\n    for (num in l) {\n        if (complementSet.contains(-num)) return true\n        complementSet.add(num)\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "if (n == 0 || n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var result = 0\n\n    for (i in 4..n) {\n        result = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = result\n    }\n\n    return result\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[sortedList.size / 2 - 1] + sortedList[sortedList.size / 2]) / 2.0\n    } else {\n        sortedList[sortedList.size / 2]\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "return text == text.reversed()\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "return text.filterNot { it in \"aeiouAEIOU\" }\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "return l.all { it < t }\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y;\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "val countS0 = IntArray(256)\n    val countS1 = IntArray(256)\n\n    for (ch in s0) {\n        countS0[ch.toInt()]++\n    }\n\n    for (ch in s1) {\n        countS1[ch.toInt()]++\n    }\n\n    return countS0 contentEquals countS1\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "if (n <= 1) return n\n   var a = 0\n   var b = 1\n\n   for (i in 2..n) {\n       val temp = a\n       a = b\n       b += temp\n   }\n   return b\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "val set1 = l1.toSet()\n    val set2 = l2.toSet()\n    return (set1 intersect set2).sorted()\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "var i = 2\n    var maxPrime = -1\n    while (i * i <= n) {\n        while (n % i == 0) {\n            maxPrime = i\n            n /= i\n        }\n        ++i\n    }\n    if (n > 1) {\n        maxPrime = n\n    }\n    return maxPrime\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "if (n <= 0) return 0\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(i * xs[i])\n    }\n    return result\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "if (n <= 1) return 0\n    if (n == 2) return 1\n\n    var a = 0\n    var b = 0\n    var c = 1\n    var temp: Int\n\n    for (i in 3..n) {\n        temp = a + b + c\n        a = b\n        b = c\n        c = temp\n    }\n\n    return c\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "val vowels = setOf('a', 'e', 'i', 'o', 'u')\n   var count = 0\n   s.toLowerCase().forEachIndexed { index, char ->\n       if (char in vowels || (index == s.length - 1 && char == 'y')) count++\n   }\n   return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "val counts = lst.groupingBy { it }.eachCount()\n    for (entry in counts.entries) {\n        if (entry.key <= entry.value) {\n            return entry.key\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "if (a + b <= c || a + c <= b || b + c <= a) return -1.0 // Checking for validity of the triangle\n\n   val s = (a + b + c) / 2.0 // Calculating semi-perimeter\n   val area = Math.sqrt(s * (s - a) * (s - b) * (s - c)) // Using Heron's formula to calculate the area\n\n   return String.format(\"%.2f\", area).toDouble() // Rounding the area to 2 decimal places and returning it as double value\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "if (q != q.reversed() || q.sum() > w) return false\n    return true\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    var count = 0\n    var n = a\n    for (i in 2 until n) {\n        while (n % i == 0 && isPrime(i)) {\n            count++\n            n /= i\n        }\n        if (count >= 3) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "return \"db${Integer.toBinaryString(decimal)}db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "if (s.length < 3) return false\n   for (i in 0..s.length - 3) {\n       val a = s[i]\n       val b = s[i + 1]\n       val c = s[i + 2]\n       if (a == b || a == c || b == c) return false\n   }\n   return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "return grades.map { grade ->\n        when (grade) {\n            is Double, is Int -> {\n                when {\n                    grade == 4.0 -> \"A+\"\n                    grade > 3.7 -> \"A\"\n                    grade > 3.3 -> \"A-\"\n                    grade > 3.0 -> \"B+\"\n                    grade > 2.7 -> \"B\"\n                    grade > 2.3 -> \"B-\"\n                    grade > 2.0 -> \"C+\"\n                    grade > 1.7 -> \"C\"\n                    grade > 1.3 -> \"C-\"\n                    grade > 1.0 -> \"D+\"\n                    grade > 0.7 -> \"D\"\n                    grade > 0.0 -> \"D-\"\n                    else -> \"E\"\n                }\n            }\n            else -> throw IllegalArgumentException(\"Invalid grade format\")\n        }\n    }\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "if (string.isEmpty()) return false // An empty string does not have a prime length\n    val n = string.length\n    if (n < 2) return false // Numbers less than 2 are not considered prime\n    for (i in 2..(n / 2)) {\n        if (n % i == 0) return false // If any number between 2 and n/2 divides n, then it's not a prime number\n    }\n    return true // If no number divided n, then it is a prime number\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "return Integer.toBinaryString(n.toString().sumBy { it - '0' })\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "val result = mutableListOf<Pair<Int, Int>>()\n    for ((i, row) in lst.withIndex()) {\n        if (row is Collection<*>) {\n            for ((j, element) in row.withIndex()) {\n                if (element == x) {\n                    result.add(Pair(i, j))\n                }\n            }\n        } else {\n            println(\"Warning: Invalid row at index $i\")\n        }\n    }\n    return result.sortedWith(compareBy<Pair<Int, Int>> { it.first }.thenByDescending { it.second })\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "if (lst.size < 2) return null\n\n   var smallest = Int.MAX_VALUE\n   var secondSmallest = Int.MAX_VALUE\n\n   for (i in lst) {\n       val num = i as Int\n       if (num < smallest) {\n           secondSmallest = smallest\n           smallest = num\n       } else if (num < secondSmallest && num != smallest) {\n           secondSmallest = num\n       }\n   }\n\n   return if (secondSmallest == Int.MAX_VALUE) null else secondSmallest\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "val sentences = s.split(\"[?.!]\".toRegex()).filter { it.isNotBlank() }\n    return sentences.count { it.trim().startsWith(\"I\", ignoreCase = true) }\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n        var i = 3\n        while (i * i <= n) {\n            if (n % i == 0) return false\n            i += 2\n        }\n        return true\n    }\n\n    val primes = lst.filter(::isPrime)\n    val maxPrime = primes.maxOrNull() ?: return 0\n    return maxPrime.toString().sumBy { it - '0' }\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "if (dict.isEmpty()) {\n        return false;\n    }\n\n    var lowerCase = true;\n    var upperCase = true;\n\n    for ((key, _) in dict) {\n        if (key is String) {\n            if (!key.all { it.isLowerCase() }) {\n                lowerCase = false;\n            }\n            if (!key.all { it.isUpperCase() }) {\n                upperCase = false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    return lowerCase || upperCase;\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "val number = value.toDouble()\n  val floorValue = kotlin.math.floor(number).toInt()\n  val ceilValue = kotlin.math.ceil(number).toInt()\n\n  return if (kotlin.math.abs(floorValue - number) < kotlin.math.abs(ceilValue - number)) {\n    floorValue\n  } else {\n    ceilValue\n  }\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "val isOdd = n % 2 != 0\n    return generateSequence(n) { if (isOdd) it - 2 else it - 1 }.takeWhile { it > 0 }.toList()\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "return s.split(\", \", \" \")\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "if (x > y) return -1\n\n   for (i in y downTo x) {\n       if (i % 2 == 0) return i\n   }\n\n   return -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "if (n > m) return -1\n   val avg = ((n + m).toDouble() / 2.0).roundToInt()\n   return Integer.toBinaryString(avg)\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(factorial(i))\n        } else {\n            var sum = 0\n            for (j in 1..i) {\n                sum += j\n            }\n            result.add(sum)\n        }\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    if (n == 0 || n == 1) {\n        return 1\n    }\n    var fact = 1\n    for (i in 2..n) {\n        fact *= i\n    }\n    return fact\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "var evenCount = 0\n    var oddCount = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) evenCount++ else oddCount++\n        }\n    }\n    return listOf(evenCount, oddCount)\n}\n\nfun isPalindrome(num: Int): Boolean {\n    val numStr = num.toString()\n    for (i in 0 until numStr.length / 2) {\n        if (numStr[i] != numStr[numStr.length - i - 1]) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "if (arr.isEmpty()) return true\n\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr == sortedArr.takeLast(arr.size - i) + sortedArr.take(i)) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "val oddInLst1 = lst1.filter { it % 2 != 0 }\n    val evenInLst2 = lst2.filter { it % 2 == 0 }\n\n    return if (oddInLst1.size <= evenInLst2.size) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "var filteredString = s.filterNot { c.contains(it) }\n    val reversedFilteredString = filteredString.reversed()\n    return listOf(filteredString, filteredString == reversedFilteredString)\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "var ans = 0\n    val n = grid.size\n    val m = grid[0].size\n\n    for (j in 0 until m) {\n        var currCapacity = capacity\n        for (i in 0 until n) {\n            if (grid[i][j] == 1) {\n                if (currCapacity == 0) {\n                    ans++\n                    currCapacity = capacity - 1\n                } else {\n                    currCapacity--\n                }\n            }\n        }\n        if (currCapacity < capacity) {\n            ans++\n        }\n    }\n\n    return ans\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "val words = s.split(\" \")\n    val selectedWords = mutableListOf<String>()\n\n    for (word in words) {\n        var consonantCount = 0\n        for (char in word) {\n            if (!isVowel(char)) {\n                consonantCount++\n            }\n        }\n        if (consonantCount == n) {\n            selectedWords.add(word)\n        }\n    }\n\n    return selectedWords\n}\n\nfun isVowel(c: Char): Boolean {\n    val vowels = listOf('a', 'e', 'i', 'o', 'u')\n    return c.toLowerCase() in vowels\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "// sort the array in descending order\n    val sortedArr = arr.sortedDescending()\n\n    // return the first k elements of the sorted array\n    return sortedArr.take(k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "return arr.take(k).filter { it in -99..99 }.sum()\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "val start = Math.max(interval1[0], interval2[0])\n    val end = Math.min(interval1[1], interval2[1])\n\n    if (start > end) return \"NO\"\n\n    val length = end - start + 1\n    return if (isPrime(length)) \"YES\" else \"NO\"\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "var tribonacciSequence = mutableListOf<Int>()\n    when (n) {\n        0 -> return listOf(1)\n        1 -> return listOf(1, 3)\n        else -> {\n            tribonacciSequence.add(1)\n            tribonacciSequence.add(3)\n            for (i in 2..n) {\n                when (i % 2 == 0) {\n                    true -> tribonacciSequence.add(1 + i / 2)\n                    false -> tribonacciSequence.add(tribonacciSequence[i - 1] + tribonacciSequence[i - 2] + tribonacciSequence[i - 3])\n                }\n            }\n        }\n    }\n    return tribonacciSequence\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "var product = 1\n    var num = n\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) {\n            product *= digit\n        } else if (product == 1) { // if all digits are even, return 0\n            product = 0\n        }\n        num /= 10\n    }\n    return product\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "var openBrackets = 0\n    var closeBrackets = 0\n    for (char in string) {\n        when (char) {\n            '[' -> openBrackets++\n            ']' -> closeBrackets++\n        }\n        if (openBrackets > 1 && closeBrackets >= openBrackets - 1) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "return lst.map { Math.ceil(it as Double).toInt() }\n            .map { it * it }\n            .sum()\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "if (txt.isEmpty()) return false\n    val lastChar = txt[txt.length - 1]\n    return lastChar.isLetter() && txt[txt.length - 2].isWhitespace()\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "var largestIndex = -1\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            largestIndex = i - 1\n        }\n    }\n    return largestIndex\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "var negatives = lst.filterIsInstance<Int>().filter{ it < 0 }.sortedDescending()\n    var positives = lst.filterIsInstance<Int>().filter{ it > 0 }.sorted()\n\n    return listOf(if (negatives.isNotEmpty()) negatives[0] else null, if (positives.isNotEmpty()) positives[0] else null)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "var result = 1\n    for (i in n downTo 1) {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    if (n == 0 || n == 1)\n        return 1\n    var fact = 1\n    for (i in 2..n) {\n        fact *= i\n    }\n    return fact\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "// first we split the sentence into words\n    val words = sentence.split(\" \")\n    var result = \"\"\n    for (word in words){\n        if(isPrime(word.length)){\n            // append the word to the result if its length is prime\n            result += \"$word \"\n        }\n    }\n    return result.trim()\n}\n// function to check whether a number is prime or not\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) {\n        return false\n    }\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "val xNum = x.substringBefore(\"/\").toInt()\n    val xDen = x.substringAfter(\"/\").toInt()\n\n    val nNum = n.substringBefore(\"/\").toInt()\n    val nDen = n.substringAfter(\"/\").toInt()\n\n    return (xNum * nNum) % gcd(xDen, nNum) == 0 && (nNum * xDen) % gcd(nDen, xNum) == 0\n}\n\nfun gcd(a: Int, b: Int): Int {\n    if (b == 0) return a\n    return gcd(b, a % b)\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun sumOfDigits(n: Int): Int = n.toString().map { it - '0' }.sum()\n\n    return nums.sortedWith(compareBy({ sumOfDigits(it as Int) }, { nums.indexOf(it) }) )\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "var count = 0\n    for (i in nums) {\n        val n = i.toString().toInt()\n        if (n > 10 && n % 10 % 2 != 0 && n / 10 % 10 % 2 != 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "val a = Array(n) { i -> (i+1)*(i+1) - i } // construct array as per the given formula\n   var count = 0 // to store number of triples\n   val cnt = Array(3){0} // to count remainders when divided by 3\n   for (i in a) {\n       cnt[i % 3]++\n   }\n   if(cnt[0] > 2){\n      count += ((cnt[0]) * (cnt[0] -1) * (cnt[0]-2)) /6 // count all triples with sum divisible by 3 and having elements which are multiples of 3\n   }\n   if(cnt[1] > 2){\n      count += ((cnt[1]) * (cnt[1] -1) * (cnt[1]-2)) /6 // count all triples with sum divisible by 3 and having elements which are one more than multiples of 3\n   }\n   if(cnt[2] > 2){\n      count += ((cnt[2]) * (cnt[2] -1) * (cnt[2]-2)) /6 // count all triples with sum divisible by 3 and having elements which are two more than multiples of 3\n   }\n   count += cnt[0]*cnt[1]*cnt[2] // count all triples with sum divisible by 3 where each element is from a different group (multiples of 3, one more than multiples of 3, two more than multiples of 3)\n   return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if (!planets.contains(planet1) || !planets.contains(planet2)) {\n        return emptyList()\n    }\n\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n    val startIndex = if (index1 < index2) index1 else index2\n    val endIndex = if (index1 > index2) index1 else index2\n\n    return planets.subList(startIndex + 1, endIndex)\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "val isPrime = (2 until n).none { n % it == 0 }\n   return if (isPrime) x else y\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "var sum = 0\n    for (i in lst) {\n        if (i is Int && i > 0 && i % 2 != 0) {\n            sum += i * i\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "var maxStrength = Int.MIN_VALUE\n    var strongestExt = \"\"\n\n    for (ext in extensions) {\n        val strength = ext.count { it.isUpperCase() } - ext.count { it.isLowerCase() }\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExt = ext\n        }\n    }\n\n    return \"$className.$strongestExt\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "if (b.length > a.length) return false\n\n    val doubledA = a + a\n\n    for (i in 0 until b.length) {\n        val rotatedB = b.substring(i) + b.substring(0, i)\n        if (rotatedB in doubledA) return true\n    }\n\n    return false\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n   val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n\n   var num = number\n   val result = StringBuilder()\n\n   for (i in values.indices) {\n       while (num >= values[i]) {\n           result.append(numerals[i])\n           num -= values[i]\n       }\n   }\n\n   return result.toString()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "// Sort the sides in ascending order\n    val sortedSides = listOf(a, b, c).sorted()\n\n    // Check if it forms a right-angled triangle using Pythagorean theorem\n    return sortedSides[0] * sortedSides[0] + sortedSides[1] * sortedSides[1] == sortedSides[2] * sortedSides[2]\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "val sb = StringBuilder()\n    var hasLetter = false\n    for (c in s) {\n        if (c.isLetter()) {\n            hasLetter = true\n            sb.append(if (c.isUpperCase()) c.toLowerCase() else c.toUpperCase())\n        } else {\n            sb.append(c)\n        }\n    }\n    return if (!hasLetter) s.reversed() else sb.toString()\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.security.MessageDigest\n    import java.math.BigInteger\n\n    fun String.md5() : String {\n        val md = MessageDigest.getInstance(\"MD5\")\n        return BigInteger(1, md.digest(toByteArray())).toString(16).padStart(32, '0')\n    }\n\n    if (text.isEmpty()) {\n        return null\n    } else {\n        return text.md5()\n    }\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "val start = if (a < b) a else b\n    val end = if (a > b) a else b\n    var result = mutableListOf<Int>()\n\n    for (i in start..end){\n        if(i % 2 == 0){\n            result.add(i)\n        }\n    }\n    return result\n}"}

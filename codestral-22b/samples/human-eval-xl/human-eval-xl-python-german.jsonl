{"task_id": "python/0", "language": "python", "completion": "balance = 0\n   for operation in operations:\n       balance += operation\n       if balance < 0:\n           return True\n   return False"}
{"task_id": "python/1", "language": "python", "completion": "product = 1\n  total = 0\n\n  for num in numbers:\n      total += num\n      if num != 0:\n          product *= num\n\n  return total, product"}
{"task_id": "python/2", "language": "python", "completion": "result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "python/3", "language": "python", "completion": "if not strings:\n        return None\n\n    max_len = len(strings[0])\n    result = strings[0]\n\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            result = string\n\n    return result"}
{"task_id": "python/4", "language": "python", "completion": "# Schleife, die so lange l\u00e4uft bis a und b beide 0 sind\n    while a != 0 and b != 0:\n        # Wenn a gr\u00f6\u00dfer als b ist, wird der Rest von a durch b berechnet und zugewiesen an a\n        if a > b:\n            a = a % b\n        # Andernfalls wird der Rest von b durch a berechnet und zugewiesen an b\n        else:\n            b = b % a\n    # Wenn a 0 ist, dann ist b der gr\u00f6\u00dfte gemeinsame Teiler\n    if a == 0:\n        return b\n    # Andernfalls ist a der gr\u00f6\u00dfte gemeinsame Teiler\n    else:\n        return a"}
{"task_id": "python/5", "language": "python", "completion": "# Define a mapping from German to English numbers\n    number_mapping = {\n        \"null\": \"zero\",\n        \"eins\": \"one\",\n        \"zwei\": \"two\",\n        \"drei\": \"three\",\n        \"vier\": \"four\",\n        \"f\u00fcnf\": \"five\",\n        \"sechs\": \"six\",\n        \"sieben\": \"seven\",\n        \"acht\": \"eight\",\n        \"neun\": \"nine\"\n    }\n\n    # Split the input string into a list of numbers\n    number_list = numbers.split()\n\n    # Convert each German number to English using the mapping\n    english_numbers = [number_mapping[number] for number in number_list]\n\n    # Sort the list of English numbers\n    sorted_english_numbers = sorted(english_numbers)\n\n    # Reverse the mapping to convert English numbers back to German\n    reversed_mapping = {value: key for key, value in number_mapping.items()}\n\n    # Convert each English number back to German using the reversed mapping\n    german_sorted_numbers = [reversed_mapping[number] for number in sorted_english_numbers]\n\n    # Join the list of sorted numbers into a string and return it\n    return \" \".join(german_sorted_numbers)"}
{"task_id": "python/6", "language": "python", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n        return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "# Initialisiere eine leere Liste f\u00fcr die positiven Zahlen\n    positive_numbers = []\n\n    # Iteriere \u00fcber jede Zahl in der Eingabeliste\n    for number in l:\n        # Wenn die Zahl positiv ist, f\u00fcge sie zur Ergebnisliste hinzu\n        if number > 0:\n            positive_numbers.append(number)\n\n    # Gib die Liste der positiven Zahlen zur\u00fcck\n    return positive_numbers"}
{"task_id": "python/9", "language": "python", "completion": "if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "l = sorted(list(set(l)))\n   return l"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num):\n        if num <= 1:\n            return False\n        elif num <= 3:\n            return True\n        elif num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(fibonacci(num)):\n            count += 1\n        num += 1\n    return fibonacci(num - 1)"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n        n = len(l)\n        l.sort() # Sort the input list\n        for i in range(n-2):\n            if i > 0 and l[i] == l[i-1]: # Avoid duplicates\n                continue\n            left = i + 1\n            right = n - 1\n            while left < right:\n                if l[i] + l[left] + l[right] == 0:\n                    return True\n                elif l[i] + l[left] + l[right] < 0:\n                    left += 1\n                else: # l[i] + l[left] + l[right] > 0\n                    right -= 1\n        return False\n\n    print(triples_sum_to_zero([1, 3, 5, 0])) # False\n    print(triples_sum_to_zero([1, 3, -2, 1])) # True\n    print(triples_sum_to_zero([1, 2, 3, 7])) # False\n    print(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # True\n    print(triples_sum_to_zero([1])) # False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n        if n == 0 or n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        # Initialize base values for first 4 numbers of the fib4 sequence.\n        a, b, c, d = 0, 0, 2, 0\n\n        # Calculate the n-th number in the fib4 sequence iteratively.\n        for _ in range(4, n + 1):\n            temp = a + b + c + d\n            a, b, c, d = b, c, d, temp\n\n        return d\n    print(fib4(5)) # Output: 4\n    print(fib4(6)) # Output: 8\n    print(fib4(7)) # Output: 14"}
{"task_id": "python/15", "language": "python", "completion": "n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n % 2 == 1 else (s[n//2 - 1] + s[n//2]) / 2)"}
{"task_id": "python/16", "language": "python", "completion": "if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        result = ''\n        for char in text:\n            if char not in vowels:\n                result += char\n        return result\n\n    # Testing the function with provided examples\n    print(remove_vowels(''))              # Expected output: ''\n    print(remove_vowels(\"abcdef\\nghijklm\"))   # Expected output: 'bcdf\\nghjklm'\n    print(remove_vowels('abcdef'))         # Expected output: 'bcdf'\n    print(remove_vowels('aaaaa'))           # Expected output: ''\n    print(remove_vowels('aaBAA'))            # Expected output: 'B'\n    print(remove_vowels('zbcd'))             # Expected output: 'zbcd'"}
{"task_id": "python/18", "language": "python", "completion": "for i in l:\n        if i >= t:\n            return False\n    return True\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # should print True\nprint(below_threshold([1, 20, 4, 10], 5))   # should print False"}
{"task_id": "python/19", "language": "python", "completion": "return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n        return sorted(set(s0)) == sorted(set(s1))\n\n    print(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')) # True\n    print(same_chars('abcd', 'dddddddabc')) # True\n    print(same_chars('dddddddabc', 'abcd')) # True\n    print(same_chars('eabcd', 'dddddddabc')) # False\n    print(same_chars('abcd', 'dddddddabce')) # False\n    print(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')) # False"}
{"task_id": "python/21", "language": "python", "completion": "if n <= 0:\n        raise ValueError(\"n muss eine positive ganze Zahl sein\")\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n        # Sort the lists and remove duplicates\n        l1 = sorted(set(l1))\n        l2 = sorted(set(l2))\n\n        # Find the common elements using two pointers\n        i = j = 0\n        result = []\n        while i < len(l1) and j < len(l2):\n            if l1[i] == l2[j]:\n                result.append(l1[i])\n                i += 1\n                j += 1\n            elif l1[i] < l2[j]:\n                i += 1\n            else:\n                j += 1\n        return result\n\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])) # Expected output: [1, 5, 653]\n    print(common([5, 3, 2, 8], [3, 2])) # Expected output: [2, 3]"}
{"task_id": "python/23", "language": "python", "completion": "def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest = -1\n    for i in range(2, n+1):\n        while n % i== 0 and is_prime(i):\n            largest = i\n            n = n / i\n    return int(largest)"}
{"task_id": "python/24", "language": "python", "completion": "total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\nprint(sum_to_n(30)) # 465\nprint(sum_to_n(100)) # 5050\nprint(sum_to_n(5)) # 15\nprint(sum_to_n(10)) # 55\nprint(sum_to_n(1)) # 1"}
{"task_id": "python/25", "language": "python", "completion": "# To find the derivative of a polynomial, we need to multiply each coefficient by its corresponding exponent and then decrease that exponent by one.\n    # We will create an empty list called deriv_coeffs to store these new coefficients.\n    deriv_coeffs = []\n    for i in range(1, len(xs)):\n        # Multiply the coefficient by the exponent and append it to the deriv_coeffs list.\n        deriv_coeffs.append(i * xs[i])\n\n    return deriv_coeffs"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n        if n == 0 or n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(3, n+1):\n                a, b, c = b, c, a + b + c\n            return c\n\n    print(fibfib(1))  # Output: 0\n    print(fibfib(5))  # Output: 4\n    print(fibfib(8))  # Output: 24"}
{"task_id": "python/27", "language": "python", "completion": "# Initialize a counter for the number of vokals\n    count = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the current character is a vowel\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            # If it is, increment the counter\n            count += 1\n        elif char.lower() == 'y' and s.index(char) == len(s)-1:\n            # Special case for 'y' at end of string\n            count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))   # should print 2\nprint(vowels_count(\"ACEDY\"))   # should print 3\nprint(vowels_count(\"AEIOU\"))   # should print 5\nprint(vowels_count(\"XYZ\"))     # should print 0\nprint(vowels_count(\"y\"))       # should print 1\nprint(vowels_count(\"Y\"))       # should print 1\nprint(vowels_count(\"xy\"))      # should print 0\nprint(vowels_count(\"Xy\"))      # should print 0\nprint(vowels_count(\"xyZ\"))     # should print 0\nprint(vowels_count(\"Xyz\"))     # should print 1"}
{"task_id": "python/28", "language": "python", "completion": "# Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the largest number that meets the condition\n    max_num = -1\n    for num, count in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n\n    return max_num"}
{"task_id": "python/29", "language": "python", "completion": "# Check if the three sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    if sum(q) <= w and is_palindrome(q):\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n       if n < 2:\n           return False\n       for i in range(2, int(n**0.5)+1):\n           if n % i == 0:\n               return False\n       return True\n\n   def is_multiply_prime(a):\n       count = 0\n       for i in range(2, a//3+1):\n           if a % i == 0 and is_prime(i):\n               a //= i\n               count += 1\n       return count == 3\n\n   print(is_multiply_prime(30)) # Output: True"}
{"task_id": "python/32", "language": "python", "completion": "binary = format(decimal, 'b')\n   return 'db' + str(binary) + 'db'"}
{"task_id": "python/33", "language": "python", "completion": "if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif 3.7 < grade <= 4.0:\n                letter_grades.append('A')\n            elif 3.3 < grade <= 3.7:\n                letter_grades.append('A-')\n            elif 3.0 < grade <= 3.3:\n                letter_grades.append('B+')\n            elif 2.7 < grade <= 3.0:\n                letter_grades.append('B')\n            elif 2.3 < grade <= 2.7:\n                letter_grades.append('B-')\n            elif 2.0 < grade <= 2.3:\n                letter_grades.append('C+')\n            elif 1.7 < grade <= 2.0:\n                letter_grades.append('C')\n            elif 1.3 < grade <= 1.7:\n                letter_grades.append('C-')\n            elif 1.0 < grade <= 1.3:\n                letter_grades.append('D+')\n            elif 0.7 < grade <= 1.0:\n                letter_grades.append('D')\n            elif 0.0 < grade <= 0.7:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])) # ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n       if n <= 1:\n           return False\n       elif n <= 3:\n           return True\n       elif n % 2 == 0 or n % 3 == 0:\n           return False\n       i = 5\n       while i * i <= n:\n           if n % i == 0 or n % (i + 2) == 0:\n               return False\n           i += 6\n       return True\n\n   def prime_length(string):\n       length = len(string)\n       return is_prime(length)\n\nprint(prime_length('Hello')) # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange')) # False"}
{"task_id": "python/36", "language": "python", "completion": "# Convert the number to string and iterate over each digit\n    sum_of_digits = sum(int(digit) for digit in str(N))\n\n    # Convert the sum of digits to binary using the built-in bin() function,\n    # which returns a string that starts with '0b' to indicate that it's a binary number.\n    # We remove these first two characters using slicing [2:].\n    return bin(sum_of_digits)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n        coord_list = []\n        for i in range(len(lst)):\n            if x in lst[i]:\n                for j in range(len(lst[i])):\n                    if lst[i][j] == x:\n                        coord_list.append((i, j))\n\n        sorted_coord_list = sorted(sorted(coord_list), key=lambda tup: tup[1], reverse=True)\n        return sorted_coord_list\n\n    print(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1)) # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n    print(get_row([], 1)) # []\n\n    print(get_row([[], [1], [1, 2, 3]], 3)) # [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest if second_smallest != smallest else None"}
{"task_id": "python/39", "language": "python", "completion": "# Your code should go here\n    sentences = S.split('. ')\n    count = sum(sentence.startswith('Ich') for sentence in sentences)\n    return count"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        w = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += w\n            w = 6 - w\n        return True\n\n    max_prime = float('-inf')\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    if max_prime == float('-inf'):\n        return -1  # or any other value indicating no prime number found\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "python/41", "language": "python", "completion": "if not dict: # checks if the dictionary is empty\n        return False\n\n    # initialises a variable to store whether the first key was lower case or upper case\n    is_lower = dict[next(iter(dict))].islower()\n\n    # iterates through the rest of the keys in the dictionary and checks if they're all in the same case as the first key\n    for key in dict:\n        if (key.isupper() and not is_lower) or (key.islower() and is_lower):\n            continue\n        else:\n            return False\n    # returns True if every key was in the same case as the first key, otherwise it returns False\n    return True"}
{"task_id": "python/42", "language": "python", "completion": "# convert string to float\n  value = float(value)\n\n  # calculate the distance between the number and its two nearest integers\n  dist_up = int(value + 0.5) - value\n  dist_down = value - int(value)\n\n  # if the distances are equal, round away from zero\n  if dist_up == dist_down:\n    return int((value > 0) * (value + 0.5)) or int((value < 0) * (value - 0.5))\n\n  # otherwise, return the nearest integer\n  elif dist_up < dist_down:\n    return int(value + 0.5)\n  else:\n    return int(value)"}
{"task_id": "python/43", "language": "python", "completion": "if n <= 0:\n        return []\n\n    pile = [n]\n    while len(pile) < n:\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 1)\n\n    return pile\n\n# Test cases\nprint(make_a_pile(3)) # [3, 5, 7]\nprint(make_a_pile(4)) # [4, 6, 8, 10]\nprint(make_a_pile(1)) # [1]\nprint(make_a_pile(0)) # []"}
{"task_id": "python/44", "language": "python", "completion": "# Split the string by commas and spaces to get a list of words\n    words = s.replace(\",\", \"\").split()\n\n    return words"}
{"task_id": "python/45", "language": "python", "completion": "if x > y:  # wenn die erste Zahl gr\u00f6\u00dfer ist als die zweite, dann tauschen wir sie aus\n        x, y = y, x\n\n   for i in range(y, x-1, -1):  # wir starten von der oberen Grenze und z\u00e4hlen r\u00fcckw\u00e4rts\n       if i % 2 == 0:  # wenn die Zahl gerade ist\n           return i\n\n   return -1  # wenn keine gerade Zahl gefunden wurde, gibt die Funktion -1 zur\u00fcck"}
{"task_id": "python/46", "language": "python", "completion": "# Check if n is greater than m\n    if n > m:\n        return -1\n\n    # Calculate the average and round it to the nearest integer\n    avg = round((n + m) / 2)\n\n    # Convert the rounded average to binary\n    binary_avg = bin(avg)\n\n    return binary_avg"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                factorial = 1\n                for j in range(1, i+1):\n                    factorial *= j\n                result.append(factorial)\n            else:\n                sum = 0\n                for k in range(1, i+1):\n                    sum += k\n                result.append(sum)\n        return result\n\n   print(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)"}
{"task_id": "python/49", "language": "python", "completion": "if not arr:\n        return True\n\n    max_val = arr[-1]\n    max_index = len(arr) - 1\n\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] > max_val:\n            return False\n        elif arr[i] < max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index == len(arr) - 1"}
{"task_id": "python/50", "language": "python", "completion": "# Get the lists of odd numbers in both lists\n    lst1_odds = [x for x in lst1 if x % 2 != 0]\n    lst2_odds = [x for x in lst2 if x % 2 != 0]\n\n    # Get the lists of even numbers in both lists\n    lst2_evens = [x for x in lst2 if x % 2 == 0]\n\n    # Check if it's possible to exchange elements\n    if len(lst1_odds) <= len(lst2_evens):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "# Deleting the characters in s that are present in c\n    new_s = ''.join(char for char in s if char not in c)\n\n    # Checking if the resulting string is a palindrome\n    is_palindrome = new_s == new_s[::-1]\n\n    return (new_s, is_palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    total_buckets = 0\n    for row in grid:\n        well_water = sum(row)\n        if well_water != 0:\n            total_buckets += math.ceil(well_water / capacity)\n    return int(total_buckets)"}
{"task_id": "python/53", "language": "python", "completion": "# Define a function to count consonants in a word\n    def consonant_count(word):\n        return sum([1 for char in word if char.lower() not in 'aeiou'])\n\n    # Split the input string into words and filter based on consonant count\n    selected = [word for word in s.split(' ') if consonant_count(word) == n]\n\n    return selected"}
{"task_id": "python/54", "language": "python", "completion": "# Sortiere das Array in aufsteigender Reihenfolge\n    arr.sort()\n\n    # W\u00e4hle die letzten k Elemente aus dem sortierten Array aus, da sie die gr\u00f6\u00dften Zahlen sind\n    largest_k = arr[-k:]\n\n    return largest_k"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n       sum = 0\n       for i in range(k):\n           if arr[i] >= -99 and arr[i] <= 99: # checks if the number has at most two digits\n               sum += arr[i]\n       return sum\n\n    print(add_elements([111,21,3,4000,5,6,7,8,9], 4))  # should output 24"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    length = end - start + 1\n\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tribonacci(n):\n        if n==0:\n            return []\n        elif n==1:\n            return [1]\n        elif n==2:\n            return [1, 3]\n        else:\n            tri=[1, 3, 2]\n            for i in range(3,n+1):\n                if i%2==0:\n                    tri.append(int(1 + i / 2))\n                else:\n                    tri.append(tri[i-1]+tri[i-2]+tri[-1])\n            return tri[:n]\n    print(tribonacci(5))"}
{"task_id": "python/58", "language": "python", "completion": "if n < 1:\n        return \"Invalid Input\"\n\n    product = 1\n    has_odd_digit = False\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd_digit = True\n            product *= digit\n        n //= 10\n\n    return product if has_odd_digit else 0"}
{"task_id": "python/59", "language": "python", "completion": "count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            if count > 1:\n                return True\n            else:\n                count -= 1\n    return False"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded_num = round(num) if num > 0 else -round(-num) # rounding to nearest integer\n        squared_num = rounded_num ** 2\n        total += squared_num\n    return total\n\n# test cases\nprint(sum_squares([1,2,3])) # should print 14\nprint(sum_squares([1,4,9])) # should print 98\nprint(sum_squares([1,3,5,7])) # should print 84\nprint(sum_squares([1.4,4.2,0])) # should print 29\nprint(sum_squares([-2.4,1,1])) # should print 6"}
{"task_id": "python/61", "language": "python", "completion": "if not txt:\n        return False\n    elif txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    else:\n        return False"}
{"task_id": "python/62", "language": "python", "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "python/64", "language": "python", "completion": "def factorial(n):\n      if n == 0:\n         return 1\n      else:\n         return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n       result *= factorial(i)\n\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    result = ' '.join(prime_words)\n    return result"}
{"task_id": "python/66", "language": "python", "completion": "from fractions import Fraction\n\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n\n    product = x_frac * n_frac\n\n    return product.denominator == 1\n\n# Test the function\nprint(simplify(\"1/5\", \"5/1\")) # True\nprint(simplify(\"1/6\", \"2/1\")) # False\nprint(simplify(\"7/10\", \"10/2\")) # False"}
{"task_id": "python/67", "language": "python", "completion": "def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in ['1', '3', '5', '7', '9'] and str(abs(num))[-1] in ['1', '3', '5', '7', '9']:\n                count += 1\n        return count\n\n    # Test the function with given examples\n    print(specialFilter([15, -73, 14, -15]))  # Expected output: 1\n    print(specialFilter([33, -2, -3, 45, 21, 109]))  # Expected output: 2"}
{"task_id": "python/69", "language": "python", "completion": "# Create the array a where a[i] = i*i - i + 1 for each i from 1 to n.\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Count the number of valid triplets (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n   if planet1 not in planets or planet2 not in planets:\n       return ()\n\n   start, end = min(planets.index(planet1), planets.index(planet2)), max(planets.index(planet1), planets.index(planet2))\n   return tuple(planets[start + 1 : end])"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "sum = 0\n   for i in lst:\n       if type(i) is int and i > 0 and i % 2 == 1:\n           sum += (i*i)\n   return sum"}
{"task_id": "python/73", "language": "python", "completion": "max_strength = float(\"-inf\")\n    strongest_extension = None\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def rotation(word):\n        return word[1:] + word[0]\n\n    if b in a:\n        return True\n\n    for _ in range(len(b)):\n        b = rotation(b)\n        if b in a:\n            return True\n\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        result = ''\n        i = 0\n        while number > 0:\n            for _ in range(number // values[i]):\n                result += symbols[i]\n                number -= values[i]\n            i += 1\n        return result"}
{"task_id": "python/76", "language": "python", "completion": "# sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # check if it forms a right-angled triangle\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "python/77", "language": "python", "completion": "res = []\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            res.append(c.lower() if c.isupper() else c.upper())\n        else:\n            res.append(c)\n    return ''.join(res[::-1]) if not has_letter else ''.join(res)"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\n   def string_to_md5(text):\n       if text:\n           return hashlib.md5(text.encode()).hexdigest()\n       else:\n           return None\n\n   print(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')"}
{"task_id": "python/79", "language": "python", "completion": "if a > b:\n        a, b = b, a\n\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return result\n\nprint(generate_integers(2,8))\nprint(generate_integers(8,2))\nprint(generate_integers(10,14))"}

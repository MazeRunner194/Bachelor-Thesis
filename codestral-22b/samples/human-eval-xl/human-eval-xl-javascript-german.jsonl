{"task_id": "javascript/0", "language": "javascript", "completion": "let balance = 0;\n   for (let i = 0; i < operations.length; i++) {\n     balance += operations[i];\n     if (balance < 0) {\n       return true;\n     }\n   }\n   return false;\n }"}
{"task_id": "javascript/1", "language": "javascript", "completion": "// initialize sum and product to 0 and 1 respectively\n    let sum = 0;\n    let product = 1;\n\n    // loop through the numbers array\n    for (let i = 0; i < numbers.length; i++) {\n        // add each number to sum\n        sum += numbers[i];\n        // multiply each number to product\n        product *= numbers[i];\n    }\n\n    // return sum and product as a tuple\n    return [sum, product];\n}\n\n// test cases\nconsole.log(sumProduct([]));         // output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4]));   // output: [10, 24]"}
{"task_id": "javascript/2", "language": "javascript", "completion": "let result = '';\n   for (let i = 0; i < a.length; i++) {\n     if (a[i] === b[i]) {\n       result += '0';\n     } else {\n       result += '1';\n     }\n   }\n   return result;\n }"}
{"task_id": "javascript/3", "language": "javascript", "completion": "if (strings.length === 0) {\n      return null;\n    }\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n      if (strings[i].length > longestString.length) {\n        longestString = strings[i];\n      }\n    }\n\n    return longestString;\n  }"}
{"task_id": "javascript/4", "language": "javascript", "completion": "// Wenn b gleich 0 ist, gib a zur\u00fcck, da der gr\u00f6\u00dfte gemeinsame Teiler von a und 0 immer a ist.\n    if (b == 0) return a;\n\n    // Rufe die Funktion rekursiv auf mit den Argumenten b und dem Rest der Division von a durch b.\n    return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "// Array der deutschen Zahlenw\u00f6rter\n    const germanNumbers = ['null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht', 'neun'];\n\n    // String in ein Array von Worten aufteilen\n    let words = numbers.split(' ');\n\n    // Jedes Wort durch die entsprechende Zahl ersetzen\n    for (let i = 0; i < words.length; i++) {\n        words[i] = germanNumbers.indexOf(words[i]);\n    }\n\n    // Array sortieren\n    words.sort((a, b) => a - b);\n\n    // Zur\u00fcck in deutsche W\u00f6rter umwandeln und wieder zu einem String verbinden\n    for (let i = 0; i < words.length; i++) {\n        words[i] = germanNumbers[words[i]];\n    }\n\n    return words.join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "if (numbers.length < 2) {\n    throw new Error(\"Die Liste muss mindestens zwei Elemente enthalten.\");\n  }\n\n  let minNumber = Math.min(...numbers);\n  let maxNumber = Math.max(...numbers);\n\n  return numbers.map((number) => (number - minNumber) / (maxNumber - minNumber));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < string.length; i++) {\n      const char = string[i];\n      if (char === char.toLowerCase()) {\n        result += char.toUpperCase();\n      } else {\n        result += char.toLowerCase();\n      }\n    }\n    return result;\n  }"}
{"task_id": "javascript/8", "language": "javascript", "completion": "let result = [];\n   for (let i = 0; i < l.length; i++) {\n       if (l[i] > 0) {\n           result.push(l[i]);\n       }\n   }\n   return result;\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "if (n <= 1) {\n       return false;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "// Erstelle ein leeres Set, um die eindeutigen Elemente zu speichern.\n    const uniqueSet = new Set();\n\n    // Durchlaufe die Liste und f\u00fcge jedes Element dem Set hinzu.\n    for (const element of l) {\n      uniqueSet.add(element);\n    }\n\n    // Konvertiere das Set zur\u00fcck in eine Liste und sortiere diese aufsteigend.\n    const sortedUniqueArray = Array.from(uniqueSet).sort((a, b) => a - b);\n\n    return sortedUniqueArray;\n  }"}
{"task_id": "javascript/11", "language": "javascript", "completion": "// Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\n    function isPrime(num) {\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) return false;\n        }\n        return num > 1;\n    }\n\n    // Funktion zur Berechnung der n-ten Fibonacci-Zahl\n    function fib(n) {\n        let a = 0, b = 1, temp;\n        for (let i = 1; i <= n; i++) {\n            temp = a;\n            a = b;\n            b += temp;\n        }\n        return a;\n    }\n\n    // Z\u00e4hler f\u00fcr die gefundenen Prim-Fibonacci-Zahlen\n    let count = 0;\n\n    // Index f\u00fcr die aktuelle Fibonacci-Zahl\n    let index = 1;\n\n    // Solange nicht genug Prim-Fibonacci-Zahlen gefunden wurden\n    while (count < n) {\n        // Berechne die aktuelle Fibonacci-Zahl\n        let fibNum = fib(index);\n\n        // Wenn sie prim ist, erh\u00f6he den Z\u00e4hler\n        if (isPrime(fibNum)) count++;\n\n        // Gehe zur n\u00e4chsten Fibonacci-Zahl\n        index++;\n    }\n\n    // Gib die letzte Prim-Fibonacci-Zahl zur\u00fcck\n    return fib(index - 1);\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "if (l.length < 3) return false;\n\n   l = l.sort((a, b) => a - b);\n\n   for (let i = 0; i < l.length - 2; i++) {\n     let left = i + 1;\n     let right = l.length - 1;\n\n     while (left < right) {\n       const sum = l[i] + l[left] + l[right];\n\n       if (sum === 0) return true;\n       else if (sum < 0) left++;\n       else right--;\n     }\n   }\n\n   return false;\n }"}
{"task_id": "javascript/13", "language": "javascript", "completion": "// Erstelle ein leeres Set\n    let numSet = new Set();\n\n    // Durchlaufe die Liste der Zahlen\n    for (let i = 0; i < l.length; i++) {\n        // \u00dcberpr\u00fcfe, ob das Negative des aktuellen Elements in dem Set enthalten ist\n        if (numSet.has(-l[i])) {\n            // Wenn ja, gibt True zur\u00fcck\n            return true;\n        } else {\n            // Andernfalls f\u00fcge das aktuelle Element zum Set hinzu\n            numSet.add(l[i]);\n        }\n    }\n\n    // Wenn kein Paar gefunden wurde, gibt False zur\u00fcck\n    return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "if (n === 0 || n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    let a = 0, b = 0, c = 2, d = 0, temp;\n\n    for(let i = 4; i <= n; i++) {\n        temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n\n    return d;\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "// Sortiere die Liste\n    l.sort((a, b) => a - b);\n\n    const length = l.length;\n\n    // Wenn die L\u00e4nge der Liste ungerade ist, gib das mittlere Element zur\u00fcck\n    if (length % 2 !== 0) {\n        return l[Math.floor(length / 2)];\n    } else {\n        // Wenn die L\u00e4nge der Liste gerade ist, gib den Mittelwert der beiden mittleren Elemente zur\u00fcck\n        const mid1 = l[(length - 1) / 2];\n        const mid2 = l[length / 2];\n        return (mid1 + mid2) / 2;\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "for (let i = 0; i < text.length / 2; i++) {\n     if (text[i] !== text[text.length - 1 - i]) {\n       return false;\n     }\n   }\n   return true;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "return text.replace(/[aeiou]/gi, \"\");\n }"}
{"task_id": "javascript/18", "language": "javascript", "completion": "return l.every((num) => num < t);\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "const charSet = new Set();\n\n   for (let i = 0; i < s0.length; i++) {\n     charSet.add(s0[i]);\n   }\n\n   for (let i = 0; i < s1.length; i++) {\n     if (!charSet.has(s1[i])) {\n       return false;\n     }\n   }\n\n   return true;\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "if (n <= 1) {\n     return n;\n   } else {\n     let a = 0, b = 1, temp;\n     for (let i = 2; i <= n; i++) {\n       temp = a + b;\n       a = b;\n       b = temp;\n     }\n     return b;\n   }\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "// L\u00f6sung mit Set\n    let setL1 = new Set(l1);\n    let setL2 = new Set(l2);\n    let intersection = new Set([...setL1].filter(x => setL2.has(x)));\n    return Array.from(intersection).sort((a, b) => a - b);\n\n    // L\u00f6sung mit map\n    // const counts = new Map();\n    // for (const num of l1) {\n    //   if (!counts.has(num)) {\n    //     counts.set(num, 1);\n    //   }\n    // }\n    // const result = [];\n    // for (const num of l2) {\n    //   if (counts.has(num)) {\n    //     result.push(num);\n    //     counts.delete(num);\n    //   }\n    // }\n    // return result.sort((a, b) => a - b);\n  }"}
{"task_id": "javascript/23", "language": "javascript", "completion": "let i = 2;\n   while (i <= n) {\n     if (n % i === 0) {\n       n /= i;\n     } else {\n       i++;\n     }\n   }\n   return i;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "// Initialisiere die Summe mit 0.\n    let sum = 0;\n\n    // Verwende eine for-Schleife, um von 1 bis n zu iterieren.\n    for (let i = 1; i <= n; i++) {\n        // F\u00fcge den aktuellen Wert der Summe hinzu.\n        sum += i;\n    }\n\n    // Gib die berechnete Summe zur\u00fcck.\n    return sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "const result = [];\n\n   for (let i = 1; i < xs.length; i++) {\n     result.push(i * xs[i]);\n   }\n\n   return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "// Basisf\u00e4lle:\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n\n  // Initialisiere die ersten drei FibFib-Zahlen:\n  let a = 0, b = 0, c = 1, temp;\n\n  // Berechne das n-te Element der FibFib-Zahlenfolge:\n  for (let i = 3; i <= n; i++) {\n    temp = a + b + c;\n    a = b;\n    b = c;\n    c = temp;\n  }\n\n  // Gebe das n-te Element der FibFib-Zahlenfolge zur\u00fcck:\n  return c;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "// Convert string to lowercase to make the comparison case-insensitive\n    s = s.toLowerCase();\n\n    // Initialize a counter for the number of vokals\n    let count = 0;\n\n    // Iterate over each character in the string\n    for (let i = 0; i < s.length; i++) {\n      const char = s[i];\n\n      // Check if the current character is a vowel\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        count++;\n      } else if (char === 'y' && i === s.length - 1) {\n        // Special case: 'y' is considered a vowel only at the end of the string\n        count++;\n      }\n    }\n\n    // Return the total number of vowels in the string\n    return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "// Erstellen Sie ein Objekt zum Z\u00e4hlen der H\u00e4ufigkeit jeder Zahl in der Liste.\n   let frequency = {};\n\n   // Durchlaufen Sie die Liste und z\u00e4hlen Sie die H\u00e4ufigkeit jedes Elements.\n   for (let num of lst) {\n     if (frequency[num]) {\n       frequency[num]++;\n     } else {\n       frequency[num] = 1;\n     }\n   }\n\n   // Durchlaufen Sie die Liste erneut und suchen Sie nach der gr\u00f6\u00dften Zahl,\n   // deren H\u00e4ufigkeit gr\u00f6\u00dfer oder gleich dem Wert der Zahl selbst ist.\n   let maxNum = -1;\n   for (let num of lst) {\n     if (frequency[num] >= num && num > maxNum) {\n       maxNum = num;\n     }\n   }\n\n   // Geben Sie die gr\u00f6\u00dfte Zahl zur\u00fcck oder -1, wenn kein solcher Wert gefunden wurde.\n   return maxNum;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "// \u00dcberpr\u00fcfen, ob die drei Seiten ein g\u00fcltiges Dreieck bilden\n   if (a + b > c && a + c > b && b + c > a) {\n     // Berechnung des halben Umfangs\n     const s = (a + b + c) / 2;\n\n     // Berechnung der Fl\u00e4che mit der Heronschen Formel und Rundung auf 2 Dezimalstellen\n     const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n     return parseFloat(area.toFixed(2));\n   } else {\n     // Wenn die Seiten kein g\u00fcltiges Dreieck bilden, gib -1 zur\u00fcck\n     return -1;\n   }\n }"}
{"task_id": "javascript/30", "language": "javascript", "completion": "// \u00dcberpr\u00fcfen, ob die Liste q ein Palindrom ist\n   function isPalindrome(arr) {\n       return arr.every((val, index) => val === arr[arr.length - 1 - index]);\n   }\n\n   if (!isPalindrome(q)) {\n       return false; // Wenn die Liste nicht ein Palindrom ist, gibt False zur\u00fcck\n   }\n\n   const sum = q.reduce((acc, cur) => acc + cur, 0); // Die Summe der Elemente in der Liste berechnen\n\n   if (sum > w) {\n       return false; // Wenn die Summe gr\u00f6\u00dfer als das maximale Gewicht ist, gibt False zur\u00fcck\n   }\n\n   return true; // Wenn beide Bedingungen erf\u00fcllt sind, gibt True zur\u00fcck\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "if (a < 2 || a >= 100) {\n       return false;\n    }\n\n    let count = 0;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n        while (a % i === 0) {\n            a /= i;\n            count++;\n        }\n        if (count > 3) {\n            return false;\n        }\n    }\n\n    if (a > 1) {\n        count++;\n    }\n\n    return count === 3;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "// Convert the decimal number to binary using toString method with base 2\n    let binary = decimal.toString(2);\n\n    // Add 'db' at the beginning and end of the binary string\n    return \"db\" + binary + \"db\";\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "if (s.length < 3) return false;\n   for (let i = 0; i < s.length - 2; i++) {\n     const group = s[i] + s[i+1] + s[i+2];\n     for (let j = i + 3; j < s.length - 2; j++) {\n       if ((s[j] + s[j+1] + s[j+2]) === group) return false;\n     }\n   }\n   return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 3.7 && grades[i] <= 4.0) {\n            letterGrades.push('A');\n        } else if (grades[i] > 3.3 && grades[i] < 3.7) {\n            letterGrades.push('A-');\n        } else if (grades[i] > 3.0 && grades[i] <= 3.3) {\n            letterGrades.push('B+');\n        } else if (grades[i] > 2.7 && grades[i] <= 3.0) {\n            letterGrades.push('B');\n        } else if (grades[i] > 2.3 && grades[i] <= 2.7) {\n            letterGrades.push('B-');\n        } else if (grades[i] > 2.0 && grades[i] <= 2.3) {\n            letterGrades.push('C+');\n        } else if (grades[i] > 1.7 && grades[i] <= 2.0) {\n            letterGrades.push('C');\n        } else if (grades[i] > 1.3 && grades[i] <= 1.7) {\n            letterGrades.push('C-');\n        } else if (grades[i] > 1.0 && grades[i] <= 1.3) {\n            letterGrades.push('D+');\n        } else if (grades[i] > 0.7 && grades[i] <= 1.0) {\n            letterGrades.push('D');\n        } else if (grades[i] > 0.0 && grades[i] <= 0.7) {\n            letterGrades.push('D-');\n        } else if (grades[i] === 0.0) {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  const length = string.length;\n  return isPrime(length);\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "// Convert the number to string and split it into an array of digits\n    const digits = n.toString().split('');\n\n    // Map each digit to a number and calculate the sum of all numbers\n    const sum = digits.map(Number).reduce((acc, curr) => acc + curr, 0);\n\n    // Convert the sum to binary representation using toString method with base 2 as argument\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "let coords = [];\n\n   for (let i = 0; i < lst.length; i++) {\n       for (let j = 0; j < lst[i].length; j++) {\n           if (lst[i][j] === x) {\n               coords.push([i, j]);\n           }\n       }\n   }\n\n   coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n\n   return coords;\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "if (lst.length < 2) {\n      return null;\n    }\n\n    let smallest = Infinity;\n    let secondSmallest = Infinity;\n\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        secondSmallest = smallest;\n        smallest = lst[i];\n      } else if (lst[i] < secondSmallest && lst[i] !== smallest) {\n        secondSmallest = lst[i];\n      }\n    }\n\n    return secondSmallest === Infinity ? null : secondSmallest;\n  }\n\n  console.log(nextSmallest([1, 2, 3, 4, 5])); // 2\n  console.log(nextSmallest([5, 1, 4, 3, 2])); // 2\n  console.log(nextSmallest([])); // null\n  console.log(nextSmallest([1, 1])); // null"}
{"task_id": "javascript/39", "language": "javascript", "completion": "let sentences = s.split(/[.!?]/);\n   let boredCount = 0;\n\n   for (let i = 0; i < sentences.length; i++) {\n     if (sentences[i].trim().startsWith(\"Ich\")) {\n       boredCount++;\n     }\n   }\n\n   return boredCount;\n }"}
{"task_id": "javascript/40", "language": "javascript", "completion": "let maxPrime = -Infinity;\n\n    for (let i = 0; i < lst.length; i++) {\n        const num = lst[i];\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n\n    return sumOfDigits(maxPrime);\n}\n\nfunction isPrime(n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction sumOfDigits(n) {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum;\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "// Check if the dictionary is empty\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allKeysLower = true;\n    let allKeysUpper = true;\n\n    for (let key in dict) {\n        // Check if the current key is not a string\n        if (typeof key !== 'string') {\n            return false;\n        }\n\n        // Check if the current key is not lower case\n        if (!key.toLowerCase() === key) {\n            allKeysLower = false;\n        }\n\n        // Check if the current key is not upper case\n        if (!key.toUpperCase() === key) {\n            allKeysUpper = false;\n        }\n    }\n\n    return allKeysLower || allKeysUpper;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "const num = parseFloat(value);\n\n   if (num === Math.floor(num)) {\n     return num;\n   } else {\n     const floorNum = Math.floor(num);\n     const ceilNum = Math.ceil(num);\n     const diffToFloor = num - floorNum;\n     const diffToCeil = ceilNum - num;\n\n     if (diffToFloor < diffToCeil) {\n       return floorNum;\n     } else if (diffToFloor > diffToCeil) {\n       return ceilNum;\n     } else {\n       // Wenn gleich weit von zwei Ganzzahlen entfernt, runden wir weg von Null.\n       return num > 0 ? floorNum : ceilNum;\n     }\n   }\n }"}
{"task_id": "javascript/43", "language": "javascript", "completion": "let result = [];\n\n   for (let i = 0; i < n; i++) {\n     if (i % 2 === 0) {\n       // If index is even, add the next odd number to the pile.\n       result.push(n + (2 * i));\n     } else {\n       // If index is odd, add the next even number to the pile.\n       result.push(n + (2 * i) - 1);\n     }\n   }\n\n   return result;\n }"}
{"task_id": "javascript/44", "language": "javascript", "completion": "return s.split(/[,\\s]+/);\n }"}
{"task_id": "javascript/45", "language": "javascript", "completion": "// Wir stellen sicher, dass x kleiner oder gleich y ist.\n   if (x > y) {\n     return -1;\n   }\n\n   // Wir starten die Suche von der gr\u00f6\u00dferen Zahl und gehen zu den kleineren Zahlen.\n   for (let i = y; i >= x; i--) {\n     // Wenn wir eine gerade Zahl finden, geben wir sie zur\u00fcck.\n     if (i % 2 === 0) {\n       return i;\n     }\n   }\n\n   // Wenn keine gerade Zahl im Bereich gefunden wurde, geben wir -1 zur\u00fcck.\n   return -1;\n }"}
{"task_id": "javascript/46", "language": "javascript", "completion": "if (n > m) return -1;\n\n   let sum = 0;\n   for (let i = n; i <= m; i++) {\n       sum += i;\n   }\n\n   const avg = Math.round((sum / (m - n + 1)));\n   return `0b${avg.toString(2)}`;\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "let result = [];\n   for(let i=1; i<=n; i++){\n     if(i%2==0){\n       let fact = 1;\n       for(let j=1; j<=i; j++)\n         fact *= j;\n       result.push(fact);\n     }else{\n       let sum = 0;\n       for(let j=1; j<=i; j++)\n         sum += j;\n       result.push(sum);\n     }\n   }\n   return result;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "let countEven = 0;\n    let countOdd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        const numStr = String(i);\n        const reversedNumStr = numStr.split('').reverse().join('');\n\n        if (numStr === reversedNumStr) {\n            if (i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n\n    return [countEven, countOdd];\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n      if (JSON.stringify(arr) === JSON.stringify(sortedArr)) {\n        return true;\n      }\n      arr.unshift(arr.pop());\n    }\n    return false;\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "// Filter out odd numbers from list 1 and even numbers from list 2\n    const oddLst1 = lst1.filter(num => num % 2 !== 0);\n    const evenLst2 = lst2.filter(num => num % 2 === 0);\n\n    // Check if the number of odd numbers in list 1 is less than or equal to the number of even numbers in list 2\n    return oddLst1.length <= evenLst2.length ? 'YES' : 'NO';\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "let result = '';\n\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n\n    const reversedResult = result.split('').reverse().join('');\n    const isPalindrome = result === reversedResult;\n\n    return [result, isPalindrome];\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\"));        // Expected output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));       // Expected output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\"));   // Expected output: ['cdedc', true]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "let n = grid.length; // number of wells\n    let m = grid[0].length; // length of each well\n    let count = 0; // number of times the bucket is lowered\n    let bucket = capacity; // current amount of water in the bucket\n\n    for (let j = 0; j < m; j++) { // iterate over each column\n        bucket = capacity; // reset the bucket\n        for (let i = 0; i < n; i++) { // iterate over each well in the column\n            if (grid[i][j] === 1) { // if there is water in the current well\n                if (bucket > 0) { // if the bucket is not empty\n                    grid[i][j] = 0; // remove the water from the well\n                    bucket--; // decrease the amount of water in the bucket\n                } else { // if the bucket is empty\n                    count++; // increment the number of times the bucket is lowered\n                    bucket = capacity - 1; // reset the bucket and remove one unit of water from the well\n                    grid[i][j] = 0; // remove the water from the well\n                }\n            }\n        }\n        if (bucket < capacity) { // if the bucket is not full at the end of the column\n            count++; // increment the number of times the bucket is lowered\n        }\n    }\n\n    return count;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "// Convert the string to an array of words\n    const words = s.split(' ');\n\n    // Define a function to count consonants in a word\n    const countConsonants = (word) => {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if ('bcdfghjklmnpqrstvwxyz'.includes(word[i].toLowerCase())) {\n                count++;\n            }\n        }\n        return count;\n    };\n\n    // Filter the words based on the number of consonants and map them to lowercase\n    const selectedWords = words.filter((word) => countConsonants(word) === n).map((word) => word.toLowerCase());\n\n    return selectedWords;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "if (k === arr.length) {\n      return arr;\n    }\n\n    let result = [];\n    for (let i = 0; i < k; i++) {\n      let maxIndex = 0;\n      for (let j = 1; j < arr.length; j++) {\n        if (arr[j] > arr[maxIndex]) {\n          maxIndex = j;\n        }\n      }\n      result.push(arr[maxIndex]);\n      arr.splice(maxIndex, 1);\n    }\n\n    return result;\n  }"}
{"task_id": "javascript/55", "language": "javascript", "completion": "let sum = 0;\n   for (let i = 0; i < k; i++) {\n     if (Math.abs(arr[i]) >= 10 && Math.abs(arr[i]) <= 99) {\n       sum += arr[i];\n     }\n   }\n   return sum;\n}\n\n// Test cases\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4)); // Output: 24\nconsole.log(addElements([10,20,-30,40,50], 3)); // Output: 20\nconsole.log(addElements([1,2,3,4,5], 5)); // Output: 6\nconsole.log(addElements([123,456,789], 1)); // Output: 0"}
{"task_id": "javascript/56", "language": "javascript", "completion": "const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    // Check if the intervals intersect\n    if (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n\n    // Calculate the length of intersection\n    const startIntersection = Math.max(start1, start2);\n    const endIntersection = Math.min(end1, end2);\n    const lengthIntersection = endIntersection - startIntersection + 1;\n\n    // Check if the length is a prime number\n    if (lengthIntersection < 2) {\n        return \"NO\";\n    }\n\n    for (let i = 2; i <= Math.sqrt(lengthIntersection); i++) {\n        if (lengthIntersection % i === 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "let result = [];\n    if (n >= 0) {\n      result.push(1);\n    }\n    if (n >= 1) {\n      result.push(3);\n    }\n    if (n >= 2) {\n      result.push(2);\n    }\n    for (let i = 3; i <= n; i++) {\n      if (i % 2 === 0) {\n        result.push((1 + i / 2));\n      } else {\n        let len = result.length;\n        result.push(result[len - 1] + result[len - 2] + result[len - 3]);\n      }\n    }\n    return result;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "// Convert the number to a string to easily iterate over its digits\n    const numString = n.toString();\n    let product = 1;\n    let hasOddDigit = false;\n\n    for (let i = 0; i < numString.length; i++) {\n      // Get the current digit and convert it back to a number\n      const digit = parseInt(numString[i]);\n\n      if (digit % 2 !== 0) {\n        // If the digit is odd, multiply it with the current product\n        product *= digit;\n        hasOddDigit = true;\n      }\n    }\n\n    return hasOddDigit ? product : 0;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "let openBrackets = 0;\n    let nestedBrackets = false;\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            openBrackets++;\n        } else if (string[i] === ']') {\n            if (openBrackets > 1) {\n                nestedBrackets = true;\n            }\n            openBrackets--;\n        }\n    }\n\n    return openBrackets === 0 && nestedBrackets;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     const num = Math.ceil(lst[i]);\n     sum += num * num;\n   }\n   return sum;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "// Entferne alle Leerzeichen am Ende des Strings\n    txt = txt.trimEnd();\n\n    // \u00dcberpr\u00fcfe, ob der letzte Charakter ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist\n    return /[a-zA-Z]$/.test(txt) && !/\\s[a-zA-Z]?$/.test(txt);\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "let minPositive = Infinity;\n   let maxNegative = -Infinity;\n\n   for (let num of lst) {\n     if (num > 0 && num < minPositive) {\n       minPositive = num;\n     } else if (num < 0 && num > maxNegative) {\n       maxNegative = num;\n     }\n   }\n\n   return [maxNegative !== -Infinity ? maxNegative : null, minPositive !== Infinity ? minPositive : null];\n }"}
{"task_id": "javascript/64", "language": "javascript", "completion": "// Check if n is less than or equal to 0, in which case the result would be undefined\n    if (n <= 0) {\n        return \"undefined\";\n    }\n\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        // Calculate the factorial of i and multiply it to the result\n        result *= factorial(i);\n    }\n    return result;\n}\n\n// Helper function to calculate the factorial of a number\nfunction factorial(num) {\n    let fact = 1;\n    for (let i = num; i > 0; i--) {\n        fact *= i;\n    }\n    return fact;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "const isPrime = num => {\n        if (num < 2) return false;\n        for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    const words = sentence.split(' ');\n    let result = '';\n\n    for (const word of words) {\n        if (isPrime(word.length)) {\n            result += `${word} `;\n        }\n    }\n\n    return result.trim();\n};"}
{"task_id": "javascript/66", "language": "javascript", "completion": "const xArray = x.split('/'); // Z\u00e4hler und Nenner von x aufteilen\n   const nArray = n.split('/'); // Z\u00e4hler und Nenner von n aufteilen\n\n   const xNumerator = parseInt(xArray[0]); // Z\u00e4hler von x in eine ganze Zahl umwandeln\n   const xDenominator = parseInt(xArray[1]); // Nenner von x in eine ganze Zahl umwandeln\n\n   const nNumerator = parseInt(nArray[0]); // Z\u00e4hler von n in eine ganze Zahl umwandeln\n   const nDenominator = parseInt(nArray[1]); // Nenner von n in eine ganze Zahl umwandeln\n\n   const resultNumerator = xNumerator * nNumerator; // Z\u00e4hler des Ergebnisses berechnen\n   const resultDenominator = xDenominator * nDenominator; // Nenner des Ergebnisses berechnen\n\n   return resultNumerator % resultDenominator === 0; // \u00dcberpr\u00fcfen, ob Z\u00e4hler durch Nenner ohne Rest teilbar ist\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "// Calculate the sum of digits for each number and store it in an array\n    const sumOfDigits = nums.map((num, index) => ({\n        num: num,\n        index: index,\n        sum: Math.abs(num).toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0),\n    }));\n\n    // Sort the array based on sum of digits and original index\n    sumOfDigits.sort((a, b) => {\n        if (a.sum === b.sum) {\n            return a.index - b.index;\n        } else {\n            return a.sum - b.sum;\n        }\n    });\n\n    // Extract the original numbers from the sorted array and return it\n    const orderedNums = sumOfDigits.map(item => item.num);\n    return orderedNums;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "let count = 0;\n   for (let i = 0; i < nums.length; i++) {\n     if (nums[i] > 10 && nums[i].toString()[0] % 2 !== 0 && nums[i].toString().slice(-1) % 2 !== 0) {\n       count++;\n     }\n   }\n   return count;\n }"}
{"task_id": "javascript/69", "language": "javascript", "completion": "let a = new Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = ['Merkur', 'Venus', 'Erde', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptun'];\n\n   let indexPlanet1 = planets.indexOf(planet1);\n   let indexPlanet2 = planets.indexOf(planet2);\n\n   if (indexPlanet1 === -1 || indexPlanet2 === -1) {\n       return ();\n   }\n\n   if (indexPlanet1 > indexPlanet2) {\n     [indexPlanet1, indexPlanet2] = [indexPlanet2, indexPlanet1]; // Swap the indices\n   }\n\n   let result = [];\n   for (let i = indexPlanet1 + 1; i < indexPlanet2; i++) {\n       result.push(planets[i]);\n   }\n\n   return result.length > 0 ? result : ();\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "if (isPrime(n)) {\n     return x;\n   } else {\n     return y;\n   }\n }\n\n function isPrime(num) {\n   for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n     if (num % i === 0) return false;\n   return num > 1;\n }"}
{"task_id": "javascript/72", "language": "javascript", "completion": "// Filter out numbers that are negative, not integers or even\n    const filteredLst = lst.filter((num) => num > 0 && Number.isInteger(num) && num % 2 !== 0);\n\n    // Calculate the sum of squares of filtered numbers\n    const sumOfSquares = filteredLst.reduce((sum, num) => sum + Math.pow(num, 2), 0);\n\n    return sumOfSquares;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "let maxStrength = -Infinity;\n   let result = '';\n\n   for (let ext of extensions) {\n       const cap = [...ext].filter(ch => ch === ch.toUpperCase()).length;\n       const sm = ext.length - cap;\n       const strength = cap - sm;\n\n       if (strength > maxStrength || (strength === maxStrength && extensions.indexOf(ext) < extensions.indexOf(result))) {\n           maxStrength = strength;\n           result = classname + '.' + ext;\n       }\n   }\n\n   return result;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "// Check if the string is a rotation of the pattern\n   function isRotation(str, pattern) {\n     const len = str.length;\n     for (let i = 0; i < len; i++) {\n       if (str.slice(i) + str.slice(0, i) === pattern) {\n         return true;\n       }\n     }\n     return false;\n   }\n\n   // Check if the pattern is a substring of the string\n   function isSubstring(str, pattern) {\n     return str.includes(pattern);\n   }\n\n   // Check if the pattern or its rotations are a substring of the string\n   const len = b.length;\n   for (let i = 0; i < len; i++) {\n     const rotation = b.slice(i) + b.slice(0, i);\n     if (isSubstring(a, rotation)) {\n       return true;\n     }\n   }\n   return false;\n }"}
{"task_id": "javascript/75", "language": "javascript", "completion": "if (number < 1 || number > 1000) {\n     return \"Invalid input. Please enter a number between 1 and 1000.\";\n   }\n\n   const romanNumerals = [\n     { value: 1000, numeral: 'm' },\n     { value: 900, numeral: 'cm' },\n     { value: 500, numeral: 'd' },\n     { value: 400, numeral: 'cd' },\n     { value: 100, numeral: 'c' },\n     { value: 90, numeral: 'xc' },\n     { value: 50, numeral: 'l' },\n     { value: 40, numeral: 'xl' },\n     { value: 10, numeral: 'x' },\n     { value: 9, numeral: 'ix' },\n     { value: 5, numeral: 'v' },\n     { value: 4, numeral: 'iv' },\n     { value: 1, numeral: 'i' }\n   ];\n\n   let result = '';\n\n   for (const romanNumeral of romanNumerals) {\n     while (number >= romanNumeral.value) {\n       result += romanNumeral.numeral;\n       number -= romanNumeral.value;\n     }\n   }\n\n   return result;\n }"}
{"task_id": "javascript/76", "language": "javascript", "completion": "// Sortiere die Seitenl\u00e4ngen aufsteigend\n    const sides = [a, b, c].sort((x, y) => x - y);\n\n    // \u00dcberpr\u00fcfe den Satz des Pythagoras\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "let isLetter = false;\n   let result = '';\n\n   for (let i = 0; i < s.length; i++) {\n     const charCode = s.charCodeAt(i);\n\n     if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) {\n       isLetter = true;\n       result += (charCode >= 65 && charCode <= 90) ? s[i].toLowerCase() : s[i].toUpperCase();\n     } else {\n       result += s[i];\n     }\n   }\n\n   if (!isLetter) {\n     return result.split('').reverse().join('');\n   }\n\n   return result;\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "if (text === '') {\n       return null;\n    } else {\n      // Create a new MD5 hash object.\n       const md5 = require('md5');\n\n      // Generate the md5 hash.\n       const hash = md5(text);\n\n      // Return the md5 hash as a string.\n       return hash;\n    }\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "// Swap a and b if necessary to ensure a is smaller than b\n    if (a > b) {\n      [a, b] = [b, a];\n    }\n\n    const result = [];\n\n    // Loop through all numbers from a to b (inclusive)\n    for (let i = a; i <= b; i++) {\n      // Check if the current number is even\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n\n    return result;\n  }"}

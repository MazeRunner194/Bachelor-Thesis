{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "for(let i=1; i < numbers.length; i++) {\n     if(Math.abs(numbers[i] - numbers[i-1]) < threshold) return true;\n   }\n   return false;\n}"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "const result: Array<string> = [];\n   let openCount = 0;\n   let startIndex = 0;\n\n   for(let i=0; i<paren_string.length; i++) {\n       if (paren_string[i] === '(') {\n           openCount++;\n       } else if (paren_string[i] === ')') {\n           openCount--;\n           if (openCount === 0) {\n               result.push(paren_string.slice(startIndex, i + 1));\n               startIndex = i + 1;\n           }\n       }\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "return number0 - Math.floor(number0);\n};"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "let balance = 0;\n\n    for(let i=0; i < operations.length; i++) {\n        balance += operations[i];\n\n        if(balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n};"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "if (!numbers || numbers.length === 0) {\n        throw new Error(\"Input array is empty or undefined\");\n    }\n\n    const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n\n    return numbers.reduce((acc, num) => acc + Math.abs(num - mean), 0) / numbers.length;\n}\n\n// Test the function with the provided example\nconsole.log(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "if(numbers.length <= 1){\n       return numbers;\n    } else {\n       let result: Array<number> = [numbers[0]];\n        for(let i = 1; i < numbers.length; i++){\n            result.push(delimeter);\n            result.push(numbers[i]);\n        }\n        return result;\n    }\n};"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "// Split the input string into individual groups of parentheses.\n    const parenGroups = paren_string.split(' ');\n\n    // Map each group to its maximum depth of nesting.\n    return parenGroups.map(group => {\n        let maxDepth = 0;\n        let currentDepth = 0;\n\n        for (let i = 0; i < group.length; i++) {\n            if (group[i] === '(') {\n                currentDepth++;\n                // Update the maximum depth if necessary.\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (group[i] === ')') {\n                currentDepth--;\n            }\n        }\n\n        return maxDepth;\n    });\n}"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "return strings.filter((str) => str.includes(substring));\n};"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "if(numbers.length == 0){\n        return [0,1];\n    }else{\n        let sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue);\n        let product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue);\n        return [sum,product]\n    }\n}"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const result = [];\n    let maxNum = -Infinity;\n\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > maxNum) {\n            maxNum = numbers[i];\n        }\n        result.push(maxNum);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "const reverseString = string0.split(\"\").reverse().join(\"\");\n\n   for(let i=0; i<string0.length; i++) {\n       if(string0.substring(i) === reverseString.substring(0, string0.length-i)) {\n           return string0 + reverseString.substring(string0.length-i);\n       }\n   }\n\n   // in case the input string is already a palindrome\n   return string0;\n};"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "if(a.length !== b.length) {\n        throw new Error(\"Input strings must be of the same length\");\n    }\n\n    let result = '';\n    for(let i=0; i<a.length; i++) {\n      // Perform binary XOR operation\n      if((a[i] === '1' && b[i] === '0') || (a[i] === '0' && b[i] === '1')) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "if(strings.length === 0) return None;\n\n   let maxLengthString = strings[0];\n   for(let i=1; i < strings.length; i++){\n     if(strings[i].length > maxLengthString.length){\n       maxLengthString = strings[i];\n     }\n   }\n\n   return maxLengthString;\n}"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "if (!b) {\n      return a;\n    }\n\n    return greatest_common_divisor(b, a % b);\n}"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "let result = [];\n    for(let i=1; i<=string0.length; i++){\n      result.push(string0.slice(0,i));\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "let result = \"\";\n\n   for (let i = 0; i <= n; i++) {\n     if (i > 0) {\n       result += \" \";\n     }\n     result += i.toString();\n   }\n\n   return result;\n };"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "return new Set(string0.toLowerCase()).size;\n};"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const notes = music_string.split(' ');\n  const beats = notes.map((note) => {\n    switch (note) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n        return 1;\n      default:\n        throw new Error(`Unknown note: ${note}`);\n    }\n  });\n  return beats;\n};"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "let count = 0;\n   for(let i = 0; i <= string0.length - substring.length; i++){\n       if(string0.substring(i, i + substring.length) === substring){\n           count++;\n       }\n   }\n   return count;\n};"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const numMap: {[key: string]: number} = {\n     \"zero\": 0,\n     \"one\": 1,\n     \"two\": 2,\n     \"three\": 3,\n     \"four\": 4,\n     \"five\": 5,\n     \"six\": 6,\n     \"seven\": 7,\n     \"eight\": 8,\n     \"nine\": 9\n   };\n\n   return numbers.split(' ')\n               .map(num => numMap[num])\n               .sort((a, b) => a - b)\n               .map(num => {\n                 for (let key in numMap) {\n                   if (numMap[key] === num) return key;\n                 }\n               })\n               .join(' ');\n};"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "// Sort the numbers array in ascending order\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n\n    // Initialize variables to store the closest pair and their difference\n    let closestPair = [sortedNumbers[0], sortedNumbers[1]];\n    let smallestDiff = Math.abs(closestPair[1] - closestPair[0]);\n\n    // Loop through the sorted array, comparing each number to its next one\n    for (let i = 1; i < sortedNumbers.length - 1; i++) {\n        const diff = Math.abs(sortedNumbers[i + 1] - sortedNumbers[i]);\n\n        // If the current difference is smaller than the smallest found so far, update the closest pair and the smallest difference\n        if (diff < smallestDiff) {\n            closestPair = [sortedNumbers[i], sortedNumbers[i + 1]];\n            smallestDiff = diff;\n        }\n    }\n\n    // Return the closest pair\n    return closestPair;\n};"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "// Find the minimum and maximum values in the array\n   const min = Math.min(...numbers);\n   const max = Math.max(...numbers);\n\n   // Calculate the scale factor\n   const scale = 1 / (max - min);\n\n   // Apply the linear transform to each number in the array\n   return numbers.map((number) => (number - min) * scale);\n}"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "return values.filter(value => Number.isInteger(value));\n};"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "return string0.length;\n};"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "for(let i=n-1; i>0; i--){\n      if(n%i == 0){\n        return i;\n      }\n    }\n    return -1; // this case should not happen as per the problem statement\n}"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (math.mod(n, i) === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "const counts = numbers.reduce((acc, curr) => {\n        acc[curr] = (acc[curr] || 0) + 1;\n        return acc;\n    }, {});\n\n    return numbers.filter(num => counts[num] === 1);\n}"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "return [...string0].map(char => char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()).join('');\n};"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "return strings.join('');\n};"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "return l.filter(n => n > 0);\n};"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "if (n <= 1) return false;\n  if (n === 2) return true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "let thirds = l.filter((_, i) => i % 3 === 2);\n  thirds.sort((a, b) => a - b);\n  return l.map((val, i) => (i % 3 === 2 ? thirds.shift() : val));\n};"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "let max = l[0];\n   for (let i = 1; i < l.length; i++) {\n     if (l[i] > max) {\n       max = l[i];\n     }\n   }\n   return max;\n };"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "let count = 0;\n\n   for (let i = 1; i < n; i++) {\n       if (i % 11 === 0 || i % 13 === 0) {\n           const digits = Array.from(String(i), Number);\n           count += digits.filter(digit => digit === 7).length;\n       }\n   }\n\n   return count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const evenIndices = l.filter((_, i) => i % 2 === 0);\n  const sortedEvens = [...evenIndices].sort((a, b) => a - b);\n\n  return l.map((value, i) => (i % 2 === 0 ? sortedEvens.shift()! : value));\n}"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "// Function to check if a number is prime\n  const isPrime = (num: number): boolean => {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  // Function to generate fibonacci series up to nth term\n  const fibonacci = (n: number): number => {\n    let a = BigInt(0);\n    let b = BigInt(1);\n    for(let i = 0; i < n; i++) {\n      [a, b] = [b, a + b];\n    }\n    return Number(a);\n  }\n\n  // Find the nth prime fibonacci number\n  let count = 0;\n  let num = 1;\n  while(count < n) {\n    num++;\n    const fibNum = fibonacci(num);\n    if(isPrime(fibNum)) {\n      count++;\n    }\n  }\n\n  return fibonacci(num);\n}"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "// sorting the array\n    l.sort((a, b) => a - b);\n\n    for(let i=0;i<l.length-2;i++){\n        let left = i+1;\n        let right = l.length - 1;\n\n        while(left < right){\n            const sum = l[i] + l[left] + l[right];\n\n            if(sum === 0) {\n                return true; // three elements sum to zero\n            } else if (sum < 0) {\n                left++; // increase the sum by moving to the right in the array\n            } else {\n                right--; // decrease the sum by moving to the left in the array\n            }\n        }\n    }\n    return false; // no three elements sum to zero\n}"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "// Since cars are moving simultaneously and at the same speed,\n   // every time a left-to-right car meets a right-to-left car, a collision occurs.\n   // There are n cars in each direction, so there will be n collisions.\n   return n;\n};"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "return l.map((x) => x + 1);\n};"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "if (l.length < 2) return false;\n\n    let set = new Set();\n    for(let i=0; i<l.length; i++){\n        if(set.has(-l[i])) return true;\n        else set.add(l[i]);\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "let result = '';\n   while (x > 0) {\n     result = String(x % base) + result;\n     x = Math.floor(x / base);\n   }\n   return result;\n}"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "// Formula for the area of a triangle is (base * height) / 2\n  return (a * h) / 2;\n}"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "if (n < 0) throw new Error(\"n must be non-negative\");\n\n   let a = 0;\n   let b = 0;\n   let c = 2;\n   let d = 0;\n\n   for (let i = 3; i <= n; ++i) {\n     const temp = a + b + c + d;\n     a = b;\n     b = c;\n     c = d;\n     d = temp;\n   }\n\n   return n === 0 || n === 1 ? 0 : d;\n };"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "// Sort the array in ascending order\n    const sortedArr = l.slice().sort((a, b) => a - b);\n\n    // Find the middle index of the sorted array\n    const midIndex = Math.floor(sortedArr.length / 2);\n\n    // If the length is odd, return the middle element\n    if (sortedArr.length % 2 === 1) {\n        return sortedArr[midIndex];\n    } else {\n        // If the length is even, return the average of the two middle elements\n        return (sortedArr[midIndex - 1] + sortedArr[midIndex]) / 2;\n    }\n};"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "if (text === '') return true;\n\n   let start = 0, end = text.length - 1;\n\n   while (start < end) {\n       if (text[start] !== text[end]) {\n           return false;\n       }\n       start++;\n       end--;\n   }\n   return true;\n};"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "let result = 1;\n   for (let i = 0; i < n; i++) {\n       result = (result * 2) % p;\n   }\n   return result;\n};"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n   return text.split('').filter(char => !vowels.includes(char.toLowerCase())).join('');\n};"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "for (let i = 0; i < l.length; i++) {\n     if (l[i] >= t) {\n       return false;\n     }\n   }\n   return true;\n };"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "const countChars = (str: string): Record<string, number> => {\n      return str.split('').reduce((acc, char) => {\n        acc[char] = (acc[char] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n    };\n\n    const countS0 = countChars(s0);\n    const countS1 = countChars(s1);\n\n    for (let char in countS0) {\n      if (!(char in countS1) || countS0[char] !== countS1[char]) {\n        return false;\n      }\n    }\n\n    for (let char in countS1) {\n      if (!(char in countS0)) {\n        return false;\n      }\n    }\n\n    return true;\n  };"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "if (n <= 1) return n;\n  let a = 0, b = 1;\n  for (let i = 2; i <= n; i++) {\n    [a, b] = [b, a + b];\n  }\n  return b;\n}"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "let count = 0;\n   for(let i = 0; i < brackets.length; i++) {\n     if(brackets[i] === \"<\") {\n       count++;\n     } else if(brackets[i] === \">\") {\n       count--;\n       if(count < 0) {\n         return false;\n       }\n     }\n   }\n   return count === 0;\n };"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "if(l.length <= 2) return true;\n\n   const increasing = l[1] > l[0];\n   for(let i = 2; i < l.length; i++) {\n       if((increasing && l[i] < l[i - 1]) || (!increasing && l[i] > l[i - 1])) return false;\n   }\n   return true;\n};"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "// Use Set to store unique elements from both lists\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n\n  // Create a new Set to store the common elements\n  const commonSet = new Set();\n\n  // Iterate over one of the Sets and check if the element exists in the other Set\n  for (let num of set1) {\n    if (set2.has(num)) {\n      commonSet.add(num);\n    }\n  }\n\n  // Convert the Set to an Array and sort it\n  const commonArray = Array.from(commonSet).sort((a, b) => a - b);\n\n  return commonArray;\n};"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "let largestPrime = -1;\n\n  // remove any factors of 2 first\n  while (n % 2 === 0) {\n    largestPrime = 2;\n    n /= 2;\n  }\n\n  // check odd numbers up to the square root of n\n  for(let i = 3; i <= Math.sqrt(n); i += 2){\n    while (n % i === 0) {\n      largestPrime = i;\n      n /= i;\n    }\n  }\n\n  // if n is a prime number greater than 2, it will be the largest prime factor\n  if (n > 2) {\n    largestPrime = n;\n  }\n\n  return largestPrime;\n}"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "let sum = 0;\n   for (let i=1; i<=n; i++) {\n       sum += i;\n   }\n   return sum;\n}"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "let count = 0;\n\n  for(let i = 0; i < brackets.length; i++) {\n    if(brackets[i] === '(') {\n      count++;\n    } else if (brackets[i] === ')') {\n      count--;\n    }\n    if (count < 0) {\n        return false;\n    }\n  }\n\n  return count === 0;\n}"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "return xs.slice(1).map((coeff, i) => coeff * (i + 1));\n};"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "if (n <= 3) {\n        return n === 0 ? 0 : (n === 1 || n === 2 ? 0 : 1);\n    }\n\n    let a = 0, b = 0, c = 1, next;\n\n    for(let i=4; i<=n; i++) {\n        next = a + b + c;\n        a = b;\n        b = c;\n        c = next;\n    }\n\n    return c;\n}"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowelSet = new Set(['a', 'e', 'i', 'o', 'u']);\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i].toLowerCase();\n    if ((char === 'y' && i === s.length - 1) || vowelSet.has(char)) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "let digits = x.toString().split('');\n   let length = digits.length;\n\n   if(shift > length){\n       return digits.reverse().join(\"\");\n   } else {\n       for(let i=0;i<shift;i++){\n           let temp = digits.pop();\n           digits.unshift(temp!);\n       }\n       return digits.join(\"\");\n   }\n}"}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "return [...s].reduce((acc, char) => {\n      if(char === char.toUpperCase() && char !== char.toLowerCase()) {\n        acc += char.charCodeAt(0);\n      }\n      return acc;\n    }, 0);\n}"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const [applesStr, orangesStr] = s.split(' and ');\n  const apples = parseInt(applesStr.match(/\\d+/)![0]);\n  const oranges = parseInt(orangesStr.match(/\\d+/)![0]);\n  return n - apples - oranges;\n};"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "let smallestEvenValue = Infinity;\n  let smallestIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue) {\n      smallestEvenValue = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  return smallestIndex !== -1 ? [smallestEvenValue, smallestIndex] : [];\n};"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "const counterMap = new Map();\n    for(let i = 0; i < lst.length; i++) {\n      if(!counterMap.has(lst[i])){\n        counterMap.set(lst[i],1);\n      } else {\n        counterMap.set(lst[i],counterMap.get(lst[i])+1)\n      }\n    }\n    let result = -1;\n    for (let [key, value] of counterMap.entries()) {\n      if (value >= key && key > result){\n        result = key;\n      }\n    }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "let sortedList = lst.slice().sort((a, b) => a - b); // Sort the list in ascending order\n  let result: Array<number> = [];\n\n  while(sortedList.length > 0){\n    if(sortedList.length === 1){\n      result.push(sortedList[0]); // Push last remaining element\n      break;\n    }\n    result.push(sortedList.shift() as number); // Push smallest element first\n    result.push(sortedList.pop() as number); // Then push the largest element\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    return parseFloat(area.toFixed(2));\n};"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "const sum = q.reduce((acc, curr) => acc + curr, 0);\n\n   if (sum > w) {\n       return false; // Too heavy to fly\n   }\n\n   for (let i = 0; i < Math.floor(q.length / 2); i++) {\n       if (q[i] !== q[q.length - 1 - i]) {\n           return false; // Not balanced\n       }\n   }\n\n   return true; // Balanced and light enough to fly\n}"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "let changes = 0;\n   for (let i = 0; i < arr.length / 2; i++) {\n     if (arr[i] !== arr[arr.length - i - 1]) {\n       changes++;\n     }\n   }\n   return changes;\n };"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "let sum1 = lst1.reduce((a, b) => a + b.length, 0);\n    let sum2 = lst2.reduce((a, b) => a + b.length, 0);\n\n    return sum1 <= sum2 ? lst1 : lst2;\n};"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n   let factors = [];\n   for(let i=0;i<primes.length;i++){\n     while(a%primes[i] == 0){\n       factors.push(primes[i]);\n       a /= primes[i];\n     }\n   }\n   if(factors.length !==3 || a>1) return false;\n   return true;\n};"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "if (n === 1) return x === 1;\n\n   let temp = 1;\n   while (temp < x) {\n       temp *= n;\n   }\n\n   return temp === x;\n};"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "return Math.round(Math.cbrt(Math.abs(a))) ** 3 === Math.abs(a);\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "const primes = ['2', '3', '5', '7', 'B', 'D'];\n   let count = 0;\n\n   for(let i=0; i<num.length; i++) {\n     if (primes.includes(num[i])){\n       count += 1;\n     }\n   }\n\n   return count;\n}"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "return 'db' + decimal.toString(2) + 'db';\n};"}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i <= s.length - 3; i++) {\n        const set = new Set(s[i] + s[i + 1] + s[i + 2]);\n        if (set.size !== 3) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "let letterGrades : Array<string> = [];\n\n   for(let i = 0; i < grades.length; i++) {\n     if(grades[i] == 4.0) {\n       letterGrades.push('A+');\n     } else if(grades[i] > 3.7 && grades[i] <= 4.0) {\n       letterGrades.push('A');\n     } else if(grades[i] > 3.3 && grades[i] <= 3.7) {\n       letterGrades.push('A-');\n     } else if(grades[i] > 3.0 && grades[i] <= 3.3) {\n       letterGrades.push('B+');\n     } else if(grades[i] > 2.7 && grades[i] <= 3.0) {\n       letterGrades.push('B');\n     } else if(grades[i] > 2.3 && grades[i] <= 2.7) {\n       letterGrades.push('B-');\n     } else if(grades[i] > 2.0 && grades[i] <= 2.3) {\n       letterGrades.push('C+');\n     } else if(grades[i] > 1.7 && grades[i] <= 2.0) {\n       letterGrades.push('C');\n     } else if(grades[i] > 1.3 && grades[i] <= 1.7) {\n       letterGrades.push('C-');\n     } else if(grades[i] > 1.0 && grades[i] <= 1.3) {\n       letterGrades.push('D+');\n     } else if(grades[i] > 0.7 && grades[i] <= 1.0) {\n       letterGrades.push('D');\n     } else if(grades[i] >= 0.0 && grades[i] <= 0.7) {\n       letterGrades.push('D-');\n     } else if(grades[i] == 0.0){\n       letterGrades.push('E');\n     }\n   }\n\n   return letterGrades;\n };"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "let isPrime = true;\n   const length = string0.length;\n\n   if(length <=1){\n      return false;\n   }\n\n   for(let i=2; i<=Math.sqrt(length); i++){\n       if(length % i === 0){\n           isPrime = false;\n           break;\n       }\n   }\n\n   return isPrime;\n};\n\nconsole.log(prime_length('Hello')); //True\nconsole.log(prime_length('abcdcba')); //True\nconsole.log(prime_length('kittens')); //True\nconsole.log(prime_length('orange')); //False"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "if (n === 1) return 2; // single digit numbers starting or ending with 1 are 1 and 10\n\n   let count = 9; // for the first position, we have 9 options (from 2 to 9)\n   let prevCount = 9; // number of options for the previous position\n\n   for(let i=2; i<=n; i++) {\n      const currCount = prevCount * 10 - 1; // each subsequent position has 10 options, but we subtract 1 to exclude numbers that start with 1\n      count += currCount*2; // we add the number of options for starting and ending with 1 (which is twice the current count)\n      prevCount = currCount; // update the previous count\n   }\n\n   return count;\n}"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "let binaryNumber = N.toString(2); // Convert to binary and convert to string\n   let sum = 0;\n\n   for (let i = 0; i < binaryNumber.length; i++) {\n       sum += parseInt(binaryNumber[i]); // Add each digit to the sum\n   }\n\n   return sum.toString(2); // Convert the sum to binary and return as a string\n};"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "return lst.filter((_, index) => index % 2 !== 0 && _ % 2 === 0).reduce((a, b) => a + b, 0);\n};"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "return s.split(' ')\n             .map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join(''))\n             .join(' ');\n}"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "let result: Array<[number, number]> = [];\n\n   for (let i = 0; i < lst.length; i++) {\n     for (let j = 0; j < lst[i].length; j++) {\n       if (lst[i][j] === x) {\n         result.push([i, j]);\n       }\n     }\n   }\n\n   // Sort by rows in ascending order and then by columns in descending order\n   result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n\n   return result;\n };"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "// Make a copy of the given array\n  let sortedArray = [...array];\n\n  // Check if the sum of the first and last elements is odd or even\n  const sum = array[0] + array[array.length - 1];\n\n  // Sort the copied array based on the condition\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n\n  return sortedArray;\n}"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n   let result = \"\";\n\n   for(let i = 0; i < s.length; i++) {\n       if(alphabet.indexOf(s[i]) === -1) {\n           // If the character is not a letter, just append it to the result\n           result += s[i];\n           continue;\n       }\n       let newIndex = (alphabet.indexOf(s[i]) + 2 * 2) % alphabet.length;\n       if(newIndex < 0) {\n           // In case of wrapping around the end of the alphabet\n           newIndex += alphabet.length;\n       }\n       result += alphabet[newIndex];\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const sortedArr = lst.sort((a, b) => a - b);\n   for(let i=0;i < sortedArr.length-1; i++) {\n     if(sortedArr[i] !== sortedArr[i+1]) {\n       return sortedArr[i+1];\n     }\n   }\n   return null;\n}"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const sentences = S.match(/[^.!?]+/g); // split the string into sentences\n  if (!sentences) return 0;\n  let boredomCount = 0;\n  for (let sentence of sentences) {\n    if (sentence.trim().startsWith('I')) {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n}"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y === z || x + z === y || y + z === x;\n  }\n  return false;\n}"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const vowelsMap: Record<string, string> = {\n      'a': 'c',\n      'e': 'g',\n      'i': 'k',\n      'o': 'm',\n      'u': 'y',\n    };\n\n    let result = '';\n\n    for (let char of message) {\n      if (char.toLowerCase() in vowelsMap) {\n        result += char === char.toLowerCase() ? vowelsMap[char] : vowelsMap[char.toLowerCase()].toUpperCase();\n      } else {\n        result += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n      }\n    }\n\n    return result;\n  };"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "const isPrime = num => {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  let maxPrime = -1;\n  lst.forEach((num) => {\n    if(isPrime(num))\n      maxPrime = Math.max(maxPrime, num);\n  })\n\n  const sumOfDigits = (num) => {\n    return num.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n  }\n\n  return maxPrime > -1 ? sumOfDigits(maxPrime) : 0;\n};"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "if(dict.size === 0){\n       return false;\n   }\n\n   let isAllLowerCase = true;\n   let isAllUpperCase = true;\n\n   for(let [key] of dict) {\n     if(typeof key !== \"string\") {\n         return false;\n     }\n     if(!key.toLowerCase() === key){\n       isAllLowerCase = false;\n     }\n     if(!key.toUpperCase() === key){\n       isAllUpperCase = false;\n     }\n   }\n\n   return isAllLowerCase || isAllUpperCase;\n};"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const primes: number[] = [];\n\n   for (let i = 2; i < n; i++) {\n     if (isPrime(i)) {\n       primes.push(i);\n     }\n   }\n\n   return primes;\n };\n\n // Helper function to check if a number is prime\n const isPrime = function (num: number) : boolean  {\n   for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n     if (num % i === 0) {\n       return false;\n     }\n   }\n   return num > 1;\n };"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "// Get the unit digits of both numbers by using the modulo operator with 10\n  const lastDigitA = Math.abs(a % 10);\n  const lastDigitB = Math.abs(b % 10);\n\n  // Return the product of the unit digits\n  return lastDigitA * lastDigitB;\n}"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "let count = 0;\n   for(let i=0;i<s.length;i+=2){\n       if(\"AEIOU\".includes(s[i])){\n           count++;\n       }\n   }\n   return count;\n};"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "const floatValue = parseFloat(value);\n  if (!isNaN(floatValue)) {\n    if (floatValue >= 0) {\n      return Math.round(floatValue + (floatValue % 1 === 0.5 ? 0.5 : 0));\n    } else {\n      return Math.round(floatValue - (floatValue % 1 === -0.5 ? 0.5 : 0));\n    }\n  } else {\n    throw new Error(\"Invalid input\");\n  }\n};"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const result: number[] = [];\n    let currentNum = n;\n\n    for (let i = 0; i < n; i++) {\n      result.push(currentNum);\n      if (currentNum % 2 === 0) {\n        currentNum += 2;\n      } else {\n        currentNum += 1;\n      }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "// Split the input string using both commas and spaces as delimiters.\n    const wordsArray = s.split(/[ ,]+/);\n\n    // Return the array of words.\n    return wordsArray;\n}"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "if (x > y) return -1;\n\n   for (let i = y; i >= x; i--) {\n     if (i % 2 === 0) return i;\n   }\n\n   return -1;\n}"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "if (n > m) return -1;\n\n   const avg = Math.round((n + m) / 2);\n   const binaryAvg = avg.toString(2);\n\n   return `0b${binaryAvg}`;\n};"}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "// filter out numbers with even digits and sort the remaining ones\n  return x.filter(num => !String(num).split('').some(digit => parseInt(digit) % 2 === 0))\n             .sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "const names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\n   return arr\n     .filter(num => num >= 1 && num <= 9)\n     .sort((a, b) => a - b)\n     .reverse()\n     .map(num => names[num]);\n }\n\n console.log(by_length([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n console.log(by_length([])); // []\n console.log(by_length([1, -1 , 55])); // ['One']"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const result: number[] = [];\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            let sum = 0;\n            for (let k = 1; k <= i; k++) {\n                sum += k;\n            }\n            result.push(sum);\n        }\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "let evenCount = 0;\n    let oddCount = 0;\n\n    for(let i=1; i<=n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\nconst isPalindrome = function (num: number) : boolean {\n    let reversedNum = parseInt(num.toString().split('').reverse().join(''));\n    return num === reversedNum;\n}"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "return arr.filter(x => Math.abs(x).toString().split(\"\").reduce((a,b)=>parseInt(a)+parseInt(b),0)>0).length;\n}"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "if(arr.length <= 1) return true;\n\n    let sortedArr = [...arr].sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++) {\n        let j = (i + 1) % arr.length;\n        if(arr[i] > arr[j]) {\n            return false;\n        }\n    }\n\n    for(let i = 0; i < arr.length; i++) {\n        if(sortedArr[0] === arr[(i + arr.length) % arr.length]) {\n            let flag = true;\n            for(let j = 1; j < arr.length; j++) {\n                if(sortedArr[j] !== arr[(i + j + arr.length) % arr.length]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "// Filter out all odd numbers from list1 and even numbers from list2\n    const oddsInLst1 = lst1.filter(num => num % 2 !== 0);\n    const evensInLst2 = lst2.filter(num => num % 2 === 0);\n\n    // If number of odd numbers in list1 is less than or equal to the number of even numbers in list2,\n    // it means we can exchange elements between them to make all elements of list1 even.\n    if (oddsInLst1.length <= evensInLst2.length) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n};"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "let freqMap = new Map();\n    let maxFreq = -1;\n\n    for (let letter of test.split(' ')) {\n      if (!freqMap.has(letter)) {\n        freqMap.set(letter, 0);\n      }\n      const currentFreq = freqMap.get(letter) + 1;\n      freqMap.set(letter, currentFreq);\n      maxFreq = Math.max(currentFreq, maxFreq);\n    }\n\n    let resultMap = new Map();\n    for (let [letter, freq] of freqMap) {\n      if (freq === maxFreq) {\n        resultMap.set(letter, freq);\n      }\n    }\n\n    return resultMap;\n};"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "let result = '';\n  for(let i=0;i<s.length;i++) {\n    if(!c.includes(s[i])) result+= s[i];\n  }\n  return [result, result === [...result].reverse().join('')]\n}"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const result: string[] = [];\n\n    for(let i=0; i<lst.length; i++){\n        let count: number = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "let currentMin = nums[0];\n   let globalMin = nums[0];\n\n   for(let i=1; i < nums.length; i++){\n       if(currentMin >= 0){\n           currentMin = nums[i]\n       }else{\n           currentMin += nums[i]\n       }\n       if(currentMin < globalMin){\n           globalMin = currentMin\n       }\n   }\n   return globalMin;\n};"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "let bucketsUsed = 0;\n   const numWells = grid[0].length;\n\n   // Iterate over each column of the grid (each well)\n   for (let i = 0; i < numWells; i++) {\n       let bucketFill = 0;\n\n       // Iterate over each row of the current well from bottom to top\n       for (let j = grid.length - 1; j >= 0; j--) {\n           if (grid[j][i] === 1) {\n               // If there's water in the current cell, fill up the bucket\n               bucketFill++;\n\n               // If the bucket is full, empty it and increment the bucketsUsed count\n               if (bucketFill === capacity) {\n                   bucketsUsed++;\n                   bucketFill = 0;\n               }\n           }\n       }\n\n       // If there's any water left in the bucket after filling up the well, empty it\n       if (bucketFill > 0) {\n           bucketsUsed++;\n       }\n   }\n\n   return bucketsUsed;\n};"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "return arr.sort((a, b) => {\n    const bitsA = a.toString(2).split('1').length - 1;\n    const bitsB = b.toString(2).split('1').length - 1;\n\n    if (bitsA === bitsB) {\n      return a - b;\n    }\n\n    return bitsA - bitsB;\n  });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "if (!s) return [];\n\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = [];\n    let words = s.split(' ');\n\n    for (let word of words) {\n        let consonantCount = 0;\n        for (let letter of word.toLowerCase()) {\n            if (!vowels.includes(letter)) {\n                consonantCount++;\n            }\n        }\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n   let lastVowel = '';\n\n   for (let i = word.length - 2; i > 0; i--) {\n       if (!vowels.includes(word[i]) && vowels.includes(word[i-1]) && vowels.includes(word[i+1])) {\n           lastVowel = word[i-1];\n           break;\n       }\n   }\n\n   return lastVowel;\n};"}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "const openParenCounts = lst.map((str) => {\n      let count = 0;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] === '(') count++;\n        else count--;\n      }\n      return count;\n    });\n\n    const totalOpenParenCount = openParenCounts.reduce((acc, curr) => acc + curr, 0);\n    if (totalOpenParenCount !== 0) return 'No';\n\n    for (let i = 0; i < lst[0].length; i++) {\n      const temp = [...lst];\n      temp.push(temp[0].slice(i));\n      temp[0] = temp[0].slice(0, i);\n\n      let count = 0;\n      for (let j = 0; j < temp.length; j++) {\n        for (let k = 0; k < temp[j].length; k++) {\n          if (temp[j][k] === '(') count++;\n          else count--;\n          if (count < 0) break;\n        }\n      }\n\n      if (count === 0) return 'Yes';\n    }\n\n    return 'No';\n};"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "// Sorting the array in ascending order and then reversing it to get descending order\n    arr.sort((a, b) => a - b).reverse();\n\n    // Returning the first k elements of the sorted array\n    return arr.slice(0, k);\n};"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "let sum: number = 0;\n\n   for (let i = 0; i < k; i++) {\n       if (arr[i] >= -9 && arr[i] <= 99) {\n           sum += arr[i];\n       }\n   }\n\n   return sum;\n};"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "let result = [];\n\n   if(n % 2 !== 0){\n       result.push(n);\n   }\n\n   while(n !== 1) {\n       n = n % 2 === 0 ? n / 2 : (3 * n + 1);\n       if(n % 2 !== 0 && !result.includes(n)) {\n           result.push(n);\n       }\n   }\n\n   return result.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "if (!date || date.length !== 10 || date[2] !== '-' || date[5] !== '-') {\n      return false;\n    }\n\n    const parts = date.split('-').map(Number);\n    const month = parts[0];\n    const day = parts[1];\n    const year = parts[2];\n\n    if (month < 1 || month > 12) {\n      return false;\n    }\n\n    if (day < 1) {\n      return false;\n    }\n\n    switch (month) {\n      case 2:\n        if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\n          return day <= 29;\n        } else {\n          return day <= 28;\n        }\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        return day <= 30;\n      default:\n        return day <= 31;\n    }\n  };"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "const words = txt.split(/\\s+/);\n   if (words.length > 1) return words;\n\n   const commasWords = txt.split(\",\");\n   if (commasWords.length > 1) return commasWords;\n\n   let countOddLetters = 0;\n   for (const letter of txt) {\n     const order = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n     if (order % 2 !== 0) countOddLetters++;\n   }\n\n   return countOddLetters;\n}"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "for(let i=0;i<lst.length-1;i++){\n     if(lst[i] >= lst[i+1]){\n       return false;\n     }\n   }\n\n   // Check for duplicates\n   let set = new Set(lst);\n   if(set.size !== lst.length){\n     return false;\n   }\n\n   return true;\n };"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "// Calculate the intersection of the two intervals\n    const startIntersection = Math.max(interval1[0], interval2[0]);\n    const endIntersection = Math.min(interval1[1], interval2[1]);\n\n    // Check if the intervals intersect\n    if (startIntersection > endIntersection) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    const lengthIntersection = endIntersection - startIntersection + 1;\n\n    // Check if the length is a prime number\n    for (let i = 2, sqrtLength = Math.sqrt(lengthIntersection); i <= sqrtLength; i++) {\n        if (lengthIntersection % i === 0) {\n            return \"NO\";\n        }\n    }\n\n    return lengthIntersection > 1 ? \"YES\" : \"NO\";\n};"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "if (!arr.length) return null;\n  let product = arr[0] > 0 ? 1 : -1;\n  let sum = Math.abs(arr[0]);\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] !== 0) {\n      product *= arr[i] > 0 ? 1 : -1;\n      sum += Math.abs(arr[i]);\n    }\n  }\n\n  return sum * product;\n};"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "const n = grid.length;\n    const directions = [[0, -1], [-1, 0], [0, 1], [1, 0]]; // left, up, right, down\n    let minPathValues = [];\n\n    function dfs(x: number, y: number, path: Array<number>, visited: Set<number>) {\n        if (path.length === k) {\n            if (!minPathValues.length || path < minPathValues) {\n                minPathValues = [...path];\n            }\n            return;\n        }\n\n        for (const [dx, dy] of directions) {\n            const newX = x + dx;\n            const newY = y + dy;\n            if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                path.push(grid[newX][newY]);\n                dfs(newX, newY, path, visited);\n                path.pop();\n            }\n        }\n    }\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            dfs(i, j, [grid[i][j]], new Set([grid[i][j]]));\n        }\n    }\n\n    return minPathValues;\n};"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "if (n === 0) return [];\n    if (n === 1) return [1];\n    const result = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            result[i] = 3;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + (result[i + 1] || 3);\n        }\n    }\n    return result.slice(0, n + 1);\n};"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "let product = 1;\n  let hasOddDigit = false;\n\n  while (n > 0) {\n    const digit = n % 10;\n\n    if (digit % 2 !== 0) {\n      hasOddDigit = true;\n      product *= digit;\n    }\n\n    n = Math.floor(n / 10);\n  }\n\n  return hasOddDigit ? product : 0;\n};"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "let openCount = 0;\n   let closeCount = 0;\n\n   for(let i=0;i<string0.length;i++){\n     if(string0[i] === '['){\n       openCount++;\n     }else{\n       closeCount++\n     }\n\n     if(openCount > 1 && closeCount > 1){\n       return true;\n     }\n   }\n\n   return false;\n}"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "let sum = 0;\n\n   for(let i = 0; i < lst.length; i++){\n     const ceilNum = math.ceil(lst[i]); // round up to the nearest integer\n     sum += Math.pow(ceilNum, 2); // square and add to sum\n   }\n\n   return sum;\n };"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "if(txt.length === 0){\n    return false;\n  }\n\n  // Check if the last character is a letter and not part of a word\n  const regexPattern = /\\s[a-zA-Z]$/;\n  return regexPattern.test(txt);\n}\n\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\"))   //\u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\"))  //\u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")) //\u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\"))             //\u279e False"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "let largestIndex = -1;\n\n   for(let i=1;i<arr.length;i++) {\n       if(arr[i] < arr[i-1]) {\n           largestIndex = i;\n       }\n   }\n\n   return largestIndex;\n};"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "const negativeNumbers: number[] = [];\n  const positiveNumbers: number[] = [];\n\n  for(let i=0; i < lst.length; i++) {\n    if(lst[i] > 0) {\n      positiveNumbers.push(lst[i]);\n    } else if (lst[i] < 0) {\n      negativeNumbers.push(lst[i]);\n    }\n  }\n\n  const maxNegative = negativeNumbers.length ? Math.max(...negativeNumbers) : null;\n  const minPositive = positiveNumbers.length ? Math.min(...positiveNumbers) : null;\n\n  return [maxNegative, minPositive];\n};"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "if ((typeof a === 'number' || !isNaN(parseFloat(a))) && (typeof b === 'number' || !isNaN(parseFloat(b)))) {\n      const numA = typeof a === 'string' ? parseFloat(a.replace(',', '.')) : a;\n      const numB = typeof b === 'string' ? parseFloat(b.replace(',', '.')) : b;\n      if (numA > numB) return a;\n      else if (numA < numB) return b;\n    } else {\n      throw new Error('Invalid input: both values must be numbers or strings representing real numbers');\n    }\n    return null;\n  };"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "if (n <= 0 || n % 2 !== 0) { // Check if the input is a positive even number\n       return false;\n   }\n\n   for (let i = 2; i < n; i += 2) { // Start from 2 and increment by 2 to only consider even numbers\n       for (let j = 2; j < n; j += 2) { // Nested loop to check all possible combinations\n           if (i + j === n - i && i !== j) { // Check if the sum of two numbers equals to the difference between n and one number\n               return true;\n           }\n       }\n   }\n\n   return false;\n}"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "let result = 1;\n   for(let i=n; i>0; i--){\n     let fact = 1;\n     for(let j=i;j>0;j--)\n       fact *= j;\n     result *= fact;\n   }\n   return result;\n}"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "// replace all spaces with underscores\n  let result = text.replace(/\\s+/g, '_');\n\n  // replace multiple consecutive underscores with a single dash\n  while (result.includes('__')) {\n    result = result.replace(/_{2,}/g, '-');\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "// Check if there are more than three digits in the file's name\n  const digitCount = (file_name.match(/\\d/g) || []).length;\n  if (digitCount > 3) {\n    return 'No';\n  }\n\n  // Check if the file's name contains exactly one dot\n  const dotIndex = file_name.indexOf('.');\n  if (dotIndex === -1 || dotIndex !== file_name.lastIndexOf('.')) {\n    return 'No';\n  }\n\n  // Split the file's name into the substring before and after the dot\n  const [beforeDot, afterDot] = file_name.split('.');\n\n  // Check if the substring before the dot is not empty and starts with a latin alphabet letter\n  if (beforeDot === '' || !/^[a-zA-Z]/.test(beforeDot)) {\n    return 'No';\n  }\n\n  // Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n  const validExtensions = ['txt', 'exe', 'dll'];\n  if (!validExtensions.includes(afterDot)) {\n    return 'No';\n  }\n\n  // If all conditions are met, return 'Yes'\n  return 'Yes';\n}"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "return lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n}\n\nconsole.log(sum_squares([1, 2, 3])) // returns 14"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "// Helper function to check if a number is prime\n    const isPrime = (n: number): boolean => {\n        if (n <= 1) return false;\n        for (let i = 2; i < n; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    // Split the sentence into words\n    const words = sentence.split(\" \");\n\n    // Filter out words with prime lengths and join them back into a sentence\n    const resultWords = words.filter(word => isPrime(word.length));\n    return resultWords.join(\" \");\n};"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "const [numX, denX] = x.split('/').map(Number);\n   const [numN, denN] = n.split('/').map(Number);\n\n   // multiply numerators and denominators separately\n   const numResult = numX * numN;\n   const denResult = denX * denN;\n\n   // check if the result is a whole number (i.e., numerator is divisible by denominator)\n   return numResult % denResult === 0;\n };"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "return nums.slice().sort((a, b) => {\n        const sumA = Math.abs(a).toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n        const sumB = Math.abs(b).toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n        return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n    });\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "return nums.filter(num => {\n      const strNum = Math.abs(num).toString();\n      return num > 10 && ['1', '3', '5', '7', '9'].includes(strNum[0]) && ['1', '3', '5', '7', '9'].includes(strNum[strNum.length - 1]);\n    }).length;\n}"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "let a: Array<number> = new Array(n);\n    for(let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    // Count the number of elements in a that are equal to 0, 1 or 2 modulo 3.\n    let count_mod0 = 0;\n    let count_mod1 = 0;\n    let count_mod2 = 0;\n\n    for(let i = 0; i < n; i++) {\n        if(a[i] % 3 === 0) {\n            count_mod0++;\n        } else if(a[i] % 3 === 1) {\n            count_mod1++;\n        } else {\n            count_mod2++;\n        }\n    }\n\n    // To form a triplet (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3,\n    // there are three possible cases:\n    // 1. All three elements are multiples of 3. In this case, the number of such triplets is C(count_mod0, 3).\n    // 2. Two elements are multiples of 3 and one element is equal to 1 modulo 3. In this case, the number of such triplets is count_mod0 * C(count_mod1, 2).\n    // 3. One element is a multiple of 3 and two elements are equal to 1 modulo 3 or 2 modulo 3. In this case, the number of such triplets is count_mod0 * (C(count_mod1, 2) + C(count_mod2, 2)).\n    // Here, C(n, k) denotes the binomial coefficient n choose k. Since n and k are small, we can compute it using a simple loop.\n    function choose(n: number, k: number): number {\n        let res = 1;\n        for (let i = 0; i < k; i++) {\n            res *= (n - i);\n            res /= (i + 1);\n        }\n        return res;\n    }\n\n    return choose(count_mod0, 3) + count_mod0 * choose(count_mod1, 2) + count_mod0 * (choose(count_mod1, 2) + choose(count_mod2, 2));\n};"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n   if (!planets.includes(planet1) || !planets.includes(planet2)) {\n     return [];\n   }\n\n   const planetIndex1 = planets.indexOf(planet1);\n   const planetIndex2 = planets.indexOf(planet2);\n   const [start, end] = planetIndex1 < planetIndex2 ? [planetIndex1 + 1, planetIndex2 - 1] : [planetIndex2 + 1, planetIndex1 - 1];\n\n   return planets.slice(start, end + 1);\n };"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "// Firstly, we filter out the words with odd lengths.\n  const filteredList = lst.filter(word => word.length % 2 === 0);\n\n  // Then we sort the list based on length and alphabetically if the lengths are equal.\n  const sortedList = filteredList.sort((a, b) => {\n    if (a.length !== b.length) return a.length - b.length;\n    else return a.localeCompare(b);\n  });\n\n  // Finally we return the sorted list.\n  return sortedList;\n}"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "// Check if the given number is prime.\n    const isPrime = (num: number): boolean => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n    // If the given number is prime, return x. Otherwise, return y.\n    return isPrime(n) ? x : y;\n};"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "if (!Array.isArray(lst) || lst.length === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n\n  for (const num of lst) {\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      sum += Math.pow(num, 2);\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "return game.map((score, index) => Math.abs(score - guess[index]));\n};"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "let strength = -Infinity;\n  let strongestExt = '';\n\n  for(let ext of extensions) {\n    let cap = 0;\n    let sm = 0;\n    for(let char of ext){\n      if(char === char.toUpperCase()){\n        cap++;\n      } else if(char === char.toLowerCase()){\n        sm++;\n      }\n    }\n    let curStrength = cap - sm;\n    if(curStrength > strength) {\n      strength = curStrength;\n      strongestExt = ext;\n    }\n  }\n\n  return `${class_name}.${strongestExt}`;\n}"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const rotations = Array.from({ length: b.length }, (_, i) => b.slice(i) + b.slice(0, i));\n    return rotations.some((rotation) => a.includes(rotation));\n}"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "let evenCount = 0;\n    let oddCount = 0;\n\n    const numString = Math.abs(num).toString(); // Get the absolute value to handle negative numbers and convert to string\n\n    for (let i = 0; i < numString.length; i++) {\n        const digit = parseInt(numString[i]);\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n};"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "const romanNumerals = [\n        { value: 1, symbol: \"i\" },\n        { value: 4, symbol: \"iv\" },\n        { value: 5, symbol: \"v\" },\n        { value: 9, symbol: \"ix\" },\n        { value: 10, symbol: \"x\" },\n        { value: 40, symbol: \"xl\" },\n        { value: 50, symbol: \"l\" },\n        { value: 90, symbol: \"xc\" },\n        { value: 100, symbol: \"c\" },\n        { value: 400, symbol: \"cd\" },\n        { value: 500, symbol: \"d\" },\n        { value: 900, symbol: \"cm\" },\n        { value: 1000, symbol: \"m\" }\n    ];\n\n    let result = \"\";\n    for (let i = romanNumerals.length - 1; i >= 0; i--) {\n        while (number0 >= romanNumerals[i].value) {\n            result += romanNumerals[i].symbol;\n            number0 -= romanNumerals[i].value;\n        }\n    }\n\n    return result.toLowerCase();\n}"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const sidesSquared = [Math.pow(a, 2), Math.pow(b, 2), Math.pow(c, 2)];\n  sidesSquared.sort((x, y) => x - y); // Sorting the array in ascending order\n\n  return sidesSquared[0] + sidesSquared[1] === sidesSquared[2]; // Checking if it's a right triangle\n}"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "let maxUniqueChars = -1;\n   let maxUniqueWord = '';\n\n   words.forEach(word => {\n       const uniqueChars = new Set(word).size;\n\n       if (uniqueChars > maxUniqueChars) {\n           maxUniqueChars = uniqueChars;\n           maxUniqueWord = word;\n       } else if (uniqueChars === maxUniqueChars && word < maxUniqueWord) {\n           maxUniqueWord = word;\n       }\n   });\n\n   return maxUniqueWord;\n}"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "let totalEaten = number0;\n   if(remaining >= need){\n      totalEaten += need;\n      return [totalEaten, remaining - need];\n   } else {\n     totalEaten += remaining;\n     return [totalEaten, 0];\n   }\n}"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "let result = operand[0];\n\n   for(let i=0; i < operator.length; i++){\n     switch(operator[i]){\n       case '+':\n         result += operand[i+1];\n         break;\n       case '-':\n         result -= operand[i+1];\n         break;\n       case '*':\n         result *= operand[i+1];\n         break;\n       case '/':\n         result /= operand[i+1];\n         break;\n       case '//':\n         result = Math.floor(result / operand[i+1]);\n         break;\n       case '**':\n         result **= operand[i+1];\n         break;\n     }\n   }\n\n   return result;\n };"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "let hasLetter = false;\n  const arr = s.split('');\n\n  for(let i = 0; i < arr.length; i++) {\n    if(/[a-z]/i.test(arr[i])) {\n      hasLetter = true;\n      arr[i] = arr[i] === arr[i].toLowerCase() ? arr[i].toUpperCase() : arr[i].toLowerCase();\n    }\n  }\n\n  if(!hasLetter) return arr.reverse().join('');\n\n  return arr.join('');\n};"}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "if(text === ''){\n    return null;\n  } else {\n    const crypto = require('crypto');\n    return crypto.createHash('md5').update(text).digest(\"hex\");\n  }\n};"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "// Swap the values of a and b if a is greater than b to ensure we iterate from smaller to larger value.\n    if(a > b){\n        let temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Initialize an empty array to store even digits between a and b.\n    let evenDigits: Array<number> = [];\n\n    // Loop through all numbers from a to b (inclusive).\n    for(let i = a; i <= b; i++){\n        // Check if the current number is even by using modulo operator (%). If it's divisible by 2 with no remainder, then it's an even number.\n        if(i % 2 === 0){\n            // Push the even number into the array.\n            evenDigits.push(i);\n        }\n    }\n\n    // Return the array of even digits in ascending order (which is already the case as we inserted them in that order).\n    return evenDigits;\n};"}

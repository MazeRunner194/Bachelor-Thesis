{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "for (let i = 0; i < numbers.length - 1; i++) {\n     for (let j = i + 1; j < numbers.length; j++) {\n       if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n         return true;\n       }\n     }\n   }\n   return false;\n}"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "// Initialize an empty array to store the groups of parentheses\n    const result = [];\n    let group = '';\n    let count = 0;\n\n    // Iterate over each character in the input string\n    for (const char of parenstring.replace(/\\s/g, '')) {\n        if (char === '(') {\n            count++;\n        } else if (char === ')') {\n            count--;\n        }\n\n        // Add the current character to the group string\n        group += char;\n\n        // If the count of open parentheses is equal to the count of closed parentheses, we have found a complete group\n        if (count === 0) {\n            result.push(group);\n            group = '';\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "return Number((number - Math.floor(number)).toFixed(6));\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n      balance += operations[i];\n      if (balance < 0) {\n        return true;\n      }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "// Calculate the mean of the numbers\n    let sum = numbers.reduce((a, b) => a + b, 0);\n    let mean = sum / numbers.length;\n\n    // Calculate the absolute difference between each number and the mean\n    let diffArr = numbers.map(num => Math.abs(num - mean));\n\n    // Calculate the Mean Absolute Deviation (MAD)\n    let madSum = diffArr.reduce((a, b) => a + b, 0);\n    let mad = madSum / diffArr.length;\n\n    return mad;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "let result = [];\n   for (let i = 0; i < numbers.length; i++) {\n       if (i !== 0) {\n           result.push(delimeter);\n       }\n       result.push(numbers[i]);\n   }\n   return result;\n}\nconsole.log(intersperse([1,2,3],4));"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "let stack = [];\n  let maxDepth = 0;\n  let currentDepth = 0;\n  let depths = [];\n\n  for (let char of parenstring) {\n    if (char === '(') {\n      stack.push(char);\n      currentDepth++;\n      if (currentDepth > maxDepth) {\n        maxDepth = currentDepth;\n      }\n    } else if (char === ')') {\n      stack.pop();\n      currentDepth--;\n    } else if (char === ' ' && stack.length === 0) {\n      depths.push(maxDepth);\n      maxDepth = 0;\n      currentDepth = 0;\n    }\n  }\n\n  depths.push(maxDepth);\n  return depths;\n}"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "let filteredStrings = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].includes(substring)) {\n            filteredStrings.push(strings[i]);\n        }\n    }\n    return filteredStrings;\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "let sum = 0;\n   let product = 1;\n\n   for (let i = 0; i < numbers.length; i++) {\n     sum += numbers[i];\n     product *= numbers[i];\n   }\n\n   return [sum, product];\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "const result = [];\n    let maxNum = numbers[0];\n\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > maxNum) {\n            maxNum = numbers[i];\n        }\n        result.push(maxNum);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "if (string === '') {\n    return '';\n  }\n\n  let i = string.length;\n  while (i > 0) {\n    const subStr = string.slice(0, i);\n    if (isPalindrome(subStr)) {\n      break;\n    }\n    i--;\n  }\n\n  const remainingChars = string.slice(i);\n  return string + reverseString(remainingChars);\n}\n\nfunction isPalindrome(str) {\n  return str === reverseString(str);\n}\n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "// Initialize an empty string to store the result\n    let result = '';\n\n    // Loop through each character in the input strings\n    for (let i = 0; i < a.length; i++) {\n        // Perform XOR operation on the corresponding characters and convert the result to a string\n        result += String(Number(a[i]) ^ Number(b[i]));\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "if (strings.length === 0) {\n     return \"none\";\n   }\n\n   let maxLength = strings[0].length;\n   let longestString = strings[0];\n\n   for (let i = 1; i < strings.length; i++) {\n     const currentString = strings[i];\n     if (currentString.length > maxLength) {\n       maxLength = currentString.length;\n       longestString = currentString;\n     }\n   }\n\n   return longestString;\n }"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "let divisor = a < b ? a : b;\n    while (true) {\n        if (a % divisor === 0 && b % divisor === 0) {\n            return divisor;\n        }\n        divisor--;\n    }\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "const result = [];\n    let prefix = '';\n\n    for (let i = 0; i < string.length; i++) {\n      prefix += string[i];\n      result.push(prefix);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "let result = '';\n   for (let i = 0; i <= n; i++) {\n     if (i > 0) {\n       result += ' ';\n     }\n     result += i.toString();\n   }\n   return result;\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "const distinctChars = new Set();\n    for (const char of string.toLowerCase()) {\n        distinctChars.add(char);\n    }\n    return distinctChars.size;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "// Split the input string into an array of note tokens\n    const notes = musicstring.split(' ');\n\n    // Initialize an empty array to store the duration of each note\n    const durations = [];\n\n    // Iterate through each note token\n    for (let i = 0; i < notes.length; i++) {\n        let note = notes[i];\n\n        // Check the type of note and add its corresponding duration to the array\n        if (note === 'o') {\n            durations.push(4);\n        } else if (note === 'o|') {\n            durations.push(2);\n        } else if (note === '.|') {\n            durations.push(1);\n        }\n    }\n\n    // Return the array of note durations\n    return durations;\n}"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "let count = 0;\n   for (let i = 0; i <= string.length - substring.length; i++) {\n       if (string.slice(i, i + substring.length) === substring) {\n           count++;\n       }\n   }\n   return count;\n}\n\nmodule.exports = howManyTimes;"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "const numMap = {'zero':0,'one':1,'two':2,'three':3,'four':4,\n                      'five':5,'six':6,'seven':7,'eight':8,'nine':9};\n    let sortedArray = numbers.split(' ').sort((a,b) => numMap[a] - numMap[b]);\n    return sortedArray.join(' ');\n}"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "if (numbers.length < 2) {\n    return null;\n  }\n\n  numbers.sort((a, b) => a - b);\n\n  let closestPair = [numbers[0], numbers[1]];\n  let smallestDiff = Math.abs(closestPair[1] - closestPair[0]);\n\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i - 1]);\n    if (diff < smallestDiff) {\n      closestPair = [numbers[i - 1], numbers[i]];\n      smallestDiff = diff;\n    }\n  }\n\n  return closestPair;\n}"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "// Find the minimum and maximum numbers in the list\n    const minNumber = Math.min(...numbers);\n    const maxNumber = Math.max(...numbers);\n\n    // Apply a linear transform to each number in the list\n    return numbers.map((number) => (number - minNumber) / (maxNumber - minNumber));\n}"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "return values.filter((value) => Number.isInteger(value));\n }"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "let count = 0;\n\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] !== '\\u00A0') {\n       count++;\n     }\n   }\n\n   return count;\n }"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "if (n <= 1) {\n     return \"No divisors found\";\n   }\n\n   for (let i = n - 1; i > 0; i--) {\n     if (n % i === 0) {\n       return i;\n     }\n   }\n\n   return \"No divisors found\";\n }"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "let factors = [];\n   for (let i = 2; i <= n; i++) {\n     while (n % i === 0) {\n       factors.push(i);\n       n /= i;\n     }\n   }\n   return factors;\n }"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "// Create an empty object to store the count of each number\n    const count = {};\n\n    // Iterate through the numbers array and update the count object\n    for (let num of numbers) {\n        if (!count[num]) {\n            count[num] = 1;\n        } else {\n            count[num]++;\n        }\n    }\n\n    // Filter out the numbers that occur more than once\n    const result = [];\n    for (let num of numbers) {\n        if (count[num] === 1) {\n            result.push(num);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "// create an empty array to store the result\n    let result = [];\n\n    // loop through each character in the string\n    for (let i = 0; i < string.length; i++) {\n      let char = string[i];\n\n      // check if the character is lowercase\n      if (char === char.toLowerCase()) {\n        // convert it to uppercase and add it to the result array\n        result.push(char.toUpperCase());\n      } else {\n        // convert it to lowercase and add it to the result array\n        result.push(char.toLowerCase());\n      }\n    }\n\n    // join the result array into a string and return it\n    return result.join('');\n  }\n\n  module.exports = flipCase;"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "if (strings.length === 0) {\n     return '';\n   }\n\n   let result = '';\n   for (let i = 0; i < strings.length; i++) {\n     result += strings[i];\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "let positiveNumbers = [];\n\n   for (let i = 0; i < l.length; i++) {\n     if (l[i] > 0) {\n       positiveNumbers.push(l[i]);\n     }\n   }\n\n   return positiveNumbers;\n }"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "if (n <= 1) {\n       return false; // Numbers less than or equal to 1 are not prime\n    }\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n       if (n % i === 0) {\n           return false; // If n is divisible by any number between 2 and sqrt(n), it's not prime\n        }\n     }\n\n    return true; // If no factors found, the number is prime\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "// Create a new list to store the sorted values at every third index\n    const sortedValues = [];\n\n    // Iterate over the input list\n    for (let i = 0; i < l.length; i++) {\n        // Check if the current index is divisible by three\n        if ((i + 1) % 3 === 0) {\n            // Add the value at the current index to the sortedValues list\n            sortedValues.push(l[i]);\n        }\n    }\n\n    // Sort the sortedValues list in ascending order\n    sortedValues.sort((a, b) => a - b);\n\n    // Create a new list to store the final result\n    const result = [];\n\n    // Iterate over the input list again\n    for (let i = 0; i < l.length; i++) {\n        // Check if the current index is divisible by three\n        if ((i + 1) % 3 === 0) {\n            // Add the next value from the sortedValues list to the result list\n            result.push(sortedValues.shift());\n        } else {\n            // Add the value at the current index to the result list\n            result.push(l[i]);\n        }\n    }\n\n    // Return the final result list\n    return result;\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "// Sort the list\n    l.sort((a, b) => a - b);\n\n    // Initialize an empty array to store the result\n    let result = [];\n\n    // Iterate through the sorted list\n    for (let i = 0; i < l.length; i++) {\n        // If the current element is not equal to the previous element, add it to the result\n        if (i === 0 || l[i] !== l[i - 1]) {\n            result.push(l[i]);\n        }\n    }\n\n    // Return the sorted unique elements\n    return result;\n}"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "let max = l[0];\n   for (let i=1;i<l.length;i++){\n     if (l[i]>max){\n       max = l[i];\n     }\n   }\n   return max;\n}"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "let count = 0;\n   for (let i = 1; i < n; i++) {\n     if ((i % 11 === 0 || i % 13 === 0) && String(i).includes('7')) {\n       count++;\n     }\n   }\n   return count;\n }\n console.log(fizzBuzz(50)); // Output: 0\n console.log(fizzBuzz(78)); // Output: 2\n console.log(fizzBuzz(79)); // Output: 3"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "let evenNumbers = l.filter((num, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((num, i) => i % 2 === 0 ? evenNumbers.shift() : num);\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "let fib = [2, 3];\n   let i = 2;\n   while (fib.length < n) {\n     let nextNum = fib[i - 1] + fib[i - 2];\n     if (isPrime(nextNum)) {\n       fib.push(nextNum);\n     }\n     i++;\n   }\n   return fib[n - 1];\n}\n\nfunction isPrime(num) {\n   for (let i = 2; i <= Math.sqrt(num); i++) {\n     if (num % i === 0) {\n       return false;\n     }\n   }\n   return num > 1;\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "// Sort the list in ascending order\n    l.sort((a, b) => a - b);\n\n    // Iterate through the sorted list\n    for (let i = 0; i < l.length - 2; i++) {\n        // Skip duplicate elements to avoid counting them multiple times\n        if (i > 0 && l[i] === l[i - 1]) continue;\n\n        let left = i + 1;\n        let right = l.length - 1;\n\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            // If the sum is zero, return True\n            if (sum === 0) return true;\n\n            // If the sum is less than zero, move the left pointer to the right\n            else if (sum < 0) left++;\n\n            // If the sum is greater than zero, move the right pointer to the left\n            else right--;\n        }\n    }\n\n    // If no triplet is found that sums to zero, return False\n    return false;\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "// Since all cars are moving at the same speed and the road is infinitely long,\n    // each collision occurs when a left-moving car catches up to a right-moving car\n    // that started out further down the road. Since there are n cars in each direction,\n    // the first collision occurs when the first left-moving car catches up with the\n    // first right-moving car. After this, every other pair of cars will collide at the same time,\n    // as they all have the same relative speed to each other. Therefore, there are n collisions in total.\n    return n;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "// Initialize an empty array to store the result.\n    const result = [];\n\n    // Iterate through each element in the input list.\n    for (let i = 0; i < l.length; i++) {\n      // Increment the current element by 1 and add it to the result array.\n      result[i] = l[i] + 1;\n    }\n\n    // Return the resulting list.\n    return result;\n  }\n\n  // Test cases\n  console.log(incrList([1, 2, 3])); // Output: [2, 3, 4]\n  console.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "let result = '';\n   if (x === 0) return '0';\n\n   while (x > 0) {\n     result = (x % base) + result;\n     x = Math.floor(x / base);\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "// Your code goes here...\n    return (1/2)*a*h;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "// Initialize the first four elements of the sequence\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n\n    // If n is less than or equal to 3, return the corresponding element\n    if (n <= 1) {\n        return 0;\n    } else if (n === 2) {\n        return 2;\n    } else if (n === 3) {\n        return 0;\n    }\n\n    // Compute the n-th element of the sequence\n    let result = 0;\n    for (let i = 4; i <= n; i++) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "// sort the list in ascending order\n    l.sort((a, b) => a - b);\n\n    // find the middle index of the sorted list\n    let midIndex = Math.floor(l.length / 2);\n\n    // check if the length of the list is odd or even\n    if (l.length % 2 === 1) {\n        // if odd, return the middle element\n        return l[midIndex];\n    } else {\n        // if even, return the average of the two middle elements\n        return (l[midIndex - 1] + l[midIndex]) / 2;\n    }\n}"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "if (text === '') return true;\n\n    let start = 0;\n    let end = text.length - 1;\n\n    while (start < end) {\n        if (text[start] !== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "if (n === 0) return 1; // Special case: 2^0 = 1\n   let result = 1;\n   let base = 2;\n\n   while (n > 0) {\n       if (n % 2 === 1) {\n           result = (result * base) % p;\n       }\n       base = (base * base) % p;\n       n = Math.floor(n / 2);\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n   let result = '';\n\n   for (let i = 0; i < text.length; i++) {\n     if (!vowels.includes(text[i].toLowerCase())) {\n       result += text[i];\n     }\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "// Create an empty map to store the count of each character in both strings\n    const charMap = new Map();\n\n    // Iterate through each character in the first string and update its count in the map\n    for (let i = 0; i < s0.length; i++) {\n        if (!charMap.has(s0[i])) {\n            charMap.set(s0[i], 1);\n        } else {\n            charMap.set(s0[i], charMap.get(s0[i]) + 1);\n        }\n    }\n\n    // Iterate through each character in the second string and update its count in the map\n    for (let i = 0; i < s1.length; i++) {\n        if (!charMap.has(s1[i])) {\n            return false; // If a character is not present in the first string, they cannot have the same characters\n        } else {\n            charMap.set(s1[i], charMap.get(s1[i]) - 1);\n        }\n    }\n\n    // Check if all counts in the map are zero (indicating that each character appears the same number of times in both strings)\n    for (let count of charMap.values()) {\n        if (count !== 0) {\n            return false;\n        }\n    }\n\n    return true; // If no mismatches were found, the strings have the same characters\n}"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "if (n <= 1) return n;\n\n   let a = 0, b = 1;\n   for (let i = 2; i <= n; i++) {\n       let temp = b;\n       b += a;\n       a = temp;\n   }\n   return b;\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "let stack = [];\n\n   for (let i = 0; i < brackets.length; i++) {\n     if (brackets[i] === \"<\") {\n       stack.push(\"<\");\n     } else if (brackets[i] === \">\") {\n       if (stack.length === 0) {\n         return false;\n       }\n       stack.pop();\n     }\n   }\n\n   return stack.length === 0;\n }"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "let increasing = true;\n   let decreasing = true;\n\n   for (let i=0; i<l.length-1; i++) {\n     if (l[i] > l[i+1]) {\n       increasing = false;\n     }\n     if (l[i] < l[i+1]) {\n       decreasing = false;\n     }\n   }\n\n   return increasing || decreasing;\n }"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "// Create a set to store unique elements from the first list\n  const set1 = new Set(l1);\n\n  // Use the filter method on the second list to keep only the elements that are also in set1\n  const commonElements = l2.filter((element) => set1.has(element));\n\n  // Remove duplicate elements from the array using the spread operator and a new Set\n  const uniqueCommonElements = [...new Set(commonElements)];\n\n  // Sort the array of common elements in ascending order\n  const sortedUniqueCommonElements = uniqueCommonElements.sort((a, b) => a - b);\n\n  return sortedUniqueCommonElements;\n}\n\n// Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "let maxPrime = -1;\n\n   // Print the number of 2s that divide n\n   while (n % 2 === 0) {\n     maxPrime = 2;\n     n >>= 1; // equivalent to n /= 2\n   }\n\n   // n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n   for (let i = 3; i * i <= n; i += 2) {\n     while (n % i === 0) {\n       maxPrime = i;\n       n /= i;\n     }\n   }\n\n   // This condition is to handle the case when n is a prime number\n   // greater than 2\n   if (n > 2) {\n     maxPrime = n;\n   }\n\n   return maxPrime;\n}"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "// Initialize a stack to store opening brackets\n    let stack = [];\n\n    // Loop through each character in the string\n    for (let i = 0; i < brackets.length; i++) {\n        const char = brackets[i];\n\n        // If it's an opening bracket, push it to the stack\n        if (char === \"(\") {\n            stack.push(char);\n        }\n        // If it's a closing bracket\n        else if (char === \")\") {\n            // If there are no opening brackets in the stack, return false\n            if (stack.length === 0) {\n                return false;\n            }\n            // Otherwise, pop an opening bracket from the stack\n            stack.pop();\n        }\n    }\n\n    // If there are any opening brackets left in the stack, return false\n    if (stack.length > 0) {\n        return false;\n    }\n\n    // Otherwise, all opening brackets have corresponding closing brackets, so return true\n    return true;\n}"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "const result = [];\n   for (let i = 1; i < xs.length; i++) {\n     result.push(i * xs[i]);\n   }\n   return result;\n };"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "// Define base cases for n = 0, 1, and 2\n    if (n === 0) return 0;\n    if (n === 1 || n === 2) return 1;\n\n    // Initialize the three previous FibFib numbers\n    let prevPrevPrev = 0;\n    let prevPrev = 0;\n    let prev = 1;\n\n    // Calculate the n-th FibFib number\n    for (let i = 3; i <= n; i++) {\n        const current = prevPrev + prevPrevPrev + prev;\n\n        // Update the previous three numbers\n        prevPrevPrev = prevPrev;\n        prevPrev = prev;\n        prev = current;\n    }\n\n    return prev;\n}"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "let count = 0;\n   const lastIndex = s.length - 1;\n   for (let i = 0; i < s.length; i++) {\n     if (\"aeiouAEIOU\".includes(s[i])) {\n       count++;\n       // check if the vowel is 'y' and it is at the end of the string\n       if (s[i].toLowerCase() === \"y\" && i !== lastIndex) {\n         count--;\n       }\n     }\n   }\n   return count;\n }"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "// Convert the integer to a string\n    let str = x.toString();\n\n    // Get the length of the string\n    let len = str.length;\n\n    // If shift is greater than or equal to the number of digits, reverse the string\n    if (shift >= len) {\n        return str.split('').reverse().join('');\n    }\n\n    // Perform circular right shift on the string\n    let shiftedStr = str.slice(-shift) + str.slice(0, -shift);\n\n    // Return the shifted string\n    return shiftedStr;\n}"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "const applesOranges = s.match(/(\\d+)\\s*apples\\s*and\\s*(\\d+)\\s*oranges/);\n   if (applesOranges && applesOranges[1] && applesOranges[2]) {\n     const numApples = parseInt(applesOranges[1], 10);\n     const numOranges = parseInt(applesOranges[2], 10);\n     return n - numApples - numOranges;\n   } else {\n     throw new Error(\"Invalid input\");\n   }\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "// Initialize minimum value and index variables\n    let minValue = Infinity;\n    let minIndex = -1;\n\n    // Loop through the array\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n\n        // Check if the number is even and smaller than the current minimum value\n        if (num % 2 === 0 && num < minValue) {\n            minValue = num;\n            minIndex = i;\n        }\n    }\n\n    // Return an empty array if no even numbers were found, otherwise return [minValue, minIndex]\n    return minIndex !== -1 ? [minValue, minIndex] : [];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "// Create an object to store the frequency of each integer in the list\n  let freq = {};\n  for (let num of lst) {\n    if (freq[num] === undefined) {\n      freq[num] = 1;\n    } else {\n      freq[num]++;\n    }\n  }\n\n  // Iterate through the frequency object in descending order of integers\n  for (let num = lst.length; num > 0; num--) {\n    // Check if the frequency is greater than or equal to the value of the integer\n    if (freq[num] !== undefined && freq[num] >= num) {\n      return num;\n    }\n  }\n\n  // If no such value exists, return -1\n  return -1;\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "const sorted = lst.slice().sort((a, b) => a - b);\n   const result = [];\n\n   while (sorted.length > 0) {\n     result.push(sorted.shift());\n     if (sorted.length > 0) {\n       result.push(sorted.pop());\n     }\n   }\n\n   return result;\n }"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "// Your solution goes here\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return parseFloat(area.toFixed(2));\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "// Check if the array q is balanced (palindromic list)\n   const isBalanced = JSON.stringify(q) === JSON.stringify([...q].reverse());\n\n   // Calculate the sum of elements in q\n   const sumOfElements = q.reduce((acc, val) => acc + val, 0);\n\n   // Check if the sum is less than or equal to the maximum possible weight w and the array is balanced\n   return sumOfElements <= w && isBalanced;\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "let changes = 0;\n   for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n     if (arr[i] !== arr[arr.length - 1 - i]) {\n       changes++;\n     }\n   }\n   return changes;\n}\n\n// Test cases\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));   // Output: 1\nconsole.log(smallestChange([1, 2, 3, 2, 1]));        // Output: 0"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "let sumLst1 = lst1.reduce((sum, str) => sum + str.length, 0);\n    let sumLst2 = lst2.reduce((sum, str) => sum + str.length, 0);\n\n    if (sumLst1 <= sumLst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isPrime(n) {\n     for (let i = 2; i <= Math.sqrt(n); i++) {\n       if (n % i === 0) return false;\n     }\n     return n > 1;\n   }\n\n   let factors = [];\n   for (let i = 2; i <= Math.sqrt(a); i++) {\n     while (a % i === 0) {\n       factors.push(i);\n       a /= i;\n     }\n     if (factors.length > 3) return false;\n   }\n   if (a > 1) factors.push(a);\n   return factors.length === 3 && factors.every(isPrime);\n }\n\n console.log(isMultiplyPrime(30)); // Output: true"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "// Base case: if x is 1, then it's a simple power of any positive integer\n   if (x === 1) {\n     return true;\n   }\n\n   // If x or n is less than or equal to 0, return false since a number cannot be a negative or zero power\n   if (x <= 0 || n <= 0) {\n     return false;\n   }\n\n   // Check if x is a simple power of n by repeatedly dividing x by n until it becomes 1\n   while (x !== 1) {\n     if (x % n !== 0) {\n       return false;\n     }\n     x = x / n;\n   }\n\n   // If the loop completes without returning false, then x is a simple power of n\n   return true;\n }"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "// Convert input to absolute value to handle negative numbers\n    const absA = Math.abs(a);\n\n    // Get the cube root of the absolute value\n    const cubeRoot = Math.cbrt(absA);\n\n    // Check if the cubed result is equal to the absolute value and return the boolean result\n    return cubeRoot === Math.floor(cubeRoot) && Number.isInteger(cubeRoot);\n  }"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "const primes = ['2', '3', '5', '7', 'B', 'D'];\n   let count = 0;\n\n   for (let i = 0; i < num.length; i++) {\n       if (primes.includes(num[i])) {\n           count++;\n       }\n   }\n\n   return count;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "// Convert the decimal number to binary using the toString() method\n    const binary = decimal.toString(2);\n\n    // Add 'db' at the beginning and end of the string\n    return `db${binary}db`;\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "if (s.length < 3) {\n      return false;\n    }\n\n    for (let i = 0; i <= s.length - 3; i++) {\n      const char1 = s[i];\n      const char2 = s[i + 1];\n      const char3 = s[i + 2];\n\n      if (char1 === char2 || char1 === char3 || char2 === char3) {\n        return false;\n      }\n    }\n\n    return true;\n  }"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "return grades.map((grade) => {\n        if (grade === 4.0) {\n          return \"A+\"\n        } else if (grade > 3.7) {\n          return \"A\"\n        } else if (grade > 3.3) {\n          return \"A-\"\n        } else if (grade > 3.0) {\n          return \"B+\"\n        } else if (grade > 2.7) {\n          return \"B\"\n        } else if (grade > 2.3) {\n          return \"B-\"\n        } else if (grade > 2.0) {\n          return \"C+\"\n        } else if (grade > 1.7) {\n          return \"C\"\n        } else if (grade > 1.3) {\n          return \"C-\"\n        } else if (grade > 1.0) {\n          return \"D+\"\n        } else if (grade > 0.7) {\n          return \"D\"\n        } else if (grade > 0.0) {\n          return \"D-\"\n        } else {\n          return \"E\"\n        }\n      })\n    }"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "// Helper function to check if a number is prime\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  // Check the length of the string and return True/False based on isPrime() result\n  return isPrime(string.length);\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "// If number is less than 2, return the same as there are no combinations possible\n    if (n < 2) return n;\n\n    let dp = new Array(n + 1).fill(0);\n\n    // Base cases: When length is 1 or 2, we can't have a number that both starts and ends with 1.\n    dp[1] = 1;\n    dp[2] = 2;\n\n    // For each additional digit (from index 3 to n), calculate the count of numbers that start or end with 1\n    for (let i = 3; i <= n; i++) {\n        // A number that starts with '1' can be formed by appending any digit to a (i - 1) digits long number.\n        // Also, a number that ends with '1' can be formed by prefixing any digit except '0' to a (i - 1) digits long number (as leading zeros are not allowed).\n        dp[i] = dp[i - 1] + 9 * Math.pow(10, i - 2);\n    }\n\n    // Multiply by 2 because each case (starts with 1 and ends with 1) contributes uniquely to the answer set\n    return 2 * dp[n];\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "// Convert the integer to binary and split it into an array of digits\n    const binaryDigits = n.toString(2).split('');\n\n    // Use reduce to sum up the binary digits, converting them back to integers as we go\n    const sumOfBinaryDigits = binaryDigits.reduce((sum, digit) => sum + parseInt(digit), 0);\n\n    // Convert the sum to a binary string and return it\n    return sumOfBinaryDigits.toString(2);\n}"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "let sum = 0;\n\n   for (let i = 1; i < lst.length; i += 2) {\n     if (lst[i] % 2 === 0) {\n       sum += lst[i];\n     }\n   }\n\n   return sum;\n}"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "// split the string into words\n    let words = s.split(\" \");\n\n    // iterate over each word in the array\n    for (let i = 0; i < words.length; i++) {\n      // extract the characters of the word and sort them based on ascii value\n      let chars = words[i].split(\"\");\n      chars.sort();\n\n      // join the sorted characters back into a string and replace the original word\n      words[i] = chars.join(\"\");\n    }\n\n    // join the modified words back into a sentence and return it\n    return words.join(\" \");\n  }"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "let coordinates = [];\n\n   for (let i = 0; i < lst.length; i++) {\n     let row = lst[i];\n     for (let j = 0; j < row.length; j++) {\n       if (row[j] === x) {\n         coordinates.push([i, j]);\n       }\n     }\n   }\n\n   // Sorting by rows in ascending order and then columns in descending order\n   coordinates.sort((a, b) => {\n     if (a[0] !== b[0]) {\n       return a[0] - b[0];\n     } else {\n       return b[1] - a[1];\n     }\n   });\n\n   // Convert to tuple format\n   let tuples = coordinates.map(coord => `(${coord[0]}, ${coord[1]})`);\n\n   return tuples;\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "// If the array is empty or has only one element, return a copy of it\n    if (array.length <= 1) {\n        return [...array];\n    }\n\n    // Calculate the sum of the first and last elements\n    const sum = array[0] + array[array.length - 1];\n\n    // Create a copy of the array to avoid modifying the original one\n    const sortedArray = [...array];\n\n    // Sort the copied array in ascending order if the sum is odd, or descending order if it's even\n    if (sum % 2 !== 0) {\n        sortedArray.sort((a, b) => a - b);\n    } else {\n        sortedArray.sort((a, b) => b - a);\n    }\n\n    // Return the sorted array\n    return sortedArray;\n}\n\n// Test cases\nconsole.log(sortArray([]));                          // []\nconsole.log(sortArray([5]));                         // [5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5]));           // [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));         // [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n   let encryptedStr = \"\";\n   for (let i = 0; i < s.length; i++) {\n       let charIndex = alphabet.indexOf(s[i]);\n       if (charIndex !== -1) {\n           let shiftedIndex = (charIndex * 2 + 2) % 26;\n           encryptedStr += alphabet[shiftedIndex];\n       } else {\n           encryptedStr += s[i];\n       }\n   }\n   return encryptedStr;\n}"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "let smallest = Infinity;\n   let secondSmallest = Infinity;\n\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] < smallest) {\n       secondSmallest = smallest;\n       smallest = lst[i];\n     } else if (lst[i] < secondSmallest && lst[i] !== smallest) {\n       secondSmallest = lst[i];\n     }\n   }\n\n   return secondSmallest === Infinity ? null : secondSmallest;\n }"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "// Split the string into sentences based on delimiters ('.', '?', '!')\n    const sentences = s.split(/[.?!]/);\n\n    // Filter the sentences that start with \"I\" and return their count\n    const boredSentences = sentences.filter(sentence => sentence.trim().startsWith(\"I\"));\n\n    return boredSentences.length;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "// Check if all numbers are integers\n   if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n     // Check if one of the numbers is equal to the sum of the other two\n     return x === y + z || y === x + z || z === x + y;\n   } else {\n     return false;\n   }\n }\n\n // Test cases\n console.log(anyInt(5, 2, 7));  // true (2 + 7 = 5)\n console.log(anyInt(3, 2, 2));  // false (no sum of two numbers equals to 3)\n console.log(anyInt(3, -2, 1));  // true (-2 + 1 = 3)\n console.log(anyInt(3.6, -2.2, 2));  // false (all numbers are not integers)"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "let encodedMessage = \"\";\n   const vowels = \"aeiouAEIOU\";\n   const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n   for (let i = 0; i < message.length; i++) {\n     let char = message[i];\n\n     if (vowels.includes(char)) {\n       // Find the index of the character in the alphabet\n       const index = alphabet.indexOf(char);\n\n       // Calculate the new index by adding 2 to the current index\n       let newIndex = index + 2;\n\n       // If the new index is greater than or equal to the length of the alphabet, wrap around to the beginning\n       if (newIndex >= alphabet.length) {\n         newIndex -= alphabet.length;\n       }\n\n       // Get the character at the new index and add it to the encoded message\n       char = alphabet[newIndex];\n     } else if (alphabet.includes(char)) {\n       // If the character is not a vowel, swap its case\n       char = char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n     }\n\n     encodedMessage += char;\n   }\n\n   return encodedMessage;\n }"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "// Filter out non-prime numbers and find the largest prime number in the list\n    const largestPrime = Math.max(...lst.filter((num) => isPrime(num)));\n\n    // Convert the largest prime number to a string, then split it into digits\n    const digitSum = String(largestPrime).split('').reduce((sum, digit) => sum + Number(digit), 0);\n\n    return digitSum;\n}\n\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "if (Object.keys(dict).length === 0) {\n     return false;\n   }\n\n   let isUpperCase = true;\n   let isLowerCase = true;\n\n   for (let key in dict) {\n     if (typeof key !== 'string') {\n       return false;\n     }\n\n     if (!key.match(/^[A-Z]+$/)) {\n       isUpperCase = false;\n     }\n\n     if (!key.match(/^[a-z]+$/)) {\n       isLowerCase = false;\n     }\n   }\n\n   return isUpperCase || isLowerCase;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "// Function to check if a number is prime\n    function isPrime(num) {\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if (num % i === 0) return false;\n        return num > 1;\n    }\n\n    // Initialize an empty array to store prime numbers\n    let primes = [];\n\n    // Loop through all numbers from 2 to n-1\n    for (let i = 2; i < n; i++) {\n        // If the number is prime, add it to the array\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    // Return the array of prime numbers\n    return primes;\n}"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "// Convert numbers to absolute values to handle negative numbers\n  a = Math.abs(a);\n  b = Math.abs(b);\n\n  // Extract the unit digit by taking the remainder of the number when divided by 10\n  const lastDigitA = a % 10;\n  const lastDigitB = b % 10;\n\n  // Multiply the unit digits and return the result\n  return lastDigitA * lastDigitB;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && 'AEIOU'.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "const floatValue = parseFloat(value);\n   if (floatValue >= 0) {\n     return Math.round(floatValue);\n   } else {\n     return -Math.round(-floatValue);\n   }\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "const pile = [];\n    for (let i = 0; i < n; i++) {\n      if (n % 2 === 0) {\n        pile.push(n - i * 2);\n      } else {\n        pile.push(n - i * 2 + i);\n      }\n    }\n    return pile;\n  }"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "return s.split(/[ ,]+/);\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "if (x > y) {\n     return -1;\n   }\n   // if both numbers are even, return the biggest one\n   if (x % 2 === 0 && y % 2 === 0) {\n     return y;\n   }\n   // if x is odd and y is even, return y\n   else if (x % 2 !== 0 && y % 2 === 0) {\n     return y;\n   }\n   // if both numbers are odd, return the second biggest even number\n   else {\n     return y - 1;\n   }\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "// if n is greater than m, return -1\n  if (n > m) {\n    return -1;\n  }\n\n  // compute the average of the integers from n through m\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n\n  // convert the average to binary and return it as a string\n  return \"0b\" + avg.toString(2);\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "let result = [];\n   for (let i = 0; i < x.length; i++) {\n       let numStr = x[i].toString();\n       let hasEvenDigit = false;\n       for (let j = 0; j < numStr.length; j++) {\n           if (parseInt(numStr[j]) % 2 === 0) {\n               hasEvenDigit = true;\n               break;\n           }\n       }\n       if (!hasEvenDigit) {\n           result.push(x[i]);\n       }\n   }\n   return result.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "// Remove any strange numbers and sort the array\n  const sortedArr = arr.filter((num) => num >= 1 && num <= 9).sort();\n\n  // Reverse the array\n  const reversedArr = sortedArr.reverse();\n\n  // Create an object to map digits to their corresponding names\n  const digitNames = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\n  // Replace each digit with its corresponding name and return the result\n  return reversedArr.map((num) => digitNames[num]);\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "let result = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        // Calculate factorial for even indices\n        let fact = 1;\n        for (let j = 2; j <= i; j += 2) {\n          fact *= j;\n        }\n        result.push(fact);\n      } else {\n        // Calculate sum for odd indices\n        let sum = 0;\n        for (let j = 1; j <= i; j++) {\n          sum += j;\n        }\n        result.push(sum);\n      }\n    }\n    return result;\n  }"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "let countEven = 0;\n    let countOdd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        const strNum = String(i);\n        if (strNum === strNum.split('').reverse().join('')) {\n            if (i % 2 === 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n        }\n    }\n\n    return [countEven, countOdd];\n}"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "// Helper function to calculate the sum of digits in a number\n  const sumOfDigits = (num) => {\n    return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n  }\n\n  // Filter the array to include only numbers with a sum of digits greater than 0\n  const filteredArr = arr.filter(num => sumOfDigits(num) > 0);\n\n  // Return the length of the filtered array\n  return filteredArr.length;\n}"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "// If the array is empty, return true\n    if (arr.length === 0) {\n        return true;\n    }\n\n    // Find the index of the minimum element in the array\n    let minIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n\n    // Perform a right shift operation on the array, starting from the minimum index\n    for (let i = 0; i < minIndex; i++) {\n        const temp = arr[arr.length - 1];\n        for (let j = arr.length - 2; j >= 0; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[0] = temp;\n    }\n\n    // Check if the array is sorted in non-decreasing order\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return false;\n        }\n    }\n\n    // If the array is sorted in non-decreasing order, return true\n    return true;\n}"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "// Separate odd and even numbers in both arrays\n    let oddsLst1 = lst1.filter(num => num % 2 !== 0);\n    let evensLst2 = lst2.filter(num => num % 2 === 0);\n\n    // If we have as many or more even numbers in lst2 for every odd number in lst1, then it's possible to exchange\n    if (evensLst2.length >= oddsLst1.length) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "// Create an empty object to store the letter counts\n    const letterCounts = {};\n\n    // Split the input string into an array of words\n    const words = test.split(\" \");\n\n    // Iterate over each word in the array\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n\n        // If the word is empty, skip it\n        if (word === \"\") continue;\n\n        // If the letter is already in the object, increment its count\n        if (letterCounts[word]) {\n            letterCounts[word]++;\n        } else {\n            // Otherwise, add the letter to the object with a count of 1\n            letterCounts[word] = 1;\n        }\n    }\n\n    // Find the maximum count in the object\n    let maxCount = 0;\n    for (let letter in letterCounts) {\n        if (letterCounts[letter] > maxCount) {\n            maxCount = letterCounts[letter];\n        }\n    }\n\n    // Create an empty object to store the letters with the maximum count\n    const result = {};\n    for (let letter in letterCounts) {\n        if (letterCounts[letter] === maxCount) {\n            result[letter] = maxCount;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "let result = '';\n\n  // Remove characters from s that are present in c\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n\n  // Check if the result string is a palindrome\n  let isPalindrome = true;\n  for (let j = 0; j < Math.floor(result.length / 2); j++) {\n    if (result[j] !== result[result.length - 1 - j]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n\n  return [result, isPalindrome];\n}"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "const result = [];\n\n   for (let i = 0; i < lst.length; i++) {\n     let count = 0;\n     const str = lst[i];\n\n     // Count the number of odd digits in the string\n     for (let j = 0; j < str.length; j++) {\n       if (parseInt(str[j]) % 2 !== 0) {\n         count++;\n       }\n     }\n\n     // Replace the placeholders with the actual values\n     const sentence = `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n     result.push(sentence);\n   }\n\n   return result;\n }\n\n // Test cases\n console.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n console.log(oddCount(['3', \"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "let min = nums[0];\n    let sum = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n\n    return min;\n}"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "let numRows = grid.length;\n    let numCols = grid[0].length;\n    let res = 0;\n\n    for (let i = 0; i < numCols; i++) {\n        let curCap = capacity;\n        for (let j = 0; j < numRows && curCap > 0; j++) {\n            if (grid[j][i] === 1) {\n                grid[j][i] = 0;\n                curCap--;\n            }\n        }\n        if (curCap !== capacity) res++;\n    }\n\n    return res;\n}"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "const countOnes = (num) => num.toString(2).replace(/0/g, '').length;\n\n   return arr.sort((a, b) => {\n     const onesA = countOnes(Math.abs(a));\n     const onesB = countOnes(Math.abs(b));\n     if (onesA !== onesB) {\n       return onesA - onesB;\n     }\n     return a - b;\n   });\n }"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n   const words = s.split(' ');\n   const result = [];\n\n   for (let word of words) {\n     let count = 0;\n     for (let char of word.toLowerCase()) {\n       if (consonants.includes(char)) {\n         count++;\n       }\n     }\n     if (count === n) {\n       result.push(word);\n     }\n   }\n\n   return result;\n }"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n   for (let i = word.length - 1; i > 0; i--) {\n     if (vowels.includes(word[i])) {\n       if (!vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n         return word[i];\n       }\n     }\n   }\n   return '';\n}"}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "let openCount = 0;\n    let closeCount = 0;\n    for (let i = 0; i < lst[0].length; i++) {\n        if (lst[0][i] === '(') {\n            openCount++;\n        } else {\n            closeCount++;\n        }\n    }\n    for (let j = 0; j < lst[1].length; j++) {\n        if (lst[1][j] === '(') {\n            openCount++;\n        } else {\n            closeCount++;\n        }\n    }\n    return openCount === closeCount ? 'Yes' : 'No';\n}"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "// Sort the input array in ascending order\n    arr.sort((a, b) => a - b);\n\n    // Get the last 'k' elements of the sorted array (which are the largest numbers)\n    const result = arr.slice(-k);\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "return lst.reduce((sum, num, index) => {\n    if (num % 2 !== 0 && index % 2 === 0) {\n      sum += num;\n    }\n    return sum;\n  }, 0);\n}"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "let sum = 0;\n   for (let i = 0; i < k; i++) {\n     if (arr[i] >= 0 && arr[i] <= 99) { // Check if the number has at most two digits\n       sum += arr[i];\n     }\n   }\n   return sum;\n }"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "const result = [];\n    while (n !== 1) {\n        if (n % 2 !== 0) result.push(n);\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    }\n    if (n === 1 && !result.includes(1)) result.push(1);\n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "if (date === \"\") {\n     return false;\n   }\n\n   const datePattern = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n   const match = date.match(datePattern);\n\n   if (!match) {\n     return false;\n   }\n\n   const month = parseInt(match[1], 10);\n   const day = parseInt(match[2], 10);\n   const year = parseInt(match[3], 10);\n\n   if (month < 1 || month > 12) {\n     return false;\n   }\n\n   if (day < 1) {\n     return false;\n   }\n\n   const daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n   if (day > daysInMonth[month - 1]) {\n     return false;\n   }\n\n   // Leap year check for February\n   if (month === 2 && day > 28) {\n     const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n     return isLeapYear;\n   }\n\n   return true;\n }"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "const words = txt.split(' ');\n   if (words.length > 1) return words;\n\n   const commas = txt.split(',');\n   if (commas.length > 1) return commas;\n\n   let count = 0;\n   for (let i = 0; i < txt.length; i++) {\n     const charCode = txt.charCodeAt(i);\n     if (charCode >= 97 && charCode <= 122 && (charCode - 97) % 2 !== 0) count++;\n   }\n   return count;\n}"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "if (lst.length <= 1) return true;\n\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] >= lst[i + 1]) return false;\n        if (lst.indexOf(lst[i]) !== lst.lastIndexOf(lst[i])) return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    const length = end - start + 1;\n\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\n    return length > 1 ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "// check if the array is empty\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let sign = 1;\n    let sum = 0;\n\n    // iterate through each element in the array\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            return 0;\n        } else if (arr[i] > 0) {\n            sum += arr[i]; // add the magnitude to the sum\n        } else {\n            sum -= arr[i]; // subtract the magnitude from the sum\n            sign *= -1; // change the sign of the product\n        }\n    }\n\n    return sum * sign;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "const n = grid.length;\n    const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]; // right, left, down, up\n    let startCell = null;\n\n    // Find the smallest value in the grid and its position\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        if (!startCell || grid[i][j] < startCell.val) {\n          startCell = { val: grid[i][j], x: i, y: j };\n        }\n      }\n    }\n\n    const path = [];\n    const visited = new Set();\n    let minPath = Array(k).fill(Infinity);\n\n    function dfs(x, y, currPath) {\n      if (currPath.length === k) {\n        for (let i = 0; i < k; i++) {\n          if (currPath[i] < minPath[i]) {\n            minPath = [...currPath];\n            break;\n          } else if (currPath[i] > minPath[i]) {\n            break;\n          }\n        }\n        return;\n      }\n\n      for (const [dx, dy] of directions) {\n        const nx = x + dx;\n        const ny = y + dy;\n\n        if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n          const nextCellKey = `${nx}-${ny}`;\n          if (!visited.has(nextCellKey)) {\n            visited.add(nextCellKey);\n            currPath.push(grid[nx][ny]);\n            dfs(nx, ny, currPath);\n            currPath.pop();\n            visited.delete(nextCellKey);\n          }\n        }\n      }\n    }\n\n    visited.add(`${startCell.x}-${startCell.y}`);\n    path.push(startCell.val);\n    dfs(startCell.x, startCell.y, path);\n\n    return minPath;\n  }"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "let tribonacci = [0];\n    if (n > 0) tribonacci.push(3);\n    if (n > 1) tribonacci.push(2);\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            tribonacci.push(1 + i / 2);\n        } else {\n            tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n        }\n    }\n    return tribonacci;\n}"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "let product = 1;\n    let hasOddDigit = false;\n\n    while (n > 0) {\n        const digit = n % 10;\n\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n\n        n = Math.floor(n / 10);\n    }\n\n    return hasOddDigit ? product : 0;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "let count = 0;\n   for (let i = 0; i < string.length; i++) {\n       if (string[i] === '[') {\n           count++;\n       } else if (string[i] === ']' && count > 1) {\n           return true;\n       }\n   }\n   return false;\n}"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "// map through the array and round each element to the upper integer using Math.ceil()\n    let roundedLst = lst.map(num => Math.ceil(num));\n\n    // map through the rounded array and square each element using num * num\n    let squaredLst = roundedLst.map(num => num * num);\n\n    // use the reduce method to sum up all the elements in the squared array\n    let sumOfSquares = squaredLst.reduce((sum, num) => sum + num, 0);\n\n    return sumOfSquares;\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "if (txt.length === 0 || txt[txt.length - 1] === ' ') {\n     return false;\n   }\n\n   const lastChar = txt[txt.length - 1];\n   const isLetter = /^[a-zA-Z]$/.test(lastChar);\n   const prevChar = txt[txt.length - 2];\n   const isNotPartOfWord = prevChar === ' ' || prevChar === undefined;\n\n   return isLetter && isNotPartOfWord;\n }"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "for (let i = arr.length-2; i >= 0; i--) {\n     if (arr[i] > arr[i+1]) {\n       return i;\n     }\n   }\n   return -1;\n }"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "// Initialize variables for the maximum negative and minimum positive numbers\n  let maxNegative = null;\n  let minPositive = null;\n\n  // Iterate through each element in the input list\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n\n    // If the number is negative and greater than the current maximum, update the maximum\n    if (num < 0 && (maxNegative === null || num > maxNegative)) {\n      maxNegative = num;\n    }\n\n    // If the number is positive and smaller than the current minimum, update the minimum\n    if (num > 0 && (minPositive === null || num < minPositive)) {\n      minPositive = num;\n    }\n  }\n\n  // Return a tuple containing the maximum negative number and minimum positive number\n  return [maxNegative, minPositive];\n}"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "// Convert strings to numbers with the appropriate decimal separator\n  const numA = typeof a === 'string' ? parseFloat(a.replace(',', '.')) : a;\n  const numB = typeof b === 'string' ? parseFloat(b.replace(',', '.')) : b;\n\n  // Compare the numbers\n  if (numA > numB) {\n    return a;\n  } else if (numA < numB) {\n    return b;\n  } else {\n    return \"none\";\n  }\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "// If n is less than 8 or if n is odd, it can't be written as the sum of exactly 4 positive even numbers.\n    if (n < 8 || n % 2 !== 0) {\n        return false;\n    }\n\n    // Check all possible combinations of 4 positive even numbers that add up to n.\n    for (let i = 2; i <= n / 2; i += 2) {\n        for (let j = i; j <= n / 2; j += 2) {\n            for (let k = j; k <= n / 2; k += 2) {\n                const l = n - i - j - k;\n                // If we find a combination where l is positive and even, then n can be written as the sum of exactly 4 positive even numbers.\n                if (l > 0 && l % 2 === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // If no combination is found, then n cannot be written as the sum of exactly 4 positive even numbers.\n    return false;\n}"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "let result = 1;\n   for (let i = n; i > 0; i--) {\n       let factorial = 1;\n       for (let j = i; j > 0; j--) {\n           factorial *= j;\n       }\n       result *= factorial;\n   }\n   return result;\n}"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "// Replace all spaces with underscores\n  let replacedText = text.replace(/ /g, '_');\n\n  // Replace multiple consecutive underscores with a single dash\n  replacedText = replacedText.replace(/_{2,}/g, '-');\n\n  return replacedText;\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "const digitCount = filename.match(/[0-9]/g) ? filename.match(/[0-9]/g).length : 0;\n   if (digitCount > 3) return 'No';\n\n   const parts = filename.split('.');\n   if (parts.length !== 2) return 'No';\n\n   const [name, ext] = parts;\n   if (!/^[a-zA-Z]/.test(name)) return 'No';\n\n   const validExts = ['txt', 'exe', 'dll'];\n   if (!validExts.includes(ext)) return 'No';\n\n   return 'Yes';\n}"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n       if (i % 3 === 0) {\n           sum += lst[i] * lst[i]; // square the element\n       } else if (i % 4 === 0 && i % 3 !== 0) {\n           sum += lst[i] * lst[i] * lst[i]; // cube the element\n       } else {\n           sum += lst[i]; // add the element as is\n       }\n   }\n   return sum;\n}"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "const primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n  const words = sentence.split(' ');\n  const primeWords = [];\n\n  for (let i = 0; i < words.length; i++) {\n    if (primes.has(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n\n  return primeWords.join(' ');\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n\n    const resultNumerator = numeratorX * numeratorN;\n    const resultDenominator = denominatorX * denominatorN;\n\n    return resultNumerator % resultDenominator === 0;\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "// Function to calculate the sum of digits in a number\n    function digitSum(n) {\n        return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    // Sorting the array using the comparator function\n    nums.sort((a, b) => {\n        const sumA = digitSum(a);\n        const sumB = digitSum(b);\n\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b); // Stable sort for equal elements based on original index\n        } else {\n            return sumA - sumB;\n        }\n    });\n\n    return nums;\n}\n\n// Test cases\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "let count = 0;\n\n   for (let i = 0; i < nums.length; i++) {\n     const num = Math.abs(nums[i]); // Get the absolute value of the number\n     const firstDigit = parseInt(String(num).charAt(0)); // Get the first digit\n     const lastDigit = parseInt(String(num).slice(-1)); // Get the last digit\n\n     if (num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n       count++; // Increment the count if the number meets the criteria\n     }\n   }\n\n   return count;\n }"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "// Calculate array elements as per the given formula\n    const a = Array.from({ length: n }, (_, i) => i * i - i + 1);\n\n    let count = 0;\n\n    // Iterate through all possible triplets and check if their sum is a multiple of 3\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\n   if (!planets.includes(planet1) || !planets.includes(planet2)) {\n     return {};\n   }\n\n   const index1 = planets.indexOf(planet1);\n   const index2 = planets.indexOf(planet2);\n   let startIndex, endIndex;\n\n   if (index1 < index2) {\n     startIndex = index1 + 1;\n     endIndex = index2;\n   } else {\n     startIndex = index2 + 1;\n     endIndex = index1;\n   }\n\n   return planets.slice(startIndex, endIndex);\n}"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "let filteredLst = lst.filter(str => str.length % 2 === 0); // Remove strings with odd lengths\n   filteredLst.sort((a, b) => a.length - b.length || a.localeCompare(b)); // Sort by length first and alphabetically if lengths are equal\n   return filteredLst;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "// Check if n is a prime number\n  const isPrime = num => {\n    for (let i = 2; i < num; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  // Return x if n is prime, otherwise return y\n  return isPrime(n) ? x : y;\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "// Initialize sum to 0\n  let sum = 0;\n\n  // Iterate over each number in the list\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n\n    // Check if the number is positive, an integer, and odd\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      // Add the square of the number to the sum\n      sum += Math.pow(num, 2);\n    }\n  }\n\n  // Return the final sum\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "// Initialize an empty array to store the differences\n    let diff = [];\n\n    // Loop through the arrays using a for loop\n    for (let i = 0; i < game.length; i++) {\n      // Calculate the absolute difference between the corresponding elements in the two arrays\n      // and push it into the 'diff' array\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n\n    // Return the 'diff' array containing the differences\n    return diff;\n  }"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "let maxStrength = -Infinity;\n    let strongestExt = '';\n\n    for (let ext of extensions) {\n        let strength = (ext.match(/[A-Z]/g) || []).length - (ext.match(/[a-z]/g) || []).length;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n\n    return classname + '.' + strongestExt;\n}"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "const extendedString = a + a;\n    return extendedString.includes(b);\n}"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "let odd = 0;\n    let even = 0;\n\n    num = Math.abs(num); // handle negative numbers by converting to positive\n\n    while (num > 0) {\n      const digit = num % 10; // get the last digit of the number\n      if (digit % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = Math.floor(num / 10); // remove the last digit from the number\n    }\n\n    return [even, odd];\n}"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "const romanNumerals = [\n     { value: 1000, numeral: \"m\" },\n     { value: 900, numeral: \"cm\" },\n     { value: 500, numeral: \"d\" },\n     { value: 400, numeral: \"cd\" },\n     { value: 100, numeral: \"c\" },\n     { value: 90, numeral: \"xc\" },\n     { value: 50, numeral: \"l\" },\n     { value: 40, numeral: \"xl\" },\n     { value: 10, numeral: \"x\" },\n     { value: 9, numeral: \"ix\" },\n     { value: 5, numeral: \"v\" },\n     { value: 4, numeral: \"iv\" },\n     { value: 1, numeral: \"i\" }\n   ];\n\n   let result = \"\";\n   for (const symbol of romanNumerals) {\n     while (number >= symbol.value) {\n       result += symbol.numeral;\n       number -= symbol.value;\n     }\n   }\n\n   return result.toLowerCase();\n }"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "// Square the lengths of each side\n  var aSquared = a * a;\n  var bSquared = b * b;\n  var cSquared = c * c;\n\n  // Check if any of the squares is equal to the sum of the other two squares\n  // This condition determines if the triangle is right-angled\n  if (aSquared + bSquared === cSquared || aSquared + cSquared === bSquared || bSquared + cSquared === aSquared) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "let maxUniqueChars = 0;\n   let result = \"\";\n\n   for (let word of words) {\n       let uniqueChars = new Set(word).size;\n       if (uniqueChars > maxUniqueChars ||\n           (uniqueChars === maxUniqueChars && word < result)) {\n           maxUniqueChars = uniqueChars;\n           result = word;\n       }\n   }\n\n   return result;\n}"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "// Calculate the total number of carrots eaten after the meals\n    let eaten = Math.min(need, remaining);\n    // Calculate the number of carrots left after the meals\n    let left = remaining - eaten;\n\n    return [number + eaten, left];\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "let result = operand[0];\n\n   for (let i = 1; i < operand.length; i++) {\n     switch (operator[i - 1]) {\n       case '+':\n         result += operand[i];\n         break;\n       case '-':\n         result -= operand[i];\n         break;\n       case '*':\n         result *= operand[i];\n         break;\n       case '//':\n         result = Math.floor(result / operand[i]);\n         break;\n       case '**':\n         result **= operand[i];\n         break;\n     }\n   }\n\n   return result;\n }"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "let reversed = s.split('').reverse().join('');\n   let hasLetter = false;\n\n   for (let i = 0; i < reversed.length; i++) {\n       if ((reversed[i] >= 'a' && reversed[i] <= 'z') || (reversed[i] >= 'A' && reversed[i] <= 'Z')) {\n           hasLetter = true;\n           reversed = reversed.substring(0, i) + (reversed[i] === reversed[i].toLowerCase() ? reversed[i].toUpperCase() : reversed[i].toLowerCase()) + reversed.substring(i + 1);\n       }\n   }\n\n   return hasLetter ? reversed : s;\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "if (text === \"\") {\n     return \"none\";\n   } else {\n     const md5Hash = crypto.createHash('md5');\n     md5Hash.update(text);\n     return md5Hash.digest('hex');\n   }\n}"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "const result = [];\n   for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n     if (i % 2 === 0) {\n       result.push(i);\n     }\n   }\n   return result;\n }"}

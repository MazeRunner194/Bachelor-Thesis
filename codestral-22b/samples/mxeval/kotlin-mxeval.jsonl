{"task_id": "HumanEval_kotlin/0", "language": "kotlin", "completion": "for (i in 0 until numbers.size - 1) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/1", "language": "kotlin", "completion": "var parenStack = mutableListOf<Char>()\n    var groupStartIndex = -1\n    val groups = mutableListOf<String>()\n\n    for (i in 0 until parenString.length) {\n        if (parenString[i] == '(') {\n            if (groupStartIndex == -1) groupStartIndex = i // Start a new group\n            parenStack.add(parenString[i])\n        } else if (parenString[i] == ')') {\n            if (!parenStack.isEmpty()) {\n                parenStack.removeAt(parenStack.lastIndex)\n            }\n            if (parenStack.isEmpty() && groupStartIndex != -1) {\n                groups.add(parenString.substring(groupStartIndex, i + 1)) // End of a group\n                groupStartIndex = -1\n            }\n        }\n    }\n\n    return groups\n}"}
{"task_id": "HumanEval_kotlin/2", "language": "kotlin", "completion": "return number - Math.floor(number)\n}"}
{"task_id": "HumanEval_kotlin/3", "language": "kotlin", "completion": "var balance = 0.0\n    for (operation in operations) {\n        when (operation) {\n            is Int -> balance += operation\n            is Double -> balance += operation\n            else -> throw IllegalArgumentException(\"Invalid operation type\")\n        }\n        if (balance < 0.0) return true\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/4", "language": "kotlin", "completion": "if (numbers.isEmpty()) throw IllegalArgumentException(\"Input list is empty\")\n\n    val mean = numbers.average()\n    return numbers.map { kotlin.math.abs(it - mean) }.average()\n}"}
{"task_id": "HumanEval_kotlin/5", "language": "kotlin", "completion": "if (numbers.isEmpty()) return emptyList()\n\n   val result = ArrayList<Any>()\n\n   for ((index, number) in numbers.withIndex()) {\n       result.add(number)\n       if (index < numbers.size - 1) {\n           result.add(delimeter)\n       }\n   }\n\n   return result\n}"}
{"task_id": "HumanEval_kotlin/6", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    for (parens in parenString.split(\" \")) {\n        var depth = 0\n        var maxDepth = 0\n        for (char in parens) {\n            if (char == '(') {\n                depth++\n                if (depth > maxDepth) {\n                    maxDepth = depth\n                }\n            } else if (char == ')') {\n                depth--\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/7", "language": "kotlin", "completion": "return strings.filter{ it.toString().contains(substring)}\n}"}
{"task_id": "HumanEval_kotlin/8", "language": "kotlin", "completion": "var sum = 0\n    var product = 1\n    for(number in numbers){\n        if(number is Int) {\n            sum += number\n            product *= number\n        }\n    }\n    return listOf(sum,product)\n}"}
{"task_id": "HumanEval_kotlin/9", "language": "kotlin", "completion": "val result = mutableListOf<Int>()\n    var maxSoFar = Int.MIN_VALUE\n\n    for (number in numbers) {\n        if (number is Int) {\n            maxSoFar = Math.max(maxSoFar, number)\n            result.add(maxSoFar)\n        } else {\n            throw IllegalArgumentException(\"List must contain only integers\")\n        }\n    }\n\n    return result\n}\n\nfun main() {\n    val input = listOf(1, 2, 3, 2, 3, 4, 2)\n    println(rollingMax(input))\n}"}
{"task_id": "HumanEval_kotlin/10", "language": "kotlin", "completion": "fun isPalindrome(s: String, start: Int, end: Int): Boolean {\n        var left = start\n        var right = end\n        while (left < right) {\n            if (s[left] != s[right]) return false\n            left++\n            right--\n        }\n        return true\n    }\n\n    val n = string.length\n    for (i in n - 1 downTo 0) {\n        if (isPalindrome(string, 0, i)) {\n            val suffix = string.substring(i + 1).reversed()\n            return string + suffix\n        }\n    }\n    return \"\"\n}"}
{"task_id": "HumanEval_kotlin/11", "language": "kotlin", "completion": "require(a.length == b.length) {\"Both strings should be of equal length\"}\n\n    return a.zip(b).map{ (c1, c2) -> if (c1 == c2) '0' else '1'}.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/12", "language": "kotlin", "completion": "if (strings.isEmpty()) return null\n\n    var maxLength = -1\n    var longestString: String? = null\n    for (str in strings) {\n        val length = str.toString().length\n        if (length > maxLength) {\n            maxLength = length\n            longestString = str.toString()\n        }\n    }\n    return longestString\n}"}
{"task_id": "HumanEval_kotlin/13", "language": "kotlin", "completion": "tailrec fun gcd(x: Int, y: Int): Int = if (y == 0) x else gcd(y, x % y)\n\n    return gcd(Math.abs(a), Math.abs(b))\n}"}
{"task_id": "HumanEval_kotlin/14", "language": "kotlin", "completion": "val prefixList = mutableListOf<String>()\n    var currentPrefix = \"\"\n    for (character in string) {\n        currentPrefix += character\n        prefixList.add(currentPrefix)\n    }\n    return prefixList\n}"}
{"task_id": "HumanEval_kotlin/15", "language": "kotlin", "completion": "return (0..n).joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/16", "language": "kotlin", "completion": "return string.toLowerCase().toSet().size\n}"}
{"task_id": "HumanEval_kotlin/17", "language": "kotlin", "completion": "val notes = musicString.split(\" \")\n  val beats = mutableListOf<Int>()\n\n  for (note in notes) {\n    when (note) {\n      \"o\" -> beats.add(4)\n      \"o|\" -> beats.add(2)\n      \".|\" -> beats.add(1)\n      else -> throw IllegalArgumentException(\"Invalid note: $note\")\n    }\n  }\n\n  return beats\n}"}
{"task_id": "HumanEval_kotlin/18", "language": "kotlin", "completion": "if (substring.isEmpty()) return 0;\n   var count = 0;\n   var index = 0;\n   while (index != -1) {\n       index = string.indexOf(substring, index);\n       if (index != -1) {\n           ++count;\n           ++index;\n       }\n   }\n   return count;\n}"}
{"task_id": "HumanEval_kotlin/19", "language": "kotlin", "completion": "val numberMap = mapOf(\"zero\" to 0, \"one\" to 1, \"two\" to 2, \"three\" to 3, \"four\" to 4, \"five\" to 5, \"six\" to 6, \"seven\" to 7, \"eight\" to 8, \"nine\" to 9)\n   val numberList = numbers.split(\" \")\n   return numberList.sortedBy { numberMap[it] }.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/20", "language": "kotlin", "completion": "if (numbers.size < 2) return emptyList() // Not enough elements to compare\n\n    var closestPair = numbers.take(2).sorted() // Start with the first two elements\n    var minDifference = Math.abs(closestPair[1] - closestPair[0])\n\n    for (i in 0 until numbers.size - 1) {\n        for (j in i + 1 until numbers.size) {\n            val diff = Math.abs(numbers[j] - numbers[i])\n            if (diff < minDifference) {\n                minDifference = diff\n                closestPair = listOf(numbers[i], numbers[j]).sorted() // Make sure smaller number is first\n            }\n        }\n    }\n\n    return closestPair\n}"}
{"task_id": "HumanEval_kotlin/21", "language": "kotlin", "completion": "val min = numbers.min() ?: throw IllegalArgumentException(\"The list must have at least two elements\")\n   val max = numbers.max() ?: throw IllegalArgumentException(\"The list must have at least two elements\")\n\n   return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "HumanEval_kotlin/22", "language": "kotlin", "completion": "return values.filterIsInstance<Int>()\n}"}
{"task_id": "HumanEval_kotlin/23", "language": "kotlin", "completion": "return string.length\n}"}
{"task_id": "HumanEval_kotlin/24", "language": "kotlin", "completion": "for (i in n - 1 downTo 2) {\n      if (n % i == 0) {\n          return i\n      }\n    }\n    return 1 // If there is no divisor other than 1, return 1.\n}"}
{"task_id": "HumanEval_kotlin/25", "language": "kotlin", "completion": "var m = n\n   val factors = mutableListOf<Int>()\n   for (i in 2..m) {\n       while (m % i == 0) {\n           factors.add(i)\n           m /= i\n       }\n   }\n   return factors\n}"}
{"task_id": "HumanEval_kotlin/26", "language": "kotlin", "completion": "val counts = mutableMapOf<Any, Int>()\n    for (number in numbers) {\n        if (counts.containsKey(number)) {\n            counts[number] = counts[number]!! + 1\n        } else {\n            counts[number] = 1\n        }\n    }\n    return numbers.filter { counts[it] == 1 }\n}"}
{"task_id": "HumanEval_kotlin/27", "language": "kotlin", "completion": "return string.map { c ->\n        if (c.isUpperCase()) c.toLowerCase() else c.toUpperCase()\n    }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/28", "language": "kotlin", "completion": "return strings.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/29", "language": "kotlin", "completion": "return strings.filter { it.toString().startsWith(prefix) }\n}"}
{"task_id": "HumanEval_kotlin/30", "language": "kotlin", "completion": "return l.filterIsInstance<Int>().filter { it > 0 }\n}"}
{"task_id": "HumanEval_kotlin/31", "language": "kotlin", "completion": "if (n <= 1) return false;\n  for (i in 2..Math.sqrt(n.toDouble()).toInt()){\n    if (n % i == 0) return false;\n  }\n  return true;\n}"}
{"task_id": "HumanEval_kotlin/33", "language": "kotlin", "completion": "val sorted = l.filterIndexed { index, _ -> index % 3 == 0 }.sorted()\n    return l.mapIndexed { index, i -> if (index % 3 == 0) sorted[index / 3] else i }\n}"}
{"task_id": "HumanEval_kotlin/34", "language": "kotlin", "completion": "return l.distinct().sorted()\n}"}
{"task_id": "HumanEval_kotlin/35", "language": "kotlin", "completion": "return l.maxOrNull() ?: throw NoSuchElementException(\"The list is empty.\")\n}"}
{"task_id": "HumanEval_kotlin/36", "language": "kotlin", "completion": "var count = 0\n    for (i in 1 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            val digits = i.toString().toCharArray()\n            for (digit in digits) {\n                if (digit == '7') {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/37", "language": "kotlin", "completion": "val evenNumbers = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    return l.mapIndexed { index, value ->\n        if (index % 2 == 0) evenNumbers[index / 2] else value\n    }\n}"}
{"task_id": "HumanEval_kotlin/39", "language": "kotlin", "completion": "var count = 0\n    var num = 2\n    var fibSeq = listOf(0, 1)\n\n    while (count < n) {\n        val nextNum = fibSeq.last() + fibSeq[fibSeq.size - 2]\n        if (isPrime(nextNum)) {\n            count++\n            num = nextNum\n        }\n        fibSeq = listOf(fibSeq.last(), nextNum)\n    }\n    return num\n}\n\nfun isPrime(num : Int) : Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/40", "language": "kotlin", "completion": "if (l.size < 3) return false\n   val sortedList = l.sorted()\n   var leftPointer: Int\n   var rightPointer: Int\n   for (i in 0 until sortedList.size - 2) {\n      if (i > 0 && sortedList[i] == sortedList[i - 1]) continue // Skip same element to avoid duplicate triplet\n      leftPointer = i + 1\n      rightPointer = sortedList.size - 1\n      while (leftPointer < rightPointer) {\n         if (sortedList[i] + sortedList[leftPointer] + sortedList[rightPointer] == 0) return true\n         else if (sortedList[i] + sortedList[leftPointer] + sortedList[rightPointer] < 0) leftPointer++\n         else rightPointer--\n      }\n   }\n   return false\n}"}
{"task_id": "HumanEval_kotlin/41", "language": "kotlin", "completion": "// There will be n collisions for each pair of cars driving in opposite directions.\n   // Since there are n pairs, we return n as the result.\n   return n\n}"}
{"task_id": "HumanEval_kotlin/42", "language": "kotlin", "completion": "return l.map { it -> if (it is Int) it + 1 else it }\n}"}
{"task_id": "HumanEval_kotlin/43", "language": "kotlin", "completion": "val set = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in set) {\n            return true\n        }\n        set.add(num)\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/44", "language": "kotlin", "completion": "if (x == 0 || base < 2 || base > 9){\n        return x.toString()\n    }\n\n    var result = \"\"\n    var n = x\n\n    while (n > 0){\n        val r = n % base\n        n /= base\n        result = r.toString() + result\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/45", "language": "kotlin", "completion": "return (a * h) / 2.0\n}"}
{"task_id": "HumanEval_kotlin/46", "language": "kotlin", "completion": "if (n < 0) throw IllegalArgumentException(\"n must be non-negative\")\n   if (n == 0 || n == 1) return 0\n   if (n == 2) return 2\n   if (n == 3) return 0\n   var a = 0\n   var b = 0\n   var c = 2\n   var d = 0\n   for (i in 4..n) {\n       val temp = a + b + c + d\n       a = b\n       b = c\n       c = d\n       d = temp\n   }\n   return d\n}"}
{"task_id": "HumanEval_kotlin/47", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[sortedList.size / 2] + sortedList[sortedList.size / 2 - 1]) / 2.0\n    } else {\n        sortedList[sortedList.size / 2]\n    }\n}"}
{"task_id": "HumanEval_kotlin/48", "language": "kotlin", "completion": "return text == text.reversed()\n}"}
{"task_id": "HumanEval_kotlin/49", "language": "kotlin", "completion": "if (n == 0) return 1 % p // Base case: any number to the power of 0 is 1\n   var result = 1L // Use Long to avoid overflow\n   val base = 2L // The base is always 2 in this problem\n   for (i in 0 until n) {\n       result *= base\n       result %= p.toLong() // Take the modulus at each step to keep the number within bounds\n   }\n   return result.toInt() // Convert back to Int before returning\n}"}
{"task_id": "HumanEval_kotlin/51", "language": "kotlin", "completion": "return text.replace(\"[aeiouAEIOU]\".toRegex(), \"\")\n}"}
{"task_id": "HumanEval_kotlin/52", "language": "kotlin", "completion": "return l.all { it < t }\n}"}
{"task_id": "HumanEval_kotlin/53", "language": "kotlin", "completion": "return x + y;\n}"}
{"task_id": "HumanEval_kotlin/54", "language": "kotlin", "completion": "val charCountMap = mutableMapOf<Char, Int>()\n    for (char in s0.toCharArray()) {\n        charCountMap[char] = charCountMap.getOrDefault(char, 0) + 1\n    }\n\n    for (char in s1.toCharArray()) {\n        val count = charCountMap.getOrDefault(char, 0) - 1\n        if (count < 0) {\n            return false\n        }\n        charCountMap[char] = count\n    }\n\n    for (value in charCountMap.values) {\n        if (value != 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/55", "language": "kotlin", "completion": "if (n <= 1) {\n        return n\n    }\n    var a = 0\n    var b = 1\n    for (i in 2..n) {\n        val temp = a + b\n        a = b\n        b = temp\n    }\n    return b\n}"}
{"task_id": "HumanEval_kotlin/56", "language": "kotlin", "completion": "var count = 0\n    for (c in brackets){\n        if (c == '<'){\n            count++\n        }else if (c == '>'){\n            count--\n            if (count < 0){\n                return false\n            }\n        }\n    }\n    return count == 0\n}"}
{"task_id": "HumanEval_kotlin/57", "language": "kotlin", "completion": "var increasing = true\n    var decreasing = true\n    for (i in 0 until l.size - 1) {\n        if (l[i] > l[i + 1]) {\n            increasing = false\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}"}
{"task_id": "HumanEval_kotlin/58", "language": "kotlin", "completion": "// Convert the second list to a set for O(1) lookups\n    val s2 = l2.toSet()\n\n    // Use intersect to find common elements, then convert back to a list\n    return l1.distinct().filter { it in s2 }\n}"}
{"task_id": "HumanEval_kotlin/59", "language": "kotlin", "completion": "var i = 2L\n  var number = n.toLong()\n  while (i * i <= number) {\n    if (number % i == 0L) {\n      number /= i\n    } else {\n      i += 1\n    }\n  }\n  return number.toInt()\n}"}
{"task_id": "HumanEval_kotlin/60", "language": "kotlin", "completion": "return (1..n).sum()\n}"}
{"task_id": "HumanEval_kotlin/61", "language": "kotlin", "completion": "var count = 0\n    for (bracket in brackets) {\n        when (bracket) {\n            '(' -> count++\n            ')' -> count--\n        }\n        if (count < 0) return false // Closing bracket without opening one\n    }\n    return count == 0 // True if all opened brackets have been closed\n}"}
{"task_id": "HumanEval_kotlin/62", "language": "kotlin", "completion": "return xs.drop(1).mapIndexed { i, v -> (i + 1) * v }\n}"}
{"task_id": "HumanEval_kotlin/63", "language": "kotlin", "completion": "if (n < 3) return 0\n    if (n == 3) return 1\n\n    var a = 0\n    var b = 0\n    var c = 1\n    var result = 0\n\n    for (i in 4..n) {\n        result = a + b + c\n        a = b\n        b = c\n        c = result\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/64", "language": "kotlin", "completion": "return s.toLowerCase().filter { it in \"aeiou\" || (it == 'y' && s.last() == 'y') }.length\n}"}
{"task_id": "HumanEval_kotlin/65", "language": "kotlin", "completion": "val digits = x.toString().toCharArray()\n    if (shift >= digits.size) return String(digits).reversed()\n    for (i in 0 until shift) {\n        val temp = digits[digits.size - 1]\n        for (j in digits.size - 2 downTo 0) digits[j + 1] = digits[j]\n        digits[0] = temp\n    }\n    return String(digits)\n}"}
{"task_id": "HumanEval_kotlin/66", "language": "kotlin", "completion": "return s.filter { it.isUpperCase() }.sumBy { it.toInt() }\n}"}
{"task_id": "HumanEval_kotlin/67", "language": "kotlin", "completion": "val parts = s.split(\" \")\n    val apples = parts[0].toInt()\n    val oranges = parts[4].toInt()\n    return n - apples - oranges\n}"}
{"task_id": "HumanEval_kotlin/68", "language": "kotlin", "completion": "var minValue = Int.MAX_VALUE\n    var minIndex = -1\n\n    for (i in arr.indices) {\n        if (arr[i] is Int && arr[i] % 2 == 0 && arr[i] < minValue) {\n            minValue = arr[i] as Int\n            minIndex = i\n        }\n    }\n\n    return if (minIndex != -1) listOf(minValue, minIndex) else emptyList()\n}"}
{"task_id": "HumanEval_kotlin/69", "language": "kotlin", "completion": "// Group the list by its elements and map each group to a pair containing the element and its frequency\n    val frequencies = lst.groupingBy { it }.eachCount().mapValues { (_, value) -> value }\n\n    // Filter the pairs based on the condition: element <= frequency, sort them in descending order by their elements\n    // Take the first pair's element or return -1 if there are no such pairs\n    return frequencies.filter { it.key <= it.value }.toList().sortedByDescending { it.first }.firstOrNull()?.first ?: -1\n}"}
{"task_id": "HumanEval_kotlin/70", "language": "kotlin", "completion": "if (lst.isEmpty()) return lst\n\n    val sorted = lst.sorted() as List<Int>\n    var result = mutableListOf<Int>()\n    var left = 0\n    var right = sorted.size - 1\n\n    while (left <= right) {\n        if (result.isEmpty() || sorted[left] > result.last()) {\n            result.add(sorted[left])\n            left++\n        } else if (!result.isEmpty() && sorted[right] < result.last()) {\n            result.add(sorted[right])\n            right--\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/71", "language": "kotlin", "completion": "if ((a + b > c) && (b + c > a) && (c + a > b)) {\n        val s = (a.toDouble() + b.toDouble() + c.toDouble()) / 2\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).roundToTwoDecimalPlaces()\n    } else {\n        return -1\n    }\n}\n\nfun Double.roundToTwoDecimalPlaces(): Double {\n    val df = DecimalFormat(\"#.##\")\n    return df.format(this).toDouble()\n}"}
{"task_id": "HumanEval_kotlin/72", "language": "kotlin", "completion": "if (q != q.reversed()) return false // check if list is palindromic\n    val sum = q.sum() // calculate the sum of elements in the list\n    return sum <= w // return true if sum is less than or equal to max weight\n}"}
{"task_id": "HumanEval_kotlin/73", "language": "kotlin", "completion": "var left = 0\n    var right = arr.lastIndex\n    var changes = 0\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++\n        }\n        left++\n        right--\n    }\n    return changes\n}"}
{"task_id": "HumanEval_kotlin/74", "language": "kotlin", "completion": "val sum1 = lst1.joinToString(\"\").length\n    val sum2 = lst2.joinToString(\"\").length\n\n    return if (sum1 <= sum2) {\n        lst1\n    } else {\n        lst2\n    }\n}"}
{"task_id": "HumanEval_kotlin/75", "language": "kotlin", "completion": "var n = a\n   var count = 0\n   for (i in 2..n) {\n       while (n % i == 0) {\n           count++\n           if (count > 3) return false\n           n /= i\n       }\n   }\n   return count == 3 && n == 1\n}"}
{"task_id": "HumanEval_kotlin/76", "language": "kotlin", "completion": "if (n == 1) return x == 1 // 1^int = 1 for any int except when int = 0\n    var temp = 1\n    while (temp < x) {\n        temp *= n\n    }\n    return temp == x\n}"}
{"task_id": "HumanEval_kotlin/77", "language": "kotlin", "completion": "return Math.round(Math.pow(Math.abs(a).toDouble(), 1.0 / 3.0)) * Math.round(Math.pow(Math.abs(a).toDouble(), 1.0 / 3.0)) * Math.round(Math.pow(Math.abs(a).toDouble(), 1.0 / 3.0)) == a\n}"}
{"task_id": "HumanEval_kotlin/78", "language": "kotlin", "completion": "val primes = listOf(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n   var count = 0\n   for (hexDigit in num.toString()) {\n       if (primes.contains(hexDigit.toUpperCase())) count++\n   }\n   return count\n}"}
{"task_id": "HumanEval_kotlin/79", "language": "kotlin", "completion": "return \"db${Integer.toBinaryString(decimal)}db\"\n}"}
{"task_id": "HumanEval_kotlin/80", "language": "kotlin", "completion": "if (s.length < 3) return false\n    for (i in 0..s.length - 3) {\n        val substring = s.substring(i, i + 3)\n        if (substring[0] == substring[1] || substring[1] == substring[2] || substring[0] == substring[2]) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/81", "language": "kotlin", "completion": "return grades.map { grade ->\n        when (grade) {\n            4.0 -> \"A+\"\n            in 3.7..3.99999999999999 -> \"A\"\n            in 3.3..3.69999999999999 -> \"A-\"\n            in 3.0..3.29999999999999 -> \"B+\"\n            in 2.7..2.99999999999999 -> \"B\"\n            in 2.3..2.69999999999999 -> \"B-\"\n            in 2.0..2.29999999999999 -> \"C+\"\n            in 1.7..1.99999999999999 -> \"C\"\n            in 1.3..1.69999999999999 -> \"C-\"\n            in 1.0..1.29999999999999 -> \"D+\"\n            in 0.7..0.99999999999999 -> \"D\"\n            in 0.0..0.69999999999999 -> \"D-\"\n            0.0 -> \"E\"\n            else -> \"Invalid Grade\"\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/82", "language": "kotlin", "completion": "return string.length > 1 && (2..<string.length).none { string.length % it == 0 }\n}"}
{"task_id": "HumanEval_kotlin/83", "language": "kotlin", "completion": "if (n == 0) {\n        throw IllegalArgumentException(\"Input must be a positive integer.\")\n    } else if (n == 1) {\n        return 2 // only 1 and 10 are single-digit numbers that start or end with 1\n    }\n\n    val totalNumbers = Math.pow(10.toDouble(), n.toDouble()).toInt() - 1\n    var count = (n - 1) * Math.pow(10.toDouble(), (n - 2).toDouble()).toInt() * 2\n\n    // Subtract double-counted numbers that start and end with 1 (11, 111, etc.)\n    count -= Math.pow(9.toDouble(), (n - 2).toDouble()).toInt()\n\n    return totalNumbers - count\n}"}
{"task_id": "HumanEval_kotlin/84", "language": "kotlin", "completion": "return Integer.toBinaryString(Integer.toString(n).chars().map(Character::getNumericValue).sum())\n}"}
{"task_id": "HumanEval_kotlin/85", "language": "kotlin", "completion": "return lst.filterIndexed{ index, value -> index % 2 == 1 && value % 2 == 0 }.sum()\n}"}
{"task_id": "HumanEval_kotlin/86", "language": "kotlin", "completion": "return s.split(\" \")\n        .joinToString(\" \") { it.toCharArray().sorted().joinToString(\"\") }\n}"}
{"task_id": "HumanEval_kotlin/87", "language": "kotlin", "completion": "val coordinates = mutableListOf<Pair<Int, Int>>()\n    for (i in lst.indices) {\n        val row = lst[i] as List<*>\n        for (j in row.indices) {\n            if (row[j] == x) {\n                coordinates.add(Pair(i, j))\n            }\n        }\n    }\n    // Sort coordinates initially by rows in ascending order\n    coordinates.sortBy { it.first }\n    // Then sort coordinates of the row by columns in descending order\n    val result = mutableListOf<Pair<Int, Int>>()\n    var i = 0\n    while (i < coordinates.size) {\n        var j = i + 1\n        while (j < coordinates.size && coordinates[j].first == coordinates[i].first) {\n            j++\n        }\n        val rowCoordinates = coordinates.subList(i, j).sortedByDescending { it.second }\n        result.addAll(rowCoordinates)\n        i = j\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/88", "language": "kotlin", "completion": "if (array.isEmpty()) return emptyList()\n    val sortedArray = array.sortedBy { it as Int }\n    return if ((sortedArray[0] + sortedArray[sortedArray.size - 1]) % 2 == 0) sortedArray.reversed() else sortedArray\n}"}
{"task_id": "HumanEval_kotlin/89", "language": "kotlin", "completion": "return s.map { c -> if (c in 'a'..'z') ('a'.toInt() + (c - 'a' + 4) % 26).toChar() else c }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/90", "language": "kotlin", "completion": "if (lst.size < 2 || lst.distinct().size < 2) {\n        return null\n    }\n    val sortedList = lst.sorted() as List<Int>\n    return sortedList[1]\n}"}
{"task_id": "HumanEval_kotlin/91", "language": "kotlin", "completion": "return s.split(\"[.?!]\".toRegex()).map { it.trim() }.filter { it.startsWith(\"I \", ignoreCase = true) }.size\n}"}
{"task_id": "HumanEval_kotlin/92", "language": "kotlin", "completion": "if (x is Int && y is Int && z is Int) {\n        return x == y + z || y == x + z || z == x + y\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/93", "language": "kotlin", "completion": "return message.map { char ->\n        when (char.toLowerCase()) {\n            'a', 'e', 'i', 'o', 'u' -> ((char - 'A' + 2) % 26 + 'A'.code).toChar()\n            else -> if (char.isUpperCase()) char.toLowerCase() else char.toUpperCase()\n        }\n    }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/94", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) if (n % i == 0) return false\n        return true\n    }\n\n    var largestPrime = -1\n    for (num in lst) {\n        if (isPrime(num)) {\n            largestPrime = maxOf(largestPrime, num)\n        }\n    }\n\n    return if (largestPrime == -1) 0 else largestPrime.toString().map { it - '0' }.sum()\n}"}
{"task_id": "HumanEval_kotlin/95", "language": "kotlin", "completion": "var lower = false\n    var upper = false\n\n    if (dict.isEmpty()) {\n        return false;\n    }\n\n    for (key in dict.keys) {\n        if (key is String) {\n            if (key.toLowerCase() == key) {\n                lower = true\n            } else if (key.toUpperCase() == key) {\n                upper = true\n            } else {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n\n    return !(lower && upper)\n}"}
{"task_id": "HumanEval_kotlin/96", "language": "kotlin", "completion": "return (2..n).filter { it.isPrime() }\n}\n\nprivate fun Int.isPrime(): Boolean {\n    if (this < 2) return false\n    for (i in 2..Math.sqrt(this.toDouble()).toInt()) {\n        if (this % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/97", "language": "kotlin", "completion": "// Get the absolute value of a and b to handle negative numbers correctly\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n\n    // Extract the unit digits by using the modulo operator (%) with 10\n    val unitDigitA = absA % 10\n    val unitDigitB = absB % 10\n\n    // Return the product of the unit digits\n    return unitDigitA * unitDigitB\n}"}
{"task_id": "HumanEval_kotlin/98", "language": "kotlin", "completion": "var count = 0\n    for (i in s.indices step 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/99", "language": "kotlin", "completion": "val doubleValue = value.toDouble()\n  if (doubleValue >= 0) {\n    val floorValue = Math.floor(doubleValue)\n    return if (doubleValue - floorValue < 0.5) floorValue.toInt() else (floorValue + 1).toInt()\n  } else {\n    val ceilValue = Math.ceil(doubleValue)\n    return if (ceilValue - doubleValue < 0.5) ceilValue.toInt() else (ceilValue - 1).toInt()\n  }\n}"}
{"task_id": "HumanEval_kotlin/100", "language": "kotlin", "completion": "val stones = MutableList(n) { 0 }\n    var count = n\n    for (i in 0 until n) {\n        if (count % 2 == 0) {\n            stones[i] = count + 1\n        } else {\n            stones[i] = count - 1\n        }\n        count = stones[i]\n    }\n    return stones.toList()\n}"}
{"task_id": "HumanEval_kotlin/101", "language": "kotlin", "completion": "return s.split(\", \", \" \")\n}"}
{"task_id": "HumanEval_kotlin/102", "language": "kotlin", "completion": "var maxEven = -1 // initialize the maximum even number to be -1\n   for (i in x..y) { // loop through all numbers from x to y inclusive\n      if (i % 2 == 0 && i > maxEven) { // check if the current number is even and greater than the current maximum even number\n         maxEven = i // update the maximum even number\n      }\n   }\n   return maxEven // return the maximum even number in the range [x, y] or -1 if there's no such number\n}"}
{"task_id": "HumanEval_kotlin/103", "language": "kotlin", "completion": "if (n > m) return -1\n   val average = Math.round((n + m).toDouble() / 2)\n   return Integer.toBinaryString(average)\n}"}
{"task_id": "HumanEval_kotlin/104", "language": "kotlin", "completion": "return x.filter { it -> hasNoEvenDigit(it) }.sorted()\n}\n\nprivate fun hasNoEvenDigit(number: Int): Boolean {\n    var num = number\n    while (num > 0) {\n        if ((num % 10) % 2 == 0) return false\n        num /= 10\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/105", "language": "kotlin", "completion": "// Filter out numbers that are not between 1 and 9 inclusive.\n    val filteredNumbers = arr.filterIsInstance<Int>().filter { it in 1..9 }\n\n    // Sort the filtered list of numbers.\n    val sortedNumbers = filteredNumbers.sorted()\n\n    // Reverse the sorted list of numbers.\n    val reversedNumbers = sortedNumbers.reversed()\n\n    // Map each digit to its corresponding name from \"One\", \"Two\", ..., \"Nine\".\n    return reversedNumbers.map {\n        when (it) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3 -> \"Three\"\n            4 -> \"Four\"\n            5 -> \"Five\"\n            6 -> \"Six\"\n            7 -> \"Seven\"\n            8 -> \"Eight\"\n            else -> \"Nine\"\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/106", "language": "kotlin", "completion": "return List(n) { index ->\n        if (index % 2 == 0) {\n            (1..index).fold(1) { acc, i -> acc * i }\n        } else {\n            (1..index).sum()\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/107", "language": "kotlin", "completion": "var countEven = 0\n    var countOdd = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                countEven++\n            } else {\n                countOdd++\n            }\n        }\n    }\n    return listOf(countEven, countOdd)\n}\n\nfun isPalindrome(n: Int): Boolean {\n    var num = n\n    var rev = 0\n    while (num > 0) {\n        val dig = num % 10\n        rev = rev * 10 + dig\n        num /= 10\n    }\n    return n == rev\n}"}
{"task_id": "HumanEval_kotlin/108", "language": "kotlin", "completion": "var count = 0\n    for (i in arr) {\n        if (i is Number && i.toInt().toString().split(\"\").filter{it!=\"-\"}.map{ it.toInt() }.sum() > 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/109", "language": "kotlin", "completion": "if (arr.isEmpty()) return true\n    var sortedArray = arr.sorted()\n    var rotatedArray = ArrayList<Int>()\n    for (i in 0 until arr.size) {\n        rotatedArray = arrayListOf(*(arr.subList(i, arr.size).toTypedArray()), *(arr.subList(0, i).toTypedArray()))\n        if (rotatedArray == sortedArray) return true\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/110", "language": "kotlin", "completion": "val oddIndicesInLst1 = mutableListOf<Int>()\n    val evenNumbersInLst2 = mutableListOf<Int>()\n\n    for (i in lst1.indices) {\n        if (lst1[i] % 2 != 0) {\n            oddIndicesInLst1.add(i)\n        }\n    }\n\n    for (num in lst2) {\n        if (num % 2 == 0) {\n            evenNumbersInLst2.add(num)\n        }\n    }\n\n    return if (oddIndicesInLst1.size <= evenNumbersInLst2.size) \"YES\" else \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/111", "language": "kotlin", "completion": "val words = test.split(\" \")\n    val countMap = mutableMapOf<String, Int>()\n    for (word in words) {\n        if (countMap.containsKey(word)) {\n            countMap[word] = countMap[word]!! + 1\n        } else {\n            countMap[word] = 1\n        }\n    }\n    val maxCount = countMap.values.maxOrNull() ?: return emptyMap<Any?, Any?>()\n    return countMap.filterValues { it == maxCount }\n}"}
{"task_id": "HumanEval_kotlin/112", "language": "kotlin", "completion": "var filteredString = s.filterNot { it in c }\n   return listOf(filteredString, filteredString == filteredString.reversed())\n}"}
{"task_id": "HumanEval_kotlin/113", "language": "kotlin", "completion": "val output = mutableListOf<String>()\n    for (str in lst) {\n        var count = 0\n        for (ch in str) {\n            if ((ch - '0') % 2 == 1) {\n                count++\n            }\n        }\n        val resultStr = \"the number of odd elements $countn the str$countng ${str.length} of the ${str.length}nput.\"\n        output.add(resultStr)\n    }\n    return output\n}"}
{"task_id": "HumanEval_kotlin/114", "language": "kotlin", "completion": "var minSum = Integer.MAX_VALUE\n   var currentSum = 0\n   for (i in nums) {\n       if (currentSum < 0) {\n           currentSum = i\n       } else {\n           currentSum += i\n       }\n       if (currentSum < minSum) {\n           minSum = currentSum\n       }\n   }\n   return minSum\n}"}
{"task_id": "HumanEval_kotlin/115", "language": "kotlin", "completion": "val m = grid.size\n    val n = grid[0].size\n    var res = 0\n\n    for (j in 0 until n) {\n        var i = 0\n        var count = 0\n        while (i < m) {\n            if (grid[i][j] == 1) {\n                count++\n                if (count == capacity) {\n                    res++\n                    count = 0\n                }\n            } else {\n                res += (count + capacity - 1) / capacity\n                count = 0\n            }\n            i++\n        }\n        res += (count + capacity - 1) / capacity\n    }\n\n    return res\n}"}
{"task_id": "HumanEval_kotlin/116", "language": "kotlin", "completion": "return arr.sortedWith(compareBy({ it.toString(2).count{c -> c == '1'} }, { it }))\n}"}
{"task_id": "HumanEval_kotlin/117", "language": "kotlin", "completion": "val consonants = setOf('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n   val words = s.split(\" \")\n   return words.filter { word -> word.count { char -> char.toLowerCase() in consonants } == n }\n}"}
{"task_id": "HumanEval_kotlin/118", "language": "kotlin", "completion": "var vowels = \"aeiouAEIOU\"\n    for (i in word.length-2 downTo 1){\n        if (word[i] in vowels && word[i-1] !in vowels && word[i+1] !in vowels) return word[i].toString()\n    }\n    return \"\"\n}"}
{"task_id": "HumanEval_kotlin/119", "language": "kotlin", "completion": "val openCount = lst.sumBy { it.count { c -> c == '(' } }\n    val closeCount = lst.sumBy { it.count { c -> c == ')' } }\n\n    return if (openCount != closeCount) \"No\" else \"Yes\"\n}"}
{"task_id": "HumanEval_kotlin/120", "language": "kotlin", "completion": "val sortedArr = arr.sortedDescending()\n    return sortedArr.subList(0, k).sorted()\n}"}
{"task_id": "HumanEval_kotlin/121", "language": "kotlin", "completion": "return lst.filterIndexed { index, _ -> index % 2 == 0 }.sumBy { if (it % 2 != 0) it else 0 }\n}"}
{"task_id": "HumanEval_kotlin/122", "language": "kotlin", "completion": "var sum = 0\n    for (i in 0 until k) {\n        if (arr[i] >= 0 && arr[i] < 100) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/123", "language": "kotlin", "completion": "val collatzSeq = mutableListOf<Int>()\n    var currentNum = n\n\n    while (currentNum != 1) {\n        if (currentNum % 2 == 1) {\n            collatzSeq.add(currentNum)\n        }\n        currentNum = if (currentNum % 2 == 0) currentNum / 2 else currentNum * 3 + 1\n    }\n\n    // Adding the last number of sequence which is always 1, if it's odd\n    if (n % 2 == 1) {\n        collatzSeq.add(1)\n    }\n\n    return collatzSeq.sorted()\n}"}
{"task_id": "HumanEval_kotlin/124", "language": "kotlin", "completion": "if (date.isEmpty()) return false\n    val parts = date.split(\"-\")\n    if (parts.size != 3) return false\n    val month = parts[0].toIntOrNull() ?: return false\n    val day = parts[1].toIntOrNull() ?: return false\n    val year = parts[2].toIntOrNull() ?: return false\n    if (month < 1 || month > 12) return false\n    when (month) {\n        1,3,5,7,8,10,12 -> if (day < 1 || day > 31) return false\n        4,6,9,11 -> if (day < 1 || day > 30) return false\n        2 -> if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n            if (day < 1 || day > 29) return false\n        } else {\n            if (day < 1 || day > 28) return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/125", "language": "kotlin", "completion": "val wordsBySpace = txt.split(\" \")\n   if (wordsBySpace.size > 1) return wordsBySpace\n\n   val wordsByComma = txt.split(\",\")\n   if (wordsByComma.size > 1) return wordsByComma\n\n   return txt.count { it in 'a'..'z' && it.code % 2 != 0 }\n}"}
{"task_id": "HumanEval_kotlin/126", "language": "kotlin", "completion": "if (lst.isEmpty()) return true\n   val sortedList = lst.sorted()\n   for (i in 1 until lst.size) {\n       if (sortedList[i] == sortedList[i - 1]) return false\n   }\n   return sortedList == lst\n}"}
{"task_id": "HumanEval_kotlin/127", "language": "kotlin", "completion": "// Check if intervals intersect\n    val startIntersection = maxOf(interval1[0], interval2[0])\n    val endIntersection = minOf(interval1[1], interval2[1])\n\n    if (startIntersection > endIntersection) return \"NO\"\n\n    // Calculate length of intersection\n    val lengthIntersection = endIntersection - startIntersection\n\n    // Check if length is prime\n    for (i in 2..lengthIntersection / 2) {\n        if (lengthIntersection % i == 0) return \"NO\"\n    }\n\n    return if (lengthIntersection > 1) \"YES\" else \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/128", "language": "kotlin", "completion": "if (arr.isEmpty()) return null\n\n    var product = 1\n    var sum = 0\n\n    for (num in arr) {\n        val n = num as Int\n        product *= when {\n            n > 0 -> 1\n            n < 0 -> -1\n            else -> 0\n        }\n        sum += Math.abs(n)\n    }\n\n    return product * sum\n}"}
{"task_id": "HumanEval_kotlin/129", "language": "kotlin", "completion": "val n = grid.size\n    var startI = -1\n    var startJ = -1\n    var smallestValue = Int.MAX_VALUE\n\n    // Find the starting point of the path (smallest value in the grid)\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] < smallestValue) {\n                smallestValue = grid[i][j]\n                startI = i\n                startJ = j\n            }\n        }\n    }\n\n    val path = mutableListOf(smallestValue)\n    var currentI = startI\n    var currentJ = startJ\n\n    // Find the minimum path of length k\n    for (step in 2..k) {\n        var nextI = -1\n        var nextJ = -1\n        var smallestNeighborValue = Int.MAX_VALUE\n\n        val directions = listOf(0 to 1, 0 to -1, 1 to 0, -1 to 0) // right, left, down, up\n\n        for (dir in directions) {\n            val newI = currentI + dir.first\n            val newJ = currentJ + dir.second\n\n            if (newI >= 0 && newI < n && newJ >= 0 && newJ < n && grid[newI][newJ] < smallestNeighborValue) {\n                smallestNeighborValue = grid[newI][newJ]\n                nextI = newI\n                nextJ = newJ\n            }\n        }\n\n        path.add(smallestNeighborValue)\n        currentI = nextI\n        currentJ = nextJ\n    }\n\n    return path\n}"}
{"task_id": "HumanEval_kotlin/130", "language": "kotlin", "completion": "val list = mutableListOf<Any>()\n    if (n >= 0){\n        list.add(1)\n        if(n > 0){\n            var first = 3L\n            list.add(first)\n            if(n > 1){\n                var second = 2L\n                list.add(second)\n                for (i in 2 until n) {\n                    val next: Long = if (i % 2 == 0) {\n                        (1 + i / 2).toLong()\n                    } else {\n                        first + second + (3L + (i - 1) / 2 * 2)\n                    }\n                    list.add(next)\n                    first = second\n                    second = next\n                }\n            }\n        }\n    }\n    return list\n}"}
{"task_id": "HumanEval_kotlin/131", "language": "kotlin", "completion": "var product = 1\n    var num = n\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) {\n            product *= digit\n        } else if (product == 1) {\n            product = 0\n        }\n        num /= 10\n    }\n    return product\n}"}
{"task_id": "HumanEval_kotlin/132", "language": "kotlin", "completion": "var openBrackets = 0\n    var nestedFound = false\n\n    for (char in string) {\n        when (char) {\n            '[' -> openBrackets++\n            ']' -> if (openBrackets > 1) nestedFound = true\n                   else return false // no preceding open bracket\n        }\n        if (nestedFound && openBrackets == 0) return true // end of a valid nesting sequence\n    }\n    return false // no valid nesting found in the whole string\n}"}
{"task_id": "HumanEval_kotlin/133", "language": "kotlin", "completion": "return lst.map{ Math.ceil(it as Number).toInt().let{ it*it }}.sum()\n}"}
{"task_id": "HumanEval_kotlin/134", "language": "kotlin", "completion": "if (txt.isEmpty()) return false\n    val lastChar = txt[txt.length - 1]\n    if (!lastChar.isLetter()) return false\n    if (txt.length > 1 && txt[txt.length - 2].isWhitespace()) return true\n    return false\n}"}
{"task_id": "HumanEval_kotlin/135", "language": "kotlin", "completion": "var maxIndex = -1;\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i-1]) {\n            maxIndex = i-1;\n        }\n    }\n    return maxIndex;\n}"}
{"task_id": "HumanEval_kotlin/136", "language": "kotlin", "completion": "var a: Int? = null\n    var b: Int? = null\n\n    for (num in lst) {\n        if (num is Int) {\n            if (num < 0 && (a == null || num > a)) {\n                a = num\n            } else if (num > 0 && (b == null || num < b)) {\n                b = num\n            }\n        }\n    }\n\n    return listOf(a, b)\n}\n\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // (None, 1)\n    println(largestSmallestIntegers(emptyList<Int>())) // (None, None)\n    println(largestSmallestIntegers(listOf(0))) // (None, None)\n}"}
{"task_id": "HumanEval_kotlin/137", "language": "kotlin", "completion": "val numA = when (a) {\n        is Int -> a.toDouble()\n        is Float -> a.toDouble()\n        is String -> a.replace(\",\", \".\").toDoubleOrNull() ?: return null\n        else -> return null\n    }\n\n    val numB = when (b) {\n        is Int -> b.toDouble()\n        is Float -> b.toDouble()\n        is String -> b.replace(\",\", \".\").toDoubleOrNull() ?: return null\n        else -> return null\n    }\n\n    if (numA == numB) return null // if values are equal, return None\n\n    return if (numA > numB) {\n        when (a) {\n            is Int -> a\n            is Float -> a\n            is String -> a\n            else -> null\n        }\n    } else {\n        when (b) {\n            is Int -> b\n            is Float -> b\n            is String -> b\n            else -> null\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/138", "language": "kotlin", "completion": "if (n <= 0 || n % 2 != 0) return false\n    val num = n / 4\n    return num > 1 && num % 2 == 0\n}"}
{"task_id": "HumanEval_kotlin/139", "language": "kotlin", "completion": "require(n >= 0)\n    var result = 1\n    for (i in n downTo 1 step 1){\n        var factorial = 1\n        for (j in i downTo 1 step 1){\n            factorial *= j\n        }\n        result *= factorial\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/140", "language": "kotlin", "completion": "return text.replace(\"[ ]+\".toRegex(), { matchResult ->\n        if (matchResult.value.length == 1) \"_\" else \"-\"\n    })\n}"}
{"task_id": "HumanEval_kotlin/141", "language": "kotlin", "completion": "if(!fileName.matches(\"[a-zA-Z].*\".toRegex())){\n        return \"No\"\n    }\n\n    val digitCount = fileName.count { it in '0'..'9'}\n    if (digitCount > 3) {\n        return \"No\"\n    }\n\n    val parts = fileName.split('.')\n    if(parts.size != 2){\n        return \"No\"\n    }\n\n    val extension = parts[1]\n    if(!arrayOf(\"txt\", \"exe\", \"dll\").contains(extension)){\n        return \"No\"\n    }\n\n    return \"Yes\"\n}"}
{"task_id": "HumanEval_kotlin/142", "language": "kotlin", "completion": "var sum = 0\n    for (i in 0 until lst.size) {\n        if (i % 3 == 0) {\n            sum += Math.pow((lst[i] as Int).toDouble(), 2.0).toInt()\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += Math.pow((lst[i] as Int).toDouble(), 3.0).toInt()\n        } else {\n            sum += lst[i] as Int\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/143", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    val words = sentence.split(\" \")\n    val primeWords = mutableListOf<String>()\n\n    for (word in words) {\n        if (isPrime(word.length)) primeWords.add(word)\n    }\n\n    return primeWords.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/144", "language": "kotlin", "completion": "val xFraction = x.split(\"/\").map { it.toInt() }\n   val nFraction = n.split(\"/\").map { it.toInt() }\n\n   val result = (xFraction[0] * nFraction[0]).toDouble() / (xFraction[1] * nFraction[1])\n\n   return result == Math.floor(result)\n}"}
{"task_id": "HumanEval_kotlin/145", "language": "kotlin", "completion": "return nums.sortedWith(compareBy({ it.toString().map { c -> Character.getNumericValue(c) }.sum() }, { nums.indexOf(it) }))\n}"}
{"task_id": "HumanEval_kotlin/146", "language": "kotlin", "completion": "var count = 0\n    for (i in nums) {\n        if (i is Int && i > 10) {\n            val firstDigit = Character.getNumericValue(i.toString()[0])\n            val lastDigit = Character.getNumericValue(i.toString().last())\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/147", "language": "kotlin", "completion": "val arr = IntArray(n)\n    for (i in 0 until n) {\n        arr[i] = i * i - i + 1\n    }\n    var count = 0\n    for (i in 0 until n - 2) {\n        if (arr[i] % 3 == 0) {\n            for (j in i + 1 until n - 1) {\n                if ((arr[j] + arr[i]) % 3 == 0) {\n                    for (k in j + 1 until n) {\n                        if ((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n                            count++\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/148", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   if (!planets.contains(planet1) || !planets.contains(planet2)) {\n       return emptyList()\n   }\n   val index1 = planets.indexOf(planet1)\n   val index2 = planets.indexOf(planet2)\n   return if (index1 < index2) {\n       planets.slice(index1 + 1 until index2)\n   } else {\n       planets.slice(index2 + 1 until index1).reversed()\n   }\n}"}
{"task_id": "HumanEval_kotlin/149", "language": "kotlin", "completion": "// Filter the list to keep only strings with even length\n    val filtered = lst.filter { it.length % 2 == 0 }\n\n    // Sort the list first by length and then alphabetically\n    return filtered.sortedWith(compareBy({ it.length }, { it }))\n}"}
{"task_id": "HumanEval_kotlin/150", "language": "kotlin", "completion": "if (isPrime(n)) return x\n   else return y\n}\n\nfun isPrime(n : Int) : Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/151", "language": "kotlin", "completion": "// filter out numbers that are not integers or negative\n  val filteredList = lst.filterIsInstance<Int>().filter { it >= 0 }\n\n  // return the sum of squares of the odd numbers\n  return filteredList.filter { it % 2 == 1 }.sumBy { it * it }\n}"}
{"task_id": "HumanEval_kotlin/152", "language": "kotlin", "completion": "return game.zip(guess) { g, h -> kotlin.math.abs(g - h) }\n}"}
{"task_id": "HumanEval_kotlin/153", "language": "kotlin", "completion": "var maxStrength = Int.MIN_VALUE\n    var strongestExtension: String? = null\n\n    for (extension in extensions) {\n        val strength = extension.count { it.isUpperCase() } - extension.count { it.isLowerCase() }\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return \"$className.$strongestExtension\"\n}"}
{"task_id": "HumanEval_kotlin/154", "language": "kotlin", "completion": "val rotations = (1 until b.length).map { i -> b.substring(i) + b.substring(0, i) }\n    for (rotation in rotations) {\n        if (a.contains(rotation)) return true\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/155", "language": "kotlin", "completion": "val digits = num.toString().map{ it - '0' }\n    return listOf(digits.filter{ it % 2 == 0}.size, digits.filter{ it % 2 != 0 }.size)\n}"}
{"task_id": "HumanEval_kotlin/156", "language": "kotlin", "completion": "val symbols = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val values = intArrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    var num = number\n    val sb = StringBuilder()\n    for (i in symbols.indices) {\n        while (num >= values[i]) {\n            num -= values[i]\n            sb.append(symbols[i])\n        }\n    }\n    return sb.toString()\n}"}
{"task_id": "HumanEval_kotlin/157", "language": "kotlin", "completion": "val sides = listOf(a, b, c).sorted()\n   return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n}"}
{"task_id": "HumanEval_kotlin/158", "language": "kotlin", "completion": "var maxUniqueChars = Int.MIN_VALUE\n    var result = \"\"\n\n    for (word in words) {\n        val uniqueChars = word.toCharArray().distinct()\n        if (uniqueChars.size > maxUniqueChars) {\n            maxUniqueChars = uniqueChars.size\n            result = word\n        } else if (uniqueChars.size == maxUniqueChars && word < result) {\n            // If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.\n            result = word\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/159", "language": "kotlin", "completion": "val totalEaten = minOf(number + need, number + remaining)\n    val leftOver = maxOf(remaining - (totalEaten - number), 0)\n    return listOf(totalEaten, leftOver)\n}"}
{"task_id": "HumanEval_kotlin/160", "language": "kotlin", "completion": "var result = operand[0]\n    for (i in 1 until operand.size) {\n        when (operator[i - 1]) {\n            \"+\" -> result += operand[i]\n            \"-\" -> result -= operand[i]\n            \"*\" -> result *= operand[i]\n            \"//\" -> result /= operand[i]\n            \"**\" -> result = Math.pow(result.toDouble(), operand[i].toDouble()).toInt()\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/161", "language": "kotlin", "completion": "var hasLetter = false\n    val sb = StringBuilder()\n    for (c in s) {\n        if (c.isLetter()) {\n            hasLetter = true\n            if (c.isLowerCase()) sb.append(c.toUpperCase()) else sb.append(c.toLowerCase())\n        } else {\n            sb.append(c)\n        }\n    }\n    return if (!hasLetter) s.reversed() else sb.toString()\n}"}
{"task_id": "HumanEval_kotlin/162", "language": "kotlin", "completion": "import java.security.MessageDigest\n   if (text == \"\") return null\n\n   val bytes = text.toByteArray()\n   val md = MessageDigest.getInstance(\"MD5\")\n   val digest = md.digest(bytes)\n   return digest.fold(\"\", { str, it -> str + \"%02x\".format(it) })\n}"}
{"task_id": "HumanEval_kotlin/163", "language": "kotlin", "completion": "val start = if (a < b) a else b\n    val end = if (a < b) b else a\n\n    return (start..end).filter { it % 2 == 0 }.toList()\n}"}

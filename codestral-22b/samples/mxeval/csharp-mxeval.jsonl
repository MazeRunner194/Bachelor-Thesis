{"task_id": "HumanEval_csharp/0", "language": "csharp", "completion": "// sort the array in ascending order\n    numbers.Sort();\n\n    for(int i = 0; i < numbers.Count - 1; i++)\n    {\n        if((numbers[i + 1] - numbers[i]) < threshold)\n            return true;\n    }\n\n    // no pair found that is closer than the given threshold\n    return false;\n}\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter comma separated numbers: \");\n            var input = Console.ReadLine();\n\n            List<double> numbers = Regex.Split(input, \",\").Select(Double.Parse).ToList();\n\n            double threshold;\n            while (true)\n            {\n                Console.WriteLine(\"Enter the threshold value: \");\n                var inputThreshold = Console.ReadLine();\n                if (double.TryParse(inputThreshold, out threshold))\n                    break;\n                else\n                    Console.WriteLine(\"Invalid number. Please try again.\");\n            }\n\n            bool result = HasCloseElements(numbers, threshold);\n            Console.WriteLine($\"Result: {result}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/1", "language": "csharp", "completion": "var result = new List<string>();\n            var stack = new Stack<char>();\n            var startIndex = 0;\n\n            for (var i = 0; i < paren_string.Length; i++)\n            {\n                if (paren_string[i] == '(')\n                    stack.Push(paren_string[i]);\n                else if (paren_string[i] == ')')\n                {\n                    if (stack.Count > 0)\n                        stack.Pop();\n\n                    if (stack.Count == 0)\n                    {\n                        var group = paren_string.Substring(startIndex, i - startIndex + 1);\n                        result.Add(group.Trim()); // remove any spaces in the group string\n                        startIndex = i + 1;\n                    }\n                }\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/2", "language": "csharp", "completion": "return Math.Abs(number % 1);\n}\n\npublic static void Main()\n{\n    Console.WriteLine(TruncateNumber(3.5)); // Output: 0.5\n}\n}"}
{"task_id": "HumanEval_csharp/3", "language": "csharp", "completion": "int balance = 0;\n            foreach(int op in operations){\n                balance += op;\n                if(balance < 0){\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public static void Main()\n        {\n             Console.WriteLine(BelowZero(new List<int>() {1,2,3})); //False\n             Console.WriteLine(BelowZero(new List<int>() {1,2,-4,5})); //True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/4", "language": "csharp", "completion": "var mean = numbers.Average();\n   var absoluteDifferences = numbers.Select(x => Math.Abs(x - mean));\n   return absoluteDifferences.Average();\n}\n\npublic static void Main()\n{\n    Console.WriteLine(MeanAbsoluteDeviation(new List<double>{1.0, 2.0, 3.0, 4.0}));\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/5", "language": "csharp", "completion": "if (numbers == null || numbers.Count <= 1) return numbers;\n    var result = new List<int>();\n    foreach (var num in numbers)\n    {\n        result.Add(num);\n        if (num != numbers.Last()) result.Add(delimeter);\n    }\n    return result;\n}\n\n        // Test code\n        static void Main()\n        {\n            var compareLogic = new CompareLogic();\n            var testCases = new[] {\n                new { Input = new List<int>(), Delimiter = 4, ExpectedOutput = new List<int>() },\n                new { Input = new List<int>{1, 2, 3}, Delimiter = 4, ExpectedOutput = new List<int>{1, 4, 2, 4, 3} }\n            };\n\n            foreach (var test in testCases)\n                Console.WriteLine(compareLogic.Compare(Intersperse(test.Input, test.Delimiter), test.ExpectedOutput));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/6", "language": "csharp", "completion": "var groups = Regex.Matches(paren_string, @\"\\(\\s*\\)\");\n        return groups.Select(group => GetMaxDepth(group.Value)).ToList();\n    }\n\n    private static int GetMaxDepth(string group)\n    {\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        foreach (char c in group)\n        {\n            if (c == '(')\n                currentDepth++;\n            else if (c == ')')\n                currentDepth--;\n\n            maxDepth = Math.Max(maxDepth, currentDepth);\n        }\n\n        return maxDepth;\n    }\n}"}
{"task_id": "HumanEval_csharp/7", "language": "csharp", "completion": "return strings.Where(str => str.Contains(substring)).ToList();\n}\n\n        static void Main()\n        {\n            var test = new Program();\n            var res = test.FilterBySubstring(new List<string>() { \"abc\", \"bacd\", \"cde\", \"array\" }, \"a\");\n            Console.WriteLine(string.Join(\", \", res));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/8", "language": "csharp", "completion": "public static Tuple<int, int> SumProduct(List<int> numbers)\n{\n    if (numbers == null || !numbers.Any())\n    {\n        return new Tuple<int, int>(0, 1);\n    }\n\n    var sum = numbers.Sum();\n    var product = numbers.Aggregate((a, b) => a * b);\n\n    return new Tuple<int, int>(sum, product);\n}"}
{"task_id": "HumanEval_csharp/9", "language": "csharp", "completion": "C#\npublic static List<int> RollingMax(List<int> numbers)\n{\n    if (!numbers.Any())\n        return new List<int>();\n\n    var result = new List<int>{numbers[0]};\n    for (int i = 1; i < numbers.Count; i++)\n    {\n        int maxSoFar = result[i - 1];\n        if(numbers[i] > maxSoFar)\n            result.Add(numbers[i]);\n        else\n            result.Add(maxSoFar);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/10", "language": "csharp", "completion": "// Check if the input string is empty or null\n    if (string.IsNullOrEmpty(string0))\n    {\n        return \"\";\n    }\n\n    int length = string0.Length;\n    int i = 0;\n\n    // Find the longest palindromic suffix\n    for (i = length - 1; i >= 0; i--)\n    {\n        if (IsPalindrome(string0, 0, i))\n        {\n            break;\n        }\n    }\n\n    // If no palindromic suffix is found, return the input string with its reverse appended\n    if (i == -1)\n    {\n        return string0 + ReverseString(string0);\n    }\n\n    // Append the reverse of the prefix that comes before the palindromic suffix\n    string prefix = string0.Substring(0, i + 1);\n    string reversedPrefix = ReverseString(prefix);\n    return string0 + reversedPrefix;\n}\n\nprivate static bool IsPalindrome(string str, int start, int end)\n{\n    while (start < end)\n    {\n        if (str[start] != str[end])\n        {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\nprivate static string ReverseString(string str)\n{\n    char[] charArray = str.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}\n\npublic static void Main() { }\n    }\n}"}
{"task_id": "HumanEval_csharp/11", "language": "csharp", "completion": "if (a.Length != b.Length)\n            throw new ArgumentException(\"Input strings must be of equal length\");\n\n    var result = new char[a.Length];\n\n    for (int i = 0; i < a.Length; i++)\n    {\n        // Perform binary XOR operation on corresponding characters in input strings\n        result[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n\n    return new string(result);\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(\"Enter first binary string:\");\n            var a = Console.ReadLine();\n\n            Console.WriteLine(\"Enter second binary string:\");\n            var b = Console.ReadLine();\n\n            if (IsValidBinaryString(a) && IsValidBinaryString(b))\n            {\n                var result = StringXor(a, b);\n                Console.WriteLine($\"Result of binary XOR operation: {result}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Invalid input strings. Please enter valid binary strings (consisting only of 1s and 0s).\");\n            }\n        }\n\n        private static bool IsValidBinaryString(string str)\n        {\n            // Use regular expression to check if string consists only of 1s and 0s\n            return Regex.IsMatch(str, \"^[01]+$\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/12", "language": "csharp", "completion": "if (strings == null || !strings.Any())\n    {\n        return \"None\";\n    }\n\n    var longestString = strings.OrderByDescending(s => s.Length).First();\n\n    return longestString;\n}\n     }\n}"}
{"task_id": "HumanEval_csharp/13", "language": "csharp", "completion": "// Ensure that both input numbers are non-negative\n    if (a < 0 || b < 0)\n    {\n        throw new ArgumentException(\"Both numbers must be non-negative.\");\n    }\n\n    // If one of the numbers is zero, return the other number as the GCD\n    if (a == 0)\n    {\n        return b;\n    }\n    else if (b == 0)\n    {\n        return a;\n    }\n\n    // Use Euclidean algorithm to find the greatest common divisor\n    while (b != 0)\n    {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n}\n\n// Test cases\npublic static void Main()\n{\n    Console.WriteLine(GreatestCommonDivisor(3, 5)); // Output: 1\n    Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n}\n        }"}
{"task_id": "HumanEval_csharp/14", "language": "csharp", "completion": "var prefixList = new List<string>();\n\n    for (int i = 1; i <= string0.Length; i++)\n    {\n        prefixList.Add(string0.Substring(0, i));\n    }\n\n    return prefixList;\n}\n\nstatic void Main()\n{\n    Console.WriteLine(\"Enter a string:\");\n    var inputString = Console.ReadLine();\n\n    var result = AllPrefixes(inputString);\n\n    foreach (var prefix in result)\n    {\n        Console.WriteLine(prefix);\n    }\n}\n   }\n}"}
{"task_id": "HumanEval_csharp/15", "language": "csharp", "completion": "string result = \"\";\n    for(int i=0; i<=n; i++)\n    {\n        if(i != 0)\n            result += \" \";\n         result += i.ToString();\n    }\n     return result;\n}\n\npublic static void Main()\n{\n   Console.WriteLine(StringSequence(5));\n}\n}"}
{"task_id": "HumanEval_csharp/16", "language": "csharp", "completion": "// Convert the input string to lower case since we're considering characters regardless of case.\n    var lowerCaseString = string0.ToLower();\n\n    // Create a HashSet from the input string which automatically removes duplicate values.\n    var distinctCharacters = new HashSet<char>(lowerCaseString);\n\n    // The count of elements in the HashSet will be the number of distinct characters in the input string.\n    return distinctCharacters.Count;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/17", "language": "csharp", "completion": "var beats = new List<int>();\n\n    // Split the input string into individual notes\n    var notes = Regex.Split(music_string, @\"\\s+\");\n\n    foreach (var note in notes)\n    {\n        switch (note)\n        {\n            case \"o\":\n                beats.Add(4); // whole note lasts four beats\n                break;\n            case \"o|\":\n                beats.Add(2); // half note lasts two beats\n                break;\n            case \".|\":\n                beats.Add(1); // quarter note lasts one beat\n                break;\n        }\n    }\n\n    return beats;\n}\n\nstatic void Main(string[] args)\n{\n    Console.WriteLine(\"Input a string representing musical notes:\");\n    var musicString = Console.ReadLine();\n\n    var result = ParseMusic(musicString);\n\n    Console.WriteLine($\"The output is: {string.Join(\", \", result)}\");\n}\n  }\n}"}
{"task_id": "HumanEval_csharp/18", "language": "csharp", "completion": "public static int HowManyTimes(string str, string substr)\n{\n    if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substr))\n        return 0;\n\n    if (substr.Length > str.Length)\n        return 0;\n\n    int count = 0;\n    for (int i = 0; i <= str.Length - substr.Length; i++)\n    {\n        if (str.Substring(i, substr.Length).Equals(substr))\n            count++;\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/19", "language": "csharp", "completion": "Dictionary<string, int> numberMap = new Dictionary<string, int>()\n    {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    // Split the input string into an array of strings.\n    var numbersArray = numbers.Split(' ');\n\n    // Convert each string in the array to its corresponding integer value using the dictionary.\n    var numbersInts = numbersArray.Select(num => numberMap[num]);\n\n    // Sort the integers.\n    var sortedNumbersInts = numbersInts.OrderBy(n => n);\n\n    // Convert each integer back to its corresponding string value using the dictionary.\n    var sortedNumbersStrings = sortedNumbersInts.Select(num => numberMap.FirstOrDefault(x => x.Value == num).Key);\n\n    // Join the strings into a single space-delimited string and return it.\n    return string.Join(\" \", sortedNumbersStrings);\n}\n        public static void Main()\n        {\n            Console.WriteLine(SortNumbers(\"three one five\"));  // \"one three five\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/20", "language": "csharp", "completion": "// Sort the list in ascending order\n    numbers.Sort();\n\n    double minDiff = Double.MaxValue;\n    int index1 = -1, index2 = -1;\n\n    for(int i=0; i < numbers.Count-1; i++) {\n        if (numbers[i+1] - numbers[i] < minDiff) {\n            minDiff = numbers[i+1] - numbers[i];\n            index1 = i;\n            index2 = i + 1;\n        }\n    }\n\n    return new List<double> {numbers[index1], numbers[index2]};\n}\n\n        public static void Main(string[] args)\n        {\n            // Test your method here!\n            var list = new List<double>(){ 1.0, 2.0, 3.0, 4.0, 5.0, 2.2 };\n            Console.WriteLine(String.Join(\", \", FindClosestElements(list)));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/21", "language": "csharp", "completion": "double smallest = numbers.Min();\n    double largest = numbers.Max();\n    return numbers.Select(x => (x - smallest) / (largest - smallest)).ToList();\n}\n\npublic static void Main()\n{\n    List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n    List<double> result = RescaleToUnit(numbers);\n\n    Console.WriteLine(string.Join(\", \", result)); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/22", "language": "csharp", "completion": "public static List<int> FilterIntegers(List<object> values)\n{\n    var result = new List<int>();\n\n    foreach (var value in values)\n        if (value is int)\n            result.Add((int)value);\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/23", "language": "csharp", "completion": "return string.IsNullOrEmpty(string0) ? 0 : string0.Length;\n}\n\n        // Test cases\n        public static void Main()\n        {\n            Console.WriteLine(Strlen(\"\"));     // Output: 0\n            Console.WriteLine(Strlen(\"abc\"));   // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/24", "language": "csharp", "completion": "if(n <= 0)\n    {\n        throw new ArgumentException(\"Input should be a positive integer\");\n    }\n\n    for (int i = n - 1; i > 0; i--)\n    {\n        if (n % i == 0)\n            return i;\n    }\n\n    // If no divisor is found, it means the number is a prime.\n    return -1;\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(LargestDivisor(15));  // Output: 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/25", "language": "csharp", "completion": "if (n < 2)\n        {\n            throw new ArgumentException(\"Input should be greater than or equal to 2\");\n        }\n\n        var factors = new List<int>();\n        for (var i = 2; i <= n; i++)\n        {\n            while (n % i == 0)\n            {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n\n        return factors;\n    }\n}"}
{"task_id": "HumanEval_csharp/26", "language": "csharp", "completion": "public static List<int> RemoveDuplicates(List<int> numbers)\n{\n    var result = new List<int>();\n\n    // Group the list by each number in it, so we get an IEnumerable<IGrouping<int, int>>.\n    // Each group will contain all occurrences of a specific number.\n    var groups = numbers.GroupBy(n => n);\n\n    // Filter out any groups that have more than one element (i.e., the number appears more than once)\n    // and then select only the key of each remaining group (which is the number itself).\n    var uniqueNumbers = groups.Where(g => g.Count() == 1).Select(g => g.Key);\n\n    // Add these numbers to our result list in their original order.\n    foreach (var num in numbers)\n        if (uniqueNumbers.Contains(num))\n            result.Add(num);\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/27", "language": "csharp", "completion": "return new String(string0.Select(c => Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c)).ToArray());\n}\n}"}
{"task_id": "HumanEval_csharp/28", "language": "csharp", "completion": "return string.Concat(strings);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/29", "language": "csharp", "completion": "return strings.Where(s => s.StartsWith(prefix)).ToList();\n}\n\n        public static void Main()\n        {\n            CompareLogic();\n        }\n\n        // ----------------------------\n        // ------- TESTS --------------\n        // ----------------------------\n        public static void CompareLogic()\n        {\n            var compareLogic = new CompareLogic();\n            if (!compareLogic.Compare(FilterByPrefix(new List<string> { }, \"a\"), new List<string> { }))\n                throw new Exception(\"Failed FilterByPrefix([], 'a')\");\n            if (!compareLogic.Compare(FilterByPrefix(new List<string> { \"abc\", \"bcd\", \"cde\", \"array\" }, \"a\"), new List<string> { \"abc\", \"array\" }))\n                throw new Exception(\"Failed FilterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/30", "language": "csharp", "completion": "return l.Where(n => n > 0).ToList();\n}\n    }\n\n    public class ProgramTests\n    {\n        private static void TestGetPositive()\n        {\n            List<int> test1 = new List<int>() { -1, 2, -4, 5, 6 };\n            List<int> expectedOutput1 = new List<int>() { 2, 5, 6 };\n            Assert.AreEqual(expectedOutput1, Program.GetPositive(test1));\n\n            List<int> test2 = new List<int>() { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            List<int> expectedOutput2 = new List<int>() { 5, 3, 2, 3, 9, 123, 1 };\n            Assert.AreEqual(expectedOutput2, Program.GetPositive(test2));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/31", "language": "csharp", "completion": "if (n <= 1)\n    return false;\n\n   for (int i = 2; i < n; i++)\n       if (n % i == 0)\n           return false;\n\n   return true;\n}\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsPrime(6)); // False\n            Console.WriteLine(IsPrime(101)); // True\n            Console.WriteLine(IsPrime(11)); // True\n            Console.WriteLine(IsPrime(13441)); // False, it's not a prime number\n            Console.WriteLine(IsPrime(61)); // True\n            Console.WriteLine(IsPrime(4)); // False\n            Console.WriteLine(IsPrime(1)); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/33", "language": "csharp", "completion": "public static List<int> SortThird(List<int> list)\n{\n    // Create a new list to hold the divisible by three elements\n    var divByThree = list.Where((num, i) => (i + 1) % 3 == 0).OrderBy(x => x).ToList();\n\n    // Replace the divisible by three elements in the original list with the sorted ones\n    for (int i = 2; i < list.Count; i += 3)\n        list[i] = divByThree[(i - 2)/3];\n\n    return list;\n}"}
{"task_id": "HumanEval_csharp/34", "language": "csharp", "completion": "return l.Distinct().OrderBy(x => x).ToList();\n}\n\n        public static void Main()\n        {\n            var input = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            var output = Unique(input);\n            Console.WriteLine(string.Join(\", \", output)); // Output: [0, 2, 3, 5, 9, 123]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/35", "language": "csharp", "completion": "if (l == null || l.Count == 0)\n    {\n        throw new ArgumentException(\"The list is empty or null\");\n    }\n\n    int max = l[0];\n\n    for (int i = 1; i < l.Count; i++)\n    {\n        if (l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n\n    return max;\n}\n\npublic static void Main(string[] args)\n{\n    List<int> list1 = new List<int>{ 1, 2, 3 };\n    Console.WriteLine(MaxElement(list1)); // Output: 3\n\n    List<int> list2 = new List<int>{ 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n    Console.WriteLine(MaxElement(list2)); // Output: 123\n}\n}"}
{"task_id": "HumanEval_csharp/36", "language": "csharp", "completion": "if (n <= 0) return 0;\n   int count = 0;\n\n   for (int i = 11; i < n; i++)\n   {\n       if (i % 11 == 0 || i % 13 == 0)\n       {\n           string numStr = i.ToString();\n           count += numStr.Count(c => c == '7');\n       }\n   }\n\n   return count;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/37", "language": "csharp", "completion": "// Extract the even-indexed elements and sort them.\n    var evenIndexElements = l.Where((e, i) => i % 2 == 0).OrderBy(x => x).ToArray();\n\n    // Replace the even-indexed elements in the original list with the sorted ones.\n    for (int i = 0; i < l.Count; i += 2)\n        l[i] = evenIndexElements[i / 2];\n\n    return l;\n}\n\npublic static void Main(string[] args)\n{\n    // Test the function with the given examples.\n    Console.WriteLine(string.Join(\", \", SortEven(new List<int> { 1, 2, 3 })));  // Output: [1, 2, 3]\n    Console.WriteLine(string.Join(\", \", SortEven(new List<int> { 5, 6, 3, 4 })));  // Output: [3, 6, 5, 4]\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/39", "language": "csharp", "completion": "// Write your code here.\n   if (n <= 0) throw new ArgumentException(\"Input should be greater than zero.\");\n\n   int count = 0;\n   int current = 2, prev = 1;\n\n   while(count < n)\n   {\n       int temp = current + prev;\n       prev = current;\n       current = temp;\n\n       if (IsPrime(current))\n           count++;\n   }\n\n   return current;\n}\n\nprivate static bool IsPrime(int number)\n{\n   if (number <= 1) return false;\n   if (number == 2) return true;\n   if (number % 2 == 0) return false;\n\n   var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n   for(int i = 3; i <= boundary; i+=2)\n       if (number % i == 0)\n           return false;\n\n   return true;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/40", "language": "csharp", "completion": "if (l.Count < 3)\n    {\n      return false;\n    }\n\n    l.Sort();\n\n    for(int i = 0; i < l.Count - 2; i++)\n    {\n      int left = i + 1;\n      int right = l.Count - 1;\n\n      while (left < right)\n      {\n        if (l[i] + l[left] + l[right] == 0)\n        {\n          return true;\n        }\n        else if (l[i] + l[left] + l[right] < 0)\n        {\n          left++;\n        }\n        else\n        {\n          right--;\n        }\n      }\n    }\n\n    return false;\n}\n}"}
{"task_id": "HumanEval_csharp/41", "language": "csharp", "completion": "public static int CarRaceCollision(int n)\n{\n    // Since every car from the left set will collide with every car from the right set,\n    // the total number of collisions will be the product of the number of cars in each set.\n    return n * n;\n}"}
{"task_id": "HumanEval_csharp/42", "language": "csharp", "completion": "var result = new List<int>();\n    foreach (var item in l)\n    {\n        result.Add(item + 1);\n    }\n    return result;\n}\n\n        public static void Main()\n        {\n            TestIncrList();\n            Console.ReadLine();\n        }\n\n        private static void TestIncrList()\n        {\n            var compareLogic = new CompareLogic();\n            Assert(compareLogic.Compare(new List<int>(), IncrList(new List<int>())));\n            Assert(compareLogic.Compare(new List<int> { 2 }, IncrList(new List<int> { 1 })));\n            Assert(compareLogic.Compare(new List<int> { 6, 4, 6, 3, 4, 4, 10, 1, 124 }, IncrList(new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 })));\n        }\n\n        private static void Assert(bool condition)\n        {\n            Console.WriteLine(condition ? \"Pass\" : \"Fail\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/43", "language": "csharp", "completion": "// Sort the list. Time complexity: O(n log n).\n   l.Sort();\n\n    // Initialize two pointers, one at the beginning and one at the end of the list.\n    int left = 0;\n    int right = l.Count - 1;\n\n    // Loop through the list until the pointers meet or cross each other.\n    while (left < right)\n    {\n        // Calculate the sum of the elements at the current positions of the pointers.\n        int sum = l[left] + l[right];\n\n        // If the sum is zero, return true.\n        if (sum == 0)\n            return true;\n        // If the sum is less than zero, move the left pointer to the right.\n        else if (sum < 0)\n            left++;\n        // Otherwise, move the right pointer to the left.\n        else\n            right--;\n    }\n\n    // If no pair was found that adds up to zero, return false.\n    return false;\n}\n\n    }\n}"}
{"task_id": "HumanEval_csharp/44", "language": "csharp", "completion": "if (base < 2 || base > 16)\n            throw new ArgumentOutOfRangeException(nameof(base), \"Base must be between 2 and 16\");\n\n        if (x == 0)\n            return \"0\";\n\n        string result = \"\";\n        while (x > 0)\n        {\n            int remainder = x % base;\n            x /= base;\n            result = GetDigit(remainder) + result;\n        }\n\n        return result;\n    }\n\n    private static char GetDigit(int digit)\n    {\n        if (digit >= 0 && digit <= 9)\n            return (char)(digit + '0');\n        else\n            return (char)(digit - 10 + 'A');\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(ChangeBase(8, 3)); // Output: 22\n        Console.WriteLine(ChangeBase(8, 2)); // Output: 1000\n        Console.WriteLine(ChangeBase(7, 2)); // Output: 111\n    }\n}"}
{"task_id": "HumanEval_csharp/45", "language": "csharp", "completion": "// Formula for the area of a triangle is (base * height) / 2\n   return (a * h) / 2.0;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/46", "language": "csharp", "completion": "if (n < 0) throw new ArgumentOutOfRangeException(\"n\", \"The argument must be greater than or equal to zero.\");\n\n    if (n <= 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int a = 0, b = 0, c = 2, d = 0;\n\n    for (int i = 4; i <= n; i++) {\n        int next = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = next;\n    }\n\n    return d;\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(Fib4(5)); // Outputs: 4\n    Console.WriteLine(Fib4(6)); // Outputs: 8\n    Console.WriteLine(Fib4(7)); // Outputs: 14\n}\n    }"}
{"task_id": "HumanEval_csharp/47", "language": "csharp", "completion": "// Sort the list in ascending order\n    l.Sort();\n\n    // Get the count of elements in the list\n    int n = l.Count;\n\n    // Check if the count is even or odd\n    if (n % 2 == 0)\n        // If even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        // If odd, return the middle element\n        return l[n / 2];\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Median([3, 1, 2, 4, 5]) => \" + Median(new List<int>() { 3, 1, 2, 4, 5 }));\n            Console.WriteLine(\"Median([-10, 4, 6, 1000, 10, 20]) => \" + Median(new List<int>() { -10, 4, 6, 1000, 10, 20 }));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/48", "language": "csharp", "completion": "if (string.IsNullOrEmpty(text)) return true;\n    for (int i = 0; i < text.Length / 2; i++)\n    {\n        if (text[i] != text[text.Length - i - 1]) return false;\n    }\n    return true;\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(IsPalindrome(\"\")); // True\n    Console.WriteLine(IsPalindrome(\"aba\")); // True\n    Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n    Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/49", "language": "csharp", "completion": "if (n == 0) return 1; // Any number to the power of 0 is 1.\n\n    long result = 1;\n    long baseNum = 2 % p; // The base number for exponentiation modulo p.\n                          // We calculate this once, as repeated multiplication will cause overflow.\n\n    while (n > 0)\n    {\n        if ((n & 1) == 1) // If n is odd.\n        {\n            result = (result * baseNum) % p;\n        }\n\n        baseNum = (baseNum * baseNum) % p; // Square the base number modulo p for next iteration.\n        n >>= 1; // Divide n by 2.\n    }\n\n    return (int)result;\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Modp(3, 5));       // Expected output: 3\n            Console.WriteLine(Modp(1101, 101));   // Expected output: 2\n            Console.WriteLine(Modp(0, 101));     // Expected output: 1\n            Console.WriteLine(Modp(3, 11));      // Expected output: 8\n            Console.WriteLine(Modp(100, 101));   // Expected output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/51", "language": "csharp", "completion": "private static readonly HashSet<char> Vowels = new HashSet<char>(new[] {'a', 'e', 'i', 'o', 'u'}, StringComparer.OrdinalIgnoreCase);\n\n    public static string RemoveVowels(string text)\n    {\n        if (text == null) throw new ArgumentNullException(nameof(text));\n\n        return new string(text.Where(c => !Vowels.Contains(c)).ToArray());\n    }\n}"}
{"task_id": "HumanEval_csharp/52", "language": "csharp", "completion": "foreach(var num in l){\n       if(num >= t)\n           return false;\n    }\n    return true;\n}\n\n        // Test your code with the examples provided above.\n        static void Main(string[] args)\n        {\n            Console.WriteLine(BelowThreshold(new List<int>() { 1, 2, 4, 10 }, 100));\n            Console.WriteLine(BelowThreshold(new List<int>() { 1, 20, 4, 10 }, 5));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/53", "language": "csharp", "completion": "return x + y;\n}\n\n        // Entry point of the program. We can use it to test the solution\n        private static void Main(string[] args)\n        {\n            Assert(Add(2, 3), 5);\n            Assert(Add(5, 7), 12);\n            Console.WriteLine(\"All tests passed!\");\n        }\n\n        // Function to check if the output is as expected or not\n        public static void Assert(int actualValue, int expectedValue)\n        {\n            var comparer = new CompareLogic();\n            var comparisonResult = comparer.Compare(actualValue, expectedValue);\n            if (!comparisonResult.AreEqual)\n            {\n                throw new Exception($\"Test failed: {expectedValue} is not equal to {actualValue}\");\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/54", "language": "csharp", "completion": "// Check if the lengths of two strings are equal. If not, return false as they cannot have the same characters.\n    if (s0.Length != s1.Length)\n        return false;\n\n    // Create dictionaries to store the frequency of each character in both strings.\n    Dictionary<char, int> freqMapS0 = new Dictionary<char, int>();\n    Dictionary<char, int> freqMapS1 = new Dictionary<char, int>();\n\n    // Iterate over each character in the first string and update its frequency in the dictionary.\n    foreach (var c in s0)\n    {\n        if (freqMapS0.ContainsKey(c))\n            freqMapS0[c]++;\n        else\n            freqMapS0[c] = 1;\n    }\n\n    // Do the same for the second string.\n    foreach (var c in s1)\n    {\n        if (freqMapS1.ContainsKey(c))\n            freqMapS1[c]++;\n        else\n            freqMapS1[c] = 1;\n    }\n\n    // Compare the two dictionaries to check if they are equal. If they are, return true as the strings have the same characters. Otherwise, return false.\n    return new CompareLogic().Compare(freqMapS0, freqMapS1).AreEqual;\n}"}
{"task_id": "HumanEval_csharp/55", "language": "csharp", "completion": "if (n <= 0)\n    {\n        throw new ArgumentException(\"Input should be a positive integer\");\n    }\n\n    if (n == 1 || n == 2)\n    {\n        return 1;\n    }\n\n    int fib1 = 1, fib2 = 1, result = 0;\n\n    for(int i = 3; i <= n; i++)\n    {\n        result = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = result;\n    }\n\n    return result;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/56", "language": "csharp", "completion": "int count = 0;\n\n    foreach(char c in brackets)\n    {\n        if(c == '<')\n            count++;\n        else if(c == '>')\n            count--;\n\n        // If at any point the count becomes negative, it means there is a closing bracket without an opening one.\n        if(count < 0)\n            return false;\n    }\n\n    // If the final count is zero, then every opening bracket has a corresponding closing bracket.\n    return (count == 0);\n}\n\nstatic void Main()\n{\n    Console.WriteLine(CorrectBracketing(\"<\")); // False\n    Console.WriteLine(CorrectBracketing(\"<>\")); // True\n    Console.WriteLine(CorrectBracketing(\"<<><>>\")); // True\n    Console.WriteLine(CorrectBracketing(\"><<>\") ); // False\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/57", "language": "csharp", "completion": "if(l.Count <= 2)\n      return true;\n\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.Count; i++)\n    {\n        if((l[i] - l[i-1]) * direction <= 0)\n            return false;\n    }\n\n    return true;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(Monotonic(new List<int>{1, 2, 4, 20})); // True\n    Console.WriteLine(Monotonic(new List<int>{1, 20, 4, 10})); // False\n    Console.WriteLine(Monotonic(new List<int>{4, 1, 0, -10})); // True\n}\n\n    }"}
{"task_id": "HumanEval_csharp/58", "language": "csharp", "completion": "return l1.Intersect(l2).OrderBy(x => x).ToList();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/59", "language": "csharp", "completion": "if (n <= 1)\n            return -1; // Invalid input, as n should be greater than 1 and not a prime number.\n\n        int largestFactor = 2;\n\n        while (n % 2 == 0)\n        {\n            n /= 2;\n        }\n\n        for (int i = 3; i <= Math.Sqrt(n); i += 2)\n        {\n            while (n % i == 0)\n            {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n\n        if (n > 2)\n        {\n            largestFactor = n; // If n is a prime number greater than 2, it will be the largest prime factor.\n        }\n\n        return largestFactor;\n    }\n\n        public static void Main()\n        {\n            Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n            Console.WriteLine(LargestPrimeFactor(2048)); // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/60", "language": "csharp", "completion": "if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be a positive integer.\");\n    }\n\n    return Enumerable.Range(1, n).Sum();\n}\n\n    public static void Main()\n    {\n        Console.WriteLine(SumToN(30));   // 465\n        Console.WriteLine(SumToN(100));  // 5050\n        Console.WriteLine(SumToN(5));    // 15\n        Console.WriteLine(SumToN(10));   // 55\n        Console.WriteLine(SumToN(1));    // 1\n    }\n}"}
{"task_id": "HumanEval_csharp/61", "language": "csharp", "completion": "int count = 0;\n\n    foreach(char c in brackets)\n    {\n      if(c == '(')\n        count++;\n      else if(c == ')')\n        count--;\n\n      if(count < 0)\n        return false;\n    }\n\n    return count == 0;\n}\n    }"}
{"task_id": "HumanEval_csharp/62", "language": "csharp", "completion": "var result = new List<int>();\n    for (var i = 1; i < xs.Count; i++)\n    {\n        result.Add(xs[i] * i);\n    }\n    return result;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(string.Join(\", \", Derivative(new List<int> { 3, 1, 2, 4, 5 }))); // Outputs: 1, 4, 12, 20\n    Console.WriteLine(string.Join(\", \", Derivative(new List<int> { 1, 2, 3 })));      // Outputs: 2, 6\n}\n    }"}
{"task_id": "HumanEval_csharp/63", "language": "csharp", "completion": "if (n == 0 || n == 1) return 0;\n   else if (n == 2) return 1;\n   else\n   {\n       int a = 0, b = 0, c = 1, d;\n       for(int i=3; i<=n; i++)\n       {\n           d = a + b + c;\n           a = b;\n           b = c;\n           c = d;\n       }\n       return d;\n   }\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/64", "language": "csharp", "completion": "int count = 0;\n    string vowels = \"aeiou\";\n    char lastChar = s[s.Length - 1];\n\n    foreach (char c in s.ToLower())\n    {\n        if (vowels.Contains(c))\n        {\n            count++;\n        }\n        else if (c == 'y' && Char.IsLetter(lastChar) && lastChar != 'y')\n        {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(VowelsCount(\"abcde\"));  // Output: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\"));  // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/65", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(CircularShift(12, 1)); // Outputs \"21\"\n        Console.WriteLine(CircularShift(12, 2)); // Outputs \"12\"\n    }\n\n    public static string CircularShift (int x, int shift)\n    {\n        var digits = x.ToString().ToCharArray();\n        if(shift > digits.Length)\n            Array.Reverse(digits);\n        else\n        {\n            for(var i = 0; i < shift; i++)\n            {\n                var temp = digits[^1];\n                for(var j = digits.Length - 1; j > 0; j--)\n                    digits[j] = digits[j - 1];\n                digits[0] = temp;\n            }\n        }\n        return new string(digits);\n    }\n}"}
{"task_id": "HumanEval_csharp/66", "language": "csharp", "completion": "return string.IsNullOrEmpty(s) ? 0 : s.Where(c => char.IsUpper(c)).Select(c => (int)c).Sum();\n}\n\n        private static void Main()\n        {\n            Console.WriteLine(\"Test 1: \" + DigitSum(\"\")); // Expected output: 0\n            Console.WriteLine(\"Test 2: \" + DigitSum(\"abAB\")); // Expected output: 131\n            Console.WriteLine(\"Test 3: \" + DigitSum(\"abcCd\")); // Expected output: 67\n            Console.WriteLine(\"Test 4: \" + DigitSum(\"helloE\")); // Expected output: 69\n            Console.WriteLine(\"Test 5: \" + DigitSum(\"woArBld\")); // Expected output: 131\n            Console.WriteLine(\"Test 6: \" + DigitSum(\"aAaaaXa\")); // Expected output: 153\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/67", "language": "csharp", "completion": "var matches = Regex.Matches(s, @\"\\d+\");\n    var apples = Int32.Parse(matches[0].Value);\n    var oranges = Int32.Parse(matches[1].Value);\n\n    return n - apples - oranges;\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"FruitDistribution('5 apples and 6 oranges', 19)\");\n            Console.WriteLine(FruitDistribution(\"5 apples and 6 oranges\", 19));\n            // Output: 8\n\n            Console.WriteLine(\"FruitDistribution('0 apples and 1 oranges',3)\");\n            Console.WriteLine(FruitDistribution(\"0 apples and 1 oranges\",3));\n            // Output: 2\n\n            Console.WriteLine(\"FruitDistribution('2 apples and 3 oranges', 100)\");\n            Console.WriteLine(FruitDistribution(\"2 apples and 3 oranges\", 100));\n            // Output: 95\n\n            Console.WriteLine(\"FruitDistribution('100 apples and 1 oranges',120)\");\n            Console.WriteLine(FruitDistribution(\"100 apples and 1 oranges\",120));\n            // Output: 19\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/68", "language": "csharp", "completion": "public static List<int> Pluck(List<int> arr)\n{\n    var minEven = int.MaxValue;\n    var index = -1;\n\n    for (var i = 0; i < arr.Count; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven = arr[i];\n            index = i;\n        }\n    }\n\n    return index != -1 ? new List<int> { minEven, index } : new List<int>();\n}"}
{"task_id": "HumanEval_csharp/69", "language": "csharp", "completion": "// Firstly, sort the list in descending order.\n    lst.Sort();\n    lst.Reverse();\n\n    foreach(var num in lst){\n      if(lst.Count(n => n == num) >= num){\n         return num;\n       }\n     }\n     // If no number meets the condition, return -1.\n     return -1;\n  }\n}"}
{"task_id": "HumanEval_csharp/70", "language": "csharp", "completion": "public static List<int> StrangeSortList(List<int> lst)\n{\n    if (lst == null || !lst.Any()) return new List<int>();\n\n    var sortedLst = lst.OrderBy(x => x).ToList();\n    var result = new List<int>();\n\n    while (sortedLst.Any())\n    {\n        result.Add(sortedLst[0]); // Add the minimum value\n        sortedLst.RemoveAt(0);\n\n        if (sortedLst.Any())\n        {\n            result.Add(sortedLst[sortedLst.Count - 1]); // Add the maximum value\n            sortedLst.RemoveAt(sortedLst.Count - 1);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/71", "language": "csharp", "completion": "// First check if the three sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a)\n    {\n        // Calculate the semi-perimeter of the triangle\n        double s = (a + b + c) / 2.0;\n\n        // Calculate the area using Heron's formula\n        double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to 2 decimal points and return it\n        return Math.Round(area, 2);\n    }\n    else\n    {\n        // If the three sides do not form a valid triangle, return -1\n        return -1;\n    }\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(\"Testing...\");\n            Test(TriangleArea(3, 4, 5), 6.00);\n            Test(TriangleArea(1, 2, 10), -1);\n            Console.ReadKey();\n        }\n\n        public static void Test<T>(T actual, T expected)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            ComparisonResult result = compareLogic.Compare(actual, expected);\n            if (result.AreEqual)\n                Console.WriteLine(\"PASS\");\n            else\n                Console.WriteLine($\"FAIL: {result.DifferencesString}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/72", "language": "csharp", "completion": "return IsPalindrome(q) && q.Sum() <= w;\n}\n\nprivate static bool IsPalindrome(List<int> list)\n{\n    for (int i = 0; i < list.Count / 2; i++)\n    {\n        if (list[i] != list[list.Count - i - 1])\n            return false;\n    }\n    return true;\n}\n    }"}
{"task_id": "HumanEval_csharp/73", "language": "csharp", "completion": "public static int SmallestChange(List<int> arr)\n{\n    int n = arr.Count;\n    int count = 0;\n\n    for (int i = 0; i < n / 2; i++)\n    {\n        if (arr[i] != arr[n - i - 1])\n            count++;\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/74", "language": "csharp", "completion": "int sumLst1 = lst1.Sum(s => s.Length);\n        int sumLst2 = lst2.Sum(s => s.Length);\n\n        if (sumLst1 <= sumLst2)\n            return lst1;\n        else\n            return lst2;\n    }\n  }\n}"}
{"task_id": "HumanEval_csharp/75", "language": "csharp", "completion": "// Check if the input number is less than or equal to 1, as it cannot be the multiplication of prime numbers.\n    if (a <= 1)\n    {\n        return false;\n    }\n\n    // Initialize a variable 'primeFactors' with a value of 0 to keep track of the number of prime factors found for the input number 'a'.\n    int primeFactors = 0;\n\n    // Loop through all possible divisors from 2 up to the square root of 'a' (inclusive).\n    for (int i = 2; i <= Math.Sqrt(a); i++)\n    {\n        // Check if 'i' is a factor of 'a'.\n        while (a % i == 0)\n        {\n            // Increment the count of prime factors found.\n            primeFactors++;\n\n            // If more than three prime factors are found, return false immediately as it means 'a' cannot be expressed as the multiplication of exactly three prime numbers.\n            if (primeFactors > 3)\n            {\n                return false;\n            }\n\n            // Divide 'a' by 'i' to remove it as a factor, and continue checking for more factors.\n            a /= i;\n        }\n    }\n\n    // If 'a' is greater than 1 at this point, it means that 'a' itself is a prime number. Increment the count of prime factors found.\n    if (a > 1)\n    {\n        primeFactors++;\n    }\n\n    // Check if exactly three prime factors were found for the input number. If so, return true; otherwise, return false.\n    return primeFactors == 3;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/76", "language": "csharp", "completion": "if (x < 1 || n < 2) return false; // power must be at least 2 and base should be positive\n    while (x % n == 0)\n    {\n      x /= n;\n    }\n    return x == 1;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/77", "language": "csharp", "completion": "return Math.Pow((int)Math.Round(Math.Cbrt(Math.Abs(a))), 3) == Math.Abs(a);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/78", "language": "csharp", "completion": "if (num == null || !(num is string))\n            throw new ArgumentException(\"Input must be a non-null string\");\n\n        string hexString = (string)num;\n        List<char> primeHexDigits = new List<char> {'2', '3', '5', '7', 'B', 'D'};\n\n        int count = 0;\n        foreach(char digit in hexString)\n        {\n            if (primeHexDigits.Contains(digit))\n                count++;\n        }\n\n        return count;\n    }\n\n        static void Main(string[] args)\n        {\n            var testCases = new[] {\n                new object[] {\"AB\"},\n                new object[] {\"1077E\"},\n                new object[] {\"ABED1A33\"},\n                new object[] {\"123456789ABCDEF0\"},\n                new object[] {\"2020\"}\n            };\n            var testResults = new[] { 1, 2, 4, 6, 2 };\n            Assert(testCases, testResults);\n        }\n\n        private static void Assert(object[][] testCases, int[] results)\n        {\n            var compareLogic = new CompareLogic();\n            for (var i = 0; i < testCases.Length; i++)\n                if (!compareLogic.Compare(HexKey(testCases[i][0]), results[i]).AreEqual)\n                    throw new Exception($\"Test {i} failed\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/79", "language": "csharp", "completion": "return $\"db{Convert.ToString(decimal, 2)}db\";\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/80", "language": "csharp", "completion": "if (s.Length < 3)\n    {\n        return false;\n    }\n\n    for (int i = 0; i <= s.Length - 3; i++)\n    {\n        char firstChar = s[i];\n        char secondChar = s[i + 1];\n        char thirdChar = s[i + 2];\n\n        if (firstChar == secondChar || secondChar == thirdChar || firstChar == thirdChar)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(IsHappy(\"a\")); // False\n            Console.WriteLine(IsHappy(\"aa\")); // False\n            Console.WriteLine(IsHappy(\"abcd\")); // True\n            Console.WriteLine(IsHappy(\"aabb\")); // False\n            Console.WriteLine(IsHappy(\"adb\")); // True\n            Console.WriteLine(IsHappy(\"xyy\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/81", "language": "csharp", "completion": "// Define the grading boundaries and corresponding letters\n    var gradingBoundaries = new Dictionary<double, string>()\n    {\n        { 4.0, \"A+\" },\n        { 3.7, \"A\" },\n        { 3.3, \"A-\" },\n        { 3.0, \"B+\" },\n        { 2.7, \"B\" },\n        { 2.3, \"B-\" },\n        { 2.0, \"C+\" },\n        { 1.7, \"C\" },\n        { 1.3, \"C-\" },\n        { 1.0, \"D+\" },\n        { 0.7, \"D\" },\n        { 0.0, \"D-\" }\n    };\n\n    // Initialize an empty list to store the results\n    var result = new List<string>();\n\n    // Loop through each grade in the input list\n    foreach (var grade in grades)\n    {\n        // Try to parse the grade as a double and check if it's within the valid range (0.0 to 4.0)\n        if (double.TryParse(grade.ToString(), out var gpa) && gpa >= 0.0 && gpa <= 4.0)\n        {\n            // Find the first grading boundary that is less than or equal to the GPA and get its corresponding letter grade\n            var letterGrade = gradingBoundaries.First(pair => pair.Key <= gpa).Value;\n\n            // Add the letter grade to the result list\n            result.Add(letterGrade);\n        }\n    }\n\n    // Return the final list of letter grades\n    return result;\n}\n\n        public static void Main()\n        {\n            var actual = NumericalLetterGrade(new List<object> { 4.0, 3, 1.7, 2, 3.5 });\n            Console.WriteLine($\"Actual:   {'[' + string.Join(\", \", actual) + ']'}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/82", "language": "csharp", "completion": "int length = string0.Length;\n\n    if (length <= 1)\n        return false;\n\n    for (int i = 2; i < Math.Sqrt(length); i++)\n    {\n        if (length % i == 0)\n            return false;\n    }\n\n    return true;\n}\n    }"}
{"task_id": "HumanEval_csharp/83", "language": "csharp", "completion": "public class Program\n{\n    public static int StartsOneEnds(int n)\n    {\n        if (n <= 0)\n            return 0;\n\n        // Create two arrays to store the count of numbers ending and starting with 1.\n        int[] startWithOne = new int[n + 1];\n        int[] endWithOne = new int[n + 1];\n\n        startWithOne[1] = endWithOne[1] = 1;\n\n        for (int i = 2; i <= n; i++)\n        {\n            // Numbers ending with one are calculated by adding numbers of length i-1.\n            endWithOne[i] = startWithOne[i - 1] + endWithOne[i - 1];\n\n            // Numbers starting with one is always equal to the total numbers of length n-1.\n            startWithOne[i] = (int)Math.Pow(10, i - 1);\n        }\n\n        return startWithOne[n] + endWithOne[n];\n    }\n}"}
{"task_id": "HumanEval_csharp/84", "language": "csharp", "completion": "return Convert.ToString(Convert.ToInt32(N.ToString(), 16), 2).Sum(c => c - '0').ToString();\n}\n}"}
{"task_id": "HumanEval_csharp/85", "language": "csharp", "completion": "return lst.Where((n, i) => n % 2 == 0 && i % 2 != 0).Sum();\n}\n    }"}
{"task_id": "HumanEval_csharp/86", "language": "csharp", "completion": "if (string.IsNullOrEmpty(s)) return s;\n\n    var words = Regex.Split(s, \"(\\\\s+)\"); // split by whitespaces and keep the delimiters\n    for (int i = 0; i < words.Length; i++)\n        {\n            if (!string.IsNullOrWhiteSpace(words[i]))\n                {\n                    var sortedWord = string.Concat(words[i].OrderBy(c => c));\n                    words[i] = sortedWord;\n                }\n        }\n\n    return string.Join(\"\", words); // join back without adding any extra delimiters\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(AntiShuffle(\"Hi\")); // \"Hi\"\n            Console.WriteLine(AntiShuffle(\"hello\")); // \"ehllo\"\n            Console.WriteLine(AntiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/87", "language": "csharp", "completion": "var result = new List<List<int>>();\n    for (var i = 0; i < lst.Count; i++)\n    {\n        var row = lst[i];\n        for (var j = 0; j < row.Count; j++)\n        {\n            if (row[j] == x)\n            {\n                result.Add(new List<int> { i, j });\n            }\n        }\n    }\n\n    // Sorting by rows in ascending order and then by columns in descending order\n    result = result.OrderBy(coord => coord[0])\n                   .ThenByDescending(coord => coord[1])\n                   .ToList();\n\n    return result;\n}\n\n        public static void Main()\n        {\n            var compareLogic = new CompareLogic();\n            var comparer = new CompareNetObjects();\n\n            Test(new List<List<int>> { new List<int> { 1, 2, 3, 4, 5, 6 }, new List<int> { 1, 2, 3, 4, 1, 6 }, new List<int> { 1, 2, 3, 4, 5, 1 } }, 1, new List<List<int>> { new List<int> { 0, 0 }, new List<int> { 1, 4 }, new List<int> { 1, 0 }, new List<int> { 2, 5 }, new List<int> { 2, 0 } }, compareLogic, comparer);\n            Test(new List<List<int>> {}, 1, new List<List<int>> {}, compareLogic, comparer);\n            Test(new List<List<int>> { new List<int>(), new List<int> { 1 }, new List<int> { 1, 2, 3 } }, 3, new List<List<int>> { new List<int> { 2, 2 } }, compareLogic, comparer);\n            Test(new List<List<int>> { new List<int>(), new List<int>() }, 0, new List<List<int>> {}, compareLogic, comparer);\n            Test(new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5, 6 } }, 7, new List<List<int>> {}, compareLogic, comparer);\n        }\n\n        public static void Test(List<List<int>> lst, int x, object result, CompareLogic cl, ComparisonConfig cc)\n        {\n            var output = GetRow(lst, x);\n            var areEqual = cl.Compare(output, result).AreEqual;\n            Console.WriteLine((areEqual ? \"OK\" : \"Fail\") + \"\\n\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/88", "language": "csharp", "completion": "public static List<int> SortArray(List<int> array)\n{\n    if (array == null || array.Count <= 1)\n    {\n        return new List<int>(array);\n    }\n\n    int first = array[0];\n    int last = array[array.Count - 1];\n\n    var sortedList = new List<int>(array);\n\n    if ((first + last) % 2 == 0) // If the sum is even, sort in descending order\n        sortedList.Sort((a, b) => b.CompareTo(a));\n    else // If the sum is odd, sort in ascending order\n        sortedList.Sort();\n\n    return sortedList;\n}"}
{"task_id": "HumanEval_csharp/89", "language": "csharp", "completion": "public static string Encrypt(string input)\n{\n    if (string.IsNullOrEmpty(input))\n        return input;\n\n    char[] encryptedChars = new char[input.Length];\n\n    for (int i = 0; i < input.Length; i++)\n    {\n        char c = input[i];\n\n        if (char.IsLetter(c))\n        {\n            char a = char.IsUpper(c) ? 'A' : 'a';\n            int offset = ((c - a + 2 * 2) % 26);\n            encryptedChars[i] = (char)(a + offset);\n        }\n        else\n        {\n            encryptedChars[i] = c;\n        }\n    }\n\n    return new string(encryptedChars);\n}"}
{"task_id": "HumanEval_csharp/90", "language": "csharp", "completion": "var sortedDistinctNumbers = lst.Distinct().OrderBy(x => x).ToArray();\n    return sortedDistinctNumbers.Length < 2 ? null : sortedDistinctNumbers[1];\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/91", "language": "csharp", "completion": "// Split the input string into sentences using the delimiters '.', '?' and '!'\n    string[] sentences = Regex.Split(S, @\"[\\.\\?\\!]\");\n\n    // Initialize a counter for boredoms\n    int boredomCount = 0;\n\n    // Iterate through each sentence\n    foreach (string sentence in sentences)\n    {\n        // Remove leading and trailing whitespaces from the sentence\n        string trimmedSentence = sentence.Trim();\n\n        // Check if the sentence starts with \"I\"\n        if (trimmedSentence.StartsWith(\"I\", StringComparison.OrdinalIgnoreCase))\n        {\n            // Increment the boredom count if the sentence starts with \"I\"\n            boredomCount++;\n        }\n    }\n\n    // Return the total number of boredoms found in the input string\n    return boredomCount;\n}\n\n        public static void Main() \n        {\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\"));\n            Console.ReadKey();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/92", "language": "csharp", "completion": "if(x is int && y is int && z is int)\n    {\n      return (int)x == (int)y + (int)z || (int)y == (int)x + (int)z || (int)z == (int)x + (int)y;\n    }\n    return false;\n        }\n        static void Main(string[] args)\n        {\n            Console.WriteLine(AnyInt(5, 2, 7)); // True\n            Console.WriteLine(AnyInt(3, 2, 2)); // False\n            Console.WriteLine(AnyInt(3, -2, 1)); // True\n            Console.WriteLine(AnyInt(3.6, -2.2, 2)); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/93", "language": "csharp", "completion": "var vowels = \"aeiouAEIOU\";\n   var result = \"\";\n\n   foreach (var ch in message)\n   {\n       if (!char.IsLetter(ch))\n           result += ch;\n       else\n       {\n           char newChar = Char.IsLower(ch) ? Char.ToUpper(ch) : Char.ToLower(ch);\n\n           if (vowels.Contains(newChar))\n               newChar = vowels[(Array.IndexOf(vowels.ToCharArray(), newChar) + 2) % vowels.Length];\n\n           result += newChar;\n       }\n   }\n\n   return result;\n}\n    }"}
{"task_id": "HumanEval_csharp/94", "language": "csharp", "completion": "if (!lst.Any()) return 0;\n\n   var primes = lst.Where(IsPrime).ToList();\n\n   if (!primes.Any()) return 0;\n\n   int maxPrime = primes.Max();\n   int sumOfDigits = maxPrime.ToString().Select(c => int.Parse(c.ToString())).Sum();\n\n   return sumOfDigits;\n}\n\nprivate static bool IsPrime(int number)\n{\n   if (number < 2) return false;\n   if (number == 2) return true;\n   if (number % 2 == 0) return false;\n\n   var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n   for (int i = 3; i <= boundary; i += 2)\n      if (number % i == 0)\n         return false;\n\n   return true;\n}\n    }"}
{"task_id": "HumanEval_csharp/95", "language": "csharp", "completion": "if (dict == null || dict.Count == 0)\n    {\n        return false;\n    }\n\n    var isLowerCase = true;\n    var isUpperCase = true;\n\n    foreach (var key in dict.Keys)\n    {\n        if (!(key is string))\n        {\n            return false;\n        }\n\n        var strKey = (string)key;\n\n        if (!strKey.All(char.IsLower))\n        {\n            isLowerCase = false;\n        }\n\n        if (!strKey.All(char.IsUpper))\n        {\n            isUpperCase = false;\n        }\n    }\n\n    return isLowerCase || isUpperCase;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(\"{0}\", CheckDictCase(new Dictionary<object, string>() {{\"a\", \"apple\"}, {\"b\", \"banana\"}})); // should print True\n            Console.WriteLine(\"{0}\", CheckDictCase(new Dictionary<object, string>() {{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})); // should print False\n            Console.WriteLine(\"{0}\", CheckDictCase(new Dictionary<object, string>() {{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})); // should print False\n            Console.WriteLine(\"{0}\", CheckDictCase(new Dictionary<object, string>() {{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})); // should print False\n            Console.WriteLine(\"{0}\", CheckDictCase(new Dictionary<object, string>() {{ \"STATE\",\"NC\"}, {\"ZIP\", \"12345\" }})); // should print True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/96", "language": "csharp", "completion": "if (n < 2)\n    {\n        return new List<int>();\n    }\n\n    var primes = Enumerable.Range(2, n - 1).Where(IsPrime);\n\n    return primes.ToList();\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number < 2)\n        return false;\n\n    for (int i = 2; i <= Math.Sqrt(number); i++)\n    {\n        if (number % i == 0)\n            return false;\n    }\n\n    return true;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(string.Join(\", \", CountUpTo(5))); // Output: [2,3]\n    Console.WriteLine(string.Join(\", \", CountUpTo(11))); // Output: [2,3,5,7]\n    Console.WriteLine(string.Join(\", \", CountUpTo(0))); // Output: []\n    Console.WriteLine(string.Join(\", \", CountUpTo(20))); // Output: [2,3,5,7,11,13,17,19]\n    Console.WriteLine(string.Join(\", \", CountUpTo(1))); // Output: []\n    Console.WriteLine(string.Join(\", \", CountUpTo(18))); // Output: [2,3,5,7,11,13,17]\n}\n}"}
{"task_id": "HumanEval_csharp/97", "language": "csharp", "completion": "return Math.Abs(a % 10 * b % 10);\n}\n\n        private static void Test(int expected, params object[] input)\n        {\n            var result = Multiply((int)input[0], (int)input[1]);\n            Console.WriteLine($\"Multiply({string.Join(\", \", input)}): Expected: {expected}, Got: {result}\");\n        }\n\n        public static void Main(string[] args)\n        {\n            Test(16, 148, 412);\n            Test(72, 19, 28);\n            Test(0, 2020, 1851);\n            Test(20, 14,-15);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/98", "language": "csharp", "completion": "var vowels = new HashSet<char>() { 'A', 'E', 'I', 'O', 'U' };\n    return s.Where((ch, index) => index % 2 == 0 && vowels.Contains(ch)).Count();"}
{"task_id": "HumanEval_csharp/99", "language": "csharp", "completion": "if (double.TryParse(value, out double num))\n            {\n                // Check if the decimal part is exactly .5 and round away from zero\n                if ((num % 1) == 0.5)\n                    return (int)(Math.Sign(num) * Math.Ceiling(Math.Abs(num)));\n                else\n                    return (int)Math.Round(num);\n            }\n            throw new ArgumentException(\"Invalid input\");\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(ClosestInteger(\"10\"));      // Outputs: 10\n            Console.WriteLine(ClosestInteger(\"15.3\"));    // Outputs: 15\n            Console.WriteLine(ClosestInteger(\"14.5\"));    // Outputs: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\"));   // Outputs: -15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/100", "language": "csharp", "completion": "if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be a positive integer.\");\n    }\n\n    var pile = new List<int>();\n\n    for (var i = 0; i < n; i++)\n    {\n        if (n % 2 == 0)\n        {\n            // If n is even, add the next even number to the pile.\n            pile.Add(n + 2 * i);\n        }\n        else\n        {\n            // If n is odd, add the next odd number to the pile.\n            pile.Add(n + 2 * i);\n        }\n    }\n\n    return pile;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/101", "language": "csharp", "completion": "return Regex.Split(s, @\"\\s*,\\s*|\\s+\").ToList();\n}\n    }"}
{"task_id": "HumanEval_csharp/102", "language": "csharp", "completion": "if (x > y) return -1; // If the range is invalid, return -1.\n   for (var i = y; i >= x; i--) // Start from y and go down to x.\n   {\n       if (i % 2 == 0) return i; // If we find an even number, return it.\n   }\n   return -1; // If no even numbers were found in the range, return -1.\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/103", "language": "csharp", "completion": "if (n > m)\n            return -1;\n\n        double avg = (double)(n + m) / 2;\n        int roundedAvg = Convert.ToInt32(Math.Round(avg));\n        string binaryAvg = Convert.ToString(roundedAvg, 2);\n\n        return \"0b\" + binaryAvg;\n    }\n}"}
{"task_id": "HumanEval_csharp/104", "language": "csharp", "completion": "return x.Where(n => !n.ToString().Any(c => int.Parse(c.ToString()) % 2 == 0))\n               .OrderBy(n => n)\n               .ToList();\n}\n\n        static void Main(string[] args)\n        {\n            List<int> test1 = new List<int>() { 15, 33, 1422, 1 };\n            Console.WriteLine(string.Join(\", \", UniqueDigits(test1))); // Output: \"1, 15, 33\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/105", "language": "csharp", "completion": "if(arr == null || !arr.Any()) return new List<string>();\n    var validNumbers = arr.Where(n => n >= 1 && n <=9).OrderBy(n=>n).Reverse();\n    string[] numberNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    return validNumbers.Select(num => numberNames[num-1]).ToList();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/106", "language": "csharp", "completion": "if (n < 1) throw new ArgumentException(\"Input should be a positive integer\");\n\n    var result = new List<int>();\n\n    for(var i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result.Add(Factorial(i));\n        else\n            result.Add(SumToN(i));\n    }\n\n    return result;\n}\n\nprivate static int Factorial(int n)\n{\n    var result = 1;\n\n    for (var i = 2; i <= n; i++)\n        result *= i;\n\n    return result;\n}\n\nprivate static int SumToN(int n)\n{\n    var sum = 0;\n\n    for (var i = 1; i <= n; i++)\n        sum += i;\n\n    return sum;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(string.Join(\", \", F(5))); // outputs: \"1, 2, 6, 24, 15\"\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/107", "language": "csharp", "completion": "public static Tuple<int, int> EvenOddPalindrome(int n)\n{\n    if (n < 1 || n > Math.Pow(10, 3)) throw new ArgumentOutOfRangeException(\"n must be between 1 and 10^3\");\n\n    var evenCount = 0;\n    var oddCount = 0;\n\n    for (var i = 1; i < n; i++)\n    {\n        if (!IsPalindrome(i)) continue;\n\n        if (i % 2 == 0) evenCount++;\n        else oddCount++;\n    }\n\n    return new Tuple<int, int>(evenCount, oddCount);\n}\n\nprivate static bool IsPalindrome(int number)\n{\n    var numberString = number.ToString();\n    for (var i = 0; i < numberString.Length / 2; i++)\n        if (numberString[i] != numberString[numberString.Length - i - 1]) return false;\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/108", "language": "csharp", "completion": "int count = 0;\n    foreach (var num in arr)\n    {\n        if (num < 0 && Math.Abs(num / 10 % 10 - num / 10) == 1 || num > 0 && num % 9 != 0)\n            count++;\n    }\n    return count;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(CountNums(new List<int> { })); // Expected output: 0\n    Console.WriteLine(CountNums(new List<int> { -1, 11, -11 })); // Expected output: 1\n    Console.WriteLine(CountNums(new List<int> { 1, 1, 2 })); // Expected output: 3\n}\n    }"}
{"task_id": "HumanEval_csharp/109", "language": "csharp", "completion": "public static bool MoveOneBall(List<int> arr)\n{\n    if (arr.Count == 0) return true; // If the array is empty, it is already sorted.\n\n    int minIndex = Array.IndexOf(arr.ToArray(), arr.Min()); // Find the index of the smallest element.\n    List<int> rotatedArr = new List<int>(arr); // Create a copy of the array to avoid modifying the original one.\n\n    for (int i = 0; i < minIndex; i++)\n    {\n        int lastElement = rotatedArr[rotatedArr.Count - 1]; // Store the last element.\n        rotatedArr.RemoveAt(rotatedArr.Count - 1); // Remove the last element.\n        rotatedArr.Insert(0, lastElement); // Insert the last element at the beginning of the array.\n    }\n\n    for (int i = 0; i < arr.Count - 1; i++)\n    {\n        if (rotatedArr[i] > rotatedArr[i + 1]) return false; // If any two adjacent elements are out of order, it is not possible to sort the array by right shifting.\n    }\n\n    return true; // If all elements are in non-decreasing order after rotating, return true.\n}"}
{"task_id": "HumanEval_csharp/110", "language": "csharp", "completion": "// Filter out odd numbers from lst1 and even numbers from lst2\n    var oddsInLst1 = lst1.Where(x => x % 2 != 0).ToList();\n    var evensInLst2 = lst2.Where(x => x % 2 == 0).ToList();\n\n    // Check if there are enough even numbers in lst2 to replace all odd numbers in lst1\n    return oddsInLst1.Count <= evensInLst2.Count ? \"YES\" : \"NO\";\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter the elements of the first list, separated by spaces:\");\n            var lst1 = Console.ReadLine()?.Split(' ').Select(int.Parse).ToList();\n\n            Console.WriteLine(\"Enter the elements of the second list, separated by spaces:\");\n            var lst2 = Console.ReadLine()?.Split(' ').Select(int.Parse).ToList();\n\n            if (lst1 != null && lst2 != null)\n            {\n                Console.WriteLine(Exchange(lst1, lst2));\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/111", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static Dictionary<string, int> Histogram(string test)\n        {\n            // Split the input string into words\n            var words = Regex.Split(test, @\"\\s+\").Where(w => !string.IsNullOrEmpty(w));\n\n            // Group the words by their values and then count each group\n            var counts = words.GroupBy(w => w).Select(g => new { Letter = g.Key, Count = g.Count() }).ToList();\n\n            if (!counts.Any()) return new Dictionary<string, int>(); // Return an empty dictionary if the input string is empty\n\n            var maxCount = counts.Max(c => c.Count); // Find the maximum count\n\n            // Filter out the letters that have the maximum count and convert them to a dictionary\n            return counts.Where(c => c.Count == maxCount).ToDictionary(c => c.Letter, c => c.Count);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/112", "language": "csharp", "completion": "string result = new String(s.Where((t, i) => !c.Contains(t)).ToArray());\n    bool isPalindrome = result == new String(result.Reverse().ToArray());\n\n    return new List<object> { result, isPalindrome };\n}\n    }\n\npublic static class ProgramRunner\n{\n  public static void Main(string[] args)\n  {\n    Console.WriteLine(\"Testing ReverseDelete function:\");\n\n    var testCases = new []\n    {\n      Tuple.Create(\"abcde\", \"ae\"),\n      Tuple.Create(\"abcdef\", \"b\"),\n      Tuple.Create(\"abcdedcba\", \"ab\")\n    };\n\n    foreach (var tc in testCases)\n    {\n      var result = Program.ReverseDelete(tc.Item1, tc.Item2);\n      Console.WriteLine($\"Input: s = '{tc.Item1}', c = '{tc.Item2}'\");\n      Console.WriteLine($\"Output: ({result[0]}, {result[1]})\");\n    }\n  }\n}"}
{"task_id": "HumanEval_csharp/113", "language": "csharp", "completion": "var result = new List<string>();\n   foreach(var s in lst)\n    {\n        int count = Regex.Matches(s, \"[13579]\").Count;\n        string newString = \"the number of odd elements \"+count+\"n the str\"+count+\"ng \"+count+\" of the \"+count+\"nput.\";\n        result.Add(newString);\n    }\n    return result;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/114", "language": "csharp", "completion": "public static int MinSubArraySum(List<int> nums)\n   {\n       if (nums == null || !nums.Any())\n           throw new ArgumentException(\"Input array cannot be empty or null.\");\n\n       int minSum = nums[0];\n       int currentSum = nums[0];\n\n       for(int i = 1; i < nums.Count; i++)\n       {\n           // If the current sum is positive, reset it to the current element.\n           // Otherwise, keep adding the current element to the current sum.\n           currentSum = Math.Max(nums[i], currentSum + nums[i]);\n\n           // Update minSum if currentSum is smaller.\n           minSum = Math.Min(minSum, currentSum);\n       }\n\n       return minSum;\n   }"}
{"task_id": "HumanEval_csharp/115", "language": "csharp", "completion": "public class Program\n{\n    public static int MaxFill(List<List<int>> grid, int capacity)\n    {\n        var totalBuckets = 0;\n        var currentCapacity = 0;\n\n        // Loop through each well in the grid\n        for (var i = 0; i < grid.Count; i++)\n        {\n            // Loop through each unit of water in the well\n            for (var j = 0; j < grid[i].Count; j++)\n            {\n                if (grid[i][j] == 1)\n                {\n                    currentCapacity++;\n\n                    // If the bucket is full, empty it and reset the capacity\n                    if (currentCapacity == capacity)\n                    {\n                        totalBuckets++;\n                        currentCapacity = 0;\n                    }\n                }\n            }\n\n            // If there is still water in the bucket after finishing a well, empty it\n            if (currentCapacity > 0)\n            {\n                totalBuckets++;\n                currentCapacity = 0;\n            }\n        }\n\n        return totalBuckets;\n    }\n}"}
{"task_id": "HumanEval_csharp/116", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> SortArray(List<int> arr)\n    {\n        return arr.Select(num => (Number: num, OnesCount: Convert.ToString(num, 2).Count(c => c == '1')))\n                   .OrderBy(t => t.OnesCount)\n                   .ThenBy(t => t.Number)\n                   .Select(t => t.Number)\n                   .ToList();\n    }\n}"}
{"task_id": "HumanEval_csharp/117", "language": "csharp", "completion": "public static List<string> SelectWords(string s, int n)\n{\n    return Regex.Split(s, @\"\\s+\")\n                 .Where(word => Regex.Matches(word, \"[bcdfghjklmnpqrstvwxyz]\", RegexOptions.IgnoreCase).Count == n)\n                 .ToList();\n}"}
{"task_id": "HumanEval_csharp/118", "language": "csharp", "completion": "if (word.Length < 3) return \"\";\n\n    for(int i = word.Length - 2; i > 0; i--)\n    {\n        char currentChar = char.ToLower(word[i]);\n        char prevChar = char.ToLower(word[i-1]);\n        char nextChar = char.ToLower(word[i+1]);\n\n        if(!IsVowel(prevChar) && IsVowel(currentChar) && !IsVowel(nextChar))\n            return word[i].ToString();\n    }\n\n    return \"\";\n}\n\nprivate static bool IsVowel(char c)\n{\n    string vowels = \"aeiou\";\n    return vowels.Contains(c);\n}\n\n        public static void Main (string[] args) {\n            Console.WriteLine (\"Hello World\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/119", "language": "csharp", "completion": "// check if both strings are empty or null, in which case the answer is Yes\n    if (string.IsNullOrEmpty(lst[0]) && string.IsNullOrEmpty(lst[1]))\n    {\n        return \"Yes\";\n    }\n\n    // initialize a variable to keep track of the difference between open and closed parentheses\n    int diff = 0;\n\n    // concatenate both strings, iterating over each character\n    foreach (char c in lst[0] + lst[1])\n    {\n        // if the character is an open parenthesis, increment the difference\n        if (c == '(')\n        {\n            diff++;\n        }\n        // if the character is a closed parenthesis, decrement the difference\n        else\n        {\n            diff--;\n        }\n\n        // if the difference becomes negative at any point, it means that there are more closed parentheses than open parentheses, so the answer is No\n        if (diff < 0)\n        {\n            return \"No\";\n        }\n    }\n\n    // if the difference is zero at the end of the iteration, it means that all parentheses are balanced, so the answer is Yes\n    if (diff == 0)\n    {\n        return \"Yes\";\n    }\n\n    // otherwise, the answer is No\n    return \"No\";\n}\n\n        static void Main(string[] args)\n        {\n            // CompareNetObjects.UnitTest.Run();\n            Console.WriteLine(\"MatchParens:\");\n            Console.WriteLine(MatchParens(new List<string> {\"()(\", \")\"}) == \"Yes\");\n            Console.WriteLine(MatchParens(new List<string> {\")\", \")\"}) == \"No\");\n            Console.ReadKey();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/120", "language": "csharp", "completion": "// Sort the array in ascending order\n    arr.Sort();\n\n    // Get the last 'k' elements from the sorted array\n    var result = arr.GetRange(arr.Count - k, k);\n\n    // Reverse the list to get it in descending order\n    result.Reverse();\n\n    return result;\n}\n\n        public static void Main()\n        {\n            string test = @\"[]\";\n            List<int> arr = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<List<int>>(test);\n            int k = 3;\n            var result = Maximum(arr, k);\n            Console.WriteLine(string.Join(\",\", result));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/121", "language": "csharp", "completion": "return lst.Where((val, index) => val % 2 != 0 && index % 2 == 0).Sum();\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/122", "language": "csharp", "completion": "// Initialize the sum to 0\n    int sum = 0;\n\n    // Iterate through the first k elements of the array\n    for (int i = 0; i < k; i++)\n    {\n        // Check if the element has at most two digits\n        if (Math.Abs(arr[i]) >= 10 && Math.Abs(arr[i]) <= 99)\n            sum += arr[i]; // If it does, add it to the sum\n    }\n\n    return sum; // Return the sum\n}\n\n        public static void Main (string[] args) {\n           var testResult = Test();\n            Console.WriteLine(testResult ? \"All tests passed\" : \"Some tests failed\");\n\n            // Keep the console open if we are not running in a test environment\n            #if DEBUG\n            Console.ReadKey();\n            #endif\n        }\n\n       private static bool Test() {\n           var tests = new[] {\n                new { arr = new List<int> {111,21,3,4000,5,6,7,8,9}, k = 4, Expected = 24 },\n                // Add more test cases as needed\n            };\n           var comparer = new CompareLogic();\n           foreach (var test in tests) {\n               var result = AddElements(test.arr, test.k);\n               if (!comparer.Compare(result, test.Expected).AreEqual) {\n                   return false;\n               }\n           }\n           return true;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/123", "language": "csharp", "completion": "public static List<int> GetOddCollatz(int n)\n{\n    // Create an empty hash set to store the odd numbers. A HashSet is used because it automatically removes duplicates and provides fast lookup times.\n    var odds = new HashSet<int>();\n\n    // Add the starting number to the list if it's odd.\n    if (n % 2 != 0)\n        odds.Add(n);\n\n    // Continue generating Collatz sequence numbers until we reach 1.\n    while (n != 1)\n    {\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n\n        // Add the number to the list if it's odd.\n        if (n % 2 != 0)\n            odds.Add(n);\n    }\n\n    // Convert the hash set to a sorted list and return it.\n    return odds.OrderBy(x => x).ToList();\n}"}
{"task_id": "HumanEval_csharp/124", "language": "csharp", "completion": "if(String.IsNullOrEmpty(date)) return false; // Rule 1: Check if string is empty or null\n\n    var parts = date.Split('-'); // Split the date into month, day and year\n\n    if (parts.Length != 3 || !parts[0].All(Char.IsDigit) || !parts[1].All(Char.IsDigit) || !parts[2].All(Char.IsDigit)) // Rule 4: Check if date is in the format mm-dd-yyyy\n        return false;\n\n    int month = Int32.Parse(parts[0]);\n    int day = Int32.Parse(parts[1]);\n    int year = Int32.Parse(parts[2]);\n\n    if (month < 1 || month > 12) // Rule 3: Check if month is less than 1 or higher than 12\n        return false;\n\n    if ((new[] {4,6,9,11}.Contains(month) && day < 1 || day > 30)   // Rule 2 for months with 30 days\n         || (new[] {1,3,5,7,8,10,12}.Contains(month) && (day < 1 || day > 31)) // Rule 2 for months with 31 days\n         || (month == 2 && (!DateTime.IsLeapYear(year) ? day < 1 || day > 28 : day < 1 || day > 29))) // Rule 2 for February (considering leap years)\n        return false;\n\n    return true; // If all rules pass, return true\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/125", "language": "csharp", "completion": "if (String.IsNullOrEmpty(txt))\n    {\n      return null;\n    }\n\n    // Try to split on whitespace\n    var words = txt.Split(' ', StringSplitOptions.RemoveEmptyEntries);\n    if (words.Length > 1)\n    {\n      return words;\n    }\n\n    // If no whitespaces, try to split on commas\n    words = txt.Split(',', StringSplitOptions.RemoveEmptyEntries);\n    if (words.Length > 1)\n    {\n      return words;\n    }\n\n    // If no commas, count the number of lower-case letters with odd order in the alphabet\n    var count = txt.Where(c => Char.IsLower(c) && ((int) c - (int) 'a') % 2 != 0).Count();\n    return count;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/126", "language": "csharp", "completion": "return !lst.GroupBy(x => x).Any(g => g.Count() > 1) && Enumerable.SequenceEqual(lst, lst.OrderBy(x => x));\n    }\n}}"}
{"task_id": "HumanEval_csharp/127", "language": "csharp", "completion": "int start = Math.Max(interval1[0], interval2[0]);\n    int end = Math.Min(interval1[1], interval2[1]);\n\n    if (start > end)\n        return \"NO\"; // no intersection\n\n    int length = end - start;\n    bool isPrime = true;\n\n    if (length < 2)\n        isPrime = false;\n    else\n        for (int i = 2; i <= Math.Sqrt(length); i++)\n            if (length % i == 0)\n                isPrime = false;\n\n    return isPrime ? \"YES\" : \"NO\";\n}\n\npublic static void Main()\n{\n    Console.WriteLine(Intersection(new List<int> {1, 2}, new List<int> {2, 3})); // \"NO\"\n    Console.WriteLine(Intersection(new List<int> {-1, 1}, new List<int> {0, 4})); // \"NO\"\n    Console.WriteLine(Intersection(new List<int> {-3, -1}, new List<int> {-5, 5})); // \"YES\"\n}\n}"}
{"task_id": "HumanEval_csharp/128", "language": "csharp", "completion": "if (!arr.Any()) return null;\n\n    int product = 1;\n    int sum = 0;\n\n    foreach (var num in arr)\n    {\n        if (num > 0) product *= 1;\n        else if (num < 0) product *= -1;\n\n        sum += Math.Abs(num);\n    }\n\n    return sum * product;\n}\n\npublic static void Main()\n{\n    Console.WriteLine(ProdSigns(new List<int> { 1, 2, 2, -4 })); // -9\n    Console.WriteLine(ProdSigns(new List<int> { 0, 1 })); // 0\n    Console.WriteLine(ProdSigns(new List<int> { })); // null\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/129", "language": "csharp", "completion": "public class Solution\n{\n    private int[] _minPath;\n    private int _gridSize;\n\n    public List<int> MinPath(List<List<int>> grid, int k)\n    {\n        _gridSize = grid.Count;\n        _minPath = Enumerable.Repeat(int.MaxValue, k).ToArray();\n\n        for (var i = 0; i < _gridSize; ++i)\n        {\n            for (var j = 0; j < _gridSize; ++j)\n            {\n                var path = new int[k];\n                Dfs(grid, i, j, path, 0);\n            }\n        }\n\n        return _minPath.ToList();\n    }\n\n    private void Dfs(List<List<int>> grid, int row, int col, int[] path, int pathLength)\n    {\n        if (pathLength == path.Length)\n        {\n            UpdateMinPath(path);\n            return;\n        }\n\n        var directions = new[] { (1, 0), (-1, 0), (0, 1), (0, -1) };\n        foreach (var direction in directions)\n        {\n            var newRow = row + direction.Item1;\n            var newCol = col + direction.Item2;\n\n            if (newRow < 0 || newRow >= _gridSize || newCol < 0 || newCol >= _gridSize) continue;\n\n            path[pathLength] = grid[newRow][newCol];\n            Dfs(grid, newRow, newCol, path, pathLength + 1);\n        }\n    }\n\n    private void UpdateMinPath(int[] currentPath)\n    {\n        for (var i = 0; i < _minPath.Length; ++i)\n        {\n            if (_minPath[i] == currentPath[i]) continue;\n\n            if (_minPath[i] > currentPath[i])\n                Array.Copy(currentPath, _minPath, _minPath.Length);\n\n            break;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/130", "language": "csharp", "completion": "if (n == 0)\n    return new List<object> { 1 };\nelse if (n == 1)\n    return new List<object> { 1, 3 };\nelse\n{\n    var sequence = new List<object> { 1, 3, 2 };\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            sequence.Add(3);\n        else\n        {\n            int value = ((int)sequence[i - 1]) + ((int)sequence[i - 2]) + ((int)sequence[i - 3]);\n            sequence.Add(value);\n        }\n    }\n    return sequence;\n}\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(string.Join(\",\", Tri(10)));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/131", "language": "csharp", "completion": "if (n == 0) return 0;\n\n    var product = 1;\n    var hasOddDigit = false;\n\n    while(n > 0)\n    {\n        var digit = n % 10;\n        if(digit % 2 != 0)\n        {\n            product *= digit;\n            hasOddDigit = true;\n        }\n        n /= 10;\n    }\n\n    return hasOddDigit ? product : 0;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/132", "language": "csharp", "completion": "int openBrackets = 0;\n   for(int i=0; i<string0.Length; i++)\n   {\n       if(string0[i] == '[')\n           openBrackets++;\n       else if(string0[i] == ']' && openBrackets > 1)\n           return true;\n       else if(string0[i] == ']')\n           openBrackets--;\n   }\n   return false;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(IsNested(\"[[]]\"));\n            Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\"));\n            Console.WriteLine(IsNested(\"[][]\"));\n            Console.WriteLine(IsNested(\"[]\"));\n            Console.WriteLine(IsNested(\"[[][]]\"));\n            Console.WriteLine(IsNested(\"[[]][[\"));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/133", "language": "csharp", "completion": "if(lst == null || !lst.Any()) return 0;\n\n    var roundedNumbers = lst.Select(item => Convert.ToInt32(Math.Ceiling(Convert.ToDouble(item)))).ToList();\n    return roundedNumbers.Aggregate(0, (sum, number) => sum + number * number);\n}\n\n        public static void Main()\n        {\n            Test(new List<object>(){1,2,3}, 14);\n            Test(new List<object>(){1,4,9}, 98);\n            Test(new List<object>(){1,3,5,7}, 84);\n            Test(new List<object>(){1.4,4.2,0}, 29);\n            Test(new List<object>(){-2.4,1,1}, 6);\n        }\n\n        public static void Test(List<object> input, int expected)\n        {\n            var actual = SumSquares(input);\n            Console.WriteLine($\"SumSquares({string.Join(\", \", input)}) = {actual}; Expected: {expected}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/134", "language": "csharp", "completion": "if (string.IsNullOrWhiteSpace(txt))\n            return false;\n\n        string lastChar = txt.TrimEnd().Substring(txt.TrimEnd().Length - 1);\n\n        // Check if the last character is a letter and not part of a word\n        return char.IsLetter(lastChar[0]) && !char.IsLetterOrDigit(txt[txt.Length - 2]);\n    }\n}"}
{"task_id": "HumanEval_csharp/135", "language": "csharp", "completion": "if (arr.Count < 2)\n    return -1;\n\nfor (int i = arr.Count - 1; i > 0; i--)\n{\n    if (arr[i] < arr[i - 1])\n    {\n        return i;\n    }\n}\n\nreturn -1;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/136", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static List<int?> LargestSmallestIntegers(List<int> lst)\n{\n    var negativeNumbers = lst.Where(num => num < 0).ToList();\n    var positiveNumbers = lst.Where(num => num > 0).ToList();\n\n    int? largestNegative = null;\n    if (negativeNumbers.Any())\n        largestNegative = negativeNumbers.Max();\n\n    int? smallestPositive = null;\n    if (positiveNumbers.Any())\n        smallestPositive = positiveNumbers.Min();\n\n    return new List<int?> { largestNegative, smallestPositive };\n}"}
{"task_id": "HumanEval_csharp/137", "language": "csharp", "completion": "// First we check if the inputs are valid numbers. If not, we return null\n    double numA, numB;\n    bool isANumber = Double.TryParse(a.ToString(), out numA);\n    bool isBNumber = Double.TryParse(b.ToString(), out numB);\n    if (!isANumber || !isBNumber) {\n        return null;\n    }\n\n    // If the numbers are equal, we return None\n    if (numA == numB) {\n        return \"None\";\n    }\n\n    // Otherwise, we return the larger number in its original variable type.\n    return (numA > numB) ? a : b;\n}\n    }"}
{"task_id": "HumanEval_csharp/138", "language": "csharp", "completion": "// Check if the input number is greater than or equal to 12 and even\n    return n >= 12 && n % 2 == 0;\n}\n\n        // Test the function with some examples\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsEqualToSumEven(4));  // Output: False\n            Console.WriteLine(IsEqualToSumEven(6));  // Output: False\n            Console.WriteLine(IsEqualToSumEven(8));  // Output: True\n            Console.WriteLine(IsEqualToSumEven(12)); // Output: True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/139", "language": "csharp", "completion": "if(n < 0)\n      throw new ArgumentOutOfRangeException(\"n must be greater than or equal to zero\");\n\n    int result = 1;\n    for(int i = n; i > 0; i--)\n    {\n        int factorial = 1;\n        for(int j = i; j > 0; j--)\n            factorial *= j;\n\n        result *= factorial;\n    }\n    return result;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/140", "language": "csharp", "completion": "if(String.IsNullOrEmpty(text)) return \"\";\n\n   var result = Regex.Replace(text, @\"\\s+\", m => m.Length > 2 ? \"-\" : \"_\");\n   if(result[0] == '_' && text[0] == ' ') result = $\"_{result.Substring(1)}\";\n\n   return result;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/141", "language": "csharp", "completion": "if (!Regex.IsMatch(file_name, @\"^[a-zA-Z][\\w]{0,2}\\.\\w+$\")) return \"No\";\n    if (!Regex.IsMatch(file_name, @\"\\d{1,3}\")) return \"No\";\n    var parts = file_name.Split('.');\n    if (parts.Length != 2 || !new[] { \"txt\", \"exe\", \"dll\" }.Contains(parts[1])) return \"No\";\n    return \"Yes\";\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(FileNameCheck(\"example.txt\")); // => 'Yes'\n            Console.WriteLine(FileNameCheck(\"1example.dll\")); // => 'No' (the name should start with a latin alphapet letter)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/142", "language": "csharp", "completion": "if(lst == null || lst.Count == 0) return 0;\n   int sum = 0;\n   foreach (int num in lst){\n       sum += num * num;\n   }\n   return sum;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/143", "language": "csharp", "completion": "var words = sentence.Split(' ');\n    var primes = new HashSet<int>() { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n    var primeWords = words.Where(w => primes.Contains(w.Length));\n    return string.Join(\" \", primeWords);\n}\n    }"}
{"task_id": "HumanEval_csharp/144", "language": "csharp", "completion": "var numDenX = x.Split('/').Select(int.Parse).ToArray();\n    var numDenN = n.Split('/').Select(int.Parse).ToArray();\n\n    int numeratorResult = numDenX[0] * numDenN[0];\n    int denominatorResult = numDenX[1] * numDenN[1];\n\n    return (numeratorResult % denominatorResult == 0) || (denominatorResult % numeratorResult == 0);\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/145", "language": "csharp", "completion": "var tupleList = new List<Tuple<int, int, int>>();\n\n    for(var i = 0; i < nums.Count; i++)\n    {\n        var sumOfDigits = nums[i].ToString().Select(digit => (int)Char.GetNumericValue(digit)).Sum();\n        tupleList.Add(new Tuple<int, int, int>(nums[i], sumOfDigits, i));\n    }\n\n    return tupleList\n               .OrderBy(tuple => tuple.Item2) // Sort by the sum of digits (ascending).\n               .ThenBy(tuple => tuple.Item3)  // Then by original index if sums are equal (stable sort).\n               .Select(tuple => tuple.Item1)  // Extract the numbers from tuples to a list.\n               .ToList();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/146", "language": "csharp", "completion": "// Create a new instance of CompareLogic to configure comparison options\n    CompareLogic compareLogic = new CompareLogic();\n    // Set the MaxDifferences property to a large number to ensure all differences are logged\n    compareLogic.MaxDifferences = int.MaxValue;\n\n    // Initialize a counter for the numbers that meet the criteria\n    int count = 0;\n\n    // Iterate through each number in the input list\n    foreach (int num in nums)\n    {\n        // Check if the number is greater than 10 and both its first and last digits are odd\n        if (num > 10 && IsOdd(GetFirstDigit(num)) && IsOdd(GetLastDigit(num)))\n        {\n            // If the number meets the criteria, increment the counter\n            count++;\n        }\n    }\n\n    // Return the final count of numbers that meet the criteria\n    return count;\n}\n\n// Helper function to check if a number is odd\nprivate static bool IsOdd(int num)\n{\n    // A number is odd if it is not divisible by 2\n    return num % 2 != 0;\n}\n\n// Helper function to get the first digit of a number\nprivate static int GetFirstDigit(int num)\n{\n    // Convert the number to an absolute value and then to a string\n    string numStr = Math.Abs(num).ToString();\n    // Return the first character of the string as an integer\n    return int.Parse(numStr[0].ToString());\n}\n\n// Helper function to get the last digit of a number\nprivate static int GetLastDigit(int num)\n{\n    // Convert the number to an absolute value and then to a string\n    string numStr = Math.Abs(num).ToString();\n    // Return the last character of the string as an integer\n    return int.Parse(numStr[numStr.Length - 1].ToString());\n}\n        public static void Main()\n        {\n            List<int> inputList = new List<int> { 33, -2, -3, 45, 21, 109 };\n            int result = SpecialFilter(inputList);\n            Console.WriteLine($\"The number of elements that meet the criteria is: {result}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/147", "language": "csharp", "completion": "// Create the array a as described in the problem\n   var a = Enumerable.Range(1, n).Select(i => i * i - i + 1).ToArray();\n\n   // Initialize a counter for triples that satisfy the condition\n   int count = 0;\n\n   // Iterate through all possible triples (a[i], a[j], a[k]) where i < j < k\n   for (int i = 0; i < n - 2; i++)\n       for (int j = i + 1; j < n - 1; j++)\n           for (int k = j + 1; k < n; k++)\n               // Check if the sum of the triple is a multiple of 3\n               if ((a[i] + a[j] + a[k]) % 3 == 0)\n                   count++;\n\n   // Return the number of triples that satisfy the condition\n   return count;\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/148", "language": "csharp", "completion": "List<string> planets = new List<string> {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n    if (!planets.Contains(planet1) || !planets.Contains(planet2))\n        return new List<string>();\n\n    int index1 = planets.IndexOf(planet1);\n    int index2 = planets.IndexOf(planet2);\n\n    if (index1 < index2)\n        return planets.GetRange(index1 + 1, index2 - index1 - 1);\n    else\n        return planets.GetRange(index2 + 1, index1 - index2 - 1);\n}\n\n        public static void Main()\n        {\n            var results = new List<List<string>>();\n\n            results.Add(Bf(\"Jupiter\", \"Neptune\")); // ==> (\"Saturn\", \"Uranus\")\n            results.Add(Bf(\"Earth\", \"Mercury\"));   // ==> (\"Venus\")\n            results.Add(Bf(\"Mercury\", \"Uranus\"));  // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n            results.Add(Bf(\"Mars\", \"Jupiter\"));    // ==> ()\n            results.Add(Bf(\"Jupiter\", \"Mars\"));    // ==> ()\n            results.Add(Bf(\"Earth\", \"Pluto\"));     // ==> ()\n\n            var expected = new List<List<string>>()\n            {\n                new List<string>() {\"Saturn\", \"Uranus\"},\n                new List<string>() {\"Venus\"},\n                new List<string>() {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"},\n                new List<string>(),\n                new List<string>(),\n                new List<string>()\n            };\n\n            var compareLogic = new CompareLogic();\n            var comparisonResult = compareLogic.Compare(results, expected);\n            Console.WriteLine(comparisonResult.AreEqual ? \"OK\" : \"NOT OK\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/149", "language": "csharp", "completion": "// filter out strings with odd length, then sort by length and alphabetically if needed.\n    return lst.Where(s => s.Length % 2 == 0)\n              .OrderBy(s => s.Length)\n              .ThenBy(s => s)\n              .ToList();\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/150", "language": "csharp", "completion": "bool isPrime = true;\n    if (n < 2)\n    {\n        isPrime = false;\n    }\n    else\n    {\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n            {\n                isPrime = false;\n                break;\n            }\n        }\n    }\n\n    return isPrime ? x : y;\n}\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(XOrY(7, 34, 12)); // should print 34\n            Console.WriteLine(XOrY(15, 8, 5)); // should print 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/151", "language": "csharp", "completion": "var sum = 0;\n    foreach (var item in lst)\n    {\n        if (item is int && (int)item > 0 && (int)item % 2 != 0)\n            sum += ((int)item * (int)item);\n    }\n    return sum;\n}\n\npublic static void Main(string[] args)\n{\n    Console.WriteLine(DoubleTheDifference(new List<object> {1, 3, 2, 0})); // should print 10\n    Console.WriteLine(DoubleTheDifference(new List<object> {-1, -2, 0})); // should print 0\n    Console.WriteLine(DoubleTheDifference(new List<object> {9, -2}));     // should print 81\n    Console.WriteLine(DoubleTheDifference(new List<object> {0}));         // should print 0\n    Console.ReadKey();\n}\n}"}
{"task_id": "HumanEval_csharp/152", "language": "csharp", "completion": "List<int> differences = new List<int>();\n    for(int i=0; i < game.Count; i++){\n      int difference = Math.Abs(game[i] - guess[i]);\n      differences.Add(difference);\n    }\n    return differences;\n}\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World\");\n            var result1 = Compare(new List<int>(){ 1,2,3,4,5,1 }, new List<int>() { 1,2,3,4,2,-2 });\n            Console.WriteLine(\"[0,0,0,0,3,3] \" + (result1.SequenceEqual(new int[] { 0,0,0,0,3,3 }) ? \"true\" : \"false\"));\n            var result2 = Compare(new List<int>(){ 0,5,0,0,0,4 }, new List<int>() { 4,1,1,0,0,-2 });\n            Console.WriteLine(\"[4,4,1,0,0,6] \" + (result2.SequenceEqual(new int[] { 4,4,1,0,0,6 }) ? \"true\" : \"false\"));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/153", "language": "csharp", "completion": "int maxStrength = int.MinValue;\n    string strongestExtension = \"\";\n\n    foreach (var extension in extensions)\n    {\n        int cap = Regex.Matches(extension, \"[A-Z]\").Count;\n        int sm = Regex.Matches(extension, \"[a-z]\").Count;\n        int strength = cap - sm;\n\n        if (strength > maxStrength)\n        {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return $\"{class_name}.{strongestExtension}\";\n}\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Slices.SErviNGSliCes\n            Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // my_class.AA\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/154", "language": "csharp", "completion": "public static bool CycPatternCheck(string a, string b)\n{\n    if (a.Length < b.Length)\n        return false;\n\n    for (int i = 0; i < b.Length; i++)\n    {\n        // Rotate the string `b` by `i` positions to the left\n        string rotatedB = b.Substring(i) + b.Substring(0, i);\n\n        if (a.Contains(rotatedB))\n            return true;\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/155", "language": "csharp", "completion": "int evenCount = 0;\n    int oddCount = 0;\n\n    // Convert the integer to a string for easier digit manipulation\n    string numString = Math.Abs(num).ToString();\n\n    foreach (char c in numString)\n    {\n        int digit = int.Parse(c.ToString());\n\n        if (digit % 2 == 0)\n            evenCount++;\n        else\n            oddCount++;\n    }\n\n    return new List<int> {evenCount, oddCount};\n}\n\npublic static void Main()\n{\n    Console.WriteLine(string.Join(\", \", EvenOddCount(-12))); // prints \"1, 1\"\n    Console.WriteLine(string.Join(\", \", EvenOddCount(123))); // prints \"1, 2\"\n}\n    }\n}"}
{"task_id": "HumanEval_csharp/156", "language": "csharp", "completion": "var romanNumerals = new Dictionary<int, string>()\n        {\n            {1000, \"m\"},\n            {900, \"cm\"},\n            {500, \"d\"},\n            {400, \"cd\"},\n            {100, \"c\"},\n            {90, \"xc\"},\n            {50, \"l\"},\n            {40, \"xl\"},\n            {10, \"x\"},\n            {9, \"ix\"},\n            {5, \"v\"},\n            {4, \"iv\"},\n            {1, \"i\"}\n        };\n\n        var romanNumber = new StringBuilder();\n\n        foreach (var pair in romanNumerals.OrderByDescending(p => p.Key))\n        {\n            while (number >= pair.Key)\n            {\n                number -= pair.Key;\n                romanNumber.Append(pair.Value);\n            }\n        }\n\n        return romanNumber.ToString();\n    }\n}"}
{"task_id": "HumanEval_csharp/157", "language": "csharp", "completion": "// Sort the sides in ascending order to make it easier to check for the Pythagorean theorem\n    var sortedSides = new[] {a, b, c}.OrderBy(x => x).ToArray();\n\n    // Check if the triangle satisfies the Pythagorean theorem (c^2 = a^2 + b^2)\n    return Math.Pow(sortedSides[2], 2) == Math.Pow(sortedSides[0], 2) + Math.Pow(sortedSides[1], 2);\n}\n        public static void Main()\n        {\n            Console.WriteLine(RightAngleTriangle(3,4,5)); //True\n            Console.WriteLine(RightAngleTriangle(1,2,3)); //False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/158", "language": "csharp", "completion": "return words.OrderByDescending(word => word.Distinct().Count())\n                      .ThenBy(word => word)\n                      .FirstOrDefault();\n    }\n\n    // Test the function with the provided examples and some additional ones\n    public static void Main()\n    {\n        CompareLogic compareLogic = new CompareLogic();\n        var testCases = new Dictionary<List<string>, string>\n        {\n            { new List<string>{ \"name\", \"of\", \"string\" }, \"string\" },\n            { new List<string>{ \"name\", \"enam\", \"game\" }, \"enam\" },\n            { new List<string>{ \"aaaaaaa\", \"bb\", \"cc\" }, \"aaaaaaa\" },\n            // Add additional test cases if needed\n        };\n\n        foreach (var testCase in testCases)\n        {\n            var result = FindMax(testCase.Key);\n            Console.WriteLine($\"FindMax({FormatList(testCase.Key)}) == \\\"{result}\\\": {result == testCase.Value}\");\n        }\n    }\n\n    // Helper function to format a list of strings for output\n    private static string FormatList(IEnumerable<string> list) => \"[\" + string.Join(\", \", list.Select(s => $\"\\\"{s}\\\"\")) + \"]\";\n}\n}"}
{"task_id": "HumanEval_csharp/159", "language": "csharp", "completion": "List<int> result = new List<int>();\n\n    if(remaining >= need){\n      result.Add(number + need); // total carrots eaten after meals\n      result.Add(remaining - need); // carrots left after meals\n    }else{\n      result.Add(number + remaining); // total carrots eaten after eating all remaining carrots\n      result.Add(0); // no carrots left as all have been consumed\n    }\n\n    return result;\n}\n\n        public static void Main() {\n            var result = Eat(5, 6, 10);\n            Console.WriteLine(\"Eat(5, 6, 10)\");\n            Console.WriteLine($\"Result: {string.Join(\", \", result)}\");\n            Console.WriteLine();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/160", "language": "csharp", "completion": "// Combine the operators and operands into a single string representing the algebraic expression\n    string expr = string.Join(\"\", operand.Zip(operator, (a, b) => a + b)) + operand.Last();\n\n    // Evaluate the expression using the DataTable Compute method\n    var dt = new System.Data.DataTable();\n    return Convert.ToInt32(dt.Compute(expr, \"\"));\n}"}
{"task_id": "HumanEval_csharp/161", "language": "csharp", "completion": "if (!s.Any(char.IsLetter))\n            return new string(s.Reverse().ToArray());\n\n        char[] chars = s.ToCharArray();\n        for (int i = 0; i < chars.Length; i++)\n        {\n            if (char.IsLetter(chars[i]))\n                chars[i] = char.IsLower(chars[i]) ? char.ToUpper(chars[i]) : char.ToLower(chars[i]);\n        }\n\n        return new string(chars);\n    }\n}"}
{"task_id": "HumanEval_csharp/162", "language": "csharp", "completion": "if(string.IsNullOrEmpty(text)) return null;\n\n    using (var md5 = System.Security.Cryptography.MD5.Create())\n    {\n        var inputBytes = System.Text.Encoding.ASCII.GetBytes(text);\n        var hashBytes = md5.ComputeHash(inputBytes);\n\n        return BitConverter.ToString(hashBytes).Replace(\"-\", \"\").ToLower();\n    }\n}\n\n}"}
{"task_id": "HumanEval_csharp/163", "language": "csharp", "completion": "var start = Math.Min(a, b);\n    var end = Math.Max(a, b);\n\n    var result = new List<int>();\n    for (var i = start; i <= end; i++)\n    {\n        if (i % 2 == 0)\n            result.Add(i);\n    }\n\n    return result;\n}\n\n        public static void Main()\n        {\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(2, 8)));\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(8, 2)));\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(10, 14)));\n        }\n    }\n}"}

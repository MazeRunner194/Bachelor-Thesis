{"task_id": "HumanEval_java/0", "language": "java", "completion": "// Sort the list of numbers in ascending order\n    Collections.sort(numbers);\n\n    // Iterate through the sorted list\n    for (int i = 1; i < numbers.size(); i++) {\n        // Check if the difference between the current number and the previous number is less than or equal to the threshold\n        if (numbers.get(i) - numbers.get(i - 1) <= threshold) {\n            return true;\n        }\n    }\n\n    // If no close elements are found, return false\n    return false;\n}\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        Double threshold = 0.3;\n\n        Boolean result = hasCloseElements(numbers, threshold);\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "List<String> result = new ArrayList<>();\n        int openCount = 0;\n        int startIndex = 0;\n\n        for (int i = 0; i < parenString.length(); i++) {\n            char c = parenString.charAt(i);\n            if (c == '(') {\n                openCount++;\n            } else if (c == ')') {\n                openCount--;\n            }\n\n            if (openCount == 0) {\n                result.add(parenString.substring(startIndex, i + 1));\n                startIndex = i + 1;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> separatedGroups = separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(separatedGroups); // Output: [(), (()), (()())]\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "int balance = 0;\n        for (Object op : operations) {\n            if (op instanceof Integer) {\n                balance += (Integer) op;\n            } else if (op instanceof Double) {\n                balance += (Double) op;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        double madSum = 0;\n        for (double num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        return madSum / numbers.size();\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "if (numbers.isEmpty()){\n      return Collections.emptyList();\n    } else {\n      List <Object> result = new ArrayList<>();\n      for (int i=0; i<numbers.size()-1; i++){\n        result.add(numbers.get(i));\n        result.add(delimeter);\n      }\n      result.add(numbers.get(numbers.size()-1));\n      return result;\n    }\n  }\n}\n\n\n+++++ Python/Python_Array_Manipulation.py\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import defaultdict\n\n# Complete the arrayManipulation function below.\ndef arrayManipulation(n, queries):\n    d = defaultdict(int)\n    for a, b, k in queries:\n        d[a] += k\n        if b + 1 <= n:\n            d[b + 1] -= k\n\n    arr_sum = max_sum = 0\n    for i in sorted(d):\n        arr_sum += d[i]\n        max_sum = max(max_sum, arr_sum)\n    return max_sum\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    queries = []\n\n    for _ in range(m):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = arrayManipulation(n, queries)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (int i = 0; i < parenString.length(); i++) {\n            char c = parenString.charAt(i);\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ' && currentDepth == 0) {\n                result.add(maxDepth);\n                maxDepth = 0;\n            }\n        }\n\n        // Add the last group's maximum depth to the result list\n        if (currentDepth == 0 && maxDepth > 0) {\n            result.add(maxDepth);\n        } else if (currentDepth != 0) {\n            throw new IllegalArgumentException(\"Invalid input: unbalanced parentheses\");\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        String parenString = \"(()()) ((())) () ((())()())\";\n        List<Integer> maxDepths = parseNestedParens(parenString);\n        System.out.println(maxDepths);  // Output: [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "if (strings == null || substring == null || substring.isEmpty()) {\n      return new ArrayList<>();\n    }\n\n    List<Object> result = new ArrayList<>();\n    for (Object str : strings) {\n      if (str instanceof String && ((String) str).contains(substring)) {\n        result.add(str);\n      }\n    }\n\n    return result;\n  }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "// Your code here!\n        int sum = 0;\n        BigInteger product = BigInteger.ONE;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum += (int) number;\n                product = product.multiply(BigInteger.valueOf((int) number));\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product.intValue());\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "// your code goes here\n\n      Deque<Integer> deque = new LinkedList<>();\n      ArrayList<Integer> res = new ArrayList<>();\n\n      for (int i = 0; i < numbers.size(); i++) {\n          int currentNum = (int)numbers.get(i);\n          while (!deque.isEmpty() && currentNum > deque.peekLast()) {\n              deque.pollLast();\n          }\n          deque.offerLast(currentNum);\n          if (i == 0 || deque.peekFirst() != res.get(res.size() - 1)) {\n              res.add(deque.peekFirst());\n          }\n      }\n      return new ArrayList<>(res);\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "// Base case: if the input string is empty, return an empty string.\n    if (string.isEmpty()) {\n        return \"\";\n    }\n\n    // Find the longest palindromic suffix of the input string.\n    int end = string.length() - 1;\n    while (end >= 0) {\n        String substring = string.substring(0, end + 1);\n        if (isPalindrome(substring)) {\n            break;\n        }\n        end--;\n    }\n\n    // The remaining prefix of the input string needs to be reversed and appended to make a palindrome.\n    String prefix = string.substring(end + 1);\n    String reversePrefix = new StringBuilder(prefix).reverse().toString();\n\n    return string + reversePrefix;\n}\n\n    // Helper function to check if a given string is a palindrome.\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if ((a.charAt(i) == '1' && b.charAt(i) == '0') ||\n                (a.charAt(i) == '0' && b.charAt(i) == '1')) {\n                sb.append('1');\n            } else {\n                sb.append('0');\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "if (strings.isEmpty()){\n        return null;\n      }else{\n      int maxLength = ((String)strings.get(0)).length();\n      String longestString = (String)strings.get(0);\n      for (int i = 1; i < strings.size(); i++) {\n          if (((String)strings.get(i)).length() > maxLength){\n            maxLength = ((String)strings.get(i)).length();\n            longestString = (String)strings.get(i);\n          }\n      }\n    return longestString;\n   }}\n\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "if (b == 0){\n      return a;\n    } else{\n      return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "return null; // remove this line\n}\n\npublic static void main (String[] args) throws IOException{\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    String line = \"\";\n    while((line = br.readLine()) != null){\n        List<Object> res = allPrefixes(line);\n        System.out.println(res.size());\n        for (Object s : res) {\n            if (s instanceof Character)\n                System.out.print(((Character)s).charValue() + \" \");\n            else\n                System.out.print((String)s + \" \");\n        }\n        System.out.println();\n    }\n}\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "// Your code goes here.\n        if (n < 0) return \"Invalid input\";\n\n        StringBuilder result = new StringBuilder();\n        for (int i=0; i<=n; i++) {\n            result.append(i);\n            if (i != n) result.append(\" \");\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = Character.toLowerCase(string.charAt(i));\n            if (!set.contains(c)) {\n                set.add(c);\n            }\n        }\n        return set.size();\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "// your implementation here\n    ArrayList<Object> list = new ArrayList<>();\n        for (int i=0;i<=musicString.length()-1;){\n            if (musicString.charAt(i)=='o'){\n                if (i+2 <= musicString.length() && musicString.charAt(i+2) == '|') {\n                    list.add(2);\n                    i+=3;\n                } else {\n                    list.add(4);\n                    i++;\n                }\n            } else if (musicString.charAt(i)=='.'){\n                list.add(1);\n                i+=2;\n            }\n        }\n\n        return list;\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "if (string.length() < substring.length()) return 0;\n    int count = 0;\n    for (int i=0; i<=string.length()-substring.length(); i++) {\n        boolean matchFound = true;\n        for (int j=0; j<substring.length(); j++){\n            if (string.charAt(i+j) != substring.charAt(j)) {\n                matchFound = false;\n                break;\n            }\n        }\n        if (matchFound) count++;\n    }\n    return count;\n}\n\npublic static void main(String[] args){\n   System.out.println(howManyTimes(\"\", \"a\")); // output: 0\n   System.out.println(howManyTimes(\"aaa\", \"a\")); // output: 3\n   System.out.println(howManyTimes(\"aaaa\", \"aa\")); // output: 3\n}\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "// Write your code here.\n\n    if (numbers == null || numbers.isEmpty()) {\n        return numbers;\n    }\n\n    String[] numArray = numbers.split(\" \");\n    int[] intArray = new int[numArray.length];\n\n    for (int i = 0; i < numArray.length; i++) {\n        switch(numArray[i]) {\n            case \"zero\":\n                intArray[i] = 0;\n                break;\n            case \"one\":\n                intArray[i] = 1;\n                break;\n            case \"two\":\n                intArray[i] = 2;\n                break;\n            case \"three\":\n                intArray[i] = 3;\n                break;\n            case \"four\":\n                intArray[i] = 4;\n                break;\n            case \"five\":\n                intArray[i] = 5;\n                break;\n            case \"six\":\n                intArray[i] = 6;\n                break;\n            case \"seven\":\n                intArray[i] = 7;\n                break;\n            case \"eight\":\n                intArray[i] = 8;\n                break;\n            case \"nine\":\n                intArray[i] = 9;\n                break;\n        }\n    }\n\n    Arrays.sort(intArray);\n\n    String[] sortedNumArray = new String[numArray.length];\n\n    for (int i = 0; i < intArray.length; i++) {\n        switch(intArray[i]) {\n            case 0:\n                sortedNumArray[i] = \"zero\";\n                break;\n            case 1:\n                sortedNumArray[i] = \"one\";\n                break;\n            case 2:\n                sortedNumArray[i] = \"two\";\n                break;\n            case 3:\n                sortedNumArray[i] = \"three\";\n                break;\n            case 4:\n                sortedNumArray[i] = \"four\";\n                break;\n            case 5:\n                sortedNumArray[i] = \"five\";\n                break;\n            case 6:\n                sortedNumArray[i] = \"six\";\n                break;\n            case 7:\n                sortedNumArray[i] = \"seven\";\n                break;\n            case 8:\n                sortedNumArray[i] = \"eight\";\n                break;\n            case 9:\n                sortedNumArray[i] = \"nine\";\n                break;\n        }\n    }\n\n    return String.join(\" \", sortedNumArray);\n}\n\npublic static void main(String[] args) {\n    System.out.println(sortNumbers(\"three one five\")); // Expected: one three five\n}\n\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "// Sorting the array in ascending order to ensure that we get the smallest and largest number in sequence.\n        Collections.sort(numbers);\n\n        double min_diff = Double.MAX_VALUE;\n        int firstIndex = -1, secondIndex = -1;\n\n        for (int i=0; i<numbers.size()-1; i++) {\n            // Finding the difference between current number and next number.\n            double diff = Math.abs(numbers.get(i) - numbers.get(i+1));\n\n            // If this difference is less than min_diff, then updating min_diff and indexes of smallest and largest numbers.\n            if (diff < min_diff) {\n                min_diff = diff;\n                firstIndex = i;\n                secondIndex = i+1;\n            }\n        }\n\n        // Returning the pair with smallest difference.\n        return Arrays.asList(numbers.get(firstIndex), numbers.get(secondIndex));\n    }\n\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "// Find the min and max values of the list\n        Double min = Collections.min(numbers);\n        Double max = Collections.max(numbers);\n\n        // Create a new list to hold the rescaled values\n        List<Double> rescaledNumbers = new ArrayList<>();\n\n        // Apply the linear transform to each number in the list\n        for (Double num : numbers) {\n            Double rescaledNum = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledNum);\n        }\n\n        return rescaledNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "// Your code goes here...\n        List<Object> integerValues = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integerValues.add(value);\n            }\n        }\n        return integerValues;\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "if (string == null || string.isEmpty()) {\n            return 0;\n        }\n\n        char[] chars = string.toCharArray();\n        int length = 0;\n\n        for (char c : chars) {\n            length++;\n        }\n\n        return length;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(strlen(\"\"));   // Output: 0\n        System.out.println(strlen(\"abc\")); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // if no divisor is found, return -1 or any appropriate value\n    }\n\n    public static void main(String[] args) {\n        int n = 15;\n        System.out.println(largestDivisor(n));\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "ArrayList<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorize(8)); // [2, 2, 2]\n        System.out.println(factorize(25)); // [5, 5]\n        System.out.println(factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "HashSet<Object> set = new HashSet<>();\n\n        ArrayList<Object> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!set.contains(numbers.get(i))) {\n                set.add(numbers.get(i));\n                result.add(numbers.get(i));\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "StringBuilder flipped = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flipped.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n            } else {\n                flipped.append(c);\n            }\n        }\n\n        return flipped.toString();\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n    for (Object obj : strings) {\n        if (obj instanceof String) {\n            sb.append((String) obj);\n        } else if (obj instanceof List) {\n            // If the object is a list, recursively call concatenate on it\n            sb.append(concatenate((List<Object>) obj));\n        }\n    }\n    return sb.toString();\n}\n\npublic static void main(String[] args) {\n    List<Object> input = new ArrayList<>();\n    input.add(\"a\");\n    input.add(\"b\");\n    input.add(\"c\");\n    System.out.println(concatenate(input));  // Outputs: \"abc\"\n}\n\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "// YOUR CODE HERE\n        ArrayList<Object> filteredStrings = new ArrayList<>();\n        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).toString().startsWith(prefix)) {\n                filteredStrings.add(strings.get(i));\n            }\n        }\n        return filteredStrings;\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "ArrayList<Object> positiveNumbers = new ArrayList<>();\n\n        for (Object num : l) {\n            if (num instanceof Integer && (Integer) num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n\n        return positiveNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int number = 61; // change this to test other numbers\n        boolean isPrimeNumber = isPrime(number);\n        System.out.println(\"Is \" + number + \" prime? \" + isPrimeNumber);\n    }\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "List<Integer> thirdElements = new ArrayList<>();\n        for (int i = 2; i < l.size(); i += 3) {\n            thirdElements.add(l.get(i));\n        }\n        Collections.sort(thirdElements);\n        int index = 0;\n        for (int i = 2; i < l.size(); i += 3) {\n            l.set(i, thirdElements.get(index++));\n        }\n        return l;\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new TreeSet<>();\n\n        for (int num : l) {\n            if (!set.contains(num)) {\n                set.add(num);\n                result.add(num);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "if (l.isEmpty()) {\n            throw new IllegalArgumentException(\"The list is empty.\");\n        }\n\n        int max = l.get(0); // initialize max with the first element of the list\n\n        for (int num : l) {\n            if (num > max) {\n                max = num; // update max if a larger number is found\n            }\n        }\n\n        return max;\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "// your code goes here\n        int count = 0;\n        for (int i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "// Firstly we create a list to store the even numbers in the given array list\n        List<Integer> evenNumbers = new ArrayList<>();\n\n        // We loop through each index of the input list starting from the second position (index 1) since we are interested in even indices.\n        for(int i=1; i<l.size(); i+=2){\n            evenNumbers.add(l.get(i)); // If the current number is at an even index, it is added to our list of even numbers.\n        }\n\n        // We sort the even numbers in ascending order.\n        Collections.sort(evenNumbers);\n\n        int index = 0; // This will keep track of which even number we are currently assigning to the original array.\n\n        for(int i=1; i<l.size(); i+=2){\n            l.set(i, evenNumbers.get(index)); // Here we replace each even-indexed element in our input list with a sorted even number from our list.\n            index++;  // After we use an even number once, we move on to the next one in our sorted list of even numbers.\n        }\n\n        return l; // We finally return the modified list where even indices contain sorted even numbers.\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "class PrimeFib {\n    public static boolean isPrime(long num){\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n\n        long sqrt = (long) Math.sqrt(num);\n        for (long i = 3; i <= sqrt; i += 2){\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static int primeFib(int n) {\n        long a = 0, b = 1;\n        while(n > 0){\n            long temp = a + b;\n            a = b;\n            b = temp;\n\n            if(isPrime(b)) {\n                n--;\n            }\n        }\n        return (int)a;\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\npublic class TriplesSumToZero {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n             // Skip same element to find the next distinct element\n            if (i > 0 && l.get(i) == l.get(i - 1)) continue;\n\n            int left = i + 1, right = l.size() - 1;\n            while (left < right) {\n                if (l.get(left) + l.get(right) == -l.get(i)) return true;\n                else if (l.get(left) + l.get(right) > -l.get(i)) right--;\n                else left++;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "return (n*(n-1));\n}\n\npublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n\twhile(sc.hasNext()) {\n\t    int n = sc.nextInt();\n\t    System.out.println(\"Number of collisions: \" + carRaceCollision(n));\n\t}\n}\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "}\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "if (l.size() < 2) {\n            return false; // If the list has less than two elements, it's impossible to have a pair summing to zero\n        }\n\n        Set<Integer> seen = new HashSet<>();\n\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true; // Found a pair that sums to zero\n            } else {\n                seen.add(num); // Add the current number to the set of seen numbers\n            }\n        }\n\n        return false; // No pair was found that sums to zero\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "if (x == 0) {\n            return \"0\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int rem = x % base;\n            x /= base;\n            sb.insert(0, rem);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "return (double)(a*h)/2;\n}\npublic static void main(String[] args){\nSystem.out.println(\"Enter the base of the triangle:\");\nScanner sc=new Scanner(System.in);\nint a =sc.nextInt();\nSystem.out.println(\"Enter the height of the triangle:\");\nint h=sc.nextInt();\nDouble result=triangleArea(a,h);\nSystem.out.println(\"The area of the triangle is:\"+result);\n}\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "if (n == 0 || n == 1){\n            return 0;\n        } else if (n == 2){\n            return 2;\n        } else if (n == 3){\n            return 0;\n        } else {\n            int[] arr = new int[n+1];\n            arr[0] = 0;\n            arr[1] = 0;\n            arr[2] = 2;\n            arr[3] = 0;\n\n            for(int i=4; i<=n; i++){\n                arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n            }\n\n            return arr[n];\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // 4\n        System.out.println(fib4(6)); // 8\n        System.out.println(fib4(7)); // 14\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double) (l.get(n / 2 - 1) + l.get(n / 2)) / 2;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "// your code goes here\n    if (text.length() == 0 || text.length() == 1){\n      return true;\n    }\n    else{\n        String reversed = new StringBuilder(text).reverse().toString();\n        if(reversed.equals(text)){\n            return true;\n        }else {\n            return false;\n        }\n    }\n\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "if (n == 0)\n        return 1;\n\n    // Base case: If n is 1, then the answer is 2%p\n    if (n == 1)\n        return 2 % p;\n\n    else {\n        // Recursive call for n/2\n        int temp = modp(n / 2, p);\n\n        // If n is even\n        if (n % 2 == 0)\n            return (temp * temp) % p;\n\n        // If n is odd\n        else\n            return (((temp * temp) % p) * 2) % p;\n    }\n}\n\npublic static void main(String[] args){\n    int n = 3;\n    int p = 5;\n    System.out.println(\"The value of 2^n modulo p is \" + modp(n,p));\n}\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "// Replace all vowels (both upper and lower case) with an empty string\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "return x + y;\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "if (s0.length() != s1.length()) {\n      return false;\n   }\n\n   int[] count = new int[256]; // Assuming ASCII characters\n\n   for (int i = 0; i < s0.length(); i++) {\n      count[s0.charAt(i)]++;\n      count[s1.charAt(i)]--;\n   }\n\n   for (int i = 0; i < 256; i++) {\n      if (count[i] != 0) {\n         return false;\n      }\n   }\n\n   return true;\n}\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "if (n <= 1) return n;\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "// TODO: Implement me!\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>' && !stack.isEmpty() && stack.peek() == '<') {\n                stack.pop();\n            } else {\n                return false; // Invalid closing bracket or no matching opening bracket\n            }\n        }\n\n        return stack.isEmpty(); // If the stack is empty, all brackets are correctly paired\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(correctBracketing(\"<\"));          // False\n        System.out.println(correctBracketing(\"<>\"));         // True\n        System.out.println(correctBracketing(\"<<><>>\"));     // True\n        System.out.println(correctBracketing(\"><<>\"));       // False\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "if (l.size() <= 2) {\n      return true;\n    }\n    boolean increasing = l.get(0) < l.get(1);\n    for (int i = 1; i < l.size() - 1; i++) {\n      if ((increasing && l.get(i) > l.get(i + 1)) || (!increasing && l.get(i) < l.get(i + 1))) {\n        return false;\n      }\n    }\n    return true;\n  }\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "// Create two HashSets for each list to remove duplicates and enable efficient searching\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Object> set2 = new HashSet<>(l2);\n\n        // Retain all elements in set1 that are also in set2 (common elements)\n        set1.retainAll(set2);\n\n        // Convert the resulting HashSet to a List and sort it\n        List<Integer> commonList = new ArrayList<>(set1);\n        Collections.sort(commonList);\n\n        return new ArrayList<>(commonList);\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "int max = -1;\n        while (n % 2 == 0){\n            max = 2;\n            n >>= 1; // equivalent to n /= 2\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n = n / i;\n            }\n        }\n\n        if (n > 2){\n            max = n;\n        }\n\n        return max;\n    }\n\n    public static void main(String[] args) throws java.lang.Exception {\n        int input = Integer.parseInt(args[0]);\n        System.out.println(\"The largest prime factor of \" + input + \" is: \" + largestPrimeFactor(input));\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "if (n <= 0) {\n            return 0; // Base case: Sum of numbers up to 0 is 0.\n        } else {\n            return n + sumToN(n - 1); // Recursive call: Add the current number and the sum of numbers up to n-1.\n        }\n    }\n\n    public static void main (String[] args) throws java.lang.Exception {\n      int input_number = 5; // You can change this value to test different inputs.\n        System.out.println(\"The sum of numbers from 1 to \" + input_number + \" is: \" + sumToN(input_number));\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "// create a stack to store the open parentheses\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                // If it's an opening bracket, push it onto the stack\n                stack.push(c);\n            } else {\n                // If it's a closing bracket and there is no matching open bracket on top of the stack\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n\n        // After processing all characters, check if there are any unmatched opening brackets left in the stack\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"()\"));  // Output: true\n        System.out.println(correctBracketing(\"(()())\"));  // Output: true\n        System.out.println(correctBracketing(\"(\"));  // Output: false\n        System.out.println(correctBracketing(\")(\"));  // Output: false\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            int coef = xs.get(i);\n            int power = i;\n            int derivativeCoef = coef * power;\n            if (derivativeCoef != 0) {\n                result.add(derivativeCoef);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> xs1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(derivative(xs1)); // Output: [1, 4, 12, 20]\n\n        List<Integer> xs2 = Arrays.asList(1, 2, 3);\n        System.out.println(derivative(xs2)); // Output: [2, 6]\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "/* Your code here. */\n   }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "int count = 0;\n        String lowerCaseS = s.toLowerCase();\n\n        for (int i = 0; i < lowerCaseS.length(); i++) {\n            char c = lowerCaseS.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == lowerCaseS.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "// Convert the integer to a string\n    String str = Integer.toString(x);\n\n    // Get the length of the string\n    int len = str.length();\n\n    // Calculate the actual shift value (in case shift > len)\n    shift = shift % len;\n\n    // If shift is 0, return the original string\n    if (shift == 0) {\n      return str;\n    }\n\n    // Reverse the entire string\n    StringBuilder reversed = new StringBuilder(str).reverse();\n\n    // Split the reversed string into two parts: first and second\n    StringBuilder first = new StringBuilder(reversed.substring(0, shift));\n    StringBuilder second = new StringBuilder(reversed.substring(shift));\n\n    // Reverse the first part back to its original order\n    first.reverse();\n\n    // Concatenate the two parts and return the result\n    return second.append(first).toString();\n  }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "int numApples = Integer.parseInt(s.substring(0, s.indexOf(\" \")));\n        int numOranges = Integer.parseInt(s.substring(s.indexOf(\"and \") + 4));\n        return n - numApples - numOranges;\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "if (arr == null || arr.size() == 0) return new ArrayList<>();\n\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int currNum = (int)arr.get(i);\n            if (currNum % 2 == 0 && currNum <= minEven) {\n                if (currNum < minEven) {\n                    minIndex = i;\n                } else if (currNum == minEven && i < minIndex) {\n                    // If currNum is same as current smallest even number, but index is smaller.\n                    minIndex = i;\n                }\n                minEven = Math.min(minEven, currNum);\n            }\n        }\n\n        if (minIndex == -1) return new ArrayList<>(); // No even numbers found.\n\n        List<Object> result = new ArrayList<>();\n        result.add(minEven);\n        result.add(minIndex);\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "// write your code here\n      Map<Integer, Integer> map = new HashMap<>();\n        for (int num : lst) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        int maxFrequency = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() <= entry.getValue()) {\n                maxFrequency = Math.max(maxFrequency, entry.getKey());\n            }\n        }\n\n        return maxFrequency;\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "Collections.sort(lst);\n        List<Object> result = new ArrayList<>();\n\n        int left = 0;\n        int right = lst.size() - 1;\n\n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left));\n                break;\n            } else {\n                result.add(lst.get(left++));\n                result.add(lst.get(right--));\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return isValidTriangle(a, b, c) ? roundToTwoDecimalPlaces(area) : -1;\n    }\n\n    private static boolean isValidTriangle(int a, int b, int c) {\n        return a + b > c && a + c > b && b + c > a;\n    }\n\n    private static double roundToTwoDecimalPlaces(double num) {\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        return Double.parseDouble(df.format(num));\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "if (q.isEmpty()) return false; // An empty list is not a flying object.\n\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        if (sum > w) return false; // The total weight exceeds the maximum possible weight.\n\n        List<Integer> reverseQ = new ArrayList<>(q);\n        Collections.reverse(reverseQ);\n\n        return q.equals(reverseQ); // Check if the list is a palindrome.\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "// your code goes here\n    }\n\n    public static void main (String[] args) throws IOException{\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int i=0;i<t;i++){\n            int n = in.nextInt();\n            List<Integer> arr = new ArrayList<>();\n            for(int j=0;j<n;j++) {\n                arr.add(in.nextInt());\n            }\n            System.out.println(smallestChange(arr));\n        }\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "int len1 = 0;\n        for (Object o : lst1) {\n            len1 += ((String)o).length();\n        }\n\n        int len2 = 0;\n        for (Object o : lst2) {\n            len2 += ((String)o).length();\n        }\n\n        return len1 <= len2 ? lst1 : lst2;\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "// write your code here.\n    int count=0;\n    for(int i=2;i<=a/2;i++){\n        if(a%i==0){\n            boolean prime = isPrime(i);\n            if(prime){\n                a=a/i;\n                count++;\n            }\n        }\n    }\n\n    if(count>=3 && isPrime(a)){\n        return true;\n    }else{\n        return false;\n    }\n}\n\npublic static boolean isPrime(int num) {\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main (String[] args) throws java.lang.Exception{\n    System.out.println(isMultiplyPrime(30)); // True\n    System.out.println(isMultiplyPrime(154)); // False\n    System.out.println(isMultiplyPrime(39)); // True\n}\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "if (x == 1 && n > 0)\n      return true;\n    else if (n <= 1)\n      return false;\n\n    while (x % n == 0) {\n        x /= n;\n    }\n    // If all factors of x are removed then x will become 1.\n    return x == 1;\n}\n\npublic static void main(String[] args){\n     System.out.println(\"Test Cases:\");\n      System.out.println(isSimplePower(1, 4)); //true\n      System.out.println(isSimplePower(2, 2)); //true\n      System.out.println(isSimplePower(8, 2)); //true\n      System.out.println(isSimplePower(3, 2)); //false\n      System.out.println(isSimplePower(3, 1)); //false\n      System.out.println(isSimplePower(5, 3)); //false\n}\n\n    }"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "// Write your code here\n       if (a < 0) {\n        a = -a;\n    }\n\n    int cubeRoot = (int) Math.round(Math.pow(a, 1.0/3));\n    return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main (String[] args) {\n        // Add your code here\n        System.out.println(iscube(27));\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "// Create a HashMap to store prime digits in hexadecimal and their decimal values\n        Map<Character, Integer> primes = new HashMap<>();\n        primes.put('2', 1);\n        primes.put('3', 1);\n        primes.put('5', 1);\n        primes.put('7', 1);\n        primes.put('B', 1);\n        primes.put('D', 1);\n\n        // Initialize a counter for prime digits\n        int count = 0;\n\n        // Convert the input number to a string\n        String hexNum = num.toString();\n\n        // Iterate through each character in the string\n        for (char c : hexNum.toCharArray()) {\n            // Check if the current character is a prime digit\n            if (primes.containsKey(c)) {\n                count++; // Increment the counter if it is\n            }\n        }\n\n        return count; // Return the final count of prime digits\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "// Your code here\n        StringBuilder binary = new StringBuilder(\"db\");\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(1, remainder);\n            decimal /= 2;\n        }\n        if (binary.length() == 2) {\n            return \"db0db\";\n        } else {\n            return binary + \"db\";\n        }\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "if (s.length() < 3) {\n            return false;\n        } else {\n            for (int i = 0; i <= s.length() - 3; i++) {\n                char a = s.charAt(i);\n                char b = s.charAt(i + 1);\n                char c = s.charAt(i + 2);\n                if (a == b || a == c || b == c) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) throws java.lang.Exception {\n        System.out.println(\"Enter the string: \");\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        Boolean result = isHappy(s);\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "List<String> letterGrades = new ArrayList<>();\n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "int length = string.length();\n    if (length < 2) return false;\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) return false;\n    }\n    return true;\n}\npublic static void main(String[] args) {\n    System.out.println(primeLength(\"Hello\")); // True\n    System.out.println(primeLength(\"abcdcba\")); // True\n    System.out.println(primeLength(\"kittens\")); // True\n    System.out.println(primeLength(\"orange\")); // False\n}\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 18;\n        } else {\n            int count = 9 * (int) Math.pow(10, n - 2) * 2; // Count for numbers with 1 at either end\n            count += startsOneEnds(n - 1) * 2; // Count for numbers with 1 at either end and rest of the digits can be anything\n            return count;\n        }\n    }\n\n    public static void main (String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(startsOneEnds(n));\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "if (lst == null || lst.isEmpty()) {\n            throw new IllegalArgumentException(\"The list should not be empty\");\n        }\n\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "char[] chars = s.toCharArray();\n    boolean isWordStarted = false;\n    List<Character> wordChars = new ArrayList<>();\n\n    for (int i = 0; i < chars.length; i++) {\n        if (Character.isLetter(chars[i])) {\n            if (!isWordStarted) isWordStarted = true;\n            wordChars.add(chars[i]);\n        } else {\n            if (isWordStarted) {\n                Collections.sort(wordChars);\n                int idx = i - wordChars.size();\n                for (char c : wordChars) chars[idx++] = c;\n                isWordStarted = false;\n            }\n            wordChars.clear();\n        }\n    }\n    if (!wordChars.isEmpty()) {\n        Collections.sort(wordChars);\n        int idx = s.length() - wordChars.size();\n        for (char c : wordChars) chars[idx++] = c;\n    }\n\n    return new String(chars);\n  }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "List<Object> result = new ArrayList<>();\n    for (int row = 0; row < lst.size(); row++) {\n        List<Integer> innerList = (List<Integer>) lst.get(row);\n        for (int col = 0; col < innerList.size(); col++) {\n            if (innerList.get(col) == x) {\n                result.add(new int[]{row, col});\n            }\n        }\n    }\n    Collections.sort(result, new Comparator<Object>() {\n        @Override\n        public int compare(Object o1, Object o2) {\n            int[] pair1 = (int[]) o1;\n            int[] pair2 = (int[]) o2;\n            if (pair1[0] != pair2[0]) {\n                return Integer.compare(pair1[0], pair2[0]);\n            } else {\n                return Integer.compare(pair2[1], pair1[1]); // descending order\n            }\n        }\n    });\n    return result;\n}\n\n    public static void main(String[] args) throws IOException {\n        List<Object> lst = Arrays.asList(Arrays.asList(1,2,3,4,5,6), Arrays.asList(1,2,3,4,1,6), Arrays.asList(1,2,3,4,5,1));\n        int x = 1;\n        List<Object> result = getRow(lst, x);\n        for (Object pair : result) {\n            int[] coord = (int[]) pair;\n            System.out.println(\"(\" + coord[0] + \", \" + coord[1] + \")\");\n        }\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "if (array.size() == 0 || array.size() == 1)\n      return array;\n\n   int firstElement = (int) array.get(0);\n   int lastElement = (int) array.get(array.size() - 1);\n\n   ArrayList<Integer> sortedArray = new ArrayList<>();\n   for (Object element : array) {\n       sortedArray.add((int) element);\n   }\n\n   if ((firstElement + lastElement) % 2 == 0) {\n       sortedArray.sort(Collections.reverseOrder());\n   } else {\n       Collections.sort(sortedArray);\n   }\n\n   List<Object> result = new ArrayList<>();\n   for (Integer element : sortedArray) {\n       result.add((Object) element);\n   }\n   return result;\n}\n    public static void main (String[] args) throws java.lang.Exception\n    {\n      System.out.println(sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)));\n      System.out.println(sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)));\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "char[] chars = s.toCharArray();\n\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                // Determine the shift based on the position in the string\n                int shift = 2 * ((i % 2) + 1);\n\n                // Adjust for lowercase and uppercase letters separately\n                char base = Character.isLowerCase(chars[i]) ? 'a' : 'A';\n                chars[i] = (char) (((chars[i] - base + shift) % 26) + base);\n            }\n        }\n\n        return new String(chars);\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "if (lst.size() < 2) {\n            return null;\n        }\n\n        Set<Integer> uniqueNumbers = new HashSet<>();\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                uniqueNumbers.add((Integer) obj);\n                if (uniqueNumbers.size() > 2) {\n                    break;\n                }\n            }\n        }\n\n        if (uniqueNumbers.size() < 2) {\n            return null;\n        } else {\n            List<Integer> sortedList = new ArrayList<>(uniqueNumbers);\n            Collections.sort(sortedList);\n            return sortedList.get(1);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "// Split the string into sentences using punctuation marks as delimiters\n        String[] sentences = s.split(\"[.!?]\");\n\n        // Initialize a counter for boredoms\n        int boredomCount = 0;\n\n        // Iterate through each sentence and check if it starts with \"I\"\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespaces from the sentence\n            String trimmedSentence = sentence.trim();\n\n            // Check if the trimmed sentence starts with \"I\" (case-insensitive)\n            if (trimmedSentence.toLowerCase().startsWith(\"i\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n      int sum = x.intValue() + y.intValue();\n      return sum == z.intValue() || sum == -z.intValue();\n    }\n    return false;\n  }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "StringBuilder encoded = new StringBuilder();\n    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    char[] shiftedVowels = {'c', 'g', 'k', 'm', 'y', 'C', 'G', 'K', 'M', 'Y'};\n\n    for (char c : message.toCharArray()) {\n        if (Character.isLetter(c)) {\n            // Swap case of the letter\n            char encodedChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\n            // Replace vowels with shifted vowels\n            for (int i = 0; i < vowels.length; i++) {\n                if (c == vowels[i]) {\n                    encodedChar = shiftedVowels[i];\n                    break;\n                }\n            }\n\n            // Append the encoded character to the result\n            encoded.append(encodedChar);\n        } else {\n            // If it's not a letter, append as is\n            encoded.append(c);\n        }\n    }\n\n    return encoded.toString();\n}\n\npublic static void main(String[] args) {\n    System.out.println(encode(\"test\")); // \"TGST\"\n    System.out.println(encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n}}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n\n        if (maxPrime == -1) {\n            return 0; // No prime numbers found in the list\n        }\n\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "if (dict instanceof HashMap) {\n            HashMap<String, Object> map = (HashMap<String, Object>) dict;\n            boolean lowerCase = true;\n            boolean upperCase = true;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n                if (!(entry.getKey() instanceof String)) {\n                    return false;\n                }\n\n                String key = (String) entry.getKey();\n                char[] chars = key.toCharArray();\n                for (char c : chars) {\n                    if (Character.isLowerCase(c)) {\n                        upperCase = false;\n                    } else if (Character.isUpperCase(c)) {\n                        lowerCase = false;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n\n            return lowerCase || upperCase;\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "// your code goes here\n        ArrayList<Object> primeNumbers = new ArrayList<>();\n        if (n <= 1){\n            return primeNumbers;\n        }else{\n            for(int i=2;i<n;i++){\n                boolean isPrime = true;\n                for(int j=2;j<=Math.sqrt(i);j++){\n                    if(i % j ==0){\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) primeNumbers.add(i);\n            }\n            return primeNumbers;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "// Get the unit digit of each number by using modulo operator % to find remainder when divided by 10\n    int unitDigitA = Math.abs(a % 10); // Use Math.abs() to handle negative numbers\n    int unitDigitB = Math.abs(b % 10);\n\n    // Multiply the unit digits and return the result\n    return unitDigitA * unitDigitB;\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "double d = Double.parseDouble(value);\n    if (d > 0 && d - Math.floor(d) < 0.5) {\n        return (int) Math.floor(d);\n    } else if (d > 0) {\n        return (int) Math.ceil(d);\n    } else if (d < 0 && Math.ceil(d) - d < 0.5) {\n        return (int) Math.ceil(d);\n    } else {\n        return (int) Math.floor(d);\n    }\n}\n\npublic static void main(String[] args) {\n    System.out.println(closestInteger(\"10\")); // 10\n    System.out.println(closestInteger(\"15.3\")); // 15\n    System.out.println(closestInteger(\"-14.5\")); // -15\n    System.out.println(closestInteger(\"14.5\")); // 15\n}\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "// your code goes here\n      if (n <= 0) return new ArrayList<>();\n      List<Integer> result = new ArrayList<>();\n      for (int i = 0; i < n; i++) {\n          int stones = n + (i * (n % 2 == 0 ? 1 : 2));\n          result.add(stones);\n      }\n      return result;\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\"[ ,]\");\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                result.add(word);\n            }\n        }\n        return new ArrayList<>(result);\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "if (x > y) return -1; // If the range is invalid, return -1\n\n    for (int i = y; i >= x; i--) { // Start from the end of the range\n        if (i % 2 == 0) return i; // If the number is even, return it\n    }\n\n    return -1; // If no even number was found in the range, return -1\n}\n\npublic static void main(String[] args) {\n    System.out.println(chooseNum(12, 15)); // Output: 14\n    System.out.println(chooseNum(13, 12)); // Output: -1\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "// your code goes here\n        if (n > m){\n            return -1;\n        }\n        else{\n            int avg = ((m + n) / 2);\n            String binaryString = Integer.toBinaryString(avg);\n            return \"0b\" + binaryString;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "TreeSet<Integer> set = new TreeSet<>();\n        for (int num : x) {\n            boolean isUnique = true;\n            int tempNum = num;\n            while (tempNum > 0) {\n                if ((tempNum % 10) % 2 == 0) {\n                    isUnique = false;\n                    break;\n                }\n                tempNum /= 10;\n            }\n            if (isUnique) set.add(num);\n        }\n        return new ArrayList<>(set);\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "// TODO: code here\n  }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "// your code goes here\n      List<Integer> list = new ArrayList<>();\n      for (int i=0; i<n; i++) {\n          if ((i+1) % 2 == 0) {\n              int fact = factorial((i+1));\n              list.add(fact);\n          } else {\n              int sum = getSum((i+1));\n              list.add(sum);\n          }\n      }\n      return list;\n    }\n\n    public static int factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        } else {\n            int fact = 1;\n            for (int i=2; i<=n; i++) {\n                fact *= i;\n            }\n            return fact;\n        }\n    }\n\n    public static int getSum(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        } else {\n            int sum = 0;\n            for (int i=1; i<=n; i++) {\n                sum += i;\n            }\n            return sum;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private static boolean isPalindrome(int num) {\n        int originalNum = num;\n        int reversedNum = 0;\n\n        while (num > 0) {\n            int digit = num % 10;\n            reversedNum = (reversedNum * 10) + digit;\n            num /= 10;\n        }\n\n        return originalNum == reversedNum;\n    }\n\n    public static void main(String[] args) {\n        int n = 3;\n        List<Integer> result = evenOddPalindrome(n);\n        System.out.println(result); // Output: [1, 2]\n\n        n = 12;\n        result = evenOddPalindrome(n);\n        System.out.println(result); // Output: [4, 6]\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "int numOfElem = 0;\n\n        for (int i=0;i<arr.size();i++){\n            int sum = 0;\n            String strNum = \"\"+arr.get(i);\n            if(!strNum.equals(\"\")){\n                for(int j=0;j<strNum.length();j++){\n                    sum += Integer.parseInt(\"\"+strNum.charAt(j));\n                }\n                if (sum>0){\n                    numOfElem++;\n                }\n            }\n        }\n        return numOfElem;\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "// your code goes here\n      if(arr == null || arr.size() <= 1){\n            return true;\n        }\n        List<Integer> intArr = new ArrayList<>();\n        for (Object obj : arr) {\n            intArr.add((int)obj);\n        }\n\n        int countOutOfOrder = 0;\n        int n = intArr.size();\n        for(int i = 0; i < n-1; i++){\n            if(intArr.get(i) > intArr.get(i+1)){\n                countOutOfOrder++;\n            }\n        }\n         if (intArr.get(n - 1) > intArr.get(0)) {\n            countOutOfOrder++;\n        }\n\n        return countOutOfOrder <= 1;\n    }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "// Create a list to store odd numbers from lst1 and even numbers from lst2\n        List<Integer> oddsFromLst1 = new ArrayList<>();\n        List<Integer> evensFromLst2 = new ArrayList<>();\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddsFromLst1.add(num);\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evensFromLst2.add(num);\n            }\n        }\n\n        // If the size of oddsFromLst1 is less than or equal to the size of evensFromLst2,\n        // it's possible to exchange elements to make lst1 a list of only even numbers\n        if (oddsFromLst1.size() <= evensFromLst2.size()) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) throws java.lang.Exception {\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Should print \"YES\"\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Should print \"NO\"\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "Map<Character, Integer> map = new HashMap<>();\n        for (char c : test.toCharArray()) {\n            if (c != ' ') {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        int maxCount = 0;\n        for (int count : map.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n\n        Map<Character, Integer> result = new HashMap<>();\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(Character.toString(ch))) {\n                sb.append(ch);\n            }\n        }\n        String result = sb.toString();\n        return Arrays.asList(result, isPalindrome(result));\n    }\n\n    public static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left++) != s.charAt(right--)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "// your code goes here\n  int n = nums.size();\n        if (n==0){\n            return 0;\n        }\n        int minSum=Integer.MAX_VALUE, sum = 0;\n        for(int i=0; i<nums.size(); i++){\n            sum += (Integer)nums.get(i);\n            if(sum < minSum){\n                minSum = sum;\n            }\n            if(sum>0){\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "def maxFill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    count = 0\n    bucket = 0\n\n    # iterate over each column in the grid\n    for j in range(m):\n        # iterate over each row in the current column\n        for i in range(n):\n            if grid[i][j] == 1:\n                bucket += 1\n                # if the bucket is full, empty it and increment our counter\n                if bucket == capacity:\n                    count += 1\n                    bucket = 0\n        # if there's any water left in the bucket after iterating over a column, empty it and increment our counter\n        if bucket > 0:\n            count += 1\n            bucket = 0\n\n    return count"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "// Your code here!\n        if (arr == null || arr.isEmpty()) return arr;\n        ArrayList<Integer> array = new ArrayList<>();\n        for (Object o : arr){\n            array.add((Integer)o);\n        }\n        Collections.sort(array, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer i1, Integer i2) {\n                int onesI1 = countOnesInBinaryRepresentation(i1);\n                int onesI2 = countOnesInBinaryRepresentation(i2);\n                if (onesI1 == onesI2) return i1 - i2;\n                else return onesI1 - onesI2;\n            }\n        });\n        ArrayList<Object> result = new ArrayList<>();\n        for (Integer i : array){\n            result.add((Object)i);\n        }\n        return result;\n    }\n\n    public static int countOnesInBinaryRepresentation(int num){\n        if (num == 0 || num == 1) return num;\n        String binary = Integer.toBinaryString(num);\n        int count = 0;\n        for (char c : binary.toCharArray()){\n            if (c == '1') count++;\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "if (s.isEmpty()) return Collections.emptyList(); // Return empty list if input string is empty\n        String[] words = s.split(\" \"); // Split the string into array of words\n        List<Object> result = new ArrayList<>();\n        for (String word : words) { // Loop through each word in the array\n            int consonantCount = 0; // Initialize a counter for consonants in current word\n            for (char c : word.toCharArray()) { // Loop through each character in the current word\n                if (\"aeiou\".indexOf(Character.toLowerCase(c)) == -1) consonantCount++; // Check if the character is a consonant and increment counter if it is\n            }\n            if (consonantCount == n) result.add(word); // If number of consonants in current word matches given count, add it to the result list\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "// your code goes here\n    int lastConsonantIndex = -1;\n    for (int i = word.length()-2; i > 0; i--) {\n        char c = Character.toLowerCase(word.charAt(i));\n        if (!isVowel(c)) {\n            lastConsonantIndex = i;\n            break;\n        }\n    }\n    if (lastConsonantIndex == -1) return \"\";\n\n    for (int i = lastConsonantIndex-1; i > 0; i--) {\n        char c = Character.toLowerCase(word.charAt(i));\n        if (isVowel(c)) return String.valueOf(word.charAt(i));\n    }\n    return \"\";\n}\n\nprivate static boolean isVowel(char c) {\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\npublic static void main (String[] args) throws java.lang.Exception {\n    System.out.println(getClosestVowel(\"yogurt\")); // u\n    System.out.println(getClosestVowel(\"FULL\"));   // U\n    System.out.println(getClosestVowel(\"quick\"));  // empty string\n    System.out.println(getClosestVowel(\"ab\"));     // empty string\n}\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "int open = 0;\n        int close = 0;\n        for (String str : lst){\n            for (char c : str.toCharArray()){\n                if (c == '('){\n                    open++;\n                } else if (open > 0) {\n                    open--;\n                } else {\n                    close++;\n                }\n            }\n        }\n        return open == close ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "Collections.sort(arr);\n   return arr.subList(Math.max(0, arr.size() - k), arr.size());\n }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= -9 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "// TODO: write your code here\n        if(n<=0){\n            throw new IllegalArgumentException(\"Input should be a positive integer\");\n        }\n        Set<Integer> oddNumbers = new TreeSet<>();\n        while(n !=1){\n            if(n%2!=0){\n                oddNumbers.add(n);\n            }\n            n = (n % 2 == 0) ? n/2 : 3*n + 1;\n        }\n        oddNumbers.add(1); // Adding 1 as it's always in the sequence\n        return new ArrayList<>(oddNumbers);\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "if (date.isEmpty()) {\n      return false;\n    }\n\n    String[] parts = date.split(\"-\");\n\n    if (parts.length != 3) {\n      return false;\n    }\n\n    int month, day, year;\n\n    try {\n      month = Integer.parseInt(parts[0]);\n      day = Integer.parseInt(parts[1]);\n      year = Integer.parseInt(parts[2]);\n    } catch (NumberFormatException e) {\n      return false;\n    }\n\n    if (month < 1 || month > 12) {\n      return false;\n    }\n\n    int maxDaysInMonth;\n\n    switch (month) {\n      case 2:\n        maxDaysInMonth = isLeapYear(year) ? 29 : 28;\n        break;\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        maxDaysInMonth = 30;\n        break;\n      default:\n        maxDaysInMonth = 31;\n    }\n\n    if (day < 1 || day > maxDaysInMonth) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private static boolean isLeapYear(int year) {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n  }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "String[] words = txt.split(\"[ ,]\"); // split by whitespace and comma\n        List<String> result = new ArrayList<>(Arrays.asList(words));\n        if (result.size() == 1 && result.get(0).equals(\"\")) return countOddLetters(txt); // if only one word, count odd letters\n        else return result; // otherwise, return the list of words\n    }\n\n    private static int countOddLetters(String txt) {\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) count++; // check if lowercase and odd position in alphabet\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "boolean isAscending = true;\n      int prev = (int)lst.get(0);\n      for(int i=1; i < lst.size(); i++){\n        if((int)lst.get(i) >= prev){\n          prev = (int)lst.get(i);\n        }else{\n          isAscending = false;\n          break;\n        }\n      }\n      return isAscending && lst.size() == new HashSet<>(lst).size();\n    }\n\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "int start = Math.max(interval1.get(0), interval2.get(0)); // Find the maximum of start points from both intervals\n    int end = Math.min(interval1.get(1), interval2.get(1)); // Find the minimum of end points from both intervals\n\n    if (start > end) {\n        return \"NO\"; // If start point is greater than end point, then no intersection\n    }\n\n    int length = end - start; // Calculate the length of intersection\n\n    return isPrime(length) ? \"YES\" : \"NO\"; // Check if length is prime and return accordingly\n}\n\npublic static boolean isPrime(int num) {\n    if (num < 2) {\n        return false;\n    }\n\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "if (arr.size() == 0) return null; // return null for empty array\n\n      int sum = 0, product = 1;\n      for (int i = 0; i < arr.size(); i++) {\n          int num = Integer.parseInt(arr.get(i).toString());\n          if (num != 0) { // if number is not zero\n              sum += Math.abs(num); // add its absolute value to sum\n              product *= (int)Math.signum(num); // multiply product with sign of the number\n          }\n      }\n      return sum * product; // return final result by multiplying sum and product\n  }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "}\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.*;\n\npublic class Tribonacci {\n    public static List<Integer> tri(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        if (n >= 0) sequence.add(1);\n        if (n >= 1) sequence.add(3);\n        if (n >= 2) sequence.add(2);\n        for (int i = 3; i <= n; i++) {\n            int value = i % 2 == 0 ? 1 + i / 2 : sequence.get(i - 1) + sequence.get(i - 2) + sequence.get(i - 3);\n            sequence.add(value);\n        }\n        return sequence;\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "String numStr = Integer.toString(n);\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "// Initialize a stack to keep track of opening brackets.\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                // If the current character is an opening bracket, push it onto the stack.\n                stack.push(c);\n            } else {\n                // If the current character is a closing bracket...\n\n                // Check if there's at least one opening bracket in the stack.\n                if (!stack.isEmpty()) {\n                    // Check if the top of the stack contains an opening bracket.\n                    char top = stack.peek();\n                    if (top == '[') {\n                        // If there's a matching pair, we have found a nested subsequence.\n                        return true;\n                    } else {\n                        // If the top of the stack contains a closing bracket, it means that this is not a nested sequence.\n                        stack.push(c);\n                    }\n                } else {\n                    // If there's no opening bracket in the stack and we encounter a closing bracket, it's an invalid sequence.\n                    return false;\n                }\n            }\n        }\n\n        // If we've iterated through all characters and haven't found a nested subsequence, return false.\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "int sum = 0;\n        for (Number num : lst) {\n            int ceilNum = (int) Math.ceil(num.doubleValue());\n            sum += ceilNum * ceilNum;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "if (txt.length() == 0 || txt.trim().isEmpty()) return false;\n\n    char lastChar = txt.charAt(txt.length() - 1);\n\n    // Check if the last character is a letter and not part of a word\n    if (Character.isLetter(lastChar) && !Character.isLetter(txt.charAt(txt.length() - 2))) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "if (arr.size() < 2) {\n      return -1; // Return -1 for an empty or single-element array\n    }\n\n    int largestIndex = -1;\n\n    for (int i = 1; i < arr.size(); i++) {\n      double currentElement = Double.parseDouble(arr.get(i).toString());\n      double previousElement = Double.parseDouble(arr.get(i - 1).toString());\n\n      if (currentElement < previousElement) {\n        largestIndex = i - 1; // Update the largest index\n      }\n    }\n\n    return largestIndex;\n  }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "// Your code here!\n      Integer maxNegative = null;\n        Integer minPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num < 0 && (maxNegative == null || num > maxNegative)) {\n                    maxNegative = num;\n                } else if (num > 0 && (minPositive == null || num < minPositive)) {\n                    minPositive = num;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(maxNegative);\n        result.add(minPositive);\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "if (a instanceof Integer && b instanceof Integer) {\n      return ((Integer) a).compareTo((Integer) b) > 0 ? a : ((Integer) a).equals(b) ? null : b;\n    } else if (a instanceof Double && b instanceof Double) {\n      return ((Double) a).compareTo((Double) b) > 0 ? a : ((Double) a).equals(b) ? null : b;\n    } else if (a instanceof String && b instanceof String) {\n      double da = Double.parseDouble(((String) a).replace(\",\", \".\"));\n      double db = Double.parseDouble(((String) b).replace(\",\", \".\"));\n      return da > db ? a : da == db ? null : b;\n    } else if (a instanceof Integer && b instanceof Double) {\n      return ((Integer) a).doubleValue() > (Double) b ? a : ((Integer) a).equals(b) ? null : b;\n    } else if (a instanceof Integer && b instanceof String) {\n      double db = Double.parseDouble(((String) b).replace(\",\", \".\"));\n      return ((Integer) a).doubleValue() > db ? a : ((Integer) a).equals(db) ? null : b;\n    } else if (a instanceof Double && b instanceof Integer) {\n      return ((Double) a) > ((Integer) b).doubleValue() ? a : ((Double) a).equals(((Integer) b).doubleValue()) ? null : b;\n    } else if (a instanceof Double && b instanceof String) {\n      double db = Double.parseDouble(((String) b).replace(\",\", \".\"));\n      return ((Double) a) > db ? a : ((Double) a).equals(db) ? null : b;\n    } else if (a instanceof String && b instanceof Integer) {\n      double da = Double.parseDouble(((String) a).replace(\",\", \".\"));\n      return da > ((Integer) b).doubleValue() ? a : da == ((Integer) b).doubleValue() ? null : b;\n    } else if (a instanceof String && b instanceof Double) {\n      double da = Double.parseDouble(((String) a).replace(\",\", \".\"));\n      return da > (Double) b ? a : da == (Double) b ? null : b;\n    }\n    return null;\n  }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "// your code goes here\n\n      if (n < 8 || n % 2 != 0) return false;\n      else return true;\n\n    }\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // test cases\n        int test1 = 4;\n        System.out.println(isEqualToSumEven(test1));\n\n        int test2 = 6;\n        System.out.println(isEqualToSumEven(test2));\n\n        int test3 = 8;\n        System.out.println(isEqualToSumEven(test3));\n\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "long result = 1;\n        for (int i = n; i >= 1; i--) {\n            long tempResult = 1;\n            for (int j = i; j >= 1; j--) {\n                tempResult *= j;\n            }\n            result *= tempResult;\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "char[] ch = text.toCharArray();\n        for (int i=0; i<ch.length; i++) {\n            if (ch[i] == ' ') {\n                int j = i+1;\n                while (j < ch.length && ch[j] == ' ') {\n                    j++;\n                }\n                if (j - i > 2) {\n                    ch[i] = '-';\n                    for (int k=i+1; k<j; k++) {\n                        ch[k] = '\\0';\n                    }\n                    i = j-1;\n                } else {\n                    ch[i] = '_';\n                    if (j - i > 1) {\n                        for (int k=i+1; k<j; k++) {\n                            ch[k] = '\\0';\n                        }\n                        i = j-1;\n                    }\n                }\n            }\n        }\n        String result = \"\";\n        for (char c : ch) {\n            if (c != '\\0') {\n                result += c;\n            }\n        }\n        return result;\n}\n\npublic static void main(String[] args){\n    System.out.println(\"Test Cases:\");\n    // Test Case 1: No spaces in the string\n    String text = \"Example\";\n    String expectedOutput = \"Example\";\n    assertEquals(expectedOutput, fixSpaces(text));\n\n    // Test Case 2: Single space in the string\n    text = \"Example 1\";\n    expectedOutput = \"Example_1\";\n    assertEquals(expectedOutput, fixSpaces(text));\n\n    // Test Case 3: Space at the beginning of the string\n    text = \" Example 2\";\n    expectedOutput = \"_Example_2\";\n    assertEquals(expectedOutput, fixSpaces(text));\n\n    // Test Case 4: More than 2 consecutive spaces in the string\n    text = \" Example   3\";\n    expectedOutput = \"_Example-3\";\n    assertEquals(expectedOutput, fixSpaces(text));\n}\n\npublic static void assertEquals(String expected, String actual) {\n    if (expected.equals(actual)) {\n        System.out.println(\"Passed\");\n    } else {\n        System.out.println(\"Failed: Expected \" + expected + \" but got \" + actual);\n    }\n}\n\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "//your code goes here\n      int dotIndex = fileName.indexOf('.');\n        if(dotIndex == -1 || dotIndex == 0 || dotIndex == fileName.length()-1){\n            return \"No\";\n        }\n\n        String extension = fileName.substring(dotIndex+1);\n        if(!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")){\n            return \"No\";\n        }\n\n        int digitCount = 0;\n        for(int i = 0; i < fileName.length(); i++){\n            if(Character.isDigit(fileName.charAt(i))){\n                digitCount++;\n            }\n        }\n        if(digitCount > 3){\n            return \"No\";\n        }\n\n        if(!Character.isLetter(fileName.charAt(0))){\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0 && (i + 1) % 4 != 0) {\n                sum += Math.pow((Integer)lst.get(i), 2);\n            } else if ((i + 1) % 4 == 0) {\n                sum += Math.pow((Integer)lst.get(i), 3);\n            } else {\n                sum += (Integer)lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "class WordsInSentence{\n\npublic static boolean checkPrime(int n){\n        if (n <= 1)\n            return false;\n        else if(n == 2)\n            return true;\n        else {\n            for(int i = 2; i * i <= n; i++){\n                if(n % i == 0)\n                    return false;\n            }\n            return true;\n        }\n}\n\npublic static String wordsInSentence(String sentence){\n    StringBuilder sb = new StringBuilder();\n    String[] words = sentence.split(\" \");\n    for (String word : words) {\n        if (checkPrime(word.length())) {\n            sb.append(word).append(\" \");\n        }\n    }\n    return sb.toString().trim();\n}\n\npublic static void main(String[] args){\n  String sentence = \"This is a test\";\n  System.out.println(wordsInSentence(sentence)); //Output: is\n}}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "// Split the fractions into numerators and denominators\n    String[] xParts = x.split(\"/\");\n    int xNum = Integer.parseInt(xParts[0]);\n    int xDen = Integer.parseInt(xParts[1]);\n\n    String[] nParts = n.split(\"/\");\n    int nNum = Integer.parseInt(nParts[0]);\n    int nDen = Integer.parseInt(nParts[1]);\n\n    // Simplify the expression by multiplying the fractions\n    int resultNum = xNum * nNum;\n    int resultDen = xDen * nDen;\n\n    // Check if the result is a whole number (numerator divisible by denominator)\n    return resultNum % resultDen == 0;\n}\n\npublic static void main(String[] args) {\n    System.out.println(simplify(\"1/5\", \"5/1\")); // True\n    System.out.println(simplify(\"1/6\", \"2/1\")); // False\n    System.out.println(simplify(\"7/10\", \"10/2\")); // False\n}\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "}\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "// write your code here\n        int count = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer && (Integer) num > 10) {\n                String strNum = ((Integer) num).toString();\n                char firstDigit = strNum.charAt(0);\n                char lastDigit = strNum.charAt(strNum.length() - 1);\n                if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private static boolean isOddDigit(char digit) {\n        int num = Character.getNumericValue(digit);\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "int[] arr = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            arr[i] = i * i - i + 1;\n        }\n\n        int count0 = 0, count1 = 0, count2 = 0;\n        for (int i = 1; i <= n; i++) {\n            if (arr[i] % 3 == 0) {\n                count0++;\n            } else if (arr[i] % 3 == 1) {\n                count1++;\n            } else {\n                count2++;\n            }\n        }\n\n        int res = 0;\n        // Count triples where sum is multiple of 3\n        res += count0 * (count0 - 1) * (count0 - 2) / 6;\n        res += count1 * (count1 - 1) * (count2) / 2;\n        res += count0 * (count1) * (count2);\n        return res;\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "//Your code here:\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<>();\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result; // Return empty list if either planet name is invalid\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 < index2) {\n            for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets.get(i));\n            }\n        } else {\n            for (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "ArrayList<String> result = new ArrayList<>();\n\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                } else {\n                    return Integer.compare(o1.length(), o2.length());\n                }\n            }\n        });\n\n        return new ArrayList<Object>(result);\n    }\n\n    public static void main (String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter wr = new PrintWriter(System.out);\n        int T = Integer.parseInt(br.readLine().trim());\n        for(int t_i=0; t_i<T; t_i++) {\n            String[] arr_n = br.readLine().split(\" \");\n            List<String> arr = new ArrayList<>();\n            for (int i_arr = 0; i_arr < arr_n.length; i_arr++) {\n                arr.add(arr_n[i_arr]);\n            }\n\n            int n = Integer.parseInt(br.readLine().trim());\n\n            List<Object> res;\n            res = sortedListSum(arr);\n            for(int i_res=0; i_res<res.size(); i_res++) {\n                wr.print(String.valueOf(res.get(i_res)));\n\n                if (i_res < res.size() - 1) {\n                    wr.print(\",\");\n                }\n            }\n\n            wr.println();\n        }\n\n        wr.close();\n        br.close();\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "if (isPrime(n))\n      return x;\n   else\n      return y;\n}\n\npublic static boolean isPrime(int num) {\n   if (num <= 1)\n      return false;\n\n   for (int i = 2; i < num; i++)\n      if (num % i == 0)\n         return false;\n\n   return true;\n}\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "}\n\n\n\n\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "}\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "int maxStrength = Integer.MIN_VALUE;\n        String strongestExt = \"\";\n\n        for (String ext : extensions) {\n            int strength = calculateStrength(ext);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExt = ext;\n            }\n        }\n\n        return className + \".\" + strongestExt;\n    }\n\n    private static int calculateStrength(String extension) {\n        int cap = 0, sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return cap - sm;\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "// This problem can be solved by generating all rotations of the second word and checking if any of those rotations is present in the first word.\n\n// First, we create a method to generate rotations:\n\nprivate static List<String> rotate(String str){\n    int len = str.length();\n    List<String> rotations = new ArrayList<>();\n    for(int i=0; i < len; i++){\n        String rotation = str.substring(i) + str.substring(0, i);\n        rotations.add(rotation);\n    }\n    return rotations;\n}\n\n// Then we use this method in our main function:\n\npublic static Boolean cycpatternCheck(String a, String b) {\n    List<String> rotations = rotate(b); // Generate all the rotations of second word\n    for(String rotation : rotations){   // Check each rotation\n        if(a.contains(rotation)){       // If first string contains the rotation\n            return true;                 // Return true\n        }\n    }\n    return false;                      // If no rotation is found, return false\n}\n\n// This solution has a time complexity of O(n^2), where n is the length of the second word. This is because for each rotation we create, we check if it's a substring of the first string which takes O(n) time. We do this n times so overall our time complexity is O(n^2).\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "int[] count = new int[2];\n        while(num != 0){\n            if(num%2 == 0){\n                count[0]++;\n            } else {\n                count[1]++;\n            }\n            num /= 10;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i : count) {\n            result.add(i);\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "if (number < 1 || number > 1000) {\n        throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n    }\n\n    // Define the roman numerals and their corresponding values in an array of pairs.\n    int[] values = {100, 90, 50, 40, 10, 9, 5, 4, 1};\n    String[] symbols = {\"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    StringBuilder romanNumeral = new StringBuilder();\n\n    // Loop through the pairs and convert the number to its roman numeral equivalent.\n    for (int i = 0; i < values.length; i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n            romanNumeral.append(symbols[i]);\n        }\n    }\n\n    // Return the result in lowercase.\n    return romanNumeral.toString();\n}\n\npublic static void main(String[] args) {\n    System.out.println(intToMiniRoman(19));  // \"xix\"\n    System.out.println(intToMiniRoman(152)); // \"clii\"\n    System.out.println(intToMiniRoman(426)); // \"cdxxvi\"\n}\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n     return true;\n   else\n     return false;\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "// Create a variable to store the maximum number of unique characters and the word with that count.\n        int maxUnique = 0;\n        String result = \"\";\n\n        // Iterate through each word in the list.\n        for (String word : words) {\n            // Convert the word into a character array.\n            char[] chars = word.toCharArray();\n\n            // Create a set to store unique characters of this word.\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : chars) {\n                uniqueChars.add(c);\n            }\n\n            // If the size of unique characters is greater than maxUnique, update maxUnique and result.\n            if (uniqueChars.size() > maxUnique) {\n                maxUnique = uniqueChars.size();\n                result = word;\n            } else if (uniqueChars.size() == maxUnique) { // If the size is equal to maxUnique, check lexicographical order.\n                if (word.compareTo(result) < 0) {\n                    result = word;\n                }\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "if (remaining >= need) {\n      return Arrays.asList(number + need, remaining - need);\n    } else {\n      return Arrays.asList(number + remaining, 0);\n    }\n  }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "if (operator == null || operand == null || operator.size() != operand.size() - 1)\n      return -1; // invalid input\n\n    Stack<Character> operators = new Stack<>();\n    Stack<Integer> operands = new Stack<>();\n\n    for (int i = 0; i < operator.size(); i++) {\n        char op = operator.get(i).charAt(0);\n        int num = operand.get(i);\n\n        while (!operators.isEmpty() && hasPrecedence(op, operators.peek())) {\n            operands.push(applyOp(operators.pop(), operands.pop(), operands.pop()));\n        }\n\n        operators.push(op);\n        operands.push(num);\n    }\n\n    // push the last operand to stack\n    operands.push(operand.get(operand.size() - 1));\n\n    while (!operators.isEmpty()) {\n        operands.push(applyOp(operators.pop(), operands.pop(), operands.pop()));\n    }\n\n    return operands.pop();\n}\n\nprivate static boolean hasPrecedence(char op1, char op2) {\n    if (op2 == '(' || op2 == ')')\n        return false;\n    if ((op1 == '*' || op1 == '/' || op1 == '//') && (op2 == '+' || op2 == '-'))\n        return false;\n    else\n        return true;\n}\n\nprivate static int applyOp(char op, int b, int a) {\n    switch (op) {\n        case '+':\n            return a + b;\n        case '-':\n            return a - b;\n        case '*':\n            return a * b;\n        case '/':\n            if (b == 0)\n                throw new UnsupportedOperationException(\"Cannot divide by zero\");\n            return a / b;\n        case '//':\n            if (b == 0)\n                throw new UnsupportedOperationException(\"Cannot divide by zero\");\n            return a // b;\n        case '**':\n            return (int) Math.pow(a, b);\n    }\n    return 0;\n}\n\n// Test the function\npublic static void main(String[] args) {\n    List<String> operator = Arrays.asList(\"+\", \"*\", \"-\");\n    List<Integer> operand = Arrays.asList(2, 3, 4, 5);\n    System.out.println(doAlgebra(operator, operand)); // Output: 9\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "// Check if the string contains any letters\n        boolean hasLetters = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                break;\n            }\n        }\n\n        // If the string contains no letters, reverse it and return\n        if (!hasLetters) {\n            StringBuilder reversed = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i--) {\n                reversed.append(s.charAt(i));\n            }\n            return reversed.toString();\n        }\n\n        // If the string contains letters, reverse their case and leave other characters as is\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "try {\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\n            byte[] array = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : array) {\n                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));\n            }\n            return sb.toString();\n        } catch (java.security.NoSuchAlgorithmException e) {\n            // Handle exception if MD5 algorithm is not available\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\"));  // Output: \"3e25960a79dbc69b674cd4ec67a72c62\"\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "// Your code here\n      List<Object> result = new ArrayList<>();\n      if (a <= b) {\n          for (int i = a; i <= b; i++) {\n              if (i % 2 == 0) {\n                  result.add(i);\n              }\n          }\n      } else {\n          for (int i = b; i <= a; i++) {\n              if (i % 2 == 0) {\n                  result.add(i);\n              }\n          }\n      }\n      return result;\n    }\n}"}

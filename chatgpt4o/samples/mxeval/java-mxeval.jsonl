{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.util.*;\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n        \n        // Iterate through the sorted list and check adjacent elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Check the difference between adjacent elements\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        \n        // If no close elements were found, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Double> list1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(hasCloseElements(list1, 0.5));  // Output: False\n        \n        List<Double> list2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        System.out.println(hasCloseElements(list2, 0.3));  // Output: True\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.util.*;\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n        \n        for (char c : parenString.toCharArray()) {\n            if (c == ' ') {\n                continue; // Ignore spaces\n            }\n            currentGroup.append(c);\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            \n            // If balance is zero, we have a complete group\n            if (balance == 0 && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> groups = separateParenGroups(input);\n        for (String group : groups) {\n            System.out.println(group);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "class TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * an integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n     * \n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n        if (number == null || number < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating point number.\");\n        }\n        \n        // Get the integer part of the number\n        double integerPart = Math.floor(number);\n        \n        // Subtract the integer part from the original number to get the decimal part\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(truncateNumber(3.5));  // Output: 0.5\n        System.out.println(truncateNumber(10.123));  // Output: 0.123\n        System.out.println(truncateNumber(7.0));  // Output: 0.0\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.util.*;\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true; // Balance fell below zero\n            }\n        }\n        return false; // Balance never fell below zero\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> operations1 = Arrays.asList(1, 2, 3);\n        List<Integer> operations2 = Arrays.asList(1, 2, -4, 5);\n\n        System.out.println(belowZero(operations1)); // Expected output: False\n        System.out.println(belowZero(operations2)); // Expected output: True\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "import java.util.List;\n\nclass MeanAbsoluteDeviation {\n\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return null; // or throw an exception based on your requirement\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Compute the absolute differences from the mean\n        double absoluteSum = 0;\n        for (Double number : numbers) {\n            absoluteSum += Math.abs(number - mean);\n        }\n\n        // Step 3: Calculate the mean of these absolute differences\n        double mad = absoluteSum / numbers.size();\n\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        Double mad = meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad);\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "import java.util.*;\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimiter) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Object> test1 = Arrays.asList();\n        System.out.println(intersperse(test1, 4)); // []\n\n        List<Object> test2 = Arrays.asList(1, 2, 3);\n        System.out.println(intersperse(test2, 4)); // [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.util.*;\n\nclass ParseNestedParens {\n    public static List<Integer> parseNestedParens(String parenString) {\n        // Split the input string by spaces to get individual groups\n        String[] groups = parenString.split(\" \");\n        List<Integer> nestingLevels = new ArrayList<>();\n\n        for (String group : groups) {\n            int maxNesting = 0;\n            int currentNesting = 0;\n\n            // Traverse through each character in the group\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    // Increase the current nesting level\n                    currentNesting++;\n                    // Update the maximum nesting level if needed\n                    if (currentNesting > maxNesting) {\n                        maxNesting = currentNesting;\n                    }\n                } else if (c == ')') {\n                    // Decrease the current nesting level\n                    currentNesting--;\n                }\n            }\n\n            // Add the maximum nesting level of the current group to the list\n            nestingLevels.add(maxNesting);\n        }\n\n        return nestingLevels;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        List<Integer> result = parseNestedParens(input);\n        System.out.println(result);  // Output: [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "class FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n        List<Object> result = new ArrayList<>();\n        for (Object obj : strings) {\n            if (obj instanceof String) {\n                String str = (String) obj;\n                if (str.contains(substring)) {\n                    result.add(str);\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Object> list1 = new ArrayList<>();\n        System.out.println(filterBySubstring(list1, \"a\")); // []\n\n        List<Object> list2 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        System.out.println(filterBySubstring(list2, \"a\")); // [abc, bacd, array]\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a list consisting of a sum and a product of all the integers in the list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * @param numbers List of integers\n     * @return List containing sum and product of the integers\n     */\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sumProduct(Collections.emptyList())); // [0, 1]\n        System.out.println(sumProduct(Arrays.asList(1, 2, 3, 4))); // [10, 24]\n        System.out.println(sumProduct(Arrays.asList(5, 5, 5, 5))); // [20, 625]\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.util.*;\n\npublic class RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n\n        int currentMax = Integer.MIN_VALUE;\n        for (Integer number : numbers) {\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            result.add(currentMax);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxResult = rollingMax(numbers);\n        System.out.println(rollingMaxResult);  // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "class MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * \n     * @param string The input string.\n     * @return The shortest palindrome that begins with the supplied string.\n     */\n    public static String makePalindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return string;\n        }\n\n        int n = string.length();\n        // Find the longest palindromic suffix\n        int longestPalindromicSuffixLength = 0;\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string, i, n - 1)) {\n                longestPalindromicSuffixLength = n - i;\n                break;\n            }\n        }\n\n        // Create the result by appending the reverse of the prefix that is not part of the palindromic suffix\n        String prefix = string.substring(0, n - longestPalindromicSuffixLength);\n        StringBuilder sb = new StringBuilder(prefix);\n        sb.reverse();\n        return string + sb.toString();\n    }\n\n    /**\n     * Helper method to check if a substring of the given string is a palindrome.\n     * \n     * @param string The input string.\n     * @param left The starting index of the substring.\n     * @param right The ending index of the substring.\n     * @return True if the substring is a palindrome, false otherwise.\n     */\n    private static boolean isPalindrome(String string, int left, int right) {\n        while (left < right) {\n            if (string.charAt(left) != string.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makePalindrome(\"\")); // Output: \"\"\n        System.out.println(makePalindrome(\"cat\")); // Output: \"catac\"\n        System.out.println(makePalindrome(\"cata\")); // Output: \"catac\"\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "class StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n        // Check if both strings are of the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"The input strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the strings\n        for (int i = 0; i < a.length(); i++) {\n            // Get the characters at the current position\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n\n            // Perform XOR on the characters and append the result to the StringBuilder\n            if (charA == charB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        System.out.println(stringXor(\"010\", \"110\")); // Output: 100\n        System.out.println(stringXor(\"1111\", \"1010\")); // Output: 0101\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "import java.util.List;\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n     * \n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        String longestString = null;\n        for (String str : strings) {\n            if (longestString == null || str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return longestString;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(longest(Arrays.asList())); // null\n        System.out.println(longest(Arrays.asList(\"a\", \"b\", \"c\"))); // a\n        System.out.println(longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // ccc\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "class GreatestCommonDivisor {\n    /**\n     * Return the greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(greatestCommonDivisor(3, 5));  // Output: 1\n        System.out.println(greatestCommonDivisor(25, 15)); // Output: 5\n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.util.*;\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> allPrefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        String input = \"abc\";\n        List<String> result = allPrefixes(input);\n        System.out.println(result);  // Output: [a, ab, abc]\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "class StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     */\n    public static String stringSequence(int n) {\n        // Use a StringBuilder for efficient string concatenation\n        StringBuilder result = new StringBuilder();\n        \n        // Loop from 0 to n, appending each number to the StringBuilder\n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) {\n                result.append(\" \"); // Add a space between numbers, but not after the last number\n            }\n        }\n        \n        // Convert the StringBuilder to a String and return it\n        return result.toString();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(stringSequence(0)); // Output: '0'\n        System.out.println(stringSequence(5)); // Output: '0 1 2 3 4 5'\n        System.out.println(stringSequence(10)); // Output: '0 1 2 3 4 5 6 7 8 9 10'\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.util.*;\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n        // Convert the string to lowercase to ensure case insensitivity\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctCharacters = new HashSet<>();\n        \n        // Iterate through the string and add characters to the set\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        \n        // The size of the set is the number of distinct characters\n        return distinctCharacters.size();\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(countDistinctCharacters(\"Jerry\"));  // Output: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass ParseMusic {\n\n    public static List<Integer> parseMusic(String musicString) {\n        // Split the input string by spaces to get individual notes\n        String[] notes = musicString.split(\" \");\n        \n        // Initialize a list to store the beats\n        List<Integer> beats = new ArrayList<>();\n        \n        // Loop through each note and determine the beats\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // If the note does not match any of the known patterns, you might want to handle it\n                    // Here we assume all inputs are valid as per the problem statement\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n\n    public static void main(String[] args) {\n        // Test the function with a sample input\n        String input = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> result = parseMusic(input);\n        \n        // Print the result\n        System.out.println(result); // Expected output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "class HowManyTimes {\n\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n        if (string == null || substring == null || substring.length() == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow overlapping matches\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(howManyTimes(\"\", \"a\"));         // Output: 0\n        System.out.println(howManyTimes(\"aaa\", \"a\"));      // Output: 3\n        System.out.println(howManyTimes(\"aaaa\", \"aa\"));    // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numerals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest.\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n        // Mapping from word to number\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Mapping from number to word (reverse of the above map)\n        Map<Integer, String> numberToWord = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n            numberToWord.put(entry.getValue(), entry.getKey());\n        }\n\n        // Split the input string into words\n        String[] words = numbers.split(\" \");\n        \n        // Convert words to their corresponding numbers\n        List<Integer> numberList = new ArrayList<>();\n        for (String word : words) {\n            numberList.add(wordToNumber.get(word));\n        }\n\n        // Sort the list of numbers\n        Collections.sort(numberList);\n\n        // Convert the sorted numbers back to words\n        List<String> sortedWords = new ArrayList<>();\n        for (Integer number : numberList) {\n            sortedWords.add(numberToWord.get(number));\n        }\n\n        // Join the sorted words back into a single string\n        return String.join(\" \", sortedWords);\n    }\n\n    public static void main(String[] args) {\n        // Test the sortNumbers method\n        System.out.println(sortNumbers(\"three one five\")); // Output: one three five\n        System.out.println(sortNumbers(\"nine eight seven six\")); // Output: six seven eight nine\n        System.out.println(sortNumbers(\"zero two four\")); // Output: zero two four\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.*;\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        // Sort the list\n        Collections.sort(numbers);\n\n        double minDifference = Double.MAX_VALUE;\n        double firstElement = 0;\n        double secondElement = 0;\n\n        // Find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double currentDifference = numbers.get(i + 1) - numbers.get(i);\n            if (currentDifference < minDifference) {\n                minDifference = currentDifference;\n                firstElement = numbers.get(i);\n                secondElement = numbers.get(i + 1);\n            }\n        }\n\n        // Return the closest pair in ascending order\n        return Arrays.asList(firstElement, secondElement);\n    }\n\n    public static void main(String[] args) {\n        List<Double> list1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        System.out.println(findClosestElements(list1)); // Output: [2.0, 2.2]\n\n        List<Double> list2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        System.out.println(findClosestElements(list2)); // Output: [2.0, 2.0]\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        if (min == max) {\n            throw new IllegalArgumentException(\"All elements are the same, cannot rescale.\");\n        }\n\n        List<Double> rescaled = new ArrayList<>(numbers.size());\n        for (Double number : numbers) {\n            double rescaledValue = (number - min) / (max - min);\n            rescaled.add(rescaledValue);\n        }\n\n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaled = rescaleToUnit(numbers);\n        System.out.println(rescaled); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "class FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add(value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", new HashMap<>(), new ArrayList<>());\n        \n        System.out.println(filterIntegers(test1)); // Output: [5]\n        System.out.println(filterIntegers(test2)); // Output: [1, 2, 3]\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "class Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n        if (string == null) {\n            return 0;\n        }\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(strlen(\"\")); // Output: 0\n        System.out.println(strlen(\"abc\")); // Output: 3\n        System.out.println(strlen(\"Hello, World!\")); // Output: 13\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "public class LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     */\n    public static int largestDivisor(int n) {\n        // Check for all numbers from n/2 down to 1\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) { // Check if i is a divisor of n\n                return i; // Return the first (and thus largest) divisor found\n            }\n        }\n        // If no divisor is found (which should not happen for n > 1), return 1\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        // Test the function with an example\n        System.out.println(largestDivisor(15)); // Output: 5\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.util.*;\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors.\n     */\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Check for number of 2s in n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // Check for odd factors from 3 onwards\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // If n is still a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(factorize(8)); // [2, 2, 2]\n        System.out.println(factorize(25)); // [5, 5]\n        System.out.println(factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.util.*;\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        Map<Object, Integer> frequencyMap = new HashMap<>();\n        Map<Object, Boolean> uniqueOrderMap = new LinkedHashMap<>();\n\n        // Count the frequency of each number\n        for (Object number : numbers) {\n            frequencyMap.put(number, frequencyMap.getOrDefault(number, 0) + 1);\n        }\n\n        // Track the unique elements in insertion order\n        for (Object number : numbers) {\n            if (frequencyMap.get(number) == 1) {\n                uniqueOrderMap.put(number, true);\n            }\n        }\n\n        // Collect the results\n        List<Object> result = new ArrayList<>(uniqueOrderMap.keySet());\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(removeDuplicates(numbers)); // Output: [1, 3, 4]\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "class FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(flipCase(\"Hello\"));  // Expected: hELLO\n        System.out.println(flipCase(\"WORLD\"));  // Expected: world\n        System.out.println(flipCase(\"java\"));   // Expected: JAVA\n        System.out.println(flipCase(\"12345\"));  // Expected: 12345 (no change)\n        System.out.println(flipCase(\"hElLo123\"));  // Expected: HeLlO123\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "import java.util.*;\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n        StringBuilder result = new StringBuilder();\n        for (Object item : strings) {\n            if (item instanceof String) {\n                result.append((String) item);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList();\n        System.out.println(concatenate(list1)); // Output: ''\n\n        List<Object> list2 = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(concatenate(list2)); // Output: 'abc'\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.util.*;\n\nclass FilterByPrefix {\n\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        List<String> strings = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        String prefix = \"a\";\n        List<String> filteredStrings = filterByPrefix(strings, prefix);\n        System.out.println(filteredStrings);  // Output: [abc, array]\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "class GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n     * [2, 5, 6]\n     * >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> result = new ArrayList<>();\n        \n        for (Object obj : l) {\n            if (obj instanceof Integer && (Integer) obj > 0) {\n                result.add(obj);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getPositive(Arrays.asList(-1, 2, -4, 5, 6)));\n        System.out.println(getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "class IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n        // Handle edge cases\n        if (n <= 1) return false;\n        if (n <= 3) return true; // 2 and 3 are prime numbers\n\n        // Check for even numbers and multiples of 3\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        // Check for factors from 5 to the square root of n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Example test cases\n        System.out.println(isPrime(6));    // Should print: false\n        System.out.println(isPrime(101));  // Should print: true\n        System.out.println(isPrime(11));   // Should print: true\n        System.out.println(isPrime(13441));// Should print: true\n        System.out.println(isPrime(61));   // Should print: true\n        System.out.println(isPrime(4));    // Should print: false\n        System.out.println(isPrime(1));    // Should print: false\n    }\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.*;\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted.\n     * >>> sortThird(Arrays.asList(1, 2, 3))\n     * [1, 2, 3]\n     * >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        // Step 1: Collect elements at indices divisible by three\n        List<Integer> divisibleByThree = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            }\n        }\n\n        // Step 2: Sort the collected elements\n        Collections.sort(divisibleByThree);\n\n        // Step 3: Reinsert the sorted elements back into the original list\n        int index = 0;\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThree.get(index));\n                index++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sortThird(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // Output: [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        // Use a TreeSet to store unique elements and automatically sort them\n        Set<Integer> uniqueSet = new TreeSet<>(l);\n\n        // Convert the sorted set back to a list\n        return new ArrayList<>(uniqueSet);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> inputList = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result = unique(inputList);\n        System.out.println(result);  // Output: [0, 2, 3, 5, 9, 123]\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.util.*;\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        \n        System.out.println(maxElement(list1)); // Output: 3\n        System.out.println(maxElement(list2)); // Output: 123\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "class FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     */\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int countSevens(int number) {\n        int count = 0;\n        while (number > 0) {\n            if (number % 10 == 7) {\n                count++;\n            }\n            number /= 10;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        System.out.println(fizzBuzz(50)); // 0\n        System.out.println(fizzBuzz(78)); // 2\n        System.out.println(fizzBuzz(79)); // 3\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "import java.util.*;\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indices, while its values at the even indices are equal\n     * to the values of the even indices of l, but sorted.\n     * \n     * @param l The input list of integers.\n     * @return A list where the even indices are sorted.\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Extract the elements at the even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        \n        // Sort the even index elements\n        Collections.sort(evenIndices);\n        \n        // Place the sorted elements back into the even indices of the original list\n        for (int i = 0, j = 0; i < l.size(); i += 2, j++) {\n            l.set(i, evenIndices.get(j));\n        }\n        \n        return l;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(5, 6, 3, 4);\n        \n        System.out.println(sortEven(new ArrayList<>(list1))); // Output: [1, 2, 3]\n        System.out.println(sortEven(new ArrayList<>(list2))); // Output: [3, 6, 5, 4]\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.util.*;\n\nclass PrimeFib {\n\n    // Function to check if a number is prime\n    public static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(number); i += 2) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Function to generate the n-th prime Fibonacci number\n    public static int primeFib(int n) {\n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 1, b = 1;\n        \n        while (primeFibs.size() < n) {\n            int c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                primeFibs.add(c);\n            }\n        }\n        \n        return primeFibs.get(n - 1);\n    }\n\n    // Main function to test the primeFib method\n    public static void main(String[] args) {\n        System.out.println(primeFib(1)); // Output: 2\n        System.out.println(primeFib(2)); // Output: 3\n        System.out.println(primeFib(3)); // Output: 5\n        System.out.println(primeFib(4)); // Output: 13\n        System.out.println(primeFib(5)); // Output: 89\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    /**\n     * This method takes a list of integers as input and returns True if there\n     * are three distinct elements in the list that sum to zero, otherwise\n     * returns False.\n     *\n     * @param l List of integers\n     * @return Boolean indicating if three distinct elements sum to zero\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        int n = l.size();\n        if (n < 3) {\n            return false; // Not enough elements to have triplets\n        }\n\n        // Sort the list first\n        Collections.sort(l);\n\n        // Iterate through the list\n        for (int i = 0; i < n - 2; i++) {\n            // To avoid duplicate triplets, skip the same elements\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = n - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false; // No triplet found\n    }\n\n    public static void main(String[] args) {\n        // Sample test cases\n        List<Integer> list1 = Arrays.asList(1, 3, 5, 0);\n        List<Integer> list2 = Arrays.asList(1, 3, -2, 1);\n        List<Integer> list3 = Arrays.asList(1, 2, 3, 7);\n        List<Integer> list4 = Arrays.asList(2, 4, -5, 3, 9, 7);\n        List<Integer> list5 = Arrays.asList(1);\n\n        System.out.println(triplesSumToZero(list1)); // False\n        System.out.println(triplesSumToZero(list2)); // True\n        System.out.println(triplesSumToZero(list3)); // False\n        System.out.println(triplesSumToZero(list4)); // True\n        System.out.println(triplesSumToZero(list5)); // False\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "public class CarRaceCollision {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public static int carRaceCollision(int n) {\n        // Since each left-to-right car collides with each right-to-left car,\n        // the total number of collisions is n * n.\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        // Example case\n        int n = 5;\n        int collisions = carRaceCollision(n);\n        System.out.println(\"Number of collisions: \" + collisions); // Output: 25\n\n        // Additional test cases\n        System.out.println(\"Number of collisions: \" + carRaceCollision(3)); // Output: 9\n        System.out.println(\"Number of collisions: \" + carRaceCollision(10)); // Output: 100\n        System.out.println(\"Number of collisions: \" + carRaceCollision(0)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "import java.util.*;\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n        List<Object> incrementedList = new ArrayList<>();\n        for (Object element : l) {\n            if (element instanceof Integer) {\n                incrementedList.add((Integer) element + 1);\n            } else {\n                // Handle other types if needed, currently adding element as is\n                incrementedList.add(element);\n            }\n        }\n        return incrementedList;\n    }\n\n    public static void main(String[] args) {\n        List<Object> input1 = Arrays.asList(1, 2, 3);\n        List<Object> output1 = incrList(input1);\n        System.out.println(output1); // [2, 3, 4]\n\n        List<Object> input2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Object> output2 = incrList(input2);\n        System.out.println(output2); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        // Create a HashSet to store elements\n        Set<Integer> seen = new HashSet<>();\n        \n        // Iterate through each element in the list\n        for (int num : l) {\n            // Check if the negation of the current number exists in the HashSet\n            if (seen.contains(-num)) {\n                return true; // If found, return true\n            }\n            // Add the current number to the HashSet\n            seen.add(num);\n        }\n        \n        // If no such pair is found, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "class ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> changeBase(8, 3)\n     * '22'\n     * >>> changeBase(8, 2)\n     * '1000'\n     * >>> changeBase(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n        // Special case for base 1 which isn't typically used but we handle it for completeness\n        if (base <= 1) {\n            throw new IllegalArgumentException(\"Base must be greater than 1.\");\n        }\n\n        // If the number is 0, its representation in any base is \"0\"\n        if (x == 0) {\n            return \"0\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        \n        // Loop to convert the number to the target base\n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x = x / base;\n        }\n        \n        // The result string is in reverse order, so reverse it\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        // Test examples\n        System.out.println(changeBase(8, 3));  // Output: '22'\n        System.out.println(changeBase(8, 2));  // Output: '1000'\n        System.out.println(changeBase(7, 2));  // Output: '111'\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "class TriangleArea {\n    /**\n     * Given length of a side and height, return the area of a triangle.\n     * >>> triangleArea(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5, 3)); // Expected output: 7.5\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "class Fib4 {\n\n    public static int fib4(int n) {\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Initialize the first four elements of the sequence\n        int a = 0; // fib4(0)\n        int b = 0; // fib4(1)\n        int c = 2; // fib4(2)\n        int d = 0; // fib4(3)\n\n        // Variable to store the result\n        int result = 0;\n\n        // Compute the sequence iteratively\n        for (int i = 4; i <= n; i++) {\n            result = a + b + c + d;\n            // Update the variables to move to the next step\n            a = b;\n            b = c;\n            c = d;\n            d = result;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fib4(5)); // Output: 4\n        System.out.println(fib4(6)); // Output: 8\n        System.out.println(fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median(Arrays.asList(3, 1, 2, 4, 5))\n     * 3\n     * >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n     * 15.0\n     */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l); // Sort the list\n        int size = l.size();\n        \n        // If the size is odd, return the middle element\n        if (size % 2 != 0) {\n            return l.get(size / 2);\n        } else {\n            // If the size is even, return the average of the two middle elements\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0; // Use 2.0 to ensure the result is a double\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n\n        System.out.println(median(list1)); // Output: 3\n        System.out.println(median(list2)); // Output: 15.0\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        if (text == null) {\n            return false;\n        }\n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n        System.out.println(isPalindrome(\"A man a plan a canal Panama\".replaceAll(\"\\\\s+\",\"\").toLowerCase())); // True\n        System.out.println(isPalindrome(null)); // False\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "class Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n        // Base case: 2^0 % p is 1\n        if (n == 0) {\n            return 1;\n        }\n\n        // Initialize result to 1\n        long result = 1;\n        long base = 2;  // We are calculating 2^n\n\n        while (n > 0) {\n            // If n is odd, multiply the base with result\n            if ((n & 1) == 1) {\n                result = (result * base) % p;\n            }\n            // Square the base and reduce n by half\n            base = (base * base) % p;\n            n >>= 1; // Equivalent to n = n / 2\n        }\n\n        // Return the result as an integer\n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(modp(3, 5));    // Output: 3\n        System.out.println(modp(1101, 101)); // Output: 2\n        System.out.println(modp(0, 101));  // Output: 1\n        System.out.println(modp(3, 11));   // Output: 8\n        System.out.println(modp(100, 101)); // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "public class RemoveVowels {\n    /**\n     * remove_vowels is a function that takes a string and returns a string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     */\n    public static String removeVowels(String text) {\n        // Define a set of vowels for quick lookup\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        // Use StringBuilder for efficient string manipulation\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate over each character in the input text\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(removeVowels(\"\")); // ''\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n        System.out.println(removeVowels(\"abcdef\")); // 'bcdf'\n        System.out.println(removeVowels(\"aaaaa\")); // ''\n        System.out.println(removeVowels(\"aaBAA\")); // 'B'\n        System.out.println(removeVowels(\"zbcd\")); // 'zbcd'\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "import java.util.*;\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int number : l) {\n            if (number >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Example usage:\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // True\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5));  // False\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "return x + y;\n    }\n\n    public static void main(String[] args) {\n        // Example usage of the add method\n        System.out.println(add(2, 3)); // Should print 5\n        System.out.println(add(5, 7)); // Should print 12\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "import java.util.*;\n\nclass SameChars {\n    /**\n     * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        // Create sets to store unique characters of both strings\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        // Add characters of the first string to set0\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        // Add characters of the second string to set1\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        // Compare the two sets\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "class Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n        if (n <= 0) return 0;\n        if (n == 1) return 1;\n\n        int a = 0;\n        int b = 1;\n        int c;\n\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n\n        return b;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fib(10)); // 55\n        System.out.println(fib(1));  // 1\n        System.out.println(fib(8));  // 21\n    }\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "class CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n        // Initialize a counter to keep track of the balance between opening and closing brackets\n        int balance = 0;\n\n        // Iterate through each character in the string\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // Increment balance for an opening bracket\n                balance++;\n            } else if (ch == '>') {\n                // Decrement balance for a closing bracket\n                balance--;\n            }\n\n            // If balance goes negative, it means there's a closing bracket without a matching opening bracket\n            if (balance < 0) {\n                return false;\n            }\n        }\n\n        // If balance is zero, all opening brackets have a matching closing bracket\n        return balance == 0;\n    }\n\n    // Main method to test the function\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"<\"));         // Expected output: False\n        System.out.println(correctBracketing(\"<>\"));        // Expected output: True\n        System.out.println(correctBracketing(\"<<><>>\"));    // Expected output: True\n        System.out.println(correctBracketing(\"><<>\"));      // Expected output: False\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "import java.util.List;\n\nclass Monotonic {\n    /**\n     * Return True if list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n        if (l.isEmpty() || l.size() == 1) {\n            return true; // An empty list or a single-element list is trivially monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> list3 = Arrays.asList(4, 1, 0, -10);\n\n        System.out.println(monotonic(list1)); // True\n        System.out.println(monotonic(list2)); // False\n        System.out.println(monotonic(list3)); // True\n    }\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.util.*;\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * @param l1 List of integers to find common elements from.\n     * @param l2 List of objects to find common elements from.\n     * @return Sorted list of unique common elements.\n     *\n     * Examples:\n     * >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n     * [1, 5, 653]\n     * >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n     * [2, 3]\n     */\n    public static List<Integer> common(List<Integer> l1, List<Object> l2) {\n        // Convert l2 to a set of integers for quick lookup\n        Set<Integer> set2 = new HashSet<>();\n        for (Object obj : l2) {\n            if (obj instanceof Integer) {\n                set2.add((Integer) obj);\n            }\n        }\n\n        // Use a set to collect common elements from l1\n        Set<Integer> commonSet = new HashSet<>();\n        for (Integer num : l1) {\n            if (set2.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n\n        // Convert the set of common elements to a list\n        List<Integer> result = new ArrayList<>(commonSet);\n\n        // Sort the list before returning it\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Object> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(common(list1, list2)); // Output: [1, 5, 653]\n\n        List<Integer> list3 = Arrays.asList(5, 3, 2, 8);\n        List<Object> list4 = Arrays.asList(3, 2);\n        System.out.println(common(list3, list4)); // Output: [2, 3]\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "class LargestPrimeFactor {\n    public static int largestPrimeFactor(int n) {\n        int largestPrime = -1;\n\n        // Divide n by 2 until it becomes odd\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n\n        // Check for odd factors from 3 onwards\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n\n        // If n is still greater than 2, then it's a prime number\n        if (n > 2) {\n            largestPrime = n;\n        }\n\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195)); // Output: 29\n        System.out.println(largestPrimeFactor(2048));  // Output: 2\n        // Additional Test Cases\n        System.out.println(largestPrimeFactor(56));    // Output: 7\n        System.out.println(largestPrimeFactor(100));   // Output: 5\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "class SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sumToN(30));  // Output: 465\n        System.out.println(sumToN(100)); // Output: 5050\n        System.out.println(sumToN(5));   // Output: 15\n        System.out.println(sumToN(10));  // Output: 55\n        System.out.println(sumToN(1));   // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "class CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * @param brackets the string containing the brackets\n     * @return True if every opening bracket has a corresponding closing bracket.\n     */\n    public static Boolean correctBracketing(String brackets) {\n        // Initialize a counter to keep track of balance between opening and closing brackets\n        int balance = 0;\n        \n        // Traverse each character in the string\n        for (char ch : brackets.toCharArray()) {\n            // If an opening bracket is found, increment the balance\n            if (ch == '(') {\n                balance++;\n            } \n            // If a closing bracket is found, decrement the balance\n            else if (ch == ')') {\n                balance--;\n            }\n            \n            // If at any point the balance is negative, it means there's a closing bracket without a corresponding opening bracket\n            if (balance < 0) {\n                return false;\n            }\n        }\n        \n        // If the balance is zero at the end, all opening brackets have corresponding closing brackets\n        return balance == 0;\n    }\n\n    // A main method for testing purposes\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"(\")); // False\n        System.out.println(correctBracketing(\"()\")); // True\n        System.out.println(correctBracketing(\"(()())\")); // True\n        System.out.println(correctBracketing(\")(()\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "import java.util.*;\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Object> result = new ArrayList<>();\n        \n        // Iterate through the list, starting from index 1\n        for (int i = 1; i < xs.size(); i++) {\n            // Calculate the derivative coefficient for x^(i-1)\n            result.add(i * xs.get(i));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> poly1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> poly2 = Arrays.asList(1, 2, 3);\n        \n        System.out.println(derivative(poly1)); // Output: [1, 4, 12, 20]\n        System.out.println(derivative(poly2)); // Output: [2, 6]\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "public class Fibfib {\n    // Function to compute the n-th element of the FibFib number sequence\n    public static int fibfib(int n) {\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        \n        // Array to store computed values\n        int[] dp = new int[n + 1];\n        \n        // initializing base cases\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        \n        // Compute the sequence iteratively for all values up to n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n        \n        // Return the n-th element\n        return dp[n];\n    }\n\n    // Main function to test the fibfib function\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "class VowelsCount {\n    public static int vowelsCount(String s) {\n        // Convert the string to lowercase to make the comparison case-insensitive\n        s = s.toLowerCase();\n        // Define the set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        int count = 0;\n        \n        // Iterate through the string, character by character\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (vowels.contains(c)) {\n                count++;\n            }\n            // Special case for 'y' at the end of the string\n            else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n        System.out.println(vowelsCount(\"Hello\")); // Output: 2\n        System.out.println(vowelsCount(\"Y\"));     // Output: 1\n        System.out.println(vowelsCount(\"rhythm\")); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "class CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n        // Convert the integer to a string\n        String str = Integer.toString(x);\n        int length = str.length();\n\n        // If shift is greater than or equal to the number of digits, return the reversed string\n        if (shift >= length) {\n            return new StringBuilder(str).reverse().toString();\n        }\n\n        // Perform the circular shift\n        // Split the string at the (length - shift) position\n        String part1 = str.substring(length - shift);\n        String part2 = str.substring(0, length - shift);\n\n        // Concatenate the parts in the new order\n        return part1 + part2;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(circularShift(12, 1)); // \"21\"\n        System.out.println(circularShift(12, 2)); // \"12\"\n        System.out.println(circularShift(12345, 3)); // \"34512\"\n        System.out.println(circularShift(123, 5)); // \"321\"\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "public class Digitsum {\n    public static int digitsum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                sum += (int) ch;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(digitsum(\"\")); // 0\n        System.out.println(digitsum(\"abAB\")); // 131\n        System.out.println(digitsum(\"abcCd\")); // 67\n        System.out.println(digitsum(\"helloE\")); // 69\n        System.out.println(digitsum(\"woArBld\")); // 131\n        System.out.println(digitsum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "class FruitDistribution {\n\n    public static int fruitDistribution(String s, int n) {\n        // Split the string into parts.\n        String[] parts = s.split(\" \");\n        \n        // Initialize the number of apples and oranges.\n        int apples = 0;\n        int oranges = 0;\n        \n        // Traverse the parts to find the numbers associated with apples and oranges.\n        for (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"apples\")) {\n                apples = Integer.parseInt(parts[i - 1]);\n            } else if (parts[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[i - 1]);\n            }\n        }\n        \n        // Calculate the number of mangoes.\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "class Pluck {\n    public static List<Object> pluck(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Integer smallestEvenValue = null;\n        int smallestEvenIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0) {\n                if (smallestEvenValue == null || value < smallestEvenValue) {\n                    smallestEvenValue = value;\n                    smallestEvenIndex = i;\n                }\n            }\n        }\n\n        if (smallestEvenValue == null) {\n            return new ArrayList<>();\n        }\n\n        List<Object> result = new ArrayList<>();\n        result.add(smallestEvenValue);\n        result.add(smallestEvenIndex);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(pluck(Arrays.asList())); // Output: []\n        System.out.println(pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     */\n    public static int search(List<Integer> lst) {\n        // Create a HashMap to count the frequency of each integer\n        HashMap<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        int result = -1;\n\n        // Iterate through the map to find the greatest integer meeting the condition\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        System.out.println(search(list1)); // Output: 2\n\n        List<Integer> list2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        System.out.println(search(list2)); // Output: 3\n\n        List<Integer> list3 = Arrays.asList(5, 5, 4, 4, 4);\n        System.out.println(search(list3)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.*;\n\nclass StrangeSortList {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n        // Check if the list is empty\n        if (lst == null || lst.isEmpty()) {\n            return lst;\n        }\n        \n        // Copy the list and sort it\n        List<Integer> sortedList = new ArrayList<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sortedList.add((Integer) obj);\n            } else {\n                throw new IllegalArgumentException(\"List should only contain integers.\");\n            }\n        }\n        Collections.sort(sortedList);\n        \n        // Create a deque to facilitate removing from both ends\n        Deque<Integer> deque = new ArrayDeque<>(sortedList);\n        \n        // Create the result list\n        List<Object> result = new ArrayList<>();\n        \n        // Alternately add the smallest and largest remaining elements\n        boolean addFromFront = true;\n        while (!deque.isEmpty()) {\n            if (addFromFront) {\n                result.add(deque.pollFirst());\n            } else {\n                result.add(deque.pollLast());\n            }\n            addFromFront = !addFromFront;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(strangeSortList(list1)); // Output: [1, 4, 2, 3]\n\n        List<Object> list2 = Arrays.asList(5, 5, 5, 5);\n        System.out.println(strangeSortList(list2)); // Output: [5, 5, 5, 5]\n\n        List<Object> list3 = new ArrayList<>();\n        System.out.println(strangeSortList(list3)); // Output: []\n\n        List<Object> list4 = Arrays.asList(7, 1, 5, 3, 9, 2);\n        System.out.println(strangeSortList(list4)); // Output: [1, 9, 2, 7, 3, 5]\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "class TriangleArea {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2.0;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal places\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // The sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(triangleArea(3, 4, 5)); // 6.00\n        System.out.println(triangleArea(1, 2, 10)); // -1\n        System.out.println(triangleArea(7, 10, 5)); // 16.25\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - 1 - i))) {\n                return false; // The list is not palindromic\n            }\n        }\n        \n        // Check if the sum of the list's elements is less than or equal to w\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2);\n        System.out.println(willItFly(test1, 5)); // False\n\n        List<Integer> test2 = Arrays.asList(3, 2, 3);\n        System.out.println(willItFly(test2, 1)); // False\n\n        List<Integer> test3 = Arrays.asList(3, 2, 3);\n        System.out.println(willItFly(test3, 9)); // True\n\n        List<Integer> test4 = Arrays.asList(3);\n        System.out.println(willItFly(test4, 5)); // True\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.util.*;\n\nclass SmallestChange {\n    public static int smallestChange(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(smallestChange(arr1)); // Output: 4\n        System.out.println(smallestChange(arr2)); // Output: 1\n        System.out.println(smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.util.*;\n\npublic class TotalMatch {\n\n    // Helper method to calculate the total number of characters in a list of strings\n    private static int getTotalChars(List<String> list) {\n        int totalChars = 0;\n        for (String str : list) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = getTotalChars(lst1);\n        int totalCharsLst2 = getTotalChars(lst2);\n\n        if (totalCharsLst1 <= totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(totalMatch(Arrays.asList(), Arrays.asList())); // \u279e []\n        System.out.println(totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // \u279e [\"hI\", \"Hi\"]\n        System.out.println(totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // \u279e [\"hi\", \"admin\"]\n        System.out.println(totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // \u279e [\"hI\", \"hi\", \"hi\"]\n        System.out.println(totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // \u279e [\"4\"]\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.util.*;\n\nclass IsMultiplyPrime {\n    // Helper method to generate all primes less than 100\n    public static List<Integer> generatePrimes(int max) {\n        boolean[] isPrime = new boolean[max + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i * i <= max; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= max; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= max; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    // Main method to check if the number is a product of exactly three primes\n    public static Boolean isMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        \n        // Get all primes less than 100\n        List<Integer> primes = generatePrimes(100);\n        \n        // Check all combinations of three primes\n        int size = primes.size();\n        for (int i = 0; i < size; i++) {\n            for (int j = i; j < size; j++) {\n                for (int k = j; k < size; k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isMultiplyPrime(30)); // True: 2 * 3 * 5\n        System.out.println(isMultiplyPrime(60)); // True: 2 * 3 * 5\n        System.out.println(isMultiplyPrime(100)); // False\n        System.out.println(isMultiplyPrime(105)); // False\n        System.out.println(isMultiplyPrime(210)); // True: 2 * 3 * 5 * 7\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "public class IsSimplePower {\n    public static Boolean isSimplePower(int x, int n) {\n        if (x == 1) {\n            return true; // 1 is always a power of any number (0th power)\n        }\n        if (n == 1) {\n            return x == 1; // Only 1 can be a power of 1\n        }\n        \n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1, 4)); // true\n        System.out.println(isSimplePower(2, 2)); // true\n        System.out.println(isSimplePower(8, 2)); // true\n        System.out.println(isSimplePower(3, 2)); // false\n        System.out.println(isSimplePower(3, 1)); // false\n        System.out.println(isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "class Iscube {\n    /**\n     * Write a function that takes an integer a and returns True \n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        \n        int absValue = Math.abs(a);\n        int cubeRoot = (int) Math.round(Math.cbrt(absValue));\n        \n        return cubeRoot * cubeRoot * cubeRoot == absValue;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(iscube(1));   // True\n        System.out.println(iscube(2));   // False\n        System.out.println(iscube(-1));  // True\n        System.out.println(iscube(64));  // True\n        System.out.println(iscube(0));   // True\n        System.out.println(iscube(180)); // False\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "class HexKey {\n    public static int hexKey(Object num) {\n        if (num == null || !(num instanceof String)) {\n            return 0;\n        }\n\n        String hexNum = (String) num;\n        if (hexNum.isEmpty()) {\n            return 0;\n        }\n\n        // Set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        int primeCount = 0;\n\n        // Loop through each character in the string\n        for (char c : hexNum.toCharArray()) {\n            if (primeHexDigits.contains(c)) {\n                primeCount++;\n            }\n        }\n\n        return primeCount;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(hexKey(\"AB\"));         // Output: 1\n        System.out.println(hexKey(\"1077E\"));      // Output: 2\n        System.out.println(hexKey(\"ABED1A33\"));   // Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(hexKey(\"2020\"));       // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "public class DecimalToBinary {\n    /**\n     * Converts a decimal number to its binary representation and formats it with 'db' at the beginning and end.\n     *\n     * @param decimal the decimal number to convert\n     * @return the formatted binary representation\n     */\n    public static String decimalToBinary(int decimal) {\n        // Convert the decimal number to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the binary string with 'db' at the beginning and end\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        // Test the method with some examples\n        System.out.println(decimalToBinary(15)); // Output: db1111db\n        System.out.println(decimalToBinary(32)); // Output: db100000db\n        System.out.println(decimalToBinary(0));  // Output: db0db\n        System.out.println(decimalToBinary(1));  // Output: db1db\n        System.out.println(decimalToBinary(255)); // Output: db11111111db\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "class IsHappy {\n    public static Boolean isHappy(String s) {\n        // Step 1: Check if the length of the string is less than 3\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        // Step 2: Iterate through the string and check every three consecutive characters\n        for (int i = 0; i < s.length() - 2; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n            \n            // Step 3: Check if all three characters are distinct\n            if (first == second || first == third || second == third) {\n                return false; // If not distinct, return false\n            }\n        }\n        \n        // Step 4: If all sets of three consecutive characters are distinct, return true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isHappy(\"a\"));      // False\n        System.out.println(isHappy(\"aa\"));     // False\n        System.out.println(isHappy(\"abcd\"));   // True\n        System.out.println(isHappy(\"aabb\"));   // False\n        System.out.println(isHappy(\"adb\"));    // True\n        System.out.println(isHappy(\"xyy\"));    // False\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "import java.util.*;\n\nclass NumericalLetterGrade {\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            \n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else if (gpa == 0.0) {\n                letterGrades.add(\"E\");\n            } else {\n                letterGrades.add(\"Invalid GPA\"); // Handle unexpected cases\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        List<String> letterGrades = numericalLetterGrade(grades);\n        System.out.println(letterGrades); // Output: [A+, B, C-, C, A-]\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "class PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private static Boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true; // 2 is the only even prime number\n        if (number % 2 == 0) return false; // other even numbers are not prime\n\n        // check for factors from 3 to the square root of the number\n        for (int i = 3; i <= Math.sqrt(number); i += 2) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\")); // True\n        System.out.println(primeLength(\"abcdcba\")); // True\n        System.out.println(primeLength(\"kittens\")); // True\n        System.out.println(primeLength(\"orange\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "class StartsOneEnds {\n    /**\n     * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     */\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            // For n=1, the numbers are 1 to 9. All of them start with 1.\n            // Numbers that end with 1: 1.\n            // So, total unique numbers that start or end with 1 are 1.\n            return 1;\n        }\n        \n        // Calculate the count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Calculate the count of numbers that end with 1\n        int endWithOne = 9 * (int) Math.pow(10, n - 2);\n        \n        // Calculate the count of numbers that both start and end with 1\n        int startAndEndWithOne = (int) Math.pow(10, n - 2);\n        \n        // Apply the principle of inclusion-exclusion\n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(startsOneEnds(1)); // Output: 1\n        System.out.println(startsOneEnds(2)); // Output: 18\n        System.out.println(startsOneEnds(3)); // Output: 189\n        // Add more test cases as needed.\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "class Solve {\n    public static String solve(int n) {\n        // Step 1: Calculate the sum of the digits of N\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10; // Add the last digit to the sum\n            n /= 10;       // Remove the last digit\n        }\n\n        // Step 2: Convert the sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        // Testing the solve method\n        System.out.println(solve(1000)); // Output should be \"1\"\n        System.out.println(solve(150));  // Output should be \"110\"\n        System.out.println(solve(147));  // Output should be \"1100\"\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "import java.util.*;\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst, add the even elements that are at odd indices.\n     *\n     * Examples:\n     *     add(Arrays.asList(4, 2, 6, 7)) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2 to get odd indices\n            int element = lst.get(i);\n            if (element % 2 == 0) { // Check if the element is even\n                sum += element;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n        System.out.println(add(Arrays.asList(1, 3, 5, 7))); // Output: 0 (no even elements at odd indices)\n        System.out.println(add(Arrays.asList(2, 4, 6, 8, 10, 12))); // Output: 20 (4 + 8 + 12)\n        System.out.println(add(Arrays.asList(0, 0, 0, 0, 0, 0))); // Output: 0 (even elements but they are all zero)\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "import java.util.*;\n\nclass AntiShuffle {\n    public static String antiShuffle(String s) {\n        StringBuilder result = new StringBuilder();\n        StringBuilder word = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (c == ' ') {\n                if (word.length() > 0) {\n                    char[] chars = word.toString().toCharArray();\n                    Arrays.sort(chars);\n                    result.append(new String(chars));\n                    word.setLength(0);\n                }\n                result.append(c);\n            } else {\n                word.append(c);\n            }\n        }\n        \n        // Append the last word if there is any\n        if (word.length() > 0) {\n            char[] chars = word.toString().toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(antiShuffle(\"Hi\")); // Hi\n        System.out.println(antiShuffle(\"hello\")); // ehllo\n        System.out.println(antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n        System.out.println(antiShuffle(\"This is a test\")); // This is a estt\n        System.out.println(antiShuffle(\"   Multiple    spaces   \")); //    Elmiltpu    acepss   \n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n    \n    public static List<int[]> getRow(List<List<Integer>> lst, int x) {\n        List<int[]> result = new ArrayList<>();\n        \n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            // Iterate through each column in the row\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new int[]{i, j});\n                }\n            }\n        }\n        \n        // Sort by row in ascending order and by column in descending order (in case of ties)\n        Collections.sort(result, (a, b) -> {\n            if (a[0] == b[0]) {\n                return b[1] - a[1];\n            } else {\n                return a[0] - b[0];\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<List<Integer>> lst1 = Arrays.asList(\n                Arrays.asList(1, 2, 3, 4, 5, 6),\n                Arrays.asList(1, 2, 3, 4, 1, 6),\n                Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(formatResult(getRow(lst1, 1))); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(formatResult(getRow(lst2, 1))); // []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n                new ArrayList<>(),\n                Arrays.asList(1),\n                Arrays.asList(1, 2, 3)\n        );\n        System.out.println(formatResult(getRow(lst3, 3))); // [(2, 2)]\n    }\n\n    // Helper method to format the result for printing\n    private static String formatResult(List<int[]> result) {\n        StringBuilder sb = new StringBuilder(\"[\");\n        for (int i = 0; i < result.size(); i++) {\n            if (i > 0) sb.append(\", \");\n            sb.append(\"(\").append(result.get(i)[0]).append(\", \").append(result.get(i)[1]).append(\")\");\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "public class SortArray {\n\n    public static List<Object> sortArray(List<Object> array) {\n        // Check for empty or single-element lists\n        if (array == null || array.size() <= 1) {\n            return array;\n        }\n        \n        // Convert List<Object> to List<Integer> for easier numerical operations\n        List<Integer> intArray = new ArrayList<>();\n        for (Object obj : array) {\n            if (obj instanceof Integer) {\n                intArray.add((Integer) obj);\n            } else {\n                throw new IllegalArgumentException(\"All elements must be of type Integer\");\n            }\n        }\n\n        // Calculate the sum of the first and last elements\n        int firstElement = intArray.get(0);\n        int lastElement = intArray.get(intArray.size() - 1);\n        int sum = firstElement + lastElement;\n\n        // Create a copy of the array\n        List<Integer> sortedArray = new ArrayList<>(intArray);\n\n        // Sort based on the sum\n        if (sum % 2 == 0) {\n            // Sum is even, sort in descending order\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            // Sum is odd, sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        // Convert back to List<Object> before returning\n        List<Object> result = new ArrayList<>();\n        result.addAll(sortedArray);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortArray(Arrays.asList())); // Output: []\n        System.out.println(sortArray(Arrays.asList(5))); // Output: [5]\n        System.out.println(sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // Output: [0, 1, 2, 3, 4, 5]\n        System.out.println(sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // Output: [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "public class Encrypt {\n\n    public static String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isLowerCase(ch) ? 'a' : 'A';\n                char shifted = (char) ((ch - base + 4) % 26 + base);\n                encrypted.append(shifted);\n            } else {\n                encrypted.append(ch);  // In case there are non-letter characters\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(encrypt(\"hi\"));          // Output: lm\n        System.out.println(encrypt(\"asdfghjkl\"));   // Output: ewhjklnop\n        System.out.println(encrypt(\"gf\"));          // Output: kj\n        System.out.println(encrypt(\"et\"));          // Output: ix\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    public static Integer nextSmallest(List<Object> lst) {\n        // Create a TreeSet to store unique integers in sorted order\n        TreeSet<Integer> uniqueIntegers = new TreeSet<>();\n        \n        // Iterate through the list and add only integers to the TreeSet\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                uniqueIntegers.add((Integer) obj);\n            }\n        }\n        \n        // Check if there are at least two distinct elements\n        if (uniqueIntegers.size() < 2) {\n            return null;\n        }\n        \n        // Retrieve the second smallest element\n        Iterator<Integer> iterator = uniqueIntegers.iterator();\n        iterator.next(); // Skip the smallest element\n        return iterator.next(); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Output: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Output: 2\n        System.out.println(nextSmallest(Collections.emptyList())); // Output: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "public class IsBored {\n    public static int isBored(String s) {\n        // Split the string based on delimiters '.', '?' and '!'\n        String[] sentences = s.split(\"[.?!]\");\n        \n        int boredCount = 0;\n\n        // Iterate through each sentence\n        for (String sentence : sentences) {\n            // Trim the sentence to remove leading and trailing spaces\n            sentence = sentence.trim();\n            \n            // Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                boredCount++;\n            }\n        }\n\n        return boredCount;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isBored(\"Hello world\")); // Output: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        System.out.println(isBored(\"I am happy! Are you happy? I hope so.\")); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "class AnyInt {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) \u279e True\n     * \n     * any_int(3, 2, 2) \u279e False\n     * \n     * any_int(3, -2, 1) \u279e True\n     * \n     * any_int(3.6, -2.2, 2) \u279e False\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        // Check if all inputs are integers\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Cast to integers\n        int ix = x.intValue();\n        int iy = y.intValue();\n        int iz = z.intValue();\n\n        // Check if any one number is equal to the sum of the other two\n        return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(anyInt(5, 2, 7));  // true\n        System.out.println(anyInt(3, 2, 2));  // false\n        System.out.println(anyInt(3, -2, 1)); // true\n        System.out.println(anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "class Encode {\n    public static String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                // Swap case\n                char swappedCaseChar = Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n\n                // Replace vowels\n                switch (swappedCaseChar) {\n                    case 'a': swappedCaseChar = 'c'; break;\n                    case 'e': swappedCaseChar = 'g'; break;\n                    case 'i': swappedCaseChar = 'k'; break;\n                    case 'o': swappedCaseChar = 'q'; break;\n                    case 'u': swappedCaseChar = 'w'; break;\n                    case 'A': swappedCaseChar = 'C'; break;\n                    case 'E': swappedCaseChar = 'G'; break;\n                    case 'I': swappedCaseChar = 'K'; break;\n                    case 'O': swappedCaseChar = 'Q'; break;\n                    case 'U': swappedCaseChar = 'W'; break;\n                }\n                encodedMessage.append(swappedCaseChar);\n            } else {\n                encodedMessage.append(ch);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(encode(\"test\")); // Output should be 'TGST'\n        System.out.println(encode(\"This is a message\")); // Output should be 'tHKS KS C MGSSCGG'\n    }\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.util.*;\n\nclass Skjkasdkd {\n    // Utility method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n    \n    // Method to sum the digits of a number\n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n    \n    // Main method to find the largest prime and return the sum of its digits\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Find the largest prime in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime was found, return 0\n        if (largestPrime == -1) {\n            return 0;\n        }\n        \n        // Return the sum of the digits of the largest prime\n        return sumOfDigits(largestPrime);\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        \n        System.out.println(skjkasdkd(lst1)); // Output: 10\n        System.out.println(skjkasdkd(lst2)); // Output: 25\n        System.out.println(skjkasdkd(lst3)); // Output: 13\n        System.out.println(skjkasdkd(lst4)); // Output: 11\n        System.out.println(skjkasdkd(lst5)); // Output: 3\n        System.out.println(skjkasdkd(lst6)); // Output: 7\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.util.*;\n\npublic class CheckDictCase {\n    /**\n     * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False if the given dictionary is empty.\n     * Examples:\n     * checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(checkDictCase(dict1)); // should return True\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(checkDictCase(dict2)); // should return False\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(checkDictCase(dict3)); // should return False\n\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(checkDictCase(dict4)); // should return False\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(checkDictCase(dict5)); // should return True\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass CountUpTo {\n    // Helper function to check if a number is prime\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main function to count up to primes less than n\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(countUpTo(5));   // Output: [2, 3]\n        System.out.println(countUpTo(11));  // Output: [2, 3, 5, 7]\n        System.out.println(countUpTo(0));   // Output: []\n        System.out.println(countUpTo(20));  // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(countUpTo(1));   // Output: []\n        System.out.println(countUpTo(18));  // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "class Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n        // Get the unit digit of both numbers\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        \n        // Multiply the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(multiply(148, 412)); // should return 16\n        System.out.println(multiply(19, 28));   // should return 72\n        System.out.println(multiply(2020, 1851)); // should return 0\n        System.out.println(multiply(14, -15));  // should return 20\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "public class CountUpper {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * countUpper('aBCdEf') returns 1\n     * countUpper('abcdefg') returns 0\n     * countUpper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n        // Define a set of uppercase vowels for quick lookup\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        int count = 0;\n\n        // Iterate over the characters of the string\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && uppercaseVowels.contains(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(countUpper(\"aBCdEf\")); // Output: 1\n        System.out.println(countUpper(\"abcdefg\")); // Output: 0\n        System.out.println(countUpper(\"dBBE\")); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "public class ClosestInteger {\n    public static int closestInteger(String value) {\n        // Parse the string to a double\n        double num = Double.parseDouble(value);\n        \n        // Separate the integer part and the decimal part\n        int integerPart = (int) num;\n        double decimalPart = num - integerPart;\n        \n        // Handle the rounding away from zero\n        if (decimalPart > 0.5) {\n            return integerPart + 1;\n        } else if (decimalPart < -0.5) {\n            return integerPart - 1;\n        } else if (decimalPart == 0.5) {\n            return integerPart + 1;\n        } else if (decimalPart == -0.5) {\n            return integerPart - 1;\n        } else {\n            return integerPart;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(closestInteger(\"10\"));     // Expected output: 10\n        System.out.println(closestInteger(\"15.3\"));   // Expected output: 15\n        System.out.println(closestInteger(\"14.5\"));   // Expected output: 15\n        System.out.println(closestInteger(\"-14.5\"));  // Expected output: -15\n        System.out.println(closestInteger(\"0.5\"));    // Expected output: 1\n        System.out.println(closestInteger(\"-0.5\"));   // Expected output: -1\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "import java.util.*;\n\nclass MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        \n        int nextStoneCount = n; // Start with n\n        \n        for (int i = 1; i < n; i++) {\n            if (nextStoneCount % 2 == 0) {\n                nextStoneCount += 2; // If even, add the next even number\n            } else {\n                nextStoneCount += 2; // If odd, add the next odd number\n            }\n            pile.add(nextStoneCount);\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        // Test examples\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n        System.out.println(makeAPile(4)); // Output: [4, 6, 8, 10]\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.util.*;\n\nclass WordsString {\n    /**\n     * This method takes a string of words separated by commas or spaces\n     * and splits it into individual words.\n     * \n     * @param s the input string containing words separated by commas or spaces.\n     * @return a List containing the individual words.\n     */\n    public static List<String> wordsString(String s) {\n        // Split the input string by commas or spaces using regular expressions\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n\n        // Convert the array to a list and return it\n        return Arrays.asList(wordsArray);\n    }\n\n    // Main method for testing purposes\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "class ChooseNum {\n    public static int chooseNum(int x, int y) {\n        // Ensure x is the smaller number and y is the larger number\n        if (x > y) {\n            return -1;\n        }\n\n        // Start from y and go downwards to x\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n\n        // If no even number is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(chooseNum(12, 15)); // Should print 14\n        System.out.println(chooseNum(13, 12)); // Should print -1\n        System.out.println(chooseNum(8, 10));  // Should print 10\n        System.out.println(chooseNum(5, 5));   // Should print -1\n    }\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "class RoundedAvg {\n    public static Object roundedAvg(int n, int m) {\n        // Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n        \n        // Calculate the sum of integers from n to m\n        int count = m - n + 1; // Number of integers from n to m\n        long sum = (long)count * (n + m) / 2; // Sum of the integers\n        \n        // Calculate the average and round it to the nearest integer\n        double average = sum / (double)count;\n        int roundedAvg = (int)Math.round(average);\n        \n        // Convert the rounded average to binary string\n        String binaryString = \"0b\" + Integer.toBinaryString(roundedAvg);\n        \n        return binaryString;\n    }\n    \n    // Main method to test the function\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // Output: \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // Output: -1\n        System.out.println(roundedAvg(10, 20)); // Output: \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // Output: \"0b11010\"\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.util.*;\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> uniqueDigits(List.of(15, 33, 1422, 1))\n     * [1, 15, 33]\n     * >>> uniqueDigits(List.of(152, 323, 1422, 10))\n     * []\n     *\n     */\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    private static boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) { // check if the digit is even\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(uniqueDigits(List.of(15, 33, 1422, 1))); // [1, 15, 33]\n        System.out.println(uniqueDigits(List.of(152, 323, 1422, 10))); // []\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "class ByLength {\n    public static List<Object> byLength(List<Object> arr) {\n        // Step 1: Filter the input list to retain only integers between 1 and 9 inclusive\n        List<Integer> filtered = new ArrayList<>();\n        for (Object obj : arr) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num >= 1 && num <= 9) {\n                    filtered.add(num);\n                }\n            }\n        }\n\n        // Step 2: Sort the filtered integers in ascending order\n        Collections.sort(filtered);\n\n        // Step 3: Reverse the sorted list\n        Collections.reverse(filtered);\n\n        // Step 4: Map each integer to its corresponding English name\n        List<String> names = new ArrayList<>();\n        String[] numberNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        for (int num : filtered) {\n            names.add(numberNames[num - 1]);\n        }\n\n        // Step 5: Return the resulting list of names\n        return new ArrayList<>(names);\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        List<Object> result1 = byLength(arr1);\n        System.out.println(result1);  // Output: [Eight, Five, Four, Three, Two, Two, One, One]\n\n        List<Object> arr2 = Arrays.asList(1, -1, 55);\n        List<Object> result2 = byLength(arr2);\n        System.out.println(result2);  // Output: [One]\n\n        List<Object> arr3 = Arrays.asList();\n        List<Object> result3 = byLength(arr3);\n        System.out.println(result3);  // Output: []\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial for even index\n                result.add(factorial(i));\n            } else {\n                // Calculate sum for odd index\n                result.add(sumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private static int sumUpTo(int num) {\n        return num * (num + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        // Example usage:\n        System.out.println(f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddPalindrome {\n    /**\n     * Given a positive integer n, return a list that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * @param n - the upper limit of the range\n     * @return a list with the number of even and odd palindromes respectively\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    /**\n     * Helper method to check if a number is a palindrome\n     *\n     * @param num - the number to check\n     * @return true if the number is a palindrome, false otherwise\n     */\n    private static boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3)); // Output: [1, 2]\n        System.out.println(evenOddPalindrome(12)); // Output: [4, 6]\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "import java.util.*;\n\npublic class CountNums {\n    /**\n     * Write a function count_nums which takes a list of integers and returns\n     * the number of elements which have a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     */\n    public static int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        if (isNegative) {\n            sum = -sum + 2 * (num % 10);  // Adjust for the first digit being negative\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> test1 = Arrays.asList();\n        List<Integer> test2 = Arrays.asList(-1, 11, -11);\n        List<Integer> test3 = Arrays.asList(1, 1, 2);\n\n        System.out.println(countNums(test1)); // Output: 0\n        System.out.println(countNums(test2)); // Output: 1\n        System.out.println(countNums(test3)); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.util.*;\n\nclass MoveOneBall {\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.isEmpty()) return true;\n\n        int n = arr.size();\n        List<Integer> intArr = new ArrayList<>();\n        for (Object obj : arr) {\n            intArr.add((Integer) obj);\n        }\n\n        // Find the breaking point where the sequence changes from increasing to decreasing\n        int breakPoint = -1;\n        for (int i = 1; i < n; i++) {\n            if (intArr.get(i) < intArr.get(i - 1)) {\n                breakPoint = i;\n                break;\n            }\n        }\n\n        // If no breaking point is found, the array is already sorted\n        if (breakPoint == -1) {\n            return true;\n        }\n\n        // Check if the array can be sorted by a right shift\n        // Verify that the segment after the break point is in increasing order\n        for (int i = breakPoint + 1; i < n; i++) {\n            if (intArr.get(i) < intArr.get(i - 1)) {\n                return false;\n            }\n        }\n\n        // Verify that the segment before the break point is in increasing order\n        if (intArr.get(n - 1) > intArr.get(0)) {\n            return false;\n        }\n\n        // Check if the last element of the array is less than or equal to the first element\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // True\n        System.out.println(moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // False\n        System.out.println(moveOneBall(Arrays.asList(1, 2, 3, 4, 5))); // True\n        System.out.println(moveOneBall(Arrays.asList(5, 1, 2, 3, 4))); // True\n        System.out.println(moveOneBall(Arrays.asList(2, 3, 4, 5, 1))); // True\n        System.out.println(moveOneBall(Arrays.asList(2, 3, 5, 4, 1))); // False\n    }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // If the number of even numbers in lst2 is at least\n        // the number of odd numbers in lst1, return \"YES\".\n        // Otherwise, return \"NO\".\n        if (evenCountInLst2 >= oddCountInLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(exchange(lst1, lst2)); // Output: YES\n        \n        lst1 = Arrays.asList(1, 2, 3, 4);\n        lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(exchange(lst1, lst2)); // Output: NO\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\n\nclass Histogram {\n    public static Map<String, Integer> histogram(String test) {\n        if (test == null || test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        // Split the string by spaces\n        String[] letters = test.split(\" \");\n\n        // Use a HashMap to count occurrences\n        Map<String, Integer> countMap = new HashMap<>();\n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n\n        // Find the maximum count\n        int maxCount = Collections.max(countMap.values());\n\n        // Collect the letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(histogram(\"a b c\")); // {'a': 1, 'b': 1, 'c': 1}\n        System.out.println(histogram(\"a b b a\")); // {'a': 2, 'b': 2}\n        System.out.println(histogram(\"a b c a b\")); // {'a': 2, 'b': 2}\n        System.out.println(histogram(\"b b b b a\")); // {'b': 4}\n        System.out.println(histogram(\"\")); // {}\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "class ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        // Step 1: Construct the resulting string by excluding characters in c\n        StringBuilder result = new StringBuilder();\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Convert StringBuilder to String\n        String resultString = result.toString();\n        \n        // Step 2: Check if the resulting string is a palindrome\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        // Step 3: Return the result string and the boolean value\n        List<Object> output = new ArrayList<>();\n        output.add(resultString);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // Output: [bcd, false]\n        System.out.println(reverseDelete(\"abcdef\", \"b\")); // Output: [acdef, false]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // Output: [cdedc, true]\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.util.*;\n\nclass OddCount {\n\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if (c == '1' || c == '3' || c == '5' || c == '7' || c == '9') {\n                    oddCount++;\n                }\n            }\n            String formattedString = String.format(\"the number of odd elements %dn the str%ng %d of the %dnput.\",\n                                                    oddCount, oddCount, oddCount, oddCount);\n            result.add(formattedString);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> input1 = Arrays.asList(\"1234567\");\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        \n        System.out.println(oddCount(input1));\n        System.out.println(oddCount(input2));\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "import java.util.List;\n\nclass Minsubarraysum {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * \n     * Example:\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     */\n    public static long minsubarraysum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        long minSum = Long.MAX_VALUE;\n        long currentSum = 0;\n\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n\n        System.out.println(minsubarraysum(nums1)); // Output: 1\n        System.out.println(minsubarraysum(nums2)); // Output: -6\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int totalWaterUnits = 0;\n        \n        // Calculate the total units of water in the grid\n        for (List<Integer> row : grid) {\n            for (Integer cell : row) {\n                totalWaterUnits += cell;\n            }\n        }\n        \n        // Calculate the number of bucket operations needed\n        // We use ceiling division to account for any remainder\n        int bucketOperations = (totalWaterUnits + capacity - 1) / capacity;\n        \n        return bucketOperations;\n    }\n\n    public static void main(String[] args) {\n        // Example 1\n        List<List<Integer>> grid1 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 0),\n                Arrays.asList(0, 1, 0, 0),\n                Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(maxFill(grid1, capacity1)); // Output: 6\n\n        // Example 2\n        List<List<Integer>> grid2 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 1),\n                Arrays.asList(0, 0, 0, 0),\n                Arrays.asList(1, 1, 1, 1),\n                Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(maxFill(grid2, capacity2)); // Output: 5\n\n        // Example 3\n        List<List<Integer>> grid3 = Arrays.asList(\n                Arrays.asList(0, 0, 0),\n                Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass SortArray {\n    /**\n     * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n        // Filter negative numbers because the problem specifies non-negative integers\n        List<Integer> nonNegativeIntegers = arr.stream()\n                .filter(o -> o instanceof Integer)\n                .map(o -> (Integer) o)\n                .filter(i -> i >= 0)\n                .collect(Collectors.toList());\n\n        // Sort the list using a custom comparator\n        nonNegativeIntegers.sort(Comparator\n                .comparingInt((Integer x) -> Integer.bitCount(x)) // Compare based on number of 1s in binary representation\n                .thenComparingInt(x -> x) // For the same number of 1s, compare based on decimal value\n        );\n\n        return new ArrayList<>(nonNegativeIntegers);\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(sortArray(arr1)); // Output: [1, 2, 3, 4, 5]\n\n        List<Object> arr2 = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(sortArray(arr2)); // Output: []\n\n        List<Object> arr3 = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(sortArray(arr3)); // Output: [0, 1, 2, 3, 4]\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        // List to store the result words\n        List<String> result = new ArrayList<>();\n\n        // If the input string is empty, return an empty list\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        // Split the string into words based on spaces\n        String[] words = s.split(\" \");\n\n        // Define the set of vowels for easy checking\n        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n\n        // Iterate through each word\n        for (String word : words) {\n            int consonantCount = 0;\n\n            // Count the consonants in the word\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && !vowels.contains(c)) {\n                    consonantCount++;\n                }\n            }\n\n            // If the consonant count matches n, add the word to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2)); // []\n        System.out.println(selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "class GetClosestVowel {\n    public static String getClosestVowel(String word) {\n        // Define vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // If the word is too short to have a vowel between two consonants, return empty string\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        // Traverse the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.contains(currentChar)) {\n                char prevChar = word.charAt(i - 1);\n                char nextChar = word.charAt(i + 1);\n                \n                // Check if the characters before and after are consonants\n                if (!vowels.contains(prevChar) && !vowels.contains(nextChar)) {\n                    return Character.toString(currentChar);\n                }\n            }\n        }\n\n        // If no vowel found that meets the condition, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(getClosestVowel(\"yogurt\")); // Output: \"u\"\n        System.out.println(getClosestVowel(\"FULL\"));   // Output: \"U\"\n        System.out.println(getClosestVowel(\"quick\"));  // Output: \"\"\n        System.out.println(getClosestVowel(\"ab\"));     // Output: \"\"\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.util.*;\n\nclass MatchParens {\n    public static String matchParens(List<String> lst) {\n        // Extract the two strings from the list\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        // Check both possible concatenations\n        if (isBalanced(s1 + s2) || isBalanced(s2 + s1)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // Helper method to check if a string is balanced\n    private static boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            // If at any point balance is negative, it means there are more closing parentheses\n            if (balance < 0) {\n                return false;\n            }\n        }\n        // In the end, balance should be zero for the string to be balanced\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        List<String> test1 = Arrays.asList(\"()(\", \")\");\n        List<String> test2 = Arrays.asList(\")\", \")\");\n        \n        System.out.println(matchParens(test1)); // Output: Yes\n        System.out.println(matchParens(test2)); // Output: No\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.util.*;\n\nclass Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        \n        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);\n        \n        for (int num : arr) {\n            minHeap.add(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        while (!minHeap.isEmpty()) {\n            result.add(minHeap.poll());\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(maximum(arr1, k1)); // Output: [-4, -3, 5]\n        \n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(maximum(arr2, k2)); // Output: [4, 4]\n        \n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(maximum(arr3, k3)); // Output: [2]\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n     * @param lst the list of integers\n     * @return the sum of all odd elements at even positions\n     *\n     * Examples\n     * solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n     * solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n     * solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if position (index) is even\n            if (i % 2 == 0) {\n                // Check if the element is odd\n                if (lst.get(i) % 2 != 0) {\n                    sum += lst.get(i);\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(solution(Arrays.asList(5, 8, 7, 1))); // Output: 12\n        System.out.println(solution(Arrays.asList(3, 3, 3, 3, 3))); // Output: 9\n        System.out.println(solution(Arrays.asList(30, 13, 24, 321))); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "import java.util.List;\n\nclass AddElements {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * Example:\n     *     Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n     *     Output: 24 # sum of 21 + 3\n     *\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (num >= -99 && num <= 99) {\n                sum += num;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output should be 24\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "import java.util.*;\n\nclass GetOddCollatz {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n     * For example:\n     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatzSequence = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatzSequence.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        collatzSequence.add(1); // Add the last 1 which is always part of the sequence.\n        \n        // Sort the list\n        Collections.sort(collatzSequence);\n        \n        return collatzSequence;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); // Should print [1, 5]\n        System.out.println(getOddCollatz(13)); // Should print [1, 5, 13, 17, 25, 41, 53, 65, 97]\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "public class ValidDate {\n    public static Boolean validDate(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Regular expression to match the format mm-dd-yyyy\n        String dateFormat = \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\\\d{4}$\";\n        if (!date.matches(dateFormat)) {\n            return false;\n        }\n\n        // Split the date string into month, day, and year\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Check if the month is within the valid range\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Days in each month\n        int[] daysInMonth = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n        // Check for leap year and adjust days in February\n        if (isLeapYear(year)) {\n            daysInMonth[2] = 29;\n        }\n\n        // Check if the day is within the valid range for the given month\n        if (day < 1 || day > daysInMonth[month]) {\n            return false;\n        }\n\n        // All checks passed, the date is valid\n        return true;\n    }\n\n    // Helper function to determine if a year is a leap year\n    private static boolean isLeapYear(int year) {\n        if (year % 4 != 0) {\n            return false;\n        } else if (year % 100 != 0) {\n            return true;\n        } else if (year % 400 != 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(validDate(\"03-11-2000\")); // True\n        System.out.println(validDate(\"15-01-2012\")); // False\n        System.out.println(validDate(\"04-0-2040\"));  // False\n        System.out.println(validDate(\"06-04-2020\")); // True\n        System.out.println(validDate(\"06/04/2020\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass SplitWords {\n    /**\n     * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            // Split by whitespace\n            return Arrays.stream(txt.split(\"\\\\s+\")).collect(Collectors.toList());\n        } else if (txt.contains(\",\")) {\n            // Split by commas\n            return Arrays.stream(txt.split(\",\")).collect(Collectors.toList());\n        } else {\n            // Count number of lowercase letters with odd order in the alphabet\n            int oddCount = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 != 0)) {\n                    oddCount++;\n                }\n            }\n            return oddCount;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(splitWords(\"Hello world!\")); // \u279e [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"Hello,world!\")); // \u279e [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"abcdef\")); // \u279e 3\n        System.out.println(splitWords(\"a,b,c\")); // \u279e [\"a\", \"b\", \"c\"]\n        System.out.println(splitWords(\"noSpacesOrCommas\")); // \u279e 5\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.util.*;\n\nclass IsSorted {\n    /**\n     * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n     *\n     * Examples\n     * is_sorted([5]) \u279e True\n     * is_sorted([1, 2, 3, 4, 5]) \u279e True\n     * is_sorted([1, 3, 2, 4, 5]) \u279e False\n     * is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n     * is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n     * is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n     */\n    public static Boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int current = lst.get(i);\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (countMap.get(current) > 2) {\n                return false;\n            }\n            if (i > 0 && lst.get(i - 1) > current) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSorted(Arrays.asList(5))); // \u279e True\n        System.out.println(isSorted(Arrays.asList(1, 2, 3, 4, 5))); // \u279e True\n        System.out.println(isSorted(Arrays.asList(1, 3, 2, 4, 5))); // \u279e False\n        System.out.println(isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // \u279e True\n        System.out.println(isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // \u279e True\n        System.out.println(isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // \u279e False\n        System.out.println(isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // \u279e True\n        System.out.println(isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // \u279e False\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "public class Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = Arrays.asList(1, 2);\n        List<Integer> interval2 = Arrays.asList(2, 3);\n        System.out.println(intersection(interval1, interval2)); // NO\n\n        interval1 = Arrays.asList(-1, 1);\n        interval2 = Arrays.asList(0, 4);\n        System.out.println(intersection(interval1, interval2)); // NO\n\n        interval1 = Arrays.asList(-3, -1);\n        interval2 = Arrays.asList(-5, 5);\n        System.out.println(intersection(interval1, interval2)); // YES\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "import java.util.*;\n\nclass ProdSigns {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n     *\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        \n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n        \n        for (int num : arr) {\n            int magnitude = Math.abs(num);\n            int sign = Integer.compare(num, 0); // -1 for negative, 0 for zero, 1 for positive\n            \n            sumOfMagnitudes += magnitude;\n            productOfSigns *= sign;\n        }\n        \n        return sumOfMagnitudes * productOfSigns;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(prodSigns(new ArrayList<>())); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.util.*;\n\nclass Minpath {\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<Path> pq = new PriorityQueue<>();\n        \n        // Initialize the priority queue with paths starting from each cell\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> initialPath = new ArrayList<>();\n                initialPath.add(grid.get(i).get(j));\n                pq.add(new Path(i, j, initialPath));\n            }\n        }\n        \n        // Directions for moving up, down, left, right\n        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        \n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.path.size() == k) {\n                return current.path;\n            }\n            \n            for (int[] dir : directions) {\n                int newRow = current.row + dir[0];\n                int newCol = current.col + dir[1];\n                \n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n                    List<Integer> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(newRow).get(newCol));\n                    pq.add(new Path(newRow, newCol, newPath));\n                }\n            }\n        }\n        \n        return new ArrayList<>(); // Just a fallback, should never happen given the problem constraints\n    }\n    \n    static class Path implements Comparable<Path> {\n        int row, col;\n        List<Integer> path;\n        \n        Path(int row, int col, List<Integer> path) {\n            this.row = row;\n            this.col = col;\n            this.path = path;\n        }\n        \n        @Override\n        public int compareTo(Path other) {\n            for (int i = 0; i < Math.min(this.path.size(), other.path.size()); i++) {\n                if (!this.path.get(i).equals(other.path.get(i))) {\n                    return this.path.get(i) - other.path.get(i);\n                }\n            }\n            return this.path.size() - other.path.size();\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<List<Integer>> grid1 = Arrays.asList(\n                Arrays.asList(1, 2, 3),\n                Arrays.asList(4, 5, 6),\n                Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        System.out.println(minpath(grid1, k1)); // Output: [1, 2, 1]\n\n        List<List<Integer>> grid2 = Arrays.asList(\n                Arrays.asList(5, 9, 3),\n                Arrays.asList(4, 1, 6),\n                Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        System.out.println(minpath(grid2, k2)); // Output: [1]\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    private static Map<Integer, Integer> memo = new HashMap<>();\n\n    private static int computeTri(int n) {\n        if (memo.containsKey(n)) {\n            return memo.get(n);\n        }\n        \n        int result;\n        if (n == 1) {\n            result = 3;\n        } else if (n % 2 == 0) {\n            result = 1 + n / 2;\n        } else {\n            result = computeTri(n - 1) + computeTri(n - 2) + computeTri(n + 1);\n        }\n        \n        memo.put(n, result);\n        return result;\n    }\n\n    public static List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n            result.add(computeTri(i));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Example usage:\n        int n = 3;\n        List<Integer> sequence = tri(n);\n        System.out.println(sequence);  // Output: [3, 2, 8, 3]\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "public class Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n\n        return hasOdd ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digits(1));   // Output: 1\n        System.out.println(digits(4));   // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "public class IsNested {\n    public static Boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        // If there's still something on the stack after popping,\n                        // it means the current ']' is nested inside another '['\n                        nested = true;\n                    }\n                } else {\n                    // If we encounter a ']' without a matching '['\n                    return false;\n                }\n            }\n        }\n        // After processing all brackets, if the stack is empty and we found nesting, it is valid\n        return nested && stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // \u279e True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // \u279e False\n        System.out.println(isNested(\"[][]\")); // \u279e False\n        System.out.println(isNested(\"[]\")); // \u279e False\n        System.out.println(isNested(\"[[][]]\")); // \u279e True\n        System.out.println(isNested(\"[[]][[\")); // \u279e True\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "class SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number number : lst) {\n            // Convert the number to a double and apply the ceiling function\n            int ceilValue = (int) Math.ceil(number.doubleValue());\n            // Square the value and add it to the sum\n            sum += ceilValue * ceilValue;\n        }\n        return sum;\n    }\n\n    // Main method to test the function\n    public static void main(String[] args) {\n        List<Number> lst1 = Arrays.asList(1, 2, 3);\n        List<Number> lst2 = Arrays.asList(1, 4, 9);\n        List<Number> lst3 = Arrays.asList(1, 3, 5, 7);\n        List<Number> lst4 = Arrays.asList(1.4, 4.2, 0);\n        List<Number> lst5 = Arrays.asList(-2.4, 1, 1);\n\n        System.out.println(sumSquares(lst1)); // Output should be 14\n        System.out.println(sumSquares(lst2)); // Output should be 98\n        System.out.println(sumSquares(lst3)); // Output should be 84\n        System.out.println(sumSquares(lst4)); // Output should be 29\n        System.out.println(sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n     * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n     * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n     * check_if_last_char_is_a_letter(\"\") \u279e False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        // Trim any trailing spaces\n        txt = txt.trim();\n        \n        // Check if the string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is a letter\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        // Check if the last character is part of a word\n        // If the last character is the first character of the string, it's not part of a word\n        // Else, we need to check if the character before it is a letter\n        if (txt.length() > 1 && Character.isLetter(txt.charAt(txt.length() - 2))) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // \u279e False \n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "class CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Integer> arr) {\n        // Iterate from the end of the list to the beginning\n        for (int i = arr.size() - 1; i > 0; i--) {\n            // Check if the current element is not greater than or equal to the previous element\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        // If no such element is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> test1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(canArrange(test1)); // Output: 3\n        System.out.println(canArrange(test2)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.util.*;\n\npublic class LargestSmallestIntegers {\n    /**\n     * Create a function that returns a list where the first element is\n     * the largest of negative integers, and the second element is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as null.\n     *\n     * @param lst List of objects (expected to be integers)\n     * @return List containing the largest negative integer and the smallest positive integer\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n\n                if (num < 0) {\n                    if (largestNegative == null || num > largestNegative) {\n                        largestNegative = num;\n                    }\n                } else if (num > 0) {\n                    if (smallestPositive == null || num < smallestPositive) {\n                        smallestPositive = num;\n                    }\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        // Sample test cases\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // [null, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(-1, -2, -3, 2, 3, 4))); // [-1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "public class CompareOne {\n    \n    public static Object compareOne(Object a, Object b) {\n        Double valA = parseToDouble(a);\n        Double valB = parseToDouble(b);\n        \n        if (valA == null || valB == null) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        if (valA.equals(valB)) {\n            return null;\n        }\n        \n        if (valA > valB) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    private static Double parseToDouble(Object obj) {\n        if (obj instanceof Integer) {\n            return ((Integer) obj).doubleValue();\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            // Replace comma with dot if present\n            str = str.replace(',', '.');\n            try {\n                return Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                return null;\n            }\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(compareOne(1, 2.5));         // \u279e 2.5\n        System.out.println(compareOne(1, \"2,3\"));       // \u279e \"2,3\"\n        System.out.println(compareOne(\"5,1\", \"6\"));     // \u279e \"6\"\n        System.out.println(compareOne(\"1\", 1));         // \u279e null\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "class IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n        // Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        \n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // If n is even and greater than or equal to 8, return true\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isEqualToSumEven(4)); // False\n        System.out.println(isEqualToSumEven(6)); // False\n        System.out.println(isEqualToSumEven(8)); // True\n        System.out.println(isEqualToSumEven(10)); // True\n        System.out.println(isEqualToSumEven(12)); // True\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "public class SpecialFactorial {\n\n    /**\n     * Helper method to calculate factorial of a number.\n     */\n    private static long factorial(int num) {\n        long result = 1;\n        for (int i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     *\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n        long specialFactorialResult = 1;\n        for (int i = 1; i <= n; i++) {\n            specialFactorialResult *= factorial(i);\n        }\n        return specialFactorialResult;\n    }\n\n    public static void main(String[] args) {\n        // Example test case\n        int number = 4;\n        System.out.println(\"Special factorial of \" + number + \" is: \" + specialFactorial(number));\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "class FixSpaces {\n    /**\n     * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        // Replace all sequences of 3 or more spaces with a hyphen\n        text = text.replaceAll(\" {3,}\", \"-\");\n\n        // Replace all remaining spaces with underscores\n        text = text.replaceAll(\" \", \"_\");\n\n        return text;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fixSpaces(\"Example\").equals(\"Example\")); // true\n        System.out.println(fixSpaces(\"Example 1\").equals(\"Example_1\")); // true\n        System.out.println(fixSpaces(\" Example 2\").equals(\"_Example_2\")); // true\n        System.out.println(fixSpaces(\" Example   3\").equals(\"_Example-3\")); // true\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "public class FileNameCheck {\n\n    public static String fileNameCheck(String fileName) {\n        // Check if the file name contains exactly one dot\n        int dotIndex = fileName.lastIndexOf('.');\n        if (dotIndex == -1 || dotIndex != fileName.indexOf('.')) {\n            return \"No\";\n        }\n\n        String prefix = fileName.substring(0, dotIndex);\n        String suffix = fileName.substring(dotIndex + 1);\n\n        // Check if the prefix is not empty and starts with a latin alphabet letter\n        if (prefix.isEmpty() || !Character.isLetter(prefix.charAt(0))) {\n            return \"No\";\n        }\n\n        // Count the number of digits in the prefix\n        int digitCount = 0;\n        for (char c : prefix.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        // Check if there are more than three digits in the prefix\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the suffix is one of the valid extensions\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(suffix)) {\n            return \"No\";\n        }\n\n        // All checks passed, the file name is valid\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fileNameCheck(\"example.txt\")); // Should return 'Yes'\n        System.out.println(fileNameCheck(\"1example.dll\")); // Should return 'No'\n        System.out.println(fileNameCheck(\"example1.dll\")); // Should return 'Yes'\n        System.out.println(fileNameCheck(\"examp123le.exe\")); // Should return 'No'\n        System.out.println(fileNameCheck(\".exe\")); // Should return 'No'\n        System.out.println(fileNameCheck(\"example.doc\")); // Should return 'No'\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "import java.util.*;\n\nclass SumSquares {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public static int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            \n            if (i % 3 == 0) {\n                value = value * value;\n            } else if (i % 4 == 0) {\n                value = value * value * value;\n            }\n            \n            sum += value;\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        List<Integer> lst2 = Arrays.asList();\n        List<Integer> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n\n        System.out.println(sumSquares(lst1)); // Output: 6\n        System.out.println(sumSquares(lst2)); // Output: 0\n        System.out.println(sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n    // Helper function to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main function to process the sentence\n    public static String wordsInSentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Check each word's length and add it to the list if it's prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words to form the resulting string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        String sentence1 = \"This is a test\";\n        String result1 = wordsInSentence(sentence1);\n        System.out.println(result1); // Output: \"is\"\n\n        String sentence2 = \"lets go for swimming\";\n        String result2 = wordsInSentence(sentence2);\n        System.out.println(result2); // Output: \"go for\"\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "class Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Parse the fractions x and n\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Compute the numerator and denominator of the product\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(simplify(\"1/5\", \"5/1\")); // True\n        System.out.println(simplify(\"1/6\", \"2/1\")); // False\n        System.out.println(simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.*;\n\nclass OrderByPoints {\n    // Helper function to calculate sum of digits of an integer\n    private static int sumOfDigits(int num) {\n        num = Math.abs(num); // Ensure the number is positive to correctly calculate the digit sum\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        // Create a list of indices\n        List<Integer> indices = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            indices.add(i);\n        }\n\n        // Custom comparator to sort based on sum of digits\n        Collections.sort(indices, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer idx1, Integer idx2) {\n                int num1 = (int) nums.get(idx1);\n                int num2 = (int) nums.get(idx2);\n                int sum1 = sumOfDigits(num1);\n                int sum2 = sumOfDigits(num2);\n\n                if (sum1 != sum2) {\n                    return Integer.compare(sum1, sum2);\n                } else {\n                    return Integer.compare(idx1, idx2);\n                }\n            }\n        });\n\n        // Create the result list based on sorted indices\n        List<Object> sortedNums = new ArrayList<>();\n        for (int idx : indices) {\n            sortedNums.add(nums.get(idx));\n        }\n\n        return sortedNums;\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(orderByPoints(nums1)); // Output: [-1, -11, 1, -12, 11]\n\n        List<Object> nums2 = Arrays.asList();\n        System.out.println(orderByPoints(nums2)); // Output: []\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "import java.util.List;\n\npublic class Specialfilter {\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object obj : nums) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (Math.abs(num) > 10) {\n                    String numStr = Integer.toString(Math.abs(num));\n                    char firstDigit = numStr.charAt(0);\n                    char lastDigit = numStr.charAt(numStr.length() - 1);\n                    if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    private static boolean isOdd(char digit) {\n        int d = digit - '0'; // Convert char to int\n        return d % 2 != 0;\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums1 = Arrays.asList(15, -73, 14, -15);\n        System.out.println(specialfilter(nums1)); // Output: 1\n\n        List<Object> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        System.out.println(specialfilter(nums2)); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        int[] modCount = new int[3];\n\n        // Generate the array a and count the remainders mod 3\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n            modCount[a[i] % 3]++;\n        }\n\n        // Calculate the number of valid triples\n        int count = 0;\n        \n        // 3 elements all give remainder 0\n        count += modCount[0] * (modCount[0] - 1) * (modCount[0] - 2) / 6;\n        \n        // 3 elements all give remainder 1\n        count += modCount[1] * (modCount[1] - 1) * (modCount[1] - 2) / 6;\n        \n        // 3 elements all give remainder 2\n        count += modCount[2] * (modCount[2] - 1) * (modCount[2] - 2) / 6;\n        \n        // 1 element from each remainder 0, 1, and 2\n        count += modCount[0] * modCount[1] * modCount[2];\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.util.*;\n\npublic class Bf {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        // Get the indices of the given planets\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        // Return an empty list if either planet is not found\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        // Ensure that index1 is less than index2\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Return the planets between the two indices\n        return planets.subList(index1 + 1, index2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // Output: [Saturn, Uranus]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // Output: [Venus]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // Output: [Venus, Earth, Mars, Jupiter, Saturn]\n        System.out.println(bf(\"Pluto\", \"Neptune\")); // Output: []\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.util.*;\n\npublic class SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<String> sortedListSum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> evenLengthStrings = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthStrings.add(str);\n            }\n        }\n\n        // Step 2: Sort the list by length, then alphabetically\n        Collections.sort(evenLengthStrings, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                }\n                return Integer.compare(o1.length(), o2.length());\n            }\n        });\n\n        return evenLengthStrings;\n    }\n\n    public static void main(String[] args) {\n        // Testing the function with example inputs\n        List<String> testList1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        List<String> testList2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n\n        System.out.println(sortedListSum(testList1)); // Output: [aa]\n        System.out.println(sortedListSum(testList2)); // Output: [ab, cd]\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "class XOrY {\n    // Helper method to check if a number is prime\n    public static boolean isPrime(int n) {\n        // Handle edge cases\n        if (n <= 1) return false; // 0 and 1 are not prime numbers\n        if (n <= 3) return true;  // 2 and 3 are prime numbers\n        \n        // Check divisibility by 2 and 3 to eliminate a large set of non-prime numbers\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        \n        // Check divisibility from 5 onwards, only checking odd numbers\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        \n        return true;\n    }\n    \n    // Method to return x if n is prime, otherwise return y\n    public static int xOrY(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n    \n    public static void main(String[] args) {\n        // Test the method with some examples\n        System.out.println(xOrY(7, 34, 12));  // Output: 34\n        System.out.println(xOrY(15, 8, 5));   // Output: 5\n    }\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "import java.util.List;\n\nclass DoubleTheDifference {\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n     * \n     * If the input list is empty, return 0.\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int number = (Integer) obj;\n                if (number > 0 && number % 2 != 0) {\n                    sum += number * number;\n                }\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> input1 = Arrays.asList(1, 3, 2, 0);\n        List<Object> input2 = Arrays.asList(-1, -2, 0);\n        List<Object> input3 = Arrays.asList(9, -2);\n        List<Object> input4 = Arrays.asList(0);\n        \n        System.out.println(doubleTheDifference(input1)); // Output: 10\n        System.out.println(doubleTheDifference(input2)); // Output: 0\n        System.out.println(doubleTheDifference(input3)); // Output: 81\n        System.out.println(doubleTheDifference(input4)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.util.*;\n\nclass Compare {\n    /**\n     * This method compares the game scores with the guesses and returns a list\n     * of differences where each element indicates how far off the guess was from the actual score.\n     * If the guess is correct, the difference is 0.\n     *\n     * @param game List of actual game scores.\n     * @param guess List of guessed scores.\n     * @return List of differences between the game scores and guesses.\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Ensure the input lists are of equal length\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Both lists must have the same length.\");\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through the lists and compute the differences\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> gameScores = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guesses = Arrays.asList(1, 2, 3, 4, 2, -2);\n        \n        List<Integer> result = compare(gameScores, guesses);\n        System.out.println(result); // Output: [0, 0, 0, 0, 3, 3]\n        \n        List<Integer> gameScores2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guesses2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        \n        List<Integer> result2 = compare(gameScores2, guesses2);\n        System.out.println(result2); // Output: [4, 4, 1, 0, 0, 6]\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        // Initialize variables to track the strongest extension and its strength\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        // Iterate through each extension\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            \n            // Count the number of uppercase and lowercase letters\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            \n            // Calculate the strength of the current extension\n            int strength = capCount - smCount;\n            \n            // Update the strongest extension if the current one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        // Return the result in the desired format\n        return className + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        String className = \"Slices\";\n        System.out.println(strongestExtension(className, extensions)); // Output: Slices.SErviNGSliCes\n        \n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        String className2 = \"my_class\";\n        System.out.println(strongestExtension(className2, extensions2)); // Output: my_class.AA\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        // Concatenate the second word with itself\n        String bConcatenated = b + b;\n        \n        // Check if the first word contains any rotation of the second word\n        return bConcatenated.contains(a);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddCount {\n    /**\n     * Given an integer, returns a list that contains the number of even and odd digits respectively.\n     *\n     * Example:\n     *     evenOddCount(-12) ==> [1, 1]\n     *     evenOddCount(123) ==> [1, 2]\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n        // Convert the number to its absolute value\n        num = Math.abs(num);\n\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Handle the case where num is 0\n        if (num == 0) {\n            return Arrays.asList(1, 0);\n        }\n\n        // Iterate through each digit of the number\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        // Return the results as a list\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(evenOddCount(-12));  // Output: [1, 1]\n        System.out.println(evenOddCount(123));  // Output: [1, 2]\n        System.out.println(evenOddCount(0));    // Output: [1, 0]\n        System.out.println(evenOddCount(2468)); // Output: [4, 0]\n        System.out.println(evenOddCount(1357)); // Output: [0, 4]\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "class IntToMiniRoman {\n    /**\n     * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     */\n    public static String intToMiniRoman(int num) {\n        // Define Roman numeral symbols and their corresponding values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        \n        // Use a StringBuilder to build the Roman numeral string\n        StringBuilder roman = new StringBuilder();\n        \n        // Loop through each value and symbol\n        for (int i = 0; i < values.length; i++) {\n            // While the current value can be subtracted from num\n            while (num >= values[i]) {\n                // Subtract the value from num\n                num -= values[i];\n                // Append the corresponding symbol to the result\n                roman.append(symbols[i]);\n            }\n        }\n        \n        // Convert the result to lowercase as per the requirement\n        return roman.toString().toLowerCase();\n    }\n\n    // Main method for testing the function\n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));    // Output: xix\n        System.out.println(intToMiniRoman(152));   // Output: clii\n        System.out.println(intToMiniRoman(426));   // Output: cdxxvi\n        System.out.println(intToMiniRoman(1000));  // Output: m\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "class RightAngleTriangle {\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // Sort the sides to ensure the largest side is treated as the hypotenuse\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        // sides[2] is the largest side after sorting\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n        System.out.println(rightAngleTriangle(5, 12, 13)); // True\n        System.out.println(rightAngleTriangle(7, 24, 25)); // True\n        System.out.println(rightAngleTriangle(8, 15, 17)); // True\n        System.out.println(rightAngleTriangle(5, 5, 5)); // False\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.*;\n\nclass FindMax {\n    \n    public static String findMax(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            // Use a set to find unique characters\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            int uniqueCount = uniqueChars.size();\n\n            // Check if this word has the most unique characters so far\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(findMax(words1)); // Output: \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(findMax(words2)); // Output: \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(findMax(words3)); // Output: \"aaaaaaa\"\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "class Eat {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     *\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots to be eaten after meals\n        int totalEaten;\n        int carrotsLeft;\n\n        if (remaining >= need) {\n            totalEaten = number + need;\n            carrotsLeft = remaining - need;\n        } else {\n            totalEaten = number + remaining;\n            carrotsLeft = 0;\n        }\n\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.util.*;\nimport javax.script.*;\n\nclass DoAlgebra {\n    /**\n     * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebraic \n     * expression and return the evaluation of this expression.\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        if (operator == null || operand == null || operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input: Operator list must be one less than operand list.\");\n        }\n\n        // Build the expression string\n        StringBuilder expression = new StringBuilder();\n        expression.append(operand.get(0));\n        for (int i = 0; i < operator.size(); i++) {\n            expression.append(\" \").append(operator.get(i)).append(\" \").append(operand.get(i + 1));\n        }\n\n        // Evaluate the expression string\n        try {\n            ScriptEngine engine = new ScriptEngineManager().getEngineByName(\"JavaScript\");\n            Object result = engine.eval(expression.toString());\n            return ((Number) result).intValue();\n        } catch (ScriptException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"Failed to evaluate expression.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        List<String> operator = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operand = Arrays.asList(2, 3, 4, 5);\n        int result = doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);  // Output: Result: 9\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "class Solve {\n    public static String solve(String s) {\n        boolean containsLetter = false;\n        \n        // Check if the string contains any letter\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                break;\n            }\n        }\n        \n        if (containsLetter) {\n            // Reverse the case of each letter\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    if (Character.isUpperCase(c)) {\n                        result.append(Character.toLowerCase(c));\n                    } else {\n                        result.append(Character.toUpperCase(c));\n                    }\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            // Reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\"));   // Output: \"4321\"\n        System.out.println(solve(\"ab\"));     // Output: \"AB\"\n        System.out.println(solve(\"#a@C\"));   // Output: \"#A@c\"\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n     *\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            // Create MD5 Hash\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n            byte[] messageDigest = digest.digest();\n\n            // Convert byte array to hexadecimal string\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : messageDigest) {\n                String hex = Integer.toHexString(0xFF & b);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Output: 3e25960a79dbc69b674cd4ec67a72c62\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    public static List<Object> generateIntegers(int a, int b) {\n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        // Set to collect even digits\n        Set<Integer> evenDigits = new TreeSet<>();\n\n        // Iterate through the range\n        for (int i = start; i <= end; i++) {\n            int num = i;\n            while (num > 0) {\n                int digit = num % 10;\n                if (digit % 2 == 0) {\n                    evenDigits.add(digit);\n                }\n                num /= 10;\n            }\n        }\n\n        // Convert set to list\n        List<Object> result = new ArrayList<>(evenDigits);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); // Output: [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); // Output: [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // Output: []\n    }\n}"}

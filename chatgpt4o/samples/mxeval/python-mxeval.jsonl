{"task_id": "HumanEval/0", "language": "python", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Example Usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/1", "language": "python", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    # Initialize variables\n    result = []\n    current_group = []\n    level = 0\n    \n    # Iterate through the string\n    for char in paren_string:\n        current_group.append(char)\n        \n        if char == '(':\n            level += 1\n        elif char == ')':\n            level -= 1\n        \n        # When level is zero, we have a complete group\n        if level == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n    \n    return result\n\n# Example usage\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Expected output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "language": "python", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(truncate_number(3.5))  # Output: 0.5\n    print(truncate_number(7.89)) # Output: 0.89"}
{"task_id": "HumanEval/3", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0  # Initial balance is zero\n    for operation in operations:\n        balance += operation  # Update the balance with the current operation\n        if balance < 0:  # Check if balance falls below zero\n            return True  # Return True if balance falls below zero\n    return False  # Return False if balance never falls below zero\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/4", "language": "python", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    mad = sum(absolute_deviations) / len(numbers)\n    \n    return mad\n\n# Example usage:\n# print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/5", "language": "python", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n            \n    return result"}
{"task_id": "HumanEval/6", "language": "python", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(paren_group: str) -> int:\n        current_depth = 0\n        max_depth = 0\n        for char in paren_group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n\n# Example usage and testing\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "language": "python", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Output: ['abc', 'bacd', 'array']\n    print(filter_by_substring(['hello', 'world', 'python'], 'o'))     # Output: ['hello', 'world']\n    print(filter_by_substring(['test', 'filter', 'substring'], 'z'))  # Output: []"}
{"task_id": "HumanEval/8", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)"}
{"task_id": "HumanEval/9", "language": "python", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    \n    return result\n\n# Example usage\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))"}
{"task_id": "HumanEval/10", "language": "python", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix before the palindrome suffix\n            prefix = string[:i]\n            # Append the reverse of the prefix to the original string\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, which is theoretically impossible,\n    # we return the string with its full reverse appended.\n    return string + string[::-1]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/11", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Perform the XOR operation\n    xor_result = []\n    for char_a, char_b in zip(a, b):\n        xor_result.append('1' if char_a != char_b else '0')\n    \n    return ''.join(xor_result)\n\n# Example usage\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    # Initialize the longest string as the first element\n    longest_string = strings[0]\n    \n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/13", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "language": "python", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Example usage:\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "language": "python", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/16", "language": "python", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case and create a set of characters\n    distinct_characters = set(string.lower())\n    # Return the number of distinct characters\n    return len(distinct_characters)\n\n# Running the provided test cases to verify the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/17", "language": "python", "completion": "def parse_music(music_string: str) -> List[int]:\n    # Define a mapping from note strings to their beat values\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the input string by spaces to get individual note strings\n    notes = music_string.split()\n    \n    # Convert each note string to its corresponding beat value using the dictionary\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats\n\n# Example usage:\n# print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# Expected output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "language": "python", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to account for overlapping\n    \n    return count"}
{"task_id": "HumanEval/19", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    # Mapping of numeral strings to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of integer values back to numeral strings\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into a list of numeral strings\n    numeral_list = numbers.split()\n    \n    # Convert numeral strings to their corresponding integer values\n    int_list = [numeral_to_int[numeral] for numeral in numeral_list]\n    \n    # Sort the integer values\n    sorted_int_list = sorted(int_list)\n    \n    # Convert the sorted integer values back to numeral strings\n    sorted_numeral_list = [int_to_numeral[i] for i in sorted_int_list]\n    \n    # Join the sorted numeral strings into a single space-delimited string\n    sorted_numbers = ' '.join(sorted_numeral_list)\n    \n    return sorted_numbers\n\n# Test the function with the provided example\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "language": "python", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    # Step 1: Sort the list\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to track the smallest difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    \n    # Step 2: Find the closest pair\n    for i in range(len(sorted_numbers) - 1):\n        current_diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    \n    # Step 3: Return the closest pair\n    return closest_pair\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/21", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Handle the case where all elements are the same\n    if min_val == max_val:\n        return [0.0 for _ in numbers]\n    \n    range_val = max_val - min_val\n    \n    return [(num - min_val) / range_val for num in numbers]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "language": "python", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "language": "python", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "language": "python", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Example usage and test\nprint(largest_divisor(15))  # Output should be 5"}
{"task_id": "HumanEval/25", "language": "python", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Check for number of 2s as factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        factor += 2\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/26", "language": "python", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Step 1: Count the occurrences of each element\n    count = {}\n    for number in numbers:\n        if number in count:\n            count[number] += 1\n        else:\n            count[number] = 1\n\n    # Step 2: Include only those elements that occur exactly once\n    result = [number for number in numbers if count[number] == 1]\n    \n    return result\n\n# Uncomment the following line to run the example in a script\n# print(remove_duplicates([1, 2, 3, 2, 4]))"}
{"task_id": "HumanEval/27", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n# Test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/28", "language": "python", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "language": "python", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "language": "python", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list, tolerance=1e-7, max_iterations=1000):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Initial guess (can be improved)\n    x = 0.0\n    \n    for _ in range(max_iterations):\n        fx = poly(xs, x)\n        f_prime_x = poly_derivative(xs, x)\n        \n        # Prevent division by zero\n        if f_prime_x == 0:\n            raise ValueError(\"Derivative is zero. No solution found.\")\n        \n        # Newton-Raphson step\n        x_new = x - fx / f_prime_x\n        \n        # Check for convergence\n        if abs(x_new - x) < tolerance:\n            return x_new\n        \n        x = x_new\n    \n    raise ValueError(\"Maximum iterations exceeded. No solution found.\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/33", "language": "python", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Step 1: Identify the indices divisible by three\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    \n    # Step 2: Extract the elements at these indices\n    elements_to_sort = [l[i] for i in indices_divisible_by_three]\n    \n    # Step 3: Sort the extracted elements\n    elements_to_sort.sort()\n    \n    # Step 4: Place the sorted elements back into their original positions\n    result = l.copy()\n    for i, sorted_value in zip(indices_divisible_by_three, elements_to_sort):\n        result[i] = sorted_value\n    \n    return result\n\n# Example usage and test\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/34", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n# Example usage\nif __name__ == \"__main__\":\n    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "language": "python", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "language": "python", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/37", "language": "python", "completion": "def sort_even(l: list) -> list:\n    # Extract elements at even indices\n    even_elements = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted elements\n    even_elements_sorted = sorted(even_elements)\n    \n    # Create a result list by replacing elements at even indices with the sorted elements\n    result = l[:]\n    even_idx = 0\n    for i in range(0, len(l), 2):\n        result[i] = even_elements_sorted[even_idx]\n        even_idx += 1\n        \n    return result\n\n# Test cases\nprint(sort_even([1, 2, 3]))         # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))      # Output: [3, 6, 5, 4]\nprint(sort_even([10, 1, 30, 20, 40])) # Output: [10, 1, 30, 20, 40]"}
{"task_id": "HumanEval/38", "language": "python", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Example usage:\nencoded_string = encode_cyclic(\"abcdefghi\")\nprint(f\"Encoded: {encoded_string}\")  # This should print \"bcadefghi\"\n\ndecoded_string = decode_cyclic(encoded_string)\nprint(f\"Decoded: {decoded_string}\")  # This should print \"abcdefghi\""}
{"task_id": "HumanEval/39", "language": "python", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci_generator():\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        yield a\n\ndef prime_fib(n):\n    count = 0\n    for fib_num in fibonacci_generator():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n\n# Examples for testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Sort the list to use the two-pointer technique\n    l.sort()\n    \n    # Iterate through the list\n    n = len(l)\n    for i in range(n - 2):\n        # Use two pointers to find the other two elements\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/41", "language": "python", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function outputs the number of collisions between two sets of cars.\n    \n    :param n: The number of cars in each set.\n    :return: The number of collisions.\n    \"\"\"\n    return n * n\n\n# Example usage:\n# If there are 3 cars in each set, there will be 3 * 3 = 9 collisions.\nprint(car_race_collision(3))  # Output: 9"}
{"task_id": "HumanEval/42", "language": "python", "completion": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "language": "python", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    # Since we collect the digits from least significant to most significant, reverse them\n    return ''.join(digits[::-1])\n\n# Test cases\nprint(change_base(8, 3))  # Should output '22'\nprint(change_base(8, 2))  # Should output '1000'\nprint(change_base(7, 2))  # Should output '111'"}
{"task_id": "HumanEval/45", "language": "python", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/46", "language": "python", "completion": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four values of the sequence\n    fib4_values = [0, 0, 2, 0]\n\n    # Compute the sequence iteratively\n    for i in range(4, n + 1):\n        next_value = sum(fib4_values)\n        # Update the list to include the next value and remove the oldest\n        fib4_values = fib4_values[1:] + [next_value]\n\n    return fib4_values[-1]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/47", "language": "python", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return l_sorted[mid]\n    else:\n        # If even, return the average of the two middle elements\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "HumanEval/48", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome.\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "language": "python", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/50", "language": "python", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "language": "python", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# You can run the tests to check the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n# Testing the function\nprint(below_threshold([1, 2, 4, 10], 100))  # Expected output: True\nprint(below_threshold([1, 20, 4, 10], 5))    # Expected output: False"}
{"task_id": "HumanEval/53", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n\n# Example test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "language": "python", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/56", "language": "python", "completion": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))        # False\nprint(correct_bracketing(\"<>\"))       # True\nprint(correct_bracketing(\"<<><>>\"))   # True\nprint(correct_bracketing(\"><<>\"))     # False"}
{"task_id": "HumanEval/57", "language": "python", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets to remove duplicates and allow for set operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n    \n    # Convert the resulting set back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "language": "python", "completion": "def largest_prime_factor(n: int) -> int:\n    # We start with the smallest prime number\n    factor = 2\n    \n    # Divide n by 2 until it is odd\n    while n % factor == 0:\n        n //= factor\n    \n    # Now, we test odd factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it must be a prime number\n    if n > 2:\n        return n\n    else:\n        return factor - 2  # Since we increased factor in the last iteration\n\n# Testing the examples from the docstring\nprint(largest_prime_factor(13195))  # Expected output: 29\nprint(largest_prime_factor(2048))   # Expected output: 2"}
{"task_id": "HumanEval/60", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "language": "python", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))        # False\nprint(correct_bracketing(\"()\"))       # True\nprint(correct_bracketing(\"(()())\"))   # True\nprint(correct_bracketing(\")(()\"))     # False"}
{"task_id": "HumanEval/62", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The first coefficient (constant term) is skipped since its derivative is zero\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5])) # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))       # Output: [2, 6]"}
{"task_id": "HumanEval/63", "language": "python", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize a list to store the FibFib values\n    fibfib_values = [0, 0, 1] + [0] * (n - 2)\n    \n    # Fill the list with the appropriate values\n    for i in range(3, n + 1):\n        fibfib_values[i] = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n    \n    return fibfib_values[n]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/64", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/65", "language": "python", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        # Return the reversed string if shift is greater than the number of digits\n        return x_str[::-1]\n    else:\n        # Perform circular shift\n        shift = shift % num_digits  # To handle shifts greater than the number of digits but not exceeding it\n        return x_str[-shift:] + x_str[:-shift]\n\n# Test cases\nprint(circular_shift(12, 1))  # \"21\"\nprint(circular_shift(12, 2))  # \"12\"\nprint(circular_shift(12345, 3))  # \"34512\"\nprint(circular_shift(12345, 5))  # \"12345\"\nprint(circular_shift(12345, 6))  # \"54321\""}
{"task_id": "HumanEval/66", "language": "python", "completion": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n\n# Test cases\nprint(digitSum(\"\"))          # Output: 0\nprint(digitSum(\"abAB\"))      # Output: 131\nprint(digitSum(\"abcCd\"))     # Output: 67\nprint(digitSum(\"helloE\"))    # Output: 69\nprint(digitSum(\"woArBld\"))   # Output: 131\nprint(digitSum(\"aAaaaXa\"))   # Output: 153"}
{"task_id": "HumanEval/67", "language": "python", "completion": "import re\n\ndef fruit_distribution(s, n):\n    # Use regular expressions to find all numbers in the string\n    numbers = re.findall(r'\\d+', s)\n    \n    # Convert these numbers to integers\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/68", "language": "python", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    \n    min_even = None\n    min_index = None\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if min_even is None or value < min_even:\n                min_even = value\n                min_index = index\n    \n    if min_even is None:\n        return []\n    \n    return [min_even, min_index]\n\n# Test cases\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))  # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "language": "python", "completion": "from collections import Counter\n\ndef search(lst):\n    # Count the frequency of each integer in the list\n    counter = Counter(lst)\n    \n    # Initialize the maximum integer as -1\n    max_integer = -1\n    \n    # Iterate through the counted frequencies\n    for num, freq in counter.items():\n        # Check if the frequency is greater than or equal to the integer value\n        if freq >= num:\n            # Update the maximum integer if current number is greater\n            if num > max_integer:\n                max_integer = num\n    \n    return max_integer\n\n# Example usage:\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/70", "language": "python", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    toggle = True  # Start with min\n    \n    while lst:\n        if toggle:\n            min_val = min(lst)\n            result.append(min_val)\n            lst.remove(min_val)\n        else:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n        toggle = not toggle  # Switch between min and max\n    \n    return result\n\n# Example usage\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []"}
{"task_id": "HumanEval/71", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n# Example usage\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/72", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of elements is less than or equal to the maximum weight\n    if sum(q) > w:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/73", "language": "python", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes_needed = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes_needed += 1\n    \n    return changes_needed\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Output: 0"}
{"task_id": "HumanEval/74", "language": "python", "completion": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    primes = []\n    for num in range(2, limit):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef is_multiply_prime(a):\n    \"\"\"Check if the given number is the product of exactly three prime numbers.\"\"\"\n    if a >= 100:\n        return False\n\n    primes = generate_primes(100)\n    length = len(primes)\n    \n    # Try to find three primes such that their product is equal to `a`\n    for i in range(length):\n        for j in range(i, length):\n            for k in range(j, length):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True, because 30 = 2 * 3 * 5\nprint(is_multiply_prime(60))  # True, because 60 = 2 * 3 * 5\nprint(is_multiply_prime(20))  # False, because 20 = 2 * 2 * 5 (2 is repeated)\nprint(is_multiply_prime(105)) # False, because 105 >= 100"}
{"task_id": "HumanEval/76", "language": "python", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True  # n^0 = 1 for any n\n    if n in (0, 1):\n        return x == n  # 0^k = 0 and 1^k = 1 for any k\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n\n# Test cases\nprint(is_simple_power(1, 4))  # => True\nprint(is_simple_power(2, 2))  # => True\nprint(is_simple_power(8, 2))  # => True\nprint(is_simple_power(3, 2))  # => False\nprint(is_simple_power(3, 1))  # => False\nprint(is_simple_power(5, 3))  # => False"}
{"task_id": "HumanEval/77", "language": "python", "completion": "def iscube(a):\n    # Handle the special case where a is 0\n    if a == 0:\n        return True\n    \n    # Calculate the absolute value of a and its cube root range\n    abs_a = abs(a)\n    n = int(abs_a ** (1/3)) + 1  # We add 1 to ensure we cover the range fully\n    \n    for i in range(-n, n+1):\n        if i**3 == a:\n            return True\n    \n    return False\n\n# Examples\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/78", "language": "python", "completion": "def hex_key(num):\n    # Set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the input string\n    for char in num:\n        # Check if the character is a prime hexadecimal digit\n        if char in prime_hex_digits:\n            prime_count += 1\n    \n    # Return the total count of prime digits\n    return prime_count\n\n# Test cases\nprint(hex_key(\"AB\"))            # Output: 1\nprint(hex_key(\"1077E\"))         # Output: 2\nprint(hex_key(\"ABED1A33\"))      # Output: 4\nprint(hex_key(\"123456789ABCDEF0\")) # Output: 6\nprint(hex_key(\"2020\"))          # Output: 2"}
{"task_id": "HumanEval/79", "language": "python", "completion": "def decimal_to_binary(decimal):\n    # Convert decimal to binary and strip the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    # Format the binary string with 'db' prefix and suffix\n    formatted_binary_str = f\"db{binary_str}db\"\n    return formatted_binary_str\n\n# Test examples\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "HumanEval/80", "language": "python", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string to check every consecutive triplet\n    for i in range(len(s) - 2):\n        # Extract the current triplet\n        triplet = s[i:i+3]\n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If all triplets are distinct, return True\n    return True\n\n# Example test cases\nprint(is_happy('a'))      # False\nprint(is_happy('aa'))     # False\nprint(is_happy('abcd'))   # True\nprint(is_happy('aabb'))   # False\nprint(is_happy('adb'))    # True\nprint(is_happy('xyy'))    # False"}
{"task_id": "HumanEval/81", "language": "python", "completion": "def numerical_letter_grade(grades):\n    # Define the GPA to letter grade mapping\n    gpa_to_letter = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n    \n    # List to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the list\n    for gpa in grades:\n        for threshold, letter in gpa_to_letter:\n            if gpa >= threshold:\n                letter_grades.append(letter)\n                break\n        else:\n            # This condition is for GPAs less than 0.0 (if any, though not expected)\n            letter_grades.append('E')\n    \n    return letter_grades\n\n# Example usage\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    \"\"\"Function to check if the length of a string is a prime number.\"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Examples\nprint(prime_length('Hello'))    # True, length is 5\nprint(prime_length('abcdcba'))  # True, length is 7\nprint(prime_length('kittens'))  # True, length is 7\nprint(prime_length('orange'))   # False, length is 6"}
{"task_id": "HumanEval/83", "language": "python", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Only the number 1 fits the criteria for a 1-digit number\n    \n    # Calculate the number of n-digit numbers that start with 1\n    start_with_1 = 10**(n-1) - 10**(n-2)\n    \n    # Calculate the number of n-digit numbers that end with 1\n    end_with_1 = 10**(n-1) // 10\n    \n    # Calculate the number of n-digit numbers that both start and end with 1\n    both_start_and_end_with_1 = 10**(n-2)\n    \n    # Total count is sum of both counts minus the double counted values\n    total_count = start_with_1 + end_with_1 - both_start_and_end_with_1\n    \n    return total_count\n\n# Example usage\nprint(starts_one_ends(3))  # Output: 180"}
{"task_id": "HumanEval/84", "language": "python", "completion": "def solve(N):\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to its binary representation and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation\n\n# Example usage:\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/85", "language": "python", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):  # Start at index 1 and step by 2 to get odd indices\n        if lst[i] % 2 == 0:  # Check if the element at the odd index is even\n            result += lst[i]\n    return result\n\n# Example usage:\nprint(add([4, 2, 6, 7]))  # Output should be 2"}
{"task_id": "HumanEval/86", "language": "python", "completion": "def anti_shuffle(s):\n    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    words = s.split(' ')\n    sorted_words = [sort_word(word) for word in words]\n    return ' '.join(sorted_words)\n\n# Examples\nprint(anti_shuffle('Hi'))  # Output: 'Hi'\nprint(anti_shuffle('hello'))  # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "language": "python", "completion": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Traverse through each row in the list\n    for row_index, row in enumerate(lst):\n        # Traverse through each element in the row\n        for col_index, value in enumerate(row):\n            # If the value matches x, record the coordinate\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort coordinates primarily by row in ascending order\n    # and then by column in descending order for the same row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Example usage:\nprint(get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "HumanEval/88", "language": "python", "completion": "def sort_array(array):\n    # Handle edge cases\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array.copy()\n    \n    # Calculate the sum of the first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # Determine the sorting order based on the sum\n    if sum_first_last % 2 == 0:\n        # Sum is even, sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # Sum is odd, sort in ascending order\n        return sorted(array)\n\n# Examples\nprint(sort_array([]))                  # => []\nprint(sort_array([5]))                 # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6])) # => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "language": "python", "completion": "def encrypt(s):\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        return c  # Return the character unchanged if it is not a lowercase letter\n    \n    return ''.join(shift_char(c) for c in s)\n\n# Testing the function\nprint(encrypt('hi'))         # Output: 'lm'\nprint(encrypt('asdfghjkl'))  # Output: 'ewhjklnop'\nprint(encrypt('gf'))         # Output: 'kj'\nprint(encrypt('et'))         # Output: 'ix'"}
{"task_id": "HumanEval/90", "language": "python", "completion": "def next_smallest(lst):\n    # Step 1: Convert the list to a set to get unique elements\n    unique_elements = set(lst)\n    \n    # Step 2: Check if there are fewer than 2 unique elements\n    if len(unique_elements) < 2:\n        return None\n    \n    # Step 3: Sort the unique elements\n    sorted_unique_elements = sorted(unique_elements)\n    \n    # Step 4: Return the second smallest element\n    return sorted_unique_elements[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Should return 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Should return 2\nprint(next_smallest([]))               # Should return None\nprint(next_smallest([1, 1]))           # Should return None"}
{"task_id": "HumanEval/91", "language": "python", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences based on the delimiters\n    import re\n    sentences = re.split(r'[.?!]', S)\n    \n    # Count sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    \n    return boredom_count\n\n# Example usage:\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/92", "language": "python", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Testing the function with the provided examples\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1)) # \u279e True\nprint(any_int(3.6, -2.2, 2)) # \u279e False"}
{"task_id": "HumanEval/93", "language": "python", "completion": "def encode(message):\n    def swap_case_and_replace_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        replacement_map = {\n            'a': 'C', 'e': 'G', 'i': 'K', 'o': 'Q', 'u': 'W',\n            'A': 'c', 'E': 'g', 'I': 'k', 'O': 'q', 'U': 'w'\n        }\n        \n        if char in vowels:\n            return replacement_map[char]\n        else:\n            return char.swapcase()\n\n    return ''.join(swap_case_and_replace_vowel(char) for char in message)\n\n# Testing the function\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "language": "python", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number, else False.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/95", "language": "python", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    \n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # True"}
{"task_id": "HumanEval/96", "language": "python", "completion": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Function that returns an array of the first n integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Test cases\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11)) # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20)) # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18)) # Output: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "language": "python", "completion": "def multiply(a, b):\n    # Extract the unit digit of each integer\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Compute the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product\n\n# Test cases\nprint(multiply(148, 412))  # Should return 16 (8 * 2)\nprint(multiply(19, 28))    # Should return 72 (9 * 8)\nprint(multiply(2020, 1851))# Should return 0 (0 * 1)\nprint(multiply(14, -15))   # Should return 20 (4 * 5)"}
{"task_id": "HumanEval/98", "language": "python", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    # Iterate through the string with step 2 to get only even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg'))  # Output: 0\nprint(count_upper('dBBE'))  # Output: 0"}
{"task_id": "HumanEval/99", "language": "python", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n# Test cases\nprint(closest_integer(\"10\"))    # Should return 10\nprint(closest_integer(\"15.3\"))  # Should return 15\nprint(closest_integer(\"14.5\"))  # Should return 15\nprint(closest_integer(\"-14.5\")) # Should return -15\nprint(closest_integer(\"0.5\"))   # Should return 1\nprint(closest_integer(\"-0.5\"))  # Should return -1"}
{"task_id": "HumanEval/100", "language": "python", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    current_number = n\n\n    for _ in range(n):\n        pile.append(current_number)\n        if current_number % 2 == 0:\n            current_number += 2  # Next even number\n        else:\n            current_number += 2  # Next odd number\n\n    return pile\n\n# Test the function with the given example\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "HumanEval/101", "language": "python", "completion": "def words_string(s):\n    # Step 1: Replace commas with spaces\n    s = s.replace(',', ' ')\n    \n    # Step 2: Split the string by spaces\n    words = s.split()\n    \n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "language": "python", "completion": "def choose_num(x, y):\n    # Ensure the range is from the smaller number to the larger number\n    start = min(x, y)\n    end = max(x, y)\n    \n    # Iterate from the end to the start to find the largest even number\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1\n\n# Example usage:\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1"}
{"task_id": "HumanEval/103", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of integers from n to m\n    count = m - n + 1\n    \n    # Calculate the average\n    average = total_sum / count\n    \n    # Round the average to the nearest integer\n    rounded_average = round(average)\n    \n    # Convert the rounded average to binary\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n\n# Testing the examples\nprint(rounded_avg(1, 5))   # Expected output: \"0b11\"\nprint(rounded_avg(7, 5))   # Expected output: -1\nprint(rounded_avg(10, 20)) # Expected output: \"0b1111\"\nprint(rounded_avg(20, 33)) # Expected output: \"0b11010\""}
{"task_id": "HumanEval/104", "language": "python", "completion": "def has_even_digit(n):\n    \"\"\"Helper function to check if the number has any even digits.\"\"\"\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            return True\n        n = n // 10\n    return False\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n    \"\"\"\n    # Filter out numbers that contain any even digits\n    filtered_numbers = [num for num in x if not has_even_digit(num)]\n    \n    # Sort the filtered numbers in increasing order\n    return sorted(filtered_numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\n    print(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "language": "python", "completion": "def by_length(arr):\n    # Mapping from digit to its corresponding name\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter, sort, and reverse the relevant elements\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    \n    # Convert the filtered, sorted, and reversed numbers to their corresponding names\n    result = [digit_to_name[num] for num in filtered_sorted_reversed]\n    \n    return result\n\n# Example usage:\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))   # Output: ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\nprint(by_length([]))                         # Output: []\nprint(by_length([1, -1, 55]))                # Output: ['One']"}
{"task_id": "HumanEval/106", "language": "python", "completion": "def factorial(x):\n    \"\"\" Helper function to calculate the factorial of x \"\"\"\n    if x == 0 or x == 1:\n        return 1\n    result = 1\n    for i in range(2, x + 1):\n        result *= i\n    return result\n\ndef sum_up_to(x):\n    \"\"\" Helper function to calculate the sum of numbers from 1 to x \"\"\"\n    return x * (x + 1) // 2\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to(i))\n    return result\n\n# Example usage:\nprint(f(5))  # Output should be [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "language": "python", "completion": "def is_palindrome(num):\n    # Convert the number to a string to check if it's the same forwards and backwards\n    s = str(num)\n    return s == s[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/108", "language": "python", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        # Convert the number to a string to iterate over each character\n        str_num = str(num)\n        sum_digits = 0\n        \n        # Handle negative number by starting with the first digit as negative\n        if str_num[0] == '-':\n            sum_digits += int(str_num[0:2])  # Take the first two characters as the first digit\n            for char in str_num[2:]:\n                sum_digits += int(char)\n        else:\n            for char in str_num:\n                sum_digits += int(char)\n\n        return sum_digits\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n\n# Testing the function with the provided test cases\nprint(count_nums([]))        # Expected output: 0\nprint(count_nums([-1, 11, -11]))  # Expected output: 1\nprint(count_nums([1, 1, 2]))  # Expected output: 3"}
{"task_id": "HumanEval/109", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # Edge case: empty array\n        return True\n\n    N = len(arr)\n    split_point = -1\n\n    # Find the split point where the order breaks\n    for i in range(1, N):\n        if arr[i] < arr[i - 1]:\n            split_point = i\n            break\n\n    if split_point == -1:  # The array is already sorted\n        return True\n\n    # Check if the two parts are sorted\n    for i in range(split_point + 1, N):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    for i in range(1, split_point):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    # Check the boundary condition between the two parts\n    if arr[-1] > arr[0]:\n        return False\n\n    return True\n\n# Examples\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "HumanEval/110", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Find the count of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Find the count of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If we have enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Should return \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Should return \"NO\""}
{"task_id": "HumanEval/111", "language": "python", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    if not test:\n        return {}\n    \n    # Split the string into individual letters\n    letters = test.split()\n    \n    # Count occurrences of each letter\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Identify all letters with this maximum count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result\n\n# Testing the function with provided examples\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}"}
{"task_id": "HumanEval/112", "language": "python", "completion": "def reverse_delete(s, c):\n    # Remove all characters from s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Return the tuple with the result string and the palindrome check\n    return (result_string, is_palindrome)\n\n# Example usage:\nprint(reverse_delete(\"abcde\", \"ae\"))     # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))     # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\")) # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "language": "python", "completion": "def odd_count(lst):\n    def count_odds(s):\n        \"\"\"Helper function to count odd digits in a string\"\"\"\n        return sum(1 for char in s if char in '13579')\n    \n    result = []\n    for s in lst:\n        odd_count = count_odds(s)\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    \n    return result"}
{"task_id": "HumanEval/114", "language": "python", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0  # Return 0 if the input list is empty\n\n    # Initialize the running minimum subarray sum and the global minimum subarray sum\n    current_min = nums[0]\n    global_min = nums[0]\n\n    # Iterate over the elements of the array starting from the second element\n    for num in nums[1:]:\n        # Update the running minimum subarray sum\n        current_min = min(num, current_min + num)\n        # Update the global minimum subarray sum\n        global_min = min(global_min, current_min)\n\n    return global_min\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))         # Output: -6"}
{"task_id": "HumanEval/115", "language": "python", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    # Step 1: Count the total amount of water in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Step 2: Calculate the number of bucket lowerings required\n    # We use math.ceil to ensure we round up to the next whole number if there is a remainder\n    num_lowerings = math.ceil(total_water / capacity)\n    \n    return num_lowerings\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "language": "python", "completion": "def sort_array(arr):\n    # Define the key function for sorting\n    def sort_key(x):\n        # Count the number of ones in the binary representation of x\n        num_of_ones = bin(x).count('1')\n        # Return a tuple (num_of_ones, x) to sort by num_of_ones first, then by x\n        return (num_of_ones, x)\n    \n    # Sort the array using the custom key function\n    sorted_arr = sorted(arr, key=sort_key)\n    \n    return sorted_arr\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 4, 3, 5]\nprint(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 4, 3]"}
{"task_id": "HumanEval/117", "language": "python", "completion": "def select_words(s, n):\n    vowels = set('aeiouAEIOU')\n    result = []\n    \n    # Split the string into words\n    words = s.split()\n    \n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n# Testing the function with examples\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # ==> []\nprint(select_words(\"Hello world\", 4))             # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # ==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "language": "python", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    n = len(word)\n    \n    # Iterate from the second last character to the second character\n    for i in range(n-2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    \n    return \"\"\n\n# Example usage\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/119", "language": "python", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Example usage\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))    # Output: 'No'"}
{"task_id": "HumanEval/120", "language": "python", "completion": "def maximum(arr, k):\n    # Step 1: Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Step 2: Take the first k elements\n    top_k_elements = sorted_arr[:k]\n    \n    # Step 3: Sort these k elements in ascending order\n    result = sorted(top_k_elements)\n    \n    return result\n\n# Example usage\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "language": "python", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:  # Check if the index is even\n            if lst[i] % 2 != 0:  # Check if the element is odd\n                total_sum += lst[i]\n    return total_sum\n\n# Testing the function with the provided examples\nprint(solution([5, 8, 7, 1]))  # Expected output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Expected output: 9\nprint(solution([30, 13, 24, 321]))  # Expected output: 0"}
{"task_id": "HumanEval/122", "language": "python", "completion": "def add_elements(arr, k):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the first k elements\n    for i in range(k):\n        # Check if the element has at most two digits\n        if -99 <= arr[i] <= 99:\n            total_sum += arr[i]\n    \n    return total_sum\n\n# Example usage:\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "language": "python", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n        \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)  # Include the final 1 in the sequence\n    \n    # Extract odd numbers\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    \n    # Sort the odd numbers in increasing order\n    odd_numbers.sort()\n    \n    return odd_numbers\n\n# Example usage:\nprint(get_odd_collatz(5))  # Output should be [1, 5]"}
{"task_id": "HumanEval/124", "language": "python", "completion": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check the format of the date string\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Extract month, day, and year from the date string\n    month, day, year = date.split('-')\n\n    # Check if month, day, and year are digits and if their lengths are appropriate\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    if not (len(month) == 2 and len(day) == 2 and len(year) == 4):\n        return False\n\n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    # Validate the month\n    if month < 1 or month > 12:\n        return False\n\n    # Validate the day based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # If all checks pass, return True\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "language": "python", "completion": "def split_words(txt):\n    def is_odd_order(ch):\n        return (ord(ch) - ord('a')) % 2 != 0\n\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # Count lowercase letters with odd order in the alphabet\n    else:\n        count = sum(1 for ch in txt if ch.islower() and is_odd_order(ch))\n        return count\n\n# Examples\nprint(split_words(\"Hello world!\"))  # [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # 3"}
{"task_id": "HumanEval/126", "language": "python", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n    \n    num_count = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        num_count[lst[i]] = num_count.get(lst[i], 0) + 1\n        if num_count[lst[i]] > 2:\n            return False\n    \n    # Check the last element count\n    num_count[lst[-1]] = num_count.get(lst[-1], 0) + 1\n    if num_count[lst[-1]] > 2:\n        return False\n    \n    return True\n\n# Test cases\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection\n    inter_start = max(start1, start2)\n    inter_end = min(end1, end2)\n    \n    # Check if there is an intersection\n    if inter_start <= inter_end:\n        # Calculate the length of the intersection\n        length = (inter_end - inter_start) + 1\n        # Check if the length is a prime number\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"\n\n# Sample tests\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/128", "language": "python", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sum_of_magnitudes = sum(abs(x) for x in arr)\n    product_of_signs = 1\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n    \n    return sum_of_magnitudes * product_of_signs\n\n# Test examples\nprint(prod_signs([1, 2, 2, -4]))  # Expected output: -9\nprint(prod_signs([0, 1]))         # Expected output: 0\nprint(prod_signs([]))             # Expected output: None"}
{"task_id": "HumanEval/129", "language": "python", "completion": "def minPath(grid, k):\n    n = len(grid)\n    min_path = None\n    \n    def dfs(x, y, path):\n        nonlocal min_path\n        \n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path[:]\n            return\n        \n        # Direction vectors for moving to adjacent cells (up, down, left, right)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n    \n    return min_path\n\n# Test cases\nprint(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/130", "language": "python", "completion": "def tri(n):\n    # Memoization dictionary to store already computed values\n    memo = {}\n    \n    def compute_tri(m):\n        # If the value is already computed, return it\n        if m in memo:\n            return memo[m]\n        \n        # Base case\n        if m == 1:\n            result = 3\n        elif m % 2 == 0:\n            # Even case\n            result = 1 + m / 2\n        else:\n            # Odd case\n            # We need to compute tri(m - 1), tri(m - 2), tri(m + 1)\n            # Ensure we compute m + 1 only if it's in the range we care about\n            result = compute_tri(m - 1) + compute_tri(m - 2) + compute_tri(m + 1)\n        \n        # Store the result in memo dictionary\n        memo[m] = result\n        return result\n    \n    # Generate the first n + 1 numbers of the Tribonacci sequence\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(compute_tri(i))\n    \n    return sequence"}
{"task_id": "HumanEval/131", "language": "python", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    \n    if not has_odd_digit:\n        return 0\n    return product\n\n# Test cases\nprint(digits(1))    # Output: 1\nprint(digits(4))    # Output: 0\nprint(digits(235))  # Output: 15"}
{"task_id": "HumanEval/132", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    nested = True\n            else:\n                continue\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))         # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]'))         # \u279e False\nprint(is_nested('[]'))           # \u279e False\nprint(is_nested('[[][]]'))       # \u279e True\nprint(is_nested('[[]][['))       # \u279e True"}
{"task_id": "HumanEval/133", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    # Apply the ceiling function to each element in the list\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Square each element in the rounded list\n    squared_lst = [x**2 for x in rounded_lst]\n    \n    # Sum the squared values\n    result = sum(squared_lst)\n    \n    return result\n\n# Testing the function with the provided examples\nprint(sum_squares([1, 2, 3]))      # Output: 14\nprint(sum_squares([1, 4, 9]))      # Output: 98\nprint(sum_squares([1, 3, 5, 7]))   # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output: 29\nprint(sum_squares([-2.4, 1, 1]))   # Output: 6"}
{"task_id": "HumanEval/134", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Step 1: Check if the input string is empty\n    if not txt:\n        return False\n    \n    # Step 2: Strip any trailing whitespace from the string\n    stripped_txt = txt.rstrip()\n    \n    # Step 3: Check if the last character is an alphabetical letter\n    if not stripped_txt or not stripped_txt[-1].isalpha():\n        return False\n    \n    # Step 4: Ensure that this character is not part of a word\n    # Check the character before the last character\n    if len(stripped_txt) > 1 and stripped_txt[-2] != ' ':\n        return False\n    \n    # If all checks pass, return True\n    return True\n\n# Examples to test the function\nprint(check_if_last_char_is_a_letter(\"apple pie\"))   # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))            # \u279e False"}
{"task_id": "HumanEval/135", "language": "python", "completion": "def can_arrange(arr):\n    # Iterate through the array from the second element to the end\n    for i in range(len(arr) - 1, 0, -1):\n        # Check if the current element is less than the preceding element\n        if arr[i] < arr[i - 1]:\n            return i\n    # If no such element is found, return -1\n    return -1\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1"}
{"task_id": "HumanEval/136", "language": "python", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Expected output: (None, 1)\nprint(largest_smallest_integers([]))                  # Expected output: (None, None)\nprint(largest_smallest_integers([0]))                 # Expected output: (None, None)\nprint(largest_smallest_integers([-1, -3, -5, 2, 4, 6]))  # Expected output: (-1, 2)\nprint(largest_smallest_integers([-1, -2, -3]))        # Expected output: (-1, None)\nprint(largest_smallest_integers([1, 2, 3]))           # Expected output: (None, 1)"}
{"task_id": "HumanEval/137", "language": "python", "completion": "def compare_one(a, b):\n    def to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return float(value)\n\n    # Convert both values to float for comparison\n    float_a = to_float(a)\n    float_b = to_float(b)\n\n    if float_a > float_b:\n        return a\n    elif float_b > float_a:\n        return b\n    else:\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))        # \u279e 2.5\nprint(compare_one(1, \"2,3\"))      # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))    # \u279e \"6\"\nprint(compare_one(\"1\", 1))        # \u279e None"}
{"task_id": "HumanEval/138", "language": "python", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\"\"\"\n    # Check if n is even and n is at least 8\n    return n >= 8 and n % 2 == 0\n\n# Example usage:\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True\nprint(is_equal_to_sum_even(10)) # True\nprint(is_equal_to_sum_even(20)) # True"}
{"task_id": "HumanEval/139", "language": "python", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= math.factorial(i)\n    \n    return special_fact\n\n# Example usage:\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/140", "language": "python", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace sequences of 3 or more spaces with a hyphen\n    text = re.sub(r' {3,}', '-', text)\n    # Replace each remaining space with an underscore\n    text = text.replace(' ', '_')\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))         # \"Example\"\nprint(fix_spaces(\"Example 1\"))       # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))      # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))    # \"_Example-3\""}
{"task_id": "HumanEval/141", "language": "python", "completion": "def file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into parts before and after the dot\n    name_part, extension_part = file_name.split('.')\n    \n    # Check if the part before the dot is non-empty and starts with a letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the part after the dot is a valid extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n    \n    # Count the number of digits in the entire file name\n    digit_count = sum(char.isdigit() for char in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    # If all checks pass, the file name is valid\n    return 'Yes'\n\n# Example usage:\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'\nprint(file_name_check(\"example1234.txt\"))  # => 'No'\nprint(file_name_check(\".txt\"))  # => 'No'\nprint(file_name_check(\"example\"))  # => 'No'\nprint(file_name_check(\"example.txtexe\"))  # => 'No'"}
{"task_id": "HumanEval/142", "language": "python", "completion": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n\n# Examples\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126"}
{"task_id": "HumanEval/143", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"Return words from the sentence whose lengths are prime numbers.\"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage:\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/144", "language": "python", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = fraction.split('/')\n        return int(numerator), int(denominator)\n    \n    # Parse both fractions\n    num1, denom1 = parse_fraction(x)\n    num2, denom2 = parse_fraction(n)\n    \n    # Calculate the resulting numerator and denominator\n    result_numerator = num1 * num2\n    result_denominator = denom1 * denom2\n    \n    # Check if the result is a whole number\n    return result_numerator % result_denominator == 0\n\n# Testing the function\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "language": "python", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        # Calculate the sum of digits, ignoring the sign\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Pair each number with its digit sum and original index\n    indexed_nums = [(num, digit_sum(num), index) for index, num in enumerate(nums)]\n    \n    # Sort based on the sum of digits first, then by original index\n    sorted_nums = sorted(indexed_nums, key=lambda x: (x[1], x[2]))\n    \n    # Extract the sorted numbers\n    return [num for num, _, _ in sorted_nums]\n\n# Example usage:\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "language": "python", "completion": "def is_odd(num):\n    return num % 2 != 0\n\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        abs_num = abs(num)\n        if abs_num > 10:\n            str_num = str(abs_num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if is_odd(first_digit) and is_odd(last_digit):\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "language": "python", "completion": "def get_max_triples(n):\n    # Step 1: Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Step 2: Classify elements by their value modulo 3\n    mod_count = [0, 0, 0]  # To count numbers with remainders 0, 1, and 2 when divided by 3\n    for num in a:\n        mod_count[num % 3] += 1\n    \n    # Step 3: Count valid triples\n    count = 0\n    # Different combinations of mods that sum to 0 modulo 3\n    # (0,0,0), (0,1,2), (1,1,1), (2,2,2)\n    # (0,0,0): Choose 3 out of mod_count[0]\n    if mod_count[0] >= 3:\n        count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    \n    # (1,1,1): Choose 3 out of mod_count[1]\n    if mod_count[1] >= 3:\n        count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    \n    # (2,2,2): Choose 3 out of mod_count[2]\n    if mod_count[2] >= 3:\n        count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    \n    # (0,1,2): Choose 1 out of each mod_count[0], mod_count[1], and mod_count[2]\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n\n# Example usage:\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "HumanEval/148", "language": "python", "completion": "def bf(planet1, planet2):\n    # List of planets in order from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are in the list\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Extract the planets between the two indices\n    result = planets[index1 + 1:index2]\n    \n    return tuple(result)\n\n# Example usage\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # Output: (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "language": "python", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Accepts a list of strings, removes strings with odd lengths,\n    and returns the sorted list. The list is sorted first by the length\n    of each string and then alphabetically for strings of the same length.\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list: first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"abc\", \"abcd\", \"ab\", \"xy\", \"x\"]) == [\"ab\", \"xy\", \"abcd\"]\nassert sorted_list_sum([\"z\", \"yz\", \"abc\", \"abcd\", \"ab\", \"xy\", \"x\"]) == [\"ab\", \"xy\", \"yz\", \"abcd\"]"}
{"task_id": "HumanEval/150", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Examples:\nprint(x_or_y(7, 34, 12))  # Should return 34 since 7 is a prime number\nprint(x_or_y(15, 8, 5))   # Should return 5 since 15 is not a prime number"}
{"task_id": "HumanEval/151", "language": "python", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    sum_of_squares = 0\n    \n    for num in lst:\n        # Check if the number is an integer, positive, and odd\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num * num\n    \n    return sum_of_squares\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))   # Output: 0\nprint(double_the_difference([9, -2]))       # Output: 81\nprint(double_the_difference([0]))           # Output: 0\nprint(double_the_difference([]))            # Output: 0"}
{"task_id": "HumanEval/152", "language": "python", "completion": "def compare(game, guess):\n    # Initialize an empty list to store the result.\n    result = []\n    \n    # Iterate through the lists using the zip function to get pairs of (score, guess).\n    for score, guess in zip(game, guess):\n        # Calculate the absolute difference if the guess is incorrect.\n        # If the guess is correct, the difference is 0.\n        difference = abs(score - guess)\n        \n        # Append the difference to the result list.\n        result.append(difference)\n    \n    # Return the result list.\n    return result\n\n# Examples to test the function\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/153", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    max_strength = float('-inf')\n    strongest_extension = None\n\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'"}
{"task_id": "HumanEval/154", "language": "python", "completion": "def rotate_string(s, n):\n    \"\"\"Helper function to rotate a string s by n positions.\"\"\"\n    return s[n:] + s[:n]\n\ndef generate_rotations(s):\n    \"\"\"Generate all rotations of the string s.\"\"\"\n    rotations = []\n    for i in range(len(s)):\n        rotations.append(rotate_string(s, i))\n    return rotations\n\ndef cycpattern_check(a, b):\n    \"\"\"Check if the second word (or any of its rotations) is a substring of the first word.\"\"\"\n    rotations = generate_rotations(b)\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\"))   # => False\nprint(cycpattern_check(\"hello\",\"ell\"))  # => True\nprint(cycpattern_check(\"whassup\",\"psus\"))  # => False\nprint(cycpattern_check(\"abab\",\"baa\"))   # => True\nprint(cycpattern_check(\"efef\",\"eeff\"))  # => False\nprint(cycpattern_check(\"himenss\",\"simen\"))  # => True"}
{"task_id": "HumanEval/155", "language": "python", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n    \n    # Convert the number to a string to iterate through each digit\n    num_str = str(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the number string\n    for digit in num_str:\n        digit = int(digit)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple with the count of even and odd digits\n    return (even_count, odd_count)\n\n# Testing the function\nprint(even_odd_count(-12))  # (1, 1)\nprint(even_odd_count(123))  # (1, 2)"}
{"task_id": "HumanEval/156", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the Roman numerals and their corresponding integer values\n    roman_numerals = [\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1)\n    ]\n\n    # Initialize the result string\n    result = []\n\n    # Iterate over the roman numerals and their values\n    for symbol, value in roman_numerals:\n        while number >= value:\n            result.append(symbol)\n            number -= value\n\n    # Join the result list into a string and convert to lowercase\n    return ''.join(result).lower()\n\n# Examples for testing:\nprint(int_to_mini_roman(19))  # Output: 'xix'\nprint(int_to_mini_roman(152)) # Output: 'clii'\nprint(int_to_mini_roman(426)) # Output: 'cdxxvi'"}
{"task_id": "HumanEval/157", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # First, identify the longest side\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if a^2 + b^2 == c^2\n    return a**2 + b**2 == c**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "HumanEval/158", "language": "python", "completion": "def find_max(words):\n    max_unique_chars = 0\n    result_word = ''\n    \n    for word in words:\n        unique_chars = len(set(word))  # Count unique characters in the word\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n    \n    return result_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "language": "python", "completion": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if remaining >= need:\n        return [total_eaten, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n# Test cases\nprint(eat(5, 6, 10))  # [11, 4]\nprint(eat(4, 8, 9))   # [12, 1]\nprint(eat(1, 10, 10)) # [11, 0]\nprint(eat(2, 11, 5))  # [7, 0]"}
{"task_id": "HumanEval/160", "language": "python", "completion": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list should be equal to the length of the operand list minus one.\")\n\n    # Start with the first operand\n    expression = str(operand[0])\n    \n    # Iterate over the operators and the remaining operands to build the expression\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i + 1]}\"\n    \n    # Evaluate the final expression\n    return eval(expression)\n\n# Example usage\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # Output: 9"}
{"task_id": "HumanEval/161", "language": "python", "completion": "def solve(s):\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Reverse the case of each letter in the string\n        return ''.join(char.lower() if char.isupper() else char.upper() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the entire string\n        return s[::-1]\n\n# Testing the function with the provided examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "HumanEval/162", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n\n# Example usage and testing\nif __name__ == \"__main__\":\n    text = \"Hello world\"\n    print(string_to_md5(text))  # Output should be '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Generate the range of numbers between a and b (inclusive)\n    range_list = range(a, b + 1)\n    \n    # Filter out the even numbers\n    result = [x for x in range_list if x % 2 == 0 and x < 10]\n    \n    return result\n\n# Test examples\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []"}

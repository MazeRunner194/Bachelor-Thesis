{"task_id": "HumanEval_kotlin/0", "language": "kotlin", "completion": "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// Test cases\nfun main() {\n    println(hasCloseElements(listOf(1.0, 2.0, 3.0), 0.5)) // False\n    println(hasCloseElements(listOf(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)) // True\n}"}
{"task_id": "HumanEval_kotlin/1", "language": "kotlin", "completion": "fun separateParenGroups(parenString: String): List<String> {\n    val result = mutableListOf<String>()\n    var currentGroup = StringBuilder()\n    var balance = 0\n\n    for (char in parenString) {\n        if (char == ' ') continue\n\n        currentGroup.append(char)\n        if (char == '(') {\n            balance++\n        } else if (char == ')') {\n            balance--\n        }\n\n        if (balance == 0 && currentGroup.isNotEmpty()) {\n            result.add(currentGroup.toString())\n            currentGroup = StringBuilder()\n        }\n    }\n\n    return result\n}\n\nfun main() {\n    println(separateParenGroups(\"( ) (( )) (( )( ))\"))  // Output: ['()', '(())', '(()())']\n}"}
{"task_id": "HumanEval_kotlin/2", "language": "kotlin", "completion": "fun truncateNumber(number: Double): Double {\n    val integerPart = number.toInt()\n    return number - integerPart\n}\n\n// Example usage:\nfun main() {\n    println(truncateNumber(3.5))  // Output: 0.5\n    println(truncateNumber(10.75)) // Output: 0.75\n    println(truncateNumber(7.2))   // Output: 0.2\n}"}
{"task_id": "HumanEval_kotlin/3", "language": "kotlin", "completion": "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (operation in operations) {\n        balance += operation\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n\nfun main() {\n    println(belowZero(listOf(1, 2, 3))) // Output: False\n    println(belowZero(listOf(1, 2, -4, 5))) // Output: True\n}"}
{"task_id": "HumanEval_kotlin/4", "language": "kotlin", "completion": "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    // Step 1: Calculate the mean (average) of the numbers\n    val mean = numbers.sum() / numbers.size\n\n    // Step 2: Calculate the absolute deviations from the mean\n    val absoluteDeviations = numbers.map { number -> kotlin.math.abs(number - mean) }\n\n    // Step 3: Calculate the mean of the absolute deviations\n    return absoluteDeviations.sum() / absoluteDeviations.size\n}\n\n// Example usage\nfun main() {\n    val numbers = listOf(1.0, 2.0, 3.0, 4.0)\n    println(meanAbsoluteDeviation(numbers))  // Output: 1.0\n}"}
{"task_id": "HumanEval_kotlin/5", "language": "kotlin", "completion": "fun intersperse(numbers: List<Any>, delimiter: Int): List<Any> {\n    if (numbers.isEmpty()) return numbers\n\n    val result = mutableListOf<Any>()\n    for (i in numbers.indices) {\n        result.add(numbers[i])\n        if (i != numbers.size - 1) {\n            result.add(delimiter)\n        }\n    }\n    return result\n}\n\n// Example usage:\nfun main() {\n    println(intersperse(emptyList(), 4)) // Output: []\n    println(intersperse(listOf(1, 2, 3), 4)) // Output: [1, 4, 2, 4, 3]\n}"}
{"task_id": "HumanEval_kotlin/6", "language": "kotlin", "completion": "fun parseNestedParens(parenString: String): List<Int> {\n    return parenString.split(\" \").map { group ->\n        var maxDepth = 0\n        var currentDepth = 0\n\n        for (char in group) {\n            when (char) {\n                '(' -> {\n                    currentDepth++\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth\n                    }\n                }\n                ')' -> {\n                    currentDepth--\n                }\n            }\n        }\n        maxDepth\n    }\n}\n\nfun main() {\n    println(parseNestedParens(\"(()()) ((())) () ((())()())\"))  // Output: [2, 3, 1, 3]\n}"}
{"task_id": "HumanEval_kotlin/7", "language": "kotlin", "completion": "fun filterBySubstring(strings: List<String>, substring: String): List<String> {\n    return strings.filter { it.contains(substring) }\n}"}
{"task_id": "HumanEval_kotlin/8", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): Pair<Int, Int> {\n    // If the list is empty, return (0, 1)\n    if (numbers.isEmpty()) {\n        return Pair(0, 1)\n    }\n    \n    // Calculate the sum of the list\n    val sum = numbers.sum()\n    \n    // Calculate the product of the list\n    val product = numbers.fold(1) { acc, num -> acc * num }\n    \n    // Return the result as a Pair\n    return Pair(sum, product)\n}\n\nfun main() {\n    // Test cases\n    println(sumProduct(emptyList())) // Expected output: (0, 1)\n    println(sumProduct(listOf(1, 2, 3, 4))) // Expected output: (10, 24)\n}"}
{"task_id": "HumanEval_kotlin/9", "language": "kotlin", "completion": "fun rollingMax(numbers: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    var currentMax = Int.MIN_VALUE\n\n    for (number in numbers) {\n        if (number > currentMax) {\n            currentMax = number\n        }\n        result.add(currentMax)\n    }\n\n    return result\n}\n\n// Test the function\nfun main() {\n    val numbers = listOf(1, 2, 3, 2, 3, 4, 2)\n    val rollingMaxList = rollingMax(numbers)\n    println(rollingMaxList)  // Output: [1, 2, 3, 3, 3, 4, 4]\n}"}
{"task_id": "HumanEval_kotlin/10", "language": "kotlin", "completion": "fun makePalindrome(string: String): String {\n    // Find the longest palindromic suffix\n    fun isPalindrome(s: String): Boolean {\n        return s == s.reversed()\n    }\n\n    if (string.isEmpty() || isPalindrome(string)) {\n        return string\n    }\n\n    for (i in string.indices.reversed()) {\n        if (isPalindrome(string.substring(i))) {\n            val prefix = string.substring(0, i)\n            return string + prefix.reversed()\n        }\n    }\n\n    // If no palindromic suffix is found (which shouldn't happen), return the string itself\n    return string\n}\n\n// Test cases\nfun main() {\n    println(makePalindrome(\"\")) // Output: \"\"\n    println(makePalindrome(\"cat\")) // Output: \"catac\"\n    println(makePalindrome(\"cata\")) // Output: \"catac\"\n}"}
{"task_id": "HumanEval_kotlin/11", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    // Ensure both strings are of the same length\n    require(a.length == b.length) { \"Strings must be of the same length\" }\n\n    val result = StringBuilder()\n\n    for (i in a.indices) {\n        // Perform XOR on each character and append to the result\n        result.append(if (a[i] == b[i]) '0' else '1')\n    }\n\n    return result.toString()\n}\n\n// Test the function\nfun main() {\n    println(stringXor(\"010\", \"110\")) // Output: \"100\"\n}"}
{"task_id": "HumanEval_kotlin/12", "language": "kotlin", "completion": "fun longest(strings: List<String>): String? {\n    // Check if the list is empty\n    if (strings.isEmpty()) return null\n\n    // Initialize the longest string with the first element of the list\n    var longestString = strings[0]\n\n    // Iterate through the list to find the longest string\n    for (string in strings) {\n        if (string.length > longestString.length) {\n            longestString = string\n        }\n    }\n\n    return longestString\n}\n\n// Test cases\nfun main() {\n    println(longest(emptyList())) // Expected output: null\n    println(longest(listOf(\"a\", \"b\", \"c\"))) // Expected output: \"a\"\n    println(longest(listOf(\"a\", \"bb\", \"ccc\"))) // Expected output: \"ccc\"\n}"}
{"task_id": "HumanEval_kotlin/13", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var x = a\n    var y = b\n\n    while (y != 0) {\n        val temp = y\n        y = x % y\n        x = temp\n    }\n\n    return x\n}\n\n// Examples\nfun main() {\n    println(greatestCommonDivisor(3, 5))  // Output: 1\n    println(greatestCommonDivisor(25, 15))  // Output: 5\n}"}
{"task_id": "HumanEval_kotlin/14", "language": "kotlin", "completion": "fun allPrefixes(string: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in string.indices) {\n        prefixes.add(string.substring(0, i + 1))\n    }\n    return prefixes\n}\n\n// Example usage:\nfun main() {\n    val result = allPrefixes(\"abc\")\n    println(result)  // Output: [a, ab, abc]\n}"}
{"task_id": "HumanEval_kotlin/15", "language": "kotlin", "completion": "fun stringSequence(n: Int): String {\n    return (0..n).joinToString(\" \")\n}\n\n// Example usage:\nfun main() {\n    println(stringSequence(0))  // Output: \"0\"\n    println(stringSequence(5))  // Output: \"0 1 2 3 4 5\"\n}"}
{"task_id": "HumanEval_kotlin/16", "language": "kotlin", "completion": "fun countDistinctCharacters(string: String): Int {\n    val lowerCaseString = string.toLowerCase()\n    val uniqueChars = mutableSetOf<Char>()\n    \n    for (char in lowerCaseString) {\n        uniqueChars.add(char)\n    }\n    \n    return uniqueChars.size\n}\n\n// Example usage\nfun main() {\n    println(countDistinctCharacters(\"xyzXYZ\")) // Output: 3\n    println(countDistinctCharacters(\"Jerry\"))  // Output: 4\n}"}
{"task_id": "HumanEval_kotlin/17", "language": "kotlin", "completion": "fun parseMusic(musicString: String): List<Int> {\n    // Define a map to hold the note to beats conversion\n    val noteToBeats = mapOf(\n        \"o\" to 4,\n        \"o|\" to 2,\n        \".|\" to 1\n    )\n\n    // Split the input string by spaces to get individual notes\n    val notes = musicString.split(\" \")\n\n    // Map each note to its corresponding beats using the noteToBeats map\n    return notes.mapNotNull { noteToBeats[it] }\n}\n\n// Test the function\nfun main() {\n    val result = parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    println(result)  // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n}"}
{"task_id": "HumanEval_kotlin/18", "language": "kotlin", "completion": "fun howManyTimes(string: String, substring: String): Int {\n    if (substring.isEmpty()) return 0\n\n    var count = 0\n    var index = 0\n\n    while (index <= string.length - substring.length) {\n        if (string.substring(index, index + substring.length) == substring) {\n            count++\n        }\n        index++\n    }\n\n    return count\n}\n\nfun main() {\n    println(howManyTimes(\"\", \"a\"))           // Output: 0\n    println(howManyTimes(\"aaa\", \"a\"))        // Output: 3\n    println(howManyTimes(\"aaaa\", \"aa\"))      // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/19", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    // Mapping of numerals to their corresponding integer values\n    val numeralToInt = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n\n    // Mapping of integers to their corresponding numeral values\n    val intToNumeral = numeralToInt.entries.associate { (k, v) -> v to k }\n\n    // Split the input string into a list of numerals\n    val numeralList = numbers.split(\" \")\n\n    // Convert the numerals to integers, sort them, and then convert back to numerals\n    val sortedNumerals = numeralList\n        .map { numeralToInt[it]!! } // Convert to integer\n        .sorted()                   // Sort integers\n        .map { intToNumeral[it]!! } // Convert back to numeral\n\n    // Join the sorted numerals into a single string\n    return sortedNumerals.joinToString(\" \")\n}\n\n// Example usage\nfun main() {\n    val input = \"three one five\"\n    val result = sortNumbers(input)\n    println(result) // Output: \"one three five\"\n}"}
{"task_id": "HumanEval_kotlin/20", "language": "kotlin", "completion": "fun findClosestElements(numbers: List<Double>): List<Double> {\n    require(numbers.size >= 2) { \"The input list must contain at least two elements.\" }\n\n    // Step 1: Sort the list\n    val sortedNumbers = numbers.sorted()\n\n    // Step 2: Initialize variables to store the closest pair and the minimum difference\n    var minDiff = Double.MAX_VALUE\n    var closestPair = listOf<Double>()\n\n    // Step 3: Iterate through the sorted list and find the closest pair\n    for (i in 0 until sortedNumbers.size - 1) {\n        val diff = sortedNumbers[i + 1] - sortedNumbers[i]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i], sortedNumbers[i + 1])\n        }\n    }\n\n    return closestPair\n}\n\n// Test cases\nfun main() {\n    println(findClosestElements(listOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))) // Output: [2.0, 2.2]\n    println(findClosestElements(listOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))) // Output: [2.0, 2.0]\n}"}
{"task_id": "HumanEval_kotlin/21", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    if (numbers.size < 2) {\n        throw IllegalArgumentException(\"List must contain at least two elements.\")\n    }\n\n    val min = numbers.minOrNull() ?: throw IllegalArgumentException(\"List cannot be empty.\")\n    val max = numbers.maxOrNull() ?: throw IllegalArgumentException(\"List cannot be empty.\")\n    \n    if (min == max) {\n        throw IllegalArgumentException(\"All elements in the list are the same.\")\n    }\n\n    return numbers.map { (it - min) / (max - min) }\n}\n\n// Example usage\nfun main() {\n    val rescaled = rescaleToUnit(listOf(1.0, 2.0, 3.0, 4.0, 5.0))\n    println(rescaled)  // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n}"}
{"task_id": "HumanEval_kotlin/22", "language": "kotlin", "completion": "fun filterIntegers(values: List<Any>): List<Any> {\n    return values.filter { it is Int }\n}\n\n// Testing the function\nfun main() {\n    println(filterIntegers(listOf('a', 3.14, 5))) // [5]\n    println(filterIntegers(listOf(1, 2, 3, \"abc\", emptyMap<Any, Any>(), emptyList<Any>()))) // [1, 2, 3]\n}"}
{"task_id": "HumanEval_kotlin/23", "language": "kotlin", "completion": "fun strlen(string: String): Int {\n    return string.length\n}"}
{"task_id": "HumanEval_kotlin/24", "language": "kotlin", "completion": "fun largestDivisor(n: Int): Int {\n    // Start from n-1 and go downwards\n    for (i in n - 1 downTo 1) {\n        if (n % i == 0) {\n            return i\n        }\n    }\n    // If no divisor found (which theoretically shouldn't happen as 1 is always a divisor)\n    return 1\n}\n\n// Test cases\nfun main() {\n    println(largestDivisor(15)) // Output: 5\n    println(largestDivisor(36)) // Output: 18\n    println(largestDivisor(7))  // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/25", "language": "kotlin", "completion": "fun factorize(n: Int): List<Int> {\n    var num = n\n    val factors = mutableListOf<Int>()\n    \n    // Start with the smallest prime number\n    var factor = 2\n    \n    // Continue until the number is reduced to 1\n    while (num > 1) {\n        if (num % factor == 0) {\n            factors.add(factor)\n            num /= factor\n        } else {\n            factor++\n        }\n    }\n    \n    return factors\n}\n\n// Testing the function\nfun main() {\n    println(factorize(8))    // [2, 2, 2]\n    println(factorize(25))   // [5, 5]\n    println(factorize(70))   // [2, 5, 7]\n}"}
{"task_id": "HumanEval_kotlin/26", "language": "kotlin", "completion": "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    // Create a frequency map to count occurrences of each element\n    val frequencyMap = numbers.groupingBy { it }.eachCount()\n    \n    // Filter the list to include only elements that occur exactly once\n    return numbers.filter { frequencyMap[it] == 1 }\n}\n\nfun main() {\n    val inputList = listOf(1, 2, 3, 2, 4)\n    val result = removeDuplicates(inputList)\n    println(result)  // Output: [1, 3, 4]\n}"}
{"task_id": "HumanEval_kotlin/27", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    val flipped = StringBuilder()\n\n    for (char in string) {\n        if (char.isUpperCase()) {\n            flipped.append(char.toLowerCase())\n        } else if (char.isLowerCase()) {\n            flipped.append(char.toUpperCase())\n        } else {\n            flipped.append(char)\n        }\n    }\n\n    return flipped.toString()\n}\n\n// Test the function\nfun main() {\n    println(flipCase(\"Hello\"))  // Output: hELLO\n}"}
{"task_id": "HumanEval_kotlin/28", "language": "kotlin", "completion": "fun concatenate(strings: List<Any>): String {\n    return strings.joinToString(\"\")\n}\n\n// Test cases\nfun main() {\n    println(concatenate(emptyList()))                // Output: ''\n    println(concatenate(listOf(\"a\", \"b\", \"c\")))      // Output: 'abc'\n}"}
{"task_id": "HumanEval_kotlin/29", "language": "kotlin", "completion": "fun filterByPrefix(strings: List<String>, prefix: String): List<String> {\n    return strings.filter { it.startsWith(prefix) }\n}\n\n// To test the function\nfun main() {\n    println(filterByPrefix(listOf(), \"a\")) // Output: []\n    println(filterByPrefix(listOf(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")) // Output: ['abc', 'array']\n}"}
{"task_id": "HumanEval_kotlin/30", "language": "kotlin", "completion": "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n\n// Example usage\nfun main() {\n    println(getPositive(listOf(-1, 2, -4, 5, 6))) // Output: [2, 5, 6]\n    println(getPositive(listOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) // Output: [5, 3, 2, 3, 9, 123, 1]\n}"}
{"task_id": "HumanEval_kotlin/31", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n\n    // Check if n is divisible by 2 or 3\n    if (n % 2 == 0 || n % 3 == 0) return false\n\n    // Check from 5 to sqrt(n)\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n\n// Test cases\nfun main() {\n    println(isPrime(6))     // False\n    println(isPrime(101))   // True\n    println(isPrime(11))    // True\n    println(isPrime(13441)) // True\n    println(isPrime(61))    // True\n    println(isPrime(4))     // False\n    println(isPrime(1))     // False\n}"}
{"task_id": "HumanEval_kotlin/33", "language": "kotlin", "completion": "fun sortThird(l: List<Int>): List<Int> {\n    // Step 1: Identify the indices that are divisible by three and extract their values.\n    val indicesToSort = l.indices.filter { it % 3 == 0 }\n    val valuesToSort = indicesToSort.map { l[it] }\n\n    // Step 2: Sort the extracted values.\n    val sortedValues = valuesToSort.sorted()\n\n    // Step 3: Create a mutable list to hold the result.\n    val resultList = l.toMutableList()\n\n    // Step 4: Insert the sorted values back into their original positions.\n    for ((index, value) in indicesToSort.zip(sortedValues)) {\n        resultList[index] = value\n    }\n\n    // Step 5: Return the modified list.\n    return resultList.toList()\n}\n\n// Testing the function with the given examples\nfun main() {\n    println(sortThird(listOf(1, 2, 3))) // [1, 2, 3]\n    println(sortThird(listOf(5, 6, 3, 4, 8, 9, 2))) // [2, 6, 3, 4, 8, 9, 5]\n}"}
{"task_id": "HumanEval_kotlin/34", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.toSet().toList().sorted()\n}\n\n// Example usage\nfun main() {\n    val input = listOf(5, 3, 5, 2, 3, 3, 9, 0, 123)\n    val result = unique(input)\n    println(result)  // Output: [0, 2, 3, 5, 9, 123]\n}"}
{"task_id": "HumanEval_kotlin/35", "language": "kotlin", "completion": "fun maxElement(l: List<Int>): Int {\n    return l.maxOrNull()!!\n}\n\n// Examples of usage\nfun main() {\n    println(maxElement(listOf(1, 2, 3))) // Output: 3\n    println(maxElement(listOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) // Output: 123\n}"}
{"task_id": "HumanEval_kotlin/36", "language": "kotlin", "completion": "fun fizzBuzz(n: Int): Int {\n    var count = 0\n    \n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count += i.toString().count { it == '7' }\n        }\n    }\n    \n    return count\n}\n\n// Test cases\nfun main() {\n    println(fizzBuzz(50))  // Output: 0\n    println(fizzBuzz(78))  // Output: 2\n    println(fizzBuzz(79))  // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/37", "language": "kotlin", "completion": "fun sortEven(l: List<Int>): List<Int> {\n    // Extract values at even indices\n    val evenIndicesValues = l.filterIndexed { index, _ -> index % 2 == 0 }\n\n    // Sort the values at even indices\n    val sortedEvenIndicesValues = evenIndicesValues.sorted()\n\n    // Create a mutable list to hold the result\n    val result = l.toMutableList()\n\n    // Replace values at even indices with the sorted values\n    var evenIndex = 0\n    for (i in l.indices step 2) {\n        result[i] = sortedEvenIndicesValues[evenIndex]\n        evenIndex++\n    }\n\n    return result\n}\n\n// Test cases\nfun main() {\n    println(sortEven(listOf(1, 2, 3)))             // Output: [1, 2, 3]\n    println(sortEven(listOf(5, 6, 3, 4)))          // Output: [3, 6, 5, 4]\n    println(sortEven(listOf(8, 1, 2, 7, 6, 3)))    // Output: [2, 1, 6, 7, 8, 3]\n}"}
{"task_id": "HumanEval_kotlin/39", "language": "kotlin", "completion": "fun primeFib(n: Int): Int {\n    if (n <= 0) throw IllegalArgumentException(\"n should be a positive integer\")\n\n    // Function to check if a number is prime\n    fun isPrime(num: Int): Boolean {\n        if (num < 2) return false\n        for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n\n    var count = 0\n    var a = 1\n    var b = 1\n\n    while (true) {\n        val fib = a\n        a = b\n        b += fib\n\n        if (isPrime(fib)) {\n            count++\n            if (count == n) return fib\n        }\n    }\n}\n\n// Test cases\nfun main() {\n    println(primeFib(1))  // Output: 2\n    println(primeFib(2))  // Output: 3\n    println(primeFib(3))  // Output: 5\n    println(primeFib(4))  // Output: 13\n    println(primeFib(5))  // Output: 89\n}"}
{"task_id": "HumanEval_kotlin/40", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    if (l.size < 3) return false\n\n    val sortedList = l.sorted()\n\n    for (i in 0 until sortedList.size - 2) {\n        var left = i + 1\n        var right = sortedList.size - 1\n\n        while (left < right) {\n            val sum = sortedList[i] + sortedList[left] + sortedList[right]\n            when {\n                sum == 0 -> return true\n                sum < 0 -> left++\n                else -> right--\n            }\n        }\n    }\n    return false\n}\n\n// Test cases\nfun main() {\n    println(triplesSumToZero(listOf(1, 3, 5, 0))) // False\n    println(triplesSumToZero(listOf(1, 3, -2, 1))) // True\n    println(triplesSumToZero(listOf(1, 2, 3, 7))) // False\n    println(triplesSumToZero(listOf(2, 4, -5, 3, 9, 7))) // True\n    println(triplesSumToZero(listOf(1))) // False\n}"}
{"task_id": "HumanEval_kotlin/41", "language": "kotlin", "completion": "fun carRaceCollision(n: Int): Int {\n    return n * n\n}"}
{"task_id": "HumanEval_kotlin/42", "language": "kotlin", "completion": "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}"}
{"task_id": "HumanEval_kotlin/43", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seenNumbers = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seenNumbers) {\n            return true\n        }\n        seenNumbers.add(num)\n    }\n    return false\n}\n\n// Test cases\nfun main() {\n    println(pairsSumToZero(listOf(1, 3, 5, 0))) // False\n    println(pairsSumToZero(listOf(1, 3, -2, 1))) // False\n    println(pairsSumToZero(listOf(1, 2, 3, 7))) // False\n    println(pairsSumToZero(listOf(2, 4, -5, 3, 5, 7))) // True\n    println(pairsSumToZero(listOf(1))) // False\n}"}
{"task_id": "HumanEval_kotlin/44", "language": "kotlin", "completion": "fun changeBase(x: Int, base: Int): String {\n    require(base in 2..9) { \"Base must be between 2 and 9\" }\n\n    if (x == 0) return \"0\"\n\n    var number = x\n    val result = StringBuilder()\n\n    while (number > 0) {\n        val remainder = number % base\n        result.append(remainder)\n        number /= base\n    }\n\n    return result.reverse().toString()\n}\n\n// Test cases\nfun main() {\n    println(changeBase(8, 3))  // Output: '22'\n    println(changeBase(8, 2))  // Output: '1000'\n    println(changeBase(7, 2))  // Output: '111'\n}"}
{"task_id": "HumanEval_kotlin/45", "language": "kotlin", "completion": "fun triangleArea(a: Int, h: Int): Double {\n    return 0.5 * a * h\n}\n\n// Example usage\nfun main() {\n    println(triangleArea(5, 3))  // Output: 7.5\n}"}
{"task_id": "HumanEval_kotlin/46", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    // Base cases\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    // Initialize the first four elements of the sequence\n    val fibSequence = mutableListOf(0, 0, 2, 0)\n\n    // Compute the sequence iteratively\n    for (i in 4..n) {\n        val nextValue = fibSequence[i-1] + fibSequence[i-2] + fibSequence[i-3] + fibSequence[i-4]\n        fibSequence.add(nextValue)\n    }\n\n    return fibSequence[n]\n}\n\nfun main() {\n    println(fib4(5))  // Output: 4\n    println(fib4(6))  // Output: 8\n    println(fib4(7))  // Output: 14\n}"}
{"task_id": "HumanEval_kotlin/47", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    if (l.isEmpty()) {\n        throw IllegalArgumentException(\"The list cannot be empty.\")\n    }\n\n    val sortedList = l.sorted()\n    val size = sortedList.size\n\n    return if (size % 2 == 1) {\n        // Odd number of elements, return the middle one\n        sortedList[size / 2]\n    } else {\n        // Even number of elements, return the average of the two middle ones\n        val middle1 = sortedList[size / 2 - 1]\n        val middle2 = sortedList[size / 2]\n        (middle1 + middle2) / 2.0\n    }\n}\n\n// Example usage\nfun main() {\n    println(median(listOf(3, 1, 2, 4, 5)))       // Output: 3\n    println(median(listOf(-10, 4, 6, 1000, 10, 20))) // Output: 15.0\n}"}
{"task_id": "HumanEval_kotlin/48", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}\n\n// Test cases\nfun main() {\n    println(isPalindrome(\"\"))         // True\n    println(isPalindrome(\"aba\"))      // True\n    println(isPalindrome(\"aaaaa\"))    // True\n    println(isPalindrome(\"zbcd\"))     // False\n}"}
{"task_id": "HumanEval_kotlin/49", "language": "kotlin", "completion": "fun modp(n: Int, p: Int): Int {\n    if (p == 0) throw IllegalArgumentException(\"Modulo p cannot be zero\")\n    \n    var result = 1L\n    var base = 2L\n    var exponent = n\n    \n    while (exponent > 0) {\n        if (exponent % 2 == 1) {\n            result = (result * base) % p\n        }\n        base = (base * base) % p\n        exponent /= 2\n    }\n    \n    return result.toInt()\n}\n\n// Testing the function with provided examples\nfun main() {\n    println(modp(3, 5))    // Output: 3\n    println(modp(1101, 101)) // Output: 2\n    println(modp(0, 101))  // Output: 1\n    println(modp(3, 11))   // Output: 8\n    println(modp(100, 101)) // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/51", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    // Define a set of vowels for quick lookup\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    // Use the filter function to exclude vowels from the string\n    return text.filter { it !in vowels }\n}\n\n// Test cases\nfun main() {\n    println(removeVowels(\"\")) // Output: ''\n    println(removeVowels(\"abcdef\\nghijklm\")) // Output: 'bcdf\\nghjklm'\n    println(removeVowels(\"abcdef\")) // Output: 'bcdf'\n    println(removeVowels(\"aaaaa\")) // Output: ''\n    println(removeVowels(\"aaBAA\")) // Output: 'B'\n    println(removeVowels(\"zbcd\")) // Output: 'zbcd'\n}"}
{"task_id": "HumanEval_kotlin/52", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    for (number in l) {\n        if (number >= t) {\n            return false\n        }\n    }\n    return true\n}\n\n// Alternatively, using Kotlin's built-in functions\nfun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "HumanEval_kotlin/53", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n\n// Example usage\nfun main() {\n    println(add(2, 3))  // Output: 5\n    println(add(5, 7))  // Output: 12\n}"}
{"task_id": "HumanEval_kotlin/54", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    // Convert both strings to sets of characters.\n    val set0 = s0.toSet()\n    val set1 = s1.toSet()\n    \n    // Compare the two sets.\n    return set0 == set1\n}\n\n// Test cases\nfun main() {\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"))  // True\n    println(sameChars(\"abcd\", \"dddddddabc\"))               // True\n    println(sameChars(\"dddddddabc\", \"abcd\"))               // True\n    println(sameChars(\"eabcd\", \"dddddddabc\"))              // False\n    println(sameChars(\"abcd\", \"dddddddabce\"))              // False\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"))   // False\n}"}
{"task_id": "HumanEval_kotlin/55", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 0) return 0\n    if (n == 1) return 1\n\n    var a = 0\n    var b = 1\n    var result = 1\n\n    for (i in 2..n) {\n        result = a + b\n        a = b\n        b = result\n    }\n\n    return result\n}\n\nfun main() {\n    println(fib(10))  // Output: 55\n    println(fib(1))   // Output: 1\n    println(fib(8))   // Output: 21\n}"}
{"task_id": "HumanEval_kotlin/56", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    var balance = 0\n\n    for (char in brackets) {\n        when (char) {\n            '<' -> balance++\n            '>' -> balance--\n        }\n\n        // If balance goes negative, it means there's a closing bracket without a corresponding opening bracket\n        if (balance < 0) {\n            return false\n        }\n    }\n\n    // If balance is zero, all opening brackets have corresponding closing brackets\n    return balance == 0\n}\n\n// Test cases\nfun main() {\n    println(correctBracketing(\"<\"))       // False\n    println(correctBracketing(\"<>\"))      // True\n    println(correctBracketing(\"<<><>>\"))  // True\n    println(correctBracketing(\"><<>\"))    // False\n}"}
{"task_id": "HumanEval_kotlin/57", "language": "kotlin", "completion": "fun monotonic(l: List<Int>): Boolean {\n    if (l.isEmpty()) return true\n\n    var increasing = true\n    var decreasing = true\n\n    for (i in 0 until l.size - 1) {\n        if (l[i] < l[i + 1]) {\n            decreasing = false\n        }\n        if (l[i] > l[i + 1]) {\n            increasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n\n// Test cases\nfun main() {\n    println(monotonic(listOf(1, 2, 4, 20))) // True\n    println(monotonic(listOf(1, 20, 4, 10))) // False\n    println(monotonic(listOf(4, 1, 0, -10))) // True\n}"}
{"task_id": "HumanEval_kotlin/58", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    // Convert l2 to a set to eliminate duplicates and allow for efficient intersection\n    val setL2 = l2.toSet()\n    \n    // Find common elements and ensure they are unique by converting to a set\n    val commonElements = l1.filter { it in setL2 }.toSet()\n    \n    // Return the sorted list of common elements\n    return commonElements.sorted()\n}\n\n// Example usage\nfun main() {\n    println(common(listOf(1, 4, 3, 34, 653, 2, 5), listOf(5, 7, 1, 5, 9, 653, 121)))  // Output: [1, 5, 653]\n    println(common(listOf(5, 3, 2, 8), listOf(3, 2)))  // Output: [2, 3]\n}"}
{"task_id": "HumanEval_kotlin/59", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var largestFactor = 1\n    \n    // Check for number of 2s in factorization\n    while (num % 2 == 0) {\n        largestFactor = 2\n        num /= 2\n    }\n    \n    // num must be odd at this point, so we can skip even numbers\n    var factor = 3\n    while (factor * factor <= num) {\n        while (num % factor == 0) {\n            largestFactor = factor\n            num /= factor\n        }\n        factor += 2\n    }\n    \n    // When num is a prime number greater than 2\n    if (num > 2) {\n        largestFactor = num\n    }\n    \n    return largestFactor\n}\n\n// Test cases\nfun main() {\n    println(largestPrimeFactor(13195))  // Output: 29\n    println(largestPrimeFactor(2048))   // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/60", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}\n\nfun main() {\n    println(sumToN(30))  // Output: 465\n    println(sumToN(100)) // Output: 5050\n    println(sumToN(5))   // Output: 15\n    println(sumToN(10))  // Output: 55\n    println(sumToN(1))   // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/61", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    var balance = 0\n\n    for (char in brackets) {\n        when (char) {\n            '(' -> balance++\n            ')' -> balance--\n        }\n        // If balance goes negative, it means there's a closing bracket without a matching opening bracket\n        if (balance < 0) {\n            return false\n        }\n    }\n\n    // If balance is zero, all opening brackets have a corresponding closing bracket\n    return balance == 0\n}\n\n// Test cases\nfun main() {\n    println(correctBracketing(\"(\"))      // False\n    println(correctBracketing(\"()\"))     // True\n    println(correctBracketing(\"(()())\")) // True\n    println(correctBracketing(\")(()\"))   // False\n}"}
{"task_id": "HumanEval_kotlin/62", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    // We skip the first element because its derivative is 0\n    return xs.drop(1).mapIndexed { index, value -> value * (index + 1) }\n}\n\nfun main() {\n    println(derivative(listOf(3, 1, 2, 4, 5))) // Output: [1, 4, 12, 20]\n    println(derivative(listOf(1, 2, 3)))       // Output: [2, 6]\n}"}
{"task_id": "HumanEval_kotlin/63", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    // Base cases\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 1\n\n    // Array to store computed values\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 1\n\n    // Populate the array using the given recurrence relation\n    for (i in 3..n) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    }\n\n    return dp[n]\n}\n\n// Testing the function with provided examples\nfun main() {\n    println(fibfib(1))  // Output: 0\n    println(fibfib(5))  // Output: 4\n    println(fibfib(8))  // Output: 24\n}"}
{"task_id": "HumanEval_kotlin/64", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    // Define the vowels set\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    // Initialize the count of vowels to 0\n    var count = 0\n    \n    // Iterate through each character in the string\n    for (i in s.indices) {\n        val char = s[i]\n        // Check if the character is a vowel\n        if (char in vowels) {\n            count++\n        }\n        // If the character is 'y' or 'Y' and it's at the end of the word,\n        // consider it as a vowel\n        else if ((char == 'y' || char == 'Y') && i == s.length - 1) {\n            count++\n        }\n    }\n    \n    return count\n}\n\n// Example usage\nfun main() {\n    println(vowelsCount(\"abcde\"))  // Output: 2\n    println(vowelsCount(\"ACEDY\"))  // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/65", "language": "kotlin", "completion": "fun circularShift(x: Int, shift: Int): String {\n    val str = x.toString()\n    val numDigits = str.length\n\n    return if (shift >= numDigits) {\n        str.reversed()\n    } else {\n        val shiftAdjusted = shift % numDigits\n        val splitIndex = numDigits - shiftAdjusted\n        str.substring(splitIndex) + str.substring(0, splitIndex)\n    }\n}\n\n// Test cases\nfun main() {\n    println(circularShift(12, 1))  // Output: \"21\"\n    println(circularShift(12, 2))  // Output: \"12\"\n    println(circularShift(12345, 3))  // Output: \"34512\"\n    println(circularShift(12345, 5))  // Output: \"54321\"\n}"}
{"task_id": "HumanEval_kotlin/66", "language": "kotlin", "completion": "fun digitsum(s: String): Int {\n    // Filter the input string to get only uppercase letters\n    val upperCaseChars = s.filter { it.isUpperCase() }\n    \n    // Sum the ASCII values of the filtered characters\n    return upperCaseChars.sumBy { it.toInt() }\n}\n\n// Test cases\nfun main() {\n    println(digitsum(\"\")) // Output: 0\n    println(digitsum(\"abAB\")) // Output: 131\n    println(digitsum(\"abcCd\")) // Output: 67\n    println(digitsum(\"helloE\")) // Output: 69\n    println(digitsum(\"woArBld\")) // Output: 131\n    println(digitsum(\"aAaaaXa\")) // Output: 153\n}"}
{"task_id": "HumanEval_kotlin/67", "language": "kotlin", "completion": "fun fruitDistribution(s: String, n: Int): Int {\n    // Regular expression to extract numbers from the string\n    val regex = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".toRegex()\n\n    // Find matches in the input string\n    val matchResult = regex.find(s)\n\n    // Extract the numbers from the match result\n    val (apples, oranges) = matchResult!!.destructured\n\n    // Convert the extracted strings to integers\n    val appleCount = apples.toInt()\n    val orangeCount = oranges.toInt()\n\n    // Calculate the number of mangoes\n    val mangoCount = n - appleCount - orangeCount\n\n    return mangoCount\n}\n\n// Test cases\nfun main() {\n    println(fruitDistribution(\"5 apples and 6 oranges\", 19))  // Output: 8\n    println(fruitDistribution(\"0 apples and 1 oranges\", 3))   // Output: 2\n    println(fruitDistribution(\"2 apples and 3 oranges\", 100)) // Output: 95\n    println(fruitDistribution(\"100 apples and 1 oranges\", 120)) // Output: 19\n}"}
{"task_id": "HumanEval_kotlin/68", "language": "kotlin", "completion": "fun pluck(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) return emptyList()\n\n    var minEvenValue: Int? = null\n    var minIndex: Int? = null\n\n    for (i in arr.indices) {\n        val value = arr[i]\n        if (value % 2 == 0) {\n            if (minEvenValue == null || value < minEvenValue) {\n                minEvenValue = value\n                minIndex = i\n            }\n        }\n    }\n\n    return if (minEvenValue != null && minIndex != null) {\n        listOf(minEvenValue, minIndex)\n    } else {\n        emptyList()\n    }\n}"}
{"task_id": "HumanEval_kotlin/69", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    // Step 1: Count the frequency of each integer\n    val frequencyMap = mutableMapOf<Int, Int>()\n    for (num in lst) {\n        frequencyMap[num] = frequencyMap.getOrDefault(num, 0) + 1\n    }\n    \n    // Step 2: Identify the integers that meet the criteria\n    val validIntegers = frequencyMap.filter { (num, count) -> count >= num }.keys\n    \n    // Step 3: Find the greatest such integer\n    return if (validIntegers.isEmpty()) -1 else validIntegers.maxOrNull() ?: -1\n}\n\n// Example usage\nfun main() {\n    println(search(listOf(4, 1, 2, 2, 3, 1))) // Output: 2\n    println(search(listOf(1, 2, 2, 3, 3, 3, 4, 4, 4))) // Output: 3\n    println(search(listOf(5, 5, 4, 4, 4))) // Output: -1\n}"}
{"task_id": "HumanEval_kotlin/70", "language": "kotlin", "completion": "fun strangeSortList(lst: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    val mutableList = lst.toMutableList() // Create a mutable copy of the input list\n\n    while (mutableList.isNotEmpty()) {\n        val min = mutableList.minOrNull() ?: break\n        result.add(min)\n        mutableList.remove(min)\n        \n        if (mutableList.isNotEmpty()) {\n            val max = mutableList.maxOrNull() ?: break\n            result.add(max)\n            mutableList.remove(max)\n        }\n    }\n\n    return result\n}\n\n// Example usage:\nfun main() {\n    println(strangeSortList(listOf(1, 2, 3, 4))) // Output: [1, 4, 2, 3]\n    println(strangeSortList(listOf(5, 5, 5, 5))) // Output: [5, 5, 5, 5]\n    println(strangeSortList(emptyList())) // Output: []\n}"}
{"task_id": "HumanEval_kotlin/71", "language": "kotlin", "completion": "import kotlin.math.sqrt\n\nfun triangleArea(a: Int, b: Int, c: Int): Any {\n    // Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        val s = (a + b + c) / 2.0\n        // Calculate the area using Heron's formula\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        // Round the area to 2 decimal places\n        return String.format(\"%.2f\", area).toDouble()\n    } else {\n        // If not a valid triangle, return -1\n        return -1\n    }\n}\n\n// Example usage\nfun main() {\n    println(triangleArea(3, 4, 5)) // Output: 6.00\n    println(triangleArea(1, 2, 10)) // Output: -1\n}"}
{"task_id": "HumanEval_kotlin/72", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list q is a palindrome\n    val isPalindrome = q == q.reversed()\n    \n    // Calculate the sum of elements in q\n    val sumOfElements = q.sum()\n    \n    // Check if the sum of elements is less than or equal to the maximum possible weight\n    val isWithinWeightLimit = sumOfElements <= w\n    \n    // The object will fly if it is a palindrome and within the weight limit\n    return isPalindrome && isWithinWeightLimit\n}\n\n// Example test cases\nfun main() {\n    println(willItFly(listOf(1, 2), 5)) // \u279e False\n    println(willItFly(listOf(3, 2, 3), 1)) // \u279e False\n    println(willItFly(listOf(3, 2, 3), 9)) // \u279e True\n    println(willItFly(listOf(3), 5)) // \u279e True\n}"}
{"task_id": "HumanEval_kotlin/73", "language": "kotlin", "completion": "fun smallestChange(arr: List<Int>): Int {\n    var i = 0\n    var j = arr.size - 1\n    var changes = 0\n    \n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            changes++\n        }\n        i++\n        j--\n    }\n    \n    return changes\n}\n\n// Test cases\nfun main() {\n    println(smallestChange(listOf(1, 2, 3, 5, 4, 7, 9, 6))) // Output: 4\n    println(smallestChange(listOf(1, 2, 3, 4, 3, 2, 2))) // Output: 1\n    println(smallestChange(listOf(1, 2, 3, 2, 1))) // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/74", "language": "kotlin", "completion": "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    // Calculate the total number of characters in lst1\n    val totalCharsInLst1 = lst1.sumOf { it.length }\n    \n    // Calculate the total number of characters in lst2\n    val totalCharsInLst2 = lst2.sumOf { it.length }\n    \n    // Compare the total number of characters and return the appropriate list\n    return if (totalCharsInLst1 <= totalCharsInLst2) lst1 else lst2\n}\n\nfun main() {\n    // Test cases\n    println(totalMatch(emptyList(), emptyList())) // \u279e []\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"Hi\"))) // \u279e ['hI', 'Hi']\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hi\", \"hi\", \"admin\", \"project\"))) // \u279e ['hi', 'admin']\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"hi\", \"hi\"))) // \u279e ['hI', 'hi', 'hi']\n    println(totalMatch(listOf(\"4\"), listOf(\"1\", \"2\", \"3\", \"4\", \"5\"))) // \u279e ['4']\n}"}
{"task_id": "HumanEval_kotlin/75", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    // List of prime numbers less than 100\n    val primes = listOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    \n    // Check all combinations of three different primes\n    for (i in primes.indices) {\n        for (j in i + 1 until primes.size) {\n            for (k in j + 1 until primes.size) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n// Example usage\nfun main() {\n    println(isMultiplyPrime(30))  // True, because 30 = 2 * 3 * 5\n    println(isMultiplyPrime(60))  // True, because 60 = 2 * 3 * 5\n    println(isMultiplyPrime(50))  // False, because 50 cannot be expressed as a product of 3 primes\n}"}
{"task_id": "HumanEval_kotlin/76", "language": "kotlin", "completion": "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (x < 1 || n < 1) return false\n    if (x == 1) return true // n**0 = 1 for any n\n\n    var current = x\n    while (current % n == 0) {\n        current /= n\n    }\n    \n    return current == 1\n}\n\n// Testing the function with the provided examples\nfun main() {\n    println(isSimplePower(1, 4))  // true\n    println(isSimplePower(2, 2))  // true\n    println(isSimplePower(8, 2))  // true\n    println(isSimplePower(3, 2))  // false\n    println(isSimplePower(3, 1))  // false\n    println(isSimplePower(5, 3))  // false\n}"}
{"task_id": "HumanEval_kotlin/77", "language": "kotlin", "completion": "import kotlin.math.roundToInt\nimport kotlin.math.cbrt\n\nfun iscube(a: Int): Boolean {\n    // Calculate the cube root of the given integer\n    val cubeRoot = cbrt(a.toDouble())\n    \n    // Round the cube root to the nearest integer\n    val roundedCubeRoot = cubeRoot.roundToInt()\n    \n    // Cube the rounded integer\n    val cube = roundedCubeRoot * roundedCubeRoot * roundedCubeRoot\n    \n    // Check if the cubed value equals the original integer\n    return cube == a\n}\n\n// Test cases\nfun main() {\n    println(iscube(1))  // True\n    println(iscube(2))  // False\n    println(iscube(-1)) // True\n    println(iscube(64)) // True\n    println(iscube(0))  // True\n    println(iscube(180)) // False\n}"}
{"task_id": "HumanEval_kotlin/78", "language": "kotlin", "completion": "fun hexKey(num: String): Int {\n    // Define a set of prime hexadecimal digits\n    val primeHexDigits = setOf('2', '3', '5', '7', 'B', 'D')\n    \n    // Initialize a counter to keep track of prime digits\n    var count = 0\n    \n    // Iterate through each character in the input string\n    for (char in num) {\n        // Check if the character is in the set of prime hexadecimal digits\n        if (char in primeHexDigits) {\n            count++\n        }\n    }\n    \n    // Return the count of prime digits\n    return count\n}\n\n// Test cases\nfun main() {\n    println(hexKey(\"AB\")) // Output: 1\n    println(hexKey(\"1077E\")) // Output: 2\n    println(hexKey(\"ABED1A33\")) // Output: 4\n    println(hexKey(\"123456789ABCDEF0\")) // Output: 6\n    println(hexKey(\"2020\")) // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/79", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    // Convert the decimal number to binary string\n    val binaryString = Integer.toBinaryString(decimal)\n    \n    // Add the 'db' characters at the beginning and the end\n    return \"db$binaryStringdb\"\n}\n\n// Testing the function\nfun main() {\n    println(decimalToBinary(15))  // Should return \"db1111db\"\n    println(decimalToBinary(32))  // Should return \"db100000db\"\n}"}
{"task_id": "HumanEval_kotlin/80", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    // Check if the length of the string is at least 3\n    if (s.length < 3) {\n        return false\n    }\n    \n    // Iterate through the string, checking each set of 3 consecutive characters\n    for (i in 0..s.length - 3) {\n        val a = s[i]\n        val b = s[i + 1]\n        val c = s[i + 2]\n        \n        // Check if all three characters are distinct\n        if (a == b || b == c || a == c) {\n            return false\n        }\n    }\n    \n    // If no set of 3 consecutive characters were the same, return true\n    return true\n}\n\n// Test cases\nfun main() {\n    println(isHappy(\"a\"))       // False\n    println(isHappy(\"aa\"))      // False\n    println(isHappy(\"abcd\"))    // True\n    println(isHappy(\"aabb\"))    // False\n    println(isHappy(\"adb\"))     // True\n    println(isHappy(\"xyy\"))     // False\n}"}
{"task_id": "HumanEval_kotlin/81", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    return grades.map { gpa -> getLetterGrade(gpa) }\n}\n\nfun getLetterGrade(gpa: Double): String {\n    return when {\n        gpa == 4.0 -> \"A+\"\n        gpa > 3.7 -> \"A\"\n        gpa > 3.3 -> \"A-\"\n        gpa > 3.0 -> \"B+\"\n        gpa > 2.7 -> \"B\"\n        gpa > 2.3 -> \"B-\"\n        gpa > 2.0 -> \"C+\"\n        gpa > 1.7 -> \"C\"\n        gpa > 1.3 -> \"C-\"\n        gpa > 1.0 -> \"D+\"\n        gpa > 0.7 -> \"D\"\n        gpa > 0.0 -> \"D-\"\n        else -> \"E\"\n    }\n}\n\n// Example usage\nfun main() {\n    val gpas = listOf(4.0, 3.0, 1.7, 2.0, 3.5)\n    val letterGrades = numericalLetterGrade(gpas)\n    println(letterGrades) // Output: [A+, B, C-, C, A-]\n}"}
{"task_id": "HumanEval_kotlin/82", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    if (length < 2) return false\n    for (i in 2..Math.sqrt(length.toDouble()).toInt()) {\n        if (length % i == 0) return false\n    }\n    return true\n}\n\n// Test cases\nfun main() {\n    println(primeLength(\"Hello\"))    // True\n    println(primeLength(\"abcdcba\"))  // True\n    println(primeLength(\"kittens\"))  // True\n    println(primeLength(\"orange\"))   // False\n}"}
{"task_id": "HumanEval_kotlin/83", "language": "kotlin", "completion": "fun startsOneEnds(n: Int): Int {\n    if (n == 1) {\n        return 2 // Only 1 and 9 are single-digit numbers starting or ending with 1\n    }\n    \n    val startWithOneCount = 10.0.pow(n - 1).toInt()\n    val endWithOneCount = 9 * 10.0.pow(n - 2).toInt()\n    val overlapCount = 10.0.pow(n - 2).toInt()\n    \n    return startWithOneCount + endWithOneCount - overlapCount\n}\n\nfun main() {\n    println(startsOneEnds(1)) // Should return 2 (1 and 9)\n    println(startsOneEnds(2)) // Should return 19 (10-19 + 21, 31, ..., 91)\n    println(startsOneEnds(3)) // Should return 180 (100-199 + 101, 111, ..., 991 minus overlaps)\n    // Add more test cases if needed\n}"}
{"task_id": "HumanEval_kotlin/84", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    // Step 1: Calculate the sum of digits of N\n    val sumOfDigits = n.toString().map { it.toString().toInt() }.sum()\n    \n    // Step 2: Convert the sum to its binary representation\n    val binaryRepresentation = sumOfDigits.toString(radix = 2)\n    \n    // Step 3: Return the binary string\n    return binaryRepresentation\n}\n\n// Example usage\nfun main() {\n    println(solve(1000))  // Output: \"1\"\n    println(solve(150))   // Output: \"110\"\n    println(solve(147))   // Output: \"1100\"\n}"}
{"task_id": "HumanEval_kotlin/85", "language": "kotlin", "completion": "fun add(lst: List<Int>): Int {\n    // Initialize a sum variable to store the sum of even elements at odd indices\n    var sum = 0\n    \n    // Iterate through the list with index\n    for ((index, value) in lst.withIndex()) {\n        // Check if the index is odd\n        if (index % 2 != 0) {\n            // Check if the element is even\n            if (value % 2 == 0) {\n                // Add the even element to the sum\n                sum += value\n            }\n        }\n    }\n    \n    // Return the sum\n    return sum\n}\n\n// Test cases to verify the solution\nfun main() {\n    println(add(listOf(4, 2, 6, 7)))  // Output: 2\n    println(add(listOf(1, 3, 5, 7, 2, 4)))  // Output: 4\n    println(add(listOf(10, 15, 20, 25, 30, 35)))  // Output: 0\n    println(add(listOf(2, 4, 6, 8, 10, 12)))  // Output: 4\n}"}
{"task_id": "HumanEval_kotlin/86", "language": "kotlin", "completion": "fun antiShuffle(s: String): String {\n    // Split the string by spaces to process each word separately\n    return s.split(\" \").joinToString(\" \") { word ->\n        // Sort the characters within each word and join them back to form the sorted word\n        word.toCharArray().sorted().joinToString(\"\")\n    }\n}\n\n// Test cases\nfun main() {\n    println(antiShuffle(\"Hi\")) // Output: \"Hi\"\n    println(antiShuffle(\"hello\")) // Output: \"ehllo\"\n    println(antiShuffle(\"Hello World!!!\")) // Output: \"Hello !!!Wdlor\"\n}"}
{"task_id": "HumanEval_kotlin/87", "language": "kotlin", "completion": "fun getRow(lst: List<List<Int>>, x: Int): List<Pair<Int, Int>> {\n    val result = mutableListOf<Pair<Int, Int>>()\n\n    // Collect coordinates where the element is equal to x\n    for (rowIndex in lst.indices) {\n        for (colIndex in lst[rowIndex].indices) {\n            if (lst[rowIndex][colIndex] == x) {\n                result.add(Pair(rowIndex, colIndex))\n            }\n        }\n    }\n\n    // Sort the coordinates by rows in ascending order and by columns in descending order within each row\n    return result.sortedWith(compareBy({ it.first }, { -it.second }))\n}\n\n// Example usage\nfun main() {\n    val test1 = listOf(\n        listOf(1, 2, 3, 4, 5, 6),\n        listOf(1, 2, 3, 4, 1, 6),\n        listOf(1, 2, 3, 4, 5, 1)\n    )\n    println(getRow(test1, 1)) // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n    val test2 = listOf<List<Int>>()\n    println(getRow(test2, 1)) // []\n\n    val test3 = listOf(\n        listOf(),\n        listOf(1),\n        listOf(1, 2, 3)\n    )\n    println(getRow(test3, 3)) // [(2, 2)]\n}"}
{"task_id": "HumanEval_kotlin/88", "language": "kotlin", "completion": "fun sortArray(array: List<Int>): List<Int> {\n    if (array.isEmpty() || array.size == 1) {\n        return array\n    }\n\n    val sum = array.first() + array.last()\n\n    return if (sum % 2 == 0) {\n        array.sortedDescending()\n    } else {\n        array.sorted()\n    }\n}\n\nfun main() {\n    println(sortArray(listOf())) // Output: []\n    println(sortArray(listOf(5))) // Output: [5]\n    println(sortArray(listOf(2, 4, 3, 0, 1, 5))) // Output: [0, 1, 2, 3, 4, 5]\n    println(sortArray(listOf(2, 4, 3, 0, 1, 5, 6))) // Output: [6, 5, 4, 3, 2, 1, 0]\n}"}
{"task_id": "HumanEval_kotlin/89", "language": "kotlin", "completion": "fun encrypt(s: String): String {\n    // Helper function to shift a single character by 4 places\n    fun shiftChar(c: Char): Char {\n        return if (c in 'a'..'z') {\n            // Calculate the new character with wrapping around the alphabet\n            'a' + (c - 'a' + 4) % 26\n        } else {\n            // Return the character unchanged if it's not a lowercase letter\n            c\n        }\n    }\n\n    // Iterate through each character in the input string and apply the shift\n    return s.map { shiftChar(it) }.joinToString(\"\")\n}\n\n// Test cases to validate the function\nfun main() {\n    println(encrypt(\"hi\"))          // Should return \"lm\"\n    println(encrypt(\"asdfghjkl\"))   // Should return \"ewhjklnop\"\n    println(encrypt(\"gf\"))          // Should return \"kj\"\n    println(encrypt(\"et\"))          // Should return \"ix\"\n}"}
{"task_id": "HumanEval_kotlin/90", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Any>): Int? {\n    // Filter out non-integer elements\n    val intList = lst.filterIsInstance<Int>()\n\n    // Remove duplicates and sort the list\n    val sortedUniqueList = intList.distinct().sorted()\n\n    // Return the second smallest element if it exists\n    return if (sortedUniqueList.size >= 2) sortedUniqueList[1] else null\n}\n\nfun main() {\n    println(nextSmallest(listOf(1, 2, 3, 4, 5))) // Output: 2\n    println(nextSmallest(listOf(5, 1, 4, 3, 2))) // Output: 2\n    println(nextSmallest(emptyList<Any>())) // Output: null\n    println(nextSmallest(listOf(1, 1))) // Output: null\n    println(nextSmallest(listOf(1, 2, \"a\", 3, \"b\", 4, 5))) // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/91", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    // Define the delimiters for sentences\n    val delimiters = arrayOf('.', '?', '!')\n    \n    // Split the string by these delimiters and trim each part\n    val sentences = s.split(*delimiters).map { it.trim() }\n    \n    // Count the number of sentences that start with \"I\"\n    return sentences.count { it.startsWith(\"I\") }\n}\n\n// Test cases\nfun main() {\n    println(isBored(\"Hello world\")) // Output: 0\n    println(isBored(\"The sky is blue. The sun is shining. I love this weather\")) // Output: 1\n    println(isBored(\"I am happy. Are you? I hope you are!\")) // Output: 2\n    println(isBored(\"I. I. I.\")) // Output: 3\n    println(isBored(\"I'm not sure. Is it? I guess so!\")) // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/92", "language": "kotlin", "completion": "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    // Ensure all inputs are integers\n    if (x is Int && y is Int && z is Int) {\n        // Check if any one of the numbers is equal to the sum of the other two\n        return x == y + z || y == x + z || z == x + y\n    }\n    // If any of the inputs are not integers, return false\n    return false\n}\n\n// Test cases\nfun main() {\n    println(anyInt(5, 2, 7))  // \u279e True\n    println(anyInt(3, 2, 2))  // \u279e False\n    println(anyInt(3, -2, 1)) // \u279e True\n    println(anyInt(3.6, -2.2, 2)) // \u279e False\n}"}
{"task_id": "HumanEval_kotlin/93", "language": "kotlin", "completion": "fun encode(message: String): String {\n    // Helper function to get the character 2 places ahead for vowels\n    fun shiftVowel(c: Char): Char {\n        return when (c.toLowerCase()) {\n            'a' -> 'C'\n            'e' -> 'G'\n            'i' -> 'K'\n            'o' -> 'Q'\n            'u' -> 'W'\n            else -> c\n        }.let {\n            if (c.isUpperCase()) it.toUpperCase() else it.toLowerCase()\n        }\n    }\n\n    // Process each character in the message\n    val encodedMessage = message.map { char ->\n        val swappedCaseChar = if (char.isUpperCase()) {\n            char.toLowerCase()\n        } else {\n            char.toUpperCase()\n        }\n        \n        if (swappedCaseChar.toLowerCase() in \"aeiou\") {\n            shiftVowel(swappedCaseChar)\n        } else {\n            swappedCaseChar\n        }\n    }.joinToString(\"\")\n\n    return encodedMessage\n}\n\n// Test cases\nfun main() {\n    println(encode(\"test\")) // 'TGST'\n    println(encode(\"This is a message\")) // 'tHKS KS C MGSSCGG'\n}"}
{"task_id": "HumanEval_kotlin/94", "language": "kotlin", "completion": "fun skjkasdkd(lst: List<Int>): Int {\n    // Helper function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n        val sqrtN = kotlin.math.sqrt(n.toDouble()).toInt()\n        for (i in 3..sqrtN step 2) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    // Helper function to sum the digits of a number\n    fun sumOfDigits(n: Int): Int {\n        return n.toString().map { it.toString().toInt() }.sum()\n    }\n\n    // Find the largest prime number in the list\n    val largestPrime = lst.filter { isPrime(it) }.maxOrNull() ?: 0\n\n    // Return the sum of the digits of the largest prime number\n    return sumOfDigits(largestPrime)\n}\n\n// Examples of usage:\nfun main() {\n    println(skjkasdkd(listOf(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))) // Output: 10\n    println(skjkasdkd(listOf(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))) // Output: 25\n    println(skjkasdkd(listOf(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))) // Output: 13\n    println(skjkasdkd(listOf(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))) // Output: 11\n    println(skjkasdkd(listOf(0, 81, 12, 3, 1, 21))) // Output: 3\n    println(skjkasdkd(listOf(0, 8, 1, 2, 1, 7))) // Output: 7\n}"}
{"task_id": "HumanEval_kotlin/95", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    // If the dictionary is empty, return False\n    if (dict.isEmpty()) return false\n\n    // Filter keys that are strings\n    val stringKeys = dict.keys.filterIsInstance<String>()\n    \n    // If any key is not a string, return False\n    if (stringKeys.size != dict.keys.size) return false\n\n    // Check if all string keys are lowercase or all are uppercase\n    val allLowerCase = stringKeys.all { it == it.toLowerCase() }\n    val allUpperCase = stringKeys.all { it == it.toUpperCase() }\n    \n    return allLowerCase || allUpperCase\n}\n\n// Test cases\nfun main() {\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"b\" to \"banana\"))) // True\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"A\" to \"banana\", \"B\" to \"banana\"))) // False\n    println(checkDictCase(mapOf(\"a\" to \"apple\", 8 to \"banana\", \"a\" to \"apple\"))) // False\n    println(checkDictCase(mapOf(\"Name\" to \"John\", \"Age\" to \"36\", \"City\" to \"Houston\"))) // False\n    println(checkDictCase(mapOf(\"STATE\" to \"NC\", \"ZIP\" to \"12345\"))) // True\n}"}
{"task_id": "HumanEval_kotlin/96", "language": "kotlin", "completion": "fun countUpTo(n: Int): List<Int> {\n    // Helper function to check if a number is prime\n    fun isPrime(num: Int): Boolean {\n        if (num < 2) return false\n        for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n\n    // Collecting prime numbers less than n\n    val primes = mutableListOf<Int>()\n    for (i in 2 until n) {\n        if (isPrime(i)) {\n            primes.add(i)\n        }\n    }\n\n    return primes\n}\n\n// Test cases\nfun main() {\n    println(countUpTo(5))  // Output: [2, 3]\n    println(countUpTo(11)) // Output: [2, 3, 5, 7]\n    println(countUpTo(0))  // Output: []\n    println(countUpTo(20)) // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n    println(countUpTo(1))  // Output: []\n    println(countUpTo(18)) // Output: [2, 3, 5, 7, 11, 13, 17]\n}"}
{"task_id": "HumanEval_kotlin/97", "language": "kotlin", "completion": "fun multiply(a: Int, b: Int): Int {\n    val unitDigitA = Math.abs(a) % 10\n    val unitDigitB = Math.abs(b) % 10\n    return unitDigitA * unitDigitB\n}\n\n// Test cases\nfun main() {\n    println(multiply(148, 412)) // Should return 16\n    println(multiply(19, 28)) // Should return 72\n    println(multiply(2020, 1851)) // Should return 0\n    println(multiply(14, -15)) // Should return 20\n}"}
{"task_id": "HumanEval_kotlin/98", "language": "kotlin", "completion": "fun countUpper(s: String): Int {\n    val uppercaseVowels = setOf('A', 'E', 'I', 'O', 'U')\n    var count = 0\n    \n    for (i in s.indices) {\n        if (i % 2 == 0 && s[i] in uppercaseVowels) {\n            count++\n        }\n    }\n    \n    return count\n}\n\n// Test cases\nfun main() {\n    println(countUpper(\"aBCdEf\"))  // Output: 1\n    println(countUpper(\"abcdefg\")) // Output: 0\n    println(countUpper(\"dBBE\"))    // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/99", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    // Convert the string value to a double\n    val number = value.toDouble()\n    \n    // Extract the integer part and the fractional part of the number\n    val integerPart = number.toInt()\n    val fractionalPart = number - integerPart\n    \n    return when {\n        // If the fractional part is exactly 0.5, round away from zero\n        fractionalPart == 0.5 -> integerPart + 1\n        fractionalPart == -0.5 -> integerPart - 1\n        \n        // For positive numbers, use the built-in round function\n        number > 0 -> kotlin.math.round(number).toInt()\n        \n        // For negative numbers, use the built-in round function\n        else -> kotlin.math.round(number).toInt()\n    }\n}\n\n// Test cases\nfun main() {\n    println(closestInteger(\"10\"))      // 10\n    println(closestInteger(\"15.3\"))    // 15\n    println(closestInteger(\"14.5\"))    // 15\n    println(closestInteger(\"-14.5\"))   // -15\n}"}
{"task_id": "HumanEval_kotlin/100", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val stones = mutableListOf<Int>()\n    var current = n\n    \n    for (i in 1..n) {\n        stones.add(current)\n        // Determine the next number of stones based on odd/even rules\n        if (n % 2 == 0) {\n            current += 2 // Next even number\n        } else {\n            current += 2 // Next odd number\n        }\n    }\n    \n    return stones\n}\n\n// Example usage\nfun main() {\n    println(makeAPile(3)) // Output: [3, 5, 7]\n    println(makeAPile(4)) // Output: [4, 6, 8, 10]\n}"}
{"task_id": "HumanEval_kotlin/101", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    // Use a regular expression to split the string by commas or any whitespace\n    return s.split(Regex(\"[,\\\\s]+\")).filter { it.isNotEmpty() }\n}\n\nfun main() {\n    // Test cases\n    println(wordsString(\"Hi, my name is John\")) // Output: [Hi, my, name, is, John]\n    println(wordsString(\"One, two, three, four, five, six\")) // Output: [One, two, three, four, five, six]\n}"}
{"task_id": "HumanEval_kotlin/102", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    // Determine the lower and upper bounds of the range\n    val lower = minOf(x, y)\n    val upper = maxOf(x, y)\n    \n    // Start from the upper bound and check for the largest even number\n    for (num in upper downTo lower) {\n        if (num % 2 == 0) {\n            return num\n        }\n    }\n    \n    // If no even number is found, return -1\n    return -1\n}\n\n// Example usage\nfun main() {\n    println(chooseNum(12, 15)) // Should print 14\n    println(chooseNum(13, 12)) // Should print -1\n}"}
{"task_id": "HumanEval_kotlin/103", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) return -1\n\n    val sum = (n..m).sum()\n    val count = m - n + 1\n    val average = Math.round(sum.toDouble() / count).toInt()\n    return \"0b\" + Integer.toBinaryString(average)\n}\n\n// Example usage:\nfun main() {\n    println(roundedAvg(1, 5))    // Output: \"0b11\"\n    println(roundedAvg(7, 5))    // Output: -1\n    println(roundedAvg(10, 20))  // Output: \"0b1111\"\n    println(roundedAvg(20, 33))  // Output: \"0b11010\"\n}"}
{"task_id": "HumanEval_kotlin/104", "language": "kotlin", "completion": "fun uniqueDigits(x: List<Int>): List<Int> {\n    // Helper function to check if a number contains any even digits\n    fun hasNoEvenDigit(number: Int): Boolean {\n        var num = number\n        while (num > 0) {\n            val digit = num % 10\n            if (digit % 2 == 0) {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n\n    // Filter the list to only include numbers with no even digits\n    val filteredList = x.filter { hasNoEvenDigit(it) }\n\n    // Sort the filtered list in increasing order\n    return filteredList.sorted()\n}\n\n// Example usage\nfun main() {\n    println(uniqueDigits(listOf(15, 33, 1422, 1))) // Output: [1, 15, 33]\n    println(uniqueDigits(listOf(152, 323, 1422, 10))) // Output: []\n}"}
{"task_id": "HumanEval_kotlin/105", "language": "kotlin", "completion": "fun convertToNames(arr: List<Int>): List<String> {\n    // Mapping of integers to their corresponding names\n    val numberNames = arrayOf(\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    )\n\n    // Filter, sort, and reverse the array\n    val filteredAndSorted = arr.filter { it in 1..9 }.sorted().reversed()\n\n    // Map each number to its corresponding name\n    return filteredAndSorted.map { numberNames[it - 1] }\n}\n\nfun main() {\n    val arr1 = listOf(2, 1, 1, 4, 5, 8, 2, 3)\n    println(convertToNames(arr1)) // Output: [Eight, Five, Four, Three, Two, Two, One, One]\n\n    val arr2 = listOf<Int>()\n    println(convertToNames(arr2)) // Output: []\n\n    val arr3 = listOf(1, -1, 55)\n    println(convertToNames(arr3)) // Output: [One]\n}"}
{"task_id": "HumanEval_kotlin/106", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    // Helper function to calculate factorial\n    fun factorial(num: Int): Int {\n        return if (num == 0 || num == 1) 1\n        else num * factorial(num - 1)\n    }\n\n    // Helper function to calculate the sum of numbers from 1 to num\n    fun sumOfNumbers(num: Int): Int {\n        return (1..num).sum()\n    }\n\n    // Generate the list based on the given criteria\n    return (1..n).map { i ->\n        if (i % 2 == 0) factorial(i) else sumOfNumbers(i)\n    }\n}\n\n// Example usage\nfun main() {\n    println(f(5)) // Output: [1, 2, 6, 24, 15]\n}"}
{"task_id": "HumanEval_kotlin/107", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    // Helper function to check if a number is a palindrome\n    fun isPalindrome(num: Int): Boolean {\n        val str = num.toString()\n        return str == str.reversed()\n    }\n\n    var evenCount = 0\n    var oddCount = 0\n\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}\n\n// Example usage:\nfun main() {\n    println(evenOddPalindrome(3))  // Output: [1, 2]\n    println(evenOddPalindrome(12)) // Output: [4, 6]\n}"}
{"task_id": "HumanEval_kotlin/108", "language": "kotlin", "completion": "fun countNums(arr: List<Int>): Int {\n    // Helper function to calculate the sum of digits\n    fun sumOfDigits(num: Int): Int {\n        var sum = 0\n        var n = Math.abs(num)\n        \n        // Sum the digits of the number\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        \n        // Add the sign of the first digit if number is negative\n        return if (num < 0) -2 * (Math.abs(num) % 10) + sum else sum\n    }\n\n    // Count the numbers with sum of digits > 0\n    return arr.count { sumOfDigits(it) > 0 }\n}\n\nfun main() {\n    println(countNums(listOf())) // Output: 0\n    println(countNums(listOf(-1, 11, -11))) // Output: 1\n    println(countNums(listOf(1, 1, 2))) // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/109", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    // Edge case: If the array is empty, it is considered sorted\n    if (arr.isEmpty()) return true\n\n    val n = arr.size\n\n    // Helper function to check if the array is sorted in non-decreasing order\n    fun isSorted(array: List<Int>): Boolean {\n        for (i in 1 until array.size) {\n            if (array[i] < array[i - 1]) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check each possible rotation\n    for (shift in 0 until n) {\n        val rotatedArray = (arr.subList(shift, n) + arr.subList(0, shift))\n        if (isSorted(rotatedArray)) {\n            return true\n        }\n    }\n\n    return false\n}\n\n// Test cases\nfun main() {\n    println(moveOneBall(listOf(3, 4, 5, 1, 2))) // True\n    println(moveOneBall(listOf(3, 5, 4, 1, 2))) // False\n    println(moveOneBall(listOf())) // True\n}"}
{"task_id": "HumanEval_kotlin/110", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    // Count the number of odd numbers in lst1\n    val oddCountInLst1 = lst1.count { it % 2 != 0 }\n    \n    // Count the number of even numbers in lst2\n    val evenCountInLst2 = lst2.count { it % 2 == 0 }\n    \n    // If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2\n    // then we can exchange them to make all elements in lst1 even\n    return if (oddCountInLst1 <= evenCountInLst2) \"YES\" else \"NO\"\n}\n\n// Test cases\nfun main() {\n    println(exchange(listOf(1, 2, 3, 4), listOf(1, 2, 3, 4))) // Should print \"YES\"\n    println(exchange(listOf(1, 2, 3, 4), listOf(1, 5, 3, 4))) // Should print \"NO\"\n    println(exchange(listOf(2, 4, 6), listOf(1, 3, 5)))       // Should print \"YES\"\n    println(exchange(listOf(1, 3, 5), listOf(2, 4, 6)))       // Should print \"YES\"\n    println(exchange(listOf(1, 3, 5), listOf(1, 3)))          // Should print \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/111", "language": "kotlin", "completion": "fun histogram(test: String): Map<Char, Int> {\n    // Split the input string by spaces\n    val letters = test.split(\" \")\n\n    // Use a HashMap to count occurrences of each letter\n    val countMap = mutableMapOf<Char, Int>()\n    for (letter in letters) {\n        if (letter.isNotEmpty()) {\n            countMap[letter[0]] = countMap.getOrDefault(letter[0], 0) + 1\n        }\n    }\n\n    // Find the maximum count\n    val maxCount = countMap.values.maxOrNull() ?: 0\n\n    // Filter the map to include only the letters with the maximum count\n    return countMap.filter { it.value == maxCount }\n}\n\n// Test cases\nfun main() {\n    println(histogram(\"a b c\"))         // Output: {a=1, b=1, c=1}\n    println(histogram(\"a b b a\"))       // Output: {a=2, b=2}\n    println(histogram(\"a b c a b\"))     // Output: {a=2, b=2}\n    println(histogram(\"b b b b a\"))     // Output: {b=4}\n    println(histogram(\"\"))              // Output: {}\n}"}
{"task_id": "HumanEval_kotlin/112", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    // Create a set of characters to be deleted for quick lookup\n    val charsToDelete = c.toSet()\n    \n    // Filter out the characters in 's' that are not in 'charsToDelete'\n    val result = s.filter { it !in charsToDelete }\n    \n    // Check if the result string is a palindrome\n    val isPalindrome = result == result.reversed()\n    \n    // Return the result string and the palindrome check as a list\n    return listOf(result, isPalindrome)\n}\n\n// Example usage\nfun main() {\n    println(reverseDelete(\"abcde\", \"ae\")) // Output: [bcd, false]\n    println(reverseDelete(\"abcdef\", \"b\")) // Output: [acdef, false]\n    println(reverseDelete(\"abcdedcba\", \"ab\")) // Output: [cdedc, true]\n}"}
{"task_id": "HumanEval_kotlin/113", "language": "kotlin", "completion": "fun oddCount(lst: List<String>): List<String> {\n    return lst.map { str ->\n        val countOdd = str.count { it in listOf('1', '3', '5', '7', '9') }\n        \"the number of odd elements ${countOdd}n the str${countOdd}ng ${countOdd} of the ${countOdd}nput.\"\n    }\n}\n\n// Test cases\nfun main() {\n    println(oddCount(listOf(\"1234567\")))\n    println(oddCount(listOf(\"3\", \"11111111\")))\n}"}
{"task_id": "HumanEval_kotlin/114", "language": "kotlin", "completion": "fun minSubArraySum(nums: List<Int>): Int {\n    if (nums.isEmpty()) {\n        throw IllegalArgumentException(\"Input list cannot be empty\")\n    }\n\n    var min_ending_here = nums[0]\n    var min_so_far = nums[0]\n\n    for (i in 1 until nums.size) {\n        min_ending_here = minOf(nums[i], min_ending_here + nums[i])\n        min_so_far = minOf(min_so_far, min_ending_here)\n    }\n\n    return min_so_far\n}\n\nfun main() {\n    // Test cases\n    println(minSubArraySum(listOf(2, 3, 4, 1, 2, 4))) // Output: 1\n    println(minSubArraySum(listOf(-1, -2, -3))) // Output: -6\n}"}
{"task_id": "HumanEval_kotlin/115", "language": "kotlin", "completion": "import kotlin.math.ceil\n\nfun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var totalWaterUnits = 0\n    \n    // Traverse the grid to count the total number of water units\n    for (row in grid) {\n        for (cell in row) {\n            if (cell == 1) {\n                totalWaterUnits++\n            }\n        }\n    }\n    \n    // Calculate the number of times the bucket needs to be lowered\n    // Using ceil to ensure we handle any remaining water units in a partial bucket\n    return ceil(totalWaterUnits / capacity.toDouble()).toInt()\n}\n\n// Example usage\nfun main() {\n    val grid1 = listOf(\n        listOf(0, 0, 1, 0),\n        listOf(0, 1, 0, 0),\n        listOf(1, 1, 1, 1)\n    )\n    val bucketCapacity1 = 1\n    println(maxFill(grid1, bucketCapacity1)) // Output: 6\n\n    val grid2 = listOf(\n        listOf(0, 0, 1, 1),\n        listOf(0, 0, 0, 0),\n        listOf(1, 1, 1, 1),\n        listOf(0, 1, 1, 1)\n    )\n    val bucketCapacity2 = 2\n    println(maxFill(grid2, bucketCapacity2)) // Output: 5\n\n    val grid3 = listOf(\n        listOf(0, 0, 0),\n        listOf(0, 0, 0)\n    )\n    val bucketCapacity3 = 5\n    println(maxFill(grid3, bucketCapacity3)) // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/116", "language": "kotlin", "completion": "fun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedWith(compareBy({ it.toString(2).count { c -> c == '1' } }, { it }))\n}\n\nfun main() {\n    println(sortArray(listOf(1, 5, 2, 3, 4))) // Output: [1, 2, 3, 4, 5]\n    println(sortArray(listOf(-2, -3, -4, -5, -6))) // Output: [-6, -5, -4, -3, -2]\n    println(sortArray(listOf(1, 0, 2, 3, 4))) // Output: [0, 1, 2, 3, 4]\n}"}
{"task_id": "HumanEval_kotlin/117", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    // Define the set of vowels\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\n    // Split the input string into words\n    val words = s.split(\" \")\n\n    // Initialize the result list\n    val result = mutableListOf<String>()\n\n    // Process each word\n    for (word in words) {\n        // Count the number of consonants in the current word\n        val consonantCount = word.count { it.isLetter() && !vowels.contains(it) }\n\n        // If the consonant count matches the required number, add the word to the result list\n        if (consonantCount == n) {\n            result.add(word)\n        }\n    }\n\n    // Return the result list\n    return result\n}\n\n// Example usage\nfun main() {\n    println(selectWords(\"Mary had a little lamb\", 4))  // Output: [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3))  // Output: [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2))     // Output: []\n    println(selectWords(\"Hello world\", 4))            // Output: [\"world\"]\n    println(selectWords(\"Uncle sam\", 3))              // Output: [\"Uncle\"]\n}"}
{"task_id": "HumanEval_kotlin/118", "language": "kotlin", "completion": "fun getClosestVowel(word: String): String {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    // Iterate from the second last character to the second character (inclusive)\n    for (i in word.length - 2 downTo 1) {\n        val currentChar = word[i]\n        if (vowels.contains(currentChar)) {\n            val isPrevConsonant = !vowels.contains(word[i - 1])\n            val isNextConsonant = !vowels.contains(word[i + 1])\n            if (isPrevConsonant && isNextConsonant) {\n                return currentChar.toString()\n            }\n        }\n    }\n    \n    return \"\"\n}\n\n// Test cases\nfun main() {\n    println(getClosestVowel(\"yogurt\")) // \"u\"\n    println(getClosestVowel(\"FULL\")) // \"U\"\n    println(getClosestVowel(\"quick\")) // \"\"\n    println(getClosestVowel(\"ab\")) // \"\"\n}"}
{"task_id": "HumanEval_kotlin/119", "language": "kotlin", "completion": "fun matchParens(lst: List<String>): String {\n    if (lst.size != 2) return \"No\"\n\n    val str1 = lst[0]\n    val str2 = lst[1]\n\n    fun isBalanced(s: String): Boolean {\n        var balance = 0\n        for (char in s) {\n            if (char == '(') {\n                balance++\n            } else if (char == ')') {\n                balance--\n            }\n            if (balance < 0) {\n                return false\n            }\n        }\n        return balance == 0\n    }\n\n    return if (isBalanced(str1 + str2) || isBalanced(str2 + str1)) \"Yes\" else \"No\"\n}\n\n// Test cases\nfun main() {\n    println(matchParens(listOf(\"()(\", \")\"))) // Output: Yes\n    println(matchParens(listOf(\")\", \")\"))) // Output: No\n    println(matchParens(listOf(\"(\", \")\"))) // Output: Yes\n    println(matchParens(listOf(\"(((\", \")))\"))) // Output: Yes\n    println(matchParens(listOf(\"(()\", \"())\"))) // Output: No\n}"}
{"task_id": "HumanEval_kotlin/120", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    // Sort the array in descending order and take the first k elements\n    return arr.sortedDescending().take(k).sorted()\n}\n\n// Testing the function with the given examples\nfun main() {\n    val arr1 = listOf(-3, -4, 5)\n    val k1 = 3\n    println(maximum(arr1, k1)) // Output: [-4, -3, 5]\n\n    val arr2 = listOf(4, -4, 4)\n    val k2 = 2\n    println(maximum(arr2, k2)) // Output: [4, 4]\n\n    val arr3 = listOf(-3, 2, 1, 2, -1, -2, 1)\n    val k3 = 1\n    println(maximum(arr3, k3)) // Output: [2]\n}"}
{"task_id": "HumanEval_kotlin/121", "language": "kotlin", "completion": "fun solution(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst.indices) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\n// Test cases\nfun main() {\n    println(solution(listOf(5, 8, 7, 1)))  // Output: 12\n    println(solution(listOf(3, 3, 3, 3, 3)))  // Output: 9\n    println(solution(listOf(30, 13, 24, 321)))  // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/122", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    // Ensure k is within the bounds of the array length\n    val limitedK = k.coerceAtMost(arr.size)\n    \n    // Filter the first k elements to get only those with at most two digits\n    val filteredElements = arr.take(limitedK).filter { it in -99..99 }\n    \n    // Sum up the filtered elements\n    return filteredElements.sum()\n}\n\nfun main() {\n    val arr = listOf(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    val k = 4\n    println(addElements(arr, k))  // Output: 24\n}"}
{"task_id": "HumanEval_kotlin/123", "language": "kotlin", "completion": "fun getOddCollatz(n: Int): List<Int> {\n    require(n > 0) { \"Input must be a positive integer\" }\n\n    val collatzSequence = mutableListOf<Int>()\n    var current = n\n\n    while (current != 1) {\n        collatzSequence.add(current)\n        current = if (current % 2 == 0) {\n            current / 2\n        } else {\n            3 * current + 1\n        }\n    }\n    collatzSequence.add(1)  // Add the final number 1 to the sequence\n\n    val oddNumbers = collatzSequence.filter { it % 2 != 0 }\n    return oddNumbers.sorted()\n}\n\n// Example usage:\nfun main() {\n    println(getOddCollatz(5))  // Output: [1, 5]\n}"}
{"task_id": "HumanEval_kotlin/124", "language": "kotlin", "completion": "fun validDate(date: String): Boolean {\n    if (date.isEmpty()) return false\n\n    val dateRegex = Regex(\"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\")\n    val matchResult = dateRegex.matchEntire(date) ?: return false\n\n    val (monthStr, dayStr, yearStr) = matchResult.destructured\n    val month = monthStr.toIntOrNull() ?: return false\n    val day = dayStr.toIntOrNull() ?: return false\n    val year = yearStr.toIntOrNull() ?: return false\n\n    if (month !in 1..12) return false\n\n    val maxDay = when (month) {\n        1, 3, 5, 7, 8, 10, 12 -> 31\n        4, 6, 9, 11 -> 30\n        2 -> 29 // Assuming leap year is allowed, otherwise need more complex check\n        else -> return false\n    }\n\n    if (day !in 1..maxDay) return false\n\n    return true\n}\n\n// Test cases\nfun main() {\n    println(validDate(\"03-11-2000\"))  // True\n    println(validDate(\"15-01-2012\"))  // False\n    println(validDate(\"04-0-2040\"))   // False\n    println(validDate(\"06-04-2020\"))  // True\n    println(validDate(\"06/04/2020\"))  // False\n}"}
{"task_id": "HumanEval_kotlin/125", "language": "kotlin", "completion": "fun splitWords(txt: String): Any {\n    // Check for whitespace\n    if (txt.contains(Regex(\"\\\\s\"))) {\n        return txt.split(Regex(\"\\\\s+\"))\n    }\n    \n    // Check for commas\n    if (txt.contains(\",\")) {\n        return txt.split(\",\")\n    }\n    \n    // Count lowercase letters with odd order in the alphabet\n    val oddOrderCount = txt.count { it.isLowerCase() && (it - 'a') % 2 == 1 }\n    return oddOrderCount\n}\n\nfun main() {\n    println(splitWords(\"Hello world!\")) // \u279e [\"Hello\", \"world!\"]\n    println(splitWords(\"Hello,world!\")) // \u279e [\"Hello\", \"world!\"]\n    println(splitWords(\"abcdef\"))       // \u279e 3\n}"}
{"task_id": "HumanEval_kotlin/126", "language": "kotlin", "completion": "fun isSorted(lst: List<Int>): Boolean {\n    if (lst.isEmpty() || lst.size == 1) return true\n\n    val elementCounts = mutableMapOf<Int, Int>()\n\n    for (i in 1 until lst.size) {\n        if (lst[i] < lst[i - 1]) return false\n        elementCounts[lst[i]] = elementCounts.getOrDefault(lst[i], 0) + 1\n        if (elementCounts[lst[i]]!! > 2) return false\n    }\n    \n    return true\n}\n\nfun main() {\n    println(isSorted(listOf(5)))  // \u279e True\n    println(isSorted(listOf(1, 2, 3, 4, 5)))  // \u279e True\n    println(isSorted(listOf(1, 3, 2, 4, 5)))  // \u279e False\n    println(isSorted(listOf(1, 2, 3, 4, 5, 6)))  // \u279e True\n    println(isSorted(listOf(1, 2, 3, 4, 5, 6, 7)))  // \u279e True\n    println(isSorted(listOf(1, 3, 2, 4, 5, 6, 7)))  // \u279e False\n    println(isSorted(listOf(1, 2, 2, 3, 3, 4)))  // \u279e True\n    println(isSorted(listOf(1, 2, 2, 2, 3, 4)))  // \u279e False\n}"}
{"task_id": "HumanEval_kotlin/127", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val start1 = interval1[0]\n    val end1 = interval1[1]\n    val start2 = interval2[0]\n    val end2 = interval2[1]\n\n    // Find the intersection interval\n    val intersectionStart = Math.max(start1, start2)\n    val intersectionEnd = Math.min(end1, end2)\n\n    // Calculate the length of the intersection\n    val intersectionLength = intersectionEnd - intersectionStart + 1\n\n    // If there is no intersection, the length should be non-positive\n    if (intersectionLength <= 0) {\n        return \"NO\"\n    }\n\n    // Check if the length is a prime number\n    return if (isPrime(intersectionLength)) \"YES\" else \"NO\"\n}\n\n// Test cases\nfun main() {\n    println(intersection(listOf(1, 2), listOf(2, 3))) // \"NO\"\n    println(intersection(listOf(-1, 1), listOf(0, 4))) // \"NO\"\n    println(intersection(listOf(-3, -1), listOf(-5, 5))) // \"YES\"\n}"}
{"task_id": "HumanEval_kotlin/128", "language": "kotlin", "completion": "fun prodSigns(arr: List<Int>): Int? {\n    // Check for empty array\n    if (arr.isEmpty()) return null\n\n    // Calculate the sum of magnitudes\n    val sumOfMagnitudes = arr.sumBy { Math.abs(it) }\n\n    // Calculate the product of signs\n    val productOfSigns = arr.fold(1) { acc, num -> acc * num.sign }\n\n    // Return the final result\n    return sumOfMagnitudes * productOfSigns\n}\n\n// Extension property to get the sign of an integer\nval Int.sign: Int\n    get() = when {\n        this > 0 -> 1\n        this < 0 -> -1\n        else -> 0\n    }\n\n// Testing the function\nfun main() {\n    println(prodSigns(listOf(1, 2, 2, -4))) // Output: -9\n    println(prodSigns(listOf(0, 1)))         // Output: 0\n    println(prodSigns(emptyList()))          // Output: null\n}"}
{"task_id": "HumanEval_kotlin/129", "language": "kotlin", "completion": "fun minpath(grid: List<List<Int>>, k: Int): List<Int> {\n        ...\n    }"}
{"task_id": "HumanEval_kotlin/130", "language": "kotlin", "completion": "fun tri(n: Int): List<Int> {\n    val memo = mutableMapOf<Int, Int>()\n\n    fun computeTri(x: Int): Int {\n        if (x == 0) return 1 // Define tri(0) as 1 for simplicity\n        if (x == 1) return 3\n        if (x % 2 == 0) return 1 + x / 2\n        \n        // Check if the value is already computed\n        if (memo.containsKey(x)) {\n            return memo[x]!!\n        }\n\n        // Compute the value recursively for odd x\n        val result = computeTri(x - 1) + computeTri(x - 2) + computeTri(x + 1)\n        memo[x] = result\n        return result\n    }\n\n    return (0..n).map { computeTri(it) }\n}\n\n// Test cases\nfun main() {\n    println(tri(3)) // Output: [1, 3, 2, 8]\n    println(tri(5)) // Output: [1, 3, 2, 8, 4, 20]\n}"}
{"task_id": "HumanEval_kotlin/131", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    // Convert the integer to a string, then to a list of characters\n    val digits = n.toString().toList()\n    \n    // Filter out the odd digits and map them to their integer values\n    val oddDigits = digits.map { it.toString().toInt() }.filter { it % 2 != 0 }\n    \n    // If there are no odd digits, return 0\n    if (oddDigits.isEmpty()) return 0\n    \n    // Calculate the product of the odd digits\n    return oddDigits.reduce { acc, digit -> acc * digit }\n}\n\n// Test cases\nfun main() {\n    println(digits(1))   // Output: 1\n    println(digits(4))   // Output: 0\n    println(digits(235)) // Output: 15\n}"}
{"task_id": "HumanEval_kotlin/132", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var stack = mutableListOf<Char>()\n    var nested = false\n    \n    for (char in string) {\n        if (char == '[') {\n            stack.add(char)\n        } else if (char == ']') {\n            if (stack.isNotEmpty()) {\n                stack.removeAt(stack.size - 1)\n                if (stack.isNotEmpty()) {\n                    nested = true\n                }\n            } else {\n                // Encountered an unmatched closing bracket, invalid input for our problem\n                return false\n            }\n        }\n    }\n    \n    return nested\n}\n\n// Test cases\nfun main() {\n    println(isNested(\"[[]]\")) // \u279e True\n    println(isNested(\"[]]]]]]][[[[[]\")) // \u279e False\n    println(isNested(\"[][]\")) // \u279e False\n    println(isNested(\"[]\")) // \u279e False\n    println(isNested(\"[[][]]\")) // \u279e True\n    println(isNested(\"[[]][[\")) // \u279e True\n}"}
{"task_id": "HumanEval_kotlin/133", "language": "kotlin", "completion": "import kotlin.math.ceil\n\nfun sumSquares(lst: List<Any>): Int {\n    return lst.map {\n        // Convert each element to Double first, then take the ceiling, then convert to Int\n        ceil((it as Number).toDouble()).toInt()\n    }.map {\n        // Square each ceiling value\n        it * it\n    }.sum()\n}\n\nfun main() {\n    // Test cases\n    val lst1 = listOf(1, 2, 3)\n    val lst2 = listOf(1, 4, 9)\n    val lst3 = listOf(1, 3, 5, 7)\n    val lst4 = listOf(1.4, 4.2, 0)\n    val lst5 = listOf(-2.4, 1, 1)\n    \n    println(sumSquares(lst1)) // Output: 14\n    println(sumSquares(lst2)) // Output: 98\n    println(sumSquares(lst3)) // Output: 84\n    println(sumSquares(lst4)) // Output: 29\n    println(sumSquares(lst5)) // Output: 6\n}"}
{"task_id": "HumanEval_kotlin/134", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    // Remove trailing spaces\n    val trimmedTxt = txt.trim()\n\n    // Check if the string is empty after trimming\n    if (trimmedTxt.isEmpty()) {\n        return false\n    }\n\n    // Get the last character\n    val lastChar = trimmedTxt.last()\n\n    // Check if the last character is a letter\n    if (!lastChar.isLetter()) {\n        return false\n    }\n\n    // Split the string by spaces to get words\n    val words = trimmedTxt.split(\" \")\n\n    // Get the last word\n    val lastWord = words.last()\n\n    // Check if the last character is the only character in the last word\n    return lastWord.length == 1\n}\n\n// Test cases\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\")) // \u279e False\n    println(checkIfLastCharIsALetter(\"apple pi e\")) // \u279e True\n    println(checkIfLastCharIsALetter(\"apple pi e \")) // \u279e False\n    println(checkIfLastCharIsALetter(\"\")) // \u279e False\n}"}
{"task_id": "HumanEval_kotlin/135", "language": "kotlin", "completion": "fun canArrange(arr: List<Int>): Int {\n    for (i in arr.size - 1 downTo 1) {\n        if (arr[i] < arr[i - 1]) {\n            return i\n        }\n    }\n    return -1\n}\n\n// Testing the function\nfun main() {\n    println(canArrange(listOf(1, 2, 4, 3, 5))) // Output: 3\n    println(canArrange(listOf(1, 2, 3))) // Output: -1\n    println(canArrange(listOf(5, 4, 3, 2, 1))) // Output: 4\n    println(canArrange(listOf(10, 20, 30, 25, 35))) // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/136", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Int>): Pair<Int?, Int?> {\n    // Initialize the variables to store the largest negative and smallest positive integers.\n    var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n    \n    // Iterate through the list to find the largest negative and smallest positive integers.\n    for (num in lst) {\n        if (num < 0) {\n            // If the number is negative and either `largestNegative` is null or this number is larger than the current `largestNegative`.\n            if (largestNegative == null || num > largestNegative) {\n                largestNegative = num\n            }\n        } else if (num > 0) {\n            // If the number is positive and either `smallestPositive` is null or this number is smaller than the current `smallestPositive`.\n            if (smallestPositive == null || num < smallestPositive) {\n                smallestPositive = num\n            }\n        }\n    }\n    \n    // Return the results as a Pair.\n    return Pair(largestNegative, smallestPositive)\n}\n\n// Test cases to verify the implementation\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // Output: (null, 1)\n    println(largestSmallestIntegers(listOf())) // Output: (null, null)\n    println(largestSmallestIntegers(listOf(0))) // Output: (null, null)\n    println(largestSmallestIntegers(listOf(-3, -1, -4, 5, 2))) // Output: (-1, 2)\n    println(largestSmallestIntegers(listOf(-3, -2, 0, 0, 3, 4))) // Output: (-2, 3)\n}"}
{"task_id": "HumanEval_kotlin/137", "language": "kotlin", "completion": "fun compareOne(a: Any, b: Any): Any? {\n    // Helper function to convert a string to a number\n    fun parseNumber(input: String): Double {\n        return input.replace(',', '.').toDouble()\n    }\n    \n    // Helper function to get the numeric value of an Any type\n    fun getNumericValue(input: Any): Double {\n        return when (input) {\n            is Int -> input.toDouble()\n            is Float -> input.toDouble()\n            is Double -> input\n            is String -> parseNumber(input)\n            else -> throw IllegalArgumentException(\"Unsupported type\")\n        }\n    }\n\n    // Get numeric values for comparison\n    val numA = getNumericValue(a)\n    val numB = getNumericValue(b)\n\n    return when {\n        numA > numB -> a\n        numA < numB -> b\n        else -> null\n    }\n}\n\n// Test cases\nfun main() {\n    println(compareOne(1, 2.5)) // \u279e 2.5\n    println(compareOne(1, \"2,3\")) // \u279e \"2,3\"\n    println(compareOne(\"5,1\", \"6\")) // \u279e \"6\"\n    println(compareOne(\"1\", 1)) // \u279e null\n}"}
{"task_id": "HumanEval_kotlin/138", "language": "kotlin", "completion": "fun isEqualToSumEven(n: Int): Boolean {\n    // Check if n is at least 8 and is even\n    return n >= 8 && n % 2 == 0\n}\n\n// Example Usage\nfun main() {\n    println(isEqualToSumEven(4))  // Output: False\n    println(isEqualToSumEven(6))  // Output: False\n    println(isEqualToSumEven(8))  // Output: True\n}"}
{"task_id": "HumanEval_kotlin/139", "language": "kotlin", "completion": "fun factorial(k: Int): Int {\n    var result = 1\n    for (i in 1..k) {\n        result *= i\n    }\n    return result\n}\n\nfun specialFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= factorial(i)\n    }\n    return result\n}\n\n// Example usage\nfun main() {\n    println(specialFactorial(4))  // Output should be 288\n}"}
{"task_id": "HumanEval_kotlin/140", "language": "kotlin", "completion": "fun fixSpaces(text: String): String {\n    // Replace three or more consecutive spaces with a single dash\n    val withDash = text.replace(Regex(\" {3,}\"), \"-\")\n    // Replace remaining single spaces with underscores\n    return withDash.replace(\" \", \"_\")\n}\n\n// Test cases\nfun main() {\n    println(fixSpaces(\"Example\")) // \"Example\"\n    println(fixSpaces(\"Example 1\")) // \"Example_1\"\n    println(fixSpaces(\" Example 2\")) // \"_Example_2\"\n    println(fixSpaces(\" Example   3\")) // \"_Example-3\"\n}"}
{"task_id": "HumanEval_kotlin/141", "language": "kotlin", "completion": "fun fileNameCheck(fileName: String): String {\n    // Check if the file name contains exactly one dot\n    val parts = fileName.split(\".\")\n    if (parts.size != 2) {\n        return \"No\"\n    }\n\n    val namePart = parts[0]\n    val extensionPart = parts[1]\n\n    // Check if the substring before the dot is not empty and starts with a latin alphabet letter\n    if (namePart.isEmpty() || !namePart[0].isLetter()) {\n        return \"No\"\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    val validExtensions = setOf(\"txt\", \"exe\", \"dll\")\n    if (extensionPart !in validExtensions) {\n        return \"No\"\n    }\n\n    // Check if there are more than three digits in the file's name\n    val digitCount = fileName.count { it.isDigit() }\n    if (digitCount > 3) {\n        return \"No\"\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\"\n}\n\n// Examples\nfun main() {\n    println(fileNameCheck(\"example.txt\")) // => 'Yes'\n    println(fileNameCheck(\"1example.dll\")) // => 'No'\n    println(fileNameCheck(\"exampleeeee.exe\")) // => 'Yes'\n    println(fileNameCheck(\"example1234.dll\")) // => 'No'\n    println(fileNameCheck(\"example.txt.exe\")) // => 'No'\n}"}
{"task_id": "HumanEval_kotlin/142", "language": "kotlin", "completion": "fun sumSquares(lst: List<Int>): Int {\n    return lst.mapIndexed { index, value ->\n        when {\n            index % 3 == 0 -> value * value\n            index % 4 == 0 -> value * value * value\n            else -> value\n        }\n    }.sum()\n}\n\n// Test cases\nfun main() {\n    println(sumSquares(listOf(1, 2, 3))) // Output: 6\n    println(sumSquares(emptyList())) // Output: 0\n    println(sumSquares(listOf(-1, -5, 2, -1, -5))) // Output: -126\n}"}
{"task_id": "HumanEval_kotlin/143", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    // Helper function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n        for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    // Split the sentence into words\n    val words = sentence.split(\" \")\n\n    // Filter words whose lengths are prime numbers\n    val primeLengthWords = words.filter { isPrime(it.length) }\n\n    // Join the filtered words back into a single string\n    return primeLengthWords.joinToString(\" \")\n}\n\n// Test examples\nfun main() {\n    println(wordsInSentence(\"This is a test\")) // Output: \"is\"\n    println(wordsInSentence(\"lets go for swimming\")) // Output: \"go for\"\n}"}
{"task_id": "HumanEval_kotlin/144", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    // Helper function to parse a fraction string\n    fun parseFraction(fraction: String): Pair<Int, Int> {\n        val parts = fraction.split('/')\n        return Pair(parts[0].toInt(), parts[1].toInt())\n    }\n\n    // Parse the input fractions\n    val (xNumerator, xDenominator) = parseFraction(x)\n    val (nNumerator, nDenominator) = parseFraction(n)\n\n    // Calculate the resulting numerator and denominator\n    val resultNumerator = xNumerator * nNumerator\n    val resultDenominator = xDenominator * nDenominator\n\n    // Check if the result is a whole number\n    return resultNumerator % resultDenominator == 0\n}\n\n// Test cases\nfun main() {\n    println(simplify(\"1/5\", \"5/1\")) // True\n    println(simplify(\"1/6\", \"2/1\")) // False\n    println(simplify(\"7/10\", \"10/2\")) // False\n}"}
{"task_id": "HumanEval_kotlin/145", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Int>): List<Int> {\n    // Helper function to calculate the sum of digits of a number\n    fun sumOfDigits(num: Int): Int {\n        return num.toString().filter { it.isDigit() }.sumBy { it.toString().toInt() }\n    }\n\n    // Sort the list based on the sum of digits, using the original index to maintain stability\n    return nums.withIndex()\n        .sortedWith(compareBy({ sumOfDigits(it.value) }, { it.index }))\n        .map { it.value }\n}\n\n// Test cases\nfun main() {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12))) // Output: [-1, -11, 1, -12, 11]\n    println(orderByPoints(emptyList())) // Output: []\n}"}
{"task_id": "HumanEval_kotlin/146", "language": "kotlin", "completion": "fun specialFilter(nums: List<Int>): Int {\n    // Helper function to determine if a digit is odd\n    fun isOddDigit(digit: Int): Boolean {\n        return digit in listOf(1, 3, 5, 7, 9)\n    }\n\n    // Helper function to get the first digit of a number\n    fun getFirstDigit(num: Int): Int {\n        var n = Math.abs(num)\n        while (n >= 10) {\n            n /= 10\n        }\n        return n\n    }\n\n    // Helper function to get the last digit of a number\n    fun getLastDigit(num: Int): Int {\n        return Math.abs(num) % 10\n    }\n\n    // Main logic to filter and count the numbers based on the given criteria\n    return nums.count { num ->\n        num > 10 && isOddDigit(getFirstDigit(num)) && isOddDigit(getLastDigit(num))\n    }\n}\n\n// Test cases\nfun main() {\n    println(specialFilter(listOf(15, -73, 14, -15))) // Output: 1\n    println(specialFilter(listOf(33, -2, -3, 45, 21, 109))) // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/147", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    val a = IntArray(n) { i -> (i + 1) * (i + 1) - (i + 1) + 1 }\n    val remainderCount = IntArray(3)\n\n    // Calculate the remainder counts\n    for (value in a) {\n        remainderCount[value % 3]++\n    }\n\n    // Calculate the number of valid triples\n    var count = 0\n\n    // Case 1: All three numbers with remainder 0\n    count += remainderCount[0] * (remainderCount[0] - 1) * (remainderCount[0] - 2) / 6\n\n    // Case 2: All three numbers with remainder 1\n    count += remainderCount[1] * (remainderCount[1] - 1) * (remainderCount[1] - 2) / 6\n\n    // Case 3: All three numbers with remainder 2\n    count += remainderCount[2] * (remainderCount[2] - 1) * (remainderCount[2] - 2) / 6\n\n    // Case 4: One number from each remainder group\n    count += remainderCount[0] * remainderCount[1] * remainderCount[2]\n\n    return count\n}\n\n// Test the function\nfun main() {\n    val n = 5\n    println(getMaxTriples(n))  // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/148", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n    \n    // Check if either planet1 or planet2 are not correct planet names\n    if (index1 == -1 || index2 == -1) {\n        return emptyList()\n    }\n    \n    // Ensure index1 is less than index2 for easier slicing\n    val start = minOf(index1, index2)\n    val end = maxOf(index1, index2)\n    \n    // Return the sublist between the indices, excluding start and end\n    return planets.subList(start + 1, end)\n}\n\n// Examples\nfun main() {\n    println(bf(\"Jupiter\", \"Neptune\"))  // Output: [Saturn, Uranus]\n    println(bf(\"Earth\", \"Mercury\"))   // Output: [Venus]\n    println(bf(\"Mercury\", \"Uranus\"))  // Output: [Venus, Earth, Mars, Jupiter, Saturn]\n    println(bf(\"Pluto\", \"Neptune\"))   // Output: []\n}"}
{"task_id": "HumanEval_kotlin/149", "language": "kotlin", "completion": "fun listSort(lst: List<String>): List<String> {\n    // Filter out strings with odd lengths\n    val evenLengthStrings = lst.filter { it.length % 2 == 0 }\n\n    // Sort the list first by length, then alphabetically\n    return evenLengthStrings.sortedWith(compareBy({ it.length }, { it }))\n}\n\n// Test cases\nfun main() {\n    println(listSort(listOf(\"aa\", \"a\", \"aaa\"))) // Output: [\"aa\"]\n    println(listSort(listOf(\"ab\", \"a\", \"aaa\", \"cd\"))) // Output: [\"ab\", \"cd\"]\n}"}
{"task_id": "HumanEval_kotlin/150", "language": "kotlin", "completion": "fun xOrY(n: Int, x: Int, y: Int): Int {\n    // Helper function to check if a number is prime\n    fun isPrime(num: Int): Boolean {\n        if (num < 2) return false\n        for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n    \n    // Return x if n is prime, otherwise return y\n    return if (isPrime(n)) x else y\n}\n\n// Example usages:\nfun main() {\n    println(xOrY(7, 34, 12))  // Output: 34\n    println(xOrY(15, 8, 5))   // Output: 5\n}"}
{"task_id": "HumanEval_kotlin/151", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst\n        .filterIsInstance<Int>() // Filter out non-integer elements\n        .filter { it >= 0 && it % 2 != 0 } // Filter out negative and even numbers\n        .sumOf { it * it } // Sum the squares of the remaining numbers\n}\n\n// Test cases\nfun main() {\n    println(doubleTheDifference(listOf(1, 3, 2, 0))) // Output: 10\n    println(doubleTheDifference(listOf(-1, -2, 0))) // Output: 0\n    println(doubleTheDifference(listOf(9, -2))) // Output: 81\n    println(doubleTheDifference(listOf(0))) // Output: 0\n    println(doubleTheDifference(emptyList())) // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/152", "language": "kotlin", "completion": "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    // Ensure both lists have the same length\n    require(game.size == guess.size) { \"Both lists must have the same length\" }\n\n    // Calculate the absolute difference for each corresponding pair in the lists\n    return game.zip(guess) { g, gu -> Math.abs(g - gu) }\n}\n\n// Example usage:\nfun main() {\n    println(compare(listOf(1, 2, 3, 4, 5, 1), listOf(1, 2, 3, 4, 2, -2))) // Output: [0, 0, 0, 0, 3, 3]\n    println(compare(listOf(0, 5, 0, 0, 0, 4), listOf(4, 1, 1, 0, 0, -2))) // Output: [4, 4, 1, 0, 0, 6]\n}"}
{"task_id": "HumanEval_kotlin/153", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n\n    // Helper function to calculate the strength of an extension\n    fun calculateStrength(extension: String): Int {\n        var capCount = 0\n        var smCount = 0\n        for (char in extension) {\n            if (char.isUpperCase()) {\n                capCount++\n            } else if (char.isLowerCase()) {\n                smCount++\n            }\n        }\n        return capCount - smCount\n    }\n\n    // Initialize the strongest extension and its strength\n    var strongestExtension = extensions[0]\n    var maxStrength = calculateStrength(strongestExtension)\n\n    // Iterate through all extensions to find the strongest one\n    for (extension in extensions.drop(1)) {\n        val strength = calculateStrength(extension)\n        if (strength > maxStrength) {\n            strongestExtension = extension\n            maxStrength = strength\n        }\n    }\n\n    // Return the result in the required format\n    return \"$className.$strongestExtension\"\n}\n\n// Example usage\nfun main() {\n    val className = \"my_class\"\n    val extensions = listOf(\"AA\", \"Be\", \"CC\")\n    println(strongestExtension(className, extensions)) // Output: my_class.AA\n}"}
{"task_id": "HumanEval_kotlin/154", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    // Function to generate all rotations of a string\n    fun generateRotations(s: String): List<String> {\n        val rotations = mutableListOf<String>()\n        for (i in s.indices) {\n            val rotation = s.substring(i) + s.substring(0, i)\n            rotations.add(rotation)\n        }\n        return rotations\n    }\n\n    // Generate all rotations of the second word\n    val rotations = generateRotations(b)\n\n    // Check if any rotation is a substring of the first word\n    for (rotation in rotations) {\n        if (a.contains(rotation)) {\n            return true\n        }\n    }\n\n    return false\n}\n\n// Test cases\nfun main() {\n    println(cycpatternCheck(\"abcd\", \"abd\")) // False\n    println(cycpatternCheck(\"hello\", \"ell\")) // True\n    println(cycpatternCheck(\"whassup\", \"psus\")) // False\n    println(cycpatternCheck(\"abab\", \"baa\")) // True\n    println(cycpatternCheck(\"efef\", \"eeff\")) // False\n    println(cycpatternCheck(\"himenss\", \"simen\")) // True\n}"}
{"task_id": "HumanEval_kotlin/155", "language": "kotlin", "completion": "fun evenOddCount(num: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    // Convert the number to its absolute value to ignore the sign\n    val absNum = Math.abs(num)\n\n    // Convert the number to a string to iterate over each character\n    val numString = absNum.toString()\n\n    // Iterate through each character in the string\n    for (ch in numString) {\n        val digit = ch - '0'  // Convert the character to its numeric value\n        if (digit % 2 == 0) {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}\n\n// Example usage:\nfun main() {\n    println(evenOddCount(-12))  // Output: [1, 1]\n    println(evenOddCount(123))  // Output: [1, 2]\n}"}
{"task_id": "HumanEval_kotlin/156", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    // List of Roman numeral symbols and their corresponding integer values\n    val romanNumerals = listOf(\n        1000 to \"m\", 900 to \"cm\", 500 to \"d\", 400 to \"cd\",\n        100 to \"c\", 90 to \"xc\", 50 to \"l\", 40 to \"xl\",\n        10 to \"x\", 9 to \"ix\", 5 to \"v\", 4 to \"iv\",\n        1 to \"i\"\n    )\n\n    var num = number\n    val stringBuilder = StringBuilder()\n\n    for ((value, symbol) in romanNumerals) {\n        while (num >= value) {\n            stringBuilder.append(symbol)\n            num -= value\n        }\n    }\n\n    return stringBuilder.toString()\n}\n\n// Test cases\nfun main() {\n    println(intToMiniRoman(19))   // Output: xix\n    println(intToMiniRoman(152))  // Output: clii\n    println(intToMiniRoman(426))  // Output: cdxxvi\n}"}
{"task_id": "HumanEval_kotlin/157", "language": "kotlin", "completion": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    // Find the squares of the sides\n    val aSq = a * a\n    val bSq = b * b\n    val cSq = c * c\n    \n    // Check the Pythagorean theorem for all permutations\n    return (aSq + bSq == cSq) || (aSq + cSq == bSq) || (bSq + cSq == aSq)\n}\n\n// Test cases\nfun main() {\n    println(rightAngleTriangle(3, 4, 5)) // Should print True\n    println(rightAngleTriangle(1, 2, 3)) // Should print False\n}"}
{"task_id": "HumanEval_kotlin/158", "language": "kotlin", "completion": "fun findMax(words: List<String>): String {\n    // Function to get the count of unique characters in a word\n    fun uniqueCharCount(word: String): Int {\n        return word.toSet().size\n    }\n\n    // Initialize the variables to keep track of max unique characters and the corresponding word\n    var maxUniqueCount = 0\n    var wordWithMaxUniqueChars = \"\"\n\n    for (word in words) {\n        val uniqueCount = uniqueCharCount(word)\n        if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word < wordWithMaxUniqueChars)) {\n            maxUniqueCount = uniqueCount\n            wordWithMaxUniqueChars = word\n        }\n    }\n\n    return wordWithMaxUniqueChars\n}\n\n// Test cases\nfun main() {\n    println(findMax(listOf(\"name\", \"of\", \"string\"))) // Output: \"string\"\n    println(findMax(listOf(\"name\", \"enam\", \"game\"))) // Output: \"enam\"\n    println(findMax(listOf(\"aaaaaaa\", \"bb\", \"cc\"))) // Output: \"aaaaaaa\"\n}"}
{"task_id": "HumanEval_kotlin/159", "language": "kotlin", "completion": "fun eat(number: Int, need: Int, remaining: Int): List<Int> {\n    // Calculate the total number of eaten carrots after the meal\n    val totalEaten = number + minOf(need, remaining)\n    \n    // Calculate the number of remaining carrots after the meal\n    val remainingCarrots = maxOf(remaining - need, 0)\n    \n    // Return the results as a list\n    return listOf(totalEaten, remainingCarrots)\n}\n\n// Example usage:\nfun main() {\n    println(eat(5, 6, 10)) // Output: [11, 4]\n    println(eat(4, 8, 9))  // Output: [12, 1]\n    println(eat(1, 10, 10)) // Output: [11, 0]\n    println(eat(2, 11, 5)) // Output: [7, 0]\n}"}
{"task_id": "HumanEval_kotlin/160", "language": "kotlin", "completion": "fun doAlgebra(operator: List<String>, operand: List<Int>): Int {\n    // Check if the input lists are valid\n    if (operator.size != operand.size - 1) {\n        throw IllegalArgumentException(\"The size of the operator list must be one less than the size of the operand list.\")\n    }\n\n    // Start with the first operand\n    var result = operand[0]\n\n    // Iterate through the operators and operands, applying each operator to the corresponding operands\n    for (i in operator.indices) {\n        when (operator[i]) {\n            \"+\" -> result += operand[i + 1]\n            \"-\" -> result -= operand[i + 1]\n            \"*\" -> result *= operand[i + 1]\n            \"//\" -> result /= operand[i + 1] // Assume floor division is integer division\n            \"**\" -> result = Math.pow(result.toDouble(), operand[i + 1].toDouble()).toInt()\n            else -> throw IllegalArgumentException(\"Unknown operator: ${operator[i]}\")\n        }\n    }\n\n    return result\n}\n\n// Example usage:\nfun main() {\n    val operators = listOf(\"+\", \"*\", \"-\")\n    val operands = listOf(2, 3, 4, 5)\n    val result = doAlgebra(operators, operands)\n    println(result) // Output: 9\n}"}
{"task_id": "HumanEval_kotlin/161", "language": "kotlin", "completion": "fun solve(s: String): String {\n    // Check if the string contains any letter\n    val containsLetter = s.any { it.isLetter() }\n    \n    return if (!containsLetter) {\n        // If no letters, reverse the string\n        s.reversed()\n    } else {\n        // Otherwise, reverse the case of each letter\n        s.map { \n            if (it.isLetter()) {\n                if (it.isUpperCase()) it.toLowerCase() else it.toUpperCase()\n            } else {\n                it\n            }\n        }.joinToString(\"\")\n    }\n}\n\n// Examples\nfun main() {\n    println(solve(\"1234\"))  // Output: \"4321\"\n    println(solve(\"ab\"))    // Output: \"AB\"\n    println(solve(\"#a@C\"))  // Output: \"#A@c\"\n}"}
{"task_id": "HumanEval_kotlin/162", "language": "kotlin", "completion": "import java.security.MessageDigest\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) {\n        return null\n    }\n\n    val md = MessageDigest.getInstance(\"MD5\")\n    val digest = md.digest(text.toByteArray())\n    return digest.joinToString(\"\") { \"%02x\".format(it) }\n}\n\nfun main() {\n    val text = \"Hello world\"\n    val hash = stringToMd5(text)\n    println(hash)  // Output: 3e25960a79dbc69b674cd4ec67a72c62\n}"}
{"task_id": "HumanEval_kotlin/163", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val min = Math.min(a, b)\n    val max = Math.max(a, b)\n    val evens = mutableListOf<Int>()\n    \n    for (i in min..max) {\n        if (i % 2 == 0) {\n            evens.add(i)\n        }\n    }\n    \n    return evens\n}\n\nfun main() {\n    println(generateIntegers(2, 8))  // Output: [2, 4, 6, 8]\n    println(generateIntegers(8, 2))  // Output: [2, 4, 6, 8]\n    println(generateIntegers(10, 14)) // Output: [10, 12, 14]\n}"}

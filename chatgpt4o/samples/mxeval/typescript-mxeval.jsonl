{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "const has_close_elements = function (numbers: Array<number>, threshold: number): boolean {\n    // Sort the numbers array\n    numbers.sort((a, b) => a - b);\n\n    // Iterate through the sorted list and check consecutive pairs\n    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n\n    // If no such pair is found, return false\n    return false;\n};\n\n// Test cases\nconsole.log(has_close_elements([1.0, 2.0, 3.0], 0.5)); // False\nconsole.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // True"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "const separate_paren_groups = function(paren_string: string): Array<string> {\n    const cleanedString = paren_string.replace(/\\s+/g, '');\n    const result: Array<string> = [];\n    let currentGroupStart = 0;\n    let openCount = 0;\n\n    for (let i = 0; i < cleanedString.length; i++) {\n        if (cleanedString[i] === '(') {\n            if (openCount === 0) {\n                currentGroupStart = i;\n            }\n            openCount++;\n        } else if (cleanedString[i] === ')') {\n            openCount--;\n            if (openCount === 0) {\n                result.push(cleanedString.slice(currentGroupStart, i + 1));\n            }\n        }\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(separate_paren_groups('( ) (( )) (( )( ))')); // Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "const truncate_number = function (number0: number): number {\n    const integerPart = Math.floor(number0);\n    const decimalPart = number0 - integerPart;\n    return decimalPart;\n};\n\n// Example usage\nconsole.log(truncate_number(3.5)); // Output: 0.5\nconsole.log(truncate_number(7.123)); // Output: 0.123\nconsole.log(truncate_number(10.999)); // Output: 0.999"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean_absolute_deviation = function (numbers: Array<number>): number {\n    if (numbers.length === 0) return 0; // Handle edge case for empty array\n\n    // Step 1: Calculate the mean\n    const mean = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n\n    // Step 2: Compute the absolute differences from the mean\n    const absoluteDifferences = numbers.map(value => Math.abs(value - mean));\n\n    // Step 3: Calculate the mean of absolute differences (MAD)\n    const mad = absoluteDifferences.reduce((sum, value) => sum + value, 0) / absoluteDifferences.length;\n\n    return mad;\n};\n\n// Example usage:\nconsole.log(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "const intersperse = function (numbers: number[], delimiter: number): number[] {\n    if (numbers.length === 0) {\n        return [];\n    }\n    const result: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n};\n\n// Example usage:\nconsole.log(intersperse([], 4)); // []\nconsole.log(intersperse([1, 2, 3], 4)); // [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parse_nested_parens = function (paren_string: string): Array<number> {\n    // Split the input string by spaces to get individual groups\n    const groups = paren_string.split(' ');\n    const result: Array<number> = [];\n\n    // Function to calculate max depth of a single group of parentheses\n    const calculateDepth = (group: string): number => {\n        let currentDepth = 0;\n        let maxDepth = 0;\n\n        for (const char of group) {\n            if (char === '(') {\n                currentDepth++;\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } else if (char === ')') {\n                currentDepth--;\n            }\n        }\n\n        return maxDepth;\n    };\n\n    // Calculate the depth for each group and store it in the result array\n    for (const group of groups) {\n        result.push(calculateDepth(group));\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(parse_nested_parens('(()()) ((())) () ((())()())')); // Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "const filter_by_substring = function (strings: Array<string>, substring: string) : Array<string>  {\n    return strings.filter(str => str.includes(substring));\n}\n\n// Test cases\nconsole.log(filter_by_substring([], 'a')); // []\nconsole.log(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')); // ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n    // Initialize sum to 0 and product to 1\n    let sum = 0;\n    let product = 1;\n\n    // Iterate over the list of numbers\n    for (const num of numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return a tuple with the sum and product\n    return [sum, product];\n};\n\n// Test cases\nconsole.log(sum_product([])); // Output: [0, 1]\nconsole.log(sum_product([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const rolling_max = function (numbers: Array<number>): Array<number> {\n  // Initialize an empty array to store the rolling maximums\n  let result: Array<number> = [];\n  \n  // Initialize a variable to keep track of the current maximum\n  let currentMax: number = -Infinity;\n\n  // Iterate over each number in the input array\n  for (let num of numbers) {\n    // Update the current maximum if the current number is greater\n    if (num > currentMax) {\n      currentMax = num;\n    }\n    // Add the current maximum to the result array\n    result.push(currentMax);\n  }\n\n  return result;\n};\n\n// Test the function with the given example\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2])); // Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "const make_palindrome = function (string0: string): string {\n    // Function to check if a given string is a palindrome\n    const isPalindrome = (str: string): boolean => {\n        const len = str.length;\n        for (let i = 0; i < len / 2; i++) {\n            if (str[i] !== str[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const len = string0.length;\n    \n    // If the input string is empty or already a palindrome\n    if (len === 0 || isPalindrome(string0)) {\n        return string0;\n    }\n\n    // Find the longest palindromic suffix\n    let longestPalindromicSuffix = '';\n    for (let i = 0; i < len; i++) {\n        const suffix = string0.substring(i);\n        if (isPalindrome(suffix)) {\n            longestPalindromicSuffix = suffix;\n            break;\n        }\n    }\n\n    // Determine the prefix that comes before the palindromic suffix\n    const prefix = string0.substring(0, string0.length - longestPalindromicSuffix.length);\n\n    // Append the reverse of the prefix to the end of the original string\n    const reversedPrefix = prefix.split('').reverse().join('');\n    return string0 + reversedPrefix;\n};\n\n// Test cases\nconsole.log(make_palindrome('')); // ''\nconsole.log(make_palindrome('cat')); // 'catac'\nconsole.log(make_palindrome('cata')); // 'catac'"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n    if (a.length !== b.length) {\n        throw new Error(\"Input strings must be of the same length\");\n    }\n\n    let result = '';\n\n    for (let i = 0; i < a.length; i++) {\n        // XOR operation: 1 if the bits are different, 0 if they are the same\n        const xorResult = (a[i] === b[i]) ? '0' : '1';\n        result += xorResult;\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(string_xor('010', '110')); // Output: '100'"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "function longest(strings: string[]): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (const str of strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    return longestString;\n}\n\n// Test cases\nconsole.log(longest([])); // null\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n};\n\n// Example usage:\nconsole.log(greatest_common_divisor(3, 5)); // Output: 1\nconsole.log(greatest_common_divisor(25, 15)); // Output: 5"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "const all_prefixes = function (string0: string): Array<string> {\n    const prefixes: Array<string> = [];\n    for (let i = 1; i <= string0.length; i++) {\n        prefixes.push(string0.slice(0, i));\n    }\n    return prefixes;\n};\n\n// Example usage\nconsole.log(all_prefixes('abc')); // ['a', 'ab', 'abc']"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = function (n: number): string {\n    let result: string[] = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(' ');\n};\n\n// Example usage:\nconsole.log(string_sequence(0)); // '0'\nconsole.log(string_sequence(5)); // '0 1 2 3 4 5'"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "const count_distinct_characters = function (string0: string): number {\n    // Convert the string to lowercase\n    const lowerCaseString = string0.toLowerCase();\n    // Create a Set to store unique characters\n    const uniqueCharacters = new Set<string>();\n    \n    // Iterate over each character in the string\n    for (const char of lowerCaseString) {\n        // Add the character to the Set\n        uniqueCharacters.add(char);\n    }\n    \n    // Return the size of the Set which is the number of distinct characters\n    return uniqueCharacters.size;\n};\n\n// Example usage:\nconsole.log(count_distinct_characters('xyzXYZ')); // Output: 3\nconsole.log(count_distinct_characters('Jerry'));  // Output: 4"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const parse_music = function (music_string: string): Array<number> {\n    const notes = music_string.split(' ');\n    const beatsMap: { [key: string]: number } = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n\n    return notes.map(note => beatsMap[note]);\n};\n\n// Example usage\nconsole.log(parse_music('o o| .| o| o| .| .| .| .| o o')); // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "const how_many_times = function (string0: string, substring: string): number {\n    if (substring.length === 0) return 0;\n\n    let count = 0;\n    for (let i = 0; i <= string0.length - substring.length; i++) {\n        if (string0.slice(i, i + substring.length) === substring) {\n            count++;\n        }\n    }\n    return count;\n};\n\n// Example usage\nconsole.log(how_many_times('', 'a')); // 0\nconsole.log(how_many_times('aaa', 'a')); // 3\nconsole.log(how_many_times('aaaa', 'aa')); // 3"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n    // Mapping of string numerals to their numeric values\n    const numeralMap: { [key: string]: number } = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    // Reverse mapping of numeric values to string numerals\n    const reverseNumeralMap: { [key: number]: string } = {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine'\n    };\n\n    // Split the input string into an array of numeral strings\n    const numeralArray = numbers.split(' ');\n\n    // Convert the array of numeral strings to an array of numbers\n    const numberArray = numeralArray.map(numeral => numeralMap[numeral]);\n\n    // Sort the array of numbers\n    const sortedNumberArray = numberArray.sort((a, b) => a - b);\n\n    // Convert the sorted array of numbers back to an array of numeral strings\n    const sortedNumeralArray = sortedNumberArray.map(number => reverseNumeralMap[number]);\n\n    // Join the sorted array of numeral strings into a single string\n    return sortedNumeralArray.join(' ');\n};\n\n// Example usage:\nconsole.log(sort_numbers('three one five')); // Output: 'one three five'"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "const find_closest_elements = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error(\"The array must have at least two elements.\");\n    }\n\n    // Sort the array in ascending order\n    numbers.sort((a, b) => a - b);\n\n    // Initialize variables to track the minimum difference and the closest pair\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair: [number, number] = [numbers[0], numbers[1]];\n\n    // Iterate through the sorted array and find the closest pair\n    for (let i = 0; i < numbers.length - 1; i++) {\n        const diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n\n    return closestPair;\n};\n\n// Test cases\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // [2.0, 2.2]\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // [2.0, 2.0]\nconsole.log(find_closest_elements([1.0, 1.1, 1.2, 1.3, 1.4])); // [1.3, 1.4]\nconsole.log(find_closest_elements([10, -10, 0, 5, -5, 15])); // [0, 5]"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error(\"The input array must contain at least two elements.\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    if (min === max) {\n        throw new Error(\"The input array must have at least two distinct elements.\");\n    }\n\n    return numbers.map(num => (num - min) / (max - min));\n};\n\n// Test example\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "const filter_integers = function (values: Array<any>): Array<number> {\n    return values.filter(value => typeof value === 'number' && Number.isInteger(value));\n}\n\n// Example usage\nconsole.log(filter_integers(['a', 3.14, 5])); // [5]\nconsole.log(filter_integers([1, 2, 3, 'abc', {}, []])); // [1, 2, 3]"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "const strlen = function (string0: string): number {\n    return string0.length;\n};\n\n// Test cases\nconsole.log(strlen(''));      // Expected output: 0\nconsole.log(strlen('abc'));   // Expected output: 3"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "const largest_divisor = function (n: number): number {\n    if (n <= 1) {\n        throw new Error(\"Input must be greater than 1\");\n    }\n\n    for (let i = n - 1; i >= 1; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n\n    // This line should never be reached because there's always a divisor before n (at least 1).\n    throw new Error(\"No valid divisor found\");\n}\n\n// Test cases\nconsole.log(largest_divisor(15)); // Output: 5\nconsole.log(largest_divisor(10)); // Output: 5\nconsole.log(largest_divisor(7));  // Output: 1\nconsole.log(largest_divisor(25)); // Output: 5"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst factorize = function (n: number): Array<number> {\n    if (n < 2) {\n        throw new Error('Input number should be greater than or equal to 2.');\n    }\n\n    const factors: Array<number> = [];\n    let factor = 2;\n\n    while (n >= factor * factor) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n\n    if (n > 1) {\n        factors.push(n);\n    }\n\n    return factors;\n};\n\n// Testing the function\nconsole.log(factorize(8));  // Output: [2, 2, 2]\nconsole.log(factorize(25)); // Output: [5, 5]\nconsole.log(factorize(70)); // Output: [2, 5, 7]"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "const remove_duplicates = function (numbers: Array<number>): Array<number> {\n    // Step 1: Count occurrences of each number\n    const countMap: { [key: number]: number } = {};\n    \n    for (const num of numbers) {\n        if (countMap[num]) {\n            countMap[num]++;\n        } else {\n            countMap[num] = 1;\n        }\n    }\n\n    // Step 2: Filter numbers that occur only once\n    const result: Array<number> = numbers.filter(num => countMap[num] === 1);\n\n    // Step 3: Return the result\n    return result;\n};\n\n// Example usage\nconsole.log(remove_duplicates([1, 2, 3, 2, 4])); // Output: [1, 3, 4]"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n    return string0.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\n// Example usage\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "const concatenate = function (strings: Array<string>): string {\n    return strings.join('');\n};\n\n// Example usage:\nconsole.log(concatenate([])); // ''\nconsole.log(concatenate(['a', 'b', 'c'])); // 'abc'"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "const filter_by_prefix = function (strings: Array<string>, prefix: string): Array<string> {\n    return strings.filter(str => str.startsWith(prefix));\n};\n\n// Test cases\nconsole.log(filter_by_prefix([], 'a')); // Output: []\nconsole.log(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')); // Output: ['abc', 'array']"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(num => num > 0);\n};\n\n// Example usage:\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n    // Return false for numbers less than or equal to 1\n    if (n <= 1) return false;\n\n    // Check divisibility from 2 to the square root of n\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n\n    // If no divisors were found, the number is prime\n    return true;\n};\n\n// Test cases\nconsole.log(is_prime(6));   // False\nconsole.log(is_prime(101)); // True\nconsole.log(is_prime(11));  // True\nconsole.log(is_prime(13441));  // True\nconsole.log(is_prime(61));  // True\nconsole.log(is_prime(4));   // False\nconsole.log(is_prime(1));   // False"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "const sort_third = function (l: Array<number>): Array<number> {\n    // Step 1: Collect elements at indices divisible by 3\n    const divisibleByThree: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            divisibleByThree.push(l[i]);\n        }\n    }\n\n    // Step 2: Sort the collected elements\n    divisibleByThree.sort((a, b) => a - b);\n\n    // Step 3: Replace the original elements with the sorted values\n    let sortedIndex = 0;\n    const result = l.map((value, index) => {\n        if (index % 3 === 0) {\n            return divisibleByThree[sortedIndex++];\n        }\n        return value;\n    });\n\n    return result;\n};\n\n// Test cases\nconsole.log(sort_third([1, 2, 3])); // [1, 2, 3]\nconsole.log(sort_third([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n    // Create a Set from the array to remove duplicates\n    const uniqueSet = new Set(l);\n\n    // Convert the Set back to an array\n    const uniqueArray = Array.from(uniqueSet);\n\n    // Sort the array in ascending order\n    uniqueArray.sort((a, b) => a - b);\n\n    return uniqueArray;\n};\n\n// Example usage\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "const max_element = function (l: Array<number>): number {\n    if (l.length === 0) {\n        throw new Error(\"The list cannot be empty\");\n    }\n    return Math.max(...l);\n};\n\n// Test cases\nconsole.log(max_element([1, 2, 3])); // 3\nconsole.log(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // 123"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "const fizz_buzz = function(n: number): number {\n    let count = 0;\n    \n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            count += countSevens(i);\n        }\n    }\n    \n    return count;\n}\n\n// Helper function to count the number of '7's in a given number\nconst countSevens = function(num: number): number {\n    let count = 0;\n    const numStr = num.toString();\n    \n    for (let char of numStr) {\n        if (char === '7') {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Test cases\nconsole.log(fizz_buzz(50));  // Output: 0\nconsole.log(fizz_buzz(78));  // Output: 2\nconsole.log(fizz_buzz(79));  // Output: 3"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const sort_even = function (l: Array<number>): Array<number> {\n    // Step 1: Extract the values at even indices\n    let evenValues: Array<number> = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenValues.push(l[i]);\n    }\n\n    // Step 2: Sort the extracted even values\n    evenValues.sort((a, b) => a - b);\n\n    // Step 3: Reconstruct the list with sorted even indices\n    let sortedEvenIndex = 0;\n    let result: Array<number> = [...l]; // Copy the original list\n    for (let i = 0; i < l.length; i += 2) {\n        result[i] = evenValues[sortedEvenIndex];\n        sortedEvenIndex += 1;\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(sort_even([1, 2, 3])); // [1, 2, 3]\nconsole.log(sort_even([5, 6, 3, 4])); // [3, 6, 5, 4]"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst prime_fib = function(n: number): number {\n    // Edge case handling, if n is less than 1, return 0 as there's no \"0th\" prime Fibonacci number\n    if (n < 1) {\n        throw new Error(\"Input must be a positive integer\");\n    }\n\n    let fib1 = 1, fib2 = 2;\n    let count = 0;\n\n    while (true) {\n        if (isPrime(fib2)) {\n            count++;\n            if (count === n) {\n                return fib2;\n            }\n        }\n        const nextFib = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = nextFib;\n    }\n};\n\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    // Sort the list first\n    l.sort((a, b) => a - b);\n\n    // Iterate through the list, fixing one element at a time\n    for (let i = 0; i < l.length - 2; i++) {\n        // Use two pointers to find the remaining two elements\n        let left = i + 1;\n        let right = l.length - 1;\n\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    // If no triplet sums to zero, return false\n    return false;\n}\n\n// Test cases\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "const car_race_collision = function (n: number) : number  {\n    // Each car from the left-to-right group will collide with each car from the right-to-left group.\n    return n * n;\n};\n\n// Example usage:\nconsole.log(car_race_collision(3)); // Output: 9\nconsole.log(car_race_collision(5)); // Output: 25"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "const incr_list = function (l: Array<number>): Array<number> {\n    return l.map(num => num + 1);\n}\n\n// Example usage:\nconsole.log(incr_list([1, 2, 3])); // [2, 3, 4]\nconsole.log(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    const seenNumbers = new Set<number>();\n\n    for (const num of l) {\n        if (seenNumbers.has(-num)) {\n            return true;\n        }\n        seenNumbers.add(num);\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // False\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "const change_base = function (x: number, base: number): string {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9 inclusive.\");\n    }\n    if (x === 0) {\n        return '0';\n    }\n\n    let result = '';\n    let current = x;\n\n    while (current > 0) {\n        const remainder = current % base;\n        result = remainder.toString() + result;\n        current = Math.floor(current / base);\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(change_base(8, 3)); // Output: '22'\nconsole.log(change_base(8, 2)); // Output: '1000'\nconsole.log(change_base(7, 2)); // Output: '111'"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "const triangle_area = function (a: number, h: number): number {\n    return 0.5 * a * h;\n};\n\n// Example usage:\nconsole.log(triangle_area(5, 3)); // 7.5"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    // Handle the base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Initialize an array to store the last four values\n    let fibs = [0, 0, 2, 0];\n\n    // Iterate from 4 to n to compute the n-th fib4 number\n    for (let i = 4; i <= n; i++) {\n        // Calculate the next fib4 number\n        let nextFib = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n\n        // Update the array to reflect the last four values\n        fibs = [fibs[1], fibs[2], fibs[3], nextFib];\n    }\n\n    // The last element in the array is the n-th fib4 number\n    return fibs[3];\n};\n\n// Example usage:\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n    if (l.length === 0) {\n        throw new Error(\"The list is empty\");\n    }\n\n    // Sort the list in ascending order\n    const sortedList = l.slice().sort((a, b) => a - b);\n\n    const len = sortedList.length;\n    const mid = Math.floor(len / 2);\n\n    // Check if the number of elements is odd\n    if (len % 2 !== 0) {\n        // If the list length is odd, return the middle element\n        return sortedList[mid];\n    } else {\n        // If the list length is even, return the average of the two middle elements\n        return (sortedList[mid - 1] + sortedList[mid]) / 2;\n    }\n}\n\n// Example usage:\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n    // An empty string or a single character string is considered a palindrome\n    if (text.length <= 1) {\n        return true;\n    }\n\n    // Compare the string with its reversed version\n    const reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n};\n\n// Test cases\nconsole.log(is_palindrome('')); // True\nconsole.log(is_palindrome('aba')); // True\nconsole.log(is_palindrome('aaaaa')); // True\nconsole.log(is_palindrome('zbcd')); // False"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "const modp = function(n: number, p: number): number {\n    // Function to perform modular exponentiation.\n    const modularExponentiation = (base: number, exponent: number, modulus: number): number => {\n        if (modulus === 1) return 0; // As any number % 1 is 0\n        let result = 1;\n        base = base % modulus;\n        while (exponent > 0) {\n            if ((exponent % 2) === 1) { // If the exponent is odd, multiply base with result\n                result = (result * base) % modulus;\n            }\n            exponent = Math.floor(exponent / 2); // Divide the exponent by 2\n            base = (base * base) % modulus; // Square the base\n        }\n        return result;\n    };\n\n    return modularExponentiation(2, n, p);\n};\n\n// Test cases\nconsole.log(modp(3, 5));   // Output: 3\nconsole.log(modp(1101, 101)); // Output: 2\nconsole.log(modp(0, 101));    // Output: 1\nconsole.log(modp(3, 11));     // Output: 8\nconsole.log(modp(100, 101));  // Output: 1"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n    // Define a regular expression to match all vowels (both lowercase and uppercase)\n    const vowels = /[aeiouAEIOU]/g;\n    // Replace all vowels in the text with an empty string\n    return text.replace(vowels, '');\n}\n\n// Example usage and test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels('abcdef\\nghijklm')); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n    return l.every(num => num < t);\n};\n\n// Example usage:\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // True\nconsole.log(below_threshold([1, 20, 4, 10], 5));  // False"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};\n\n// Example usage\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string) : boolean  {\n    const getFrequencyMap = (s: string): Record<string, number> => {\n        const freqMap: Record<string, number> = {};\n        for (const char of s) {\n            if (freqMap[char] !== undefined) {\n                freqMap[char]++;\n            } else {\n                freqMap[char] = 1;\n            }\n        }\n        return freqMap;\n    };\n\n    const freqMap0 = getFrequencyMap(s0);\n    const freqMap1 = getFrequencyMap(s1);\n\n    const keys0 = Object.keys(freqMap0);\n    const keys1 = Object.keys(freqMap1);\n\n    if (keys0.length !== keys1.length) {\n        return false;\n    }\n\n    for (const key of keys0) {\n        if (freqMap0[key] !== freqMap1[key]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input must be a positive integer.\");\n    }\n\n    if (n === 1 || n === 2) {\n        return 1;\n    }\n\n    let a = 1, b = 1, temp;\n\n    for (let i = 3; i <= n; i++) {\n        temp = a + b;\n        a = b;\n        b = temp;\n    }\n\n    return b;\n};\n\n// Test cases\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "const correct_bracketing = function(brackets: string): boolean {\n    let balance = 0;\n\n    for (let char of brackets) {\n        if (char === '<') {\n            balance++;\n        } else if (char === '>') {\n            balance--;\n        }\n\n        // If balance goes negative, there are more closing than opening brackets\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    // At the end, balance should be zero for correct bracketing\n    return balance === 0;\n};\n\n// Test cases\nconsole.log(correct_bracketing(\"<\")); // False\nconsole.log(correct_bracketing(\"<>\")); // True\nconsole.log(correct_bracketing(\"<<><>>\")); // True\nconsole.log(correct_bracketing(\"><<>\")); // False"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "const monotonic = function (l: Array<number>): boolean {\n    if (l.length <= 1) return true;\n\n    let increasing = true;\n    let decreasing = true;\n\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n};\n\n// Test cases\nconsole.log(monotonic([1, 2, 4, 20])); // True\nconsole.log(monotonic([1, 20, 4, 10])); // False\nconsole.log(monotonic([4, 1, 0, -10])); // True"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "const common = function (l1: number[], l2: number[]): number[] {\n    // Convert arrays to sets to remove duplicates\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Find common elements by filtering set1 with elements of set2\n    const commonElements = [...set1].filter(item => set2.has(item));\n\n    // Sort the common elements\n    commonElements.sort((a, b) => a - b);\n\n    return commonElements;\n}\n\n// Example usage:\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    // Initialize the largest prime factor\n    let largestPrime = -1;\n\n    // Divide n by 2 to get rid of all the even factors\n    while (n % 2 === 0) {\n        largestPrime = 2;\n        n /= 2;\n    }\n\n    // Now n must be odd, so we can start checking from 3\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            largestPrime = i;\n            n /= i;\n        }\n    }\n\n    // If n is still greater than 2, then n is prime\n    if (n > 2) {\n        largestPrime = n;\n    }\n\n    return largestPrime;\n};\n\n// Testing the function with examples\nconsole.log(largest_prime_factor(13195)); // Output: 29\nconsole.log(largest_prime_factor(2048));  // Output: 2"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    return n * (n + 1) / 2;\n};\n\n// Test cases\nconsole.log(sum_to_n(30)); // 465\nconsole.log(sum_to_n(100)); // 5050\nconsole.log(sum_to_n(5)); // 15\nconsole.log(sum_to_n(10)); // 55\nconsole.log(sum_to_n(1)); // 1"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const correct_bracketing = function (brackets: string): boolean {\n    // Initialize a stack to keep track of opening brackets\n    const stack: string[] = [];\n    \n    // Traverse each character in the string\n    for (const char of brackets) {\n        // If the character is an opening bracket, push it onto the stack\n        if (char === '(') {\n            stack.push(char);\n        } \n        // If it is a closing bracket\n        else if (char === ')') {\n            // Check if there's a corresponding opening bracket in the stack\n            if (stack.length === 0) {\n                return false; // Unmatched closing bracket\n            }\n            // Pop the corresponding opening bracket from the stack\n            stack.pop();\n        }\n    }\n    \n    // If the stack is empty, all opening brackets had matching closing brackets\n    return stack.length === 0;\n};\n\n// Test cases\nconsole.log(correct_bracketing(\"(\"));          // False\nconsole.log(correct_bracketing(\"()\"));         // True\nconsole.log(correct_bracketing(\"(()())\"));     // True\nconsole.log(correct_bracketing(\")(()\"));       // False"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number> {\n    let result: Array<number> = [];\n    \n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    \n    return result;\n}\n\n// Example Usage\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // Output: [2, 6]"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n    // Handle the base cases explicitly\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Initialize an array to store the sequence values up to the n-th element\n    const fibfibSequence: number[] = new Array(n + 1);\n    \n    // Set the base cases\n    fibfibSequence[0] = 0;\n    fibfibSequence[1] = 0;\n    fibfibSequence[2] = 1;\n\n    // Compute the fibfib values from 3 to n\n    for (let i = 3; i <= n; i++) {\n        fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n    }\n\n    // Return the n-th element of the fibfib sequence\n    return fibfibSequence[n];\n};\n\n// Test cases\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    // Convert the string to lower case to handle both upper and lower case letters uniformly\n    const lowerCaseString = s.toLowerCase();\n    \n    // Define the set of vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    \n    // Initialize the count of vowels to 0\n    let count = 0;\n    \n    // Iterate over the characters of the string\n    for (let i = 0; i < lowerCaseString.length; i++) {\n        const char = lowerCaseString[i];\n        \n        // Check if the character is a vowel\n        if (vowels.has(char)) {\n            count++;\n        }\n        \n        // Special case for 'y' at the end of the word\n        if (char === 'y' && i === lowerCaseString.length - 1) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Example usage:\nconsole.log(vowels_count(\"abcde\")); // Output: 2\nconsole.log(vowels_count(\"ACEDY\")); // Output: 3"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "const circular_shift = function (x: number, shift: number): string {\n    // Convert the integer to a string\n    const strX = x.toString();\n    const numDigits = strX.length;\n\n    // If shift is greater than the number of digits, return the digits reversed\n    if (shift > numDigits) {\n        return strX.split('').reverse().join('');\n    }\n\n    // Perform the circular shift\n    const effectiveShift = shift % numDigits; // Normalize shift\n    const part1 = strX.slice(-effectiveShift);\n    const part2 = strX.slice(0, numDigits - effectiveShift);\n\n    // Return the concatenated result\n    return part1 + part2;\n};\n\n// Test cases\nconsole.log(circular_shift(12, 1)); // \"21\"\nconsole.log(circular_shift(12, 2)); // \"12\"\nconsole.log(circular_shift(12345, 3)); // \"34512\"\nconsole.log(circular_shift(12345, 5)); // \"12345\"\nconsole.log(circular_shift(12345, 7)); // \"54321\""}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "const digitSum = function (s: string): number {\n    let sum = 0;\n\n    for (let char of s) {\n        if (char >= 'A' && char <= 'Z') {\n            sum += char.charCodeAt(0);\n        }\n    }\n\n    return sum;\n};\n\n// Test cases\nconsole.log(digitSum(\"\")); // 0\nconsole.log(digitSum(\"abAB\")); // 131\nconsole.log(digitSum(\"abcCd\")); // 67\nconsole.log(digitSum(\"helloE\")); // 69\nconsole.log(digitSum(\"woArBld\")); // 131\nconsole.log(digitSum(\"aAaaaXa\")); // 153"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const fruit_distribution = function (s: string, n: number): number {\n    // Use regular expressions to extract numbers from the string\n    // Assuming the string will always have \"apples\" and \"oranges\" in it\n    const appleMatch = s.match(/(\\d+) apples/);\n    const orangeMatch = s.match(/(\\d+) oranges/);\n\n    // Extract the numbers and convert them to integers\n    const apples = appleMatch ? parseInt(appleMatch[1]) : 0;\n    const oranges = orangeMatch ? parseInt(orangeMatch[1]) : 0;\n\n    // Calculate the number of mangoes\n    const mangoes = n - apples - oranges;\n    \n    return mangoes;\n};\n\n// Example usage:\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19)); // 8\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));  // 2\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100)); // 95\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120)); // 19"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "const pluck = function (arr: Array<number>): Array<number> {\n    let smallestEvenValue: number | null = null;\n    let smallestIndex: number | null = null;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (smallestEvenValue === null || arr[i] < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n                smallestIndex = i;\n            }\n        }\n    }\n\n    if (smallestEvenValue === null || smallestIndex === null) {\n        return [];\n    }\n\n    return [smallestEvenValue, smallestIndex];\n};\n\n// Test cases\nconsole.log(pluck([4, 2, 3]));   // Output: [2, 1]\nconsole.log(pluck([1, 2, 3]));   // Output: [2, 1]\nconsole.log(pluck([]));          // Output: []\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));  // Output: [0, 1]"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "const search = function(lst: Array<number>): number {\n    // Step 1: Count the frequency of each integer in the list\n    const frequencyMap: { [key: number]: number } = {};\n    for (const num of lst) {\n        if (frequencyMap[num] === undefined) {\n            frequencyMap[num] = 1;\n        } else {\n            frequencyMap[num]++;\n        }\n    }\n\n    // Step 2: Check which integers meet the criteria\n    let result = -1;\n    for (const num in frequencyMap) {\n        const numberValue = parseInt(num, 10);\n        const frequency = frequencyMap[numberValue];\n        if (frequency >= numberValue) {\n            if (numberValue > result) {\n                result = numberValue;\n            }\n        }\n    }\n\n    // Step 3: Return the result\n    return result;\n};\n\n// Test cases\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "const strange_sort_list = function (lst: Array<number>): Array<number> {\n    if (lst.length === 0) {\n        return [];\n    }\n\n    // Sort the list\n    lst.sort((a, b) => a - b);\n\n    const result: Array<number> = [];\n    let start = 0;\n    let end = lst.length - 1;\n\n    while (start <= end) {\n        // Pick the minimum value\n        if (start <= end) {\n            result.push(lst[start]);\n            start++;\n        }\n        // Pick the maximum value\n        if (start <= end) {\n            result.push(lst[end]);\n            end--;\n        }\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(strange_sort_list([1, 2, 3, 4])); // Output: [1, 4, 2, 3]\nconsole.log(strange_sort_list([5, 5, 5, 5])); // Output: [5, 5, 5, 5]\nconsole.log(strange_sort_list([]));           // Output: []"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n    \n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Round the area to 2 decimal points\n    return parseFloat(area.toFixed(2));\n};\n\n// Example usage:\nconsole.log(triangle_area(3, 4, 5)); // Output: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Output: -1"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n    // Check if the array q is a palindrome.\n    const isPalindrome = (arr: Array<number>): boolean => {\n        for (let i = 0; i < arr.length / 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Calculate the sum of the elements in the array q.\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Check both conditions: palindrome and sum.\n    return isPalindrome(q) && sum <= w;\n};\n\n// Example usage:\nconsole.log(will_it_fly([1, 2], 5)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 1)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 9)); // \u279e True\nconsole.log(will_it_fly([3], 5)); // \u279e True"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "const smallest_change = function (arr: Array<number>): number {\n    let changes = 0;\n    let start = 0;\n    let end = arr.length - 1;\n\n    while (start < end) {\n        if (arr[start] !== arr[end]) {\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n};\n\n// Example usage:\nconsole.log(smallest_change([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2]));    // Output: 1\nconsole.log(smallest_change([1, 2, 3, 2, 1]));          // Output: 0"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "const total_match = function(lst1: Array<string>, lst2: Array<string>): Array<string> {\n    // Helper function to calculate the total number of characters in a list of strings\n    const totalChars = (lst: Array<string>): number => {\n        return lst.reduce((acc, str) => acc + str.length, 0);\n    };\n\n    const totalCharsLst1 = totalChars(lst1);\n    const totalCharsLst2 = totalChars(lst2);\n\n    // Compare the total number of characters and return the appropriate list\n    if (totalCharsLst1 <= totalCharsLst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n};\n\n// Testing the function with the provided examples\nconsole.log(total_match([], [])); // \u279e []\nconsole.log(total_match(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\nconsole.log(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\nconsole.log(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\nconsole.log(total_match(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n    if (a < 2) return false;\n\n    // Helper function to generate a list of prime numbers up to a given limit\n    const generatePrimes = (limit: number): number[] => {\n        const sieve = Array(limit + 1).fill(true);\n        sieve[0] = sieve[1] = false; // 0 and 1 are not primes\n        for (let i = 2; i * i <= limit; i++) {\n            if (sieve[i]) {\n                for (let j = i * i; j <= limit; j += i) {\n                    sieve[j] = false;\n                }\n            }\n        }\n        return sieve.reduce((primes, isPrime, number) => {\n            if (isPrime) primes.push(number);\n            return primes;\n        }, [] as number[]);\n    };\n\n    // Generate primes up to 100\n    const primes = generatePrimes(100);\n\n    // Check combinations of three primes\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i; j < primes.length; j++) {\n            for (let k = j; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n};\n\n// Example usage\nconsole.log(is_multiply_prime(30)); // True: 30 = 2 * 3 * 5\nconsole.log(is_multiply_prime(60)); // True: 60 = 2 * 3 * 5\nconsole.log(is_multiply_prime(100)); // False\nconsole.log(is_multiply_prime(2310)); // True: 2310 = 2 * 3 * 5 * 7 * 11 (but only want 3 primes)"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "const is_simple_power = function (x: number, n: number): boolean {\n    // Edge cases\n    if (x <= 0 || n <= 0) return false;\n    if (x === 1) return true; // n^0 = 1 for any n > 0\n\n    // Check if x is a simple power of n\n    while (x > 1) {\n        if (x % n !== 0) return false;\n        x = x / n;\n    }\n    \n    return x === 1;\n};\n\n// Test cases\nconsole.log(is_simple_power(1, 4)); // true\nconsole.log(is_simple_power(2, 2)); // true\nconsole.log(is_simple_power(8, 2)); // true\nconsole.log(is_simple_power(3, 2)); // false\nconsole.log(is_simple_power(3, 1)); // false\nconsole.log(is_simple_power(5, 3)); // false"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "const iscube = function(a: number): boolean {\n    // Compute the cube root of the given number\n    const cubeRoot = Math.cbrt(a);\n    \n    // Round the cube root to the nearest integer\n    const roundedCubeRoot = Math.round(cubeRoot);\n    \n    // Cube the rounded integer and check if it equals the original number\n    return Math.pow(roundedCubeRoot, 3) === a;\n}\n\n// Test cases\nconsole.log(iscube(1));     // True\nconsole.log(iscube(2));     // False\nconsole.log(iscube(-1));    // True\nconsole.log(iscube(64));    // True\nconsole.log(iscube(0));     // True\nconsole.log(iscube(180));   // False"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "const hex_key = function (num: string): number {\n    // Set of prime hexadecimal digits\n    const primeHexDigits: Set<string> = new Set(['2', '3', '5', '7', 'B', 'D']);\n\n    // Initialize the count of prime digits\n    let primeCount: number = 0;\n\n    // Iterate over each character in the input string\n    for (const char of num) {\n        // If the character is in the set of prime hexadecimal digits, increment the count\n        if (primeHexDigits.has(char)) {\n            primeCount++;\n        }\n    }\n\n    // Return the total count of prime hexadecimal digits\n    return primeCount;\n};\n\n// Test cases\nconsole.log(hex_key(\"AB\")); // Output: 1\nconsole.log(hex_key(\"1077E\")); // Output: 2\nconsole.log(hex_key(\"ABED1A33\")); // Output: 4\nconsole.log(hex_key(\"123456789ABCDEF0\")); // Output: 6\nconsole.log(hex_key(\"2020\")); // Output: 2"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    // Convert the decimal number to binary using toString with radix 2\n    const binaryString = decimal.toString(2);\n    \n    // Format the string with 'db' at both the start and end\n    return `db${binaryString}db`;\n};\n\n// Example usage:\nconsole.log(decimal_to_binary(15));  // Output: \"db1111db\"\nconsole.log(decimal_to_binary(32));  // Output: \"db100000db\""}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n    // A string of length less than 3 cannot be happy\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Check every set of 3 consecutive characters\n    for (let i = 0; i < s.length - 2; i++) {\n        const char1 = s[i];\n        const char2 = s[i + 1];\n        const char3 = s[i + 2];\n\n        // If any set of 3 consecutive characters are not distinct, return false\n        if (char1 === char2 || char1 === char3 || char2 === char3) {\n            return false;\n        }\n    }\n\n    // If all sets of 3 consecutive characters are distinct, return true\n    return true;\n};\n\n// Test cases\nconsole.log(is_happy(\"a\")); // False\nconsole.log(is_happy(\"aa\")); // False\nconsole.log(is_happy(\"abcd\")); // True\nconsole.log(is_happy(\"aabb\")); // False\nconsole.log(is_happy(\"adb\")); // True\nconsole.log(is_happy(\"xyy\")); // False"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    const letterGrades: Array<string> = [];\n\n    for (const gpa of grades) {\n        if (gpa === 4.0) {\n            letterGrades.push('A+');\n        } else if (gpa > 3.7) {\n            letterGrades.push('A');\n        } else if (gpa > 3.3) {\n            letterGrades.push('A-');\n        } else if (gpa > 3.0) {\n            letterGrades.push('B+');\n        } else if (gpa > 2.7) {\n            letterGrades.push('B');\n        } else if (gpa > 2.3) {\n            letterGrades.push('B-');\n        } else if (gpa > 2.0) {\n            letterGrades.push('C+');\n        } else if (gpa > 1.7) {\n            letterGrades.push('C');\n        } else if (gpa > 1.3) {\n            letterGrades.push('C-');\n        } else if (gpa > 1.0) {\n            letterGrades.push('D+');\n        } else if (gpa > 0.7) {\n            letterGrades.push('D');\n        } else if (gpa > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n\n    return letterGrades;\n};\n\n// Example usage:\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Should output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "const prime_length = function (string0: string): boolean {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true;  // 2 and 3 are prime numbers\n        if (num % 2 === 0 || num % 3 === 0) return false; // multiples of 2 and 3 are not prime\n\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n\n    // Calculate the length of the string\n    const length = string0.length;\n\n    // Check if the length is a prime number\n    return isPrime(length);\n};\n\n// Examples\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "const starts_one_ends = function (n: number): number {\n    if (n === 1) return 1; // Special case for single-digit numbers.\n    \n    const startWithOne = Math.pow(10, n - 1);\n    const endWithOne = 9 * Math.pow(10, n - 1);\n    const overlap = Math.pow(10, n - 2);\n    \n    return startWithOne + endWithOne - overlap;\n};\n\n// Example usage\nconsole.log(starts_one_ends(1)); // Should output 1\nconsole.log(starts_one_ends(2)); // Should output 19\nconsole.log(starts_one_ends(3)); // Should output 190"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "const solve = function (N: number): string {\n    // Ensure we are dealing with a positive integer\n    if (N < 0 || N > 10000) {\n        throw new Error(\"N must be between 0 and 10000 inclusive.\");\n    }\n\n    // Step 1: Calculate the sum of the digits of N\n    const sumOfDigits = N.toString()\n                         .split('')\n                         .map(Number)\n                         .reduce((acc, digit) => acc + digit, 0);\n\n    // Step 2: Convert the sum to a binary string\n    const binaryRepresentation = sumOfDigits.toString(2);\n\n    // Return the binary string\n    return binaryRepresentation;\n};\n\n// Test cases\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150));  // \"110\"\nconsole.log(solve(147));  // \"1100\""}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "const add = function (lst: number[]): number {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\n// Example usage:\nconsole.log(add([4, 2, 6, 7]));  // Output: 2\nconsole.log(add([1, 3, 5, 8, 10, 12]));  // Output: 12\nconsole.log(add([2, 4, 6, 8, 10]));  // Output: 4"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "const anti_shuffle = function (s: string): string {\n    // Split the string into words and spaces\n    const words = s.split(/(\\s+)/);\n\n    // Process each word to sort its characters\n    const sortedWords = words.map(word => {\n        // If the word is just spaces, return it as is\n        if (/\\s+/.test(word)) {\n            return word;\n        }\n        // Otherwise, sort the characters in the word\n        return word.split('').sort().join('');\n    });\n\n    // Join the sorted words and spaces back together\n    return sortedWords.join('');\n};\n\n// Test cases\nconsole.log(anti_shuffle('Hi')); // 'Hi'\nconsole.log(anti_shuffle('hello')); // 'ehllo'\nconsole.log(anti_shuffle('Hello World!!!')); // 'Hello !!!Wdlor'"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<Array<number>> {\n    const result: Array<[number, number]> = [];\n\n    // Traverse the nested list to find all occurrences of x\n    for (let row = 0; row < lst.length; row++) {\n        for (let col = 0; col < lst[row].length; col++) {\n            if (lst[row][col] === x) {\n                result.push([row, col]);\n            }\n        }\n    }\n\n    // Sort the result: first by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // Descending order of columns\n        } else {\n            return a[0] - b[0]; // Ascending order of rows\n        }\n    });\n\n    return result;\n};\n\n// Example usage:\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)); \n// Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\nconsole.log(get_row([], 1)); \n// Output: []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); \n// Output: [[2, 2]]"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "const sort_array = function (array: Array<number>): Array<number> {\n    if (array.length === 0 || array.length === 1) {\n        return array.slice(); // Return a copy of the array\n    }\n    \n    // Calculate the sum of the first and last elements\n    const sum = array[0] + array[array.length - 1];\n    \n    // Create a copy of the array\n    const sortedArray = array.slice();\n    \n    // Sort the array based on the sum\n    if (sum % 2 === 0) {\n        // Sort in descending order if the sum is even\n        sortedArray.sort((a, b) => b - a);\n    } else {\n        // Sort in ascending order if the sum is odd\n        sortedArray.sort((a, b) => a - b);\n    }\n    \n    return sortedArray;\n};\n\n// Examples:\nconsole.log(sort_array([])); // => []\nconsole.log(sort_array([5])); // => [5]\nconsole.log(sort_array([2, 4, 3, 0, 1, 5])); // => [0, 1, 2, 3, 4, 5]\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6])); // => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const encrypt = function(s: string): string {\n    const shift = 4; // 2 * 2\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const alphabetLength = alphabet.length;\n\n    let encryptedString = '';\n\n    for (let i = 0; i < s.length; i++) {\n        const currentChar = s.charAt(i);\n        const currentIndex = alphabet.indexOf(currentChar);\n\n        if (currentIndex === -1) {\n            // Character not found in the alphabet, append as is\n            encryptedString += currentChar;\n        } else {\n            // Calculate the new index with wrapping around the alphabet\n            const newIndex = (currentIndex + shift) % alphabetLength;\n            encryptedString += alphabet[newIndex];\n        }\n    }\n\n    return encryptedString;\n};\n\n// Test cases\nconsole.log(encrypt('hi')); // 'lm'\nconsole.log(encrypt('asdfghjkl')); // 'ewhjklnop'\nconsole.log(encrypt('gf')); // 'kj'\nconsole.log(encrypt('et')); // 'ix'"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n    if (lst.length < 2) return null;\n\n    // Sort the list in ascending order\n    lst.sort((a, b) => a - b);\n\n    // Initialize the first smallest element\n    let firstSmallest = lst[0];\n\n    // Iterate to find the second smallest unique element\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > firstSmallest) {\n            return lst[i];\n        }\n    }\n\n    // If no second unique smallest element found, return None\n    return null;\n};\n\n// Test cases\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // 2\nconsole.log(next_smallest([])); // null\nconsole.log(next_smallest([1, 1])); // null"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const is_bored = function(S: string): number {\n    // Split the input string into sentences using delimiters '.', '?' and '!'\n    const sentences = S.split(/[.?!]/);\n    \n    // Initialize a counter for sentences that start with \"I\"\n    let boredomCount = 0;\n    \n    // Iterate through each sentence\n    for (let sentence of sentences) {\n        // Trim leading and trailing whitespace from the sentence\n        sentence = sentence.trim();\n        \n        // Check if the sentence starts with the word \"I\"\n        if (sentence.startsWith(\"I \")) {\n            boredomCount++;\n        }\n    }\n    \n    // Return the count of boredoms\n    return boredomCount;\n}\n\n// Example usage:\nconsole.log(is_bored(\"Hello world\")); // 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\nconsole.log(is_bored(\"I am happy. Are you happy? Yes, I am.\")); // 2"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "const any_int = function (x: number, y: number, z: number): boolean {\n    // Check if all numbers are integers\n    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n    \n    // Check if one of the numbers is the sum of the other two\n    return (x === y + z) || (y === x + z) || (z === x + y);\n};\n\n// Test cases\nconsole.log(any_int(5, 2, 7)); // \u279e True\nconsole.log(any_int(3, 2, 2)); // \u279e False\nconsole.log(any_int(3, -2, 1)); // \u279e True\nconsole.log(any_int(3.6, -2.2, 2)); // \u279e False"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const encode = function (message: string): string {\n    // Function to swap the case of a single letter\n    const swapCase = (char: string): string => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    };\n\n    // Function to shift the vowels\n    const shiftVowel = (char: string): string => {\n        const vowels = 'aeiouAEIOU';\n        const shiftedVowels = 'cgkqwCGKQW';\n        const index = vowels.indexOf(char);\n        return index !== -1 ? shiftedVowels[index] : char;\n    };\n\n    let result = '';\n\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        char = swapCase(char);\n        char = shiftVowel(char);\n        result += char;\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(encode('test')); // 'TGST'\nconsole.log(encode('This is a message')); // 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    // Return false if the dictionary is empty\n    if (dict.size === 0) {\n        return false;\n    }\n\n    // Define two flags to track if keys are all lower or all upper case\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key of dict.keys()) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n\n        if (key !== key.toLowerCase()) {\n            allLowerCase = false;\n        }\n\n        if (key !== key.toUpperCase()) {\n            allUpperCase = false;\n        }\n    }\n\n    // Return true if all keys are either all lower case or all upper case\n    return allLowerCase || allUpperCase;\n};\n\n// Testing the function with given examples\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"b\", \"banana\"]])));\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]])));\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [8, \"banana\"], [\"a\", \"apple\"]])));\nconsole.log(check_dict_case(new Map([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]])));\nconsole.log(check_dict_case(new Map([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]])));\n\n// Additional test cases\nconsole.log(check_dict_case(new Map())); // should return False (empty dictionary)\nconsole.log(check_dict_case(new Map([[\"hello\", \"world\"], [\"HELLO\", \"WORLD\"]])));"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const count_up_to = function (n: number): Array<number> {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        \n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        \n        return true;\n    }\n    \n    const primes: Array<number> = [];\n    \n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    \n    return primes;\n}\n\n// Test cases\nconsole.log(count_up_to(5));    // [2, 3]\nconsole.log(count_up_to(11));   // [2, 3, 5, 7]\nconsole.log(count_up_to(0));    // []\nconsole.log(count_up_to(20));   // [2, 3, 5, 7, 11, 13, 17, 19]\nconsole.log(count_up_to(1));    // []\nconsole.log(count_up_to(18));   // [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function(a: number, b: number): number {\n    // Extract the unit digits of both numbers\n    const unitDigitA = Math.abs(a) % 10;\n    const unitDigitB = Math.abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}\n\n// Example usage:\nconsole.log(multiply(148, 412)); // Should return 16\nconsole.log(multiply(19, 28));   // Should return 72\nconsole.log(multiply(2020, 1851)); // Should return 0\nconsole.log(multiply(14, -15));  // Should return 20"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "const count_upper = function (s: string): number {\n    let count = 0;\n    const vowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    \n    for (let i = 0; i < s.length; i += 2) {\n        if (vowels.has(s[i])) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Example usage:\nconsole.log(count_upper('aBCdEf')); // returns 1\nconsole.log(count_upper('abcdefg')); // returns 0\nconsole.log(count_upper('dBBE')); // returns 0"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst closest_integer = function (value: string): number {\n    // Parse the input string to a number\n    let num = math.bignumber(value);\n    \n    // Check if the number is exactly halfway between two integers\n    let fractionalPart = math.frac(num);\n    if (math.equal(fractionalPart, math.bignumber(0.5))) {\n        // If the number is positive, round up. If negative, round down.\n        return math.sign(num) > 0 ? math.ceil(num).toNumber() : math.floor(num).toNumber();\n    } else {\n        // Otherwise, round to the nearest integer\n        return math.round(num).toNumber();\n    }\n}\n\n// Examples\nconsole.log(closest_integer(\"10\")); // 10\nconsole.log(closest_integer(\"15.3\")); // 15\nconsole.log(closest_integer(\"14.5\")); // 15\nconsole.log(closest_integer(\"-14.5\")); // -15"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    const result: number[] = [];\n    let currentNumber = n;\n\n    for (let i = 0; i < n; i++) {\n        result.push(currentNumber);\n        if (n % 2 === 0) {\n            // n is even, so add the next even number\n            currentNumber += 2;\n        } else {\n            // n is odd, so add the next odd number\n            currentNumber += 2;\n        }\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(make_a_pile(3)); // Output: [3, 5, 7]\nconsole.log(make_a_pile(4)); // Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n    // Use a regular expression to split the string by commas or spaces\n    return s.split(/[\\s,]+/).filter(word => word.length > 0);\n};\n\n// Example usage:\nconsole.log(words_string(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Find the largest even number in the range [x, y]\n    let largestEven: number | null = null;\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            largestEven = i;\n            break;\n        }\n    }\n\n    // Return the largest even number found, or -1 if none found\n    return largestEven !== null ? largestEven : -1;\n};\n\n// Test cases\nconsole.log(choose_num(12, 15)); // Expected output: 14\nconsole.log(choose_num(13, 12)); // Expected output: -1\nconsole.log(choose_num(7, 11));  // Expected output: 10\nconsole.log(choose_num(2, 2));   // Expected output: 2\nconsole.log(choose_num(1, 1));   // Expected output: -1"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): string | number {\n    if (n > m) {\n        return -1;\n    }\n\n    // Calculate the sum of integers from n to m\n    const totalSum = (m - n + 1) * (n + m) / 2;\n\n    // Calculate the number of integers in the range\n    const count = m - n + 1;\n\n    // Calculate the average and round it to the nearest integer\n    const average = Math.round(totalSum / count);\n\n    // Convert the rounded average to binary and prefix it with \"0b\"\n    return `0b${average.toString(2)}`;\n}\n\n// Example usage:\nconsole.log(rounded_avg(1, 5));  // Output: \"0b11\"\nconsole.log(rounded_avg(7, 5));  // Output: -1\nconsole.log(rounded_avg(10, 20)); // Output: \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // Output: \"0b11010\""}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const unique_digits = function (x: Array<number>): Array<number>  {\n    // Helper function to check if a number contains any even digit\n    const hasEvenDigit = (num: number): boolean => {\n        // Convert the number to a string to easily iterate over each digit\n        const numStr = num.toString();\n        // Check each digit to see if it's even\n        for (const char of numStr) {\n            const digit = parseInt(char);\n            if (digit % 2 === 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Filter out numbers that contain any even digit\n    const filtered = x.filter(num => !hasEvenDigit(num));\n\n    // Sort the filtered numbers in ascending order\n    return filtered.sort((a, b) => a - b);\n};\n\n// Example usage:\nconsole.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(unique_digits([152, 323, 1422, 10])); // []"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "const by_length = function (arr: Array<number>): Array<string> {\n    // Define a map for number to name conversion\n    const numberToNameMap: { [key: number]: string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n\n    // Filter integers that are between 1 and 9 inclusive\n    const filteredArr = arr.filter(num => num >= 1 && num <= 9);\n\n    // Sort the filtered array\n    const sortedArr = filteredArr.sort((a, b) => a - b);\n\n    // Reverse the sorted array\n    const reversedArr = sortedArr.reverse();\n\n    // Map each integer to its corresponding name\n    const result = reversedArr.map(num => numberToNameMap[num]);\n\n    return result;\n};\n\n// Example usage:\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(by_length([])); // []\nconsole.log(by_length([1, -1, 55])); // [\"One\"]"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    const result: Array<number> = [];\n\n    // Helper function to calculate factorial\n    const factorial = (num: number): number => {\n        let fact = 1;\n        for (let i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    };\n\n    // Helper function to calculate the sum from 1 to num\n    const sumUpTo = (num: number): number => {\n        return (num * (num + 1)) / 2;\n    };\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumUpTo(i));\n        }\n    }\n\n    return result;\n};\n\n// Example usage\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): [number, number] {\n    // Helper function to check if a number is a palindrome\n    const isPalindrome = (num: number): boolean => {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    };\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    // Iterate through numbers from 1 to n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\n// Example usage:\nconsole.log(even_odd_palindrome(3));  // Output: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Output: [4, 6]"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "const count_nums = function (arr: Array<number>): number {\n    function sumOfDigits(num: number): number {\n        const numStr = num.toString();\n        let sum = 0;\n        \n        for (let i = 0; i < numStr.length; i++) {\n            if (i === 0 && numStr[0] === '-') {\n                sum += parseInt(numStr[i] + numStr[i + 1]);\n                i++;\n            } else {\n                sum += parseInt(numStr[i]);\n            }\n        }\n        \n        return sum;\n    }\n\n    let count = 0;\n\n    for (const num of arr) {\n        if (sumOfDigits(num) > 0) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n// Test cases\nconsole.log(count_nums([])); // 0\nconsole.log(count_nums([-1, 11, -11])); // 1\nconsole.log(count_nums([1, 1, 2])); // 3"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean {\n    const n = arr.length;\n    if (n === 0) return true;\n    \n    // The array to be sorted in non-decreasing order\n    let sortedArr = [...arr].sort((a, b) => a - b);\n    \n    // Check if we can obtain the sorted array by any rotation\n    for (let i = 0; i < n; i++) {\n        let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n        if (arraysEqual(rotatedArr, sortedArr)) {\n            return true;\n        }\n    }\n    \n    return false;\n};\n\n// Helper function to check if two arrays are equal\nconst arraysEqual = (a: Array<number>, b: Array<number>): boolean => {\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n};\n\n// Example usage:\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n    // Find number of odd elements in lst1\n    const oddCountInLst1 = lst1.filter(num => num % 2 !== 0).length;\n    \n    // Find number of even elements in lst2\n    const evenCountInLst2 = lst2.filter(num => num % 2 === 0).length;\n    \n    // Check if we can replace all odd elements in lst1 with even elements from lst2\n    return evenCountInLst2 >= oddCountInLst1 ? \"YES\" : \"NO\";\n};\n\n// Example usages:\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "const histogram = function (test: string): Map<string, number> {\n    const counts: Map<string, number> = new Map();\n\n    if (test.trim().length === 0) {\n        return counts; // Return an empty map for empty or whitespace-only string\n    }\n\n    // Split the input string by spaces to get individual letters\n    const letters = test.split(' ');\n\n    // Count the occurrences of each letter\n    for (const letter of letters) {\n        if (counts.has(letter)) {\n            counts.set(letter, counts.get(letter)! + 1);\n        } else {\n            counts.set(letter, 1);\n        }\n    }\n\n    // Determine the maximum count\n    let maxCount = 0;\n    for (const count of counts.values()) {\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n\n    // Collect letters with the maximum count\n    const result: Map<string, number> = new Map();\n    for (const [letter, count] of counts.entries()) {\n        if (count === maxCount) {\n            result.set(letter, count);\n        }\n    }\n\n    return result;\n};\n\n// Examples\nconsole.log(histogram('a b c')); // Map { 'a' => 1, 'b' => 1, 'c' => 1 }\nconsole.log(histogram('a b b a')); // Map { 'a' => 2, 'b' => 2 }\nconsole.log(histogram('a b c a b')); // Map { 'a' => 2, 'b' => 2 }\nconsole.log(histogram('b b b b a')); // Map { 'b' => 4 }\nconsole.log(histogram('')); // Map {}"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): [string, boolean] {\n    // Step 1: Remove characters from 's' that are present in 'c'\n    const charSet = new Set(c);\n    let result = '';\n    for (let char of s) {\n        if (!charSet.has(char)) {\n            result += char;\n        }\n    }\n\n    // Step 2: Check if the resulting string is a palindrome\n    const isPalindrome = (str: string): boolean => {\n        const len = str.length;\n        for (let i = 0; i < len / 2; i++) {\n            if (str[i] !== str[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Step 3: Return the result and whether it's a palindrome\n    return [result, isPalindrome(result)];\n};\n\n// Example usage:\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // Output: ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const odd_count = function (lst: Array<string>): Array<string> {\n    // Helper function to count odd digits in a string\n    const countOddDigits = (str: string): number => {\n        let count = 0;\n        for (let char of str) {\n            const digit = parseInt(char);\n            if (digit % 2 !== 0) {\n                count++;\n            }\n        }\n        return count;\n    };\n\n    return lst.map((str) => {\n        const oddCount = countOddDigits(str);\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n};\n\n// Test cases\nconsole.log(odd_count(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(odd_count(['3', '11111111'])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "const minSubArraySum = function (nums: Array<number>): number {\n    if (nums.length === 0) throw new Error(\"Array must not be empty\");\n    \n    let minEndingHere = nums[0];\n    let minSoFar = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        minEndingHere = Math.min(nums[i], minEndingHere + nums[i]);\n        minSoFar = Math.min(minSoFar, minEndingHere);\n    }\n    \n    return minSoFar;\n}\n\n// Test examples\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1\nconsole.log(minSubArraySum([-1, -2, -3])); // Output: -6"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "function max_fill(grid: Array<Array<number>>, capacity: number): number {\n    // Calculate the total amount of water units in the grid\n    let totalWaterUnits = 0;\n    for (let row of grid) {\n        for (let unit of row) {\n            if (unit === 1) {\n                totalWaterUnits++;\n            }\n        }\n    }\n\n    // Calculate the number of times the bucket needs to be lowered\n    const bucketOperations = Math.ceil(totalWaterUnits / capacity);\n\n    return bucketOperations;\n}\n\n// Example usage:\nconst grid1 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst bucket_capacity1 = 1;\nconsole.log(max_fill(grid1, bucket_capacity1)); // Output: 6\n\nconst grid2 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nconst bucket_capacity2 = 2;\nconsole.log(max_fill(grid2, bucket_capacity2)); // Output: 5\n\nconst grid3 = [[0, 0, 0], [0, 0, 0]];\nconst bucket_capacity3 = 5;\nconsole.log(max_fill(grid3, bucket_capacity3)); // Output: 0"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "const sort_array = function (arr: Array<number>): Array<number> {\n    // Helper function to count the number of ones in the binary representation of a number\n    const countOnes = (num: number): number => {\n        return num.toString(2).split('1').length - 1;\n    };\n\n    // Sort the array based on the number of ones in binary representation and then by decimal value\n    return arr.sort((a, b) => {\n        const onesA = countOnes(a);\n        const onesB = countOnes(b);\n\n        // If the number of ones are different, sort by the number of ones\n        if (onesA !== onesB) {\n            return onesA - onesB;\n        }\n\n        // If the number of ones are the same, sort by the decimal value\n        return a - b;\n    });\n};\n\n// Test cases\nconsole.log(sort_array([1, 5, 2, 3, 4])); // [1, 2, 3, 4, 5]\nconsole.log(sort_array([-2, -3, -4, -5, -6])); // [-6, -5, -4, -3, -2]\nconsole.log(sort_array([1, 0, 2, 3, 4])); // [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "const select_words = function (s: string, n: number): Array<string> {\n  // Helper function to count consonants in a word\n  const countConsonants = (word: string): number => {\n    // Define vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    // Count consonants\n    let consonantCount = 0;\n    for (const char of word) {\n      if (!vowels.has(char) && /[a-zA-Z]/.test(char)) {\n        consonantCount++;\n      }\n    }\n    return consonantCount;\n  };\n\n  // Split the string into words\n  const words = s.split(\" \");\n  \n  // Filter words that have exactly n consonants\n  const result = words.filter(word => countConsonants(word) === n);\n  \n  return result;\n};\n\n// Example usage:\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const get_closest_vowel = function (word: string): string {\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    const isVowel = (char: string): boolean => vowels.has(char);\n    const isConsonant = (char: string): boolean => !isVowel(char) && /[a-zA-Z]/.test(char);\n\n    for (let i = word.length - 2; i > 0; i--) {\n        if (isVowel(word[i]) && isConsonant(word[i - 1]) && isConsonant(word[i + 1])) {\n            return word[i];\n        }\n    }\n    \n    return \"\";\n};\n\n// Test cases\nconsole.log(get_closest_vowel(\"yogurt\")); // ==> \"u\"\nconsole.log(get_closest_vowel(\"FULL\")); // ==> \"U\"\nconsole.log(get_closest_vowel(\"quick\")); // ==> \"\"\nconsole.log(get_closest_vowel(\"ab\")); // ==> \"\""}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "const isBalanced = (s: string): boolean => {\n    let balance = 0;\n    for (const char of s) {\n        if (char === '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false; // More closing parens than opening at some point\n        }\n    }\n    return balance === 0; // Check if all parens are matched\n};\n\nconst match_parens = function (lst: Array<string>): string {\n    const [s1, s2] = lst;\n    if (isBalanced(s1 + s2) || isBalanced(s2 + s1)) {\n        return 'Yes';\n    }\n    return 'No';\n};\n\n// Examples\nconsole.log(match_parens(['()(', ')'])); // 'Yes'\nconsole.log(match_parens([')', ')']));   // 'No'"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    if (k === 0) return [];\n    // Sort the array in descending order\n    let sortedArray = arr.sort((a, b) => b - a);\n    // Extract the first k elements\n    let result = sortedArray.slice(0, k);\n    // Sort the result in ascending order\n    return result.sort((a, b) => a - b);\n};\n\n// Example usages:\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2));  // Output: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "const solution = function(lst: Array<number>): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) { // Loop through even indices\n        if (lst[i] % 2 !== 0) { // Check if the element at the current even index is odd\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n// Test cases\nconsole.log(solution([5, 8, 7, 1])); // Output: 12\nconsole.log(solution([3, 3, 3, 3, 3])); // Output: 9\nconsole.log(solution([30, 13, 24, 321])); // Output: 0"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    // Step 1: Slice the first k elements\n    const firstKElements = arr.slice(0, k);\n\n    // Step 2: Filter elements with at most two digits\n    const filteredElements = firstKElements.filter(num => num >= -99 && num <= 99);\n\n    // Step 3: Sum the filtered elements\n    const sum = filteredElements.reduce((acc, curr) => acc + curr, 0);\n\n    return sum;\n};\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(add_elements(arr, k)); // Output: 24"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "const get_odd_collatz = function (n: number) : Array<number> {\n    // Helper function to generate the Collatz sequence\n    const generateCollatzSequence = (n: number): Array<number> => {\n        const sequence: Array<number> = [];\n        while (n !== 1) {\n            sequence.push(n);\n            if (n % 2 === 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        sequence.push(1); // Add the last element 1\n        return sequence;\n    };\n\n    // Generate the Collatz sequence for the given number\n    const collatzSequence = generateCollatzSequence(n);\n\n    // Filter the sequence to get only the odd numbers\n    const oddNumbers = collatzSequence.filter(num => num % 2 !== 0);\n\n    // Sort the odd numbers in increasing order\n    oddNumbers.sort((a, b) => a - b);\n\n    return oddNumbers;\n};\n\n// Example usage:\nconsole.log(get_odd_collatz(5)); // Output: [1, 5]\nconsole.log(get_odd_collatz(6)); // Output: [1, 3]"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "const valid_date = function (date: string): boolean {\n    // Check if the date string is empty\n    if (!date) {\n        return false;\n    }\n\n    // Check if the date string matches the format mm-dd-yyyy\n    const dateRegex = /^\\d{2}-\\d{2}-\\d{4}$/;\n    if (!dateRegex.test(date)) {\n        return false;\n    }\n\n    // Split the date string into month, day, and year\n    const [monthStr, dayStr, yearStr] = date.split('-');\n    const month = parseInt(monthStr, 10);\n    const day = parseInt(dayStr, 10);\n    const year = parseInt(yearStr, 10);\n\n    // Check if month is between 1 and 12\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check the day based on the month\n    const daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (day < 1 || day > daysInMonth[month - 1]) {\n        return false;\n    }\n\n    // Check if February has 29 days only if it is a leap year\n    if (month === 2 && day === 29) {\n        if (!(year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0))) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(valid_date('03-11-2000')); // True\nconsole.log(valid_date('15-01-2012')); // False\nconsole.log(valid_date('04-0-2040'));  // False\nconsole.log(valid_date('06-04-2020')); // True\nconsole.log(valid_date('06/04/2020')); // False"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "const split_words = function (txt: string): string[] | number {\n    // Check if there are any whitespace characters in the string\n    if (/\\s/.test(txt)) {\n        return txt.split(/\\s+/);\n    }\n    \n    // Check if there are any commas in the string\n    if (txt.includes(',')) {\n        return txt.split(',');\n    }\n\n    // Calculate the number of lowercase letters with odd order in the alphabet\n    let oddCount = 0;\n    for (let char of txt) {\n        if (char >= 'a' && char <= 'z') {\n            let order = char.charCodeAt(0) - 'a'.charCodeAt(0);\n            if (order % 2 === 1) {\n                oddCount++;\n            }\n        }\n    }\n\n    return oddCount;\n}\n\n// Example usages\nconsole.log(split_words(\"Hello world!\")); // \u279e [\"Hello\", \"world!\"]\nconsole.log(split_words(\"Hello,world!\")); // \u279e [\"Hello\", \"world!\"]\nconsole.log(split_words(\"abcdef\"));       // \u279e 3"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "const is_sorted = function(lst: Array<number>): boolean {\n    if (lst.length <= 1) {\n        return true;\n    }\n\n    let duplicatesCount: { [key: number]: number } = {};\n\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (duplicatesCount[lst[i]]) {\n            duplicatesCount[lst[i]]++;\n        } else {\n            duplicatesCount[lst[i]] = 1;\n        }\n        if (duplicatesCount[lst[i]] > 1) {\n            return false;\n        }\n    }\n\n    // Check the last element for duplicates\n    let lastElement = lst[lst.length - 1];\n    if (duplicatesCount[lastElement]) {\n        duplicatesCount[lastElement]++;\n    } else {\n        duplicatesCount[lastElement] = 1;\n    }\n    if (duplicatesCount[lastElement] > 1) {\n        return false;\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(is_sorted([5])); // \u279e True\nconsole.log(is_sorted([1, 2, 3, 4, 5])); // \u279e True\nconsole.log(is_sorted([1, 3, 2, 4, 5])); // \u279e False\nconsole.log(is_sorted([1, 2, 3, 4, 5, 6])); // \u279e True\nconsole.log(is_sorted([1, 2, 2, 3, 3, 4])); // \u279e True\nconsole.log(is_sorted([1, 2, 2, 2, 3, 4])); // \u279e False\nconsole.log(is_sorted([1, 3, 2, 4, 5, 6, 7])); // \u279e False"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "const intersection = function (interval1: Array<number>, interval2: Array<number>): string {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n\n    // Determine the intersection interval\n    const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    // If there's no intersection\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    const length = end - start + 1;\n\n    // Check if the length is a prime number\n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n};\n\n// Test cases\nconsole.log(intersection([1, 2], [2, 3]));   // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4]));  // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "const prod_signs = function (arr: Array<number>) : any  {\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let sumOfMagnitudes = 0;\n    let productOfSigns = 1;\n\n    for (let num of arr) {\n        sumOfMagnitudes += Math.abs(num);\n        productOfSigns *= Math.sign(num);\n    }\n\n    return sumOfMagnitudes * productOfSigns;\n}\n\n// Examples for testing\nconsole.log(prod_signs([1, 2, 2, -4])); // -9\nconsole.log(prod_signs([0, 1])); // 0\nconsole.log(prod_signs([])); // null"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "const minPath = function (grid: number[][], k: number): number[] {\n    const N = grid.length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]; // right, down, left, up\n\n    // Priority queue with initial paths\n    let pq: Array<[number[], number, number]> = [];\n\n    // Initialize the priority queue with all starting points\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            pq.push([[grid[i][j]], i, j]);\n        }\n    }\n\n    // Custom comparator for lexicographical order\n    pq.sort((a, b) => {\n        for (let i = 0; i < Math.min(a[0].length, b[0].length); i++) {\n            if (a[0][i] !== b[0][i]) {\n                return a[0][i] - b[0][i];\n            }\n        }\n        return a[0].length - b[0].length;\n    });\n\n    while (pq.length > 0) {\n        const [path, x, y] = pq.shift()!;\n        \n        if (path.length === k) {\n            return path;\n        }\n\n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            \n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                const newPath = path.concat(grid[nx][ny]);\n                pq.push([newPath, nx, ny]);\n            }\n        }\n\n        // Re-sort the priority queue to maintain lexicographical order\n        pq.sort((a, b) => {\n            for (let i = 0; i < Math.min(a[0].length, b[0].length); i++) {\n                if (a[0][i] !== b[0][i]) {\n                    return a[0][i] - b[0][i];\n                }\n            }\n            return a[0].length - b[0].length;\n        });\n    }\n\n    // If no path of length k is found (shouldn't happen given problem constraints)\n    return [];\n};\n\n// Example usage:\nconst grid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst k1 = 3;\nconsole.log(minPath(grid1, k1)); // Output: [1, 2, 1]\n\nconst grid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]];\nconst k2 = 1;\nconsole.log(minPath(grid2, k2)); // Output: [1]"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n    // Create an array to hold the Tribonacci sequence\n    const sequence: number[] = new Array(n + 1).fill(0);\n    \n    // Define the base case\n    if (n >= 1) {\n        sequence[1] = 3;\n    }\n\n    // Fill the sequence up to n using the recurrence relations\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            sequence[i] = 1 + i / 2;\n        } else {\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n        }\n    }\n\n    // Handle edge case for n = 0\n    sequence[0] = 1; // As per the example tri(3) = [1, 3, 2, 8], tri(0) should be 1\n\n    return sequence;\n};\n\n// Example usage:\nconsole.log(tri(3)); // [1, 3, 2, 8]"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "const digits = function (n: number) : number  {\n    // Convert the number to a string to easily access each digit\n    const digitsStr = n.toString();\n    let product = 1;\n    let hasOdd = false;\n\n    for (const char of digitsStr) {\n        const digit = parseInt(char, 10);\n        if (digit % 2 !== 0) { // Check if the digit is odd\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n\n    // If no odd digit was found, return 0\n    return hasOdd ? product : 0;\n};\n\n// Examples:\nconsole.log(digits(1));   // 1\nconsole.log(digits(4));   // 0\nconsole.log(digits(235)); // 15"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n    // Stack to keep track of open brackets\n    let stack: number[] = [];\n    \n    // Iterate over each character in the string\n    for (let i = 0; i < string0.length; i++) {\n        let char = string0[i];\n        \n        if (char === '[') {\n            // Push the index of the open bracket onto the stack\n            stack.push(i);\n        } else if (char === ']') {\n            // Check if there's a corresponding opening bracket\n            if (stack.length > 0) {\n                // Pop the top of the stack which gives us the last unmatched '['\n                let openIndex = stack.pop();\n\n                // Check if there's any unmatched '[' before the current one\n                if (stack.length > 0) {\n                    // Nested structure found\n                    return true;\n                }\n            }\n        }\n    }\n    \n    // If we complete the loop without finding nested brackets, return false\n    return false;\n};\n\n// Test cases\nconsole.log(is_nested('[[]]')); // \u279e True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(is_nested('[][]')); // \u279e False\nconsole.log(is_nested('[]')); // \u279e False\nconsole.log(is_nested('[[][]]')); // \u279e True\nconsole.log(is_nested('[[]][[')); // \u279e True"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n    // Step 1: Round each element to the nearest upper integer\n    const roundedNumbers = lst.map(num => Math.ceil(num));\n    \n    // Step 2: Square each of the rounded numbers\n    const squaredNumbers = roundedNumbers.map(num => num * num);\n    \n    // Step 3: Sum all the squared numbers\n    const sumOfSquares = squaredNumbers.reduce((acc, curr) => acc + curr, 0);\n    \n    return sumOfSquares;\n}\n\n// Test cases\nconsole.log(sum_squares([1, 2, 3])); // Output: 14\nconsole.log(sum_squares([1, 4, 9])); // Output: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Output: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Output: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Output: 6"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = (txt: string): boolean => {\n    // Trim the input string to remove any trailing spaces\n    txt = txt.trim();\n    \n    // Check if the string is empty after trimming\n    if (txt.length === 0) {\n        return false;\n    }\n\n    // Get the last character\n    const lastChar = txt[txt.length - 1];\n\n    // Check if the last character is a letter\n    const isLetter = /^[a-zA-Z]$/.test(lastChar);\n    \n    if (!isLetter) {\n        return false;\n    }\n\n    // Check if the last character is part of a word\n    // If the string has more than one character, check the character before the last one\n    if (txt.length > 1) {\n        const secondLastChar = txt[txt.length - 2];\n        if (secondLastChar !== ' ') {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Test cases\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n// Test cases\nconsole.log(can_arrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(can_arrange([1, 2, 3]));       // Output: -1\nconsole.log(can_arrange([5, 4, 3, 2, 1])); // Output: 4\nconsole.log(can_arrange([2, 3, 0]));       // Output: 2\nconsole.log(can_arrange([1]));             // Output: -1"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "function largest_smallest_integers(lst: number[]): [number | null, number | null] {\n    let largestNegative: number | null = null;\n    let smallestPositive: number | null = null;\n\n    for (const num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n\n// Examples:\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largest_smallest_integers([])); // [null, null]\nconsole.log(largest_smallest_integers([0])); // [null, null]\nconsole.log(largest_smallest_integers([-1, -2, -3, 2, 3, 4])); // [-1, 2]\nconsole.log(largest_smallest_integers([-5, -10, 10, 20, 30])); // [-5, 10]"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "function compare_one(a: any, b: any): any {\n  // Helper function to convert a string to a number\n  const strToNumber = (str: string): number => {\n    // Replace ',' with '.' to handle comma as decimal separator\n    return parseFloat(str.replace(',', '.'));\n  };\n\n  // Convert input to a number if it's a string\n  const convertToNumber = (input: any): number => {\n    if (typeof input === 'string') {\n      return strToNumber(input);\n    } else {\n      return input;\n    }\n  };\n\n  // Convert inputs to numbers for comparison\n  const numA = convertToNumber(a);\n  const numB = convertToNumber(b);\n\n  // Compare the numerical values\n  if (numA > numB) {\n    return a;\n  } else if (numB > numA) {\n    return b;\n  } else {\n    return null; // Using null instead of None to adhere to TypeScript conventions\n  }\n}\n\n// Examples\nconsole.log(compare_one(1, 2.5)); // \u279e 2.5\nconsole.log(compare_one(1, \"2,3\")); // \u279e \"2,3\"\nconsole.log(compare_one(\"5,1\", \"6\")); // \u279e \"6\"\nconsole.log(compare_one(\"1\", 1)); // \u279e null"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "const is_equal_to_sum_even = function (n: number): boolean {\n    // Check if n is at least 8 and is an even number\n    return n >= 8 && n % 2 === 0;\n};\n\n// Test cases\nconsole.log(is_equal_to_sum_even(4)); // False\nconsole.log(is_equal_to_sum_even(6)); // False\nconsole.log(is_equal_to_sum_even(8)); // True\nconsole.log(is_equal_to_sum_even(10)); // True\nconsole.log(is_equal_to_sum_even(12)); // True\nconsole.log(is_equal_to_sum_even(14)); // True"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "/**\n * Helper function to compute the factorial of a given number.\n * @param num - The number to compute the factorial for.\n * @return The factorial of the given number.\n */\nconst factorial = (num: number): number => {\n    if (num === 0 || num === 1) return 1;\n    let result = 1;\n    for (let i = 2; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n};\n\n/**\n * Computes the Brazilian factorial (special factorial) of a given number.\n * @param n - The number to compute the Brazilian factorial for.\n * @return The Brazilian factorial of the given number.\n */\nconst special_factorial = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input must be a positive integer\");\n    }\n    \n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n};\n\n// Example usage:\nconsole.log(special_factorial(4)); // Output: 288"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "const fix_spaces = function (text: string): string {\n    // Replace all spaces with underscores\n    let result = text.replace(/ /g, '_');\n    \n    // Replace sequences of three or more underscores with a dash\n    result = result.replace(/_{3,}/g, '-');\n    \n    return result;\n};\n\n// Test cases\nconsole.log(fix_spaces(\"Example\")); // \"Example\"\nconsole.log(fix_spaces(\"Example 1\")); // \"Example_1\"\nconsole.log(fix_spaces(\" Example 2\")); // \"_Example_2\"\nconsole.log(fix_spaces(\" Example   3\")); // \"_Example-3\""}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "const file_name_check = function (file_name: string): string {\n    // Check for exactly one dot in the file name\n    const dotIndex = file_name.indexOf('.');\n    if (dotIndex === -1 || dotIndex !== file_name.lastIndexOf('.')) {\n        return 'No';\n    }\n\n    // Split the file name into the base name and the extension\n    const baseName = file_name.substring(0, dotIndex);\n    const extension = file_name.substring(dotIndex + 1);\n\n    // Check if the base name is not empty and starts with a letter\n    if (baseName.length === 0 || !/^[a-zA-Z]/.test(baseName)) {\n        return 'No';\n    }\n\n    // Check if the extension is one of the allowed extensions\n    const allowedExtensions = ['txt', 'exe', 'dll'];\n    if (!allowedExtensions.includes(extension)) {\n        return 'No';\n    }\n\n    // Count the number of digits in the file name\n    const digitCount = (file_name.match(/\\d/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n\n    // If all checks pass, the file name is valid\n    return 'Yes';\n};\n\n// Examples\nconsole.log(file_name_check(\"example.txt\")); // => 'Yes'\nconsole.log(file_name_check(\"1example.dll\")); // => 'No'\nconsole.log(file_name_check(\"example1234.txt\")); // => 'No'\nconsole.log(file_name_check(\"e..ample.txt\")); // => 'No'\nconsole.log(file_name_check(\"example\")); // => 'No'\nconsole.log(file_name_check(\"example.txte\")); // => 'No'\nconsole.log(file_name_check(\"example.exe\")); // => 'Yes'\nconsole.log(file_name_check(\"test123.dll\")); // => 'Yes'\nconsole.log(file_name_check(\"test1234.dll\")); // => 'No'"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n    return lst.reduce((acc, num) => acc + num * num, 0);\n};\n\n// Example usage:\nconst numbers = [1, 2, 3, 4];\nconsole.log(sum_squares(numbers));  // Output: 30"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nconst words_in_sentence = function(sentence: string): string {\n    const words = sentence.split(' ');\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n    return primeLengthWords.join(' ');\n};\n\n// Test cases\nconsole.log(words_in_sentence(\"This is a test\")); // Output: \"is\"\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "const simplify = function (x: string, n: string): boolean {\n    // Helper function to parse fraction from string\n    const parseFraction = (fraction: string): [number, number] => {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return [numerator, denominator];\n    };\n\n    // Parse the fractions x and n\n    const [xNumerator, xDenominator] = parseFraction(x);\n    const [nNumerator, nDenominator] = parseFraction(n);\n\n    // Calculate the product of the fractions\n    const productNumerator = xNumerator * nNumerator;\n    const productDenominator = xDenominator * nDenominator;\n\n    // Check if the product is a whole number\n    return productNumerator % productDenominator === 0;\n};\n\n// Example usage\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    // Helper function to calculate the sum of digits of a number\n    const sumOfDigits = (num: number): number => {\n        return Math.abs(num).toString().split('').reduce((sum, digit) => sum + Number(digit), 0);\n    };\n\n    // Create an array of objects containing the original number, its index, and its digit sum\n    const numsWithDigitSum = nums.map((num, index) => ({\n        num,\n        index,\n        digitSum: sumOfDigits(num),\n    }));\n\n    // Sort the array based on the digit sum and original index\n    numsWithDigitSum.sort((a, b) => {\n        if (a.digitSum === b.digitSum) {\n            return a.index - b.index; // Preserve original order if digit sums are the same\n        }\n        return a.digitSum - b.digitSum; // Sort by digit sum\n    });\n\n    // Extract the sorted numbers from the array of objects\n    return numsWithDigitSum.map(item => item.num);\n};\n\n// Example usage\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // Output: []"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    const isOddDigit = (digit: number): boolean => {\n        return [1, 3, 5, 7, 9].includes(digit);\n    };\n\n    const getFirstDigit = (num: number): number => {\n        num = Math.abs(num);\n        while (num >= 10) {\n            num = Math.floor(num / 10);\n        }\n        return num;\n    };\n\n    const getLastDigit = (num: number): number => {\n        return Math.abs(num % 10);\n    };\n\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10) {\n            const firstDigit = getFirstDigit(num);\n            const lastDigit = getLastDigit(num);\n            if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};\n\n// Examples\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "const get_max_triples = function(n: number): number {\n    // Step 1: Generate the array `a`\n    const a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    \n    // Step 2 & 3: Identify and Count Valid Triples\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n};\n\n// Example Usage:\nconst n = 5;\nconsole.log(get_max_triples(n));  // Output: 1"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Find the indices of the planets\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // Check if both planets are valid\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Determine the start and end indices for the range\n    const start = Math.min(index1, index2) + 1;\n    const end = Math.max(index1, index2);\n    \n    // Extract and return the range of planets\n    return planets.slice(start, end);\n};\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf(\"Pluto\", \"Uranus\")); // []"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "function sorted_list_sum(lst: Array<string>): Array<string> {\n    // Filter out strings with odd lengths\n    const evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n\n    // Sort the filtered list first by length, then alphabetically\n    evenLengthStrings.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n\n    return evenLengthStrings;\n}\n\n// Example Usage and Assertions\nconsole.assert(JSON.stringify(sorted_list_sum([\"aa\", \"a\", \"aaa\"])) === JSON.stringify([\"aa\"]));\nconsole.assert(JSON.stringify(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])) === JSON.stringify([\"ab\", \"cd\"]));"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst x_or_y = function (n: number, x: number, y: number): number {\n    return isPrime(n) ? x : y;\n};\n\n// Examples:\nconsole.log(x_or_y(7, 34, 12)); // should return 34\nconsole.log(x_or_y(15, 8, 5));  // should return 5"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n  return lst\n    .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0) // Step 1 and 2: Filter positive odd integers\n    .reduce((sum, num) => sum + num * num, 0); // Step 3 and 4: Sum of squares\n};\n\n// Test cases\nconsole.log(double_the_difference([1, 3, 2, 0]));  // Output: 10\nconsole.log(double_the_difference([-1, -2, 0]));  // Output: 0\nconsole.log(double_the_difference([9, -2]));      // Output: 81\nconsole.log(double_the_difference([0]));          // Output: 0\nconsole.log(double_the_difference([]));           // Output: 0"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "const compare = function (game: Array<number>, guess: Array<number>): Array<number> {\n    return game.map((score, index) => {\n        const guessedScore = guess[index];\n        return Math.abs(score - guessedScore);\n    });\n};\n\n// Example usage:\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])); // [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])); // [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        let cap = 0;\n        let sm = 0;\n\n        for (const char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                cap++;\n            } else if (char >= 'a' && char <= 'z') {\n                sm++;\n            }\n        }\n\n        const strength = cap - sm;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    });\n\n    return `${class_name}.${strongestExtension}`;\n};\n\n// Example usage:\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Should output 'Slices.SErviNGSliCes'\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // Should output 'my_class.AA'"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const getRotations = (str: string): string[] => {\n    const rotations: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        rotations.push(str.slice(i) + str.slice(0, i));\n    }\n    return rotations;\n};\n\nconst cycpattern_check = function (a: string, b: string): boolean {\n    const rotations = getRotations(b);\n    for (const rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n    return false;\n};\n\n// Test cases:\nconsole.log(cycpattern_check(\"abcd\", \"abd\"));      // False\nconsole.log(cycpattern_check(\"hello\", \"ell\"));     // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\"));  // False\nconsole.log(cycpattern_check(\"abab\", \"baa\"));      // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\"));     // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "const even_odd_count = function (num: number): [number, number] {\n    // Convert the number to its absolute value\n    const absoluteNum = Math.abs(num);\n    \n    // Convert the number to a string to iterate over each digit\n    const numStr = absoluteNum.toString();\n    \n    // Initialize counters for even and odd digits\n    let evenCount = 0;\n    let oddCount = 0;\n    \n    // Iterate through each digit in the string\n    for (let char of numStr) {\n        const digit = parseInt(char, 10);\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    // Return the counts as a tuple\n    return [evenCount, oddCount];\n}\n\n// Example usage:\nconsole.log(even_odd_count(-12)); // Output: [1, 1]\nconsole.log(even_odd_count(123)); // Output: [1, 2]"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "const int_to_mini_roman = function (number: number): string {\n    // Define the mapping of integers to Roman numeral symbols\n    const romanNumerals: { [key: number]: string } = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', \n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', \n        5: 'v', 4: 'iv', 1: 'i'\n    };\n\n    let result = '';\n    let remaining = number;\n\n    // Iterate through the keys in descending order\n    const values = Object.keys(romanNumerals).map(Number).sort((a, b) => b - a);\n\n    for (const value of values) {\n        while (remaining >= value) {\n            result += romanNumerals[value];\n            remaining -= value;\n        }\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(int_to_mini_roman(19)); // Output: 'xix'\nconsole.log(int_to_mini_roman(152)); // Output: 'clii'\nconsole.log(int_to_mini_roman(426)); // Output: 'cdxxvi'\nconsole.log(int_to_mini_roman(1000)); // Output: 'm'"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // Find the longest side\n    const sides = [a, b, c];\n    sides.sort((x, y) => y - x); // descending order\n    \n    const [longest, side1, side2] = sides;\n    \n    // Check the Pythagorean theorem\n    return longest * longest === side1 * side1 + side2 * side2;\n};\n\n// Example usage:\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False\nconsole.log(right_angle_triangle(5, 12, 13)); // True\nconsole.log(right_angle_triangle(7, 24, 25)); // True\nconsole.log(right_angle_triangle(7, 24, 26)); // False"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "const find_max = function (words: Array<string>): string {\n    let maxUniqueCount = 0;\n    let resultWord = '';\n\n    for (const word of words) {\n        // Create a Set of characters which automatically filters out duplicates\n        const uniqueChars = new Set(word);\n        const uniqueCount = uniqueChars.size;\n        \n        // Check if the current word has more unique characters\n        // or if it has the same number of unique characters but comes first lexicographically\n        if (\n            uniqueCount > maxUniqueCount ||\n            (uniqueCount === maxUniqueCount && word < resultWord)\n        ) {\n            maxUniqueCount = uniqueCount;\n            resultWord = word;\n        }\n    }\n\n    return resultWord;\n};\n\n// Test cases\nconsole.log(find_max([\"name\", \"of\", \"string\"])); // Output: \"string\"\nconsole.log(find_max([\"name\", \"enam\", \"game\"])); // Output: \"enam\"\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"])); // Output: \"aaaaaaa\""}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "const eat = function (number0: number, need: number, remaining: number): Array<number> {\n    const totalEaten = number0 + Math.min(need, remaining);\n    const carrotsLeft = Math.max(remaining - need, 0);\n    \n    return [totalEaten, carrotsLeft];\n}\n\n// Test cases\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 9)); // [12, 1]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "const do_algebra = function (operator: Array<string>, operand: Array<number>): number {\n    // Input validation\n    if (operator.length !== operand.length - 1) {\n        throw new Error(\"The length of the operator list must be equal to the length of the operand list minus one.\");\n    }\n\n    // Construct the expression string\n    let expression = operand[0].toString();\n    for (let i = 0; i < operator.length; i++) {\n        expression += ` ${operator[i]} ${operand[i + 1]}`;\n    }\n\n    // Replace floor division (//) with Math.floor equivalent in JavaScript\n    expression = expression.replace(/\\/\\//g, '/');\n\n    // Evaluate the expression\n    const result = eval(expression);\n\n    // Return the result\n    return Math.floor(result);\n};\n\n// Example usage:\nconst operator = ['+', '*', '-'];\nconst operand = [2, 3, 4, 5];\nconsole.log(do_algebra(operator, operand));  // Output: 9"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "const solve = function (s: string): string {\n    let hasLetter = false;\n    let result = '';\n\n    // Iterate through the string and process each character\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (/[a-zA-Z]/.test(char)) {\n            hasLetter = true;\n            // Reverse the case of the letter\n            if (char === char.toLowerCase()) {\n                result += char.toUpperCase();\n            } else {\n                result += char.toLowerCase();\n            }\n        } else {\n            // Keep non-letters as they are\n            result += char;\n        }\n    }\n\n    // If the string contains no letters, reverse the entire string\n    if (!hasLetter) {\n        result = result.split('').reverse().join('');\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(solve(\"1234\"));  // Output: \"4321\"\nconsole.log(solve(\"ab\"));    // Output: \"AB\"\nconsole.log(solve(\"#a@C\"));  // Output: \"#A@c\""}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "import * as crypto from 'crypto';\n\nconst string_to_md5 = function (text: string): string | null {\n    if (text === '') {\n        return null;\n    }\n    \n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n\n// Example usage\nconsole.log(string_to_md5('Hello world')); // Output: '3e25960a79dbc69b674cd4ec67a72c62'\nconsole.log(string_to_md5(''));            // Output: null"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n    // Determine the lower and upper bounds\n    const lower = Math.min(a, b);\n    const upper = Math.max(a, b);\n    \n    // Initialize an array to hold the even numbers\n    const evenNumbers: number[] = [];\n    \n    // Iterate from the lower bound to the upper bound\n    for (let i = lower; i <= upper; i++) {\n        // Check if the number is even\n        if (i % 2 === 0) {\n            // Add the even number to the array\n            evenNumbers.push(i);\n        }\n    }\n    \n    // Return the array of even numbers\n    return evenNumbers;\n};\n\n// Example usage:\nconsole.log(generate_integers(2, 8)); // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2)); // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // Output: []"}

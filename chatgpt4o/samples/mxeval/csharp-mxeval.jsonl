{"task_id": "HumanEval_csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Check if in given list of numbers, are any two numbers closer to each other than\n        /// given threshold.\n        /// >>> HasCloseElements([1.0, 2.0, 3.0], 0.5)\n        /// False\n        /// >>> HasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        /// True\n        /// \n        /// </summary>\n        public static bool HasCloseElements(List<double> numbers, double threshold)\n        {\n            // Sort the list of numbers\n            numbers.Sort();\n            \n            // Iterate through the sorted list and check if any two adjacent numbers are closer than the threshold\n            for (int i = 0; i < numbers.Count - 1; i++)\n            {\n                if (Math.Abs(numbers[i] - numbers[i + 1]) < threshold)\n                {\n                    return true;\n                }\n            }\n            \n            // Return false if no such pair is found\n            return false;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(HasCloseElements(new List<double> { 1.0, 2.0, 3.0 }, 0.5)); // False\n            Console.WriteLine(HasCloseElements(new List<double> { 1.0, 2.8, 3.0, 4.0, 5.0, 2.0 }, 0.3)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// You're an expert C# programmer\n        /// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n        /// separate those group into separate strings and return the list of those.\n        /// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n        /// Ignore any spaces in the input string.\n        /// >>> SeparateParenGroups('( ) (( )) (( )( ))')\n        /// ['()', '(())', '(()())']\n        /// </summary>\n        public static List<string> SeparateParenGroups(string paren_string)\n        {\n            // Remove any spaces from the input string\n            paren_string = new string(paren_string.Where(c => !char.IsWhiteSpace(c)).ToArray());\n\n            List<string> result = new List<string>();\n            int balance = 0;\n            int start = 0;\n\n            // Iterate through the string character by character\n            for (int i = 0; i < paren_string.Length; i++)\n            {\n                if (paren_string[i] == '(')\n                {\n                    if (balance == 0)\n                    {\n                        start = i; // Start of a new group\n                    }\n                    balance++;\n                }\n                else if (paren_string[i] == ')')\n                {\n                    balance--;\n                    if (balance == 0)\n                    {\n                        // End of a balanced group\n                        result.Add(paren_string.Substring(start, i - start + 1));\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test the function with the given example\n            var result = SeparateParenGroups(\"( ) (( )) (( )( ))\");\n            foreach (var group in result)\n            {\n                Console.WriteLine(group);\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/2", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive floating point number, it can be decomposed into\n        /// an integer part (largest integer smaller than given number) and decimals\n        /// (leftover part always smaller than 1).\n        /// \n        /// Return the decimal part of the number.\n        /// >>> TruncateNumber(3.5)\n        /// 0.5\n        /// \n        /// </summary>\n        public static double TruncateNumber(double number)\n        {\n            // Get the integer part of the number\n            double integerPart = Math.Truncate(number);\n            \n            // Subtract the integer part from the original number to get the decimal part\n            double decimalPart = number - integerPart;\n            \n            return decimalPart;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the TruncateNumber method\n            Console.WriteLine(TruncateNumber(3.5)); // Expected output: 0.5\n            Console.WriteLine(TruncateNumber(4.75)); // Expected output: 0.75\n            Console.WriteLine(TruncateNumber(123.456)); // Expected output: 0.456\n            Console.WriteLine(TruncateNumber(0.123)); // Expected output: 0.123\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines if the balance of the account falls below zero at any point.\n        /// </summary>\n        /// <param name=\"operations\">List of deposit and withdrawal operations.</param>\n        /// <returns>True if the balance falls below zero, otherwise False.</returns>\n        public static bool BelowZero(List<int> operations)\n        {\n            int balance = 0;\n            \n            foreach (var operation in operations)\n            {\n                balance += operation;\n                \n                if (balance < 0)\n                {\n                    return true;\n                }\n            }\n            \n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(BelowZero(new List<int> { 1, 2, 3 })); // False\n            Console.WriteLine(BelowZero(new List<int> { 1, 2, -4, 5 })); // True\n            Console.WriteLine(BelowZero(new List<int> { -1, -2, 3 })); // True\n            Console.WriteLine(BelowZero(new List<int> { 0, 0, 0 })); // False\n            Console.WriteLine(BelowZero(new List<int> { 5, -5, 10, -10 })); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/4", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Calculates the Mean Absolute Deviation (MAD) around the mean of a dataset.\n        /// MAD is the average absolute difference between each element and the mean of the dataset.\n        /// </summary>\n        /// <param name=\"numbers\">The list of input numbers.</param>\n        /// <returns>The Mean Absolute Deviation of the input numbers.</returns>\n        public static double MeanAbsoluteDeviation(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count == 0)\n            {\n                throw new ArgumentException(\"The list of numbers must not be null or empty.\");\n            }\n\n            // Calculate the mean of the numbers\n            double mean = numbers.Average();\n\n            // Calculate the absolute differences and their average\n            double mad = numbers.Select(x => Math.Abs(x - mean)).Average();\n\n            return mad;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0 };\n            double mad = MeanAbsoluteDeviation(numbers);\n            Console.WriteLine($\"Mean Absolute Deviation: {mad}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Insert a number 'delimiter' between every two consecutive elements of input list `numbers`.\n        /// </summary>\n        public static List<int> Intersperse(List<int> numbers, int delimiter)\n        {\n            // Initialize a new list to store the result\n            List<int> result = new List<int>();\n\n            // Iterate through the input list\n            for (int i = 0; i < numbers.Count; i++)\n            {\n                // Add the current element to the result list\n                result.Add(numbers[i]);\n\n                // If it's not the last element, add the delimiter\n                if (i < numbers.Count - 1)\n                {\n                    result.Add(delimiter);\n                }\n            }\n\n            // Return the result list\n            return result;\n        }\n\n        // Test the Intersperse method\n        public static void Main(string[] args)\n        {\n            List<int> numbers1 = new List<int> { 1, 2, 3 };\n            int delimiter1 = 4;\n            List<int> result1 = Intersperse(numbers1, delimiter1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 4, 2, 4, 3\n\n            List<int> numbers2 = new List<int> { };\n            int delimiter2 = 4;\n            List<int> result2 = Intersperse(numbers2, delimiter2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: (empty list)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n        /// For each of the group, output the deepest level of nesting of parentheses.\n        /// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n        /// \n        /// >>> ParseNestedParens('(()()) ((())) () ((())()())')\n        /// [2, 3, 1, 3]\n        /// \n        /// </summary>\n        public static List<int> ParseNestedParens(string paren_string)\n        {\n            // Split the input string by spaces\n            string[] groups = paren_string.Split(' ');\n\n            // Initialize a list to hold the results\n            List<int> result = new List<int>();\n\n            // Process each group to determine the deepest level of nesting\n            foreach (string group in groups)\n            {\n                int maxDepth = 0;\n                int currentDepth = 0;\n\n                foreach (char ch in group)\n                {\n                    if (ch == '(')\n                    {\n                        currentDepth++;\n                        if (currentDepth > maxDepth)\n                        {\n                            maxDepth = currentDepth;\n                        }\n                    }\n                    else if (ch == ')')\n                    {\n                        currentDepth--;\n                    }\n                }\n\n                result.Add(maxDepth);\n            }\n\n            return result;\n        }\n\n        // Main method to test the function\n        public static void Main(string[] args)\n        {\n            string input = \"(()()) ((())) () ((())()())\";\n            List<int> output = ParseNestedParens(input);\n            Console.WriteLine(string.Join(\", \", output));  // Output: [2, 3, 1, 3]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/7", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Filters an input list of strings to only include ones that contain the given substring.\n        /// Example:\n        /// >>> FilterBySubstring([], 'a')\n        /// []\n        /// >>> FilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n        /// ['abc', 'bacd', 'array']\n        /// \n        /// </summary>\n        public static List<string> FilterBySubstring(List<string> strings, string substring)\n        {\n            // Using LINQ to filter the list based on whether each string contains the substring\n            return strings.Where(s => s.Contains(substring)).ToList();\n        }\n\n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<string> test1 = new List<string> { \"abc\", \"bacd\", \"cde\", \"array\" };\n            List<string> result1 = FilterBySubstring(test1, \"a\");\n            Console.WriteLine(string.Join(\", \", result1));  // Output: abc, bacd, array\n\n            List<string> test2 = new List<string>();\n            List<string> result2 = FilterBySubstring(test2, \"a\");\n            Console.WriteLine(string.Join(\", \", result2));  // Output: (empty)\n\n            List<string> test3 = new List<string> { \"hello\", \"world\", \"foo\", \"bar\" };\n            List<string> result3 = FilterBySubstring(test3, \"o\");\n            Console.WriteLine(string.Join(\", \", result3));  // Output: hello, world, foo\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        /// Empty sum should be equal to 0 and empty product should be equal to 1.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static (int, int) SumProduct(List<int> numbers)\n        {\n            // Check if the list is empty\n            if (numbers == null || !numbers.Any())\n            {\n                return (0, 1);\n            }\n\n            int sum = numbers.Sum();\n            int product = numbers.Aggregate(1, (acc, val) => acc * val);\n\n            return (sum, product);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = SumProduct(new List<int> { });\n            Console.WriteLine($\"Sum: {result1.Item1}, Product: {result1.Item2}\"); // Output: Sum: 0, Product: 1\n\n            var result2 = SumProduct(new List<int> { 1, 2, 3, 4 });\n            Console.WriteLine($\"Sum: {result2.Item1}, Product: {result2.Item2}\"); // Output: Sum: 10, Product: 24\n\n            var result3 = SumProduct(new List<int> { -1, -2, -3, -4 });\n            Console.WriteLine($\"Sum: {result3.Item1}, Product: {result3.Item2}\"); // Output: Sum: -10, Product: 24\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/9", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// From a given list of integers, generate a list of rolling maximum element found until given moment\n        /// in the sequence.\n        /// >>> RollingMax([1, 2, 3, 2, 3, 4, 2])\n        /// [1, 2, 3, 3, 3, 4, 4]\n        /// \n        /// </summary>\n        public static List<int> RollingMax(List<int> numbers)\n        {\n            List<int> result = new List<int>();\n            int currentMax = int.MinValue;\n\n            foreach (int number in numbers)\n            {\n                if (number > currentMax)\n                {\n                    currentMax = number;\n                }\n                result.Add(currentMax);\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> input = new List<int> { 1, 2, 3, 2, 3, 4, 2 };\n            List<int> rollingMax = RollingMax(input);\n\n            Console.WriteLine(string.Join(\", \", rollingMax)); // Output: 1, 2, 3, 3, 3, 4, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/10", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Find the shortest palindrome that begins with a supplied string.\n        /// Algorithm idea is simple:\n        /// - Find the longest postfix of supplied string that is a palindrome.\n        /// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        /// >>> MakePalindrome('')\n        /// ''\n        /// >>> MakePalindrome('cat')\n        /// 'catac'\n        /// >>> MakePalindrome('cata')\n        /// 'catac'\n        /// \n        /// </summary>\n        public static string MakePalindrome(string string0)\n        {\n            if (string.IsNullOrEmpty(string0))\n            {\n                return string0;\n            }\n\n            int length = string0.Length;\n\n            // Function to check if a string is a palindrome\n            bool IsPalindrome(string s)\n            {\n                int i = 0, j = s.Length - 1;\n                while (i < j)\n                {\n                    if (s[i] != s[j])\n                    {\n                        return false;\n                    }\n                    i++;\n                    j--;\n                }\n                return true;\n            }\n\n            // Find the longest palindromic suffix\n            int longestPalindromicSuffixLength = 0;\n            for (int i = 0; i < length; i++)\n            {\n                if (IsPalindrome(string0.Substring(i)))\n                {\n                    longestPalindromicSuffixLength = length - i;\n                    break;\n                }\n            }\n\n            // The prefix that comes before the palindromic suffix\n            string prefix = string0.Substring(0, length - longestPalindromicSuffixLength);\n\n            // Reverse the prefix and append to the original string\n            char[] prefixArray = prefix.ToCharArray();\n            Array.Reverse(prefixArray);\n            string reversedPrefix = new string(prefixArray);\n\n            return string0 + reversedPrefix;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(MakePalindrome(\"\")); // Output: \"\"\n            Console.WriteLine(MakePalindrome(\"cat\")); // Output: \"catac\"\n            Console.WriteLine(MakePalindrome(\"cata\")); // Output: \"catac\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/11", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Performs binary XOR on two input strings consisting only of '1's and '0's and returns the result as a string.\n        /// </summary>\n        /// <param name=\"a\">First binary string.</param>\n        /// <param name=\"b\">Second binary string.</param>\n        /// <returns>Result of XOR operation as a binary string.</returns>\n        public static string StringXor(string a, string b)\n        {\n            // Check if both strings are of the same length\n            if (a.Length != b.Length)\n            {\n                throw new ArgumentException(\"Input strings must be of the same length.\");\n            }\n\n            // Initialize a StringBuilder to store the result\n            var result = new System.Text.StringBuilder();\n\n            // Iterate through each character of the strings\n            for (int i = 0; i < a.Length; i++)\n            {\n                // Calculate the XOR result for each character and append to result\n                char xorResult = a[i] == b[i] ? '0' : '1';\n                result.Append(xorResult);\n            }\n\n            return result.ToString();\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            string a = \"010\";\n            string b = \"110\";\n            Console.WriteLine(StringXor(a, b));  // Output: 100\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest(List<string> strings)\n        {\n            if (strings == null || strings.Count == 0)\n            {\n                return \"None\";\n            }\n\n            string longestString = strings[0];\n\n            foreach (var str in strings)\n            {\n                if (str.Length > longestString.Length)\n                {\n                    longestString = str;\n                }\n            }\n\n            return longestString;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Longest(new List<string>())); // Output: None\n            Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" })); // Output: a\n            Console.WriteLine(Longest(new List<string> { \"a\", \"bb\", \"ccc\" })); // Output: ccc\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/13", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return a greatest common divisor of two integers a and b\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor(int a, int b)\n        {\n            // Base case: if b is 0, return a\n            if (b == 0)\n            {\n                return a;\n            }\n\n            // Recursive case: call the function with b and a % b\n            return GreatestCommonDivisor(b, a % b);\n        }\n\n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(GreatestCommonDivisor(3, 5));  // Output: 1\n            Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n            Console.WriteLine(GreatestCommonDivisor(100, 80)); // Output: 20\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/14", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return list of all prefixes from shortest to longest of the input string\n        /// >>> AllPrefixes('abc')\n        /// ['a', 'ab', 'abc']\n        /// \n        /// </summary>\n        public static List<string> AllPrefixes(string string0)\n        {\n            List<string> prefixes = new List<string>();\n\n            // Iterate over the string to generate prefixes\n            for (int i = 1; i <= string0.Length; i++)\n            {\n                // Add the substring from the start to the current length\n                prefixes.Add(string0.Substring(0, i));\n            }\n\n            return prefixes;\n        }\n\n        // For testing purpose\n        public static void Main(string[] args)\n        {\n            List<string> result = AllPrefixes(\"abc\");\n            foreach (var prefix in result)\n            {\n                Console.WriteLine(prefix);\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/15", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n        /// >>> StringSequence(0)\n        /// '0'\n        /// >>> StringSequence(5)\n        /// '0 1 2 3 4 5'\n        /// \n        /// </summary>\n        public static string StringSequence(int n)\n        {\n            // Generate a sequence of numbers from 0 to n\n            var numbers = Enumerable.Range(0, n + 1);\n            \n            // Join the numbers into a single string separated by spaces\n            return string.Join(\" \", numbers);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StringSequence(0)); // Output: '0'\n            Console.WriteLine(StringSequence(5)); // Output: '0 1 2 3 4 5'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/16", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a string, find out how many distinct characters (regardless of case) it consists of.\n        /// </summary>\n        public static int CountDistinctCharacters(string string0)\n        {\n            if (string0 == null)\n                throw new ArgumentNullException(nameof(string0));\n\n            // Convert the string to lowercase to make it case insensitive\n            string lowerCaseString = string0.ToLower();\n\n            // Use a HashSet to track distinct characters\n            HashSet<char> distinctChars = new HashSet<char>();\n\n            foreach (char c in lowerCaseString)\n            {\n                distinctChars.Add(c);\n            }\n\n            // The number of distinct characters\n            return distinctChars.Count;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CountDistinctCharacters(\"xyzXYZ\")); // Output: 3\n            Console.WriteLine(CountDistinctCharacters(\"Jerry\"));  // Output: 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/17", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Input to this function is a string representing musical notes in a special ASCII format.\n        /// Your task is to parse this string and return list of integers corresponding to how many beats does each\n        /// note last.\n        /// \n        /// Here is a legend:\n        /// 'o' - whole note, lasts four beats\n        /// 'o|' - half note, lasts two beats\n        /// '.|' - quarter note, lasts one beat\n        /// \n        /// </summary>\n        public static List<int> ParseMusic(string music_string)\n        {\n            // Define the mapping of note patterns to their corresponding beats\n            var noteToBeats = new Dictionary<string, int>\n            {\n                { \"o\", 4 },\n                { \"o|\", 2 },\n                { \".|\", 1 }\n            };\n\n            // Split the input string by spaces to get individual note patterns\n            var notes = music_string.Split(' ');\n\n            // Initialize the result list to store the beats of each note\n            var result = new List<int>();\n\n            // Iterate over each note pattern\n            foreach (var note in notes)\n            {\n                // Check if the note pattern exists in the dictionary\n                if (noteToBeats.ContainsKey(note))\n                {\n                    // Add the corresponding number of beats to the result list\n                    result.Add(noteToBeats[note]);\n                }\n                else\n                {\n                    // If the note pattern is not recognized, throw an exception\n                    throw new ArgumentException($\"Unrecognized note pattern: {note}\");\n                }\n            }\n\n            // Return the result list\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            string input = \"o o| .| o| o| .| .| .| .| o o\";\n            List<int> beats = ParseMusic(input);\n            Console.WriteLine(string.Join(\", \", beats));\n            // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/18", "language": "csharp", "completion": "public static int HowManyTimes(string string0, string substring)\n{\n    if (string.IsNullOrEmpty(string0) || string.IsNullOrEmpty(substring))\n    {\n        return 0;\n    }\n\n    int count = 0;\n    int startIndex = 0;\n\n    while ((startIndex = string0.IndexOf(substring, startIndex)) != -1)\n    {\n        count++;\n        startIndex++;\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/19", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input is a space-delimited string of numerals from 'zero' to 'nine'.\n        /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        /// Return the string with numbers sorted from smallest to largest\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers(string numbers)\n        {\n            // Dictionary to map words to their corresponding numerical values\n            Dictionary<string, int> wordToNumber = new Dictionary<string, int>\n            {\n                { \"zero\", 0 },\n                { \"one\", 1 },\n                { \"two\", 2 },\n                { \"three\", 3 },\n                { \"four\", 4 },\n                { \"five\", 5 },\n                { \"six\", 6 },\n                { \"seven\", 7 },\n                { \"eight\", 8 },\n                { \"nine\", 9 }\n            };\n\n            // Split the input string into individual words\n            string[] words = numbers.Split(' ');\n\n            // Convert words to their corresponding numerical values\n            var numberList = words.Select(word => wordToNumber[word]).ToList();\n\n            // Sort the numerical values\n            numberList.Sort();\n\n            // Dictionary to map numbers back to their corresponding words\n            Dictionary<int, string> numberToWord = wordToNumber.ToDictionary(kv => kv.Value, kv => kv.Key);\n\n            // Convert sorted numbers back to words\n            var sortedWords = numberList.Select(number => numberToWord[number]);\n\n            // Join sorted words into a space-delimited string\n            return string.Join(\" \", sortedWords);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SortNumbers(\"three one five\"));  // Output: \"one three five\"\n            Console.WriteLine(SortNumbers(\"nine eight seven\")); // Output: \"seven eight nine\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/20", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n        /// other and return them in order (smaller number, larger number).\n        /// >>> FindClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        /// (2.0, 2.2)\n        /// >>> FindClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        /// (2.0, 2.0)\n        /// \n        /// </summary>\n        public static List<double> FindClosestElements(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"List must contain at least two elements.\");\n            }\n\n            // Sort the list\n            List<double> sortedNumbers = numbers.OrderBy(n => n).ToList();\n\n            // Initialize the minimum difference to a large number\n            double minDifference = double.MaxValue;\n            double first = 0;\n            double second = 0;\n\n            // Iterate through the sorted list to find the closest pair\n            for (int i = 0; i < sortedNumbers.Count - 1; i++)\n            {\n                double diff = sortedNumbers[i + 1] - sortedNumbers[i];\n                if (diff < minDifference)\n                {\n                    minDifference = diff;\n                    first = sortedNumbers[i];\n                    second = sortedNumbers[i + 1];\n                }\n            }\n\n            return new List<double> { first, second };\n        }\n\n        static void Main(string[] args)\n        {\n            var result1 = FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.2 });\n            Console.WriteLine($\"({result1[0]}, {result1[1]})\");  // Output: (2.0, 2.2)\n\n            var result2 = FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.0 });\n            Console.WriteLine($\"({result2[0]}, {result2[1]})\");  // Output: (2.0, 2.0)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/21", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n            }\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n            double range = max - min;\n\n            if (range == 0)\n            {\n                throw new ArgumentException(\"All elements in the list are the same. Cannot rescale.\");\n            }\n\n            return numbers.Select(num => (num - min) / range).ToList();\n        }\n\n        public static void Main()\n        {\n            List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n            List<double> rescaledNumbers = RescaleToUnit(numbers);\n            Console.WriteLine(string.Join(\", \", rescaledNumbers));  // Output: 0.0, 0.25, 0.5, 0.75, 1.0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Filter given list of any python values only for integers\n        /// >>> FilterIntegers(['a', 3.14, 5])\n        /// [5]\n        /// >>> FilterIntegers([1, 2, 3, 'abc', {}, []])\n        /// [1, 2, 3]\n        /// \n        /// </summary>\n        public static List<int> FilterIntegers(List<object> values)\n        {\n            // Use LINQ to filter and return only integers\n            return values.OfType<int>().ToList();\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = FilterIntegers(new List<object> { 'a', 3.14, 5 });\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 5\n\n            var result2 = FilterIntegers(new List<object> { 1, 2, 3, \"abc\", new Dictionary<string, string>(), new List<string>() });\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 1, 2, 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/23", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return length of given string\n        /// >>> Strlen('')\n        /// 0\n        /// >>> Strlen('abc')\n        /// 3\n        /// \n        /// </summary>\n        public static int Strlen(string string0)\n        {\n            return string0.Length;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Strlen(\"\")); // Output: 0\n            Console.WriteLine(Strlen(\"abc\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/24", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// For a given number n, find the largest number that divides n evenly, smaller than n\n        /// >>> LargestDivisor(15)\n        /// 5\n        /// \n        /// </summary>\n        public static int LargestDivisor(int n)\n        {\n            // Start from n-1 and decrement until we find the largest divisor\n            for (int i = n - 1; i > 0; i--)\n            {\n                if (n % i == 0)\n                {\n                    return i;\n                }\n            }\n            // If no divisor is found, return 1 as the smallest divisor\n            return 1;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            Console.WriteLine(LargestDivisor(15)); // Output: 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Return list of prime factors of given integer in the order from smallest to largest.\n        /// Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        /// Input number should be equal to the product of all factors.\n        /// </summary>\n        public static List<int> Factorize(int n)\n        {\n            List<int> factors = new List<int>();\n            // Divide by 2 until n becomes odd\n            while (n % 2 == 0)\n            {\n                factors.Add(2);\n                n /= 2;\n            }\n\n            // Check for odd factors from 3 to sqrt(n)\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            {\n                while (n % i == 0)\n                {\n                    factors.Add(i);\n                    n /= i;\n                }\n            }\n\n            // If n is still greater than 2, then it must be a prime number\n            if (n > 2)\n            {\n                factors.Add(n);\n            }\n\n            return factors;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", Factorize(8))); // Output: 2, 2, 2\n            Console.WriteLine(string.Join(\", \", Factorize(25))); // Output: 5, 5\n            Console.WriteLine(string.Join(\", \", Factorize(70))); // Output: 2, 5, 7\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/26", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// From a list of integers, remove all elements that occur more than once.\n        /// Keep order of elements left the same as in the input.\n        /// </summary>\n        public static List<int> RemoveDuplicates(List<int> numbers)\n        {\n            // Dictionary to store the count of each number\n            Dictionary<int, int> counts = new Dictionary<int, int>();\n\n            // Iterate through the list to count occurrences of each number\n            foreach (var number in numbers)\n            {\n                if (counts.ContainsKey(number))\n                {\n                    counts[number]++;\n                }\n                else\n                {\n                    counts[number] = 1;\n                }\n            }\n\n            // Filter the list to include only numbers that occur exactly once\n            List<int> result = new List<int>();\n            foreach (var number in numbers)\n            {\n                if (counts[number] == 1)\n                {\n                    result.Add(number);\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            List<int> input = new List<int> { 1, 2, 3, 2, 4 };\n            List<int> result = RemoveDuplicates(input);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 3, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/27", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n        /// </summary>\n        public static string FlipCase(string string0)\n        {\n            char[] flippedChars = new char[string0.Length];\n\n            for (int i = 0; i < string0.Length; i++)\n            {\n                char currentChar = string0[i];\n                if (char.IsLower(currentChar))\n                {\n                    flippedChars[i] = char.ToUpper(currentChar);\n                }\n                else if (char.IsUpper(currentChar))\n                {\n                    flippedChars[i] = char.ToLower(currentChar);\n                }\n                else\n                {\n                    flippedChars[i] = currentChar; // Keep the character as is if it's neither upper nor lower case\n                }\n            }\n\n            return new string(flippedChars);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test the FlipCase function\n            Console.WriteLine(FlipCase(\"Hello\")); // Output: hELLO\n            Console.WriteLine(FlipCase(\"WORLD\")); // Output: world\n            Console.WriteLine(FlipCase(\"1234\"));  // Output: 1234\n            Console.WriteLine(FlipCase(\"aBcD\"));  // Output: AbCd\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Concatenate list of strings into a single string\n        /// >>> Concatenate([])\n        /// ''\n        /// >>> Concatenate(['a', 'b', 'c'])\n        /// 'abc'\n        /// \n        /// </summary>\n        public static string Concatenate(List<string> strings) \n        {\n            // Use String.Join with an empty separator to concatenate the list of strings into one string\n            return String.Join(\"\", strings);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<string> test1 = new List<string>();\n            List<string> test2 = new List<string> { \"a\", \"b\", \"c\" };\n\n            Console.WriteLine(Concatenate(test1)); // Output: ''\n            Console.WriteLine(Concatenate(test2)); // Output: 'abc'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/29", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Filters an input list of strings only for ones that start with a given prefix.\n        /// </summary>\n        /// <param name=\"strings\">The list of input strings.</param>\n        /// <param name=\"prefix\">The prefix to filter by.</param>\n        /// <returns>A list of strings that start with the given prefix.</returns>\n        public static List<string> FilterByPrefix(List<string> strings, string prefix)\n        {\n            return strings.Where(s => s.StartsWith(prefix)).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = FilterByPrefix(new List<string>(), \"a\");\n            Console.WriteLine(string.Join(\", \", test1)); // []\n\n            var test2 = FilterByPrefix(new List<string> { \"abc\", \"bcd\", \"cde\", \"array\" }, \"a\");\n            Console.WriteLine(string.Join(\", \", test2)); // [\"abc\", \"array\"]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive(List<int> l)\n        {\n            return l.Where(n => n > 0).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<int> list1 = new List<int> { -1, 2, -4, 5, 6 };\n            List<int> list2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n\n            List<int> result1 = GetPositive(list1);\n            List<int> result2 = GetPositive(list2);\n\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 2, 5, 6\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 5, 3, 2, 3, 9, 123, 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/31", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return true if a given number is prime, and false otherwise.\n        /// >>> IsPrime(6)\n        /// False\n        /// >>> IsPrime(101)\n        /// True\n        /// >>> IsPrime(11)\n        /// True\n        /// >>> IsPrime(13441)\n        /// True\n        /// >>> IsPrime(61)\n        /// True\n        /// >>> IsPrime(4)\n        /// False\n        /// >>> IsPrime(1)\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPrime(int n)\n        {\n            if (n <= 1) return false; // 0 and 1 are not prime numbers\n            if (n == 2) return true;  // 2 is the only even prime number\n            if (n % 2 == 0) return false; // other even numbers are not primes\n\n            // Check for factors from 3 up to the square root of n\n            int boundary = (int)Math.Floor(Math.Sqrt(n));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (n % i == 0) return false;\n            }\n            \n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsPrime(6));    // False\n            Console.WriteLine(IsPrime(101));  // True\n            Console.WriteLine(IsPrime(11));   // True\n            Console.WriteLine(IsPrime(13441));// True\n            Console.WriteLine(IsPrime(61));   // True\n            Console.WriteLine(IsPrime(4));    // False\n            Console.WriteLine(IsPrime(1));    // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/33", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// This function takes a list l and returns a list l' such that\n        /// l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n        /// to the values of the corresponding indices of l, but sorted.\n        /// >>> SortThird([1, 2, 3])\n        /// [1, 2, 3]\n        /// >>> SortThird([5, 6, 3, 4, 8, 9, 2])\n        /// [2, 6, 3, 4, 8, 9, 5]\n        /// </summary>\n        public static List<int> SortThird(List<int> l)\n        {\n            // Step 1: Identify the elements at indices divisible by three.\n            List<int> divisibleByThree = new List<int>();\n            for (int i = 0; i < l.Count; i++)\n            {\n                if (i % 3 == 0)\n                {\n                    divisibleByThree.Add(l[i]);\n                }\n            }\n\n            // Step 2: Sort the elements identified in step 1.\n            divisibleByThree.Sort();\n\n            // Step 3: Construct the new list with the sorted elements at the appropriate positions.\n            List<int> result = new List<int>(l); // Create a copy of the original list to modify.\n            int sortedIndex = 0; // Index to track the position in the sorted list.\n\n            for (int i = 0; i < result.Count; i++)\n            {\n                if (i % 3 == 0)\n                {\n                    result[i] = divisibleByThree[sortedIndex++];\n                }\n            }\n\n            return result;\n        }\n\n        // Test the implementation\n        public static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { 1, 2, 3 };\n            List<int> result1 = SortThird(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 2, 3\n\n            List<int> test2 = new List<int> { 5, 6, 3, 4, 8, 9, 2 };\n            List<int> result2 = SortThird(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 6, 3, 4, 8, 9, 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique(List<int> l)\n        {\n            // Use a HashSet to get unique elements\n            HashSet<int> uniqueElements = new HashSet<int>(l);\n            \n            // Convert the HashSet to a List and sort it\n            List<int> sortedUniqueList = uniqueElements.ToList();\n            sortedUniqueList.Sort();\n            \n            return sortedUniqueList;\n        }\n\n        public static void Main()\n        {\n            List<int> inputList = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> result = Unique(inputList);\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/35", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return maximum element in the list.\n        /// >>> MaxElement([1, 2, 3])\n        /// 3\n        /// >>> MaxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// 123\n        /// \n        /// </summary>\n        public static int MaxElement(List<int> l)\n        {\n            return l.Max();\n        }\n\n        public static void Main()\n        {\n            List<int> list1 = new List<int> { 1, 2, 3 };\n            List<int> list2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n\n            Console.WriteLine(MaxElement(list1)); // Output: 3\n            Console.WriteLine(MaxElement(list2)); // Output: 123\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/36", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int FizzBuzz(int n)\n        {\n            int count = 0;\n            \n            for (int i = 0; i < n; i++)\n            {\n                if (i % 11 == 0 || i % 13 == 0)\n                {\n                    count += CountSevens(i);\n                }\n            }\n            \n            return count;\n        }\n\n        private static int CountSevens(int number)\n        {\n            int count = 0;\n            string numberStr = number.ToString();\n            \n            foreach (char c in numberStr)\n            {\n                if (c == '7')\n                {\n                    count++;\n                }\n            }\n            \n            return count;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(FizzBuzz(50)); // Output: 0\n            Console.WriteLine(FizzBuzz(78)); // Output: 2\n            Console.WriteLine(FizzBuzz(79)); // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// This function takes a list l and returns a list l' such that\n        /// l' is identical to l in the odd indices, while its values at the even indices are equal\n        /// to the values of the even indices of l, but sorted.\n        /// </summary>\n        public static List<int> SortEven(List<int> l)\n        {\n            // Extract even indices values\n            var evenIndicesValues = l.Where((value, index) => index % 2 == 0).ToList();\n            \n            // Sort the extracted even indices values\n            evenIndicesValues.Sort();\n\n            // Create a copy of the original list\n            var sortedList = new List<int>(l);\n\n            // Replace values at even indices with sorted values\n            for (int i = 0, j = 0; i < sortedList.Count; i += 2, j++)\n            {\n                sortedList[i] = evenIndicesValues[j];\n            }\n\n            return sortedList;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test the SortEven function\n            var input1 = new List<int> { 1, 2, 3 };\n            var result1 = SortEven(input1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 2, 3\n\n            var input2 = new List<int> { 5, 6, 3, 4 };\n            var result2 = SortEven(input2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 3, 6, 5, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/39", "language": "csharp", "completion": "public static bool IsPrime(int num)\n{\n    if (num <= 1) return false;\n    if (num == 2) return true; // 2 is the only even prime number\n    if (num % 2 == 0) return false; // other even numbers are not primes\n\n    var boundary = (int)Math.Floor(Math.Sqrt(num));\n\n    for (int i = 3; i <= boundary; i += 2)\n    {\n        if (num % i == 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// TriplesSumToZero takes a list of integers as an input.\n        /// it returns True if there are three distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// \n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero (List<int> l) \n        {\n            int n = l.Count;\n            for (int i = 0; i < n - 2; i++)\n            {\n                for (int j = i + 1; j < n - 1; j++)\n                {\n                    for (int k = j + 1; k < n; k++)\n                    {\n                        if (l[i] + l[j] + l[k] == 0)\n                        {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/41", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Calculates the number of collisions between two sets of cars moving in opposite directions.\n        /// </summary>\n        /// <param name=\"n\">The number of cars in each set.</param>\n        /// <returns>The number of collisions.</returns>\n        public static int CarRaceCollision(int n)\n        {\n            return n;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage:\n            int n = 5;\n            int collisions = CarRaceCollision(n);\n            Console.WriteLine($\"Number of collisions: {collisions}\");  // Output should be 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/42", "language": "csharp", "completion": "return l.Select(x => x + 1).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 1, 2, 3 };\n            List<int> result1 = IncrList(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 2, 3, 4\n\n            List<int> test2 = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> result2 = IncrList(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 6, 4, 6, 3, 4, 4, 10, 1, 124\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// PairsSumToZero takes a list of integers as an input.\n        /// It returns True if there are two distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// </summary>\n        public static bool PairsSumToZero(List<int> l)\n        {\n            HashSet<int> seenNumbers = new HashSet<int>();\n\n            foreach (int num in l)\n            {\n                if (seenNumbers.Contains(-num))\n                {\n                    return true;\n                }\n                seenNumbers.Add(num);\n            }\n\n            return false;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> testList1 = new List<int> { 1, 3, 5, 0 };\n            List<int> testList2 = new List<int> { 1, 3, -2, 1 };\n            List<int> testList3 = new List<int> { 1, 2, 3, 7 };\n            List<int> testList4 = new List<int> { 2, 4, -5, 3, 5, 7 };\n            List<int> testList5 = new List<int> { 1 };\n\n            Console.WriteLine(PairsSumToZero(testList1)); // False\n            Console.WriteLine(PairsSumToZero(testList2)); // False\n            Console.WriteLine(PairsSumToZero(testList3)); // False\n            Console.WriteLine(PairsSumToZero(testList4)); // True\n            Console.WriteLine(PairsSumToZero(testList5)); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/44", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Convert a number x from base 10 to a specified base (less than 10).\n        /// </summary>\n        /// <param name=\"x\">The number in base 10.</param>\n        /// <param name=\"base\">The base to convert to.</param>\n        /// <returns>A string representation of the number in the new base.</returns>\n        public static string ChangeBase(int x, int @base)\n        {\n            if (@base < 2 || @base > 9)\n            {\n                throw new ArgumentException(\"Base must be between 2 and 9.\");\n            }\n\n            if (x == 0)\n            {\n                return \"0\";\n            }\n\n            string result = string.Empty;\n            int current = x;\n\n            while (current > 0)\n            {\n                int remainder = current % @base;\n                result = remainder.ToString() + result;\n                current /= @base;\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(ChangeBase(8, 3));  // Output: '22'\n            Console.WriteLine(ChangeBase(8, 2));  // Output: '1000'\n            Console.WriteLine(ChangeBase(7, 2));  // Output: '111'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/45", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Calculates the area of a triangle given the base and height.\n        /// </summary>\n        /// <param name=\"a\">The length of the base of the triangle.</param>\n        /// <param name=\"h\">The height of the triangle.</param>\n        /// <returns>The area of the triangle.</returns>\n        public static double TriangleArea(int a, int h)\n        {\n            return 0.5 * a * h;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            int baseLength = 5;\n            int height = 3;\n            double area = TriangleArea(baseLength, height);\n            Console.WriteLine($\"The area of the triangle with base {baseLength} and height {height} is {area}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/46", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Fib4(int n)\n        {\n            // Handle the base cases\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 2;\n            if (n == 3) return 0;\n            \n            // Initialize the first four values of the sequence\n            int[] fib4 = new int[4] { 0, 0, 2, 0 };\n            \n            for (int i = 4; i <= n; i++)\n            {\n                // Calculate the next value in the sequence\n                int nextFib4 = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n                \n                // Update the array to hold the last four computed values\n                fib4[0] = fib4[1];\n                fib4[1] = fib4[2];\n                fib4[2] = fib4[3];\n                fib4[3] = nextFib4;\n            }\n            \n            return fib4[3];\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(Fib4(5)); // Output: 4\n            Console.WriteLine(Fib4(6)); // Output: 8\n            Console.WriteLine(Fib4(7)); // Output: 14\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return Median of elements in the list l.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median(List<int> l)\n        {\n            if (l == null || l.Count == 0)\n            {\n                throw new ArgumentException(\"The list cannot be null or empty.\");\n            }\n\n            l.Sort();\n            int n = l.Count;\n            int middle = n / 2;\n\n            if (n % 2 == 1)\n            {\n                // If the list has an odd number of elements, return the middle one.\n                return l[middle];\n            }\n            else\n            {\n                // If the list has an even number of elements, return the average of the two middle ones.\n                double median = (l[middle - 1] + l[middle]) / 2.0;\n                return median;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> list1 = new List<int> { 3, 1, 2, 4, 5 };\n            List<int> list2 = new List<int> { -10, 4, 6, 1000, 10, 20 };\n            \n            Console.WriteLine(Median(list1)); // Expected output: 3\n            Console.WriteLine(Median(list2)); // Expected output: 15.0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/48", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if given string is a palindrome\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPalindrome(string text)\n        {\n            // Remove non-alphanumeric characters and convert to lowercase\n            string cleanedText = Regex.Replace(text, @\"[^a-zA-Z0-9]\", \"\").ToLower();\n\n            // Compare the cleaned text with its reverse\n            return cleanedText == new string(cleanedText.Reverse().ToArray());\n        }\n\n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsPalindrome(\"\")); // True\n            Console.WriteLine(IsPalindrome(\"aba\")); // True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/49", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Computes 2^n modulo p.\n        /// </summary>\n        /// <param name=\"n\">The exponent.</param>\n        /// <param name=\"p\">The modulus.</param>\n        /// <returns>The result of 2^n % p.</returns>\n        public static int Modp(int n, int p)\n        {\n            // Base cases\n            if (n == 0) return 1 % p; // 2^0 is 1, and 1 % p is 1\n            if (p == 1) return 0;     // Any number mod 1 is 0\n            \n            long result = 1;\n            long baseVal = 2;\n\n            // Implementing the modular exponentiation\n            while (n > 0)\n            {\n                // If n is odd, multiply baseVal with the result\n                if ((n % 2) == 1)\n                {\n                    result = (result * baseVal) % p;\n                }\n                // Now n must be even\n                n = n >> 1; // Divide n by 2\n                baseVal = (baseVal * baseVal) % p; // Square the base\n            }\n\n            return (int)result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Modp(3, 5));    // Output: 3\n            Console.WriteLine(Modp(1101, 101)); // Output: 2\n            Console.WriteLine(Modp(0, 101));  // Output: 1\n            Console.WriteLine(Modp(3, 11));   // Output: 8\n            Console.WriteLine(Modp(100, 101)); // Output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/51", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// RemoveVowels is a function that takes a string and returns a string without vowels.\n        /// >>> RemoveVowels('')\n        /// ''\n        /// >>> RemoveVowels(\"abcdef\\nghijklm\")\n        /// 'bcdf\\nghjklm'\n        /// >>> RemoveVowels('abcdef')\n        /// 'bcdf'\n        /// >>> RemoveVowels('aaaaa')\n        /// ''\n        /// >>> RemoveVowels('aaBAA')\n        /// 'B'\n        /// >>> RemoveVowels('zbcd')\n        /// 'zbcd'\n        /// \n        /// </summary>\n        public static string RemoveVowels(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n                return text;\n\n            // Define the vowels both lowercase and uppercase\n            string vowels = \"aeiouAEIOU\";\n            \n            // Use a StringBuilder to efficiently build the result string\n            var result = new System.Text.StringBuilder();\n\n            foreach (char c in text)\n            {\n                if (!vowels.Contains(c))\n                {\n                    result.Append(c);\n                }\n            }\n\n            return result.ToString();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(RemoveVowels(\"\")); // ''\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n            Console.WriteLine(RemoveVowels(\"abcdef\")); // 'bcdf'\n            Console.WriteLine(RemoveVowels(\"aaaaa\")); // ''\n            Console.WriteLine(RemoveVowels(\"aaBAA\")); // 'B'\n            Console.WriteLine(RemoveVowels(\"zbcd\")); // 'zbcd'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if all numbers in the list l are below threshold t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold(List<int> l, int t)\n        {\n            return l.All(x => x < t);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 2, 4, 10 }, 100)); // True\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 20, 4, 10 }, 5));  // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Add two numbers x and y\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// \n        /// </summary>\n        public static int Add(int x, int y)\n        {\n            return x + y;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases for the Add method\n            Console.WriteLine(Add(2, 3));  // Output: 5\n            Console.WriteLine(Add(5, 7));  // Output: 12\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Check if two words have the same characters.\n        /// </summary>\n        public static bool SameChars(string s0, string s1)\n        {\n            // Convert both strings to a set of unique characters\n            var set0 = new HashSet<char>(s0);\n            var set1 = new HashSet<char>(s1);\n\n            // Compare both sets\n            return set0.SetEquals(set1);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n            Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n            Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/55", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return n-th Fibonacci number.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// \n        /// </summary>\n        public static int Fib(int n)\n        {\n            if (n <= 0)\n                throw new ArgumentException(\"Input should be a positive integer.\");\n            if (n == 1)\n                return 1;\n            if (n == 2)\n                return 1;\n\n            int a = 1, b = 1;\n            for (int i = 3; i <= n; i++)\n            {\n                int temp = a + b;\n                a = b;\n                b = temp;\n            }\n\n            return b;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fib(10)); // 55\n            Console.WriteLine(Fib(1));  // 1\n            Console.WriteLine(Fib(8));  // 21\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/56", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// You're an expert C# programmer\n        /// brackets is a string of \"<\" and \">\".\n        /// return True if every opening bracket has a corresponding closing bracket.\n        /// \n        /// >>> CorrectBracketing(\"<\")\n        /// False\n        /// >>> CorrectBracketing(\"<>\")\n        /// True\n        /// >>> CorrectBracketing(\"<<><>>\")\n        /// True\n        /// >>> CorrectBracketing(\"><<>\")\n        /// False\n        /// \n        /// </summary>\n        public static bool CorrectBracketing(string brackets)\n        {\n            int balance = 0;\n\n            foreach (char ch in brackets)\n            {\n                if (ch == '<')\n                {\n                    balance++;\n                }\n                else if (ch == '>')\n                {\n                    balance--;\n                }\n\n                // If balance goes negative, there are more closing brackets than opening\n                if (balance < 0)\n                {\n                    return false;\n                }\n            }\n\n            // If balance is zero, all opening brackets have matching closing brackets\n            return balance == 0;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CorrectBracketing(\"<\"));      // False\n            Console.WriteLine(CorrectBracketing(\"<>\"));     // True\n            Console.WriteLine(CorrectBracketing(\"<<><>>\")); // True\n            Console.WriteLine(CorrectBracketing(\"><<>\"));   // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if list elements are Monotonically increasing or decreasing.\n        /// >>> Monotonic([1, 2, 4, 20])\n        /// True\n        /// >>> Monotonic([1, 20, 4, 10])\n        /// False\n        /// >>> Monotonic([4, 1, 0, -10])\n        /// True\n        /// \n        /// </summary>\n        public static bool Monotonic(List<int> l)\n        {\n            if (l == null || l.Count <= 1) return true;\n\n            bool increasing = true;\n            bool decreasing = true;\n\n            for (int i = 1; i < l.Count; i++)\n            {\n                if (l[i] > l[i - 1])\n                {\n                    decreasing = false;\n                }\n                if (l[i] < l[i - 1])\n                {\n                    increasing = false;\n                }\n            }\n\n            return increasing || decreasing;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(Monotonic(new List<int> { 1, 2, 4, 20 })); // True\n            Console.WriteLine(Monotonic(new List<int> { 1, 20, 4, 10 })); // False\n            Console.WriteLine(Monotonic(new List<int> { 4, 1, 0, -10 })); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/58", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Returns sorted unique common elements for two lists.\n        /// </summary>\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Find common elements\n            var commonElements = l1.Intersect(l2);\n            \n            // Ensure uniqueness and sort the result\n            var sortedUniqueCommonElements = commonElements.Distinct().OrderBy(x => x).ToList();\n            \n            return sortedUniqueCommonElements;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            List<int> list1 = new List<int> { 1, 4, 3, 34, 653, 2, 5 };\n            List<int> list2 = new List<int> { 5, 7, 1, 5, 9, 653, 121 };\n            List<int> result = Common(list1, list2);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 5, 653\n\n            List<int> list3 = new List<int> { 5, 3, 2, 8 };\n            List<int> list4 = new List<int> { 3, 2 };\n            List<int> result2 = Common(list3, list4);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/59", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n        /// >>> LargestPrimeFactor(13195)\n        /// 29\n        /// >>> LargestPrimeFactor(2048)\n        /// 2\n        /// \n        /// </summary>\n        public static int LargestPrimeFactor(int n)\n        {\n            // Initialize the largest prime factor\n            int largestFactor = 0;\n            \n            // Remove factors of 2\n            while (n % 2 == 0)\n            {\n                largestFactor = 2;\n                n /= 2;\n            }\n            \n            // Check for odd factors from 3 onwards\n            for (int factor = 3; factor * factor <= n; factor += 2)\n            {\n                while (n % factor == 0)\n                {\n                    largestFactor = factor;\n                    n /= factor;\n                }\n            }\n            \n            // If n is still greater than 2, then it is a prime number\n            // and thus the largest prime factor\n            if (n > 2)\n            {\n                largestFactor = n;\n            }\n            \n            return largestFactor;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n            Console.WriteLine(LargestPrimeFactor(2048)); // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/60", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// SumToN is a function that sums numbers from 1 to n.\n        /// </summary>\n        public static int SumToN(int n)\n        {\n            return (n * (n + 1)) / 2;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SumToN(30)); // Output: 465\n            Console.WriteLine(SumToN(100)); // Output: 5050\n            Console.WriteLine(SumToN(5)); // Output: 15\n            Console.WriteLine(SumToN(10)); // Output: 55\n            Console.WriteLine(SumToN(1)); // Output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/61", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Checks if every opening bracket has a corresponding closing bracket.\n        /// </summary>\n        /// <param name=\"brackets\">A string consisting of '(' and ')'.</param>\n        /// <returns>True if the bracketing is correct, otherwise False.</returns>\n        public static bool CorrectBracketing(string brackets)\n        {\n            int balance = 0;\n\n            foreach (char ch in brackets)\n            {\n                if (ch == '(')\n                {\n                    balance++;\n                }\n                else if (ch == ')')\n                {\n                    balance--;\n                }\n\n                // If balance is negative, there are more closing brackets than opening ones\n                if (balance < 0)\n                {\n                    return false;\n                }\n            }\n\n            // If balance is zero, all opening brackets have corresponding closing ones\n            return balance == 0;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CorrectBracketing(\"(\"));         // Output: False\n            Console.WriteLine(CorrectBracketing(\"()\"));        // Output: True\n            Console.WriteLine(CorrectBracketing(\"(()())\"));    // Output: True\n            Console.WriteLine(CorrectBracketing(\")(()\"));      // Output: False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// xs represent coefficients of a polynomial.\n        /// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        /// Return Derivative of this polynomial in the same form.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative(List<int> xs)\n        {\n            List<int> derivative = new List<int>();\n\n            for (int i = 1; i < xs.Count; i++)\n            {\n                derivative.Add(i * xs[i]);\n            }\n\n            return derivative;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> polynomial1 = new List<int> { 3, 1, 2, 4, 5 };\n            List<int> polynomial2 = new List<int> { 1, 2, 3 };\n\n            Console.WriteLine(string.Join(\", \", Derivative(polynomial1))); // Output: 1, 4, 12, 20\n            Console.WriteLine(string.Join(\", \", Derivative(polynomial2))); // Output: 2, 6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/63", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Computes the n-th element of the Fibfib number sequence.\n        /// </summary>\n        /// <param name=\"n\">The index of the Fibfib sequence to compute.</param>\n        /// <returns>The n-th element of the Fibfib sequence.</returns>\n        public static int Fibfib(int n)\n        {\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 1;\n\n            int[] fibfib = new int[n + 1];\n            fibfib[0] = 0;\n            fibfib[1] = 0;\n            fibfib[2] = 1;\n\n            for (int i = 3; i <= n; i++)\n            {\n                fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n            }\n\n            return fibfib[n];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fibfib(1)); // Output: 0\n            Console.WriteLine(Fibfib(5)); // Output: 4\n            Console.WriteLine(Fibfib(8)); // Output: 24\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/64", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function VowelsCount which takes a string representing\n        /// a word as input and returns the number of vowels in the string.\n        /// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        /// vowel, but only when it is at the end of the given word.\n        /// \n        /// Example:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount(string s)\n        {\n            // Define the set of vowels\n            HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n            int count = 0;\n\n            // Iterate through the string\n            for (int i = 0; i < s.Length; i++)\n            {\n                char currentChar = s[i];\n\n                // Check if the character is a vowel\n                if (vowels.Contains(currentChar))\n                {\n                    count++;\n                }\n                // Special case for 'y'\n                else if ((currentChar == 'y' || currentChar == 'Y') && i == s.Length - 1)\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n            Console.WriteLine(VowelsCount(\"Happy\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"rhythm\")); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/65", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Circular shift the digits of the integer x, shift the digits right by shift\n        /// and return the result as a string.\n        /// If shift > number of digits, return digits reversed.\n        /// >>> CircularShift(12, 1)\n        /// \"21\"\n        /// >>> CircularShift(12, 2)\n        /// \"12\"\n        /// \n        /// </summary>\n        public static string CircularShift(int x, int shift)\n        {\n            string digits = x.ToString();\n            int length = digits.Length;\n\n            if (shift >= length)\n            {\n                // Return the reversed string of digits\n                char[] reversedDigits = digits.ToCharArray();\n                Array.Reverse(reversedDigits);\n                return new string(reversedDigits);\n            }\n            else\n            {\n                // Perform the circular shift to the right\n                shift = shift % length; // Ensure shift is within valid range\n                string shiftedDigits = digits.Substring(length - shift) + digits.Substring(0, length - shift);\n                return shiftedDigits;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CircularShift(12, 1)); // \"21\"\n            Console.WriteLine(CircularShift(12, 2)); // \"12\"\n            Console.WriteLine(CircularShift(12345, 3)); // \"34512\"\n            Console.WriteLine(CircularShift(12345, 5)); // \"54321\"\n            Console.WriteLine(CircularShift(12345, 6)); // \"54321\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/66", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task\n        /// Write a function that takes a string as input and returns the sum of the upper characters only'\n        /// ASCII codes.\n        /// \n        /// Examples:\n        /// DigitSum(\"\") => 0\n        /// DigitSum(\"abAB\") => 131\n        /// DigitSum(\"abcCd\") => 67\n        /// DigitSum(\"helloE\") => 69\n        /// DigitSum(\"woArBld\") => 131\n        /// DigitSum(\"aAaaaXa\") => 153\n        /// \n        /// </summary>\n        public static int DigitSum(string s)\n        {\n            int sum = 0;\n            foreach (char c in s)\n            {\n                if (char.IsUpper(c))\n                {\n                    sum += c;\n                }\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(DigitSum(\"\")); // Output: 0\n            Console.WriteLine(DigitSum(\"abAB\")); // Output: 131\n            Console.WriteLine(DigitSum(\"abcCd\")); // Output: 67\n            Console.WriteLine(DigitSum(\"helloE\")); // Output: 69\n            Console.WriteLine(DigitSum(\"woArBld\")); // Output: 131\n            Console.WriteLine(DigitSum(\"aAaaaXa\")); // Output: 153\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/67", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Given a string that represents the total number of apples and oranges and an integer that represents the total number of fruits\n        /// in the basket, return the number of mango fruits in the basket.\n        /// </summary>\n        public static int FruitDistribution(string s, int n)\n        {\n            // Use regular expressions to find the numbers in the string\n            Regex regex = new Regex(@\"\\d+\");\n            MatchCollection matches = regex.Matches(s);\n\n            // Sum the extracted numbers\n            int apples = 0;\n            int oranges = 0;\n            \n            if (matches.Count >= 2)\n            {\n                apples = int.Parse(matches[0].Value);\n                oranges = int.Parse(matches[1].Value);\n            }\n\n            // Calculate the number of mangoes\n            int mangoes = n - apples - oranges;\n            return mangoes;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(FruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n            Console.WriteLine(FruitDistribution(\"0 apples and 1 oranges\", 3));  // Output: 2\n            Console.WriteLine(FruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n            Console.WriteLine(FruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// \"Given an array representing a branch of a tree that has non-negative integer nodes\n        /// your task is to Pluck one of the nodes and return it.\n        /// The Plucked node should be the node with the smallest even value.\n        /// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n        /// \n        /// The Plucked node should be returned in a list, [ smalest_value, its index ],\n        /// If there are no even values or the given array is empty, return [].\n        /// \n        /// Example 1:\n        /// Input: [4,2,3]\n        /// Output: [2, 1]\n        /// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n        /// \n        /// Example 2:\n        /// Input: [1,2,3]\n        /// Output: [2, 1]\n        /// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n        /// \n        /// Example 3:\n        /// Input: []\n        /// Output: []\n        /// \n        /// Example 4:\n        /// Input: [5, 0, 3, 0, 4, 2]\n        /// Output: [0, 1]\n        /// Explanation: 0 is the smallest value, but  there are two zeros,\n        /// so we will choose the first zero, which has the smallest index.\n        /// \n        /// Constraints:\n        /// * 1 <= nodes.length <= 10000\n        /// * 0 <= node.value\n        /// \n        /// </summary>\n        public static List<int> Pluck(List<int> arr)\n        {\n            // Check if the array is empty\n            if (arr == null || arr.Count == 0)\n            {\n                return new List<int>();\n            }\n\n            // Initialize variables to track the smallest even value and its index\n            int? smallestEvenValue = null;\n            int smallestEvenIndex = -1;\n\n            // Loop through the array to find the smallest even value\n            for (int i = 0; i < arr.Count; i++)\n            {\n                if (arr[i] % 2 == 0)\n                {\n                    if (smallestEvenValue == null || arr[i] < smallestEvenValue)\n                    {\n                        smallestEvenValue = arr[i];\n                        smallestEvenIndex = i;\n                    }\n                }\n            }\n\n            // If no even value was found, return an empty list\n            if (smallestEvenValue == null)\n            {\n                return new List<int>();\n            }\n\n            // Return the smallest even value and its index\n            return new List<int> { smallestEvenValue.Value, smallestEvenIndex };\n        }\n\n        // Test the Pluck method\n        public static void Main(string[] args)\n        {\n            List<int> example1 = new List<int> { 4, 2, 3 };\n            List<int> result1 = Pluck(example1);\n            Console.WriteLine($\"Example 1: [{string.Join(\", \", result1)}]\");\n\n            List<int> example2 = new List<int> { 1, 2, 3 };\n            List<int> result2 = Pluck(example2);\n            Console.WriteLine($\"Example 2: [{string.Join(\", \", result2)}]\");\n\n            List<int> example3 = new List<int> { };\n            List<int> result3 = Pluck(example3);\n            Console.WriteLine($\"Example 3: [{string.Join(\", \", result3)}]\");\n\n            List<int> example4 = new List<int> { 5, 0, 3, 0, 4, 2 };\n            List<int> result4 = Pluck(example4);\n            Console.WriteLine($\"Example 4: [{string.Join(\", \", result4)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/69", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Search(List<int> lst)\n        {\n            // Step 1: Count the frequency of each integer\n            Dictionary<int, int> frequency = new Dictionary<int, int>();\n            \n            foreach (var num in lst)\n            {\n                if (frequency.ContainsKey(num))\n                {\n                    frequency[num]++;\n                }\n                else\n                {\n                    frequency[num] = 1;\n                }\n            }\n\n            // Step 2: Find the integers where frequency >= value and get the maximum of them\n            int result = -1;\n            \n            foreach (var kvp in frequency)\n            {\n                if (kvp.Value >= kvp.Key)\n                {\n                    result = Math.Max(result, kvp.Key);\n                }\n            }\n\n            // Step 3: Return the result\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 4, 1, 2, 2, 3, 1 };\n            List<int> test2 = new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 };\n            List<int> test3 = new List<int> { 5, 5, 4, 4, 4 };\n\n            Console.WriteLine(Search(test1)); // Expected output: 2\n            Console.WriteLine(Search(test2)); // Expected output: 3\n            Console.WriteLine(Search(test3)); // Expected output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given list of integers, return list in strange order.\n        /// Strange sorting, is when you start with the minimum value,\n        /// then maximum of the remaining integers, then minimum and so on.\n        /// \n        /// Examples:\n        /// StrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n        /// StrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n        /// StrangeSortList([]) == []\n        /// \n        /// </summary>\n        public static List<int> StrangeSortList(List<int> lst)\n        {\n            // Step 1: Sort the list in ascending order\n            lst.Sort();\n\n            // Step 2: Initialize the result list and pointers\n            List<int> result = new List<int>();\n            int start = 0;\n            int end = lst.Count - 1;\n            bool pickMin = true;\n\n            // Step 3: Alternately pick elements from start and end\n            while (start <= end)\n            {\n                if (pickMin)\n                {\n                    result.Add(lst[start]);\n                    start++;\n                }\n                else\n                {\n                    result.Add(lst[end]);\n                    end--;\n                }\n                pickMin = !pickMin;\n            }\n\n            return result;\n        }\n\n        // Example usage\n        static void Main(string[] args)\n        {\n            List<int> list1 = new List<int> { 1, 2, 3, 4 };\n            List<int> list2 = new List<int> { 5, 5, 5, 5 };\n            List<int> list3 = new List<int> { };\n\n            Console.WriteLine(string.Join(\", \", StrangeSortList(list1))); // Output: 1, 4, 2, 3\n            Console.WriteLine(string.Join(\", \", StrangeSortList(list2))); // Output: 5, 5, 5, 5\n            Console.WriteLine(string.Join(\", \", StrangeSortList(list3))); // Output: \n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/71", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given the lengths of the three sides of a triangle. Return the area of\n        /// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n        /// Otherwise return -1\n        /// Three sides make a valid triangle when the sum of any two sides is greater \n        /// than the third side.\n        /// Example:\n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea(int a, int b, int c)\n        {\n            // Check if the sides form a valid triangle\n            if (a + b > c && a + c > b && b + c > a)\n            {\n                // Calculate the semi-perimeter\n                double s = (a + b + c) / 2.0;\n\n                // Calculate the area using Heron's formula\n                double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n\n                // Return the area rounded to 2 decimal points\n                return Math.Round(area, 2);\n            }\n            else\n            {\n                // The sides do not form a valid triangle\n                return -1;\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines if the object q will fly based on given conditions.\n        /// </summary>\n        /// <param name=\"q\">List of integers.</param>\n        /// <param name=\"w\">Maximum possible weight.</param>\n        /// <returns>True if the object will fly, False otherwise.</returns>\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // Check if the list is a palindrome\n            bool isPalindrome = q.SequenceEqual(q.AsEnumerable().Reverse());\n\n            // Calculate the sum of the elements in the list\n            int sum = q.Sum();\n\n            // Check if both conditions are met\n            return isPalindrome && sum <= w;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array arr of integers, find the minimum number of elements that\n        /// need to be changed to make the array palindromic. A palindromic array is an array that\n        /// is read the same backwards and forwards. In one change, you can change one element to any other element.\n        /// \n        /// For example:\n        /// SmallestChange([1,2,3,5,4,7,9,6]) == 4\n        /// SmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n        /// SmallestChange([1, 2, 3, 2, 1]) == 0\n        /// \n        /// </summary>\n        public static int SmallestChange(List<int> arr)\n        {\n            int n = arr.Count;\n            int changes = 0;\n            \n            for (int i = 0; i < n / 2; i++)\n            {\n                if (arr[i] != arr[n - 1 - i])\n                {\n                    changes++;\n                }\n            }\n            \n            return changes;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 5, 4, 7, 9, 6 })); // Output: 4\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 4, 3, 2, 2 })); // Output: 1\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 2, 1 })); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/74", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// This method accepts two lists of strings and returns the list that has\n        /// a total number of chars in all strings of the list less than the other list.\n        /// If the two lists have the same number of chars, it returns the first list.\n        /// </summary>\n        public static List<string> TotalMatch(List<string> lst1, List<string> lst2)\n        {\n            // Calculate the total number of characters in each list\n            int lst1TotalChars = lst1.Sum(s => s.Length);\n            int lst2TotalChars = lst2.Sum(s => s.Length);\n            \n            // Compare the total number of characters and return the appropriate list\n            if (lst1TotalChars <= lst2TotalChars)\n            {\n                return lst1;\n            }\n            else\n            {\n                return lst2;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<string> result1 = TotalMatch(new List<string> { }, new List<string> { });\n            List<string> result2 = TotalMatch(new List<string> { \"hi\", \"admin\" }, new List<string> { \"hI\", \"Hi\" });\n            List<string> result3 = TotalMatch(new List<string> { \"hi\", \"admin\" }, new List<string> { \"hi\", \"hi\", \"admin\", \"project\" });\n            List<string> result4 = TotalMatch(new List<string> { \"hi\", \"admin\" }, new List<string> { \"hI\", \"hi\", \"hi\" });\n            List<string> result5 = TotalMatch(new List<string> { \"4\" }, new List<string> { \"1\", \"2\", \"3\", \"4\", \"5\" });\n\n            // Print results\n            Console.WriteLine(string.Join(\", \", result1));\n            Console.WriteLine(string.Join(\", \", result2));\n            Console.WriteLine(string.Join(\", \", result3));\n            Console.WriteLine(string.Join(\", \", result4));\n            Console.WriteLine(string.Join(\", \", result5));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsMultiplyPrime(int a)\n        {\n            // Generate prime numbers less than 100\n            List<int> primes = GeneratePrimes(100);\n            \n            // Check all combinations of 3 primes\n            for (int i = 0; i < primes.Count; i++)\n            {\n                for (int j = i + 1; j < primes.Count; j++)\n                {\n                    for (int k = j + 1; k < primes.Count; k++)\n                    {\n                        if (primes[i] * primes[j] * primes[k] == a)\n                        {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        private static List<int> GeneratePrimes(int max)\n        {\n            bool[] isPrime = new bool[max];\n            for (int i = 2; i < max; i++) isPrime[i] = true;\n\n            for (int p = 2; p * p < max; p++)\n            {\n                if (isPrime[p])\n                {\n                    for (int i = p * p; i < max; i += p)\n                        isPrime[i] = false;\n                }\n            }\n\n            List<int> primes = new List<int>();\n            for (int i = 2; i < max; i++)\n            {\n                if (isPrime[i])\n                    primes.Add(i);\n            }\n            return primes;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(IsMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\n            Console.WriteLine(IsMultiplyPrime(60)); // True, because 60 = 2 * 3 * 5\n            Console.WriteLine(IsMultiplyPrime(100)); // False, because 100 is not a product of exactly 3 primes\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/76", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines if x is a simple power of n.\n        /// </summary>\n        public static bool IsSimplePower(int x, int n)\n        {\n            // Edge case: x is 1, it's always a simple power of any n\n            if (x == 1) return true;\n\n            // Edge case: n is 1, x must be 1 to be a simple power\n            if (n == 1) return x == 1;\n\n            // General case: Check if x is a power of n\n            while (x > 1)\n            {\n                if (x % n != 0) return false;\n                x /= n;\n            }\n\n            // If we reduced x to 1, it means x is a power of n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsSimplePower(1, 4)); // true\n            Console.WriteLine(IsSimplePower(2, 2)); // true\n            Console.WriteLine(IsSimplePower(8, 2)); // true\n            Console.WriteLine(IsSimplePower(3, 2)); // false\n            Console.WriteLine(IsSimplePower(3, 1)); // false\n            Console.WriteLine(IsSimplePower(5, 3)); // false\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/77", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// You're an expert C# programmer\n        ///\n        /// Write a function that takes an integer a and returns True\n        /// if this ingeger is a cube of some integer number.\n        /// Note: you may assume the input is always valid.\n        /// Examples:\n        /// Iscube(1) ==> True\n        /// Iscube(2) ==> False\n        /// Iscube(-1) ==> True\n        /// Iscube(64) ==> True\n        /// Iscube(0) ==> True\n        /// Iscube(180) ==> False\n        ///\n        /// </summary>\n        public static bool Iscube(int a)\n        {\n            // Calculate the cube root of a\n            double cubeRoot = Math.Cbrt(a);\n            \n            // Round the cube root to the nearest integer\n            int roundedCubeRoot = (int)Math.Round(cubeRoot);\n            \n            // Check if the cube of the rounded value equals a\n            return roundedCubeRoot * roundedCubeRoot * roundedCubeRoot == a;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Iscube(1));     // True\n            Console.WriteLine(Iscube(2));     // False\n            Console.WriteLine(Iscube(-1));    // True\n            Console.WriteLine(Iscube(64));    // True\n            Console.WriteLine(Iscube(0));     // True\n            Console.WriteLine(Iscube(180));   // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/78", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You have been tasked to write a function that receives \n        /// a hexadecimal number as a string and counts the number of hexadecimal \n        /// digits that are primes (prime number, or a prime, is a natural number \n        /// greater than 1 that is not a product of two smaller natural numbers).\n        /// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n        /// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n        /// So you have to determine a number of the following digits: 2, 3, 5, 7, \n        /// B (=decimal 11), D (=decimal 13).\n        /// Note: you may assume the input is always correct or empty string, \n        /// and symbols A,B,C,D,E,F are always uppercase.\n        /// Examples:\n        /// For num = \"AB\" the output should be 1.\n        /// For num = \"1077E\" the output should be 2.\n        /// For num = \"ABED1A33\" the output should be 4.\n        /// For num = \"123456789ABCDEF0\" the output should be 6.\n        /// For num = \"2020\" the output should be 2.\n        /// \n        /// </summary>\n        public static int HexKey (object num) \n        {\n            // Convert object to string\n            string hexString = num as string ?? string.Empty;\n\n            // Define the prime hexadecimal digits\n            char[] primeHexDigits = { '2', '3', '5', '7', 'B', 'D' };\n\n            // Count the number of prime hexadecimal digits in the string\n            int primeCount = 0;\n            foreach (char c in hexString)\n            {\n                if (primeHexDigits.Contains(c))\n                {\n                    primeCount++;\n                }\n            }\n\n            return primeCount;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(HexKey(\"AB\"));         // Output: 1\n            Console.WriteLine(HexKey(\"1077E\"));      // Output: 2\n            Console.WriteLine(HexKey(\"ABED1A33\"));   // Output: 4\n            Console.WriteLine(HexKey(\"123456789ABCDEF0\")); // Output: 6\n            Console.WriteLine(HexKey(\"2020\"));       // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/79", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string DecimalToBinary(int decimalNumber)\n        {\n            // Convert the decimal number to a binary string\n            string binaryString = Convert.ToString(decimalNumber, 2);\n            \n            // Add the 'db' prefix and suffix\n            string result = \"db\" + binaryString + \"db\";\n            \n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(DecimalToBinary(15));  // Output: \"db1111db\"\n            Console.WriteLine(DecimalToBinary(32));  // Output: \"db100000db\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/80", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsHappy(string s)\n        {\n            // Check if the length of the string is less than 3\n            if (s.Length < 3)\n            {\n                return false;\n            }\n\n            // Check every group of 3 consecutive characters\n            for (int i = 0; i <= s.Length - 3; i++)\n            {\n                if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsHappy(\"a\")); // False\n            Console.WriteLine(IsHappy(\"aa\")); // False\n            Console.WriteLine(IsHappy(\"abcd\")); // True\n            Console.WriteLine(IsHappy(\"aabb\")); // False\n            Console.WriteLine(IsHappy(\"adb\")); // True\n            Console.WriteLine(IsHappy(\"xyy\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/81", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// It is the last week of the semester and the teacher has to give the grades\n        /// to students. The teacher has been making her own algorithm for grading.\n        /// The only problem is, she has lost the code she used for grading.\n        /// She has given you a list of GPAs for some students and you have to write \n        /// a function that can output a list of letter grades using the following table:\n        /// GPA       |    Letter grade\n        /// 4.0                A+\n        /// > 3.7                A \n        /// > 3.3                A- \n        /// > 3.0                B+\n        /// > 2.7                B \n        /// > 2.3                B-\n        /// > 2.0                C+\n        /// > 1.7                C\n        /// > 1.3                C-\n        /// > 1.0                D+ \n        /// > 0.7                D \n        /// > 0.0                D-\n        /// 0.0                E\n        /// \n        /// \n        /// Example:\n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// \n        /// </summary>\n        public static List<string> NumericalLetterGrade (List<object> grades) \n        {\n            // Define the mapping of GPA ranges to letter grades\n            var gradeMappings = new List<(double minGPA, string grade)>\n            {\n                (4.0, \"A+\"),\n                (3.7, \"A\"),\n                (3.3, \"A-\"),\n                (3.0, \"B+\"),\n                (2.7, \"B\"),\n                (2.3, \"B-\"),\n                (2.0, \"C+\"),\n                (1.7, \"C\"),\n                (1.3, \"C-\"),\n                (1.0, \"D+\"),\n                (0.7, \"D\"),\n                (0.0, \"D-\"),\n                (-0.1, \"E\") // Handle the edge case for 0.0 GPA\n            };\n\n            var result = new List<string>();\n\n            foreach (var grade in grades)\n            {\n                if (double.TryParse(grade.ToString(), out double gpa))\n                {\n                    foreach (var (minGPA, letterGrade) in gradeMappings)\n                    {\n                        if (gpa >= minGPA)\n                        {\n                            result.Add(letterGrade);\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    throw new ArgumentException(\"Invalid GPA value.\");\n                }\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            var grades = new List<object> { 4.0, 3, 1.7, 2, 3.5 };\n            var letterGrades = NumericalLetterGrade(grades);\n\n            letterGrades.ForEach(Console.WriteLine);\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/82", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes a string and returns True if the string\n        /// length is a prime number or False otherwise\n        /// Examples\n        /// PrimeLength('Hello') == True\n        /// PrimeLength('abcdcba') == True\n        /// PrimeLength('kittens') == True\n        /// PrimeLength('orange') == False\n        /// \n        /// </summary>\n        public static bool PrimeLength(string string0)\n        {\n            int length = string0.Length;\n            return IsPrime(length);\n        }\n        \n        private static bool IsPrime(int number)\n        {\n            if (number < 2) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n            \n            int boundary = (int)Math.Floor(Math.Sqrt(number));\n            \n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n            \n            return true;\n        }\n        \n        // Test cases\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeLength(\"Hello\")); // True\n            Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n            Console.WriteLine(PrimeLength(\"kittens\")); // True\n            Console.WriteLine(PrimeLength(\"orange\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/83", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer n, return the count of the numbers of n-digit\n        /// positive integers that start or end with 1.\n        /// </summary>\n        public static int StartsOneEnds(int n)\n        {\n            if (n == 1)\n                return 1; // The only 1-digit number that starts or ends with 1 is 1 itself.\n\n            int countStartWith1 = (int)Math.Pow(10, n - 1); // Numbers that start with 1 (1XXXX... where X are any digits)\n            int countEndWith1 = (int)Math.Pow(10, n - 1);   // Numbers that end with 1 (XXXX1... where X are any digits)\n            int countStartAndEndWith1 = (int)Math.Pow(10, n - 2); // Numbers that start and end with 1 (1XXX1... where X are any digits)\n\n            return countStartWith1 + countEndWith1 - countStartAndEndWith1;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StartsOneEnds(1)); // Output: 1\n            Console.WriteLine(StartsOneEnds(2)); // Output: 18\n            Console.WriteLine(StartsOneEnds(3)); // Output: 180\n            Console.WriteLine(StartsOneEnds(4)); // Output: 1980\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/84", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer N, return the total sum of its digits in binary.\n        /// \n        /// Example\n        /// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        /// For N = 150, the sum of digits will be 6 the output should be \"110\".\n        /// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        /// \n        /// Variables:\n        /// @N integer\n        /// Constraints: 0 \u2264 N \u2264 10000.\n        /// Output:\n        /// a string of binary number\n        /// \n        /// </summary>\n        public static string Solve(int N)\n        {\n            // Step 1: Calculate the sum of the digits of N\n            int sumOfDigits = 0;\n            while (N > 0)\n            {\n                sumOfDigits += N % 10;\n                N /= 10;\n            }\n\n            // Step 2: Convert the sum to a binary string\n            string binaryString = Convert.ToString(sumOfDigits, 2);\n\n            return binaryString;\n        }\n\n        // Test cases to check the implementation\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(1000)); // Should output \"1\"\n            Console.WriteLine(Solve(150));  // Should output \"110\"\n            Console.WriteLine(Solve(147));  // Should output \"1100\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/85", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a non-empty list of integers lst, add the even elements that are at odd indices.\n        /// </summary>\n        /// <param name=\"lst\">List of integers</param>\n        /// <returns>Sum of even elements at odd indices</returns>\n        public static int Add(List<int> lst)\n        {\n            int sum = 0;\n\n            // Iterate through the list\n            for (int i = 1; i < lst.Count; i += 2)  // Start at 1 and increment by 2 to only check odd indices\n            {\n                if (lst[i] % 2 == 0)  // Check if the element at the odd index is even\n                {\n                    sum += lst[i];  // Add it to the sum\n                }\n            }\n\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            List<int> exampleList = new List<int> { 4, 2, 6, 7 };\n            int result = Add(exampleList);\n            Console.WriteLine(result);  // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/86", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function that takes a string and returns an ordered version of it.\n        /// Ordered version of string, is a string where all words (separated by space)\n        /// are replaced by a new word where all the characters arranged in\n        /// ascending order based on ascii value.\n        /// Note: You should keep the order of words and blank spaces in the sentence.\n        /// \n        /// For example:\n        /// AntiShuffle('Hi') returns 'Hi'\n        /// AntiShuffle('hello') returns 'ehllo'\n        /// AntiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n        /// \n        /// </summary>\n        public static string AntiShuffle(string s)\n        {\n            // Split the input string into words and spaces\n            var parts = Regex.Split(s, @\"(\\s+)\");\n            \n            // Process each part\n            for (int i = 0; i < parts.Length; i++)\n            {\n                if (!string.IsNullOrWhiteSpace(parts[i]))\n                {\n                    // Sort the characters in the word\n                    parts[i] = new string(parts[i].OrderBy(c => c).ToArray());\n                }\n            }\n\n            // Join the parts back into a single string\n            return string.Join(\"\", parts);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(AntiShuffle(\"Hi\")); // Output: \"Hi\"\n            Console.WriteLine(AntiShuffle(\"hello\")); // Output: \"ehllo\"\n            Console.WriteLine(AntiShuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/87", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<(int, int)> GetRow(List<List<int>> lst, int x)\n        {\n            // List to hold the coordinates\n            List<(int, int)> coordinates = new List<(int, int)>();\n\n            // Iterate through each row\n            for (int row = 0; row < lst.Count; row++)\n            {\n                // Iterate through each element in the row\n                for (int col = 0; col < lst[row].Count; col++)\n                {\n                    // Check if the current element matches x\n                    if (lst[row][col] == x)\n                    {\n                        // Add the coordinate to the list\n                        coordinates.Add((row, col));\n                    }\n                }\n            }\n\n            // Sort the coordinates by row in ascending order\n            // and by column in descending order within each row\n            var sortedCoordinates = coordinates\n                                     .OrderBy(coord => coord.Item1)\n                                     .ThenByDescending(coord => coord.Item2)\n                                     .ToList();\n\n            return sortedCoordinates;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = new List<List<int>> {\n                new List<int> { 1, 2, 3, 4, 5, 6 },\n                new List<int> { 1, 2, 3, 4, 1, 6 },\n                new List<int> { 1, 2, 3, 4, 5, 1 }\n            };\n            var result1 = GetRow(test1, 1);\n            Console.WriteLine(string.Join(\", \", result1)); // Should output: (0, 0), (1, 4), (1, 0), (2, 5), (2, 0)\n\n            var test2 = new List<List<int>> { };\n            var result2 = GetRow(test2, 1);\n            Console.WriteLine(string.Join(\", \", result2)); // Should output: \n\n            var test3 = new List<List<int>> {\n                new List<int> { },\n                new List<int> { 1 },\n                new List<int> { 1, 2, 3 }\n            };\n            var result3 = GetRow(test3, 3);\n            Console.WriteLine(string.Join(\", \", result3)); // Should output: (2, 2)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/88", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array of non-negative integers, return a copy of the given array after sorting,\n        /// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n        /// or sort it in descending order if the sum( first index value, last index value) is even.\n        /// \n        /// Note:\n        /// * don't change the given array.\n        /// \n        /// Examples:\n        /// * SortArray([]) => []\n        /// * SortArray([5]) => [5]\n        /// * SortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n        /// * SortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n        /// \n        /// </summary>\n        public static List<int> SortArray(List<int> array)\n        {\n            if (array == null || array.Count == 0)\n            {\n                return new List<int>();\n            }\n\n            int firstValue = array.First();\n            int lastValue = array.Last();\n            int sum = firstValue + lastValue;\n\n            List<int> sortedArray;\n\n            if (sum % 2 == 0)\n            {\n                sortedArray = array.OrderByDescending(x => x).ToList();\n            }\n            else\n            {\n                sortedArray = array.OrderBy(x => x).ToList();\n            }\n\n            return sortedArray;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", SortArray(new List<int> { }))); // Output: []\n            Console.WriteLine(string.Join(\", \", SortArray(new List<int> { 5 }))); // Output: [5]\n            Console.WriteLine(string.Join(\", \", SortArray(new List<int> { 2, 4, 3, 0, 1, 5 }))); // Output: [0, 1, 2, 3, 4, 5]\n            Console.WriteLine(string.Join(\", \", SortArray(new List<int> { 2, 4, 3, 0, 1, 5, 6 }))); // Output: [6, 5, 4, 3, 2, 1, 0]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/89", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Encrypt(string s)\n        {\n            // Define the alphabet\n            string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n            int shift = 4; // 2 * 2 = 4 places\n\n            // Create a dictionary to map each letter to its encrypted counterpart\n            Dictionary<char, char> encryptionMap = new Dictionary<char, char>();\n            for (int i = 0; i < alphabet.Length; i++)\n            {\n                char originalChar = alphabet[i];\n                char encryptedChar = alphabet[(i + shift) % alphabet.Length];\n                encryptionMap[originalChar] = encryptedChar;\n                encryptionMap[char.ToUpper(originalChar)] = char.ToUpper(encryptedChar);\n            }\n\n            // Build the encrypted string\n            char[] encryptedChars = new char[s.Length];\n            for (int i = 0; i < s.Length; i++)\n            {\n                char currentChar = s[i];\n                if (encryptionMap.ContainsKey(currentChar))\n                {\n                    encryptedChars[i] = encryptionMap[currentChar];\n                }\n                else\n                {\n                    encryptedChars[i] = currentChar; // If character is not in the alphabet, keep it as is\n                }\n            }\n\n            return new string(encryptedChars);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Encrypt(\"hi\")); // Output: \"lm\"\n            Console.WriteLine(Encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n            Console.WriteLine(Encrypt(\"gf\")); // Output: \"kj\"\n            Console.WriteLine(Encrypt(\"et\")); // Output: \"ix\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/90", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a list of integers.\n        /// Write a function NextSmallest() that returns the 2nd smallest element of the list.\n        /// Return None if there is no such element.\n        /// \n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest(List<int> lst)\n        {\n            // Check if the list contains less than 2 unique elements\n            var distinctElements = lst.Distinct().ToList();\n            if (distinctElements.Count < 2)\n            {\n                return null;\n            }\n\n            // Sort the distinct elements and return the 2nd smallest element\n            distinctElements.Sort();\n            return distinctElements[1];\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // should return 2\n            Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // should return 2\n            Console.WriteLine(NextSmallest(new List<int>())); // should return None (null)\n            Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // should return None (null)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/91", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int IsBored(string S)\n        {\n            // Split the input string by '.', '?', or '!' to get individual sentences\n            var sentences = Regex.Split(S, @\"[.!?]\").Select(sentence => sentence.Trim());\n\n            // Count sentences that start with the word \"I\"\n            int boredomCount = sentences.Count(sentence => sentence.StartsWith(\"I \"));\n\n            return boredomCount;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n            Console.WriteLine(IsBored(\"I am happy. I am bored. Are you?\")); // Output: 2\n            Console.WriteLine(IsBored(\"I. I? I!\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/92", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if one of the three numbers is equal to the sum of the other two, and all numbers are integers.\n        /// </summary>\n        /// <param name=\"x\">First number</param>\n        /// <param name=\"y\">Second number</param>\n        /// <param name=\"z\">Third number</param>\n        /// <returns>True if one number equals the sum of the other two and all numbers are integers, otherwise false</returns>\n        public static bool AnyInt(object x, object y, object z)\n        {\n            // Check if all inputs are integers\n            if (x is int && y is int && z is int)\n            {\n                int a = (int)x;\n                int b = (int)y;\n                int c = (int)z;\n                \n                // Check if any one of the numbers is equal to the sum of the other two\n                return a == b + c || b == a + c || c == a + b;\n            }\n            return false;\n        }\n\n        // Test the function with various examples\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(AnyInt(5, 2, 7));    // \u279e True\n            Console.WriteLine(AnyInt(3, 2, 2));    // \u279e False\n            Console.WriteLine(AnyInt(3, -2, 1));   // \u279e True\n            Console.WriteLine(AnyInt(3.6, -2.2, 2)); // \u279e False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/93", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Takes a message and encodes it by swapping the case of all letters\n        /// and replacing all vowels in the message with the letter that appears\n        /// 2 places ahead of that vowel in the English alphabet.\n        /// </summary>\n        /// <param name=\"message\">The input message</param>\n        /// <returns>The encoded message</returns>\n        public static string Encode(string message)\n        {\n            char[] encodedMessage = new char[message.Length];\n\n            for (int i = 0; i < message.Length; i++)\n            {\n                char c = message[i];\n                \n                // Swap case\n                if (char.IsUpper(c))\n                {\n                    c = char.ToLower(c);\n                }\n                else if (char.IsLower(c))\n                {\n                    c = char.ToUpper(c);\n                }\n\n                // Replace vowels\n                switch (c)\n                {\n                    case 'a':\n                        c = 'C';\n                        break;\n                    case 'e':\n                        c = 'G';\n                        break;\n                    case 'i':\n                        c = 'K';\n                        break;\n                    case 'o':\n                        c = 'Q';\n                        break;\n                    case 'u':\n                        c = 'W';\n                        break;\n                    case 'A':\n                        c = 'c';\n                        break;\n                    case 'E':\n                        c = 'g';\n                        break;\n                    case 'I':\n                        c = 'k';\n                        break;\n                    case 'O':\n                        c = 'q';\n                        break;\n                    case 'U':\n                        c = 'w';\n                        break;\n                }\n\n                encodedMessage[i] = c;\n            }\n\n            return new string(encodedMessage);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Encode(\"test\")); // Output: TGST\n            Console.WriteLine(Encode(\"This is a message\")); // Output: tHKS KS C MGSSCGG\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/94", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of integers.\n        /// You need to find the largest prime value and return the sum of its digits.\n        /// \n        /// Examples:\n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd(List<int> lst)\n        {\n            // Function to check if a number is prime\n            bool IsPrime(int num)\n            {\n                if (num <= 1) return false;\n                if (num == 2) return true;\n                if (num % 2 == 0) return false;\n                for (int i = 3; i <= Math.Sqrt(num); i += 2)\n                {\n                    if (num % i == 0) return false;\n                }\n                return true;\n            }\n\n            // Find the largest prime number\n            int largestPrime = lst.Where(IsPrime).DefaultIfEmpty(0).Max();\n\n            // Calculate the sum of the digits of the largest prime\n            int sumOfDigits = largestPrime.ToString().Sum(c => c - '0');\n\n            return sumOfDigits;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> lst1 = new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 };\n            List<int> lst2 = new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 };\n            List<int> lst3 = new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 };\n            List<int> lst4 = new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 };\n            List<int> lst5 = new List<int> { 0, 81, 12, 3, 1, 21 };\n            List<int> lst6 = new List<int> { 0, 8, 1, 2, 1, 7 };\n\n            Console.WriteLine(Skjkasdkd(lst1)); // Output: 10\n            Console.WriteLine(Skjkasdkd(lst2)); // Output: 25\n            Console.WriteLine(Skjkasdkd(lst3)); // Output: 13\n            Console.WriteLine(Skjkasdkd(lst4)); // Output: 11\n            Console.WriteLine(Skjkasdkd(lst5)); // Output: 3\n            Console.WriteLine(Skjkasdkd(lst6)); // Output: 7\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/95", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a dictionary, return True if all keys are strings in lower \n        /// case or all keys are strings in upper case, else return False.\n        /// The function should return False is the given dictionary is empty.\n        /// Examples:\n        /// CheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n        /// CheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n        /// CheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n        /// CheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n        /// CheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n        /// \n        /// </summary>\n        public static bool CheckDictCase(Dictionary<object, string> dict)\n        {\n            // Check if dictionary is empty\n            if (!dict.Any())\n            {\n                return false;\n            }\n\n            // Check if all keys are strings\n            if (dict.Keys.Any(key => !(key is string)))\n            {\n                return false;\n            }\n\n            // Get all keys as strings\n            var stringKeys = dict.Keys.Cast<string>();\n\n            // Check if all keys are in lower case\n            bool allLowerCase = stringKeys.All(key => key.All(char.IsLower));\n\n            // Check if all keys are in upper case\n            bool allUpperCase = stringKeys.All(key => key.All(char.IsUpper));\n\n            // Return true if all keys are either in lower case or upper case\n            return allLowerCase || allUpperCase;\n        }\n\n        public static void Main(string[] args)\n        {\n            var dict1 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"b\", \"banana\" } };\n            var dict2 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } };\n            var dict3 = new Dictionary<object, string> { { \"a\", \"apple\" }, { 8, \"banana\" }, { \"a\", \"apple\" } };\n            var dict4 = new Dictionary<object, string> { { \"Name\", \"John\" }, { \"Age\", \"36\" }, { \"City\", \"Houston\" } };\n            var dict5 = new Dictionary<object, string> { { \"STATE\", \"NC\" }, { \"ZIP\", \"12345\" } };\n\n            Console.WriteLine(CheckDictCase(dict1)); // Should return True\n            Console.WriteLine(CheckDictCase(dict2)); // Should return False\n            Console.WriteLine(CheckDictCase(dict3)); // Should return False\n            Console.WriteLine(CheckDictCase(dict4)); // Should return False\n            Console.WriteLine(CheckDictCase(dict5)); // Should return True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/96", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Implement a function that takes a non-negative integer and returns an array of the first n\n        /// integers that are prime numbers and less than n.\n        /// for example:\n        /// CountUpTo(5) => [2,3]\n        /// CountUpTo(11) => [2,3,5,7]\n        /// CountUpTo(0) => []\n        /// CountUpTo(20) => [2,3,5,7,11,13,17,19]\n        /// CountUpTo(1) => []\n        /// CountUpTo(18) => [2,3,5,7,11,13,17]\n        /// \n        /// </summary>\n        public static List<int> CountUpTo(int n) \n        {\n            if (n < 2)\n            {\n                return new List<int>();\n            }\n\n            bool[] isPrime = new bool[n];\n            for (int i = 2; i < n; i++)\n            {\n                isPrime[i] = true;\n            }\n\n            for (int i = 2; i * i < n; i++)\n            {\n                if (isPrime[i])\n                {\n                    for (int j = i * i; j < n; j += i)\n                    {\n                        isPrime[j] = false;\n                    }\n                }\n            }\n\n            List<int> primes = new List<int>();\n            for (int i = 2; i < n; i++)\n            {\n                if (isPrime[i])\n                {\n                    primes.Add(i);\n                }\n            }\n\n            return primes;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            Console.WriteLine(string.Join(\",\", CountUpTo(5)));  // Output: 2,3\n            Console.WriteLine(string.Join(\",\", CountUpTo(11))); // Output: 2,3,5,7\n            Console.WriteLine(string.Join(\",\", CountUpTo(0)));  // Output: \n            Console.WriteLine(string.Join(\",\", CountUpTo(20))); // Output: 2,3,5,7,11,13,17,19\n            Console.WriteLine(string.Join(\",\", CountUpTo(1)));  // Output: \n            Console.WriteLine(string.Join(\",\", CountUpTo(18))); // Output: 2,3,5,7,11,13,17\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/97", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Complete the function that takes two integers and returns \n        /// the product of their unit digits.\n        /// Assume the input is always valid.\n        /// Examples:\n        /// Multiply(148, 412) should return 16.\n        /// Multiply(19, 28) should return 72.\n        /// Multiply(2020, 1851) should return 0.\n        /// Multiply(14,-15) should return 20.\n        /// \n        /// </summary>\n        public static int Multiply(int a, int b) \n        {\n            // Extract the unit digits\n            int unitDigitA = Math.Abs(a) % 10;\n            int unitDigitB = Math.Abs(b) % 10;\n            \n            // Multiply the unit digits\n            int product = unitDigitA * unitDigitB;\n            \n            // Return the product\n            return product;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Multiply(148, 412)); // Output: 16\n            Console.WriteLine(Multiply(19, 28));   // Output: 72\n            Console.WriteLine(Multiply(2020, 1851)); // Output: 0\n            Console.WriteLine(Multiply(14, -15));  // Output: 20\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/98", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a string s, count the number of uppercase vowels in even indices.\n        /// \n        /// For example:\n        /// CountUpper('aBCdEf') returns 1\n        /// CountUpper('abcdefg') returns 0\n        /// CountUpper('dBBE') returns 0\n        /// \n        /// </summary>\n        public static int CountUpper(string s) \n        {\n            int count = 0;\n            char[] vowels = { 'A', 'E', 'I', 'O', 'U' };\n\n            for (int i = 0; i < s.Length; i += 2)\n            {\n                if (vowels.Contains(s[i]))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CountUpper(\"aBCdEf\")); // Output: 1\n            Console.WriteLine(CountUpper(\"abcdefg\")); // Output: 0\n            Console.WriteLine(CountUpper(\"dBBE\")); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/99", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger(string value) \n        {\n            if (double.TryParse(value, out double number))\n            {\n                return (int)Math.Round(number, MidpointRounding.AwayFromZero);\n            }\n            throw new ArgumentException(\"Input value is not a valid number.\");\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ClosestInteger(\"10\")); // 10\n            Console.WriteLine(ClosestInteger(\"15.3\")); // 15\n            Console.WriteLine(ClosestInteger(\"14.5\")); // 15\n            Console.WriteLine(ClosestInteger(\"-14.5\")); // -15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/100", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer n, you have to make a pile of n levels of stones.\n        /// The first level has n stones.\n        /// The number of stones in the next level is:\n        /// - the next odd number if n is odd.\n        /// - the next even number if n is even.\n        /// Return the number of stones in each level in a list, where element at index\n        /// i represents the number of stones in the level (i+1).\n        /// \n        /// Examples:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> MakeAPile(int n)\n        {\n            List<int> pile = new List<int>();\n            int currentLevelStones = n;\n            \n            for (int i = 0; i < n; i++)\n            {\n                pile.Add(currentLevelStones);\n                \n                // Determine the next number of stones\n                if (n % 2 == 0)\n                {\n                    // n is even, so we add the next even number\n                    currentLevelStones += 2;\n                }\n                else\n                {\n                    // n is odd, so we add the next odd number\n                    currentLevelStones += 2;\n                }\n            }\n            \n            return pile;\n        }\n\n        public static void Main()\n        {\n            // Example usage\n            List<int> result = MakeAPile(3);\n            Console.WriteLine(string.Join(\", \", result));  // Output: 3, 5, 7\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/101", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You will be given a string of words separated by commas or spaces. Your task is\n        /// to split the string into words and return an array of the words.\n        /// \n        /// For example:\n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString(string s) \n        {\n            // Split the string based on spaces or commas\n            string[] words = Regex.Split(s, @\"[\\s,]+\");\n\n            // Return the words as a list\n            return words.Where(word => !string.IsNullOrEmpty(word)).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = WordsString(\"Hi, my name is John\");\n            Console.WriteLine(string.Join(\", \", result1)); // Output: Hi, my, name, is, John\n\n            var result2 = WordsString(\"One, two, three, four, five, six\");\n            Console.WriteLine(string.Join(\", \", result2)); // Output: One, two, three, four, five, six\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/102", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int ChooseNum(int x, int y)\n        {\n            // Ensure x is less than or equal to y\n            if (x > y)\n            {\n                return -1;\n            }\n            \n            // Start from the largest number y and decrement to find the largest even number\n            for (int num = y; num >= x; num--)\n            {\n                if (num % 2 == 0)\n                {\n                    return num;\n                }\n            }\n\n            // If no even number is found, return -1\n            return -1;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n            Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/103", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Computes the average of the integers from n through m (including n and m).\n        /// Rounds the answer to the nearest integer and converts that to binary.\n        /// If n is greater than m, returns -1.\n        /// </summary>\n        public static object RoundedAvg(int n, int m)\n        {\n            if (n > m)\n            {\n                return -1;\n            }\n\n            // Compute the sum of integers from n to m\n            int sum = 0;\n            int count = 0;\n            for (int i = n; i <= m; i++)\n            {\n                sum += i;\n                count++;\n            }\n\n            // Compute the average\n            double average = (double)sum / count;\n\n            // Round to the nearest integer\n            int roundedAvg = (int)Math.Round(average);\n\n            // Convert to binary\n            string binaryResult = \"0b\" + Convert.ToString(roundedAvg, 2);\n\n            return binaryResult;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(RoundedAvg(1, 5));  // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5));  // Output: -1\n            Console.WriteLine(RoundedAvg(10, 20));  // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33));  // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/104", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a list of positive integers x. return a sorted list of all \n        /// elements that hasn't any even digit.\n        /// \n        /// Note: Returned list should be sorted in increasing order.\n        /// \n        /// For example:\n        /// >>> UniqueDigits([15, 33, 1422, 1])\n        /// [1, 15, 33]\n        /// >>> UniqueDigits([152, 323, 1422, 10])\n        /// []\n        /// \n        /// </summary>\n        public static List<int> UniqueDigits(List<int> x)\n        {\n            // Function to check if a number contains any even digits\n            bool HasEvenDigit(int number)\n            {\n                // Convert number to string to check each digit\n                string numStr = number.ToString();\n                foreach (char digit in numStr)\n                {\n                    // Check if the digit is even\n                    if ((digit - '0') % 2 == 0)\n                    {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            // Filter the list to remove numbers with even digits\n            List<int> filteredList = x.Where(num => !HasEvenDigit(num)).ToList();\n\n            // Sort the filtered list\n            filteredList.Sort();\n\n            // Return the sorted list\n            return filteredList;\n        }\n\n        // Testing the function\n        public static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { 15, 33, 1422, 1 };\n            List<int> result1 = UniqueDigits(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Expected output: 1, 15, 33\n\n            List<int> test2 = new List<int> { 152, 323, 1422, 10 };\n            List<int> result2 = UniqueDigits(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Expected output: (empty list)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/105", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> ByLength(List<int> arr)\n        {\n            // Dictionary to map numbers to their names\n            Dictionary<int, string> numberNames = new Dictionary<int, string>\n            {\n                { 1, \"One\" },\n                { 2, \"Two\" },\n                { 3, \"Three\" },\n                { 4, \"Four\" },\n                { 5, \"Five\" },\n                { 6, \"Six\" },\n                { 7, \"Seven\" },\n                { 8, \"Eight\" },\n                { 9, \"Nine\" }\n            };\n\n            // Filter the array to include only numbers between 1 and 9 inclusive\n            var filtered = arr.Where(n => n >= 1 && n <= 9).ToList();\n\n            // Sort the filtered array\n            filtered.Sort();\n\n            // Reverse the sorted array\n            filtered.Reverse();\n\n            // Replace each number with its corresponding name\n            var result = filtered.Select(n => numberNames[n]).ToList();\n\n            return result;\n        }\n\n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            List<int> arr1 = new List<int> { 2, 1, 1, 4, 5, 8, 2, 3 };\n            List<int> result1 = ByLength(arr1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: Eight, Five, Four, Three, Two, Two, One, One\n\n            List<int> arr2 = new List<int> { 1, -1, 55 };\n            List<int> result2 = ByLength(arr2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: One\n\n            List<int> arr3 = new List<int> { };\n            List<int> result3 = ByLength(arr3);\n            Console.WriteLine(string.Join(\", \", result3)); // Output: \n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/106", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            int n = 5;\n            List<int> result = F(n);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 2, 6, 24, 15\n        }\n\n        public static List<int> F(int n)\n        {\n            List<int> result = new List<int>();\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    result.Add(Factorial(i));\n                }\n                else\n                {\n                    result.Add(Sum(i));\n                }\n            }\n\n            return result;\n        }\n\n        private static int Factorial(int num)\n        {\n            int factorial = 1;\n            for (int i = 1; i <= num; i++)\n            {\n                factorial *= i;\n            }\n            return factorial;\n        }\n\n        private static int Sum(int num)\n        {\n            int sum = 0;\n            for (int i = 1; i <= num; i++)\n            {\n                sum += i;\n            }\n            return sum;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/107", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static (int, int) EvenOddPalindrome(int n)\n        {\n            int evenCount = 0;\n            int oddCount = 0;\n            \n            for (int i = 1; i <= n; i++)\n            {\n                if (IsPalindrome(i))\n                {\n                    if (i % 2 == 0)\n                    {\n                        evenCount++;\n                    }\n                    else\n                    {\n                        oddCount++;\n                    }\n                }\n            }\n            \n            return (evenCount, oddCount);\n        }\n        \n        private static bool IsPalindrome(int num)\n        {\n            string str = num.ToString();\n            int len = str.Length;\n            \n            for (int i = 0; i < len / 2; i++)\n            {\n                if (str[i] != str[len - i - 1])\n                {\n                    return false;\n                }\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            int n = 12;\n            var result = EvenOddPalindrome(n);\n            Console.WriteLine($\"Even palindromes: {result.Item1}, Odd palindromes: {result.Item2}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/108", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int CountNums(List<int> arr)\n        {\n            int count = 0;\n\n            foreach (var num in arr)\n            {\n                int sumOfDigits = SumOfDigits(num);\n                if (sumOfDigits > 0)\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        private static int SumOfDigits(int num)\n        {\n            int sum = 0;\n            bool isNegative = num < 0;\n            num = Math.Abs(num);\n\n            while (num > 0)\n            {\n                sum += num % 10;\n                num /= 10;\n            }\n\n            return isNegative ? -sum : sum;\n        }\n\n        // Sample test cases\n        public static void Main()\n        {\n            Console.WriteLine(CountNums(new List<int>()));               // Output: 0\n            Console.WriteLine(CountNums(new List<int> { -1, 11, -11 })); // Output: 1\n            Console.WriteLine(CountNums(new List<int> { 1, 1, 2 }));     // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/109", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool MoveOneBall(List<int> arr)\n        {\n            if (arr.Count == 0)\n                return true;\n\n            int n = arr.Count;\n            int rotationPoint = -1;\n            \n            for (int i = 0; i < n - 1; i++)\n            {\n                if (arr[i] > arr[i + 1])\n                {\n                    if (rotationPoint != -1)\n                    {\n                        // More than one rotation point means it can't be sorted by right shifts\n                        return false;\n                    }\n                    rotationPoint = i + 1;\n                }\n            }\n\n            if (rotationPoint == -1)\n            {\n                // Already sorted\n                return true;\n            }\n\n            // Check if the second part and the first part are in order\n            for (int i = rotationPoint; i < n - 1; i++)\n            {\n                if (arr[i] > arr[i + 1])\n                {\n                    return false;\n                }\n            }\n\n            // Finally check if the last element of the second part is less than the first element of the first part\n            return arr[n - 1] <= arr[0];\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { 3, 4, 5, 1, 2 };\n            List<int> test2 = new List<int> { 3, 5, 4, 1, 2 };\n            List<int> test3 = new List<int> { 1, 2, 3, 4, 5 };\n            List<int> test4 = new List<int> { 5, 1, 2, 3, 4 };\n            List<int> test5 = new List<int>();\n\n            Console.WriteLine(MoveOneBall(test1)); // True\n            Console.WriteLine(MoveOneBall(test2)); // False\n            Console.WriteLine(MoveOneBall(test3)); // True\n            Console.WriteLine(MoveOneBall(test4)); // True\n            Console.WriteLine(MoveOneBall(test5)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/110", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines whether it is possible to perform an exchange of elements between the two lists\n        /// to make lst1 a list of only even numbers.\n        /// </summary>\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Find the number of odd numbers in lst1\n            int oddCountInLst1 = lst1.Count(n => n % 2 != 0);\n            \n            // Find the number of even numbers in lst2\n            int evenCountInLst2 = lst2.Count(n => n % 2 == 0);\n            \n            // If the number of odd numbers in lst1 is less than or equal to\n            // the number of even numbers in lst2, return \"YES\", otherwise \"NO\"\n            return oddCountInLst1 <= evenCountInLst2 ? \"YES\" : \"NO\";\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Expected: \"YES\"\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Expected: \"NO\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/111", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a string representing a space separated lowercase letters, return a dictionary\n        /// of the letter with the most repetition and containing the corresponding count.\n        /// If several letters have the same occurrence, return all of them.\n        /// \n        /// Example:\n        /// Histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n        /// Histogram('a b b a') == {'a': 2, 'b': 2}\n        /// Histogram('a b c a b') == {'a': 2, 'b': 2}\n        /// Histogram('b b b b a') == {'b': 4}\n        /// Histogram('') == {}\n        /// \n        /// </summary>\n        public static Dictionary<string, int> Histogram(string test)\n        {\n            // Initialize the dictionary to store counts\n            Dictionary<string, int> letterCounts = new Dictionary<string, int>();\n\n            // Split the string into letters\n            string[] letters = test.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\n            // Count the occurrences of each letter\n            foreach (var letter in letters)\n            {\n                if (letterCounts.ContainsKey(letter))\n                {\n                    letterCounts[letter]++;\n                }\n                else\n                {\n                    letterCounts.Add(letter, 1);\n                }\n            }\n\n            // Find the maximum count\n            int maxCount = letterCounts.Values.DefaultIfEmpty(0).Max();\n\n            // Create the result dictionary with only the letters having the maximum count\n            Dictionary<string, int> result = letterCounts\n                .Where(kvp => kvp.Value == maxCount)\n                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            var result1 = Histogram(\"a b c\");\n            Console.WriteLine(string.Join(\", \", result1.Select(kvp => $\"{kvp.Key}: {kvp.Value}\")));\n\n            var result2 = Histogram(\"a b b a\");\n            Console.WriteLine(string.Join(\", \", result2.Select(kvp => $\"{kvp.Key}: {kvp.Value}\")));\n\n            var result3 = Histogram(\"a b c a b\");\n            Console.WriteLine(string.Join(\", \", result3.Select(kvp => $\"{kvp.Key}: {kvp.Value}\")));\n\n            var result4 = Histogram(\"b b b b a\");\n            Console.WriteLine(string.Join(\", \", result4.Select(kvp => $\"{kvp.Key}: {kvp.Value}\")));\n\n            var result5 = Histogram(\"\");\n            Console.WriteLine(string.Join(\", \", result5.Select(kvp => $\"{kvp.Key}: {kvp.Value}\")));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/112", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task\n        /// We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n        /// then check if the result string is palindrome.\n        /// A string is called palindrome if it reads the same backward as forward.\n        /// You should return a tuple containing the result string and True/False for the check.\n        /// Example\n        /// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n        /// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n        /// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n        /// \n        /// </summary>\n        public static List<object> ReverseDelete(string s, string c)\n        {\n            // Create a hash set for characters to be removed for O(1) lookups\n            HashSet<char> charsToRemove = new HashSet<char>(c);\n            \n            // Construct the result string by excluding characters in charsToRemove\n            var result = new List<char>();\n            foreach (var ch in s)\n            {\n                if (!charsToRemove.Contains(ch))\n                {\n                    result.Add(ch);\n                }\n            }\n\n            // Convert the list of characters to a string\n            string resultString = new string(result.ToArray());\n\n            // Check if the result string is a palindrome\n            bool isPalindrome = IsPalindrome(resultString);\n\n            // Return the result as a list containing the result string and the palindrome check\n            return new List<object> { resultString, isPalindrome };\n        }\n\n        /// <summary>\n        /// Helper method to check if a string is a palindrome\n        /// </summary>\n        private static bool IsPalindrome(string str)\n        {\n            int left = 0;\n            int right = str.Length - 1;\n\n            while (left < right)\n            {\n                if (str[left] != str[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n\n            return true;\n        }\n        \n        // For testing purposes\n        public static void Main()\n        {\n            var result1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"Result: {result1[0]}, IsPalindrome: {result1[1]}\"); // Output: Result: bcd, IsPalindrome: False\n            \n            var result2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"Result: {result2[0]}, IsPalindrome: {result2[1]}\"); // Output: Result: acdef, IsPalindrome: False\n            \n            var result3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"Result: {result3[0]}, IsPalindrome: {result3[1]}\"); // Output: Result: cdedc, IsPalindrome: True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/113", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a list of strings, where each string consists of only digits, return a list.\n        /// Each element i of the output should be \"the number of odd elements in the\n        /// string i of the input.\" where all the i's should be replaced by the number\n        /// of odd digits in the i'th string of the input.\n        /// \n        /// >>> OddCount(['1234567'])\n        /// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        /// >>> OddCount(['3',\"11111111\"])\n        /// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n        /// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n        /// \n        /// </summary>\n        public static List<string> OddCount(List<string> lst)\n        {\n            var result = new List<string>();\n            string template = \"the number of odd elements in the string i of the input.\";\n\n            foreach (var str in lst)\n            {\n                int oddCount = str.Count(c => \"13579\".Contains(c));\n                string resultString = template.Replace(\"i\", oddCount.ToString());\n                result.Add(resultString);\n            }\n\n            return result;\n        }\n\n        public static void Main()\n        {\n            // Test cases\n            var test1 = new List<string> { \"1234567\" };\n            var test2 = new List<string> { \"3\", \"11111111\" };\n\n            Console.WriteLine(string.Join(\"\\n\", OddCount(test1)));\n            Console.WriteLine(string.Join(\"\\n\", OddCount(test2)));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/114", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        /// of nums.\n        /// Example\n        /// MinSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n        /// MinSubArraySum([-1, -2, -3]) == -6\n        /// \n        /// </summary>\n        public static int MinSubArraySum(List<int> nums)\n        {\n            if (nums == null || nums.Count == 0)\n                throw new ArgumentException(\"The input list cannot be null or empty.\");\n\n            int minEndingHere = nums[0];\n            int minSoFar = nums[0];\n\n            for (int i = 1; i < nums.Count; i++)\n            {\n                minEndingHere = Math.Min(nums[i], minEndingHere + nums[i]);\n                minSoFar = Math.Min(minSoFar, minEndingHere);\n            }\n\n            return minSoFar;\n        }\n\n        // Example Usage\n        public static void Main(string[] args)\n        {\n            List<int> nums1 = new List<int> { 2, 3, 4, 1, 2, 4 };\n            List<int> nums2 = new List<int> { -1, -2, -3 };\n\n            Console.WriteLine(MinSubArraySum(nums1)); // Output: 1\n            Console.WriteLine(MinSubArraySum(nums2)); // Output: -6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/115", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int MaxFill(List<List<int>> grid, int capacity)\n        {\n            // Count the total number of water units in the grid\n            int totalWaterUnits = 0;\n            foreach (var row in grid)\n            {\n                totalWaterUnits += row.Count(cell => cell == 1);\n            }\n\n            // Calculate the number of times the bucket needs to be lowered\n            return (int)Math.Ceiling((double)totalWaterUnits / capacity);\n        }\n\n        static void Main(string[] args)\n        {\n            // Example 1\n            List<List<int>> grid1 = new List<List<int>>\n            {\n                new List<int> { 0, 0, 1, 0 },\n                new List<int> { 0, 1, 0, 0 },\n                new List<int> { 1, 1, 1, 1 }\n            };\n            int capacity1 = 1;\n            Console.WriteLine(MaxFill(grid1, capacity1)); // Output: 6\n\n            // Example 2\n            List<List<int>> grid2 = new List<List<int>>\n            {\n                new List<int> { 0, 0, 1, 1 },\n                new List<int> { 0, 0, 0, 0 },\n                new List<int> { 1, 1, 1, 1 },\n                new List<int> { 0, 1, 1, 1 }\n            };\n            int capacity2 = 2;\n            Console.WriteLine(MaxFill(grid2, capacity2)); // Output: 5\n\n            // Example 3\n            List<List<int>> grid3 = new List<List<int>>\n            {\n                new List<int> { 0, 0, 0 },\n                new List<int> { 0, 0, 0 }\n            };\n            int capacity3 = 5;\n            Console.WriteLine(MaxFill(grid3, capacity3)); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/116", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Sorts an array of non-negative integers according to\n        /// the number of ones in their binary representation in ascending order.\n        /// For similar number of ones, sorts based on the decimal value.\n        /// </summary>\n        public static List<int> SortArray(List<int> arr)\n        {\n            return arr.OrderBy(num => Convert.ToString(num, 2).Count(c => c == '1'))\n                      .ThenBy(num => num)\n                      .ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> arr1 = new List<int> { 1, 5, 2, 3, 4 };\n            List<int> result1 = SortArray(arr1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 2, 3, 4, 5\n\n            List<int> arr2 = new List<int> { -2, -3, -4, -5, -6 };\n            List<int> result2 = SortArray(arr2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: -6, -5, -4, -3, -2\n\n            List<int> arr3 = new List<int> { 1, 0, 2, 3, 4 };\n            List<int> result3 = SortArray(arr3);\n            Console.WriteLine(string.Join(\", \", result3)); // Output: 0, 1, 2, 3, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/117", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            if (string.IsNullOrEmpty(s)) return new List<string>();\n\n            // Define the consonants\n            HashSet<char> consonants = new HashSet<char>(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\");\n            \n            // Split the string into words\n            string[] words = s.Split(' ');\n\n            // Resultant list to hold words with exactly n consonants\n            List<string> result = new List<string>();\n\n            foreach (string word in words)\n            {\n                // Count the consonants in the word\n                int consonantCount = 0;\n                foreach (char c in word)\n                {\n                    if (consonants.Contains(c))\n                    {\n                        consonantCount++;\n                    }\n                }\n\n                // If the word contains exactly n consonants, add it to the result\n                if (consonantCount == n)\n                {\n                    result.Add(word);\n                }\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // [\"little\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // [\"Mary\", \"lamb\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"simple white space\", 2))); // []\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Hello world\", 4))); // [\"world\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Uncle sam\", 3))); // [\"Uncle\"]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/118", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string GetClosestVowel(string word)\n        {\n            // Define vowels\n            string vowels = \"AEIOUaeiou\";\n            \n            // Start from the second last character to the second character\n            for (int i = word.Length - 2; i > 0; i--)\n            {\n                // Check if the current character is a vowel\n                if (vowels.Contains(word[i]))\n                {\n                    // Check if the characters before and after are consonants\n                    if (!vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1]))\n                    {\n                        return word[i].ToString();\n                    }\n                }\n            }\n            \n            // If no valid vowel is found, return an empty string\n            return string.Empty;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(GetClosestVowel(\"yogurt\")); // Output: \"u\"\n            Console.WriteLine(GetClosestVowel(\"FULL\"));   // Output: \"U\"\n            Console.WriteLine(GetClosestVowel(\"quick\"));  // Output: \"\"\n            Console.WriteLine(GetClosestVowel(\"ab\"));     // Output: \"\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/119", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string MatchParens(List<string> lst)\n        {\n            // Helper function to check if a string is balanced\n            bool IsBalanced(string s)\n            {\n                int balance = 0;\n                foreach (char c in s)\n                {\n                    if (c == '(')\n                        balance++;\n                    else if (c == ')')\n                        balance--;\n                    \n                    // If at any point balance is negative, it's not balanced\n                    if (balance < 0)\n                        return false;\n                }\n                // Finally, balance should be zero\n                return balance == 0;\n            }\n\n            // Get the two strings from the list\n            string str1 = lst[0];\n            string str2 = lst[1];\n\n            // Check both possible concatenations\n            if (IsBalanced(str1 + str2) || IsBalanced(str2 + str1))\n            {\n                return \"Yes\";\n            }\n\n            return \"No\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<string> test1 = new List<string> { \"()(\", \")\" };\n            List<string> test2 = new List<string> { \")\", \")\" };\n\n            Console.WriteLine(MatchParens(test1)); // Output: \"Yes\"\n            Console.WriteLine(MatchParens(test2)); // Output: \"No\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/120", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given an array arr of integers and a positive integer k, return a sorted list \n        /// of length k with the Maximum k numbers in arr.\n        /// </summary>\n        public static List<int> Maximum(List<int> arr, int k)\n        {\n            // Sort the array in descending order\n            List<int> sortedDesc = arr.OrderByDescending(x => x).ToList();\n\n            // Take the first k elements\n            List<int> topK = sortedDesc.Take(k).ToList();\n\n            // Sort the k elements in ascending order\n            topK.Sort();\n\n            return topK;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> arr1 = new List<int> { -3, -4, 5 };\n            int k1 = 3;\n            List<int> result1 = Maximum(arr1, k1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: [-4, -3, 5]\n\n            List<int> arr2 = new List<int> { 4, -4, 4 };\n            int k2 = 2;\n            List<int> result2 = Maximum(arr2, k2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: [4, 4]\n\n            List<int> arr3 = new List<int> { -3, 2, 1, 2, -1, -2, 1 };\n            int k3 = 1;\n            List<int> result3 = Maximum(arr3, k3);\n            Console.WriteLine(string.Join(\", \", result3)); // Output: [2]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/121", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n        /// \n        /// \n        /// Examples\n        /// Solution([5, 8, 7, 1]) ==> 12\n        /// Solution([3, 3, 3, 3, 3]) ==> 9\n        /// Solution([30, 13, 24, 321]) ==>0\n        /// \n        /// </summary>\n        public static int Solution(List<int> lst)\n        {\n            int sum = 0;\n            for (int i = 0; i < lst.Count; i++)\n            {\n                if (i % 2 == 0 && lst[i] % 2 != 0)\n                {\n                    sum += lst[i];\n                }\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { 5, 8, 7, 1 };\n            List<int> test2 = new List<int> { 3, 3, 3, 3, 3 };\n            List<int> test3 = new List<int> { 30, 13, 24, 321 };\n\n            Console.WriteLine(Solution(test1)); // Output: 12\n            Console.WriteLine(Solution(test2)); // Output: 9\n            Console.WriteLine(Solution(test3)); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/122", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a non-empty array of integers arr and an integer k, return\n        /// the sum of the elements with at most two digits from the first k elements of arr.\n        /// \n        /// Example:\n        /// \n        /// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        /// Output: 24 # sum of 21 + 3\n        /// \n        /// Constraints:\n        /// 1. 1 <= len(arr) <= 100\n        /// 2. 1 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static int AddElements(List<int> arr, int k)\n        {\n            int sum = 0;\n            \n            for (int i = 0; i < k; i++)\n            {\n                if (Math.Abs(arr[i]) <= 99)\n                {\n                    sum += arr[i];\n                }\n            }\n            \n            return sum;\n        }\n        \n        public static void Main(string[] args)\n        {\n            List<int> arr = new List<int> { 111, 21, 3, 4000, 5, 6, 7, 8, 9 };\n            int k = 4;\n            Console.WriteLine(AddElements(arr, k)); // Output: 24\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/123", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n        /// \n        /// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n        /// as follows: start with any positive integer n. Then each term is obtained from the \n        /// previous term as follows: if the previous term is even, the next term is one half of \n        /// the previous term. If the previous term is odd, the next term is 3 times the previous\n        /// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n        /// \n        /// Note: \n        /// 1. Collatz(1) is [1].\n        /// 2. returned list sorted in increasing order.\n        /// \n        /// For example:\n        /// GetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n        /// \n        /// </summary>\n        public static List<int> GetOddCollatz(int n)\n        {\n            List<int> oddNumbers = new List<int>();\n\n            while (n != 1)\n            {\n                if (n % 2 != 0)\n                {\n                    oddNumbers.Add(n);\n                }\n                \n                if (n % 2 == 0)\n                {\n                    n = n / 2;\n                }\n                else\n                {\n                    n = 3 * n + 1;\n                }\n            }\n\n            // Add the final 1 to the list\n            oddNumbers.Add(1);\n            \n            // Sort the list\n            oddNumbers.Sort();\n\n            return oddNumbers;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            int n = 5;\n            List<int> result = GetOddCollatz(n);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/124", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool ValidDate(string date)\n        {\n            // Check if the date string is not empty\n            if (string.IsNullOrEmpty(date))\n            {\n                return false;\n            }\n\n            // Regex to check the format mm-dd-yyyy\n            string pattern = @\"^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(\\d{4})$\";\n            Regex regex = new Regex(pattern);\n\n            // Validate the format\n            if (!regex.IsMatch(date))\n            {\n                return false;\n            }\n\n            // Extract the parts of the date\n            string[] parts = date.Split('-');\n            int month = int.Parse(parts[0]);\n            int day = int.Parse(parts[1]);\n            int year = int.Parse(parts[2]);\n\n            // Validate the month\n            if (month < 1 || month > 12)\n            {\n                return false;\n            }\n\n            // Validate the day based on the month\n            if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30))\n            {\n                return false;\n            }\n            else if (month == 2)\n            {\n                // Check for leap year\n                bool isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n                if (isLeapYear && (day < 1 || day > 29))\n                {\n                    return false;\n                }\n                else if (!isLeapYear && (day < 1 || day > 28))\n                {\n                    return false;\n                }\n            }\n            else if (day < 1 || day > 31)\n            {\n                return false;\n            }\n\n            // If all checks pass, the date is valid\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ValidDate(\"03-11-2000\")); // True\n            Console.WriteLine(ValidDate(\"15-01-2012\")); // False\n            Console.WriteLine(ValidDate(\"04-0-2040\"));  // False\n            Console.WriteLine(ValidDate(\"06-04-2020\")); // True\n            Console.WriteLine(ValidDate(\"06/04/2020\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/125", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object SplitWords(string txt)\n        {\n            // Check if the string contains whitespace\n            if (txt.Contains(' '))\n            {\n                return txt.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n            }\n            // Check if the string contains a comma\n            else if (txt.Contains(','))\n            {\n                return txt.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n            }\n            // If neither whitespace nor comma is present, count odd-order lower-case letters\n            else\n            {\n                int oddCount = 0;\n                foreach (char c in txt)\n                {\n                    if (char.IsLower(c))\n                    {\n                        int order = c - 'a';\n                        if (order % 2 == 0)\n                        {\n                            oddCount++;\n                        }\n                    }\n                }\n                return oddCount;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", (List<string>)SplitWords(\"Hello world!\"))); // Output: Hello, world!\n            Console.WriteLine(string.Join(\", \", (List<string>)SplitWords(\"Hello,world!\"))); // Output: Hello, world!\n            Console.WriteLine(SplitWords(\"abcdef\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/126", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a list of numbers, return whether or not they are sorted\n        /// in ascending order. If list has more than 1 duplicate of the same\n        /// number, return False. Assume no negative numbers and only integers.\n        /// </summary>\n        public static bool IsSorted(List<int> lst)\n        {\n            if (lst == null || lst.Count == 0)\n                return true;\n\n            Dictionary<int, int> countMap = new Dictionary<int, int>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                // Check if the list is sorted in ascending order\n                if (i > 0 && lst[i] < lst[i - 1])\n                {\n                    return false;\n                }\n\n                // Count occurrences of each number\n                if (countMap.ContainsKey(lst[i]))\n                {\n                    countMap[lst[i]]++;\n                }\n                else\n                {\n                    countMap[lst[i]] = 1;\n                }\n\n                // If any number appears more than twice, return false\n                if (countMap[lst[i]] > 2)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(IsSorted(new List<int> { 5 })); // \u279e True\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 3, 4, 5 })); // \u279e True\n            Console.WriteLine(IsSorted(new List<int> { 1, 3, 2, 4, 5 })); // \u279e False\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 3, 4, 5, 6 })); // \u279e True\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 3, 4, 5, 6, 7 })); // \u279e True\n            Console.WriteLine(IsSorted(new List<int> { 1, 3, 2, 4, 5, 6, 7 })); // \u279e False\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 2, 3, 3, 4 })); // \u279e True\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 2, 2, 3, 4 })); // \u279e False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/127", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines whether the length of the intersection of two intervals is a prime number.\n        /// </summary>\n        /// <param name=\"interval1\">First interval as a list of two integers [start, end]</param>\n        /// <param name=\"interval2\">Second interval as a list of two integers [start, end]</param>\n        /// <returns>\"YES\" if the length of the intersection is prime, \"NO\" otherwise</returns>\n        public static string Intersection(List<int> interval1, List<int> interval2)\n        {\n            int start1 = interval1[0];\n            int end1 = interval1[1];\n            int start2 = interval2[0];\n            int end2 = interval2[1];\n\n            // Calculate intersection bounds\n            int intersectionStart = Math.Max(start1, start2);\n            int intersectionEnd = Math.Min(end1, end2);\n\n            // Check if there is an intersection\n            if (intersectionStart > intersectionEnd)\n            {\n                return \"NO\";\n            }\n\n            // Calculate the length of the intersection\n            int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n            // Check if the length is a prime number\n            if (IsPrime(intersectionLength))\n            {\n                return \"YES\";\n            }\n            else\n            {\n                return \"NO\";\n            }\n        }\n\n        /// <summary>\n        /// Determines if a given number is prime.\n        /// </summary>\n        /// <param name=\"number\">Number to check</param>\n        /// <returns>True if the number is prime, false otherwise</returns>\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true; // 2 is the only even prime number\n            if (number % 2 == 0) return false; // Other even numbers are not prime\n\n            for (int i = 3; i <= Math.Sqrt(number); i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        // Example usage\n        public static void Main()\n        {\n            Console.WriteLine(Intersection(new List<int> { 1, 2 }, new List<int> { 2, 3 })); // Output: NO\n            Console.WriteLine(Intersection(new List<int> { -1, 1 }, new List<int> { 0, 4 })); // Output: NO\n            Console.WriteLine(Intersection(new List<int> { -3, -1 }, new List<int> { -5, 5 })); // Output: YES\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/128", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given an array arr of integers and you need to return\n        /// sum of magnitudes of integers multiplied by product of all signs\n        /// of each number in the array, represented by 1, -1 or 0.\n        /// Note: return None for empty arr.\n        /// \n        /// Example:\n        /// >>> ProdSigns([1, 2, 2, -4]) == -9\n        /// >>> ProdSigns([0, 1]) == 0\n        /// >>> ProdSigns([]) == None\n        /// \n        /// </summary>\n        public static object ProdSigns(List<int> arr)\n        {\n            if (arr == null || arr.Count == 0)\n            {\n                return null; // Returning null to represent None\n            }\n\n            int sumOfMagnitudes = 0;\n            int productOfSigns = 1;\n\n            foreach (int num in arr)\n            {\n                sumOfMagnitudes += Math.Abs(num);\n                if (num > 0)\n                {\n                    productOfSigns *= 1;\n                }\n                else if (num < 0)\n                {\n                    productOfSigns *= -1;\n                }\n                else\n                {\n                    productOfSigns *= 0;\n                }\n            }\n\n            return sumOfMagnitudes * productOfSigns;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/129", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MinPath(List<List<int>> grid, int k)\n        {\n            int n = grid.Count;\n            List<int> result = null;\n\n            // Directions for moving in the grid (right, down, left, up)\n            int[] dx = { 0, 1, 0, -1 };\n            int[] dy = { 1, 0, -1, 0 };\n\n            void DFS(int x, int y, List<int> path)\n            {\n                if (path.Count == k)\n                {\n                    if (result == null || ComparePaths(path, result) < 0)\n                    {\n                        result = new List<int>(path);\n                    }\n                    return;\n                }\n\n                for (int i = 0; i < 4; i++)\n                {\n                    int nx = x + dx[i];\n                    int ny = y + dy[i];\n\n                    if (nx >= 0 && nx < n && ny >= 0 && ny < n)\n                    {\n                        path.Add(grid[nx][ny]);\n                        DFS(nx, ny, path);\n                        path.RemoveAt(path.Count - 1);\n                    }\n                }\n            }\n\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = 0; j < n; j++)\n                {\n                    DFS(i, j, new List<int> { grid[i][j] });\n                }\n            }\n\n            return result;\n        }\n\n        private static int ComparePaths(List<int> path1, List<int> path2)\n        {\n            for (int i = 0; i < path1.Count; i++)\n            {\n                if (path1[i] < path2[i]) return -1;\n                if (path1[i] > path2[i]) return 1;\n            }\n            return 0;\n        }\n\n        static void Main(string[] args)\n        {\n            List<List<int>> grid1 = new List<List<int>>\n            {\n                new List<int> { 1, 2, 3 },\n                new List<int> { 4, 5, 6 },\n                new List<int> { 7, 8, 9 }\n            };\n            int k1 = 3;\n            Console.WriteLine(string.Join(\", \", MinPath(grid1, k1))); // Output: [1, 2, 1]\n\n            List<List<int>> grid2 = new List<List<int>>\n            {\n                new List<int> { 5, 9, 3 },\n                new List<int> { 4, 1, 6 },\n                new List<int> { 7, 8, 2 }\n            };\n            int k2 = 1;\n            Console.WriteLine(string.Join(\", \", MinPath(grid2, k2))); // Output: [1]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/130", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n        /// the last couple centuries. However, what people don't know is Tribonacci sequence.\n        /// Tribonacci sequence is defined by the recurrence:\n        /// Tri(1) = 3\n        /// Tri(n) = 1 + n / 2, if n is even.\n        /// Tri(n) =  Tri(n - 1) + Tri(n - 2) + Tri(n + 1), if n is odd.\n        /// For example:\n        /// Tri(2) = 1 + (2 / 2) = 2\n        /// Tri(4) = 3\n        /// Tri(3) = Tri(2) + Tri(1) + Tri(4)\n        /// = 2 + 3 + 3 = 8 \n        /// You are given a non-negative integer number n, you have to a return a list of the \n        /// first n + 1 numbers of the Tribonacci sequence.\n        /// Examples:\n        /// Tri(3) = [1, 3, 2, 8]\n        /// \n        /// </summary>\n        public static List<int> Tri(int n)\n        {\n            List<int> sequence = new List<int>(new int[n + 1]);\n            \n            // Base case\n            if (n >= 1)\n            {\n                sequence[1] = 3;\n            }\n\n            for (int i = 2; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    sequence[i] = 1 + i / 2;\n                }\n                else\n                {\n                    sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n                }\n            }\n\n            // Adjust the sequence for odd values\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 != 0 && i + 1 <= n)\n                {\n                    sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n                }\n            }\n\n            return sequence;\n        }\n\n        public static void Main()\n        {\n            var result = Tri(3);\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/131", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Digits(int n)\n        {\n            // Convert the integer to a string to easily iterate over each digit\n            string numberStr = n.ToString();\n            \n            // Initialize the product to 1 (neutral element of multiplication)\n            int product = 1;\n            bool hasOddDigit = false;\n\n            // Iterate through each character in the string\n            foreach (char c in numberStr)\n            {\n                // Convert the character to an integer digit\n                int digit = c - '0';\n\n                // Check if the digit is odd\n                if (digit % 2 != 0)\n                {\n                    // Multiply the product by the odd digit\n                    product *= digit;\n                    hasOddDigit = true;\n                }\n            }\n\n            // If no odd digits were found, return 0\n            if (!hasOddDigit)\n            {\n                return 0;\n            }\n\n            // Return the computed product of odd digits\n            return product;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Digits(1));      // Output: 1\n            Console.WriteLine(Digits(4));      // Output: 0\n            Console.WriteLine(Digits(235));    // Output: 15\n            Console.WriteLine(Digits(2468));   // Output: 0\n            Console.WriteLine(Digits(13579));  // Output: 945\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/132", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Takes a string containing only square brackets and returns True if there is a valid subsequence\n        /// of brackets where at least one bracket in the subsequence is nested.\n        /// </summary>\n        public static bool IsNested(string string0)\n        {\n            // A stack to keep track of opening brackets\n            var stack = new Stack<char>();\n            \n            // Flag to check if we have encountered nested brackets\n            bool hasNested = false;\n\n            foreach (var ch in string0)\n            {\n                if (ch == '[')\n                {\n                    // Push opening bracket onto stack\n                    stack.Push(ch);\n                }\n                else if (ch == ']')\n                {\n                    if (stack.Count > 0)\n                    {\n                        // Pop from stack if there's a matching opening bracket\n                        stack.Pop();\n                        \n                        // If stack still has elements, it indicates nesting\n                        if (stack.Count > 0)\n                        {\n                            hasNested = true;\n                        }\n                    }\n                    else\n                    {\n                        // No matching opening bracket for current closing bracket\n                        return false;\n                    }\n                }\n            }\n\n            // If stack is empty and we have encountered nested brackets\n            return stack.Count == 0 && hasNested;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsNested(\"[[]]\")); // \u279e True\n            Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // \u279e False\n            Console.WriteLine(IsNested(\"[][]\")); // \u279e False\n            Console.WriteLine(IsNested(\"[]\")); // \u279e False\n            Console.WriteLine(IsNested(\"[[][]]\")); // \u279e True\n            Console.WriteLine(IsNested(\"[[]][[\")); // \u279e True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/133", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// </summary>\n        public static int SumSquares(List<object> lst)\n        {\n            // Initialize the sum to 0\n            int sum = 0;\n\n            // Iterate through each element in the list\n            foreach (var item in lst)\n            {\n                // Convert item to double\n                double number;\n                if (item is int)\n                {\n                    number = Convert.ToDouble(item);\n                }\n                else if (item is double)\n                {\n                    number = (double)item;\n                }\n                else if (item is string)\n                {\n                    number = Convert.ToDouble(item);\n                }\n                else\n                {\n                    // Skip unexpected types\n                    continue;\n                }\n\n                // Apply ceiling function\n                int ceilingValue = (int)Math.Ceiling(number);\n\n                // Square the ceiling value\n                int squaredValue = ceilingValue * ceilingValue;\n\n                // Add the squared value to the sum\n                sum += squaredValue;\n            }\n\n            // Return the final sum\n            return sum;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<object> list1 = new List<object> { 1, 2, 3 };\n            Console.WriteLine(SumSquares(list1)); // Output: 14\n\n            List<object> list2 = new List<object> { 1, 4, 9 };\n            Console.WriteLine(SumSquares(list2)); // Output: 98\n\n            List<object> list3 = new List<object> { 1, 3, 5, 7 };\n            Console.WriteLine(SumSquares(list3)); // Output: 84\n\n            List<object> list4 = new List<object> { 1.4, 4.2, 0 };\n            Console.WriteLine(SumSquares(list4)); // Output: 29\n\n            List<object> list5 = new List<object> { -2.4, 1, 1 };\n            Console.WriteLine(SumSquares(list5)); // Output: 6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/134", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns True if the last character\n        /// of a given string is an alphabetical character and is not\n        /// a part of a word, and False otherwise.\n        /// Note: \"word\" is a group of characters separated by space.\n        /// \n        /// Examples:\n        /// CheckIfLastCharIsALetter(\"apple pie\") \u279e False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") \u279e True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") \u279e False\n        /// CheckIfLastCharIsALetter(\"\") \u279e False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            // Step 1: Trim the trailing spaces\n            txt = txt.TrimEnd();\n\n            // Step 2: Check if the string is empty\n            if (string.IsNullOrEmpty(txt))\n            {\n                return false;\n            }\n\n            // Step 3: Get the last character\n            char lastChar = txt[txt.Length - 1];\n\n            // Step 4: Check if the last character is a letter\n            if (!char.IsLetter(lastChar))\n            {\n                return false;\n            }\n\n            // Step 5: Check if the last character is part of a word\n            // A character is not part of a word if there is a space before it\n            int secondLastCharIndex = txt.Length - 2;\n            if (secondLastCharIndex >= 0 && txt[secondLastCharIndex] != ' ')\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // \u279e False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/135", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Returns the largest index of an element which is not greater than or equal to the element immediately preceding it.\n        /// If no such element exists, returns -1.\n        /// </summary>\n        /// <param name=\"arr\">List of integers.</param>\n        /// <returns>Largest index of the element which is not greater than or equal to the element immediately preceding it, or -1 if no such element exists.</returns>\n        public static int CanArrange(List<int> arr)\n        {\n            // Initialize the result to -1, assuming no such element exists.\n            int result = -1;\n\n            // Iterate through the list starting from the second element.\n            for (int i = 1; i < arr.Count; i++)\n            {\n                // Check if the current element is not greater than or equal to the previous element.\n                if (arr[i] < arr[i - 1])\n                {\n                    // Update the result to the current index.\n                    result = i;\n                }\n            }\n\n            // Return the result.\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage.\n            List<int> example1 = new List<int> { 1, 2, 4, 3, 5 };\n            List<int> example2 = new List<int> { 1, 2, 3 };\n\n            Console.WriteLine(CanArrange(example1)); // Output: 3\n            Console.WriteLine(CanArrange(example2)); // Output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/136", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns a tuple (a, b), where 'a' is\n        /// the largest of negative integers, and 'b' is the smallest\n        /// of positive integers in a list.\n        /// If there is no negative or positive integers, return them as None.\n        /// \n        /// Examples:\n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static (int?, int?) LargestSmallestIntegers(List<int> lst)\n        {\n            int? largestNegative = lst.Where(x => x < 0).DefaultIfEmpty((int?)null).Max();\n            int? smallestPositive = lst.Where(x => x > 0).DefaultIfEmpty((int?)null).Min();\n\n            if (largestNegative == null)\n            {\n                largestNegative = null;\n            }\n            if (smallestPositive == null)\n            {\n                smallestPositive = null;\n            }\n\n            return (largestNegative, smallestPositive);\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> example1 = new List<int> { 2, 4, 1, 3, 5, 7 };\n            var result1 = LargestSmallestIntegers(example1);\n            Console.WriteLine($\"LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == ({result1.Item1}, {result1.Item2})\");\n\n            List<int> example2 = new List<int>();\n            var result2 = LargestSmallestIntegers(example2);\n            Console.WriteLine($\"LargestSmallestIntegers([]) == ({result2.Item1}, {result2.Item2})\");\n\n            List<int> example3 = new List<int> { 0 };\n            var result3 = LargestSmallestIntegers(example3);\n            Console.WriteLine($\"LargestSmallestIntegers([0]) == ({result3.Item1}, {result3.Item2})\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/137", "language": "csharp", "completion": "using System;\nusing System.Globalization;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes integers, floats, or strings representing\n        /// real numbers, and returns the larger variable in its given variable type.\n        /// Return None if the values are equal.\n        /// Note: If a real number is represented as a string, the floating point might be . or ,\n        /// \n        /// CompareOne(1, 2.5) \u279e 2.5\n        /// CompareOne(1, \"2,3\") \u279e \"2,3\"\n        /// CompareOne(\"5,1\", \"6\") \u279e \"6\"\n        /// CompareOne(\"1\", 1) \u279e None\n        /// \n        /// </summary>\n        public static object CompareOne(object a, object b)\n        {\n            double valA = ConvertToDouble(a);\n            double valB = ConvertToDouble(b);\n\n            // If values are equal, return null\n            if (valA == valB)\n            {\n                return null;\n            }\n\n            // Return the original value that is greater\n            return valA > valB ? a : b;\n        }\n\n        private static double ConvertToDouble(object value)\n        {\n            if (value is int)\n            {\n                return Convert.ToDouble(value);\n            }\n            if (value is float || value is double)\n            {\n                return (double)value;\n            }\n            if (value is string str)\n            {\n                // Handle both . and , as decimal separators\n                str = str.Replace(',', '.');\n                if (double.TryParse(str, NumberStyles.Any, CultureInfo.InvariantCulture, out double result))\n                {\n                    return result;\n                }\n                throw new ArgumentException(\"Invalid string format\");\n            }\n            throw new ArgumentException(\"Unsupported type\");\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CompareOne(1, 2.5)); // \u279e 2.5\n            Console.WriteLine(CompareOne(1, \"2,3\")); // \u279e \"2,3\"\n            Console.WriteLine(CompareOne(\"5,1\", \"6\")); // \u279e \"6\"\n            Console.WriteLine(CompareOne(\"1\", 1)); // \u279e null\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/138", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Evaluates whether the given number n can be written as the sum of exactly 4 positive even numbers.\n        /// </summary>\n        /// <param name=\"n\">The number to evaluate.</param>\n        /// <returns>A boolean indicating whether n can be written as the sum of 4 positive even numbers.</returns>\n        public static bool IsEqualToSumEven(int n)\n        {\n            // The smallest sum of four positive even numbers (2 + 2 + 2 + 2) is 8.\n            if (n < 8)\n            {\n                return false;\n            }\n\n            // If n is 8 or greater, it can be represented as the sum of four positive even numbers.\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsEqualToSumEven(4));  // False\n            Console.WriteLine(IsEqualToSumEven(6));  // False\n            Console.WriteLine(IsEqualToSumEven(8));  // True\n            Console.WriteLine(IsEqualToSumEven(10)); // True\n            Console.WriteLine(IsEqualToSumEven(12)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/139", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// The Brazilian factorial is defined as:\n        /// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        /// where n > 0\n        /// \n        /// For example:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial(int n)\n        {\n            if (n <= 0)\n            {\n                throw new ArgumentException(\"Input must be greater than 0\");\n            }\n\n            int result = 1;\n            for (int i = 1; i <= n; i++)\n            {\n                result *= Factorial(i);\n            }\n            \n            return result;\n        }\n\n        private static int Factorial(int num)\n        {\n            int fact = 1;\n            for (int i = 1; i <= num; i++)\n            {\n                fact *= i;\n            }\n            return fact;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFactorial(4)); // Output: 288\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/140", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a string text, replace all spaces in it with underscores, \n        /// and if a string has more than 2 consecutive spaces, \n        /// then replace all consecutive spaces with - \n        /// \n        /// FixSpaces(\"Example\") == \"Example\"\n        /// FixSpaces(\"Example 1\") == \"Example_1\"\n        /// FixSpaces(\" Example 2\") == \"_Example_2\"\n        /// FixSpaces(\" Example   3\") == \"_Example-3\"\n        /// \n        /// </summary>\n        public static string FixSpaces(string text)\n        {\n            // Replace sequences of more than 2 spaces with a hyphen\n            string result = Regex.Replace(text, @\"\\s{3,}\", \"-\");\n\n            // Replace single spaces with underscores\n            result = result.Replace(\" \", \"_\");\n\n            return result;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(FixSpaces(\"Example\"));         // Example\n            Console.WriteLine(FixSpaces(\"Example 1\"));       // Example_1\n            Console.WriteLine(FixSpaces(\" Example 2\"));      // _Example_2\n            Console.WriteLine(FixSpaces(\" Example   3\"));    // _Example-3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/141", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if a given file name is valid.\n        /// </summary>\n        /// <param name=\"file_name\">The file name to check.</param>\n        /// <returns>'Yes' if the file name is valid, 'No' otherwise.</returns>\n        public static string FileNameCheck(string file_name)\n        {\n            // Define the regular expression pattern\n            string pattern = @\"^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$\";\n            \n            // Use regular expression to match the pattern\n            if (Regex.IsMatch(file_name, pattern))\n            {\n                // Ensure exactly one dot exists in the file name\n                if (file_name.Count(f => f == '.') == 1)\n                {\n                    return \"Yes\";\n                }\n            }\n            \n            return \"No\";\n        }\n\n        // Test the function\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(FileNameCheck(\"example.txt\")); // => 'Yes'\n            Console.WriteLine(FileNameCheck(\"1example.dll\")); // => 'No'\n            Console.WriteLine(FileNameCheck(\"example123.exe\")); // => 'Yes'\n            Console.WriteLine(FileNameCheck(\"example.123exe\")); // => 'No'\n            Console.WriteLine(FileNameCheck(\"example.txtexe\")); // => 'No'\n            Console.WriteLine(FileNameCheck(\"example....txt\")); // => 'No'\n            Console.WriteLine(FileNameCheck(\"examp1le2.dll\")); // => 'Yes'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/142", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Calculates the sum of the squares of integers in the list.\n        /// </summary>\n        /// <param name=\"lst\">List of integers</param>\n        /// <returns>The sum of the squares of the integers</returns>\n        public static int SumSquares(List<int> lst)\n        {\n            // Check if the list is null to avoid NullReferenceException\n            if (lst == null)\n            {\n                throw new ArgumentNullException(nameof(lst), \"The list cannot be null.\");\n            }\n\n            // Calculate the sum of squares using LINQ\n            return lst.Sum(x => x * x);\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> sampleList = new List<int> { 1, 2, 3, 4, 5 };\n            int result = SumSquares(sampleList);\n            Console.WriteLine($\"The sum of squares is: {result}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/143", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a string representing a sentence,\n        /// the sentence contains some words separated by a space,\n        /// and you have to return a string that contains the words from the original sentence,\n        /// whose lengths are prime numbers,\n        /// the order of the words in the new string should be the same as the original one.\n        /// \n        /// Example 1:\n        /// Input: sentence = \"This is a test\"\n        /// Output: \"is\"\n        /// \n        /// Example 2:\n        /// Input: sentence = \"lets go for swimming\"\n        /// Output: \"go for\"\n        /// \n        /// Constraints:\n        /// * 1 <= len(sentence) <= 100\n        /// * sentence contains only letters\n        /// \n        /// </summary>\n        public static string WordsInSentence(string sentence)\n        {\n            bool IsPrime(int number)\n            {\n                if (number < 2) return false;\n                if (number == 2) return true;\n                if (number % 2 == 0) return false;\n                for (int i = 3; i <= Math.Sqrt(number); i += 2)\n                {\n                    if (number % i == 0) return false;\n                }\n                return true;\n            }\n\n            var words = sentence.Split(' ');\n            var primeLengthWords = words.Where(word => IsPrime(word.Length));\n            return string.Join(\" \", primeLengthWords);\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            string sentence1 = \"This is a test\";\n            string sentence2 = \"lets go for swimming\";\n            Console.WriteLine(WordsInSentence(sentence1)); // Output: \"is\"\n            Console.WriteLine(WordsInSentence(sentence2)); // Output: \"go for\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/144", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool Simplify(string x, string n)\n        {\n            // Parse the fractions\n            var xParts = x.Split('/');\n            var nParts = n.Split('/');\n            \n            int xNumerator = int.Parse(xParts[0]);\n            int xDenominator = int.Parse(xParts[1]);\n            int nNumerator = int.Parse(nParts[0]);\n            int nDenominator = int.Parse(nParts[1]);\n            \n            // Multiply the fractions\n            int resultNumerator = xNumerator * nNumerator;\n            int resultDenominator = xDenominator * nDenominator;\n            \n            // Check if the result is a whole number\n            return resultNumerator % resultDenominator == 0;\n        }\n        \n        public static void Main()\n        {\n            // Test cases\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // Should print True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // Should print False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // Should print False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/145", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Sorts the given list of integers in ascending order according to the sum of their digits.\n        /// Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            // Helper function to calculate the sum of digits of a number\n            int SumOfDigits(int num)\n            {\n                return Math.Abs(num).ToString().Select(digit => int.Parse(digit.ToString())).Sum();\n            }\n\n            // Sort the list using a stable sort (OrderBy maintains the original order for equal keys)\n            return nums\n                .Select((num, index) => new { Number = num, Index = index, DigitSum = SumOfDigits(num) })\n                .OrderBy(x => x.DigitSum)\n                .ThenBy(x => x.Index)\n                .Select(x => x.Number)\n                .ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 1, 11, -1, -11, -12 };\n            List<int> result1 = OrderByPoints(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: -1, -11, 1, -12, 11\n\n            List<int> test2 = new List<int>();\n            List<int> result2 = OrderByPoints(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: (empty)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/146", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes an array of numbers as input and returns \n        /// the number of elements in the array that are greater than 10 and both \n        /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n        /// For example:\n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter(List<int> nums)\n        {\n            // Function to check if a digit is odd\n            bool IsOdd(int digit)\n            {\n                return digit % 2 != 0;\n            }\n\n            // Function to get the first digit of a number\n            int GetFirstDigit(int num)\n            {\n                num = Math.Abs(num); // Get the absolute value to handle negative numbers\n                while (num >= 10)\n                {\n                    num /= 10;\n                }\n                return num;\n            }\n\n            // Function to get the last digit of a number\n            int GetLastDigit(int num)\n            {\n                num = Math.Abs(num); // Get the absolute value to handle negative numbers\n                return num % 10;\n            }\n\n            // Filter and count numbers based on the given condition\n            int count = nums.Where(num => num > 10)\n                            .Count(num => IsOdd(GetFirstDigit(num)) && IsOdd(GetLastDigit(num)));\n\n            return count;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> nums1 = new List<int> { 15, -73, 14, -15 };\n            List<int> nums2 = new List<int> { 33, -2, -3, 45, 21, 109 };\n\n            Console.WriteLine(SpecialFilter(nums1)); // Output: 1\n            Console.WriteLine(SpecialFilter(nums2)); // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/147", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int GetMaxTriples(int n)\n        {\n            // Step 1: Generate the array a\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n            {\n                a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n            }\n\n            // Step 2: Find valid triples and count them\n            int count = 0;\n\n            // Iterate through all possible triples (i, j, k) with i < j < k\n            for (int i = 0; i < n - 2; i++)\n            {\n                for (int j = i + 1; j < n - 1; j++)\n                {\n                    for (int k = j + 1; k < n; k++)\n                    {\n                        if ((a[i] + a[j] + a[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            int n = 5;\n            Console.WriteLine(GetMaxTriples(n)); // Output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/148", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> Bf(string planet1, string planet2)\n        {\n            // Define the order of the planets\n            List<string> planets = new List<string>\n            {\n                \"Mercury\",\n                \"Venus\",\n                \"Earth\",\n                \"Mars\",\n                \"Jupiter\",\n                \"Saturn\",\n                \"Uranus\",\n                \"Neptune\"\n            };\n\n            // Validate the input planets\n            if (!planets.Contains(planet1) || !planets.Contains(planet2))\n            {\n                return new List<string>();\n            }\n\n            // Get the index of the planets\n            int index1 = planets.IndexOf(planet1);\n            int index2 = planets.IndexOf(planet2);\n\n            // Ensure index1 is less than index2 for proper range extraction\n            if (index1 > index2)\n            {\n                var temp = index1;\n                index1 = index2;\n                index2 = temp;\n            }\n\n            // Get the planets between the two indices\n            return planets.Skip(index1 + 1).Take(index2 - index1 - 1).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = Bf(\"Jupiter\", \"Neptune\");\n            Console.WriteLine(string.Join(\", \", result1)); // Output: Saturn, Uranus\n\n            var result2 = Bf(\"Earth\", \"Mercury\");\n            Console.WriteLine(string.Join(\", \", result2)); // Output: Venus\n\n            var result3 = Bf(\"Mercury\", \"Uranus\");\n            Console.WriteLine(string.Join(\", \", result3)); // Output: Venus, Earth, Mars, Jupiter, Saturn\n\n            var result4 = Bf(\"Pluto\", \"Neptune\"); // Invalid planet\n            Console.WriteLine(string.Join(\", \", result4)); // Output: (empty)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/149", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that accepts a list of strings as a parameter,\n        /// deletes the strings that have odd lengths from it,\n        /// and returns the resulted list with a sorted order,\n        /// The list is always a list of strings and never an array of numbers,\n        /// and it may contain duplicates.\n        /// The order of the list should be ascending by length of each word, and you\n        /// should return the list sorted by that rule.\n        /// If two words have the same length, sort the list alphabetically.\n        /// The function should return a list of strings in sorted order.\n        /// You may assume that all words will have the same length.\n        /// For example:\n        /// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n        /// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n        /// \n        /// </summary>\n        public static List<string> SortedListSum(List<string> lst)\n        {\n            // Filter out strings with odd lengths\n            var filteredList = lst.Where(s => s.Length % 2 == 0).ToList();\n\n            // Sort the list first by length and then alphabetically\n            var sortedList = filteredList.OrderBy(s => s.Length).ThenBy(s => s).ToList();\n\n            return sortedList;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", SortedListSum(new List<string> { \"aa\", \"a\", \"aaa\" }))); // Output: \"aa\"\n            Console.WriteLine(string.Join(\", \", SortedListSum(new List<string> { \"ab\", \"a\", \"aaa\", \"cd\" }))); // Output: \"ab, cd\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/150", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Returns the value of x if n is a prime number; otherwise, returns the value of y.\n        /// </summary>\n        /// <param name=\"n\">The number to check for primality</param>\n        /// <param name=\"x\">The value to return if n is a prime number</param>\n        /// <param name=\"y\">The value to return if n is not a prime number</param>\n        /// <returns>The value of x if n is a prime number; otherwise, the value of y</returns>\n        public static int XOrY(int n, int x, int y)\n        {\n            return IsPrime(n) ? x : y;\n        }\n\n        /// <summary>\n        /// Determines whether a given number is a prime number.\n        /// </summary>\n        /// <param name=\"number\">The number to check</param>\n        /// <returns>True if the number is prime; otherwise, false</returns>\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1)\n            {\n                return false;\n            }\n\n            for (int i = 2; i * i <= number; i++)\n            {\n                if (number % i == 0)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(XOrY(7, 34, 12)); // Output: 34\n            Console.WriteLine(XOrY(15, 8, 5));  // Output: 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/151", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a list of numbers, return the sum of squares of the numbers\n        /// in the list that are odd. Ignore numbers that are negative or not integers.\n        /// </summary>\n        public static int DoubleTheDifference(List<object> lst)\n        {\n            // Initialize the sum to 0\n            int sum = 0;\n\n            // Iterate through each object in the list\n            foreach (var item in lst)\n            {\n                // Check if the item is an integer\n                if (item is int number)\n                {\n                    // Check if the number is positive and odd\n                    if (number > 0 && number % 2 != 0)\n                    {\n                        // Add the square of the number to the sum\n                        sum += number * number;\n                    }\n                }\n            }\n\n            // Return the resulting sum\n            return sum;\n        }\n\n        public static void Main()\n        {\n            // Test cases\n            Console.WriteLine(DoubleTheDifference(new List<object> { 1, 3, 2, 0 })); // 10\n            Console.WriteLine(DoubleTheDifference(new List<object> { -1, -2, 0 })); // 0\n            Console.WriteLine(DoubleTheDifference(new List<object> { 9, -2 })); // 81\n            Console.WriteLine(DoubleTheDifference(new List<object> { 0 })); // 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/152", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// I think we all remember that feeling when the result of some long-awaited\n        /// event is finally known. The feelings and thoughts you have at that moment are\n        /// definitely worth noting down and comparing.\n        /// Your task is to determine if a person correctly guessed the results of a number of matches.\n        /// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n        /// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n        /// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n        /// \n        /// \n        /// example:\n        /// \n        /// Compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n        /// Compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n        /// \n        /// </summary>\n        public static List<int> Compare(List<int> game, List<int> guess)\n        {\n            List<int> result = new List<int>();\n\n            for (int i = 0; i < game.Count; i++)\n            {\n                if (game[i] == guess[i])\n                {\n                    result.Add(0);\n                }\n                else\n                {\n                    result.Add(Math.Abs(game[i] - guess[i]));\n                }\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> game1 = new List<int> { 1, 2, 3, 4, 5, 1 };\n            List<int> guess1 = new List<int> { 1, 2, 3, 4, 2, -2 };\n            List<int> result1 = Compare(game1, guess1);\n            Console.WriteLine(string.Join(\",\", result1)); // Output: 0,0,0,0,3,3\n\n            List<int> game2 = new List<int> { 0, 5, 0, 0, 0, 4 };\n            List<int> guess2 = new List<int> { 4, 1, 1, 0, 0, -2 };\n            List<int> result2 = Compare(game2, guess2);\n            Console.WriteLine(string.Join(\",\", result2)); // Output: 4,4,1,0,0,6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/153", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You will be given the name of a class (a string) and a list of extensions.\n        /// The extensions are to be used to load additional classes to the class. The\n        /// strength of the extension is as follows: Let CAP be the number of the uppercase\n        /// letters in the extension's name, and let SM be the number of lowercase letters \n        /// in the extension's name, the strength is given by the fraction CAP - SM. \n        /// You should find the strongest extension and return a string in this \n        /// format: ClassName.StrongestExtensionName.\n        /// If there are two or more extensions with the same strength, you should\n        /// choose the one that comes first in the list.\n        /// For example, if you are given \"Slices\" as the class and a list of the\n        /// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n        /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n        /// (its strength is -1).\n        /// Example:\n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension(string class_name, List<string> extensions)\n        {\n            // Variable to track the strongest extension and its strength\n            string strongestExtension = null;\n            int maxStrength = int.MinValue;\n\n            foreach (var extension in extensions)\n            {\n                // Calculate the strength of the current extension\n                int capCount = extension.Count(char.IsUpper);\n                int smCount = extension.Count(char.IsLower);\n                int strength = capCount - smCount;\n\n                // Update the strongest extension if the current one is stronger\n                if (strength > maxStrength)\n                {\n                    maxStrength = strength;\n                    strongestExtension = extension;\n                }\n            }\n\n            // Return the result in the desired format\n            return $\"{class_name}.{strongestExtension}\";\n        }\n\n        public static void Main()\n        {\n            // Example usage\n            string className = \"Slices\";\n            List<string> extensions = new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" };\n            Console.WriteLine(StrongestExtension(className, extensions));  // Output: Slices.SErviNGSliCes\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/154", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if any rotation of the second word is a substring of the first word.\n        /// </summary>\n        /// <param name=\"a\">The first word.</param>\n        /// <param name=\"b\">The second word.</param>\n        /// <returns>True if any rotation of the second word is a substring of the first word, otherwise False.</returns>\n        public static bool CycpatternCheck(string a, string b)\n        {\n            // If the second word is longer than the first word, it cannot be a substring.\n            if (b.Length > a.Length)\n            {\n                return false;\n            }\n            \n            // Generate all rotations of the second word.\n            for (int i = 0; i < b.Length; i++)\n            {\n                // Rotate the string by moving the first character to the end.\n                string rotation = b.Substring(i) + b.Substring(0, i);\n                \n                // Check if this rotation is a substring of the first word.\n                if (a.Contains(rotation))\n                {\n                    return true;\n                }\n            }\n            \n            // If no rotation is found as a substring, return false.\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/155", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given an integer, return a tuple that has the number of even and odd digits respectively.\n        /// \n        /// Example:\n        /// EvenOddCount(-12) ==> (1, 1)\n        /// EvenOddCount(123) ==> (1, 2)\n        /// \n        /// </summary>\n        public static (int evenCount, int oddCount) EvenOddCount(int num)\n        {\n            // Convert the number to its absolute value to handle negative numbers\n            num = Math.Abs(num);\n            \n            int evenCount = 0;\n            int oddCount = 0;\n\n            // Iterate over each digit\n            foreach (char digit in num.ToString())\n            {\n                if ((digit - '0') % 2 == 0)\n                {\n                    evenCount++;\n                }\n                else\n                {\n                    oddCount++;\n                }\n            }\n\n            return (evenCount, oddCount);\n        }\n\n        public static void Main(string[] args)\n        {\n            var result1 = EvenOddCount(-12);\n            Console.WriteLine(result1); // Output: (1, 1)\n\n            var result2 = EvenOddCount(123);\n            Console.WriteLine(result2); // Output: (1, 2)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/156", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer, obtain its roman numeral equivalent as a string,\n        /// and return it in lowercase.\n        /// Restrictions: 1 <= num <= 1000\n        /// \n        /// Examples:\n        /// >>> IntToMiniRoman(19) == \"xix\"\n        /// >>> IntToMiniRoman(152) == \"clii\"\n        /// >>> IntToMiniRoman(426) == \"cdxxvi\"\n        /// \n        /// </summary>\n        public static string IntToMiniRoman(int number)\n        {\n            // Define the roman numeral mappings\n            var romanNumerals = new (int value, string numeral)[]\n            {\n                (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n                (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n                (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"),\n                (1, \"I\")\n            };\n            \n            // Initialize the result\n            var result = string.Empty;\n            \n            // Iterate through the mappings\n            foreach (var (value, numeral) in romanNumerals)\n            {\n                while (number >= value)\n                {\n                    result += numeral;\n                    number -= value;\n                }\n            }\n            \n            // Return the result in lowercase\n            return result.ToLower();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IntToMiniRoman(19));  // Output: \"xix\"\n            Console.WriteLine(IntToMiniRoman(152)); // Output: \"clii\"\n            Console.WriteLine(IntToMiniRoman(426)); // Output: \"cdxxvi\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/157", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given the lengths of the three sides of a triangle. Return True if the three\n        /// sides form a right-angled triangle, False otherwise.\n        /// A right-angled triangle is a triangle in which one angle is right angle or \n        /// 90 degree.\n        /// Example:\n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// \n        /// </summary>\n        public static bool RightAngleTriangle (int a, int b, int c) \n        {\n            // Determine the hypotenuse\n            int[] sides = { a, b, c };\n            Array.Sort(sides);\n            int hypotenuse = sides[2];\n            int side1 = sides[0];\n            int side2 = sides[1];\n            \n            // Check the Pythagorean theorem\n            return hypotenuse * hypotenuse == side1 * side1 + side2 * side2;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RightAngleTriangle(3, 4, 5)); // True\n            Console.WriteLine(RightAngleTriangle(1, 2, 3)); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/158", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string FindMax(List<string> words)\n        {\n            string maxWord = string.Empty;\n            int maxUniqueCount = 0;\n\n            foreach (var word in words)\n            {\n                var uniqueChars = new HashSet<char>(word);\n                int uniqueCount = uniqueChars.Count;\n\n                if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && string.Compare(word, maxWord) < 0))\n                {\n                    maxWord = word;\n                    maxUniqueCount = uniqueCount;\n                }\n            }\n\n            return maxWord;\n        }\n\n        static void Main(string[] args)\n        {\n            var test1 = new List<string> { \"name\", \"of\", \"string\" };\n            var test2 = new List<string> { \"name\", \"enam\", \"game\" };\n            var test3 = new List<string> { \"aaaaaaa\", \"bb\", \"cc\" };\n\n            Console.WriteLine(FindMax(test1)); // Output: \"string\"\n            Console.WriteLine(FindMax(test2)); // Output: \"enam\"\n            Console.WriteLine(FindMax(test3)); // Output: \"aaaaaaa\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/159", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You're a hungry rabbit, and you already have Eaten a certain number of carrots,\n        /// but now you need to Eat more carrots to complete the day's meals.\n        /// you should return an array of [ total number of Eaten carrots after your meals,\n        /// the number of carrots left after your meals ]\n        /// if there are not enough remaining carrots, you will Eat all remaining carrots, but will still be hungry.\n        /// \n        /// Example:\n        /// * Eat(5, 6, 10) -> [11, 4]\n        /// * Eat(4, 8, 9) -> [12, 1]\n        /// * Eat(1, 10, 10) -> [11, 0]\n        /// * Eat(2, 11, 5) -> [7, 0]\n        /// \n        /// Variables:\n        /// @number : integer\n        /// the number of carrots that you have Eaten.\n        /// @need : integer\n        /// the number of carrots that you need to Eat.\n        /// @remaining : integer\n        /// the number of remaining carrots thet exist in stock\n        /// \n        /// Constrain:\n        /// * 0 <= number <= 1000\n        /// * 0 <= need <= 1000\n        /// * 0 <= remaining <= 1000\n        /// \n        /// Have fun :)\n        /// \n        /// </summary>\n        public static List<int> Eat (int number, int need, int remaining) \n        {\n            int eatenToday = Math.Min(need, remaining);\n            int totalEaten = number + eatenToday;\n            int remainingAfter = remaining - eatenToday;\n            \n            return new List<int> { totalEaten, remainingAfter };\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(String.Join(\", \", Eat(5, 6, 10))); // [11, 4]\n            Console.WriteLine(String.Join(\", \", Eat(4, 8, 9)));  // [12, 1]\n            Console.WriteLine(String.Join(\", \", Eat(1, 10, 10))); // [11, 0]\n            Console.WriteLine(String.Join(\", \", Eat(2, 11, 5)));  // [7, 0]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/160", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Data;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given two lists operator, and operand. The first list has basic algebra operations, and \n        /// the second list is a list of integers. Use the two given lists to build the algebraic \n        /// expression and return the evaluation of this expression.\n        /// \n        /// The basic algebra operations:\n        /// Addition ( + ) \n        /// Subtraction ( - ) \n        /// Multiplication ( * ) \n        /// Floor division ( // ) \n        /// Exponentiation ( ** ) \n        /// \n        /// Example:\n        /// operator['+', '*', '-']\n        /// array = [2, 3, 4, 5]\n        /// result = 2 + 3 * 4 - 5\n        /// => result = 9\n        /// \n        /// Note:\n        /// The length of operator list is equal to the length of operand list minus one.\n        /// Operand is a list of of non-negative integers.\n        /// Operator list has at least one operator, and operand list has at least two operands.\n        /// </summary>\n        public static int DoAlgebra(List<string> operators, List<int> operands)\n        {\n            if (operators == null || operands == null || operands.Count < 2 || operators.Count != operands.Count - 1)\n            {\n                throw new ArgumentException(\"Invalid input lists\");\n            }\n\n            // Build the expression string\n            var expression = operands[0].ToString();\n            for (int i = 0; i < operators.Count; i++)\n            {\n                string op = operators[i];\n                if (op == \"//\") op = \"/\";\n                if (op == \"**\") op = \"^\";\n                expression += $\" {op} {operands[i + 1]}\";\n            }\n\n            // Evaluate the expression\n            var result = EvaluateExpression(expression);\n            return (int)Math.Floor(result);\n        }\n\n        private static double EvaluateExpression(string expression)\n        {\n            var table = new DataTable();\n            table.Columns.Add(\"expression\", typeof(string), expression);\n            DataRow row = table.NewRow();\n            table.Rows.Add(row);\n            double result = double.Parse((string)row[\"expression\"]);\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            var operators = new List<string> { \"+\", \"*\", \"-\" };\n            var operands = new List<int> { 2, 3, 4, 5 };\n            int result = DoAlgebra(operators, operands);\n            Console.WriteLine(result); // Output: 9\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/161", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Solve(string s)\n        {\n            if (s.All(ch => !char.IsLetter(ch)))\n            {\n                // If the string contains no letters, reverse the string\n                return new string(s.Reverse().ToArray());\n            }\n            else\n            {\n                // If the string contains letters, toggle the case of each letter\n                return new string(s.Select(ch => char.IsLetter(ch) ? (char.IsUpper(ch) ? char.ToLower(ch) : char.ToUpper(ch)) : ch).ToArray());\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Solve(\"1234\")); // Expected output: \"4321\"\n            Console.WriteLine(Solve(\"ab\")); // Expected output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Expected output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/162", "language": "csharp", "completion": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Given a string 'text', return its md5 hash equivalent string.\n        /// If 'text' is an empty string, return null.\n        /// \n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// </summary>\n        public static object StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.UTF8.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                // Convert the byte array to a hexadecimal string\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                return sb.ToString();\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            string testString = \"Hello world\";\n            string hash = (string)StringToMd5(testString);\n            Console.WriteLine($\"MD5 hash of '{testString}' is: {hash}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/163", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers(int a, int b)\n        {\n            // List of all digits from 0 to 9\n            List<int> digits = Enumerable.Range(0, 10).ToList();\n            \n            // Filter out the even digits\n            List<int> evenDigits = digits.Where(d => d % 2 == 0).ToList();\n            \n            // Since we need digits between a and b, we need to check if a and b are within the range of 0 to 9\n            if (a > 9 && b > 9)\n                return new List<int>();\n            \n            // Return the even digits in ascending order\n            return evenDigits;\n        }\n        \n        // Test the function\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(2, 8))); // Expected: 2, 4, 6, 8\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(8, 2))); // Expected: 2, 4, 6, 8\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(10, 14))); // Expected: []\n        }\n    }\n}"}

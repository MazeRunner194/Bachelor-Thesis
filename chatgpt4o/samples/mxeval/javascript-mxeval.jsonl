{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n    // Iterate through each pair of numbers in the list\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            // Calculate the absolute difference\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    // If no such pair is found, return False\n    return false;\n}\n\n// Test cases\nconsole.log(hasCloseElements([1.0, 2.0, 3.0], 0.5)); // False\nconsole.log(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // True"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "function separateParenGroups(parenstring) {\n    const result = [];\n    let currentGroup = '';\n    let balance = 0;\n\n    for (const char of parenstring.replace(/\\s/g, '')) {\n        currentGroup += char;\n\n        if (char === '(') {\n            balance += 1;\n        } else if (char === ')') {\n            balance -= 1;\n        }\n\n        if (balance === 0 && currentGroup.length > 0) {\n            result.push(currentGroup);\n            currentGroup = '';\n        }\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\n// Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n    // Get the integer part of the number\n    const integerPart = Math.floor(number);\n    // Subtract the integer part from the original number to get the decimal part\n    const decimalPart = number - integerPart;\n    return decimalPart;\n}\n\n// Example usage:\nconsole.log(truncateNumber(3.5));  // Output: 0.5\nconsole.log(truncateNumber(4.75)); // Output: 0.75\nconsole.log(truncateNumber(10.01)); // Output: 0.01\nconsole.log(truncateNumber(100)); // Output: 0"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0; // Initialize the balance to zero\n\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i]; // Update the balance based on the current operation\n        if (balance < 0) { // Check if the balance falls below zero\n            return true; // Return true if the balance is below zero\n        }\n    }\n    \n    return false; // Return false if the balance never falls below zero\n}\n\n// Example usage:\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n    if (numbers.length === 0) {\n        return 0; // Return 0 for an empty list\n    }\n\n    // Step 1: Compute the mean of the numbers\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n\n    // Step 2: Calculate the absolute differences from the mean\n    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));\n\n    // Step 3: Compute the mean of these absolute differences\n    const mad = absoluteDifferences.reduce((sum, diff) => sum + diff, 0) / numbers.length;\n\n    return mad;\n}\n\n// Example usage:\nconsole.log(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimiter) {\n    // Check if the input list is empty\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    // Initialize a new list to store the result\n    const result = [];\n\n    // Loop through the input list\n    for (let i = 0; i < numbers.length; i++) {\n        // Add the current element to the result list\n        result.push(numbers[i]);\n\n        // If the element is not the last one, add the delimiter\n        if (i < numbers.length - 1) {\n            result.push(delimiter);\n        }\n    }\n\n    return result;\n}\n\n// Example usage\nconsole.log(intersperse([], 4)); // []\nconsole.log(intersperse([1, 2, 3], 4)); // [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenstring) {\n    // Split the input string into separate groups based on spaces\n    const groups = parenstring.split(' ');\n\n    // Function to calculate the maximum level of nesting for a single group\n    function maxNestingLevel(group) {\n        let maxLevel = 0;\n        let currentLevel = 0;\n\n        for (const char of group) {\n            if (char === '(') {\n                currentLevel += 1;\n                if (currentLevel > maxLevel) {\n                    maxLevel = currentLevel;\n                }\n            } else if (char === ')') {\n                currentLevel -= 1;\n            }\n        }\n\n        return maxLevel;\n    }\n\n    // Calculate the maximum nesting level for each group\n    const result = groups.map(group => maxNestingLevel(group));\n\n    // Return the results as an array\n    return result;\n}\n\n// Example usage\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())')); // Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "function filterBySubstring(strings, substring) {\n    // Use the filter method to iterate over each string in the input list\n    return strings.filter(function(string) {\n        // Check if the current string includes the given substring\n        return string.includes(substring);\n    });\n}\n\n// Example usage and test cases\nconsole.log(filterBySubstring([], 'a')); // Output: []\nconsole.log(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')); // Output: ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n    // Initialize sum to 0 and product to 1\n    let sum = 0;\n    let product = 1;\n\n    // Loop through each number in the list\n    for (let number of numbers) {\n        sum += number;       // Add the number to sum\n        product *= number;   // Multiply the number to product\n    }\n\n    // Return the result as a tuple (array in JavaScript)\n    return [sum, product];\n}\n\n// Example usage\nconsole.log(sumProduct([]));           // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n    if (!Array.isArray(numbers) || numbers.length === 0) {\n        return [];\n    }\n\n    let result = [];\n    let currentMax = numbers[0];\n\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));  // Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(string) {\n    // Helper function to check if a string is a palindrome\n    function isPalindrome(s) {\n        let left = 0;\n        let right = s.length - 1;\n        while (left < right) {\n            if (s[left] !== s[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    // If the input string is empty or is already a palindrome\n    if (string.length === 0 || isPalindrome(string)) {\n        return string;\n    }\n\n    // Find the longest palindromic suffix\n    let longestPalindromicSuffix = \"\";\n    for (let i = string.length - 1; i >= 0; i--) {\n        let suffix = string.slice(i);\n        if (isPalindrome(suffix)) {\n            longestPalindromicSuffix = suffix;\n            break;\n        }\n    }\n\n    // The prefix that comes before the palindromic suffix\n    let prefix = string.slice(0, string.length - longestPalindromicSuffix.length);\n\n    // Reverse the prefix and append it to the original string\n    let reversedPrefix = prefix.split('').reverse().join('');\n    return string + reversedPrefix;\n}\n\n// Test cases\nconsole.log(makePalindrome(''));       // Output: ''\nconsole.log(makePalindrome('cat'));    // Output: 'catac'\nconsole.log(makePalindrome('cata'));   // Output: 'catac'"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "function stringXor(a, b) {\n    if (a.length !== b.length) {\n        throw new Error(\"Input strings must be of the same length.\");\n    }\n\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        // Perform XOR operation: '1' if characters are different, '0' if they are the same\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(stringXor('010', '110')); // Output: '100'"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) {\n        return \"none\";\n    }\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n}\n\n// Test cases\nconsole.log(longest([])); // Output: \"none\"\nconsole.log(longest(['a', 'b', 'c'])); // Output: 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // Output: 'ccc'"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // Ensure the numbers are positive\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    // Implement the Euclidean algorithm\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n}\n\n// Examples\nconsole.log(greatestCommonDivisor(3, 5)); // Output: 1\nconsole.log(greatestCommonDivisor(25, 15)); // Output: 5"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "/**\n * Return list of all prefixes from shortest to longest of the input string\n * @param {string} string - The input string\n * @returns {string[]} - List of prefixes\n * >>> all_prefixes('abc')\n * ['a', 'ab', 'abc']\n */\nfunction allPrefixes(string) {\n    const prefixes = [];\n    for (let i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n\n// Example usage:\nconsole.log(allPrefixes('abc')); // ['a', 'ab', 'abc']"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n    // Create an array to store the numbers\n    let numbers = [];\n\n    // Loop from 0 to n\n    for (let i = 0; i <= n; i++) {\n        numbers.push(i);\n    }\n\n    // Join the array elements into a single string with space as the delimiter\n    return numbers.join(\" \");\n}\n\n// Example usage:\nconsole.log(stringSequence(0)); // Output: '0'\nconsole.log(stringSequence(5)); // Output: '0 1 2 3 4 5'"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n    // Convert the string to lowercase to ensure case insensitivity\n    const lowerCaseString = string.toLowerCase();\n    \n    // Use a Set to store distinct characters\n    const distinctCharacters = new Set(lowerCaseString);\n    \n    // Return the size of the Set\n    return distinctCharacters.size;\n}\n\n// Example usage:\nconsole.log(countDistinctCharacters('xyzXYZ')); // Output: 3\nconsole.log(countDistinctCharacters('Jerry'));  // Output: 4"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicString) {\n    // Split the input string by spaces to get individual notes\n    const notes = musicString.split(' ');\n    \n    // Map each note to its corresponding beat value\n    const beats = notes.map(note => {\n        if (note === 'o') {\n            return 4; // Whole note\n        } else if (note === 'o|') {\n            return 2; // Half note\n        } else if (note === '.|') {\n            return 1; // Quarter note\n        } else {\n            throw new Error(`Unknown note: ${note}`);\n        }\n    });\n\n    return beats;\n}\n\n// Example usage:\nconsole.log(parseMusic('o o| .| o| o| .| .| .| .| o o'));\n// Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(string, substring) {\n    // Edge case: If the substring is empty, return 0\n    if (substring.length === 0) {\n        return 0;\n    }\n\n    let count = 0;\n    let position = 0;\n\n    // Iterate through the string to find all overlapping occurrences of the substring\n    while ((position = string.indexOf(substring, position)) !== -1) {\n        count++;\n        // Move to the next position to allow overlap\n        position++;\n    }\n\n    return count;\n}\n\n// Test cases\nconsole.log(howManyTimes('', 'a')); // 0\nconsole.log(howManyTimes('aaa', 'a')); // 3\nconsole.log(howManyTimes('aaaa', 'aa')); // 3"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Mapping of numerals to their corresponding integers\n    const numeralToInt = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    // Mapping of integers to their corresponding numerals\n    const intToNumeral = [\n        'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'\n    ];\n\n    // Split the input string into an array of numerals\n    const numeralsArray = numbers.split(' ');\n\n    // Convert the numerals to integers\n    const integersArray = numeralsArray.map(numeral => numeralToInt[numeral]);\n\n    // Sort the array of integers\n    integersArray.sort((a, b) => a - b);\n\n    // Convert the sorted integers back to numerals\n    const sortedNumeralsArray = integersArray.map(int => intToNumeral[int]);\n\n    // Join the sorted numerals into a space-delimited string\n    return sortedNumeralsArray.join(' ');\n}\n\n// Example usage\nconsole.log(sortNumbers('three one five')); // Output: 'one three five'"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two numbers.\");\n    }\n\n    // Sort the array to ensure we only need to compare adjacent elements\n    numbers.sort((a, b) => a - b);\n\n    let closestPair = [numbers[0], numbers[1]];\n    let smallestDifference = Math.abs(numbers[1] - numbers[0]);\n\n    for (let i = 1; i < numbers.length - 1; i++) {\n        let difference = Math.abs(numbers[i + 1] - numbers[i]);\n        if (difference < smallestDifference) {\n            smallestDifference = difference;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n\n    return closestPair;\n}\n\n// Examples\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Output: [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Output: [2.0, 2.0]"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    return numbers.map(num => (num - min) / (max - min));\n}\n\n// Example usage:\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values) {\n    return values.filter(Number.isInteger);\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "/**\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n *\n */\nfunction strlen(string) {\n    return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n    if (n <= 1) {\n        throw new Error(\"Input must be greater than 1\");\n    }\n\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n\n    // In case no divisor is found, though it should never happen for n > 1\n    return null;\n}\n\n// Example usage:\nconsole.log(largestDivisor(15)); // Output: 5"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n    const factors = [];\n    // Check for number of 2s\n    while (n % 2 === 0) {\n        factors.push(2);\n        n = n / 2;\n    }\n    // Check for other primes\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    // If n is still a prime number and greater than 2\n    if (n > 2) {\n        factors.push(n);\n    }\n    return factors;\n}"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n    // Step 1: Create a frequency map\n    const frequencyMap = new Map();\n    for (const num of numbers) {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    }\n\n    // Step 2: Filter the numbers that occur more than once\n    const result = numbers.filter(num => frequencyMap.get(num) === 1);\n\n    return result;\n}\n\n// Example usage\nconsole.log(removeDuplicates([1, 2, 3, 2, 4])); // Output: [1, 3, 4]"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(string) {\n    let result = '';\n    for (let char of string) {\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\n// Example usage:\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "function concatenate(strings) {\n    return strings.join('');\n}\n\n// Example Usages\nconsole.log(concatenate([])); // Output: ''\nconsole.log(concatenate(['a', 'b', 'c'])); // Output: 'abc'"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n    return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "/**\n * Return only positive numbers in the list.\n * @param {number[]} l - The input list of numbers.\n * @returns {number[]} - A new list containing only the positive numbers from the input list.\n * \n * >>> get_positive([-1, 2, -4, 5, 6])\n * [2, 5, 6]\n * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [5, 3, 2, 3, 9, 123, 1]\n */\nfunction getPositive(l) {\n    return l.filter(num => num > 0);\n}\n\n// Example usage:\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n    // Edge case: numbers less than 2 are not prime\n    if (n < 2) {\n        return false;\n    }\n    // 2 is the only even prime number\n    if (n === 2) {\n        return true;\n    }\n    // Eliminate even numbers greater than 2\n    if (n % 2 === 0) {\n        return false;\n    }\n    // Check for factors from 3 up to the square root of n\n    const sqrt = Math.sqrt(n);\n    for (let i = 3; i <= sqrt; i += 2) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    // If no factors were found, n is prime\n    return true;\n}\n\n// Examples\nconsole.log(isPrime(6));     // False\nconsole.log(isPrime(101));   // True\nconsole.log(isPrime(11));    // True\nconsole.log(isPrime(13441)); // True\nconsole.log(isPrime(61));    // True\nconsole.log(isPrime(4));     // False\nconsole.log(isPrime(1));     // False"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n    // Step 1: Identify the indices that are divisible by three and extract the elements.\n    let elementsAtIndicesDivByThree = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            elementsAtIndicesDivByThree.push(l[i]);\n        }\n    }\n\n    // Step 2: Sort the extracted elements.\n    elementsAtIndicesDivByThree.sort((a, b) => a - b);\n\n    // Step 3: Replace the elements at the original indices with the sorted elements.\n    let sortedIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            l[i] = elementsAtIndicesDivByThree[sortedIndex];\n            sortedIndex++;\n        }\n    }\n\n    return l;\n}\n\n// Example usage:\nconsole.log(sortThird([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "function unique(l) {\n    // Step 1: Use a Set to remove duplicates\n    const uniqueSet = new Set(l);\n    \n    // Step 2: Convert the Set back to an array\n    const uniqueArray = Array.from(uniqueSet);\n    \n    // Step 3: Sort the array\n    uniqueArray.sort((a, b) => a - b);\n    \n    return uniqueArray;\n}\n\n// Example usage\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n    return Math.max(...l);\n}\n\n// Example usage:\nconsole.log(maxElement([1, 2, 3])); // Output: 3\nconsole.log(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: 123"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n            for (let char of str) {\n                if (char === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example usage\nconsole.log(fizzBuzz(50)); // Output: 0\nconsole.log(fizzBuzz(78)); // Output: 2\nconsole.log(fizzBuzz(79)); // Output: 3"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n    // Step 1: Extract the values at the even indices\n    let evenValues = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenValues.push(l[i]);\n    }\n\n    // Step 2: Sort the extracted even index values\n    evenValues.sort((a, b) => a - b);\n\n    // Step 3: Replace the values at the even indices with the sorted values\n    let sortedEvenIndex = 0;\n    for (let i = 0; i < l.length; i += 2) {\n        l[i] = evenValues[sortedEvenIndex++];\n    }\n\n    // Step 4: Return the modified list\n    return l;\n}\n\n// Test cases\nconsole.log(sortEven([1, 2, 3])); // Output: [1, 2, 3]\nconsole.log(sortEven([5, 6, 3, 4])); // Output: [3, 6, 5, 4]\nconsole.log(sortEven([10, 1, 8, 2, 6])); // Output: [6, 1, 8, 2, 10]\nconsole.log(sortEven([4, 7, 2, 5, 3, 1])); // Output: [2, 7, 3, 5, 4, 1]"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction primeFib(n) {\n    let count = 0;\n    let a = 1, b = 1;\n    \n    while (true) {\n        let fib = a + b;\n        a = b;\n        b = fib;\n        \n        if (isPrime(fib)) {\n            count++;\n            if (count === n) {\n                return fib;\n            }\n        }\n    }\n}\n\n// Examples:\nconsole.log(primeFib(1)); // 2\nconsole.log(primeFib(2)); // 3\nconsole.log(primeFib(3)); // 5\nconsole.log(primeFib(4)); // 13\nconsole.log(primeFib(5)); // 89"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    // Step 1: Sort the list\n    l.sort((a, b) => a - b);\n\n    // Step 2: Iterate over the list\n    for (let i = 0; i < l.length - 2; i++) {\n        // Avoid duplicate triples\n        if (i > 0 && l[i] === l[i - 1]) continue;\n\n        let left = i + 1;\n        let right = l.length - 1;\n\n        // Step 3: Use two pointers to find the other two elements\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    // If no triplet found, return false\n    return false;\n}\n\n// Test cases\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // False\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // True\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // False\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triplesSumToZero([1])); // False"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n    return n * n;\n}\n\n// Example usage:\nconsole.log(carRaceCollision(3)); // Output: 9\nconsole.log(carRaceCollision(5)); // Output: 25"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n    return l.map(function(num) {\n        return num + 1;\n    });\n}\n\n// Example usage:\nconsole.log(incrList([1, 2, 3])); // [2, 3, 4]\nconsole.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    const seen = new Set();\n    \n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    \n    return false;\n}\n\n// Test cases\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base) {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9.\");\n    }\n    \n    if (x === 0) {\n        return '0';\n    }\n\n    let result = '';\n    let current = x;\n\n    while (current > 0) {\n        let remainder = current % base;\n        result = remainder.toString() + result;\n        current = Math.floor(current / base);\n    }\n\n    return result;\n}\n\n// Testing the function\nconsole.log(changeBase(8, 3)); // Output: '22'\nconsole.log(changeBase(8, 2)); // Output: '1000'\nconsole.log(changeBase(7, 2)); // Output: '111'"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(a, h) {\n    return 0.5 * a * h;\n}\n\n// Example usage:\nconsole.log(triangleArea(5, 3)); // Output: 7.5"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n    \n    // Array to store the last four computed values\n    let lastFour = [0, 0, 2, 0];\n    \n    // Iterate from 4 to n, updating the last four values\n    for (let i = 4; i <= n; i++) {\n        let nextValue = lastFour[0] + lastFour[1] + lastFour[2] + lastFour[3];\n        lastFour[0] = lastFour[1];\n        lastFour[1] = lastFour[2];\n        lastFour[2] = lastFour[3];\n        lastFour[3] = nextValue;\n    }\n    \n    // The last value in the array is the n-th element of the sequence\n    return lastFour[3];\n}\n\n// Example usage\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "function median(l) {\n    // Step 1: Sort the list\n    l.sort((a, b) => a - b);\n\n    // Step 2: Find the middle index\n    const len = l.length;\n    const mid = Math.floor(len / 2);\n\n    // Step 3: Return the median based on odd or even length\n    if (len % 2 === 0) {\n        // Even number of elements, return the average of the two middle numbers\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        // Odd number of elements, return the middle element\n        return l[mid];\n    }\n}\n\n// Example usage:\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "/**\n * Checks if given string is a palindrome\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfunction isPalindrome(text) {\n    // Convert the string to lowercase to make the check case-insensitive\n    text = text.toLowerCase();\n    \n    // Compare the string with its reverse\n    return text === text.split('').reverse().join('');\n}\n\n// Test cases\nconsole.log(isPalindrome('')); // True\nconsole.log(isPalindrome('aba')); // True\nconsole.log(isPalindrome('aaaaa')); // True\nconsole.log(isPalindrome('zbcd')); // False"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n    // Handle the case where n is 0\n    if (n === 0) {\n        return 1 % p;\n    }\n    \n    // Initialize result\n    let result = 1;\n    let base = 2;\n\n    // Ensure base is within the modulo range\n    base = base % p;\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        \n        // n must be even now\n        n = Math.floor(n / 2);\n        base = (base * base) % p;\n    }\n    \n    return result;\n}\n\n// Test cases\nconsole.log(modp(3, 5));         // Output: 3\nconsole.log(modp(1101, 101));    // Output: 2\nconsole.log(modp(0, 101));       // Output: 1\nconsole.log(modp(3, 11));        // Output: 8\nconsole.log(modp(100, 101));     // Output: 1"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n    // Define a regular expression that matches all vowels (both lowercase and uppercase)\n    const vowelsRegex = /[aeiouAEIOU]/g;\n    \n    // Use the replace method to remove all vowels from the input text\n    return text.replace(vowelsRegex, '');\n}\n\n// Test cases\nconsole.log(removeVowels('')); // ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // 'bcdf'\nconsole.log(removeVowels('aaaaa')); // ''\nconsole.log(removeVowels('aaBAA')); // 'B'\nconsole.log(removeVowels('zbcd')); // 'zbcd'"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\nconsole.log(belowThreshold([1, 20, 4, 10], 5)); // False"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "/**\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\nfunction add(x, y) {\n  return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "function getCharCount(s) {\n    const charCount = {};\n    for (const char of s) {\n        charCount[char] = (charCount[char] || 0) + 1;\n    }\n    return charCount;\n}\n\nfunction sameChars(s0, s1) {\n    const charCount0 = getCharCount(s0);\n    const charCount1 = getCharCount(s1);\n\n    const keys0 = Object.keys(charCount0);\n    const keys1 = Object.keys(charCount1);\n\n    if (keys0.length !== keys1.length) {\n        return false;\n    }\n\n    for (const key of keys0) {\n        if (charCount0[key] !== charCount1[key]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 0) return 0; // Handle cases where n is less than or equal to 0\n    if (n === 1) return 1; // The first Fibonacci number is 1\n\n    let a = 0, b = 1; // Initialize the first two Fibonacci numbers\n    for (let i = 2; i <= n; i++) {\n        let temp = a + b; // Compute the next Fibonacci number\n        a = b; // Update a to the previous b\n        b = temp; // Update b to the new Fibonacci number\n    }\n    return b; // Return the n-th Fibonacci number\n}\n\n// Example usage:\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let counter = 0;\n    \n    for (let char of brackets) {\n        if (char === '<') {\n            counter++;\n        } else if (char === '>') {\n            counter--;\n        }\n        \n        // If counter goes negative, there's an unmatched closing bracket\n        if (counter < 0) {\n            return false;\n        }\n    }\n    \n    // If counter is not zero, there are unmatched opening brackets\n    return counter === 0;\n}\n\n// Example test cases\nconsole.log(correctBracketing(\"<\")); // False\nconsole.log(correctBracketing(\"<>\")); // True\nconsole.log(correctBracketing(\"<<><>>\")); // True\nconsole.log(correctBracketing(\"><<>\")); // False"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "function monotonic(l) {\n    if (l.length <= 1) return true;\n    \n    let increasing = true;\n    let decreasing = true;\n    \n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n\n// Example usage\nconsole.log(monotonic([1, 2, 4, 20]));  // True\nconsole.log(monotonic([1, 20, 4, 10])); // False\nconsole.log(monotonic([4, 1, 0, -10])); // True"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "function common(l1, l2) {\n    // Convert lists to sets to remove duplicates and find intersection\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    \n    // Find intersection of the two sets\n    const commonSet = new Set([...set1].filter(item => set2.has(item)));\n    \n    // Convert the set to a sorted array\n    const result = Array.from(commonSet).sort((a, b) => a - b);\n    \n    return result;\n}\n\n// Example usage\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    let largestFactor = 1;\n    \n    // Remove factors of 2\n    while (n % 2 === 0) {\n        largestFactor = 2;\n        n = n / 2;\n    }\n    \n    // Check odd factors from 3 onwards\n    let factor = 3;\n    while (factor * factor <= n) {\n        while (n % factor === 0) {\n            largestFactor = factor;\n            n = n / factor;\n        }\n        factor += 2;\n    }\n    \n    // If n is still greater than 1, then it is prime and is the largest factor\n    if (n > 1) {\n        largestFactor = n;\n    }\n    \n    return largestFactor;\n}\n\n// Test cases\nconsole.log(largestPrimeFactor(13195)); // 29\nconsole.log(largestPrimeFactor(2048));  // 2"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n    return n * (n + 1) / 2;\n}\n\n// Test cases\nconsole.log(sumToN(30));  // 465\nconsole.log(sumToN(100)); // 5050\nconsole.log(sumToN(5));   // 15\nconsole.log(sumToN(10));  // 55\nconsole.log(sumToN(1));   // 1"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let stack = [];\n\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === ')') {\n            if (stack.length === 0) {\n                // No matching opening bracket for this closing bracket\n                return false;\n            }\n            stack.pop();\n        }\n    }\n\n    // If the stack is empty, all opening brackets had matching closing brackets\n    return stack.length === 0;\n}\n\n// Test cases\nconsole.log(correctBracketing(\"(\"));         // False\nconsole.log(correctBracketing(\"()\"));        // True\nconsole.log(correctBracketing(\"(()())\"));    // True\nconsole.log(correctBracketing(\")(()\"));      // False"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n    // Initialize an empty array to store the coefficients of the derivative\n    let derivativeCoefficients = [];\n\n    // Iterate over the coefficients, starting from the 1st element (index 1)\n    // because the 0th element (constant term) derivative is 0\n    for (let i = 1; i < xs.length; i++) {\n        // Compute the new coefficient as i * xs[i]\n        derivativeCoefficients.push(i * xs[i]);\n    }\n\n    return derivativeCoefficients;\n}\n\n// Examples\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // Output: [2, 6]"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "function fibfib(n) {\n    // Handle the base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Initialize the first three elements of the sequence\n    let a = 0; // fibfib(0)\n    let b = 0; // fibfib(1)\n    let c = 1; // fibfib(2)\n\n    // Compute the n-th element iteratively\n    for (let i = 3; i <= n; i++) {\n        let next = a + b + c;\n        a = b;\n        b = c;\n        c = next;\n    }\n\n    return c;\n}\n\n// Example usage\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n    // Convert string to lowercase to handle case insensitivity\n    s = s.toLowerCase();\n\n    // Initialize the vowel count\n    let count = 0;\n\n    // Define a set of vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n\n    // Iterate through each character in the string\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n\n        // Check if the character is a vowel\n        if (vowels.has(char)) {\n            count++;\n        } else if (char === 'y' && i === s.length - 1) {\n            // Check if 'y' is at the end of the string\n            count++;\n        }\n    }\n\n    // Return the vowel count\n    return count;\n}\n\n// Example usage:\nconsole.log(vowelsCount(\"abcde\")); // Output: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Output: 3"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n    // Convert the integer to a string\n    let digits = x.toString();\n    let numDigits = digits.length;\n    \n    // If shift is greater than or equal to the number of digits, return the reversed string\n    if (shift >= numDigits) {\n        return digits.split('').reverse().join('');\n    }\n    \n    // Perform the circular shift to the right\n    shift = shift % numDigits; // In case shift is more than the number of digits, modulo it\n    return digits.slice(-shift) + digits.slice(0, -shift);\n}\n\n// Test cases\nconsole.log(circularShift(12, 1)); // \"21\"\nconsole.log(circularShift(12, 2)); // \"12\"\nconsole.log(circularShift(1234, 1)); // \"4123\"\nconsole.log(circularShift(1234, 3)); // \"2341\"\nconsole.log(circularShift(12345, 5)); // \"12345\"\nconsole.log(circularShift(12345, 6)); // \"54321\""}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitSum(s) {\n    // Initialize the sum to zero\n    let sum = 0;\n\n    // Iterate through each character in the string\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n\n        // Check if the character is uppercase\n        if (char === char.toUpperCase() && char !== char.toLowerCase()) {\n            // Add the ASCII code of the character to the sum\n            sum += char.charCodeAt(0);\n        }\n    }\n\n    // Return the final sum\n    return sum;\n}\n\n// Examples:\nconsole.log(digitSum(\"\")); // 0\nconsole.log(digitSum(\"abAB\")); // 131\nconsole.log(digitSum(\"abcCd\")); // 67\nconsole.log(digitSum(\"helloE\")); // 69\nconsole.log(digitSum(\"woArBld\")); // 131\nconsole.log(digitSum(\"aAaaaXa\")); // 153"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n    // Use regular expressions to extract numbers from the string\n    const result = s.match(/(\\d+) apples and (\\d+) oranges/);\n    \n    // Extract the numbers and convert them to integers\n    const apples = parseInt(result[1], 10);\n    const oranges = parseInt(result[2], 10);\n    \n    // Calculate the number of mangoes\n    const mangoes = n - apples - oranges;\n    \n    // Return the number of mangoes\n    return mangoes;\n}\n\n// Example usage:\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // -> 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));  // -> 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));// -> 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));// -> 19"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n    if (arr.length === 0) return [];\n    \n    let smallestEvenValue = Infinity;\n    let smallestEvenIndex = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (arr[i] < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n    }\n\n    return smallestEvenIndex === -1 ? [] : [smallestEvenValue, smallestEvenIndex];\n}\n\n// Example usages:\nconsole.log(pluck([4, 2, 3]));     // Output: [2, 1]\nconsole.log(pluck([1, 2, 3]));     // Output: [2, 1]\nconsole.log(pluck([]));            // Output: []\nconsole.log(pluck([5, 0, 3, 0, 4, 2])); // Output: [0, 1]"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "function search(lst) {\n    // Step 1: Count the frequency of each integer in the list\n    const frequency = {};\n    \n    lst.forEach(num => {\n        if (frequency[num]) {\n            frequency[num]++;\n        } else {\n            frequency[num] = 1;\n        }\n    });\n    \n    // Step 2: Find the integers that meet the criteria\n    let eligibleIntegers = [];\n    \n    for (let num in frequency) {\n        if (frequency[num] >= num) {\n            eligibleIntegers.push(parseInt(num));\n        }\n    }\n    \n    // Step 3: Return the greatest integer or -1 if no such integer exists\n    if (eligibleIntegers.length === 0) {\n        return -1;\n    } else {\n        return Math.max(...eligibleIntegers);\n    }\n}\n\n// Test cases\nconsole.log(search([4, 1, 2, 2, 3, 1]));  // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));  // Output: 3\nconsole.log(search([5, 5, 4, 4, 4]));  // Output: -1"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n    // If the list is empty, return it immediately\n    if (lst.length === 0) {\n        return [];\n    }\n\n    // Sort the list in ascending order\n    lst.sort((a, b) => a - b);\n\n    // Initialize two pointers\n    let start = 0;\n    let end = lst.length - 1;\n\n    // Result list to hold the strange sorted values\n    const result = [];\n\n    // Alternate between the two pointers\n    while (start <= end) {\n        // Push the current minimum\n        result.push(lst[start]);\n        start++;\n\n        // If start has not passed end, push the current maximum\n        if (start <= end) {\n            result.push(lst[end]);\n            end--;\n        }\n    }\n\n    return result;\n}\n\n// Examples\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strangeSortList([]));           // []"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        const s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Return the area rounded to 2 decimal points\n        return Math.round(area * 100) / 100;\n    } else {\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}\n\n// Example Usage\nconsole.log(triangleArea(3, 4, 5));  // Output: 6.00\nconsole.log(triangleArea(1, 2, 10)); // Output: -1"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if the list is palindromic\n    function isPalindromic(array) {\n        for (let i = 0; i < array.length / 2; i++) {\n            if (array[i] !== array[array.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Calculate the sum of elements in the list\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Check both conditions\n    return isPalindromic(q) && sum <= w;\n}\n\n// Example usage:\nconsole.log(willItFly([1, 2], 5)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 1)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 9)); // \u279e True\nconsole.log(willItFly([3], 5)); // \u279e True"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n// Test cases\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));   // Output: 1\nconsole.log(smallestChange([1, 2, 3, 2, 1]));         // Output: 0"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n    // Helper function to calculate the total number of characters in a list of strings\n    function totalChars(lst) {\n        return lst.reduce((sum, str) => sum + str.length, 0);\n    }\n\n    const totalCharsLst1 = totalChars(lst1);\n    const totalCharsLst2 = totalChars(lst2);\n\n    if (totalCharsLst1 < totalCharsLst2) {\n        return lst1;\n    } else if (totalCharsLst1 > totalCharsLst2) {\n        return lst2;\n    } else {\n        return lst1; // If both have the same number of characters, return the first list\n    }\n}\n\n// Test cases\nconsole.log(totalMatch([], [])); // \u279e []\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    if (a >= 100) {\n        return false;\n    }\n  \n    // List of prime numbers less than 100\n    const primes = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, \n        53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    ];\n\n    // Check combinations of three primes\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i + 1; j < primes.length; j++) {\n            for (let k = j + 1; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n// Example usage:\nconsole.log(isMultiplyPrime(30)); // True\nconsole.log(isMultiplyPrime(60)); // False"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function isSimplePower(x, n) {\n    // Edge case: Any number to the power of 0 is 1\n    if (x === 1) return true;\n    if (n === 1) return x === 1;\n\n    // Continue dividing x by n until x becomes 1 or until it is no longer divisible by n\n    while (x % n === 0 && x > 1) {\n        x /= n;\n    }\n\n    // If x is reduced to 1, it means it was divisible by n all the way\n    return x === 1;\n}\n\n// Test cases\nconsole.log(isSimplePower(1, 4)); // true\nconsole.log(isSimplePower(2, 2)); // true\nconsole.log(isSimplePower(8, 2)); // true\nconsole.log(isSimplePower(3, 2)); // false\nconsole.log(isSimplePower(3, 1)); // false\nconsole.log(isSimplePower(5, 3)); // false"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "function iscube(a) {\n    // Find the absolute value of the input\n    const absA = Math.abs(a);\n    \n    // Compute the cube root of the absolute value\n    const cubeRoot = Math.cbrt(absA);\n\n    // Check if the cube root rounded to the nearest integer cubed equals the absolute value\n    const roundedCubeRoot = Math.round(cubeRoot);\n    \n    // Calculate the cube of the rounded cube root\n    const cube = roundedCubeRoot * roundedCubeRoot * roundedCubeRoot;\n\n    // Check if the cube is equal to the absolute value of the input\n    return cube === absA;\n}\n\n// Test cases\nconsole.log(iscube(1));     // True\nconsole.log(iscube(2));     // False\nconsole.log(iscube(-1));    // True\nconsole.log(iscube(64));    // True\nconsole.log(iscube(0));     // True\nconsole.log(iscube(180));   // False"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n    // Prime hexadecimal digits\n    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);\n\n    // Counter for prime digits\n    let count = 0;\n\n    // Iterate through each character in the string\n    for (let char of num) {\n        // Check if the character is in the set of prime digits\n        if (primeHexDigits.has(char)) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n// Test cases\nconsole.log(hexKey(\"AB\")); // Output: 1\nconsole.log(hexKey(\"1077E\")); // Output: 2\nconsole.log(hexKey(\"ABED1A33\")); // Output: 4\nconsole.log(hexKey(\"123456789ABCDEF0\")); // Output: 6\nconsole.log(hexKey(\"2020\")); // Output: 2"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    // Convert the decimal number to a binary string\n    const binaryString = decimal.toString(2);\n    \n    // Format the binary string with 'db' at the beginning and end\n    return `db${binaryString}db`;\n}\n\n// Examples\nconsole.log(decimalToBinary(15));  // Output: \"db1111db\"\nconsole.log(decimalToBinary(32));  // Output: \"db100000db\""}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "function isHappy(s) {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every set of three consecutive characters\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If no set of three consecutive characters are the same, return true\n    return true;\n}\n\n// Test cases\nconsole.log(isHappy(\"a\")); // False\nconsole.log(isHappy(\"aa\")); // False\nconsole.log(isHappy(\"abcd\")); // True\nconsole.log(isHappy(\"aabb\")); // False\nconsole.log(isHappy(\"adb\")); // True\nconsole.log(isHappy(\"xyy\")); // False"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    // Define the mapping of GPA ranges to letter grades\n    const gradeMap = [\n        { min: 4.0, grade: 'A+' },\n        { min: 3.7, grade: 'A' },\n        { min: 3.3, grade: 'A-' },\n        { min: 3.0, grade: 'B+' },\n        { min: 2.7, grade: 'B' },\n        { min: 2.3, grade: 'B-' },\n        { min: 2.0, grade: 'C+' },\n        { min: 1.7, grade: 'C' },\n        { min: 1.3, grade: 'C-' },\n        { min: 1.0, grade: 'D+' },\n        { min: 0.7, grade: 'D' },\n        { min: 0.0, grade: 'D-' },\n        { min: -Infinity, grade: 'E' } // Covers the case where GPA is exactly 0.0\n    ];\n\n    // Function to get letter grade from GPA\n    function getLetterGrade(gpa) {\n        for (const { min, grade } of gradeMap) {\n            if (gpa >= min) {\n                return grade;\n            }\n        }\n    }\n\n    // Convert each GPA to its corresponding letter grade\n    return grades.map(getLetterGrade);\n}\n\n// Example usage:\nconsole.log(numericalLetterGrade([4.0, 3.0, 1.7, 2.0, 3.5]));\n// Output: ['A+', 'B', 'C-', 'C+', 'A-']"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false; // 0 and 1 are not prime numbers\n    if (num <= 3) return true;  // 2 and 3 are prime numbers\n\n    // Eliminate even numbers and divisible by 3\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    // Check divisors from 5 to \u221anum\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\nfunction primeLength(string) {\n    const length = string.length;\n    return isPrime(length);\n}\n\n// Test examples\nconsole.log(primeLength('Hello'));    // True (length is 5)\nconsole.log(primeLength('abcdcba'));  // True (length is 7)\nconsole.log(primeLength('kittens'));  // True (length is 7)\nconsole.log(primeLength('orange'));   // False (length is 6)"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n) {\n    if (n === 1) {\n        // Special case: Only single-digit number that starts or ends with 1 is '1'\n        return 1;\n    }\n    \n    let startWithOne = Math.pow(10, n - 1);\n    let endWithOne = Math.pow(10, n - 1);\n    let startAndEndWithOne = Math.pow(10, n - 2);\n    \n    return startWithOne + endWithOne - startAndEndWithOne;\n}\n\n// Example usage:\nconsole.log(startsOneEnds(1)); // Output: 1\nconsole.log(startsOneEnds(2)); // Output: 19\nconsole.log(startsOneEnds(3)); // Output: 190"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "function solve(N) {\n    // Calculate the sum of the digits\n    let sum = 0;\n    let num = N;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n\n    // Convert the sum to a binary string\n    return sum.toString(2);\n}\n\n// Example usage:\nconsole.log(solve(1000)); // Output: \"1\"\nconsole.log(solve(150));  // Output: \"110\"\nconsole.log(solve(147));  // Output: \"1100\""}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) { // Start from 1 and increment by 2 to access odd indices\n        if (lst[i] % 2 === 0) { // Check if the element at the odd index is even\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n// Test cases\nconsole.log(add([4, 2, 6, 7])); // Output: 2\nconsole.log(add([1, 3, 5, 8, 10, 12])); // Output: 12 (8 and 12 are even and at odd indices)\nconsole.log(add([2, 4, 6, 8, 10, 12])); // Output: 16 (4 and 12 are even and at odd indices)\nconsole.log(add([1, 3, 5, 7, 9, 11])); // Output: 0 (no even elements at odd indices)"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n  // Split the string into words and spaces using regex\n  const wordsAndSpaces = s.split(/(\\s+)/);\n  \n  // Process each part: sort characters in words, keep spaces unchanged\n  const sortedParts = wordsAndSpaces.map(part => {\n    // Check if the part is a word or a space\n    if (/\\s/.test(part)) {\n      // It's a space, return it unchanged\n      return part;\n    } else {\n      // It's a word, sort its characters\n      return part.split('').sort().join('');\n    }\n  });\n\n  // Join the processed parts back into a single string\n  return sortedParts.join('');\n}\n\n// Test cases\nconsole.log(antiShuffle('Hi')); // Output: 'Hi'\nconsole.log(antiShuffle('hello')); // Output: 'ehllo'\nconsole.log(antiShuffle('Hello World!!!')); // Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "function getRow(lst, x) {\n    let coordinates = [];\n\n    // Traverse the 2D list and collect coordinates of the integer x\n    for (let row = 0; row < lst.length; row++) {\n        for (let col = 0; col < lst[row].length; col++) {\n            if (lst[row][col] === x) {\n                coordinates.push([row, col]);\n            }\n        }\n    }\n\n    // Sort the coordinates: first by row in ascending order, then by column in descending order\n    coordinates.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // descending order for columns within the same row\n        }\n        return a[0] - b[0]; // ascending order for rows\n    });\n\n    return coordinates;\n}\n\n// Example usage:\nconsole.log(getRow([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1)); // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(getRow([], 1)); // Output: []\n\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // Output: [(2, 2)]"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "function sortArray(array) {\n    // Check if the array is empty or has only one element\n    if (array.length <= 1) {\n        return array.slice(); // Return a copy of the array\n    }\n\n    // Calculate the sum of the first and last elements\n    const sum = array[0] + array[array.length - 1];\n\n    // Create a copy of the array to avoid modifying the original\n    const sortedArray = array.slice();\n\n    // Sort the array based on the sum\n    if (sum % 2 === 0) {\n        // If the sum is even, sort in descending order\n        sortedArray.sort((a, b) => b - a);\n    } else {\n        // If the sum is odd, sort in ascending order\n        sortedArray.sort((a, b) => a - b);\n    }\n\n    return sortedArray;\n}\n\n// Test cases\nconsole.log(sortArray([])); // => []\nconsole.log(sortArray([5])); // => [5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5])); // => [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6])); // => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        // Calculate new character code by shifting 4 places\n        let newCharCode = charCode + 4;\n        // Wrap around if it exceeds 'z'\n        if (newCharCode > 'z'.charCodeAt(0)) {\n            newCharCode = newCharCode - 26;\n        }\n        // Append the new character to the result\n        result += String.fromCharCode(newCharCode);\n    }\n    return result;\n}\n\n// Test cases\nconsole.log(encrypt('hi')); // Output: 'lm'\nconsole.log(encrypt('asdfghjkl')); // Output: 'ewhjklnop'\nconsole.log(encrypt('gf')); // Output: 'kj'\nconsole.log(encrypt('et')); // Output: 'ix'"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst) {\n    // Return None if the list is empty\n    if (lst.length === 0) {\n        return \"None\";\n    }\n    \n    // Create a set to eliminate duplicates\n    let uniqueValues = new Set(lst);\n    \n    // Convert the set back to an array and sort it\n    let sortedUniqueValues = Array.from(uniqueValues).sort((a, b) => a - b);\n    \n    // Check if there are at least 2 unique elements\n    if (sortedUniqueValues.length < 2) {\n        return \"None\";\n    }\n    \n    // Return the 2nd smallest element\n    return sortedUniqueValues[1];\n}\n\n// Test cases\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // Output: 2\nconsole.log(nextSmallest([]));              // Output: None\nconsole.log(nextSmallest([1, 1]));          // Output: None"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function isBored(s) {\n    // Split the string by '.', '?', or '!'\n    let sentences = s.split(/[.?!]/);\n    let count = 0;\n\n    for (let sentence of sentences) {\n        // Trim whitespace from the start and end of the sentence\n        let trimmedSentence = sentence.trim();\n        // Check if the sentence starts with \"I\"\n        if (trimmedSentence.startsWith(\"I\")) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n// Example usage:\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\nconsole.log(isBored(\"I am happy! Are you happy? I think so.\")); // 2"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function anyInt(x, y, z) {\n    // Check if all inputs are integers\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        // Check if any one of the numbers is equal to the sum of the other two\n        if (x === y + z || y === x + z || z === x + y) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Examples\nconsole.log(anyInt(5, 2, 7)); // \u279e True\nconsole.log(anyInt(3, 2, 2)); // \u279e False\nconsole.log(anyInt(3, -2, 1)); // \u279e True\nconsole.log(anyInt(3.6, -2.2, 2)); // \u279e False"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n    function swapCase(char) {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }\n\n    function replaceVowel(char) {\n        const vowels = 'aeiou';\n        const shiftedVowels = 'cgkqw';\n        \n        let lowerChar = char.toLowerCase();\n        let index = vowels.indexOf(lowerChar);\n        \n        if (index !== -1) {\n            let replacedChar = shiftedVowels[index];\n            return char === lowerChar ? replacedChar : replacedChar.toUpperCase();\n        }\n        return char;\n    }\n\n    let encodedMessage = '';\n    \n    for (let char of message) {\n        let swappedChar = swapCase(char);\n        let finalChar = replaceVowel(swappedChar);\n        encodedMessage += finalChar;\n    }\n    \n    return encodedMessage;\n}\n\n// Examples:\nconsole.log(encode('test')); // 'TGST'\nconsole.log(encode('This is a message')); // 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "/**\n * Helper function to check if a number is prime.\n * @param {number} num - The number to check.\n * @returns {boolean} - True if the number is prime, otherwise false.\n */\nfunction isPrime(num) {\n    if (num <= 1) return false; // 0 and 1 are not prime numbers\n    if (num <= 3) return true;  // 2 and 3 are prime numbers\n    if (num % 2 === 0 || num % 3 === 0) return false; // Exclude multiples of 2 and 3\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\n/**\n * Main function to find the sum of the digits of the largest prime in the list.\n * @param {number[]} lst - The list of integers.\n * @returns {number} - The sum of the digits of the largest prime number.\n */\nfunction skjkasdkd(lst) {\n    // Filter out the prime numbers from the list\n    const primes = lst.filter(isPrime);\n    \n    if (primes.length === 0) {\n        // No primes in the list\n        return 0;\n    }\n    \n    // Find the largest prime number\n    const largestPrime = Math.max(...primes);\n    \n    // Calculate the sum of the digits of the largest prime\n    const sumOfDigits = largestPrime.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    \n    return sumOfDigits;\n}\n\n// Example usage:\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])); // Output: 10\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])); // Output: 25\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])); // Output: 13\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])); // Output: 11\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21])); // Output: 3\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7])); // Output: 7"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Check if the dictionary is empty\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    // Initialize flags to check for all lowercase or all uppercase keys\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    // Iterate over the dictionary keys\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key !== key.toLowerCase()) {\n            allLowerCase = false;\n        }\n        if (key !== key.toUpperCase()) {\n            allUpperCase = false;\n        }\n    }\n\n    // Return true if all keys are either all lowercase or all uppercase\n    return allLowerCase || allUpperCase;\n}\n\n// Examples:\nconsole.log(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // True\nconsole.log(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // False\nconsole.log(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // False\nconsole.log(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // False\nconsole.log(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\"})); // True"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function countUpTo(n) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num === 2) return true;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    const primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    \n    return primes;\n}\n\n// Test cases\nconsole.log(countUpTo(5));   // [2, 3]\nconsole.log(countUpTo(11));  // [2, 3, 5, 7]\nconsole.log(countUpTo(0));   // []\nconsole.log(countUpTo(20));  // [2, 3, 5, 7, 11, 13, 17, 19]\nconsole.log(countUpTo(1));   // []\nconsole.log(countUpTo(18));  // [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(a, b) {\n  // Get the unit digits\n  let unitDigitA = Math.abs(a) % 10;\n  let unitDigitB = Math.abs(b) % 10;\n  \n  // Calculate the product of the unit digits\n  let product = unitDigitA * unitDigitB;\n  \n  // Return the result\n  return product;\n}\n\n// Example usage:\nconsole.log(multiply(148, 412)); // Should return 16\nconsole.log(multiply(19, 28));   // Should return 72\nconsole.log(multiply(2020, 1851)); // Should return 0\nconsole.log(multiply(14, -15));  // Should return 20"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n    const vowels = new Set(['A', 'E', 'I', 'O', 'U']); // Set of uppercase vowels\n    let count = 0;\n\n    for (let i = 0; i < s.length; i += 2) { // Loop through even indices\n        if (vowels.has(s[i])) { // Check if the character is an uppercase vowel\n            count++;\n        }\n    }\n\n    return count;\n}\n\n// Example usages:\nconsole.log(countUpper('aBCdEf')); // returns 1\nconsole.log(countUpper('abcdefg')); // returns 0\nconsole.log(countUpper('dBBE')); // returns 0"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n    // Convert the string to a float number\n    let num = parseFloat(value);\n\n    // Check if the number is exactly halfway between two integers\n    if (num % 1 === 0.5 || num % 1 === -0.5) {\n        // If the number is positive, round up\n        if (num > 0) {\n            return Math.ceil(num);\n        } \n        // If the number is negative, round down (away from zero)\n        else {\n            return Math.floor(num);\n        }\n    } else {\n        // Use Math.round for normal rounding\n        return Math.round(num);\n    }\n}\n\n// Test cases\nconsole.log(closestInteger(\"10\"));    // 10\nconsole.log(closestInteger(\"15.3\"));  // 15\nconsole.log(closestInteger(\"14.5\"));  // 15\nconsole.log(closestInteger(\"-14.5\")); // -15\nconsole.log(closestInteger(\"0.5\"));   // 1\nconsole.log(closestInteger(\"-0.5\"));  // -1"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "function makeAPile(n) {\n    // Initialize the list with the first level having 'n' stones\n    let levels = [n];\n    \n    // Determine the starting increment based on whether n is odd or even\n    let increment = (n % 2 === 0) ? 2 : 2;\n\n    // Generate the next levels\n    for (let i = 1; i < n; i++) {\n        // Calculate the number of stones in the next level\n        let nextLevelStones = levels[i - 1] + increment;\n        \n        // Add the number of stones for the next level to the list\n        levels.push(nextLevelStones);\n    }\n    \n    // Return the list of levels\n    return levels;\n}\n\n// Example usage:\nconsole.log(makeAPile(3)); // Output: [3, 5, 7]\nconsole.log(makeAPile(4)); // Output: [4, 6, 8, 10]\nconsole.log(makeAPile(1)); // Output: [1]"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function wordsString(s) {\n    // Use regular expression to split the string by commas and spaces\n    return s.split(/[,\\s]+/);\n}\n\n// Test cases\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n    \n    // Iterate from y to x to find the largest even number\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    \n    // If no even number is found, return -1\n    return -1;\n}\n\n// Example usage:\nconsole.log(chooseNum(12, 15)); // Output: 14\nconsole.log(chooseNum(13, 12)); // Output: -1\nconsole.log(chooseNum(1, 10));  // Output: 10\nconsole.log(chooseNum(5, 5));   // Output: -1\nconsole.log(chooseNum(6, 6));   // Output: 6"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) {\n        return -1;\n    }\n\n    // Calculate the sum of integers from n to m\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    // Calculate the number of integers from n to m\n    let count = m - n + 1;\n\n    // Calculate the average and round it to the nearest integer\n    let avg = Math.round(sum / count);\n\n    // Convert the rounded average to binary\n    let binaryAvg = \"0b\" + avg.toString(2);\n\n    return binaryAvg;\n}\n\n// Test cases\nconsole.log(roundedAvg(1, 5));  // \"0b11\"\nconsole.log(roundedAvg(7, 5));  // -1\nconsole.log(roundedAvg(10, 20));  // \"0b1111\"\nconsole.log(roundedAvg(20, 33));  // \"0b11010\""}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n    // Helper function to check if a number contains any even digit\n    function hasEvenDigit(num) {\n        const evenDigits = new Set(['0', '2', '4', '6', '8']);\n        const numStr = num.toString();\n        for (let char of numStr) {\n            if (evenDigits.has(char)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    // Filter out numbers that have any even digit\n    const filtered = x.filter(num => !hasEvenDigit(num));\n    \n    // Sort the filtered list in increasing order\n    filtered.sort((a, b) => a - b);\n    \n    return filtered;\n}\n\n// Example usage:\nconsole.log(uniqueDigits([15, 33, 1422, 1])); // Output: [1, 15, 33]\nconsole.log(uniqueDigits([152, 323, 1422, 10])); // Output: []"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function byLength(arr) {\n    // Define a mapping from digits to their corresponding names\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\n    // Filter the array to keep only integers between 1 and 9 inclusive\n    let filteredArr = arr.filter(num => num >= 1 && num <= 9);\n\n    // Sort the filtered array in ascending order\n    filteredArr.sort((a, b) => a - b);\n\n    // Reverse the sorted array\n    filteredArr.reverse();\n\n    // Replace each digit with its corresponding name\n    let result = filteredArr.map(num => digitNames[num - 1]);\n\n    return result;\n}\n\n// Test cases\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(byLength([])); // []\nconsole.log(byLength([1, -1, 55])); // [\"One\"]"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n    // Helper function to calculate the factorial of a number\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Helper function to calculate the sum of numbers from 1 to num\n    function sumUpTo(num) {\n        return (num * (num + 1)) / 2; // Using the formula for sum of first n natural numbers\n    }\n\n    // Initialize the result list\n    const result = [];\n\n    // Loop from 1 to n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // If i is even, compute factorial of i\n            result.push(factorial(i));\n        } else {\n            // If i is odd, compute sum of numbers from 1 to i\n            result.push(sumUpTo(i));\n        }\n    }\n\n    // Return the result list\n    return result;\n}\n\n// Example usage:\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    // Helper function to check if a number is a palindrome\n    function isPalindrome(num) {\n        const str = num.toString();\n        const reversedStr = str.split('').reverse().join('');\n        return str === reversedStr;\n    }\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\n// Example usage:\nconsole.log(evenOddPalindrome(3));  // Output: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Output: [4, 6]"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function countNums(arr) {\n    function sumOfDigits(num) {\n        let strNum = Math.abs(num).toString(); // Convert to absolute value and string\n        let sum = 0;\n        \n        // Sum the digits\n        for (let i = 0; i < strNum.length; i++) {\n            sum += parseInt(strNum[i], 10);\n        }\n        \n        // If original number is negative, adjust the sum\n        if (num < 0) {\n            sum = sum - 2 * parseInt(strNum[0], 10); // Subtract twice the first digit value\n        }\n        \n        return sum;\n    }\n    \n    let count = 0;\n    \n    for (let num of arr) {\n        if (sumOfDigits(num) > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage:\nconsole.log(countNums([])); // 0\nconsole.log(countNums([-1, 11, -11])); // 1\nconsole.log(countNums([1, 1, 2])); // 3"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "function moveOneBall(arr) {\n    // If the array is empty or has only one element, it's already sorted\n    if (arr.length <= 1) return true;\n\n    let n = arr.length;\n    let count = 0;\n\n    // Count the inflection points\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n\n    // If there is more than one inflection point, the array cannot be sorted by right shifts\n    if (count > 1) return false;\n\n    // Otherwise, it is possible to sort the array by right shifts\n    return true;\n}\n\n// Test cases\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // True\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // False\nconsole.log(moveOneBall([1, 2, 3, 4, 5])); // True\nconsole.log(moveOneBall([5, 1, 2, 3, 4])); // True\nconsole.log(moveOneBall([])); // True"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // Count the number of even and odd elements in lst1\n    let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n    let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n    \n    // If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2,\n    // then we can replace all odd elements in lst1 with even elements from lst2\n    if (oddCount1 <= evenCount2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage:\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(test) {\n    if (test.trim() === '') return {};\n\n    // Step 1: Split the input string into individual letters\n    const letters = test.split(' ');\n\n    // Step 2: Count the occurrences of each letter\n    const counts = {};\n    for (let letter of letters) {\n        if (counts[letter]) {\n            counts[letter]++;\n        } else {\n            counts[letter] = 1;\n        }\n    }\n\n    // Step 3: Determine the maximum count of occurrences\n    const maxCount = Math.max(...Object.values(counts));\n\n    // Step 4: Collect all letters that have this maximum count\n    const result = {};\n    for (let [letter, count] of Object.entries(counts)) {\n        if (count === maxCount) {\n            result[letter] = count;\n        }\n    }\n\n    // Step 5: Return the result as an object\n    return result;\n}\n\n// Example usage:\nconsole.log(histogram('a b c'));      // {'a': 1, 'b': 1, 'c': 1}\nconsole.log(histogram('a b b a'));    // {'a': 2, 'b': 2}\nconsole.log(histogram('a b c a b'));  // {'a': 2, 'b': 2}\nconsole.log(histogram('b b b b a'));  // {'b': 4}\nconsole.log(histogram(''));           // {}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // Step 1: Remove all characters from s that are present in c\n    let resultString = \"\";\n    for (let char of s) {\n        if (!c.includes(char)) {\n            resultString += char;\n        }\n    }\n\n    // Step 2: Check if the resultant string is a palindrome\n    let isPalindrome = resultString === resultString.split('').reverse().join('');\n\n    // Step 3: Return the tuple containing the result string and the palindrome check\n    return [resultString, isPalindrome];\n}\n\n// Example usage\nconsole.log(reverseDelete(\"abcde\", \"ae\"));        // Output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));        // Output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\"));    // Output: ['cdedc', true]"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "function oddCount(lst) {\n    // Function to determine if a digit is odd\n    function isOdd(digit) {\n        return digit % 2 !== 0;\n    }\n\n    return lst.map((str) => {\n        // Count the number of odd digits in the string\n        let oddCount = 0;\n        for (let char of str) {\n            if (isOdd(parseInt(char))) {\n                oddCount++;\n            }\n        }\n        \n        // Construct the output string based on the count of odd digits\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n}\n\n// Test cases\nconsole.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(oddCount(['3', '11111111'])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "function minSubArraySum(nums) {\n    if (nums.length === 0) {\n        throw new Error(\"The array should contain at least one element.\");\n    }\n\n    // Initialize min_sum and current_sum with the first element of the array.\n    let min_sum = nums[0];\n    let current_sum = nums[0];\n\n    // Iterate through the array starting from the second element.\n    for (let i = 1; i < nums.length; i++) {\n        // Update current_sum to be the minimum of the current element or the sum of current_sum and the current element.\n        current_sum = Math.min(nums[i], current_sum + nums[i]);\n        // Update min_sum if current_sum is smaller.\n        min_sum = Math.min(min_sum, current_sum);\n    }\n\n    return min_sum;\n}\n\n// Example usage:\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1\nconsole.log(minSubArraySum([-1, -2, -3])); // Output: -6"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    // Step 1: Count the total number of water units\n    let totalWaterUnits = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            totalWaterUnits += grid[i][j];\n        }\n    }\n\n    // Step 2: Calculate the number of times we need to lower the bucket\n    const timesToLowerBucket = Math.ceil(totalWaterUnits / capacity);\n    \n    return timesToLowerBucket;\n}\n\n// Example usage:\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1));  // Output: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2));  // Output: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5));  // Output: 0"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function countOnes(num) {\n    // Convert number to binary string and count the number of '1's using a regular expression.\n    return num.toString(2).replace(/0/g, '').length;\n}\n\nfunction sortArray(arr) {\n    return arr.sort((a, b) => {\n        const onesA = countOnes(a);\n        const onesB = countOnes(b);\n\n        if (onesA === onesB) {\n            return a - b; // Sort by decimal value if the number of ones is the same\n        } else {\n            return onesA - onesB; // Sort by the number of ones\n        }\n    });\n}\n\n// Test cases\nconsole.log(sortArray([1, 5, 2, 3, 4])); // [1, 2, 3, 4, 5]\nconsole.log(sortArray([-2, -3, -4, -5, -6])); // [-6, -5, -4, -3, -2]\nconsole.log(sortArray([1, 0, 2, 3, 4])); // [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(s, n) {\n    // Helper function to count the number of consonants in a word\n    function countConsonants(word) {\n        const vowels = 'aeiouAEIOU';\n        let consonantCount = 0;\n\n        for (let char of word) {\n            if (!vowels.includes(char) && /[a-zA-Z]/.test(char)) {\n                consonantCount++;\n            }\n        }\n\n        return consonantCount;\n    }\n\n    if (s === \"\") {\n        return [];\n    }\n\n    // Split the string into words\n    const words = s.split(' ');\n\n    // Filter words that have exactly `n` consonants\n    const result = words.filter(word => countConsonants(word) === n);\n\n    return result;\n}\n\n// Examples\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    // Define the set of vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    \n    // We need to keep track of the characters as we traverse from right to left\n    let state = 'initial';\n    let vowel = '';\n\n    // Traverse the word from the right to the left\n    for (let i = word.length - 1; i >= 0; i--) {\n        let char = word[i];\n\n        if (vowels.has(char)) {\n            if (state === 'consonant') {\n                state = 'vowel';\n                vowel = char;\n            }\n        } else {\n            // It's a consonant\n            if (state === 'vowel') {\n                return vowel;\n            } else {\n                state = 'consonant';\n            }\n        }\n    }\n\n    // If no such vowel is found, return an empty string\n    return '';\n}\n\n// Testing the function with provided examples\nconsole.log(getClosestVowel(\"yogurt\")); // Expected output: \"u\"\nconsole.log(getClosestVowel(\"FULL\"));   // Expected output: \"U\"\nconsole.log(getClosestVowel(\"quick\"));  // Expected output: \"\"\nconsole.log(getClosestVowel(\"ab\"));     // Expected output: \"\"\nconsole.log(getClosestVowel(\"abecid\")); // Expected output: \"e\""}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "function matchParens(lst) {\n    const [s1, s2] = lst;\n\n    const isBalanced = (s) => {\n        let balance = 0;\n        for (let char of s) {\n            if (char === '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance === 0;\n    };\n\n    const concatenated1 = s1 + s2;\n    const concatenated2 = s2 + s1;\n\n    if (isBalanced(concatenated1) || isBalanced(concatenated2)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n// Test cases\nconsole.log(matchParens(['()(', ')'])); // 'Yes'\nconsole.log(matchParens([')', ')']));   // 'No'\nconsole.log(matchParens(['(', ')']));   // 'Yes'\nconsole.log(matchParens(['(()', '())'])); // 'Yes'\nconsole.log(matchParens([')(', '()'])); // 'No'"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n    if (k === 0) {\n        return [];\n    }\n  \n    // Step 1: Sort the array in descending order\n    let sortedArr = arr.slice().sort((a, b) => b - a);\n    \n    // Step 2: Take the first k elements\n    let maxKElements = sortedArr.slice(0, k);\n    \n    // Step 3: Sort these k elements in ascending order and return\n    return maxKElements.sort((a, b) => a - b);\n}\n\n// Test cases\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // Output: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // Output: []\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // Output: [1, 2, 3, 4, 5]"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "function solution(lst) {\n    let sum = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        // Check if the position is even (0-based index)\n        if (i % 2 === 0) {\n            // Check if the element is odd\n            if (lst[i] % 2 !== 0) {\n                sum += lst[i];\n            }\n        }\n    }\n\n    return sum;\n}\n\n// Test cases\nconsole.log(solution([5, 8, 7, 1])); // Output: 12\nconsole.log(solution([3, 3, 3, 3, 3])); // Output: 9\nconsole.log(solution([30, 13, 24, 321])); // Output: 0"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (Math.abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(addElements(arr, k)); // Output: 24"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "function getOddCollatz(n) {\n    // Initialize an array to store the odd numbers in the Collatz sequence\n    const oddNumbers = [];\n\n    // Generate the Collatz sequence starting from n\n    while (n !== 1) {\n        // If n is odd, add it to the oddNumbers array\n        if (n % 2 !== 0) {\n            oddNumbers.push(n);\n        }\n        // Apply the Collatz rules\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n\n    // 1 is always part of the Collatz sequence, and it is odd\n    oddNumbers.push(1);\n\n    // Sort the odd numbers in increasing order\n    oddNumbers.sort((a, b) => a - b);\n\n    // Return the sorted list of odd numbers\n    return oddNumbers;\n}\n\n// Example usage:\nconsole.log(getOddCollatz(5)); // Output: [1, 5]\nconsole.log(getOddCollatz(7)); // Example for another number"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n    // 1. Check if the date string is empty\n    if (!date) {\n        return false;\n    }\n\n    // 2. Verify if the date string matches the required format: mm-dd-yyyy\n    const datePattern = /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$/;\n    if (!datePattern.test(date)) {\n        return false;\n    }\n\n    // 3. Parse the month, day, and year from the date string\n    const [month, day, year] = date.split('-').map(Number);\n\n    // 4. Check if the month is between 1 and 12\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // 5. Validate the day based on the month\n    const daysInMonth = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    };\n\n    if (day < 1 || day > daysInMonth[month]) {\n        return false;\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n// Test cases\nconsole.log(validDate('03-11-2000')); // True\nconsole.log(validDate('15-01-2012')); // False\nconsole.log(validDate('04-0-2040'));  // False\nconsole.log(validDate('06-04-2020')); // True\nconsole.log(validDate('06/04/2020')); // False"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "function splitWords(txt) {\n    // Check for whitespace\n    if (/\\s/.test(txt)) {\n        return txt.split(/\\s+/);\n    }\n\n    // Check for commas\n    if (txt.includes(',')) {\n        return txt.split(',');\n    }\n\n    // Count lowercase letters with odd order in the alphabet\n    let oddOrderCount = 0;\n    for (let i = 0; i < txt.length; i++) {\n        let char = txt[i];\n        if (char >= 'a' && char <= 'z') {\n            let charOrder = char.charCodeAt(0) - 'a'.charCodeAt(0);\n            if (charOrder % 2 !== 0) {\n                oddOrderCount++;\n            }\n        }\n    }\n    \n    return oddOrderCount;\n}\n\n// Test cases\nconsole.log(splitWords(\"Hello world!\")); // \u279e [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"Hello,world!\")); // \u279e [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"abcdef\"));       // \u279e 3"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function isSorted(lst) {\n    // Check if the list is sorted and count occurrences of each number\n    let numberCounts = {};\n\n    for (let i = 0; i < lst.length; i++) {\n        // Count occurrences\n        if (numberCounts[lst[i]] === undefined) {\n            numberCounts[lst[i]] = 1;\n        } else {\n            numberCounts[lst[i]]++;\n        }\n\n        // If a number appears more than twice, return false\n        if (numberCounts[lst[i]] > 2) {\n            return false;\n        }\n\n        // Check if the list is sorted\n        if (i > 0 && lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Example test cases\nconsole.log(isSorted([5])); // \u279e True\nconsole.log(isSorted([1, 2, 3, 4, 5])); // \u279e True\nconsole.log(isSorted([1, 3, 2, 4, 5])); // \u279e False\nconsole.log(isSorted([1, 2, 3, 4, 5, 6])); // \u279e True\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7])); // \u279e True\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7])); // \u279e False\nconsole.log(isSorted([1, 2, 2, 3, 3, 4])); // \u279e True\nconsole.log(isSorted([1, 2, 2, 2, 3, 4])); // \u279e False"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Helper function to determine if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    const start1 = interval1[0];\n    const end1 = interval1[1];\n    const start2 = interval2[0];\n    const end2 = interval2[1];\n    \n    // Calculate the intersection\n    const intersectionStart = Math.max(start1, start2);\n    const intersectionEnd = Math.min(end1, end2);\n    \n    if (intersectionStart <= intersectionEnd) {\n        // Calculate the length of the intersection\n        const lengthOfIntersection = intersectionEnd - intersectionStart + 1;\n        // Check if the length is a prime number\n        if (isPrime(lengthOfIntersection)) {\n            return \"YES\";\n        }\n    }\n    \n    return \"NO\";\n}\n\n// Testing the function with provided samples\nconsole.log(intersection([1, 2], [2, 3])); // Output: \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // Output: \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // Output: \"YES\""}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "function prodSigns(arr) {\n    // Step 1: Check if the array is empty\n    if (arr.length === 0) {\n        return \"none\";\n    }\n\n    let sumOfMagnitudes = 0;\n    let productOfSigns = 1;\n\n    // Step 2: Calculate the sum of magnitudes and product of signs\n    for (let num of arr) {\n        sumOfMagnitudes += Math.abs(num);\n        if (num === 0) {\n            productOfSigns = 0;\n        } else if (num > 0) {\n            productOfSigns *= 1;\n        } else {\n            productOfSigns *= -1;\n        }\n    }\n\n    // Step 4: Multiply the sum of magnitudes by the product of signs\n    let result = sumOfMagnitudes * productOfSigns;\n\n    // Step 5: Return the result\n    return result;\n}\n\n// Test cases\nconsole.log(prodSigns([1, 2, 2, -4])); // Output: -9\nconsole.log(prodSigns([0, 1]));        // Output: 0\nconsole.log(prodSigns([]));            // Output: \"none\""}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "function minpath(grid, k) {\n    const N = grid.length;  // Assuming grid is always N x N\n    const directions = [\n        [0, 1], [1, 0], [0, -1], [-1, 0]  // Right, Down, Left, Up\n    ];\n\n    // Priority queue to store paths, initialized with all starting cells\n    let pq = new MinPriorityQueue({ priority: (path) => path.values.join(',') });\n\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            pq.enqueue({ path: [[i, j]], values: [grid[i][j]] });\n        }\n    }\n\n    while (!pq.isEmpty()) {\n        const { path, values } = pq.dequeue();\n        \n        if (values.length === k) {\n            return values;\n        }\n\n        const [x, y] = path[path.length - 1];\n\n        for (const [dx, dy] of directions) {\n            const nx = x + dx, ny = y + dy;\n            if (nx >= 0 && ny >= 0 && nx < N && ny < N) {\n                const newPath = path.concat([[nx, ny]]);\n                const newValues = values.concat(grid[nx][ny]);\n                pq.enqueue({ path: newPath, values: newValues });\n            }\n        }\n    }\n    return [];\n}\n\n// MinPriorityQueue class definition (for completeness)\nclass MinPriorityQueue {\n    constructor(config) {\n        this.queue = [];\n        this.priority = config.priority;\n    }\n\n    enqueue(item) {\n        this.queue.push(item);\n        this.queue.sort((a, b) => {\n            const pa = this.priority(a);\n            const pb = this.priority(b);\n            return pa < pb ? -1 : (pa > pb ? 1 : 0);\n        });\n    }\n\n    dequeue() {\n        return this.queue.shift();\n    }\n\n    isEmpty() {\n        return this.queue.length === 0;\n    }\n}\n\n// Example usage:\nconsole.log(minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));  // Output: [1, 2, 1]\nconsole.log(minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1));  // Output: [1]"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tri(n) {\n    const memo = {};\n\n    function computeTri(k) {\n        if (k in memo) {\n            return memo[k];\n        }\n\n        let result;\n        if (k === 1) {\n            result = 3;\n        } else if (k % 2 === 0) {\n            result = 1 + k / 2;\n        } else {\n            // For odd k, we need to ensure k + 1 value is computed before using it\n            if (!(k + 1 in memo)) {\n                memo[k + 1] = computeTri(k + 1);\n            }\n            result = computeTri(k - 1) + computeTri(k - 2) + memo[k + 1];\n        }\n\n        memo[k] = result;\n        return result;\n    }\n\n    const result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(computeTri(i));\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(tri(3));  // Output: [1, 3, 2, 8]\nconsole.log(tri(4));  // Output: [1, 3, 2, 8, 3]\nconsole.log(tri(5));  // Output: [1, 3, 2, 8, 3, 7]"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n    let product = 1;\n    let hasOddDigit = false;\n\n    // Convert the number to a string to iterate over each digit\n    let str = n.toString();\n\n    for (let char of str) {\n        let digit = parseInt(char);\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n    }\n\n    // If no odd digits were found, return 0\n    if (!hasOddDigit) {\n        return 0;\n    }\n\n    return product;\n}\n\n// Test cases\nconsole.log(digits(1));   // Should return 1\nconsole.log(digits(4));   // Should return 0\nconsole.log(digits(235)); // Should return 15"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function isNested(string) {\n    let stack = [];\n    let nestedFound = false;\n\n    for (let char of string) {\n        if (char === '[') {\n            stack.push(char);\n        } else if (char === ']') {\n            if (stack.length > 0) {\n                stack.pop();\n                // if we have more elements in stack after pop, it indicates nesting\n                if (stack.length > 0) {\n                    nestedFound = true;\n                }\n            } else {\n                // Unmatched closing bracket, invalid sequence\n                return false;\n            }\n        }\n    }\n\n    // If stack is empty and we found nested brackets\n    return nestedFound && stack.length === 0;\n}\n\n// Test cases\nconsole.log(isNested('[[]]'));           // \u279e True\nconsole.log(isNested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(isNested('[][]'));           // \u279e False\nconsole.log(isNested('[]'));             // \u279e False\nconsole.log(isNested('[[][]]'));         // \u279e True\nconsole.log(isNested('[[]][['));         // \u279e True"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n    return lst\n        .map(num => Math.ceil(num)) // Step 1: Round each number to the upper integer\n        .map(num => num * num)      // Step 2: Square each rounded number\n        .reduce((sum, num) => sum + num, 0); // Step 3: Sum all squared numbers and return the result\n}\n\n// Test cases\nconsole.log(sumSquares([1, 2, 3]));         // Output: 14\nconsole.log(sumSquares([1, 4, 9]));         // Output: 98\nconsole.log(sumSquares([1, 3, 5, 7]));      // Output: 84\nconsole.log(sumSquares([1.4, 4.2, 0]));     // Output: 29\nconsole.log(sumSquares([-2.4, 1, 1]));      // Output: 6"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Trim any trailing spaces\n    txt = txt.trim();\n    \n    // If the trimmed string is empty, return false\n    if (txt === \"\") {\n        return false;\n    }\n    \n    // Get the last character of the trimmed string\n    const lastChar = txt[txt.length - 1];\n    \n    // Check if the last character is an alphabetical character\n    if (!/[a-zA-Z]/.test(lastChar)) {\n        return false;\n    }\n    \n    // Check if the last character is part of a word\n    // It should not be preceded by another alphabetical character\n    if (txt.length > 1 && /[a-zA-Z]/.test(txt[txt.length - 2])) {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"\")); // \u279e False"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n    let index = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i;\n        }\n    }\n    return index;\n}\n\n// Test cases\nconsole.log(canArrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(canArrange([1, 2, 3]));       // Output: -1\nconsole.log(canArrange([5, 4, 3, 2, 1])); // Output: 4\nconsole.log(canArrange([10, 20, 30, 25]));// Output: 3\nconsole.log(canArrange([1]));             // Output: -1"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let largestNegative = null;\n    let smallestPositive = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n\n// Test cases\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // Output: [None, 1]\nconsole.log(largestSmallestIntegers([])); // Output: [None, None]\nconsole.log(largestSmallestIntegers([0])); // Output: [None, None]\nconsole.log(largestSmallestIntegers([-3, -2, -1, 1, 2, 3])); // Output: [-1, 1]\nconsole.log(largestSmallestIntegers([-10, -5, 0, 5, 10])); // Output: [-5, 5]"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(a, b) {\n    // Helper function to convert string with comma to a float.\n    function toFloat(value) {\n        if (typeof value === 'string') {\n            return parseFloat(value.replace(',', '.'));\n        }\n        return value;\n    }\n\n    // Convert both inputs to their numeric equivalents.\n    let numA = toFloat(a);\n    let numB = toFloat(b);\n\n    // Comparison logic\n    if (numA > numB) {\n        return a;\n    } else if (numB > numA) {\n        return b;\n    } else {\n        return \"none\";\n    }\n}\n\n// Example usage:\nconsole.log(compareOne(1, 2.5));       // \u279e 2.5\nconsole.log(compareOne(1, \"2,3\"));     // \u279e \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\"));   // \u279e \"6\"\nconsole.log(compareOne(\"1\", 1));       // \u279e \"none\""}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "function isEqualToSumEven(n) {\n    // Check if n is at least 8 and an even number\n    return n >= 8 && n % 2 === 0;\n}\n\n// Test cases\nconsole.log(isEqualToSumEven(4));  // False\nconsole.log(isEqualToSumEven(6));  // False\nconsole.log(isEqualToSumEven(8));  // True\nconsole.log(isEqualToSumEven(10)); // True\nconsole.log(isEqualToSumEven(12)); // True\nconsole.log(isEqualToSumEven(14)); // True\nconsole.log(isEqualToSumEven(16)); // True\nconsole.log(isEqualToSumEven(18)); // True\nconsole.log(isEqualToSumEven(20)); // True"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function specialFactorial(n) {\n    // Helper function to compute the factorial of a number\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = num; i > 1; i--) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Compute the special factorial\n    let specialFact = 1;\n    for (let i = n; i > 0; i--) {\n        specialFact *= factorial(i);\n    }\n\n    return specialFact;\n}\n\n// Example usage:\nconsole.log(specialFactorial(4)); // Output: 288"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n    // Replace sequences of 2 or more spaces with a single hyphen\n    text = text.replace(/ {2,}/g, '-');\n    // Replace all remaining single spaces with underscores\n    text = text.replace(/ /g, '_');\n    return text;\n}\n\n// Test cases\nconsole.log(fixSpaces(\"Example\")); // \"Example\"\nconsole.log(fixSpaces(\"Example 1\")); // \"Example_1\"\nconsole.log(fixSpaces(\" Example 2\")); // \"_Example_2\"\nconsole.log(fixSpaces(\" Example   3\")); // \"_Example-3\""}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "function fileNameCheck(filename) {\n    // Check for exactly one dot\n    const dotIndex = filename.indexOf('.');\n    if (dotIndex === -1 || dotIndex !== filename.lastIndexOf('.')) {\n        return 'No';\n    }\n    \n    // Split the filename into pre-dot and post-dot parts\n    const namePart = filename.substring(0, dotIndex);\n    const extPart = filename.substring(dotIndex + 1);\n    \n    // Check if the pre-dot part is not empty and starts with a letter\n    if (namePart.length === 0 || !/^[a-zA-Z]/.test(namePart)) {\n        return 'No';\n    }\n    \n    // Check if the post-dot part is one of the valid extensions\n    const validExtensions = ['txt', 'exe', 'dll'];\n    if (!validExtensions.includes(extPart)) {\n        return 'No';\n    }\n    \n    // Count the digits in the entire filename\n    const digitCount = (filename.match(/\\d/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n    \n    // If all checks pass, return 'Yes'\n    return 'Yes';\n}\n\n// Examples\nconsole.log(fileNameCheck(\"example.txt\")); // => 'Yes'\nconsole.log(fileNameCheck(\"1example.dll\")); // => 'No'\nconsole.log(fileNameCheck(\"example1.dll\")); // => 'Yes'\nconsole.log(fileNameCheck(\"exa.mple.exe\")); // => 'No'\nconsole.log(fileNameCheck(\"example1234.txt\")); // => 'No'\nconsole.log(fileNameCheck(\"example.txt.exe\")); // => 'No'"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n    let sum = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n\n// Examples to test the function\nconsole.log(sumSquares([1, 2, 3])); // Output: 6\nconsole.log(sumSquares([])); // Output: 0\nconsole.log(sumSquares([-1, -5, 2, -1, -5])); // Output: -126"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false; // 0 and 1 are not prime numbers\n    if (num <= 3) return true;  // 2 and 3 are prime numbers\n    if (num % 2 === 0 || num % 3 === 0) return false; // Exclude multiples of 2 and 3\n\n    // Check for prime by testing divisors up to the square root of num\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    // Split the sentence into words\n    const words = sentence.split(' ');\n\n    // Filter words whose lengths are prime numbers\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n\n    // Join the filtered words back into a string\n    return primeLengthWords.join(' ');\n}\n\n// Example Usage\nconsole.log(wordsInSentence(\"This is a test\")); // Output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "function simplify(x, n) {\n    // Helper function to parse the fraction string\n    function parseFraction(fraction) {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return { numerator, denominator };\n    }\n\n    // Parse both fractions\n    const xFraction = parseFraction(x);\n    const nFraction = parseFraction(n);\n\n    // Calculate the product of the fractions\n    const productNumerator = xFraction.numerator * nFraction.numerator;\n    const productDenominator = xFraction.denominator * nFraction.denominator;\n\n    // Check if the product is a whole number\n    return productNumerator % productDenominator === 0;\n}\n\n// Example usages:\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function orderByPoints(nums) {\n    // Helper function to calculate sum of digits of a number\n    function sumOfDigits(num) {\n        return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    // Use the array's sort function with a custom comparator\n    return nums.slice().sort((a, b) => {\n        const sumA = sumOfDigits(a);\n        const sumB = sumOfDigits(b);\n        \n        if (sumA === sumB) {\n            // If sums are equal, maintain original order\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n\n// Test cases\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // Output: []"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n    // Helper function to check if a digit is odd\n    function isOdd(digit) {\n        return digit % 2 !== 0;\n    }\n\n    // Helper function to get the first digit of a number\n    function getFirstDigit(num) {\n        num = Math.abs(num); // Consider the absolute value for digit extraction\n        while (num >= 10) {\n            num = Math.floor(num / 10);\n        }\n        return num;\n    }\n\n    // Helper function to get the last digit of a number\n    function getLastDigit(num) {\n        return Math.abs(num) % 10;\n    }\n\n    let count = 0;\n\n    for (let num of nums) {\n        if (num > 10) {\n            const firstDigit = getFirstDigit(num);\n            const lastDigit = getLastDigit(num);\n\n            if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // => 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // => 2"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "function getMaxTriples(n) {\n    // Generate the array `a` of length `n`\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    // Count the occurrences of each remainder (0, 1, 2)\n    let count = [0, 0, 0];\n    for (let i = 0; i < n; i++) {\n        count[a[i] % 3]++;\n    }\n\n    // Calculate the number of valid triples\n    let result = 0;\n\n    // Case 1: All three numbers have the same remainder 0\n    result += (count[0] * (count[0] - 1) * (count[0] - 2)) / 6;\n    // Case 2: All three numbers have the same remainder 1\n    result += (count[1] * (count[1] - 1) * (count[1] - 2)) / 6;\n    // Case 3: All three numbers have the same remainder 2\n    result += (count[2] * (count[2] - 1) * (count[2] - 2)) / 6;\n    // Case 4: One number from each remainder category (0, 1, 2)\n    result += count[0] * count[1] * count[2];\n\n    return result;\n}\n\n// Example usage:\nlet n = 5;\nconsole.log(getMaxTriples(n)); // Output: 1"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    // Define the order of planets\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Find the indices of the input planets\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // Check if both planet names are valid\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    // Get the range of indices between the two planets\n    const startIndex = Math.min(index1, index2) + 1;\n    const endIndex = Math.max(index1, index2);\n\n    // Return the planets between the two indices\n    return planets.slice(startIndex, endIndex);\n}\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function sortedListSum(lst) {\n    // Filter out strings with odd lengths\n    let filteredList = lst.filter(str => str.length % 2 === 0);\n    \n    // Sort the filtered list first by length, then alphabetically\n    filteredList.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n\n    return filteredList;\n}\n\n// Example usage\nconsole.assert(JSON.stringify(sortedListSum([\"aa\", \"a\", \"aaa\"])) === JSON.stringify([\"aa\"]));\nconsole.assert(JSON.stringify(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"])) === JSON.stringify([\"ab\", \"cd\"]));"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false; // 0 and 1 are not prime numbers\n    if (num <= 3) return true;  // 2 and 3 are prime numbers\n\n    // check if num is divisible by 2 or 3\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    // check for other divisors from 5 up to the square root of num\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Testing the function with the provided examples\nconsole.log(xOrY(7, 34, 12)); // Should return 34\nconsole.log(xOrY(15, 8, 5));  // Should return 5"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    // Initialize sum to 0\n    let sum = 0;\n\n    // Iterate through the list\n    for (let num of lst) {\n        // Check if the number is a positive integer and odd\n        if (Number.isInteger(num) && num >= 0 && num % 2 !== 0) {\n            // Add the square of the number to the sum\n            sum += num * num;\n        }\n    }\n\n    return sum;\n}\n\n// Test cases\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // Output: 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // Output: 0\nconsole.log(doubleTheDifference([9, -2]));     // Output: 81\nconsole.log(doubleTheDifference([0]));         // Output: 0\nconsole.log(doubleTheDifference([]));          // Output: 0"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n    // Initialize the result array\n    const result = [];\n    \n    // Iterate through the arrays\n    for (let i = 0; i < game.length; i++) {\n        // Calculate the absolute difference\n        const difference = Math.abs(game[i] - guess[i]);\n        // Append the difference to the result array\n        result.push(difference);\n    }\n    \n    // Return the result array\n    return result;\n}\n\n// Test cases\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])); // -> [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])); // -> [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let strongestExtension = '';\n    let maxStrength = -Infinity; // Use a very low initial value to ensure any strength will be higher\n\n    // Helper function to calculate the strength of an extension\n    function calculateStrength(extension) {\n        let cap = 0; // Number of uppercase letters\n        let sm = 0; // Number of lowercase letters\n\n        for (let char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                cap++;\n            } else if (char >= 'a' && char <= 'z') {\n                sm++;\n            }\n        }\n        \n        return cap - sm;\n    }\n\n    // Iterate through each extension and determine the strongest one\n    for (let extension of extensions) {\n        let strength = calculateStrength(extension);\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return `${classname}.${strongestExtension}`;\n}\n\n// Example usage:\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: 'Slices.SErviNGSliCes'\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: 'my_class.AA'"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Concatenate the second word with itself\n    const doubleB = b + b;\n    \n    // Check if the first word contains any substring of doubleB that has the same length as b\n    return doubleB.includes(a);\n}\n\n// Test cases\nconsole.log(cycpatternCheck(\"abcd\", \"abd\")); // => False\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); // => True\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); // => False\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); // => True\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); // => False\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); // => True"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "function evenOddCount(num) {\n    // Step 1: Convert the number to its absolute value to ignore any negative sign\n    num = Math.abs(num);\n\n    // Step 2: Convert the number to a string\n    const numStr = num.toString();\n\n    // Step 3: Initialize counters for even and odd digits\n    let evenCount = 0;\n    let oddCount = 0;\n\n    // Step 4: Iterate through each digit\n    for (let digit of numStr) {\n        // Step 5: Check if the digit is even or odd\n        if (parseInt(digit) % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    // Step 6: Return the counters as a tuple (array in JavaScript)\n    return [evenCount, oddCount];\n}\n\n// Test cases\nconsole.log(evenOddCount(-12));  // Output: [1, 1]\nconsole.log(evenOddCount(123));  // Output: [1, 2]\nconsole.log(evenOddCount(0));    // Output: [1, 0]\nconsole.log(evenOddCount(2468)); // Output: [4, 0]\nconsole.log(evenOddCount(1357)); // Output: [0, 4]"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    // Define the Roman numeral mappings\n    const romanNumerals = [\n        { value: 1000, symbol: 'M' },\n        { value: 900, symbol: 'CM' },\n        { value: 500, symbol: 'D' },\n        { value: 400, symbol: 'CD' },\n        { value: 100, symbol: 'C' },\n        { value: 90, symbol: 'XC' },\n        { value: 50, symbol: 'L' },\n        { value: 40, symbol: 'XL' },\n        { value: 10, symbol: 'X' },\n        { value: 9, symbol: 'IX' },\n        { value: 5, symbol: 'V' },\n        { value: 4, symbol: 'IV' },\n        { value: 1, symbol: 'I' }\n    ];\n\n    let result = '';\n\n    // Loop through the romanNumerals array\n    for (const { value, symbol } of romanNumerals) {\n        // Repeat the symbol while the number is greater than or equal to the value\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n\n    // Convert the result to lowercase and return\n    return result.toLowerCase();\n}\n\n// Test cases\nconsole.log(intToMiniRoman(19));   // 'xix'\nconsole.log(intToMiniRoman(152));  // 'clii'\nconsole.log(intToMiniRoman(426));  // 'cdxxvi'"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // Square the lengths of the sides\n    const a2 = a * a;\n    const b2 = b * b;\n    const c2 = c * c;\n\n    // Check all permutations to see if any form a right-angled triangle\n    return a2 + b2 === c2 || a2 + c2 === b2 || b2 + c2 === a2;\n}\n\n// Example usage:\nconsole.log(rightAngleTriangle(3, 4, 5)); // True\nconsole.log(rightAngleTriangle(1, 2, 3)); // False"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n    let maxWord = '';\n    let maxUniqueCount = 0;\n\n    for (const word of words) {\n        const uniqueChars = new Set(word);\n        const uniqueCount = uniqueChars.size;\n\n        if (uniqueCount > maxUniqueCount || (uniqueCount === maxUniqueCount && word < maxWord)) {\n            maxUniqueCount = uniqueCount;\n            maxWord = word;\n        }\n    }\n\n    return maxWord;\n}\n\n// Test cases\nconsole.log(findMax([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(findMax([\"name\", \"enam\", \"game\"])); // \"enam\"\nconsole.log(findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]));  // \"aaaaaaa\""}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "function eat(number, need, remaining) {\n    let totalEaten = number;\n    if (remaining >= need) {\n        // If there are enough carrots to satisfy the need\n        totalEaten += need;\n        remaining -= need;\n    } else {\n        // If there are not enough carrots to satisfy the need\n        totalEaten += remaining;\n        remaining = 0;\n    }\n    return [totalEaten, remaining];\n}\n\n// Test cases\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 9));  // [12, 1]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "function doAlgebra(operator, operand) {\n    // Ensure the operator list and operand list follow the given constraints\n    if (operator.length !== operand.length - 1) {\n        throw new Error(\"The length of operator list must be equal to the length of operand list minus one.\");\n    }\n\n    // Initialize the expression with the first operand\n    let expression = operand[0].toString();\n\n    // Build the expression string by iterating over the operators and operands\n    for (let i = 0; i < operator.length; i++) {\n        expression += \" \" + operator[i] + \" \" + operand[i + 1];\n    }\n\n    // Evaluate the constructed expression\n    const result = eval(expression);\n\n    return result;\n}\n\n// Example usage:\nconst operator = ['+', '*', '-'];\nconst operand = [2, 3, 4, 5];\nconst result = doAlgebra(operator, operand);\nconsole.log(result); // Output: 9"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n    // Check if the string contains any letters\n    let hasLetter = false;\n    let result = '';\n\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (/[a-zA-Z]/.test(char)) {\n            hasLetter = true;\n            // Check if the character is lower case\n            if (char === char.toLowerCase()) {\n                result += char.toUpperCase();\n            } else {\n                result += char.toLowerCase();\n            }\n        } else {\n            result += char;\n        }\n    }\n    \n    // If the string contains no letters, reverse the string\n    if (!hasLetter) {\n        return s.split('').reverse().join('');\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n    if (text === '') {\n        return 'none';\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\n// Example usage:\nconsole.log(stringToMd5('Hello world')); // Output: 3e25960a79dbc69b674cd4ec67a72c62\nconsole.log(stringToMd5('')); // Output: none"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Determine the lower and upper bounds of the range\n    const lower = Math.min(a, b);\n    const upper = Math.max(a, b);\n    \n    // Array to hold the even digits\n    const evenDigits = [];\n    \n    // Loop from lower to upper bounds inclusive\n    for (let i = lower; i <= upper; i++) {\n        // Check if the current digit is even\n        if (i % 2 === 0) {\n            evenDigits.push(i);\n        }\n    }\n    \n    return evenDigits;\n}\n\n// Examples\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []"}

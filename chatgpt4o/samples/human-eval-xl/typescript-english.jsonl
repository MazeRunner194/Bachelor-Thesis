{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n    let sum = 0;\n    let product = 1;\n\n    for (let num of numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a tuple\n    return [sum, product];\n};\n\n// Example usage:\nconsole.log(sum_product([]));         // Output: [0, 1]\nconsole.log(sum_product([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n    if (a.length !== b.length) {\n        throw new Error(\"Input strings must have the same length\");\n    }\n\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        const bitA = a[i];\n        const bitB = b[i];\n\n        // XOR operation\n        const xorBit = (bitA === bitB) ? '0' : '1';\n\n        result += xorBit;\n    }\n\n    return result;\n};\n\n// Example usage\nconsole.log(string_xor('010', '110')); // Output: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "function longest(strings: string[]): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (const str of strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    return longestString;\n}\n\n// Test cases\nconsole.log(longest([])); // null\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n};\n\n// Example usage:\nconsole.log(greatest_common_divisor(3, 5));  // Output: 1\nconsole.log(greatest_common_divisor(25, 15));  // Output: 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n    // Step 1: Split the input string into an array of number words\n    const numberWords = numbers.split(' ');\n\n    // Step 2: Create a mapping from words to their corresponding numeric values\n    const numberMap: { [key: string]: number } = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    // Step 3: Sort the array based on these numeric values\n    numberWords.sort((a, b) => numberMap[a] - numberMap[b]);\n\n    // Step 4: Join the sorted words into a single string\n    return numberWords.join(' ');\n};\n\n// Example usage:\nconsole.log(sort_numbers('three one five')); // Output: 'one three five'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error(\"The input array must contain at least two elements\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    if (min === max) {\n        throw new Error(\"The minimum and maximum values are the same, linear transformation is not possible\");\n    }\n\n    return numbers.map(num => (num - min) / (max - min));\n};\n\n// Example usage\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n    let flippedString = '';\n\n    for (const char of string0) {\n        if (char === char.toUpperCase()) {\n            flippedString += char.toLowerCase();\n        } else {\n            flippedString += char.toUpperCase();\n        }\n    }\n\n    return flippedString;\n};\n\n// Example usage:\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter((num) => num > 0);\n};\n\n// Test cases\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n    // A prime number is greater than 1 and is divisible only by 1 and itself\n    if (n <= 1) {\n        return false;\n    }\n\n    // Check divisibility from 2 up to the square root of n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(is_prime(6));    // False\nconsole.log(is_prime(101));  // True\nconsole.log(is_prime(11));   // True\nconsole.log(is_prime(13441)); // True\nconsole.log(is_prime(61));   // True\nconsole.log(is_prime(4));    // False\nconsole.log(is_prime(1));    // False"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n    // Create a Set from the array to remove duplicates\n    const uniqueSet = new Set(l);\n    // Convert the Set back to an array\n    const uniqueArray = Array.from(uniqueSet);\n    // Sort the array in ascending order\n    uniqueArray.sort((a, b) => a - b);\n    return uniqueArray;\n};\n\n// Example usage\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst fibonacci = function* () {\n    let a = 0, b = 1;\n    while (true) {\n        let nextValue = a + b;\n        yield nextValue;\n        a = b;\n        b = nextValue;\n    }\n};\n\nconst prime_fib = function (n: number): number {\n    const fibGen = fibonacci();\n    let count = 0;\n    while (true) {\n        const fib = fibGen.next().value;\n        if (isPrime(fib)) {\n            count++;\n            if (count === n) return fib;\n        }\n    }\n};\n\n// Test cases\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    // If the list has less than 3 elements, we cannot find a triplet\n    if (l.length < 3) return false;\n\n    // Sort the list to use the two-pointer technique\n    l.sort((a, b) => a - b);\n\n    // Iterate through the list, considering each element as the first element of the triplet\n    for (let i = 0; i < l.length - 2; i++) {\n        // If the current value is the same as the previous one, skip it to avoid duplicates\n        if (i > 0 && l[i] == l[i - 1]) continue;\n\n        // Initialize two pointers\n        let left = i + 1;\n        let right = l.length - 1;\n\n        // Use the two-pointer technique to find the other two elements\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    // If no triplet is found, return false\n    return false;\n};\n\n// Test cases\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    // Create a set to store the elements we have seen so far\n    const seen = new Set<number>();\n\n    // Iterate through each number in the list\n    for (const num of l) {\n        // Check if the negation of the current number is already in the set\n        if (seen.has(-num)) {\n            return true;\n        }\n        // Add the current number to the set\n        seen.add(num);\n    }\n\n    // If no such pair is found, return false\n    return false;\n};\n\n// Test cases\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // False\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    let a = 0; // fib4(0)\n    let b = 0; // fib4(1)\n    let c = 2; // fib4(2)\n    let d = 0; // fib4(3)\n    let result = 0;\n\n    for (let i = 4; i <= n; i++) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n};\n\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n    if (l.length === 0) {\n        throw new Error(\"The list is empty\");\n    }\n\n    // Step 1: Sort the list\n    l.sort((a, b) => a - b);\n\n    const len = l.length;\n    const mid = Math.floor(len / 2);\n\n    // Step 2: Determine the median\n    if (len % 2 === 0) {\n        // If even, return the average of the two middle numbers\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        // If odd, return the middle number\n        return l[mid];\n    }\n};\n\n// Test cases\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n    // Reverse the text and compare it to the original text\n    return text === text.split('').reverse().join('');\n};\n\n// Test cases\nconsole.log(is_palindrome(''));        // True\nconsole.log(is_palindrome('aba'));     // True\nconsole.log(is_palindrome('aaaaa'));   // True\nconsole.log(is_palindrome('zbcd'));    // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n    // Define a set of vowels for quick lookup\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    \n    // Use an array to collect characters that are not vowels\n    let result: string[] = [];\n    \n    // Iterate through each character in the input string\n    for (let char of text) {\n        // If the character is not a vowel, add it to the result array\n        if (!vowels.has(char)) {\n            result.push(char);\n        }\n    }\n    \n    // Join the array of characters back into a string\n    return result.join('');\n};\n\n// Test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number) : boolean  {\n    return l.every(num => num < t);\n};\n\n// Example usage\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // True\nconsole.log(below_threshold([1, 20, 4, 10], 5));  // False"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n}\n\n// Example usage:\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n    const getCharFrequency = (str: string): Record<string, number> => {\n        const freq: Record<string, number> = {};\n        for (const char of str) {\n            freq[char] = (freq[char] || 0) + 1;\n        }\n        return freq;\n    };\n\n    const freq0 = getCharFrequency(s0);\n    const freq1 = getCharFrequency(s1);\n\n    // Check if both frequency maps have the same keys and values\n    const keys0 = Object.keys(freq0);\n    const keys1 = Object.keys(freq1);\n\n    if (keys0.length !== keys1.length) {\n        return false;\n    }\n\n    for (const key of keys0) {\n        if (freq0[key] !== freq1[key]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input should be a positive integer.\");\n    }\n    if (n === 1 || n === 2) {\n        return 1;\n    }\n    let a = 1, b = 1;\n    for (let i = 3; i <= n; i++) {\n        const next = a + b;\n        a = b;\n        b = next;\n    }\n    return b;\n};\n\n// Test Cases\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>): Array<number> {\n    // Convert the arrays to sets to remove duplicates and allow for efficient intersection\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Find the intersection of the two sets\n    const commonElements = [...set1].filter(x => set2.has(x));\n\n    // Sort the result before returning\n    return commonElements.sort((a, b) => a - b);\n};\n\n// Example usage\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    let factor = 2;\n    while (factor * factor <= n) {\n        if (n % factor === 0) {\n            n = n / factor;\n        } else {\n            factor += 1;\n        }\n    }\n    return n;\n}\n\n// Test cases\nconsole.log(largest_prime_factor(13195)); // Expected output: 29\nconsole.log(largest_prime_factor(2048));  // Expected output: 2"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    if (n < 1) {\n        throw new Error(\"Input must be a positive integer.\");\n    }\n    return n * (n + 1) / 2;\n}\n\n// Test cases\nconsole.log(sum_to_n(30)); // 465\nconsole.log(sum_to_n(100)); // 5050\nconsole.log(sum_to_n(5)); // 15\nconsole.log(sum_to_n(10)); // 55\nconsole.log(sum_to_n(1)); // 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    // Initialize an empty array for the derivative coefficients\n    let derivativeCoefficients: Array<number> = [];\n\n    // Iterate over the coefficients starting from the first power term (index 1)\n    for (let i = 1; i < xs.length; i++) {\n        // Multiply the coefficient by its respective power index\n        derivativeCoefficients.push(xs[i] * i);\n    }\n\n    return derivativeCoefficients;\n};\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // Should print: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // Should print: [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n  // Base cases\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n\n  // Initialize an array to store computed values\n  const dp: number[] = [0, 0, 1];\n\n  // Compute the sequence up to the nth element\n  for (let i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n  }\n\n  return dp[n];\n};\n\n// Test cases\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    // Define the set of vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    // Initialize count to 0\n    let count = 0;\n    \n    // Traverse through the string\n    for (let i = 0; i < s.length; i++) {\n        // Check if the character is a vowel\n        if (vowels.has(s[i])) {\n            count++;\n        }\n    }\n    \n    // Handle 'y' or 'Y' at the end of the string\n    if (s.length > 0) {\n        const lastChar = s[s.length - 1];\n        if (lastChar === 'y' || lastChar === 'Y') {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Example usage\nconsole.log(vowels_count(\"abcde\"));  // Output: 2\nconsole.log(vowels_count(\"ACEDY\"));  // Output: 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n    // Step 1: Count the frequency of each integer in the list\n    const frequencyMap = new Map<number, number>();\n    \n    for (const num of lst) {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    }\n    \n    // Step 2: Initialize a variable to keep track of the greatest valid integer\n    let result = -1;\n    \n    // Step 3: Iterate through the frequency map to find the greatest integer\n    for (const [num, freq] of frequencyMap) {\n        if (freq >= num) {\n            result = Math.max(result, num);\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number) : number  {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n    \n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Return the area rounded to 2 decimal points\n    return Math.round(area * 100) / 100;\n};\n\n// Example usage:\nconsole.log(triangle_area(3, 4, 5)); // Should output 6.00\nconsole.log(triangle_area(1, 2, 10)); // Should output -1"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: number[], w: number): boolean {\n    // Check if the list is palindromic\n    const isPalindromic = q.join('') === q.slice().reverse().join('');\n    \n    // Calculate the sum of the elements\n    const sum = q.reduce((acc, num) => acc + num, 0);\n    \n    // Check if both conditions are satisfied\n    return isPalindromic && (sum <= w);\n};\n\n// Examples\nconsole.log(will_it_fly([1, 2], 5)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 1)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 9)); // \u279e True\nconsole.log(will_it_fly([3], 5)); // \u279e True"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function (a: number) : boolean {\n    if (a >= 100) {\n        return false;\n    }\n\n    // List of prime numbers less than 100\n    const primes: number[] = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, \n        53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    ];\n\n    // Check all combinations of three primes\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i + 1; j < primes.length; j++) {\n            for (let k = j + 1; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n// Test examples\nconsole.log(is_multiply_prime(30)); // True: 2 * 3 * 5\nconsole.log(is_multiply_prime(60)); // True: 2 * 3 * 10 (10 is not a prime number, so it's actually not True)\nconsole.log(is_multiply_prime(105)); // False: 105 is greater than 100\nconsole.log(is_multiply_prime(2310)); // False: 2310 is greater than 100"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    // Convert the decimal number to a binary string\n    const binaryString = decimal.toString(2); // The toString(2) method converts the number to base 2 (binary)\n    \n    // Format the binary string with 'db' at the beginning and end\n    const formattedBinaryString = `db${binaryString}db`;\n    \n    return formattedBinaryString;\n};\n\n// Examples\nconsole.log(decimal_to_binary(15));   // Output: \"db1111db\"\nconsole.log(decimal_to_binary(32));   // Output: \"db100000db\""}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n    // Step 1: Check if the length of the string is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Step 2: Iterate through the string and check every 3 consecutive letters\n    for (let i = 0; i <= s.length - 3; i++) {\n        const first = s[i];\n        const second = s[i + 1];\n        const third = s[i + 2];\n\n        // Step 3: If any set of 3 consecutive letters are not distinct, return false\n        if (first === second || first === third || second === third) {\n            return false;\n        }\n    }\n\n    // Step 4: If we finish checking all sets of 3 consecutive letters without finding any duplicates, return true\n    return true;\n};\n\n// Test cases\nconsole.log(is_happy(\"a\"));      // False\nconsole.log(is_happy(\"aa\"));     // False\nconsole.log(is_happy(\"abcd\"));   // True\nconsole.log(is_happy(\"aabb\"));   // False\nconsole.log(is_happy(\"adb\"));    // True\nconsole.log(is_happy(\"xyy\"));    // False"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    return grades.map(grade => {\n        if (grade === 4.0) return 'A+';\n        if (grade > 3.7) return 'A';\n        if (grade > 3.3) return 'A-';\n        if (grade > 3.0) return 'B+';\n        if (grade > 2.7) return 'B';\n        if (grade > 2.3) return 'B-';\n        if (grade > 2.0) return 'C+';\n        if (grade > 1.7) return 'C';\n        if (grade > 1.3) return 'C-';\n        if (grade > 1.0) return 'D+';\n        if (grade > 0.7) return 'D';\n        if (grade > 0.0) return 'D-';\n        return 'E';\n    });\n};\n\n// Example usage:\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const prime_length = function (string0: string): boolean {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true;  // 2 and 3 are prime numbers\n        if (num % 2 === 0 || num % 3 === 0) return false; // Eliminate multiples of 2 and 3\n\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Get the length of the string\n    const length = string0.length;\n\n    // Check if the length is prime\n    return isPrime(length);\n};\n\n// Examples\nconsole.log(prime_length('Hello'));    // True\nconsole.log(prime_length('abcdcba'));  // True\nconsole.log(prime_length('kittens'));  // True\nconsole.log(prime_length('orange'));   // False"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    // Step 1: Convert the number to a string and extract its digits\n    const digits = N.toString().split('').map(Number);\n    \n    // Step 2: Compute the sum of the digits\n    const sumOfDigits = digits.reduce((acc, digit) => acc + digit, 0);\n    \n    // Step 3: Convert the sum to a binary string\n    const binaryRepresentation = sumOfDigits.toString(2);\n    \n    return binaryRepresentation;\n};\n\n// Test cases\nconsole.log(solve(1000)); // Expected output: \"1\"\nconsole.log(solve(150));  // Expected output: \"110\"\nconsole.log(solve(147));  // Expected output: \"1100\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<[number, number]>  {\n    // Initialize an array to hold the coordinates\n    let coordinates: Array<[number, number]> = [];\n\n    // Iterate over each row\n    for (let r = 0; r < lst.length; r++) {\n        // Iterate over each column in the row\n        for (let c = 0; c < lst[r].length; c++) {\n            // If the value matches x, add the coordinate to the list\n            if (lst[r][c] === x) {\n                coordinates.push([r, c]);\n            }\n        }\n    }\n\n    // Sort coordinates first by row in ascending order\n    // and then by column in descending order for the same row\n    coordinates.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // If rows are the same, sort by columns in descending order\n        }\n        return a[0] - b[0]; // Otherwise, sort by rows in ascending order\n    });\n\n    return coordinates;\n}\n\n// Test cases\nconsole.log(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1)); // Expected output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(get_row([], 1)); // Expected output: []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // Expected output: [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n    if (lst.length < 2) {\n        return null; // Not enough elements\n    }\n\n    // Sort the list\n    const sortedList = lst.slice().sort((a, b) => a - b);\n    \n    // Initialize the first smallest element\n    let firstSmallest = sortedList[0];\n    \n    // Iterate through the sorted list to find the second smallest distinct element\n    for (let i = 1; i < sortedList.length; i++) {\n        if (sortedList[i] > firstSmallest) {\n            return sortedList[i];\n        }\n    }\n\n    // If we didn't find a second distinct element\n    return null;\n};\n\n// Test cases\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // Output: 2\nconsole.log(next_smallest([])); // Output: None\nconsole.log(next_smallest([1, 1])); // Output: None"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n    // Split the input string by '.', '?', or '!'\n    const sentences = S.split(/[.?!]/);\n\n    // Initialize the boredom count\n    let boredomCount = 0;\n\n    // Iterate through each sentence\n    for (let sentence of sentences) {\n        // Trim leading and trailing whitespace\n        sentence = sentence.trim();\n\n        // Check if the sentence starts with the word \"I\"\n        if (sentence.startsWith(\"I \")) {\n            boredomCount++;\n        }\n    }\n\n    // Return the total count of boredoms\n    return boredomCount;\n};\n\n// Test cases\nconsole.log(is_bored(\"Hello world\")); // Output: 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\nconsole.log(is_bored(\"I am happy! Are you happy? I think so.\")); // Output: 2"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\nfunction sumOfDigits(num: number): number {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}\n\nconst skjkasdkd = function (lst: Array<number>): number {\n    let largestPrime = -1;\n\n    // Find the largest prime number in the list\n    for (const num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    // If no prime number found, return 0\n    if (largestPrime === -1) return 0;\n\n    // Calculate the sum of its digits\n    return sumOfDigits(largestPrime);\n};\n\n// Examples\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));  // Output: 10\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));  // Output: 25\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));  // Output: 13\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));  // Output: 11\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]));  // Output: 3\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));  // Output: 7"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    // Check if the dictionary is empty\n    if (dict.size === 0) {\n        return false;\n    }\n\n    // Initialize variables to track case type\n    let isLowerCase: boolean | null = null;\n\n    // Iterate over the keys of the dictionary\n    for (let key of dict.keys()) {\n        // Check if the key is a string\n        if (typeof key !== 'string') {\n            return false;\n        }\n\n        // Determine the case of the first string key\n        if (isLowerCase === null) {\n            if (key === key.toLowerCase()) {\n                isLowerCase = true;\n            } else if (key === key.toUpperCase()) {\n                isLowerCase = false;\n            } else {\n                return false; // Mixed case in the first key itself is invalid\n            }\n        } else {\n            // Ensure all subsequent keys match the determined case\n            if ((isLowerCase && key !== key.toLowerCase()) ||\n                (!isLowerCase && key !== key.toUpperCase())) {\n                return false;\n            }\n        }\n    }\n\n    // If all checks pass, return true\n    return true;\n};\n\n// Examples to test the function\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"b\", \"banana\"]]))); // True\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [8, \"banana\"], [\"a\", \"apple\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]]))); // True"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function (value: string): number {\n    // Parse the string to a number\n    const num = parseFloat(value);\n    \n    // Check if the number is exactly halfway between two integers\n    if (Math.abs(num % 1) === 0.5) {\n        // Round away from zero\n        return num > 0 ? Math.ceil(num) : Math.floor(num);\n    } else {\n        // Use the standard rounding method\n        return Math.round(num);\n    }\n}\n\n// Examples\nconsole.log(closest_integer(\"10\"));    // 10\nconsole.log(closest_integer(\"15.3\"));  // 15\nconsole.log(closest_integer(\"14.5\"));  // 15\nconsole.log(closest_integer(\"-14.5\")); // -15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    const pile: number[] = [];\n    let currentStones = n;\n    \n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n        currentStones += 2;\n    }\n    \n    return pile;\n};\n\n// Example usage:\nconsole.log(make_a_pile(3));  // Output: [3, 5, 7]\nconsole.log(make_a_pile(4));  // Output: [4, 6, 8, 10]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n    // Use a regular expression to split the string by commas or spaces\n    return s.split(/[\\s,]+/).filter(word => word.length > 0);\n};\n\n// Example usage:\nconsole.log(words_string(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Determine the actual range\n    const lower = Math.min(x, y);\n    const upper = Math.max(x, y);\n\n    // Start from the upper bound and look for the largest even number\n    for (let i = upper; i >= lower; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found\n    return -1;\n};\n\n// Test cases\nconsole.log(choose_num(12, 15));  // Output: 14\nconsole.log(choose_num(13, 12));  // Output: -1\nconsole.log(choose_num(8, 10));   // Output: 10\nconsole.log(choose_num(7, 7));    // Output: -1\nconsole.log(choose_num(6, 6));    // Output: 6"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any {\n    if (n > m) {\n        return -1;\n    }\n\n    // Calculate the sum of integers from n to m\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    // Calculate the count of integers from n to m\n    const count = m - n + 1;\n\n    // Calculate the average and round it to the nearest integer\n    const avg = Math.round(sum / count);\n\n    // Convert the rounded average to a binary string\n    const binaryString = \"0b\" + avg.toString(2);\n\n    return binaryString;\n};\n\n// Examples\nconsole.log(rounded_avg(1, 5));  // \"0b11\"\nconsole.log(rounded_avg(7, 5));  // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    // Helper function to compute the factorial of a number\n    const factorial = (num: number): number => {\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    };\n\n    // Helper function to compute the sum of numbers from 1 to num\n    const sumTo = (num: number): number => {\n        return (num * (num + 1)) / 2;\n    };\n\n    // Create the result array\n    const result: Array<number> = [];\n\n    // Populate the array with the required values\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumTo(i));\n        }\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): [number, number] {\n    // Helper function to check if a number is a palindrome\n    const isPalindrome = (num: number): boolean => {\n        const str = num.toString();\n        const reversedStr = str.split('').reverse().join('');\n        return str === reversedStr;\n    };\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    // Iterate from 1 to n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\n// Example usage:\nconsole.log(even_odd_palindrome(3)); // Output: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Output: [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: number[]): boolean {\n    const n = arr.length;\n    if (n === 0) return true;\n\n    let breakPoint = -1;\n\n    // Find the break point where arr[i] > arr[i+1]\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            if (breakPoint !== -1) {\n                // More than one break point means it's not possible to sort by rotation\n                return false;\n            }\n            breakPoint = i;\n        }\n    }\n\n    // If no break point is found, the array is already sorted\n    if (breakPoint === -1) return true;\n\n    // Check if the array is sorted when rotated from the break point\n    for (let i = 1; i < n; i++) {\n        if (arr[(breakPoint + i) % n] < arr[(breakPoint + i - 1) % n]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Example usage:\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>) : string  {\n    // Helper function to check if a number is even\n    const isEven = (num: number): boolean => num % 2 === 0;\n    \n    // Count the number of odd numbers in lst1\n    let oddCount1 = lst1.filter(num => !isEven(num)).length;\n    \n    // Count the number of even numbers in lst2\n    let evenCount2 = lst2.filter(num => isEven(num)).length;\n    \n    // If the number of even numbers in lst2 is at least as many as the number of odd numbers in lst1, return \"YES\"\n    if (evenCount2 >= oddCount1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n};\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): [string, boolean] {\n    // Create a set of characters to delete for fast lookup\n    const deleteChars = new Set(c);\n    \n    // Filter out the characters in s that are present in deleteChars\n    const filteredString = s.split('').filter(char => !deleteChars.has(char)).join('');\n    \n    // Check if the filtered string is a palindrome\n    const isPalindrome = filteredString === filteredString.split('').reverse().join('');\n    \n    return [filteredString, isPalindrome];\n};\n\n// Example usage\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Output: ('bcd', False)\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // Output: ('acdef', False)\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Output: ('cdedc', True)"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number) : number  {\n    // Check for edge cases first\n    if (capacity <= 0) {\n        throw new Error(\"Bucket capacity must be greater than 0\");\n    }\n\n    // Step 1: Count the total units of water in the grid\n    let totalUnitsOfWater = 0;\n    for (let row of grid) {\n        for (let cell of row) {\n            if (cell === 1) {\n                totalUnitsOfWater += 1;\n            }\n        }\n    }\n\n    // Step 2: Calculate the number of bucket lowerings needed\n    // Use Math.ceil to account for any remainder\n    const bucketLowerings = Math.ceil(totalUnitsOfWater / capacity);\n\n    return bucketLowerings;\n};\n\n// Test cases\nconsole.log(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(max_fill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function(s: string, n: number): Array<string> {\n    // Define vowels for easy lookup\n    const vowels: Set<string> = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    \n    // Function to count consonants in a word\n    const countConsonants = (word: string): number => {\n        let consonantCount = 0;\n        for (let char of word) {\n            if (!vowels.has(char) && /[a-zA-Z]/.test(char)) {\n                consonantCount++;\n            }\n        }\n        return consonantCount;\n    };\n\n    // Split the string into words\n    const words: string[] = s.split(' ');\n    \n    // Filter words based on the consonant count\n    const result: string[] = words.filter(word => countConsonants(word) === n);\n    \n    return result;\n};\n\n// Examples\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Step 1: Sort the array in descending order\n    const sortedArr = arr.sort((a, b) => b - a);\n    \n    // Step 2: Take the first k elements\n    const maxKElements = sortedArr.slice(0, k);\n    \n    // Step 3: Sort these k elements in ascending order\n    return maxKElements.sort((a, b) => a - b);\n};\n\n// Example usage:\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2));  // Output: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n};\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(add_elements(arr, k)); // Output: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nconst intersection = function(interval1: Array<number>, interval2: Array<number>): string {\n    const start1 = interval1[0];\n    const end1 = interval1[1];\n    const start2 = interval2[0];\n    const end2 = interval2[1];\n\n    const startIntersection = Math.max(start1, start2);\n    const endIntersection = Math.min(end1, end2);\n\n    if (startIntersection > endIntersection) {\n        return \"NO\";\n    }\n\n    const length = endIntersection - startIntersection + 1;\n\n    return isPrime(length) ? \"YES\" : \"NO\";\n};\n\n// Test cases\nconsole.log(intersection([1, 2], [2, 3]));  // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4]));  // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5]));  // \"YES\""}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n    // Memoization cache\n    const memo: Record<number, number> = {};\n\n    // Helper function to compute tribonacci value for a given n\n    const computeTri = (n: number): number => {\n        if (memo[n] !== undefined) {\n            return memo[n];\n        }\n\n        let result: number;\n\n        if (n === 1) {\n            result = 3;\n        } else if (n % 2 === 0) {\n            result = 1 + n / 2;\n        } else {\n            result = computeTri(n - 1) + computeTri(n - 2) + computeTri(n + 1);\n        }\n\n        memo[n] = result;\n        return result;\n    };\n\n    // Generate the sequence for the first n + 1 numbers\n    const sequence: Array<number> = [];\n    for (let i = 1; i <= n + 1; i++) {\n        sequence.push(computeTri(i));\n    }\n\n    return sequence;\n};\n\n// Example usage:\nconsole.log(tri(3)); // Output: [3, 2, 8]"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n    // Convert the number to a string to iterate over each digit.\n    const numStr = n.toString();\n    let product = 1;\n    let hasOdd = false;\n\n    for (let char of numStr) {\n        let digit = parseInt(char, 10);\n\n        // Check if the digit is odd.\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n\n    // If no odd digit was found, return 0.\n    return hasOdd ? product : 0;\n};\n\n// Examples\nconsole.log(digits(1));    // Output: 1\nconsole.log(digits(4));    // Output: 0\nconsole.log(digits(235));  // Output: 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string) : boolean {\n    let stack: number[] = [];\n    \n    for (let i = 0; i < string0.length; i++) {\n        if (string0[i] === '[') {\n            stack.push(i);\n        } else if (string0[i] === ']') {\n            if (stack.length === 0) {\n                // Unmatched closing bracket, invalid string\n                return false;\n            }\n            let openIndex = stack.pop();\n            // Check if there's another pair within this pair\n            if (i - openIndex > 1) {\n                let substring = string0.substring(openIndex + 1, i);\n                if (substring.includes('[') && substring.includes(']')) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    // If the stack isn't empty, there are unmatched opening brackets\n    if (stack.length !== 0) {\n        return false;\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(is_nested('[[]]')); // \u279e True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(is_nested('[][]')); // \u279e False\nconsole.log(is_nested('[]')); // \u279e False\nconsole.log(is_nested('[[][]]')); // \u279e True\nconsole.log(is_nested('[[]][[')); // \u279e True"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n    return lst\n        .map(num => Math.ceil(num))   // Step 1: Round each element to the upper integer\n        .map(num => num * num)        // Step 2: Square each rounded number\n        .reduce((acc, num) => acc + num, 0); // Step 3: Sum the squared numbers\n}\n\n// Test cases\nconsole.log(sum_squares([1, 2, 3])); // Output: 14\nconsole.log(sum_squares([1, 4, 9])); // Output: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Output: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Output: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Output: 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function(txt: string): boolean {\n    // Trim any trailing whitespace to handle cases like \"apple pi e \"\n    txt = txt.trim();\n    \n    // Check if the string is empty after trimming\n    if (txt.length === 0) {\n        return false;\n    }\n    \n    // Get the last character of the string\n    const lastChar = txt.charAt(txt.length - 1);\n    \n    // Check if the last character is an alphabetical character\n    const isAlpha = /^[a-zA-Z]$/.test(lastChar);\n    \n    // Check if the last character is part of a word\n    const isPartOfWord = txt.includes(' ') && txt.split(' ').pop()?.length === 1;\n    \n    // Return true if the last character is alphabetical and not part of a word\n    return isAlpha && !isPartOfWord;\n};\n\n// Examples\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// Test cases\nconsole.log(can_arrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(can_arrange([1, 2, 3]));       // Output: -1"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): [number | null, number | null] {\n    let largestNegative: number | null = null;\n    let smallestPositive: number | null = null;\n\n    for (const num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n};\n\n// Examples\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largest_smallest_integers([])); // [null, null]\nconsole.log(largest_smallest_integers([0])); // [null, null]\nconsole.log(largest_smallest_integers([-10, -3, -20, 5, 8])); // [-3, 5]\nconsole.log(largest_smallest_integers([10, 20, -1, -2, -3])); // [-1, 10]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const factorial = (num: number): number => {\n    if (num <= 1) return 1;\n    return num * factorial(num - 1);\n};\n\nconst special_factorial = (n: number): number => {\n    if (n <= 0) throw new Error(\"Input must be a positive integer.\");\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n};\n\n// Example usage:\nconsole.log(special_factorial(4)); // Output: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const words_in_sentence = function (sentence: string): string {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true;  // 2 and 3 are prime numbers\n        if (num % 2 === 0 || num % 3 === 0) return false; // Exclude multiples of 2 and 3\n\n        // Check for factors from 5 onwards\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n\n    // Split the sentence into words\n    const words = sentence.split(' ');\n\n    // Filter words whose lengths are prime numbers\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n\n    // Join the filtered words back into a single string\n    return primeLengthWords.join(' ');\n};\n\n// Example usage:\nconsole.log(words_in_sentence(\"This is a test\")); // Output: \"is\"\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string) : boolean  {\n    // Helper function to parse a fraction string and return numerator and denominator as numbers\n    const parseFraction = (fraction: string) => {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return { numerator, denominator };\n    };\n\n    // Parse the fractions x and n\n    const { numerator: xNumerator, denominator: xDenominator } = parseFraction(x);\n    const { numerator: nNumerator, denominator: nDenominator } = parseFraction(n);\n\n    // Calculate the product of the two fractions\n    const productNumerator = xNumerator * nNumerator;\n    const productDenominator = xDenominator * nDenominator;\n\n    // Check if the product is a whole number\n    return productNumerator % productDenominator === 0;\n};\n\n// Example usages\nconsole.log(simplify(\"1/5\", \"5/1\"));  // True\nconsole.log(simplify(\"1/6\", \"2/1\"));  // False\nconsole.log(simplify(\"7/10\", \"10/2\"));  // False"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    // Helper function to calculate the sum of the digits of a number\n    const sumOfDigits = (num: number): number => {\n        return Math.abs(num)\n            .toString()\n            .split('')\n            .reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    };\n\n    // Sort the array based on the sum of digits\n    return nums\n        .map((num, index) => ({ num, index, digitSum: sumOfDigits(num) }))\n        .sort((a, b) => {\n            if (a.digitSum === b.digitSum) {\n                return a.index - b.index; // Maintain original order\n            }\n            return a.digitSum - b.digitSum; // Sort by digit sum\n        })\n        .map(item => item.num);\n};\n\n// Example usage:\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // Output: []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    const isOdd = (digit: number): boolean => [1, 3, 5, 7, 9].includes(digit);\n\n    const getFirstDigit = (num: number): number => {\n        num = Math.abs(num);  // Consider the absolute value of the number\n        while (num >= 10) {\n            num = Math.floor(num / 10);\n        }\n        return num;\n    };\n\n    const getLastDigit = (num: number): number => Math.abs(num % 10);\n\n    let count = 0;\n\n    for (const num of nums) {\n        if (num > 10) {\n            const firstDigit = getFirstDigit(num);\n            const lastDigit = getLastDigit(num);\n\n            if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};\n\n// Examples:\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function(n: number): number {\n    // Step 1: Generate the array `a`\n    const a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    // Step 2: Count residues modulo 3\n    const residueCounts: number[] = [0, 0, 0];\n    for (let i = 0; i < n; i++) {\n        residueCounts[a[i] % 3]++;\n    }\n\n    // Step 3: Count valid triples\n    const count0 = residueCounts[0];\n    const count1 = residueCounts[1];\n    const count2 = residueCounts[2];\n    \n    const comb = (x: number, y: number, z: number): number => {\n        return (x * (x - 1) * (x - 2)) / 6 +\n               (y * (y - 1) * (y - 2)) / 6 +\n               (z * (z - 1) * (z - 2)) / 6;\n    };\n    \n    const tripletCount = comb(count0, count1, count2) +\n                         (count0 * count1 * count2);\n\n    return tripletCount;\n};\n\n// Example usage:\nconsole.log(get_max_triples(5)); // Output: 1"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    // Validate the input planets\n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return [];\n    }\n\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    // Ensure index1 is less than index2 for simplicity\n    const [start, end] = index1 < index2 ? [index1, index2] : [index2, index1];\n\n    // Extract the planets between the indices\n    const betweenPlanets = planets.slice(start + 1, end);\n\n    return betweenPlanets;\n}\n\n// Test examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf(\"Pluto\", \"Neptune\")); // [] (invalid input)"}
{"task_id": "typescript/71", "language": "typescript", "completion": "/**\n * Helper function to check if a number is prime\n * @param n - The number to check\n * @returns boolean - True if n is prime, false otherwise\n */\nconst isPrime = (n: number): boolean => {\n    if (n <= 1) return false; // numbers less than 2 are not prime\n    if (n <= 3) return true; // 2 and 3 are prime numbers\n    if (n % 2 === 0 || n % 3 === 0) return false; // multiples of 2 and 3 are not prime\n\n    // Check for factors from 5 up to the square root of n\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\n/**\n * Function to return x if n is prime, or y otherwise\n * @param n - The number to be checked for primality\n * @param x - The value to return if n is prime\n * @param y - The value to return if n is not prime\n * @returns number - x if n is prime, y otherwise\n */\nconst x_or_y = (n: number, x: number, y: number): number => {\n    return isPrime(n) ? x : y;\n};\n\n// Examples:\nconsole.log(x_or_y(7, 34, 12)); // Output: 34\nconsole.log(x_or_y(15, 8, 5)); // Output: 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    return lst\n        .filter(num => num >= 0 && Number.isInteger(num)) // Step 1: Filter out negative numbers and non-integers\n        .filter(num => num % 2 !== 0)                    // Step 2: Filter out even numbers\n        .map(num => num * num)                           // Step 3: Square each odd number\n        .reduce((sum, num) => sum + num, 0);             // Step 4: Sum up the squared values\n};\n\n// Test cases\nconsole.log(double_the_difference([1, 3, 2, 0])); // Output: 10\nconsole.log(double_the_difference([-1, -2, 0]));  // Output: 0\nconsole.log(double_the_difference([9, -2]));      // Output: 81\nconsole.log(double_the_difference([0]));          // Output: 0\nconsole.log(double_the_difference([]));           // Output: 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n    let strongestExtension = '';\n    let maxStrength = -Infinity; // Initialize to a very low number to ensure any strength will be higher\n\n    for (const extension of extensions) {\n        // Calculate CAP and SM\n        let CAP = 0;\n        let SM = 0;\n\n        for (const char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                CAP++;\n            } else if (char >= 'a' && char <= 'z') {\n                SM++;\n            }\n        }\n\n        // Calculate the strength\n        const strength = CAP - SM;\n\n        // Check if this is the strongest found so far\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    // Return the class name with the strongest extension\n    return `${class_name}.${strongestExtension}`;\n};\n\n// Example usage:\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Outputs: 'Slices.SErviNGSliCes'\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // Outputs: 'my_class.AA'"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n    // Concatenate b with itself\n    const doubledB = b + b;\n    \n    // Check if any rotation of b is a substring of a\n    return doubledB.includes(a);\n};\n\n// Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\"));  // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number0: number): string {\n    // Define the Roman numeral symbols and their corresponding values\n    const romanNumerals: { [key: string]: number } = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    };\n\n    let result = '';\n    let num = number0;\n\n    // Loop through each symbol from the largest to the smallest\n    for (const key in romanNumerals) {\n        const value = romanNumerals[key];\n        \n        // Append the symbol to the result while subtracting its value from the number\n        while (num >= value) {\n            result += key;\n            num -= value;\n        }\n    }\n\n    // Return the result in lowercase\n    return result.toLowerCase();\n};\n\n// Examples\nconsole.log(int_to_mini_roman(19));  // Output: 'xix'\nconsole.log(int_to_mini_roman(152));  // Output: 'clii'\nconsole.log(int_to_mini_roman(426));  // Output: 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // Find the sides sorted in ascending order\n    const sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Assign the sorted sides to variables\n    const [side1, side2, hypotenuse] = sides;\n\n    // Check if the sum of squares of the smaller two sides equals to the square of the hypotenuse\n    return side1 * side1 + side2 * side2 === hypotenuse * hypotenuse;\n};\n\n// Example usage:\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n    // Helper function to check if a character is a letter\n    const isLetter = (char: string) => /[a-zA-Z]/.test(char);\n\n    // Check if the string contains any letters\n    const containsLetters = /[a-zA-Z]/.test(s);\n\n    if (containsLetters) {\n        // If the string contains letters, reverse the case of each letter\n        return s.split('').map(char => {\n            if (isLetter(char)) {\n                return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n            }\n            return char;\n        }).join('');\n    } else {\n        // If the string contains no letters, reverse the entire string\n        return s.split('').reverse().join('');\n    }\n}\n\n// Test cases\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\")); // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import { createHash } from 'crypto';\n\nconst string_to_md5 = function (text: string): string | null {\n  if (text === '') {\n    return null;\n  }\n\n  const hash = createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n// Example usage:\nconsole.log(string_to_md5('Hello world')); // '3e25960a79dbc69b674cd4ec67a72c62'\nconsole.log(string_to_md5('')); // null"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n    // Determine the range to iterate over\n    const min = Math.min(a, b);\n    const max = Math.max(a, b);\n\n    // Array to store even digits\n    const evenDigits: Array<number> = [];\n\n    // Iterate from min to max\n    for (let i = min; i <= max; i++) {\n        if (i >= 0 && i <= 9 && i % 2 === 0) {\n            evenDigits.push(i);\n        }\n    }\n\n    return evenDigits;\n}\n\n// Test cases\nconsole.log(generate_integers(2, 8));  // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2));  // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14));  // Output: []"}

{"task_id": "java/0", "language": "java", "completion": "import java.util.List;\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        \n        for (Object operation : operations) {\n            // Convert operation to Integer if possible\n            if (operation instanceof Integer) {\n                balance += (Integer) operation;\n            }\n            \n            // Check if balance falls below zero\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        List<Object> operations1 = Arrays.asList(1, 2, 3);\n        List<Object> operations2 = Arrays.asList(1, 2, -4, 5);\n        \n        System.out.println(belowZero(operations1)); // Expected output: False\n        System.out.println(belowZero(operations2)); // Expected output: True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        if (numbers == null || numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumProduct(Arrays.asList())); // Output: [0, 1]\n        System.out.println(sumProduct(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * \n     * Example:\n     * >>> stringXor(\"010\", \"110\")\n     * \"100\"\n     *\n     */\n    public static String stringXor(String a, String b) {\n        // Ensure both strings a and b are of the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Perform XOR operation character by character\n        for (int i = 0; i < a.length(); i++) {\n            // Convert characters to integers (0 or 1), perform XOR, and append result as a character\n            int bitA = Character.getNumericValue(a.charAt(i));\n            int bitB = Character.getNumericValue(b.charAt(i));\n            int xorResult = bitA ^ bitB;\n            result.append(xorResult);\n        }\n\n        return result.toString();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        // Example usage\n        String a = \"010\";\n        String b = \"110\";\n        System.out.println(stringXor(a, b));  // Output: \"100\"\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     *\n     * >>> longest([])\n     *\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return longestString;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(longest(Arrays.asList())); // null\n        System.out.println(longest(Arrays.asList(\"a\", \"b\", \"c\"))); // a\n        System.out.println(longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // ccc\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "class GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n        // Ensure a and b are non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Apply the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(greatestCommonDivisor(3, 5));  // Output: 1\n        System.out.println(greatestCommonDivisor(25, 15));  // Output: 5\n        System.out.println(greatestCommonDivisor(100, 200));  // Output: 100\n        System.out.println(greatestCommonDivisor(14, 28));  // Output: 14\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numerals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest.\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n        // Mapping from words to their corresponding numeric values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n        \n        // Mapping from numeric values to words\n        Map<Integer, String> numberToWord = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n            numberToWord.put(entry.getValue(), entry.getKey());\n        }\n        \n        // Split the input string into individual words\n        String[] words = numbers.split(\" \");\n        \n        // Convert words to their numeric values\n        List<Integer> numericValues = new ArrayList<>();\n        for (String word : words) {\n            numericValues.add(wordToNumber.get(word));\n        }\n        \n        // Sort the numeric values\n        Collections.sort(numericValues);\n        \n        // Convert the sorted numeric values back to words\n        List<String> sortedWords = new ArrayList<>();\n        for (int value : numericValues) {\n            sortedWords.add(numberToWord.get(value));\n        }\n        \n        // Join the sorted words into a single space-delimited string\n        return String.join(\" \", sortedWords);\n    }\n\n    public static void main(String[] args) {\n        String input = \"three one five\";\n        String sorted = sortNumbers(input);\n        System.out.println(sorted);  // Output: one three five\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "class RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        if (min == max) {\n            throw new IllegalArgumentException(\"The list must contain at least two distinct elements.\");\n        }\n\n        List<Double> rescaled = new ArrayList<>();\n        for (Double number : numbers) {\n            double rescaledValue = (number - min) / (max - min);\n            rescaled.add(rescaledValue);\n        }\n\n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "class FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        // Initialize a StringBuilder to build the new flipped case string\n        StringBuilder flippedString = new StringBuilder();\n\n        // Loop through each character in the input string\n        for (char c : string.toCharArray()) {\n            // Check if the character is lowercase, if so, convert it to uppercase\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } \n            // Check if the character is uppercase, if so, convert it to lowercase\n            else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } \n            // If the character is neither uppercase nor lowercase, append it as is\n            else {\n                flippedString.append(c);\n            }\n        }\n\n        // Return the resulting string\n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test the flipCase method with some example inputs\n        System.out.println(flipCase(\"Hello\")); // hELLO\n        System.out.println(flipCase(\"Java\")); // jAVA\n        System.out.println(flipCase(\"FlipCase\")); // fLIPcASE\n        System.out.println(flipCase(\"123ABCabc\")); // 123abcABC\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.*;\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positives = new ArrayList<>();\n        for (Object o : l) {\n            if (o instanceof Integer && (Integer) o > 0) {\n                positives.add(o);\n            }\n        }\n        return positives;\n    }\n\n    public static void main(String[] args) {\n        List<Object> input1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Object> input2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(getPositive(input1)); // [2, 5, 6]\n        System.out.println(getPositive(input2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "class IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n        // 1 and below are not prime numbers\n        if (n <= 1) {\n            return false;\n        }\n        \n        // 2 and 3 are prime numbers\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        \n        // Check for even numbers and multiples of 3\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        \n        // Check for factors from 5 to the square root of n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    // Test the function\n    public static void main(String[] args) {\n        System.out.println(isPrime(6));    // False\n        System.out.println(isPrime(101));  // True\n        System.out.println(isPrime(11));   // True\n        System.out.println(isPrime(13441));// True\n        System.out.println(isPrime(61));   // True\n        System.out.println(isPrime(4));    // False\n        System.out.println(isPrime(1));    // False\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        // Use a TreeSet to automatically handle uniqueness and sorting\n        Set<Integer> uniqueSet = new TreeSet<>(l);\n\n        // Convert the set back to a list\n        return new ArrayList<>(uniqueSet);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result = unique(input);\n        System.out.println(result);  // Output: [0, 2, 3, 5, 9, 123]\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "class PrimeFib {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n        List<Integer> primeFibNumbers = new ArrayList<>();\n        int a = 1, b = 1;\n        while (primeFibNumbers.size() < n) {\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n            if (isPrime(nextFib)) {\n                primeFibNumbers.add(nextFib);\n            }\n        }\n        return primeFibNumbers.get(n - 1);\n    }\n\n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(primeFib(1)); // 2\n        System.out.println(primeFib(2)); // 3\n        System.out.println(primeFib(3)); // 5\n        System.out.println(primeFib(4)); // 13\n        System.out.println(primeFib(5)); // 89\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Use two pointers to find the other two elements\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * It returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * \n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        // A set to store the unique elements we have seen so far\n        Set<Integer> seen = new HashSet<>();\n        \n        // Iterate over each element in the list\n        for (int num : l) {\n            // Check if the negative of the current element exists in the set\n            if (seen.contains(-num)) {\n                return true;\n            }\n            // Add the current element to the set\n            seen.add(num);\n        }\n        \n        // If no pair is found that sums to zero, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "class Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Initialize the first four values of the sequence\n        int[] fib = new int[4];\n        fib[0] = 0; // fib4(0)\n        fib[1] = 0; // fib4(1)\n        fib[2] = 2; // fib4(2)\n        fib[3] = 0; // fib4(3)\n\n        // Compute fib4 numbers from 4 to n\n        for (int i = 4; i <= n; i++) {\n            int nextFib = fib[0] + fib[1] + fib[2] + fib[3];\n\n            // Shift the values\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3] = nextFib;\n        }\n\n        return fib[3];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // Output: 4\n        System.out.println(fib4(6)); // Output: 8\n        System.out.println(fib4(7)); // Output: 14\n        System.out.println(fib4(10)); // Output: 68\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median(Arrays.asList(3, 1, 2, 4, 5))\n     * 3\n     * >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n\n        // Sort the list\n        Collections.sort(l);\n\n        int size = l.size();\n        if (size % 2 == 1) {\n            // If the list size is odd, return the middle element\n            return l.get(size / 2);\n        } else {\n            // If the list size is even, return the average of the two middle elements\n            int mid1 = l.get((size / 2) - 1);\n            int mid2 = l.get(size / 2);\n            // Return the average as a double\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3\n        System.out.println(median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     */\n    public static Boolean isPalindrome(String text) {\n        // Edge case: If the text is null, consider it not a palindrome\n        if (text == null) {\n            return false;\n        }\n        \n        // Get the length of the text\n        int length = text.length();\n        \n        // Compare characters from the start and the end moving towards the center\n        for (int i = 0; i < length / 2; i++) {\n            if (text.charAt(i) != text.charAt(length - 1 - i)) {\n                return false;\n            }\n        }\n        \n        // If all characters matched, it's a palindrome\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isPalindrome(\"\"));         // True\n        System.out.println(isPalindrome(\"aba\"));      // True\n        System.out.println(isPalindrome(\"aaaaa\"));    // True\n        System.out.println(isPalindrome(\"zbcd\"));     // False\n        System.out.println(isPalindrome(null));       // False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.util.*;\n\nclass RemoveVowels {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     */\n    public static String removeVowels(String text) {\n        if (text == null) {\n            return null; // Handle null input appropriately\n        }\n\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n\n        for (char ch : text.toCharArray()) {\n            if (!vowels.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Sample test cases\n        System.out.println(removeVowels(\"\")); // ''\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n        System.out.println(removeVowels(\"abcdef\")); // 'bcdf'\n        System.out.println(removeVowels(\"aaaaa\")); // ''\n        System.out.println(removeVowels(\"aaBAA\")); // 'B'\n        System.out.println(removeVowels(\"zbcd\")); // 'zbcd'\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.util.List;\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Example usage and test cases\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // True\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5));  // False\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "class Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        // Example usage:\n        System.out.println(add(2, 3)); // Output: 5\n        System.out.println(add(5, 7)); // Output: 12\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.util.HashSet;\nimport java.util.Set;\n\nclass SameChars {\n    /**\n     * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        // Convert first string to a set of characters\n        Set<Character> set0 = new HashSet<>();\n        for (char ch : s0.toCharArray()) {\n            set0.add(ch);\n        }\n\n        // Convert second string to a set of characters\n        Set<Character> set1 = new HashSet<>();\n        for (char ch : s1.toCharArray()) {\n            set1.add(ch);\n        }\n\n        // Compare the two sets\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "class Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int fib = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            fib = a + b;\n            a = b;\n            b = fib;\n        }\n        \n        return fib;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib(10)); // 55\n        System.out.println(fib(1));  // 1\n        System.out.println(fib(8));  // 21\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n     *\n     */\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Find the intersection of the two sets\n        set1.retainAll(set2);\n\n        // Convert the set back to a list\n        List<Integer> resultList = new ArrayList<>(set1);\n\n        // Sort the list\n        Collections.sort(resultList);\n\n        return resultList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n\n        System.out.println(common(list1, list2));  // Output: [1, 5, 653]\n\n        List<Integer> list3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> list4 = Arrays.asList(3, 2);\n\n        System.out.println(common(list3, list4));  // Output: [2, 3]\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "class LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n        int largestFactor = -1;\n\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, start with the smallest odd divisor\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and update largestFactor\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n\n        // If n is a prime number greater than 2, then n itself is the largest prime factor\n        if (n > 2) {\n            largestFactor = n;\n        }\n\n        return largestFactor;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(largestPrimeFactor(13195)); // Output: 29\n        System.out.println(largestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "class SumToN {\n    /**\n     * sumToN is a function that sums numbers from 1 to n.\n     * >>> sumToN(30)\n     * 465\n     * >>> sumToN(100)\n     * 5050\n     * >>> sumToN(5)\n     * 15\n     * >>> sumToN(10)\n     * 55\n     * >>> sumToN(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sumToN(30));  // 465\n        System.out.println(sumToN(100)); // 5050\n        System.out.println(sumToN(5));   // 15\n        System.out.println(sumToN(10));  // 55\n        System.out.println(sumToN(1));   // 1\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Start from the second element (index 1) since the derivative of the constant term is 0\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Example usages\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3)));       // Output: [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "class Fibfib {\n    public static int fibfib(int n) {\n        // Base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        // Array to store the sequence up to the nth element\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        // Fill the array using the recurrence relation\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "import java.util.*;\n\nclass VowelsCount {\n    public static int vowelsCount(String s) {\n        // Convert the string to lowercase to handle case insensitivity\n        s = s.toLowerCase();\n        \n        // Define a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Initialize a counter to keep track of the number of vowels\n        int count = 0;\n        \n        // Iterate over each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            // Check if the character is in the set of vowels\n            if (vowels.contains(c)) {\n                count++;\n            }\n            \n            // Additionally, check if the character is 'y' and it is the last character of the string\n            if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        \n        // Return the count of vowels\n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n        System.out.println(vowelsCount(\"hello\")); // Output: 2\n        System.out.println(vowelsCount(\"sky\"));   // Output: 1\n        System.out.println(vowelsCount(\"rhythm\")); // Output: 0\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n        // Create a HashMap to store the frequency of each integer\n        HashMap<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Initialize a variable to keep track of the greatest integer\n        int greatestInteger = -1;\n        \n        // Iterate over the entries in the HashMap\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int key = entry.getKey();\n            int frequency = entry.getValue();\n            \n            // Check if the frequency of the integer is greater than or equal to the integer itself\n            if (frequency >= key) {\n                // Update the greatest integer if the current integer is greater\n                greatestInteger = Math.max(greatestInteger, key);\n            }\n        }\n        \n        return greatestInteger;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        System.out.println(search(list1)); // Output: 2\n\n        List<Integer> list2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        System.out.println(search(list2)); // Output: 3\n\n        List<Integer> list3 = Arrays.asList(5, 5, 4, 4, 4);\n        System.out.println(search(list3)); // Output: -1\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "class TriangleArea {\n\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2.0;\n\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n            // Round the area to 2 decimal places\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // The sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5));  // Output: 6.0\n        System.out.println(triangleArea(1, 2, 10)); // Output: -1\n        System.out.println(triangleArea(7, 10, 5)); // Output: 16.25\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.List;\n\npublic class WillItFly {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * Example:\n     * will_it_fly([1, 2], 5) \u279e False\n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n     *\n     * will_it_fly([3, 2, 3], 1) \u279e False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * will_it_fly([3, 2, 3], 9) \u279e True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n     *\n     * will_it_fly([3], 5) \u279e True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        // Check if the sum of the elements is less than or equal to w\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(willItFly(Arrays.asList(1, 2), 5)); // \u279e False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 1)); // \u279e False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 9)); // \u279e True\n        System.out.println(willItFly(Arrays.asList(3), 5)); // \u279e True\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.*;\n\nclass IsMultiplyPrime {\n\n    public static Boolean isMultiplyPrime(int a) {\n        // List of prime numbers less than 100\n        List<Integer> primes = Arrays.asList(\n            2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\n            31, 37, 41, 43, 47, 53, 59, 61, 67,\n            71, 73, 79, 83, 89, 97\n        );\n\n        // Check all combinations of three distinct primes\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isMultiplyPrime(30)); // True\n        System.out.println(isMultiplyPrime(60)); // False\n        System.out.println(isMultiplyPrime(105)); // False\n        System.out.println(isMultiplyPrime(2310)); // False\n        System.out.println(isMultiplyPrime(2 * 3 * 7)); // True\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "class DecimalToBinary {\n    /**\n     * Converts a decimal number to a binary string with 'db' at the start and end.\n     * @param decimal The decimal number to be converted.\n     * @return A string representing the binary format of the number with 'db' at the start and end.\n     */\n    public static String decimalToBinary(int decimal) {\n        // Convert the decimal number to a binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Add the 'db' prefix and suffix\n        return \"db\" + binaryString + \"db\";\n    }\n\n    // Main method to test the functionality\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(decimalToBinary(15));  // Output: db1111db\n        System.out.println(decimalToBinary(32));  // Output: db100000db\n        System.out.println(decimalToBinary(0));   // Output: db0db\n        System.out.println(decimalToBinary(1));   // Output: db1db\n        System.out.println(decimalToBinary(255)); // Output: db11111111db\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "class IsHappy {\n    public static Boolean isHappy(String s) {\n        // A string must be at least 3 characters to be considered\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check each set of 3 consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // Check if the three characters are distinct\n            if (first == second || second == third || first == third) {\n                return false;\n            }\n        }\n\n        // If all checks passed, the string is happy\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isHappy(\"a\"));     // False\n        System.out.println(isHappy(\"aa\"));    // False\n        System.out.println(isHappy(\"abcd\"));  // True\n        System.out.println(isHappy(\"aabb\"));  // False\n        System.out.println(isHappy(\"adb\"));   // True\n        System.out.println(isHappy(\"xyy\"));   // False\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.*;\n\nclass NumericalLetterGrade {\n    /**\n     * This function takes a list of GPAs and returns a list of corresponding letter grades.\n     *\n     * @param grades List of GPA values.\n     * @return List of letter grades corresponding to the GPA values.\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> gpas = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        List<String> letterGrades = numericalLetterGrade(gpas);\n        System.out.println(letterGrades); // Output: [A+, B, C-, C, A-]\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "class PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise.\n     * Examples:\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private static Boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        if (number <= 3) {\n            return true;\n        }\n        if (number % 2 == 0 || number % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(primeLength(\"Hello\"));     // True\n        System.out.println(primeLength(\"abcdcba\"));  // True\n        System.out.println(primeLength(\"kittens\"));  // True\n        System.out.println(primeLength(\"orange\"));   // False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "class Solve {\n    public static String solve(int n) {\n        // Step 1: Calculate the sum of digits of the number\n        int sumOfDigits = 0;\n        while (n > 0) {\n            sumOfDigits += n % 10;\n            n /= 10;\n        }\n\n        // Step 2: Convert the sum to binary format\n        String binaryRepresentation = Integer.toBinaryString(sumOfDigits);\n\n        // Step 3: Return the binary string\n        return binaryRepresentation;\n    }\n\n    public static void main(String[] args) {\n        // Testing the solve method with some examples\n        System.out.println(solve(1000)); // Output should be \"1\"\n        System.out.println(solve(150));  // Output should be \"110\"\n        System.out.println(solve(147));  // Output should be \"1100\"\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n    public static List<Object> getRow(List<List<Integer>> lst, int x) {\n        List<Object> result = new ArrayList<>();\n        \n        // Iterate through each row and column to find the coordinates of `x`\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new int[]{i, j});\n                }\n            }\n        }\n        \n        // Sort the coordinates initially by rows in ascending order\n        // and by columns in descending order within each row\n        Collections.sort(result, new Comparator<Object>() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                int[] coord1 = (int[]) o1;\n                int[] coord2 = (int[]) o2;\n                if (coord1[0] != coord2[0]) {\n                    return Integer.compare(coord1[0], coord2[0]);\n                } else {\n                    return Integer.compare(coord2[1], coord1[1]);\n                }\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> data1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(getRow(data1, 1)); // Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> data2 = Collections.emptyList();\n        System.out.println(getRow(data2, 1)); // Output: []\n\n        List<List<Integer>> data3 = Arrays.asList(\n            Collections.emptyList(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(getRow(data3, 3)); // Output: [[2, 2]]\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    public static Integer nextSmallest(List<Object> lst) {\n        // Convert List<Object> to List<Integer>\n        List<Integer> intList = new ArrayList<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                intList.add((Integer) obj);\n            }\n        }\n\n        // Check for edge cases\n        if (intList.size() < 2) {\n            return null;\n        }\n\n        // Sort the list\n        Collections.sort(intList);\n\n        // Find the second smallest element\n        int smallest = intList.get(0);\n        for (int i = 1; i < intList.size(); i++) {\n            if (intList.get(i) > smallest) {\n                return intList.get(i);\n            }\n        }\n\n        // If no second smallest element is found\n        return null;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Output: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Output: 2\n        System.out.println(nextSmallest(Collections.emptyList())); // Output: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // Output: null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "class IsBored {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n        // Check if the input string is null or empty\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        // Split the string into sentences based on delimiters\n        String[] sentences = s.split(\"[.?!]\");\n        \n        // Initialize the boredom count\n        int boredomCount = 0;\n\n        // Iterate over each sentence\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespace from the sentence\n            sentence = sentence.trim();\n\n            // Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        // Return the total count of boredoms\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isBored(\"Hello world\")); // Output: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        System.out.println(isBored(\"I am bored. Are you? I think so!\")); // Output: 2\n        System.out.println(isBored(\"\")); // Output: 0\n        System.out.println(isBored(null)); // Output: 0\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.*;\n\nclass Skjkasdkd {\n\n    // Helper function to check if a number is prime\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Helper function to sum the digits of a number\n    private static int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        // Initialize a variable to keep track of the largest prime\n        int largestPrime = -1;\n\n        // Iterate through the list to find the largest prime\n        for (int num : lst) {\n            if (isPrime(num)) {\n                if (num > largestPrime) {\n                    largestPrime = num;\n                }\n            }\n        }\n\n        // If no prime number was found, return 0 (assuming no primes means no sum)\n        if (largestPrime == -1) {\n            return 0;\n        }\n\n        // Return the sum of the digits of the largest prime found\n        return sumOfDigits(largestPrime);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n\n        System.out.println(skjkasdkd(lst1)); // Output should be 10\n        System.out.println(skjkasdkd(lst2)); // Output should be 25\n        System.out.println(skjkasdkd(lst3)); // Output should be 13\n        System.out.println(skjkasdkd(lst4)); // Output should be 11\n        System.out.println(skjkasdkd(lst5)); // Output should be 3\n        System.out.println(skjkasdkd(lst6)); // Output should be 7\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.Map;\n\nclass CheckDictCase {\n    public static Boolean checkDictCase(Map<Object, Object> dict) {\n        // Check if the dictionary is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            // Check if the key is in lower case\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            // Check if the key is in upper case\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        // Return true if all keys are either lower case or upper case, otherwise false\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Map<Object, Object> dict1 = Map.of(\"a\", \"apple\", \"b\", \"banana\");\n        Map<Object, Object> dict2 = Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\");\n        Map<Object, Object> dict3 = Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\");\n        Map<Object, Object> dict4 = Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\");\n        Map<Object, Object> dict5 = Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\");\n\n        System.out.println(checkDictCase(dict1)); // True\n        System.out.println(checkDictCase(dict2)); // False\n        System.out.println(checkDictCase(dict3)); // False\n        System.out.println(checkDictCase(dict4)); // False\n        System.out.println(checkDictCase(dict5)); // True\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "class ClosestInteger {\n    /**\n     * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * @param value the string representing the number\n     * @return the closest integer\n     */\n    public static int closestInteger(String value) {\n        // Convert the string to a double\n        double number = Double.parseDouble(value);\n\n        // Round the number using Math.round\n        // Math.round returns the closest long. For equidistant cases, it rounds away from zero.\n        int roundedNumber = (int) Math.round(number);\n\n        return roundedNumber;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));   // 10\n        System.out.println(closestInteger(\"15.3\")); // 15\n        System.out.println(closestInteger(\"14.5\")); // 15\n        System.out.println(closestInteger(\"-14.5\"));// -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.*;\n\nclass MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        // Create a list to hold the number of stones at each level\n        List<Integer> pile = new ArrayList<>();\n        \n        // Start with the first level having n stones\n        int stones = n;\n        \n        // Add the number of stones for each level in the pile\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            // Increment by 2 to get the next odd or even number\n            stones += 2;\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n        System.out.println(makeAPile(4)); // Output: [4, 6, 8, 10]\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.*;\n\nclass WordsString {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return a list of the words.\n     * \n     * For example:\n     * wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<String> wordsString(String s) {\n        // Split the string using regular expression to handle both commas and spaces\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        \n        // Convert the array to a list\n        List<String> wordsList = new ArrayList<>(Arrays.asList(wordsArray));\n        \n        // Remove any empty strings that might have been created by multiple spaces or commas\n        wordsList.removeIf(String::isEmpty);\n\n        return wordsList;\n    }\n\n    // For testing purpose\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\")); // Output: [Hi, my, name, is, John]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // Output: [One, two, three, four, five, six]\n        System.out.println(wordsString(\"Hello,  world  , this  is a test\")); // Output: [Hello, world, this, is, a, test]\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "class ChooseNum {\n    public static int chooseNum(int x, int y) {\n        // If x is greater than y, return -1\n        if (x > y) {\n            return -1;\n        }\n        \n        // Iterate from y down to x\n        for (int i = y; i >= x; i--) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        // If no even number is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(chooseNum(12, 15)); // Should print 14\n        System.out.println(chooseNum(13, 12)); // Should print -1\n        System.out.println(chooseNum(8, 10));  // Should print 10\n        System.out.println(chooseNum(7, 7));   // Should print -1\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "class RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        double average = (double) sum / count;\n        int roundedAvg = (int) Math.round(average);\n        \n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5));  // Output: \"0b11\"\n        System.out.println(roundedAvg(7, 5));  // Output: -1\n        System.out.println(roundedAvg(10, 20));  // Output: \"0b1111\"\n        System.out.println(roundedAvg(20, 33));  // Output: \"0b11010\"\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumTo(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int x) {\n        int result = 1;\n        for (int i = 1; i <= x; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static int sumTo(int x) {\n        int sum = 0;\n        for (int i = 1; i <= x; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(f(5)); // Output: [1, 2, 6, 24, 15]\n        System.out.println(f(6)); // Output: [1, 2, 6, 24, 15, 720]\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\npublic class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private static boolean isPalindrome(int number) {\n        int original = number;\n        int reversed = 0;\n\n        while (number > 0) {\n            int digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number /= 10;\n        }\n\n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        // Example 1\n        int n1 = 3;\n        System.out.println(\"Input: \" + n1);\n        List<Integer> result1 = evenOddPalindrome(n1);\n        System.out.println(\"Output: \" + result1);\n\n        // Example 2\n        int n2 = 12;\n        System.out.println(\"Input: \" + n2);\n        List<Integer> result2 = evenOddPalindrome(n2);\n        System.out.println(\"Output: \" + result2);\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "class MoveOneBall {\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        // Convert List<Object> to List<Integer> for easier manipulation\n        List<Integer> intArr = new ArrayList<>();\n        for (Object obj : arr) {\n            intArr.add((Integer) obj);\n        }\n\n        // Check if the array is already sorted\n        boolean alreadySorted = true;\n        for (int i = 1; i < n; i++) {\n            if (intArr.get(i) < intArr.get(i - 1)) {\n                alreadySorted = false;\n                break;\n            }\n        }\n        if (alreadySorted) {\n            return true;\n        }\n\n        // Create a doubled array to simulate all rotations\n        List<Integer> doubledArray = new ArrayList<>(intArr);\n        doubledArray.addAll(intArr);\n\n        // Check each possible rotation\n        for (int start = 1; start < n; start++) {\n            boolean isSorted = true;\n            for (int i = start; i < start + n - 1; i++) {\n                if (doubledArray.get(i) > doubledArray.get(i + 1)) {\n                    isSorted = false;\n                    break;\n                }\n            }\n            if (isSorted) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // True\n        System.out.println(moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // False\n        System.out.println(moveOneBall(Arrays.asList(1, 2, 3, 4, 5))); // True\n        System.out.println(moveOneBall(Arrays.asList(5, 1, 2, 3, 4))); // True\n        System.out.println(moveOneBall(Arrays.asList())); // True\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountLst1 = 0;\n        int evenCountLst2 = 0;\n        \n        // Count the odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountLst1++;\n            }\n        }\n        \n        // Count the even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountLst2++;\n            }\n        }\n        \n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1\n        if (evenCountLst2 >= oddCountLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(exchange(lst1, lst2));  // Output: YES\n        \n        lst1 = Arrays.asList(1, 2, 3, 4);\n        lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(exchange(lst1, lst2));  // Output: NO\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * \n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n        // Step 1: Remove characters from s that are present in c\n        StringBuilder filteredString = new StringBuilder();\n        Set<Character> removeSet = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            removeSet.add(ch);\n        }\n        \n        for (char ch : s.toCharArray()) {\n            if (!removeSet.contains(ch)) {\n                filteredString.append(ch);\n            }\n        }\n        \n        // Step 2: Check if the resultant string is a palindrome\n        String resultString = filteredString.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        // Step 3: Return the result\n        List<Object> result = new ArrayList<>();\n        result.add(resultString);\n        result.add(isPalindrome);\n        \n        return result;\n    }\n\n    // Helper method to check if a string is a palindrome\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    // Main method for testing purposes\n    public static void main(String[] args) {\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // Expected output: ['bcd', false]\n        System.out.println(reverseDelete(\"abcdef\", \"b\")); // Expected output: ['acdef', false]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // Expected output: ['cdedc', true]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int totalWaterUnits = 0;\n\n        // Iterate through the grid to count the total number of water units\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    totalWaterUnits++;\n                }\n            }\n        }\n\n        // Calculate the number of operations required\n        int operations = totalWaterUnits / capacity;\n        if (totalWaterUnits % capacity != 0) {\n            operations++;  // If there is a remainder, we need one more operation\n        }\n\n        return operations;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int bucketCapacity1 = 1;\n        System.out.println(maxFill(grid1, bucketCapacity1));  // Output: 6\n\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int bucketCapacity2 = 2;\n        System.out.println(maxFill(grid2, bucketCapacity2));  // Output: 5\n\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int bucketCapacity3 = 5;\n        System.out.println(maxFill(grid3, bucketCapacity3));  // Output: 0\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\nclass SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n\n        // Split the input string into words\n        String[] words = s.split(\"\\\\s+\");\n\n        // Define a set of vowels for easy lookup\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Iterate over each word\n        for (String word : words) {\n            int consonantCount = 0;\n\n            // Count consonants in the word\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && !vowels.contains(c)) {\n                    consonantCount++;\n                }\n            }\n\n            // Check if the word has exactly n consonants\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(selectWords(\"Mary had a little lamb\", 4));  // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3));  // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2));      // []\n        System.out.println(selectWords(\"Hello world\", 4));             // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3));               // [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\n\nclass Maximum {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n     *\n     * @param arr List of integers\n     * @param k Number of maximum elements to return\n     * @return Sorted list of k maximum elements\n     */\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        // Edge case: if k is 0, return an empty list\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n\n        // Priority queue to keep track of the top k elements\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k);\n\n        // Iterate through the array\n        for (int num : arr) {\n            // Add the current number to the priority queue\n            pq.offer(num);\n\n            // If the size of the priority queue exceeds k, remove the smallest element\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        // Convert the priority queue to a list\n        List<Integer> result = new ArrayList<>(pq);\n\n        // Sort the result list\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(maximum(arr2, k2)); // Output: [4, 4]\n\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(maximum(arr3, k3)); // Output: [2]\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.util.List;\n\nclass AddElements {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * Example:\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n     *\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int current = arr.get(i);\n            if (current >= -99 && current <= 99) {\n                sum += current;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        int result = addElements(arr, k);\n        System.out.println(\"Output: \" + result);  // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "public class Intersection {\n    \n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true; // 2 is the only even prime number\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Helper method to calculate the length of the intersection\n    private static int getIntersectionLength(int start1, int end1, int start2, int end2) {\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start <= end) {\n            return end - start + 1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionLength = getIntersectionLength(start1, end1, start2, end2);\n        \n        if (intersectionLength == 0) {\n            return \"NO\";\n        }\n        \n        return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = Arrays.asList(1, 2);\n        List<Integer> interval2 = Arrays.asList(2, 3);\n        System.out.println(intersection(interval1, interval2)); // should print \"NO\"\n        \n        interval1 = Arrays.asList(-1, 1);\n        interval2 = Arrays.asList(0, 4);\n        System.out.println(intersection(interval1, interval2)); // should print \"NO\"\n        \n        interval1 = Arrays.asList(-3, -1);\n        interval2 = Arrays.asList(-5, 5);\n        System.out.println(intersection(interval1, interval2)); // should print \"YES\"\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    private static Map<Integer, Integer> memo = new HashMap<>();\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            result.add(computeTri(i));\n        }\n        return result;\n    }\n\n    private static int computeTri(int n) {\n        if (memo.containsKey(n)) {\n            return memo.get(n);\n        }\n\n        int value;\n        if (n == 1) {\n            value = 3;\n        } else if (n % 2 == 0) {\n            value = 1 + n / 2;\n        } else {\n            value = computeTri(n - 1) + computeTri(n - 2) + computeTri(n + 1);\n        }\n\n        memo.put(n, value);\n        return value;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(tri(3));  // Output: [1, 3, 2, 8]\n        System.out.println(tri(4));  // Output: [1, 3, 2, 8, 3]\n        System.out.println(tri(5));  // Output: [1, 3, 2, 8, 3, 14]\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n    public static int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digits(1));   // Output: 1\n        System.out.println(digits(4));   // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.util.Stack;\n\nclass IsNested {\n    public static Boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nestedFound = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                    if (stack.isEmpty()) {\n                        nestedFound = true;\n                    }\n                }\n            }\n        }\n\n        return nestedFound;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // \u279e True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // \u279e False\n        System.out.println(isNested(\"[][]\")); // \u279e False\n        System.out.println(isNested(\"[]\")); // \u279e False\n        System.out.println(isNested(\"[[][]]\")); // \u279e True\n        System.out.println(isNested(\"[[]][[\")); // \u279e True\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "class SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            int ceilingVal = (int) Math.ceil(num.doubleValue());\n            sum += ceilingVal * ceilingVal;\n        }\n        return sum;\n    }\n\n    // Main method for testing purposes\n    public static void main(String[] args) {\n        List<Number> lst1 = Arrays.asList(1, 2, 3);\n        List<Number> lst2 = Arrays.asList(1, 4, 9);\n        List<Number> lst3 = Arrays.asList(1, 3, 5, 7);\n        List<Number> lst4 = Arrays.asList(1.4, 4.2, 0);\n        List<Number> lst5 = Arrays.asList(-2.4, 1, 1);\n        \n        System.out.println(sumSquares(lst1)); // Output: 14\n        System.out.println(sumSquares(lst2)); // Output: 98\n        System.out.println(sumSquares(lst3)); // Output: 84\n        System.out.println(sumSquares(lst4)); // Output: 29\n        System.out.println(sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "class CheckIfLastCharIsALetter {\n\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        // Trim trailing spaces\n        txt = txt.trim();\n        \n        // Ensure the string is not empty\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is a letter\n        if (Character.isLetter(lastChar)) {\n            // Check if it's the first character or preceded by a space\n            if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // \u279e False\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Integer> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> test1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        System.out.println(canArrange(test1)); // should return 3\n        System.out.println(canArrange(test2)); // should return -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.*;\n\nclass LargestSmallestIntegers {\n    /**\n     * Create a function that returns a list (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as null.\n     *\n     * Examples:\n     * largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == Arrays.asList(null, 1);\n     * largestSmallestIntegers(Arrays.asList()) == Arrays.asList(null, null);\n     * largestSmallestIntegers(Arrays.asList(0)) == Arrays.asList(null, null);\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Integer> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative == null || num > largestNegative) {\n                    largestNegative = num;\n                }\n            } else if (num > 0) {\n                if (smallestPositive == null || num < smallestPositive) {\n                    smallestPositive = num;\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // Output: [null, 1]\n        System.out.println(largestSmallestIntegers(Arrays.asList())); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(-3, -2, -1, 0, 1, 2, 3))); // Output: [-1, 1]\n        System.out.println(largestSmallestIntegers(Arrays.asList(-5, -9, -3, -4, 6, 2, 8))); // Output: [-3, 2]\n        System.out.println(largestSmallestIntegers(Arrays.asList(-1, -1, -1, 1, 1, 1))); // Output: [-1, 1]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "class SpecialFactorial {\n    /**\n     * Helper function to calculate the factorial of a given number.\n     */\n    private static long factorial(int num) {\n        long result = 1;\n        for (int i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     */\n    public static long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4));  // Output: 288\n        System.out.println(specialFactorial(5));  // Output: 34560\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n\n    // Helper function to determine if a number is prime\n    public static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String wordsInSentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // List to collect words with prime lengths\n        List<String> result = new ArrayList<>();\n        \n        // Iterate through each word and check its length\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        \n        // Join the collected words into a new sentence\n        return String.join(\" \", result);\n    }\n\n    public static void main(String[] args) {\n        // Example 1\n        String sentence1 = \"This is a test\";\n        System.out.println(wordsInSentence(sentence1)); // Output: \"is\"\n        \n        // Example 2\n        String sentence2 = \"lets go for swimming\";\n        System.out.println(wordsInSentence(sentence2)); // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "class Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Parse the numerators and denominators as integers\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Perform the multiplication\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number\n        return resultNumerator % resultDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(simplify(\"1/5\", \"5/1\")); // True\n        System.out.println(simplify(\"1/6\", \"2/1\")); // False\n        System.out.println(simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\n\nclass OrderByPoints {\n    \n    // Helper function to calculate the sum of digits of an integer\n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num); // Consider absolute value for digit sum\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    // Function to sort the list based on the sum of digits\n    public static List<Object> orderByPoints(List<Object> nums) {\n        if (nums == null || nums.isEmpty()) {\n            return nums;\n        }\n\n        // Create a list of pairs (sum of digits, original index, value)\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int value = (int) nums.get(i);\n            int sum = sumOfDigits(value);\n            pairs.add(new Pair(sum, i, value));\n        }\n\n        // Sort the pairs based on sum of digits and then by original index\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                if (p1.sum == p2.sum) {\n                    return Integer.compare(p1.index, p2.index);\n                } else {\n                    return Integer.compare(p1.sum, p2.sum);\n                }\n            }\n        });\n\n        // Extract the sorted values\n        List<Object> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.value);\n        }\n\n        return sortedNums;\n    }\n\n    // Helper class to store the sum of digits, original index, and value\n    private static class Pair {\n        int sum;\n        int index;\n        int value;\n\n        Pair(int sum, int index, int value) {\n            this.sum = sum;\n            this.index = index;\n            this.value = value;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(orderByPoints(nums)); // Output: [-1, -11, 1, -12, 11]\n\n        List<Object> emptyList = Collections.emptyList();\n        System.out.println(orderByPoints(emptyList)); // Output: []\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "class Specialfilter {\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n\n        for (Object numObj : nums) {\n            if (numObj instanceof Integer) {\n                int num = (Integer) numObj;\n\n                // Check if the number is greater than 10\n                if (num > 10) {\n                    // Convert the number to a positive value for digit extraction\n                    int absNum = Math.abs(num);\n\n                    // Extract the last digit\n                    int lastDigit = absNum % 10;\n\n                    // Extract the first digit by repeatedly dividing by 10\n                    int firstDigit = absNum;\n                    while (firstDigit >= 10) {\n                        firstDigit /= 10;\n                    }\n\n                    // Check if both first and last digits are odd\n                    if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    // Helper method to check if a digit is odd\n    private static boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n\n    public static void main(String[] args) {\n        List<Object> test1 = Arrays.asList(15, -73, 14, -15);\n        List<Object> test2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n\n        System.out.println(specialfilter(test1)); // Output: 1\n        System.out.println(specialfilter(test2)); // Output: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.util.*;\n\npublic class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        // Step 1: Create the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        // Step 2: Count occurrences of elements mod 3\n        int[] count = new int[3];\n        for (int i = 0; i < n; i++) {\n            count[a[i] % 3]++;\n        }\n\n        // Step 3: Calculate the number of valid triples\n        int result = 0;\n\n        // Case 1: All three elements are from the same group (0, 0, 0) or (1, 1, 1) or (2, 2, 2)\n        for (int i = 0; i < 3; i++) {\n            if (count[i] >= 3) {\n                result += (count[i] * (count[i] - 1) * (count[i] - 2)) / 6;\n            }\n        }\n\n        // Case 2: One element from each group (0, 1, 2)\n        result += count[0] * count[1] * count[2];\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test case\n        int n = 5;\n        System.out.println(getMaxTriples(n));  // Output: 1\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    public static List<String> bf(String planet1, String planet2) {\n        // Array of planets in order of distance from the Sun\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        \n        // Convert the array to a list for easier index lookups\n        List<String> planetList = Arrays.asList(planets);\n        \n        // Find the indices of the given planets\n        int index1 = planetList.indexOf(planet1);\n        int index2 = planetList.indexOf(planet2);\n        \n        // If either planet name is incorrect, return an empty list\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        \n        // Ensure index1 is less than index2 for easier processing\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Create a list to store the result\n        List<String> result = new ArrayList<>();\n        \n        // Add planets between index1 and index2\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets[i]);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(bf(\"Pluto\", \"Mars\")); // []\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "class XOrY {\n\n    /**\n     * A helper function to check if a number is prime.\n     * @param n the number to check.\n     * @return true if n is prime, false otherwise.\n     */\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        \n        // This is checked so that we can skip middle five numbers in the loop\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        \n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        \n        return true;\n    }\n\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n     * @param n the number to check.\n     * @param x the value to return if n is prime.\n     * @param y the value to return if n is not prime.\n     * @return x if n is prime, y otherwise.\n     */\n    public static int xOrY(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(xOrY(7, 34, 12));  // Should print 34\n        System.out.println(xOrY(15, 8, 5));   // Should print 5\n        System.out.println(xOrY(2, 10, 20));  // Should print 10\n        System.out.println(xOrY(1, 100, 200));// Should print 200\n        System.out.println(xOrY(17, 50, 25)); // Should print 50\n        System.out.println(xOrY(18, 30, 40)); // Should print 40\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.*;\n\npublic class DoubleTheDifference {\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     *\n     * @param lst List of numbers (can include integers, doubles, etc.)\n     * @return Sum of squares of odd integers in the list\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> test1 = Arrays.asList(1, 3, 2, 0);\n        List<Object> test2 = Arrays.asList(-1, -2, 0);\n        List<Object> test3 = Arrays.asList(9, -2);\n        List<Object> test4 = Arrays.asList(0);\n        List<Object> test5 = new ArrayList<>(); // empty list\n\n        System.out.println(doubleTheDifference(test1)); // Output: 10\n        System.out.println(doubleTheDifference(test2)); // Output: 0\n        System.out.println(doubleTheDifference(test3)); // Output: 81\n        System.out.println(doubleTheDifference(test4)); // Output: 0\n        System.out.println(doubleTheDifference(test5)); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "public class StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        // Initialize variables to keep track of the strongest extension\n        String strongestExtension = null;\n        int maxStrength = Integer.MIN_VALUE;\n\n        // Iterate over each extension to calculate its strength\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            // Count uppercase and lowercase letters\n            for (char ch : extension.toCharArray()) {\n                if (Character.isUpperCase(ch)) {\n                    capCount++;\n                } else if (Character.isLowerCase(ch)) {\n                    smCount++;\n                }\n            }\n\n            // Calculate the strength of the current extension\n            int strength = capCount - smCount;\n\n            // Update the strongest extension if the current one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Return the result in the required format\n        return className + \".\" + strongestExtension;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        List<String> extensions1 = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions1)); // Output: Slices.SErviNGSliCes\n\n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(strongestExtension(\"my_class\", extensions2)); // Output: my_class.AA\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "class CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n        // Concatenate the first string with itself\n        String concatenated = a + a;\n        \n        // Check if the second string is a substring of the concatenated string\n        return concatenated.contains(b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\"));    // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\"));   // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\"));// False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\"));    // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\"));   // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\"));// True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "import java.util.TreeMap;\n\nclass IntToMiniRoman {\n    private static final TreeMap<Integer, String> romanNumerals = new TreeMap<>();\n\n    static {\n        romanNumerals.put(1000, \"M\");\n        romanNumerals.put(900, \"CM\");\n        romanNumerals.put(500, \"D\");\n        romanNumerals.put(400, \"CD\");\n        romanNumerals.put(100, \"C\");\n        romanNumerals.put(90, \"XC\");\n        romanNumerals.put(50, \"L\");\n        romanNumerals.put(40, \"XL\");\n        romanNumerals.put(10, \"X\");\n        romanNumerals.put(9, \"IX\");\n        romanNumerals.put(5, \"V\");\n        romanNumerals.put(4, \"IV\");\n        romanNumerals.put(1, \"I\");\n    }\n\n    public static String intToMiniRoman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be in the range 1 to 1000.\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n\n        for (Map.Entry<Integer, String> entry : romanNumerals.descendingMap().entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(intToMiniRoman(19));   // Output: xix\n        System.out.println(intToMiniRoman(152));  // Output: clii\n        System.out.println(intToMiniRoman(426));  // Output: cdxxvi\n        System.out.println(intToMiniRoman(1000)); // Output: m\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "class RightAngleTriangle {\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // Determine the largest side\n        int max = Math.max(a, Math.max(b, c));\n        int sumOfSquaresOfOtherSides = 0;\n        \n        // Calculate sum of squares of the other two sides\n        if (max == a) {\n            sumOfSquaresOfOtherSides = (b * b) + (c * c);\n        } else if (max == b) {\n            sumOfSquaresOfOtherSides = (a * a) + (c * c);\n        } else {\n            sumOfSquaresOfOtherSides = (a * a) + (b * b);\n        }\n        \n        // Check if the square of the largest side equals the sum of squares of the other two sides\n        return (max * max) == sumOfSquaresOfOtherSides;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n        System.out.println(rightAngleTriangle(5, 12, 13)); // True\n        System.out.println(rightAngleTriangle(7, 24, 25)); // True\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "class Solve {\n    public static String solve(String s) {\n        boolean containsLetter = false;\n        \n        // Check if the string contains any letters\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                break;\n            }\n        }\n        \n        // If the string contains no letters, reverse the string\n        if (!containsLetter) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        \n        // If the string contains letters, change the case of each letter\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test the function with the given examples\n        System.out.println(solve(\"1234\"));    // Output: \"4321\"\n        System.out.println(solve(\"ab\"));      // Output: \"AB\"\n        System.out.println(solve(\"#a@C\"));    // Output: \"#A@c\"\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n     * \n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n        \n        try {\n            // Create MD5 MessageDigest instance\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            // Update the digest using the input text's bytes\n            md.update(text.getBytes());\n            // Complete the hash computation and get the byte array\n            byte[] digest = md.digest();\n            \n            // Convert the byte array to a hexadecimal string\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : digest) {\n                hexString.append(String.format(\"%02x\", b));\n            }\n            \n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            // This should never happen because MD5 is a known algorithm\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Expected: 3e25960a79dbc69b674cd4ec67a72c62\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     *\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        \n        // Determine the lower and upper bounds\n        int lower = Math.min(a, b);\n        int upper = Math.max(a, b);\n\n        // Iterate through the range [lower, upper]\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                evenNumbers.add(i);\n            }\n        }\n\n        return evenNumbers;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // []\n        System.out.println(generateIntegers(1, 10)); // [2, 4, 6, 8, 10]\n        System.out.println(generateIntegers(11, 13)); // [12]\n    }\n}"}

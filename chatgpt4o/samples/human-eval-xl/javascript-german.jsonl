{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;\n\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return True;\n        }\n    }\n\n    return False;\n}\n\n// Testf\u00e4lle\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    // Berechnung der Summe aller Elemente in der Liste\n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    \n    // Berechnung des Produkts aller Elemente in der Liste\n    const product = numbers.reduce((acc, num) => acc * num, 1);\n    \n    // R\u00fcckgabe eines Tupels (in JavaScript als Array)\n    return [sum, product];\n}\n\n// Testf\u00e4lle\nconsole.log(sumProduct([])); // Erwartet: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Erwartet: [10, 24]\nconsole.log(sumProduct([5, 6, 7])); // Erwartet: [18, 210]\nconsole.log(sumProduct([0, 1, 2])); // Erwartet: [3, 0]\nconsole.log(sumProduct([-1, -2, -3, -4])); // Erwartet: [-10, 24]"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    // Stellen Sie sicher, dass die Eingaben die gleiche L\u00e4nge haben\n    if (a.length !== b.length) {\n        throw new Error('Die Eingaben m\u00fcssen die gleiche L\u00e4nge haben');\n    }\n\n    let result = '';\n\n    // Iterieren Sie durch die Zeichenketten und f\u00fchren Sie die XOR-Operation durch\n    for (let i = 0; i < a.length; i++) {\n        let bitA = a[i];\n        let bitB = b[i];\n\n        // XOR-Operation: 1 ^ 1 = 0, 0 ^ 0 = 0, 1 ^ 0 = 1, 0 ^ 1 = 1\n        let xorResult = (bitA === bitB) ? '0' : '1';\n\n        // F\u00fcgen Sie das Ergebnis zur Result-Zeichenkette hinzu\n        result += xorResult;\n    }\n\n    return result;\n}\n\n// Testen der Funktion\nconsole.log(stringXor('010', '110')); // Ausgabe: '100'"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    // Check if the input list is empty\n    if (strings.length === 0) {\n        return null;\n    }\n\n    // Initialize the longest string with the first string in the list\n    let longestString = strings[0];\n\n    // Iterate through the list starting from the second element\n    for (let i = 1; i < strings.length; i++) {\n        // Check if the current string is longer than the longest string found so far\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    // Return the longest string found\n    return longestString;\n}\n\n// Test cases\nconsole.log(longest([])); // null\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // Sicherstellen, dass die Zahlen positiv sind\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n}\n\n// Beispielaufrufe\nconsole.log(greatestCommonDivisor(3, 5));  // Ausgabe: 1\nconsole.log(greatestCommonDivisor(25, 15)); // Ausgabe: 5"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    const numberWords = ['null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht', 'neun'];\n    const numberMap = {\n        'null': 0,\n        'eins': 1,\n        'zwei': 2,\n        'drei': 3,\n        'vier': 4,\n        'f\u00fcnf': 5,\n        'sechs': 6,\n        'sieben': 7,\n        'acht': 8,\n        'neun': 9\n    };\n\n    // Split the input string into an array of words\n    let wordsArray = numbers.split(' ');\n\n    // Convert words to their corresponding numeric values\n    let numericArray = wordsArray.map(word => numberMap[word]);\n\n    // Sort the numeric values\n    numericArray.sort((a, b) => a - b);\n\n    // Convert sorted numeric values back to words\n    let sortedWordsArray = numericArray.map(num => numberWords[num]);\n\n    // Join the sorted words back into a single string\n    return sortedWordsArray.join(' ');\n}\n\n// Example usage\nconsole.log(sortNumbers('drei eins f\u00fcnf')); // Output: 'eins drei f\u00fcnf'"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"Die Liste muss mindestens zwei Elemente enthalten.\");\n    }\n    \n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    \n    return numbers.map(num => (num - min) / (max - min));\n}\n\n// Beispielaufruf\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // Ausgabe: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n    let result = ''; // Initialisiere einen leeren String f\u00fcr das Ergebnis\n\n    // Iteriere \u00fcber jeden Charakter des Eingabestrings\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\n        // \u00dcberpr\u00fcfe, ob der aktuelle Charakter ein Kleinbuchstabe ist\n        if (char >= 'a' && char <= 'z') {\n            // Wandelt Kleinbuchstabe in Gro\u00dfbuchstabe um\n            result += char.toUpperCase();\n        } else if (char >= 'A' && char <= 'Z') {\n            // Wandelt Gro\u00dfbuchstabe in Kleinbuchstabe um\n            result += char.toLowerCase();\n        } else {\n            // F\u00fcge den Charakter hinzu, wenn es weder Klein- noch Gro\u00dfbuchstabe ist\n            result += char;\n        }\n    }\n\n    return result; // Gib das Ergebnis zur\u00fcck\n}\n\n// Beispielaufruf der Funktion\nconsole.log(flipCase('Hello')); // Erwartete Ausgabe: 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(function(num) {\n        return num > 0;\n    });\n}\n\n// Beispiele:\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n    // Eine Primzahl muss gr\u00f6\u00dfer als 1 sein\n    if (n <= 1) {\n        return false;\n    }\n    \n    // Pr\u00fcfen, ob n durch irgendeine Zahl von 2 bis zur Quadratwurzel von n teilbar ist\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    \n    // Wenn keine Teiler gefunden wurden, ist n eine Primzahl\n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(isPrime(6));     // false\nconsole.log(isPrime(101));   // true\nconsole.log(isPrime(11));    // true\nconsole.log(isPrime(13441)); // true\nconsole.log(isPrime(61));    // true\nconsole.log(isPrime(4));     // false\nconsole.log(isPrime(1));     // false"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n    // Erstellen Sie ein Set aus der Liste, um Duplikate zu entfernen\n    let uniqueSet = new Set(l);\n    \n    // Wandeln Sie das Set zur\u00fcck in ein Array und sortieren Sie es\n    let uniqueArray = [...uniqueSet].sort((a, b) => a - b);\n    \n    return uniqueArray;\n}\n\n// Beispielanwendung\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction* fibonacci() {\n    let a = 0, b = 1;\n    while (true) {\n        [a, b] = [b, a + b];\n        yield a;\n    }\n}\n\nfunction primeFib(n) {\n    const fibGen = fibonacci();\n    let count = 0;\n    let fibNum;\n    \n    while (count < n) {\n        fibNum = fibGen.next().value;\n        if (isPrime(fibNum)) {\n            count++;\n        }\n    }\n    \n    return fibNum;\n}\n\n// Test cases\nconsole.log(primeFib(1)); // 2\nconsole.log(primeFib(2)); // 3\nconsole.log(primeFib(3)); // 5\nconsole.log(primeFib(4)); // 13\nconsole.log(primeFib(5)); // 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    // Wenn die Liste weniger als 3 Elemente hat, k\u00f6nnen wir keine Triple finden\n    if (l.length < 3) {\n        return false;\n    }\n    \n    // Sortiere die Liste\n    l.sort((a, b) => a - b);\n    \n    // Iteriere \u00fcber jedes Element der Liste\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n        \n        // Suche nach zwei Elementen, die mit l[i] zu null addieren\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    // Wenn keine Triple gefunden wurde, gib false zur\u00fcck\n    return false;\n}\n\n// Testf\u00e4lle\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // False\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // True\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // False\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triplesSumToZero([1])); // False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    // Ein Set zur Speicherung der bereits gesehenen Elemente\n    const seen = new Set();\n\n    // Durchlaufen der Liste\n    for (let num of l) {\n        // Pr\u00fcfen, ob das negative Gegenst\u00fcck des aktuellen Elements bereits im Set ist\n        if (seen.has(-num)) {\n            return true;  // Wenn ja, haben wir ein Paar gefunden, das sich zu Null addiert\n        }\n        // Aktuelles Element zum Set hinzuf\u00fcgen\n        seen.add(num);\n    }\n\n    // Wenn keine Paare gefunden wurden\n    return false;\n}\n\n// Tests\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Initiale Werte f\u00fcr fib4(0), fib4(1), fib4(2), fib4(3)\n    let a = 0, b = 0, c = 2, d = 0;\n\n    for (let i = 4; i <= n; i++) {\n        let next = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = next;\n    }\n\n    return d;\n}\n\n// Testf\u00e4lle\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    // Zuerst die Liste sortieren\n    l.sort((a, b) => a - b);\n    \n    // Die L\u00e4nge der Liste\n    const n = l.length;\n    \n    // Pr\u00fcfen, ob die Anzahl der Elemente gerade oder ungerade ist\n    if (n % 2 === 1) {\n        // Wenn ungerade, das mittlere Element zur\u00fcckgeben\n        return l[Math.floor(n / 2)];\n    } else {\n        // Wenn gerade, den Durchschnitt der beiden mittleren Elemente zur\u00fcckgeben\n        const mid1 = l[(n / 2) - 1];\n        const mid2 = l[n / 2];\n        return (mid1 + mid2) / 2;\n    }\n}\n\n// Testf\u00e4lle\nconsole.log(median([3, 1, 2, 4, 5])); // 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // 15.0"}
{"task_id": "javascript/16", "language": "javascript", "completion": "/**\n * \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfunction isPalindrome(text) {\n    // Ein leerer String oder ein String mit einem Zeichen ist immer ein Palindrom\n    if (text.length <= 1) {\n        return true;\n    }\n    \n    // Zwei Zeiger: einer, der am Anfang des Strings beginnt, und einer, der am Ende beginnt\n    let left = 0;\n    let right = text.length - 1;\n    \n    // Solange die Zeiger sich nicht treffen\n    while (left < right) {\n        // Vergleiche die Zeichen an den Positionen der Zeiger\n        if (text[left] !== text[right]) {\n            return false; // Wenn sie nicht \u00fcbereinstimmen, ist der String kein Palindrom\n        }\n        left++; // Bewege den linken Zeiger nach rechts\n        right--; // Bewege den rechten Zeiger nach links\n    }\n    \n    // Wenn alle Zeichen \u00fcbereinstimmen, ist der String ein Palindrom\n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(isPalindrome(''));       // True\nconsole.log(isPalindrome('aba'));    // True\nconsole.log(isPalindrome('aaaaa'));  // True\nconsole.log(isPalindrome('zbcd'));   // False"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n    // Regular expression to match all vowels (both lowercase and uppercase)\n    const vowels = /[aeiouAEIOU]/g;\n    \n    // Replace all vowels with an empty string\n    return text.replace(vowels, '');\n}\n\n// Beispielaufrufe der Funktion\nconsole.log(removeVowels('')); // ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // 'bcdf'\nconsole.log(removeVowels('aaaaa')); // ''\nconsole.log(removeVowels('aaBAA')); // 'B'\nconsole.log(removeVowels('zbcd')); // 'zbcd'"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    // Iteriere durch jede Zahl in der Liste l\n    for (let i = 0; i < l.length; i++) {\n        // \u00dcberpr\u00fcfen, ob die aktuelle Zahl gr\u00f6\u00dfer oder gleich dem Schwellenwert t ist\n        if (l[i] >= t) {\n            // Wenn ja, gib False zur\u00fcck\n            return False;\n        }\n    }\n    // Wenn keine Zahl gr\u00f6\u00dfer oder gleich dem Schwellenwert t gefunden wurde, gib True zur\u00fcck\n    return True;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n    return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    // Erstellen von Sets aus den Zeichenketten\n    const set0 = new Set(s0);\n    const set1 = new Set(s1);\n\n    // Vergleich der Gr\u00f6\u00dfe der Sets\n    if (set0.size !== set1.size) {\n        return false;\n    }\n\n    // \u00dcberpr\u00fcfen, ob jedes Zeichen in set0 auch in set1 vorhanden ist\n    for (let char of set0) {\n        if (!set1.has(char)) {\n            return false;\n        }\n    }\n\n    // Wenn alle \u00dcberpr\u00fcfungen bestanden sind, enthalten die W\u00f6rter dieselben Zeichen\n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 0) return 0;\n    if (n === 1) return 1;\n    \n    let a = 0, b = 1, temp;\n    \n    for (let i = 2; i <= n; i++) {\n        temp = a + b;\n        a = b;\n        b = temp;\n    }\n    \n    return b;\n}\n\n// Testf\u00e4lle\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    // Erzeuge Sets aus den beiden Listen, um die eindeutigen Elemente zu erhalten\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Finde die Schnittmenge der beiden Sets\n    const intersection = [...set1].filter(item => set2.has(item));\n\n    // Sortiere die Schnittmenge\n    intersection.sort((a, b) => a - b);\n\n    // Gib die sortierte Liste zur\u00fcck\n    return intersection;\n}\n\n// Beispiele\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    let largestFactor = 1;\n    // Test for smallest prime factor, which is 2\n    while (n % 2 === 0) {\n        largestFactor = 2;\n        n = n / 2;\n    }\n    // Test for odd factors from 3 onwards\n    let factor = 3;\n    while (n !== 1) {\n        while (n % factor === 0) {\n            largestFactor = factor;\n            n = n / factor;\n        }\n        factor += 2; // Only test odd numbers\n    }\n    return largestFactor;\n}\n\n// Beispielaufrufe\nconsole.log(largestPrimeFactor(13195)); // 29\nconsole.log(largestPrimeFactor(2048));  // 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n    if (n <= 0) {\n        return 0;\n    }\n    return n * (n + 1) / 2;\n}\n\n// Testf\u00e4lle\nconsole.log(sumToN(30)); // 465\nconsole.log(sumToN(100)); // 5050\nconsole.log(sumToN(5)); // 15\nconsole.log(sumToN(10)); // 55\nconsole.log(sumToN(1)); // 1"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    if (xs.length <= 1) {\n        return [];\n    }\n\n    let result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n\n// Testf\u00e4lle\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // [2, 6]"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n    if (n === 0 || n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    }\n\n    let a = 0, b = 0, c = 1;\n    for (let i = 3; i <= n; i++) {\n        let next = a + b + c;\n        a = b;\n        b = c;\n        c = next;\n    }\n    return c;\n}\n\n// Beispielaufrufe:\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    // Den String in Kleinbuchstaben umwandeln\n    s = s.toLowerCase();\n    \n    // Variable zum Z\u00e4hlen der Vokale\n    let count = 0;\n    \n    // Schleife \u00fcber jeden Buchstaben im String\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        // \u00dcberpr\u00fcfen, ob der Buchstabe ein Vokal ist\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            count++;\n        }\n        // \u00dcberpr\u00fcfen, ob 'y' am Ende des Strings steht\n        else if (char === 'y' && i === s.length - 1) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Beispiele\nconsole.log(vowelsCount(\"abcde\")); // Ausgabe: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Ausgabe: 3"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    // Erstellen Sie ein Objekt, um die H\u00e4ufigkeit jedes Elements zu z\u00e4hlen.\n    const frequency = {};\n    \n    // Z\u00e4hlen Sie die H\u00e4ufigkeit jedes Elements.\n    for (let num of lst) {\n        if (frequency[num]) {\n            frequency[num]++;\n        } else {\n            frequency[num] = 1;\n        }\n    }\n    \n    // Finden Sie das gr\u00f6\u00dfte Element, dessen H\u00e4ufigkeit mindestens so gro\u00df ist wie der Wert des Elements.\n    let result = -1;\n    for (let num in frequency) {\n        if (frequency[num] >= num) {\n            result = Math.max(result, Number(num));\n        }\n    }\n    \n    return result;\n}\n\n// Testf\u00e4lle\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Pr\u00fcfen, ob die Seiten ein g\u00fcltiges Dreieck bilden\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Halbperimeter berechnen\n    const s = (a + b + c) / 2;\n    \n    // Fl\u00e4che mit der Heron'schen Formel berechnen\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Fl\u00e4che auf 2 Dezimalstellen runden und zur\u00fcckgeben\n    return parseFloat(area.toFixed(2));\n}\n\n// Beispiele\nconsole.log(triangleArea(3, 4, 5)); // 6.00\nconsole.log(triangleArea(1, 2, 10)); // -1"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // \u00dcberpr\u00fcfen, ob die Liste palindromisch ist\n    const isPalindrome = (arr) => {\n        for (let i = 0; i < arr.length / 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Summe der Elemente in der Liste berechnen\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // \u00dcberpr\u00fcfen, ob die Liste palindromisch ist und die Summe kleiner oder gleich dem maximal m\u00f6glichen Gewicht ist\n    return isPalindrome(q) && sum <= w;\n}\n\n// Testf\u00e4lle\nconsole.log(willItFly([1, 2], 5)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 1)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 9)); // \u279e True\nconsole.log(willItFly([3], 5)); // \u279e True"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    // Liste der Primzahlen kleiner als 100\n    const primes = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\n        41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    ];\n\n    // \u00dcberpr\u00fcfen aller Kombinationen von drei Primzahlen\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i; j < primes.length; j++) {\n            for (let k = j; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n// Beispieltest\nconsole.log(isMultiplyPrime(30)); // Sollte true zur\u00fcckgeben, da 30 = 2 * 3 * 5\nconsole.log(isMultiplyPrime(60)); // Sollte true zur\u00fcckgeben, da 60 = 2 * 3 * 5\nconsole.log(isMultiplyPrime(100)); // Sollte false zur\u00fcckgeben, da 100 nicht das Produkt von drei Primzahlen ist"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    // Umwandlung der Dezimalzahl in eine bin\u00e4re Zeichenkette\n    let binaryString = decimal.toString(2);\n    \n    // Hinzuf\u00fcgen der 'db'-Zeichen am Anfang und Ende\n    return `db${binaryString}db`;\n}\n\n// Testf\u00e4lle\nconsole.log(decimalToBinary(15));  // gibt \"db1111db\" zur\u00fcck\nconsole.log(decimalToBinary(32));  // gibt \"db100000db\" zur\u00fcck\nconsole.log(decimalToBinary(0));   // gibt \"db0db\" zur\u00fcck\nconsole.log(decimalToBinary(255)); // gibt \"db11111111db\" zur\u00fcck"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    // \u00dcberpr\u00fcfen, ob die L\u00e4nge des Strings weniger als 3 ist\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Iteriere \u00fcber den String und \u00fcberpr\u00fcfe jede Gruppe von drei aufeinanderfolgenden Zeichen\n    for (let i = 0; i <= s.length - 3; i++) {\n        let group = s.slice(i, i + 3);\n        if (group[0] === group[1] || group[1] === group[2] || group[0] === group[2]) {\n            return false;\n        }\n    }\n\n    // Wenn keine Gruppe von drei gleichen Zeichen gefunden wird, ist der String gl\u00fccklich\n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(isHappy(\"a\"));       // False\nconsole.log(isHappy(\"aa\"));      // False\nconsole.log(isHappy(\"abcd\"));    // True\nconsole.log(isHappy(\"aabb\"));    // False\nconsole.log(isHappy(\"adb\"));     // True\nconsole.log(isHappy(\"xyy\"));     // False"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    return grades.map(gpa => {\n        if (gpa === 4.0) {\n            return 'A+';\n        } else if (gpa > 3.7) {\n            return 'A';\n        } else if (gpa > 3.3) {\n            return 'A-';\n        } else if (gpa > 3.0) {\n            return 'B+';\n        } else if (gpa > 2.7) {\n            return 'B';\n        } else if (gpa > 2.3) {\n            return 'B-';\n        } else if (gpa > 2.0) {\n            return 'C+';\n        } else if (gpa > 1.7) {\n            return 'C';\n        } else if (gpa > 1.3) {\n            return 'C-';\n        } else if (gpa > 1.0) {\n            return 'D+';\n        } else if (gpa > 0.7) {\n            return 'D';\n        } else if (gpa > 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\n// Beispielaufruf:\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "// Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist\nfunction isPrime(num) {\n    if (num <= 1) return false; // 0 und 1 sind keine Primzahlen\n    if (num <= 3) return true;  // 2 und 3 sind Primzahlen\n\n    // Alle geraden Zahlen und Zahlen, die durch 3 teilbar sind, sind keine Primzahlen\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    // Pr\u00fcfe von 5 bis zur Quadratwurzel der Zahl\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\n// Hauptfunktion zur \u00dcberpr\u00fcfung der Stringl\u00e4nge\nfunction primeLength(string) {\n    const length = string.length;\n    return isPrime(length);\n}\n\n// Beispiele\nconsole.log(primeLength('Hello'));    // True (L\u00e4nge ist 5, eine Primzahl)\nconsole.log(primeLength('abcdcba'));  // True (L\u00e4nge ist 7, eine Primzahl)\nconsole.log(primeLength('kittens'));  // True (L\u00e4nge ist 7, eine Primzahl)\nconsole.log(primeLength('orange'));   // False (L\u00e4nge ist 6, keine Primzahl)"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    // Schritt 1: Zerlege die Zahl in ihre Ziffern und summiere sie.\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n\n    // Schritt 2: Wandle die Summe in eine bin\u00e4re Zeichenkette um.\n    return sum.toString(2);\n}\n\n// Testf\u00e4lle\nconsole.log(solve(1000)); // Ausgabe: \"1\"\nconsole.log(solve(150));  // Ausgabe: \"110\"\nconsole.log(solve(147));  // Ausgabe: \"1100\""}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n    // Initialisiere eine leere Liste f\u00fcr die Koordinaten\n    let coordinates = [];\n\n    // Durchlaufe jede Zeile in der Liste\n    for (let i = 0; i < lst.length; i++) {\n        // Durchlaufe jede Spalte in der aktuellen Zeile\n        for (let j = 0; j < lst[i].length; j++) {\n            // Wenn das aktuelle Element gleich x ist, f\u00fcge die Koordinate zur Liste hinzu\n            if (lst[i][j] === x) {\n                coordinates.push([i, j]);\n            }\n        }\n    }\n\n    // Sortiere die Koordinaten zuerst nach Zeilen aufsteigend, dann nach Spalten absteigend\n    coordinates.sort((a, b) => {\n        // Vergleiche die Zeilen\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        }\n        // Wenn die Zeilen gleich sind, vergleiche die Spalten absteigend\n        return b[1] - a[1];\n    });\n\n    return coordinates;\n}\n\n// Beispiele:\nconsole.log(getRow([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1)); // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(getRow([], 1)); // Output: []\n\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // Output: [(2, 2)]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) {\n        return null;\n    }\n\n    // Erstelle eine Menge, um Duplikate zu entfernen und konvertiere sie zur\u00fcck in eine Liste\n    let uniqueElements = Array.from(new Set(lst));\n\n    if (uniqueElements.length < 2) {\n        return null;\n    }\n\n    // Sortiere die Liste der einzigartigen Elemente\n    uniqueElements.sort((a, b) => a - b);\n\n    // Gib das zweitkleinste Element zur\u00fcck\n    return uniqueElements[1];\n}\n\n// Testf\u00e4lle\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));  // Ausgabe: 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));  // Ausgabe: 2\nconsole.log(nextSmallest([]));                // Ausgabe: null\nconsole.log(nextSmallest([1, 1]));            // Ausgabe: null"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n    // Schritt 1: Den String in S\u00e4tze aufteilen\n    const sentences = s.split(/[.!?]/);\n\n    // Schritt 2: S\u00e4tze trimmen und \u00fcberpr\u00fcfen, ob sie mit \"Ich\" beginnen\n    let count = 0;\n    for (let sentence of sentences) {\n        sentence = sentence.trim();\n        if (sentence.startsWith(\"Ich\")) {\n            count++;\n        }\n    }\n\n    // Schritt 3: Die Anzahl der Langeweilen zur\u00fcckgeben\n    return count;\n}\n\n// Testf\u00e4lle\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\nconsole.log(isBored(\"Ich mag Programmieren. Es ist sehr interessant! Ich lerne jeden Tag etwas Neues.\")); // 2\nconsole.log(isBored(\"Ich gehe nach Hause? Ja, Ich gehe!\")); // 2"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function isPrime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    \n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction sumOfDigits(n) {\n    return n.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}\n\nfunction skjkasdkd(lst) {\n    let maxPrime = -1;\n    \n    for (let num of lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    \n    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);\n}\n\n// Testf\u00e4lle\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Check if the dictionary is empty\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    // Set of flags to determine the case of the keys\n    let hasLowerCase = false;\n    let hasUpperCase = false;\n\n    // Iterate through the keys of the dictionary\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false; // If any key is not a string, return false\n        }\n        if (key.toLowerCase() === key) {\n            hasLowerCase = true; // Key is in lower case\n        }\n        if (key.toUpperCase() === key) {\n            hasUpperCase = true; // Key is in upper case\n        }\n        // If both lower case and upper case keys are found, return false\n        if (hasLowerCase && hasUpperCase) {\n            return false;\n        }\n    }\n    \n    // If we only have one type of case for all keys, return true\n    return true;\n}\n\n// Test cases\nconsole.log(checkDictCase({\"a\": \"apple\", \"b\": \"banana\"})); // should return true\nconsole.log(checkDictCase({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})); // should return false\nconsole.log(checkDictCase({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})); // should return false\nconsole.log(checkDictCase({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})); // should return false\nconsole.log(checkDictCase({\"STATE\": \"NC\", \"ZIP\": \"12345\"})); // should return true\nconsole.log(checkDictCase({})); // should return false"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    // Convert the input string to a number\n    let number = parseFloat(value);\n\n    // Check if the number is exactly halfway between two integers\n    if (number % 1 === 0.5 || number % 1 === -0.5) {\n        // If it is halfway, round away from zero\n        return number > 0 ? Math.ceil(number) : Math.floor(number);\n    } else {\n        // Otherwise, use the default rounding\n        return Math.round(number);\n    }\n}\n\n// Example usage:\nconsole.log(closestInteger(\"10\"));     // 10\nconsole.log(closestInteger(\"15.3\"));   // 15\nconsole.log(closestInteger(\"14.5\"));   // 15\nconsole.log(closestInteger(\"-14.5\"));  // -15"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    const pile = [];\n    let currentNumber = n;\n    \n    for (let i = 0; i < n; i++) {\n        pile.push(currentNumber);\n        if (currentNumber % 2 === 0) {\n            // Wenn die aktuelle Zahl gerade ist, die n\u00e4chste gerade Zahl hinzuf\u00fcgen\n            currentNumber += 2;\n        } else {\n            // Wenn die aktuelle Zahl ungerade ist, die n\u00e4chste ungerade Zahl hinzuf\u00fcgen\n            currentNumber += 2;\n        }\n    }\n    \n    return pile;\n}\n\n// Beispiele:\nconsole.log(makeAPile(3)); // [3, 5, 7]\nconsole.log(makeAPile(4)); // [4, 6, 8, 10]\nconsole.log(makeAPile(5)); // [5, 7, 9, 11, 13]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    // Split the string by commas or whitespace using regular expressions\n    return s.split(/[\\s,]+/).filter(Boolean);\n}\n\n// Test cases\nconsole.log(wordsString(\"Hi, my name is John\"));  // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\"));  // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // \u00dcberpr\u00fcfen, ob x und y positive Zahlen sind\n    if (x <= 0 || y <= 0) {\n        return -1;\n    }\n\n    // Sicherstellen, dass x \u2264 y; falls nicht, tauschen wir x und y\n    if (x > y) {\n        [x, y] = [y, x];\n    }\n\n    // Die gr\u00f6\u00dfte gerade Zahl im Bereich [x, y] finden\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n\n    // Falls keine gerade Zahl gefunden wird, -1 zur\u00fcckgeben\n    return -1;\n}\n\n// Beispielaufrufe\nconsole.log(chooseNum(12, 15)); // 14\nconsole.log(chooseNum(13, 12)); // -1"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return -1;\n    }\n\n    // Step 2: Calculate the sum of integers from n to m\n    let sum = 0;\n    let count = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n\n    // Step 3: Compute the average\n    let average = sum / count;\n\n    // Step 4: Round the average to the nearest integer\n    let roundedAverage = Math.round(average);\n\n    // Step 5: Convert the rounded average to binary\n    let binaryRepresentation = roundedAverage.toString(2);\n\n    // Step 6: Return the binary representation prefixed with \"0b\"\n    return \"0b\" + binaryRepresentation;\n}\n\n// Test cases\nconsole.log(roundedAvg(1, 5));  // Output: \"0b11\"\nconsole.log(roundedAvg(7, 5));  // Output: -1\nconsole.log(roundedAvg(10, 20)); // Output: \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // Output: \"0b11010\""}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n    // Hilfsfunktion zur Berechnung der Fakult\u00e4t\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Hilfsfunktion zur Berechnung der Summe der Zahlen von 1 bis num\n    function sumUpTo(num) {\n        return (num * (num + 1)) / 2;\n    }\n\n    // Ergebnisliste initialisieren\n    let result = [];\n\n    // Iteration von 1 bis n (einschlie\u00dflich)\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // i ist gerade - Berechne Fakult\u00e4t\n            result.push(factorial(i));\n        } else {\n            // i ist ungerade - Berechne Summe der Zahlen von 1 bis i\n            result.push(sumUpTo(i));\n        }\n    }\n\n    // R\u00fcckgabe der Ergebnisliste\n    return result;\n}\n\n// Beispielaufruf\nconsole.log(f(5)); // [1, 2, 6, 24, 15]"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function isPalindrome(num) {\n    // Konvertiere die Zahl in einen String\n    const str = num.toString();\n    // \u00dcberpr\u00fcfe, ob der String gleich seinem umgekehrten Wert ist\n    return str === str.split('').reverse().join('');\n}\n\nfunction evenOddPalindrome(n) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\n// Beispielaufrufe\nconsole.log(evenOddPalindrome(3));  // Ausgabe: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Ausgabe: [4, 6]"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length === 0) return true;\n\n    const n = arr.length;\n    const doubledArr = arr.concat(arr);\n\n    function isNonDecreasing(subArr) {\n        for (let i = 0; i < subArr.length - 1; i++) {\n            if (subArr[i] > subArr[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (let i = 0; i < n; i++) {\n        if (isNonDecreasing(doubledArr.slice(i, i + n))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // True\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // False\nconsole.log(moveOneBall([])); // True"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // \u00dcberpr\u00fcfen, ob es in lst2 \u00fcberhaupt gerade Zahlen gibt\n    let hasEvenInLst2 = lst2.some(num => num % 2 === 0);\n\n    // Wenn keine geraden Zahlen in lst2 sind, ist es unm\u00f6glich, alle Zahlen in lst1 gerade zu machen\n    if (!hasEvenInLst2) {\n        return \"NO\";\n    }\n\n    // \u00dcberpr\u00fcfen, ob lst1 bereits alle geraden Zahlen enth\u00e4lt\n    let allEvenInLst1 = lst1.every(num => num % 2 === 0);\n\n    // Wenn lst1 bereits alle geraden Zahlen enth\u00e4lt, ist die Antwort \"YES\"\n    if (allEvenInLst1) {\n        return \"YES\";\n    }\n\n    // Wenn lst1 ungerade Zahlen enth\u00e4lt und lst2 gerade Zahlen enth\u00e4lt,\n    // k\u00f6nnen wir die ungeraden Zahlen in lst1 gegen die geraden Zahlen in lst2 austauschen\n    return \"YES\";\n}\n\n// Testf\u00e4lle\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\"\nconsole.log(exchange([1, 3, 5], [2, 4, 6]));       // \"YES\"\nconsole.log(exchange([2, 4, 6], [1, 3, 5]));       // \"YES\"\nconsole.log(exchange([1, 3, 5], [1, 3, 5]));       // \"NO\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // Erstelle eine Menge der zu l\u00f6schenden Zeichen f\u00fcr effizientes Nachschlagen\n    const charsToDelete = new Set(c);\n\n    // Filtere die Zeichen aus s, die nicht in charsToDelete enthalten sind\n    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');\n\n    // \u00dcberpr\u00fcfe, ob die resultierende Zeichenkette ein Palindrom ist\n    const isPalindrome = filteredString === filteredString.split('').reverse().join('');\n\n    // Gib das Tupel mit der resultierenden Zeichenkette und dem Palindrom-Status zur\u00fcck\n    return [filteredString, isPalindrome];\n}\n\n// Testf\u00e4lle\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // ('bcd', False)\nconsole.log(reverseDelete(\"abcdef\", \"b\")); // ('acdef', False)\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // ('cdedc', True)"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let totalBuckets = 0;\n\n    for (let row of grid) {\n        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);\n        totalBuckets += Math.ceil(waterUnits / capacity);\n    }\n\n    return totalBuckets;\n}\n\n// Beispiele\nconst grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\nconst capacity1 = 1;\nconsole.log(maxFill(grid1, capacity1)); // Ausgabe: 6\n\nconst grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\nconst capacity2 = 2;\nconsole.log(maxFill(grid2, capacity2)); // Ausgabe: 5\n\nconst grid3 = [[0,0,0], [0,0,0]];\nconst capacity3 = 5;\nconsole.log(maxFill(grid3, capacity3)); // Ausgabe: 0"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    // Wenn die Zeichenkette leer ist, gib eine leere Liste zur\u00fcck\n    if (s === \"\") {\n        return [];\n    }\n    \n    // Hilfsfunktion, um zu pr\u00fcfen, ob ein Zeichen ein Konsonant ist\n    function isConsonant(char) {\n        const vowels = \"aeiouAEIOU\";\n        return !vowels.includes(char) && /[a-zA-Z]/.test(char);\n    }\n\n    // Aufteilen der Zeichenkette in W\u00f6rter\n    const words = s.split(\" \");\n    const result = [];\n\n    // Durch jedes Wort iterieren\n    for (const word of words) {\n        let consonantCount = 0;\n        \n        // Z\u00e4hlen der Konsonanten im aktuellen Wort\n        for (const char of word) {\n            if (isConsonant(char)) {\n                consonantCount++;\n            }\n        }\n\n        // Wenn das Wort genau n Konsonanten hat, in die Ergebnisliste aufnehmen\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}\n\n// Beispiele\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sortiere das Array in aufsteigender Reihenfolge\n    arr.sort((a, b) => a - b);\n\n    // Nimm die letzten k Elemente und gib sie zur\u00fcck\n    return arr.slice(-k);\n}\n\n// Testf\u00e4lle\nconsole.log(maximum([-3, -4, 5], 3)); // Ausgabe: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2));  // Ausgabe: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Ausgabe: [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        // Pr\u00fcfen, ob das Element h\u00f6chstens zwei Ziffern hat\n        if (Math.abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Beispiel\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(addElements(arr, k)); // Ausgabe: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Helper function to determine if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num === 2) return true;\n        if (num % 2 === 0) return false;\n        for (let i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Determine the intersection of two intervals\n    const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    // Calculate the length of the intersection\n    const length = end - start + 1; // +1 because intervals are inclusive\n\n    // If the intervals do not intersect, length will be non-positive\n    if (length <= 0) {\n        return \"NO\";\n    }\n\n    // Check if the length is a prime number\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\n\n// Test cases\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    // Dictionary to store previously computed values to avoid redundant calculations\n    const memo = {};\n\n    // Helper function to calculate tribonacci value with memoization\n    function tribonacci(x) {\n        // Base case\n        if (x === 1) return 3;\n\n        // Return the memoized result if it exists\n        if (memo[x] !== undefined) return memo[x];\n\n        if (x % 2 === 0) {\n            // Case for even x\n            memo[x] = 1 + x / 2;\n        } else {\n            // Case for odd x\n            memo[x] = tribonacci(x - 1) + tribonacci(x - 2) + tribonacci(x + 1);\n        }\n\n        return memo[x];\n    }\n\n    // Generate the tribonacci sequence up to n\n    const result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(tribonacci(i));\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(tri(3)); // Output: [undefined, 3, 2, 8]\nconsole.log(tri(4)); // Output: [undefined, 3, 2, 8, 3]"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    // Konvertiere die Zahl in einen String, um die Ziffern einzeln durchlaufen zu k\u00f6nnen\n    const numStr = n.toString();\n    let product = 1;\n    let hasOddDigit = false;\n\n    // Durchlaufe jede Ziffer der Zahl\n    for (let i = 0; i < numStr.length; i++) {\n        const digit = parseInt(numStr[i], 10);\n\n        // Pr\u00fcfe, ob die Ziffer ungerade ist\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n    }\n\n    // Wenn keine ungeraden Ziffern gefunden wurden, gib 0 zur\u00fcck\n    if (!hasOddDigit) {\n        return 0;\n    }\n\n    // Gib das Produkt der ungeraden Ziffern zur\u00fcck\n    return product;\n}\n\n// Beispielaufrufe\nconsole.log(digits(1));   // Output: 1\nconsole.log(digits(4));   // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n    let depth = 0;\n    for (let char of string) {\n        if (char === '[') {\n            depth++;\n        } else if (char === ']') {\n            // Wenn wir eine schlie\u00dfende Klammer finden, verringern wir die Tiefe\n            if (depth > 1) {\n                return true; // Wir haben eine verschachtelte Klammer gefunden\n            }\n            depth--;\n        }\n    }\n    return false; // Keine verschachtelten Klammern gefunden\n}\n\n// Testf\u00e4lle\nconsole.log(isNested('[[]]')); // \u279e True\nconsole.log(isNested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(isNested('[][]')); // \u279e False\nconsole.log(isNested('[]')); // \u279e False\nconsole.log(isNested('[[][]]')); // \u279e True\nconsole.log(isNested('[[]][[')); // \u279e True"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Initialize the sum variable to 0\n    let sum = 0;\n    \n    // Iterate through each element in the list\n    for (let i = 0; i < lst.length; i++) {\n        // Round the element to the next whole number\n        let rounded = Math.ceil(lst[i]);\n        \n        // Square the rounded number\n        let squared = rounded * rounded;\n        \n        // Add the squared number to the sum\n        sum += squared;\n    }\n    \n    // Return the final sum\n    return sum;\n}\n\n// Test cases\nconsole.log(sumSquares([1, 2, 3])); // Should output 14\nconsole.log(sumSquares([1, 4, 9])); // Should output 98\nconsole.log(sumSquares([1, 3, 5, 7])); // Should output 84\nconsole.log(sumSquares([1.4, 4.2, 0])); // Should output 29\nconsole.log(sumSquares([-2.4, 1, 1])); // Should output 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Trim any trailing spaces from the string\n    txt = txt.trim();\n    \n    // If the trimmed string is empty, return false\n    if (txt.length === 0) {\n        return false;\n    }\n\n    // Get the last character of the trimmed string\n    let lastChar = txt[txt.length - 1];\n\n    // Check if the last character is alphabetic\n    if (!/[a-zA-Z]/.test(lastChar)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // If the character before the last character is a space or doesn't exist, return true\n    if (txt.length === 1 || txt[txt.length - 2] === ' ') {\n        return true;\n    }\n\n    // Otherwise, return false\n    return false;\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"\")); // \u279e False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    // Durchlaufen des Arrays von rechts nach links\n    for (let i = arr.length - 1; i > 0; i--) {\n        // Pr\u00fcfen, ob das aktuelle Element kleiner als das vorhergehende Element ist\n        if (arr[i] < arr[i - 1]) {\n            return i; // Den Index des Elements zur\u00fcckgeben\n        }\n    }\n    return -1; // Wenn kein solches Element gefunden wird, -1 zur\u00fcckgeben\n}\n\n// Testf\u00e4lle\nconsole.log(canArrange([1, 2, 4, 3, 5])); // Ausgabe: 3\nconsole.log(canArrange([1, 2, 3]));       // Ausgabe: -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let largestNegative = null;\n    let smallestPositive = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n\n// Beispiele\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // (None, 1)\nconsole.log(largestSmallestIntegers([])); // (None, None)\nconsole.log(largestSmallestIntegers([0])); // (None, None)\nconsole.log(largestSmallestIntegers([-3, -5, -1, 2, 4, 6])); // (-1, 2)\nconsole.log(largestSmallestIntegers([-1, -2, -3])); // (-1, None)\nconsole.log(largestSmallestIntegers([1, 2, 3])); // (None, 1)"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n    // Helper function to compute factorial of a number\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Initialize the special factorial product to 1\n    let specialFact = 1;\n\n    // Compute the product of factorials from 1 to n\n    for (let i = 1; i <= n; i++) {\n        specialFact *= factorial(i);\n    }\n\n    return specialFact;\n}\n\n// Example usage:\nconsole.log(specialFactorial(4)); // Output: 288"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    const words = sentence.split(' ');\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n    return primeLengthWords.join(' ');\n}\n\n// Beispiel 1:\nconsole.log(wordsInSentence(\"This is a test\")); // Ausgabe: \"is\"\n\n// Beispiel 2:\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Ausgabe: \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    // Hilfsfunktion zum Berechnen des gr\u00f6\u00dften gemeinsamen Teilers\n    function gcd(a, b) {\n        if (b === 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    // Funktion zum Parsen eines Bruchs\n    function parseFraction(fraction) {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return { numerator, denominator };\n    }\n\n    // Parsen der Br\u00fcche x und n\n    const fractionX = parseFraction(x);\n    const fractionN = parseFraction(n);\n\n    // Multiplizieren der Br\u00fcche: (a/b) * (c/d) = (a*c) / (b*d)\n    const resultNumerator = fractionX.numerator * fractionN.numerator;\n    const resultDenominator = fractionX.denominator * fractionN.denominator;\n\n    // Berechnen des gr\u00f6\u00dften gemeinsamen Teilers des Z\u00e4hlers und Nenners\n    const gcdResult = gcd(resultNumerator, resultDenominator);\n\n    // Der Bruch ist vereinfacht: (resultNumerator / gcdResult) / (resultDenominator / gcdResult)\n    const simplifiedNumerator = resultNumerator / gcdResult;\n    const simplifiedDenominator = resultDenominator / gcdResult;\n\n    // \u00dcberpr\u00fcfen, ob der vereinfachte Nenner gleich 1 ist (d.h. ob die Bruchzahl eine ganze Zahl ist)\n    return simplifiedDenominator === 1;\n}\n\n// Testf\u00e4lle\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    // Hilfsfunktion zur Berechnung der Summe der Ziffern einer Zahl\n    function digitSum(n) {\n        return Math.abs(n) // Verwenden Sie den absoluten Wert, um mit negativen Zahlen umzugehen\n            .toString() // Konvertieren Sie die Zahl in eine Zeichenkette\n            .split('') // Teilen Sie die Zeichenkette in einzelne Ziffern\n            .reduce((sum, digit) => sum + parseInt(digit), 0); // Summieren Sie die Ziffern\n    }\n\n    // Erstellen Sie eine neue Liste mit Objekten, die die Zahl und ihre Ziffernsumme enthalten\n    const numsWithDigitSums = nums.map((num, index) => ({\n        num,\n        digitSum: digitSum(num),\n        index\n    }));\n\n    // Sortieren Sie die Liste basierend auf der Ziffernsumme und dem urspr\u00fcnglichen Index\n    numsWithDigitSums.sort((a, b) => {\n        if (a.digitSum === b.digitSum) {\n            return a.index - b.index; // Behalten Sie die urspr\u00fcngliche Reihenfolge bei gleichen Ziffernsummen bei\n        }\n        return a.digitSum - b.digitSum; // Sortieren Sie nach Ziffernsumme\n    });\n\n    // Extrahieren Sie die sortierten Zahlen\n    return numsWithDigitSums.map(item => item.num);\n}\n\n// Beispielaufrufe\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    // Helper function to check if a number is odd\n    function isOdd(num) {\n        return num % 2 !== 0;\n    }\n\n    // Helper function to get the first digit of a number\n    function getFirstDigit(num) {\n        num = Math.abs(num); // Consider the absolute value to handle negative numbers\n        while (num >= 10) {\n            num = Math.floor(num / 10);\n        }\n        return num;\n    }\n\n    // Helper function to get the last digit of a number\n    function getLastDigit(num) {\n        return Math.abs(num) % 10;\n    }\n\n    // Filter and count the numbers that meet the criteria\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 || num < -10) {\n            let firstDigit = getFirstDigit(num);\n            let lastDigit = getLastDigit(num);\n            if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\n// Examples\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    // Schritt 1: Erstellen des Arrays a\n    const a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    // Schritt 2: Durchsuchen des Arrays nach g\u00fcltigen Tripeln\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Schritt 3: R\u00fcckgabe der Anzahl der g\u00fcltigen Tripel\n    return count;\n}\n\n// Beispieltest\nconst n = 5;\nconsole.log(getMaxTriples(n));  // Ausgabe: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    // Liste der Planeten in der Reihenfolge ihrer Entfernung zur Sonne\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Finden der Indizes der Eingabeplaneten\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // \u00dcberpr\u00fcfen, ob beide Planeten in der Liste sind\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Finden der kleineren und gr\u00f6\u00dferen Indizes, um die Planeten zwischen ihnen zu bekommen\n    const startIndex = Math.min(index1, index2);\n    const endIndex = Math.max(index1, index2);\n    \n    // Extrahieren der Planeten zwischen den beiden Indizes (exklusive der gegebenen Planeten)\n    const betweenPlanets = planets.slice(startIndex + 1, endIndex);\n    \n    // R\u00fcckgabe des Ergebnisses als Tupel (Array in JavaScript)\n    return betweenPlanets;\n}\n\n// Beispiele\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf(\"Pluto\", \"Neptune\")); // ==> []"}
{"task_id": "javascript/71", "language": "javascript", "completion": "/**\n * \u00dcberpr\u00fcft, ob eine Zahl eine Primzahl ist.\n * @param {number} num - Die Zahl, die \u00fcberpr\u00fcft werden soll.\n * @returns {boolean} - True, wenn die Zahl eine Primzahl ist, andernfalls False.\n */\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    \n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    \n    return true;\n}\n\n/**\n * Gibt den Wert von x zur\u00fcck, wenn n eine Primzahl ist, und den Wert von y, wenn nicht.\n * @param {number} n - Die zu \u00fcberpr\u00fcfende Zahl.\n * @param {number} x - Der Wert, der zur\u00fcckgegeben werden soll, wenn n eine Primzahl ist.\n * @param {number} y - Der Wert, der zur\u00fcckgegeben werden soll, wenn n keine Primzahl ist.\n * @returns {number} - Der Wert von x oder y basierend auf der Primzahlpr\u00fcfung.\n */\nfunction xOrY(n, x, y) {\n    return isPrime(n) ? x : y;\n}\n\n// Beispiele:\nconsole.log(xOrY(7, 34, 12)); // 34\nconsole.log(xOrY(15, 8, 5));  // 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    return lst\n        .filter(num => num >= 0 && Number.isInteger(num) && num % 2 !== 0) // Filtere ungerade, nicht-negative, ganze Zahlen\n        .map(num => num * num) // Quadrat der gefilterten Werte\n        .reduce((sum, num) => sum + num, 0); // Summe der quadrierten Werte\n}\n\n// Beispielaufrufe:\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // 1 + 9 + 0 + 0 = 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([9, -2])); // 81\nconsole.log(doubleTheDifference([0])); // 0\nconsole.log(doubleTheDifference([])); // 0"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let strongest = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        let capCount = 0;\n        let smCount = 0;\n\n        // Z\u00e4hle Gro\u00df- und Kleinbuchstaben\n        for (let char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n\n        // Berechne die St\u00e4rke\n        let strength = capCount - smCount;\n\n        // Aktualisiere die st\u00e4rkste Erweiterung, wenn n\u00f6tig\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongest = extension;\n        }\n    });\n\n    return `${classname}.${strongest}`;\n}\n\n// Beispiel\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']));  // 'Slices.SErviNGSliCes'\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC']));  // 'my_class.AA'"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Funktion, die alle Rotationen eines Wortes generiert\n    function getRotations(word) {\n        let rotations = [];\n        for (let i = 0; i < word.length; i++) {\n            let rotation = word.slice(i) + word.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    }\n\n    // Generiere alle Rotationen von b\n    let rotations = getRotations(b);\n\n    // \u00dcberpr\u00fcfe, ob eine der Rotationen ein Teilstring von a ist\n    for (let rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Testf\u00e4lle\nconsole.log(cycpatternCheck(\"abcd\", \"abd\"));  // false\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); // true\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); // false\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); // true\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); // false\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); // true"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    const romanMap = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n\n    let result = '';\n\n    for (let i = 0; i < romanMap.length; i++) {\n        while (number >= romanMap[i].value) {\n            result += romanMap[i].numeral;\n            number -= romanMap[i].value;\n        }\n    }\n\n    return result;\n}\n\n// Testf\u00e4lle\nconsole.log(intToMiniRoman(19)); // 'xix'\nconsole.log(intToMiniRoman(152)); // 'clii'\nconsole.log(intToMiniRoman(426)); // 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // Zuerst sortieren wir die Seitenl\u00e4ngen, so dass `c` die l\u00e4ngste Seite ist\n    let sides = [a, b, c].sort((x, y) => x - y);\n    let [x, y, z] = sides;\n\n    // \u00dcberpr\u00fcfen, ob die Seitenl\u00e4ngen die Bedingung des Satzes des Pythagoras erf\u00fcllen\n    return x * x + y * y === z * z;\n}\n\n// Testf\u00e4lle\nconsole.log(rightAngleTriangle(3, 4, 5)); // True\nconsole.log(rightAngleTriangle(1, 2, 3)); // False"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    // Funktion, um zu \u00fcberpr\u00fcfen, ob ein Zeichen ein Buchstabe ist\n    function isLetter(char) {\n        return char.toLowerCase() !== char.toUpperCase();\n    }\n\n    // \u00dcberpr\u00fcfen, ob der String Buchstaben enth\u00e4lt\n    let containsLetter = false;\n    for (let i = 0; i < s.length; i++) {\n        if (isLetter(s[i])) {\n            containsLetter = true;\n            break;\n        }\n    }\n\n    // Wenn der String keine Buchstaben enth\u00e4lt, kehren wir ihn um\n    if (!containsLetter) {\n        return s.split('').reverse().join('');\n    }\n\n    // Andernfalls kehren wir die Gro\u00df- und Kleinschreibung jedes Buchstabens um\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (isLetter(s[i])) {\n            if (s[i] === s[i].toLowerCase()) {\n                result += s[i].toUpperCase();\n            } else {\n                result += s[i].toLowerCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\n// Testf\u00e4lle\nconsole.log(solve(\"1234\"));  // \"4321\"\nconsole.log(solve(\"ab\"));    // \"AB\"\nconsole.log(solve(\"#a@C\"));  // \"#A@c\""}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n    // Wenn der Text eine leere Zeichenkette ist, gib null zur\u00fcck.\n    if (text === '') {\n        return null;\n    }\n    \n    // Erzeuge einen MD5-Hash der Eingabezeichenkette.\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\n// Beispiel\nconsole.log(stringToMd5('Hello world')); // Sollte '3e25960a79dbc69b674cd4ec67a72c62' ausgeben"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Initialisiere das Ergebnis-Array\n    let result = [];\n    \n    // Bestimme die Start- und Endwerte der Schleife\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n\n    // Durchlaufe alle Zahlen zwischen start und end (einschlie\u00dflich)\n    for (let i = start; i <= end; i++) {\n        // \u00dcberpr\u00fcfe, ob die Zahl gerade ist\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    \n    // Gib das Ergebnis-Array zur\u00fcck\n    return result;\n}\n\n// Beispielaufrufe\nconsole.log(generateIntegers(2, 8)); // => [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // => [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // => []"}

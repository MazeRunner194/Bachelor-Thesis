{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0; // Initial balance is zero\n\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i]; // Update the balance\n\n        if (balance < 0) {\n            return True; // Balance fell below zero\n        }\n    }\n\n    return False; // Balance never fell below zero\n}\n\n// Example usage\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    // Initialize sum and product\n    let sum = 0;\n    let product = 1;\n    \n    // Iterate through the list to calculate sum and product\n    for (let number of numbers) {\n        sum += number;\n        product *= number;\n    }\n    \n    // Return a tuple (array in JavaScript) with sum and product\n    return [sum, product];\n}\n\n// Testing the function\nconsole.log(sumProduct([]));          // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    // Check if both strings are of the same length\n    if (a.length !== b.length) {\n        throw new Error(\"Input strings must be of the same length\");\n    }\n\n    let result = '';\n\n    // Perform XOR for each character in the strings\n    for (let i = 0; i < a.length; i++) {\n        // XOR operation between two characters\n        let xorResult = (a[i] === b[i]) ? '0' : '1';\n        result += xorResult;\n    }\n\n    return result;\n}\n\n// Example usage\nconsole.log(stringXor('010', '110')); // Output: '100'"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    // Check if the input list is empty\n    if (strings.length === 0) {\n        return \"none\";\n    }\n\n    // Initialize the longest string as the first string in the list\n    let longestString = strings[0];\n\n    // Iterate through the list starting from the second element\n    for (let i = 1; i < strings.length; i++) {\n        // Update the longest string if a longer string is found\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    // Return the longest string\n    return longestString;\n}\n\n// Example usage\nconsole.log(longest([])); // Output: \"none\"\nconsole.log(longest(['a', 'b', 'c'])); // Output: 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // Output: 'ccc'"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // Ensure a and b are positive\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    // Implement the Euclidean algorithm\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n}\n\n// Example usage:\nconsole.log(greatestCommonDivisor(3, 5));  // Output: 1\nconsole.log(greatestCommonDivisor(25, 15));  // Output: 5"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Step 1: Create a mapping from numeral words to their numeric values\n    const numeralToNumber = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    \n    // Step 2: Split the input string into an array of numeral words\n    let numeralWords = numbers.split(' ');\n    \n    // Step 3: Map the numeral words to their numeric values\n    let numericValues = numeralWords.map(word => numeralToNumber[word]);\n    \n    // Step 4: Sort the array of numeric values\n    numericValues.sort((a, b) => a - b);\n    \n    // Step 5: Map the sorted numeric values back to their corresponding numeral words\n    const numberToNumeral = Object.keys(numeralToNumber).reduce((obj, key) => {\n        obj[numeralToNumber[key]] = key;\n        return obj;\n    }, {});\n    let sortedNumeralWords = numericValues.map(num => numberToNumeral[num]);\n    \n    // Step 6: Join the sorted numeral words into a single space-delimited string and return it\n    return sortedNumeralWords.join(' ');\n}\n\n// Example usage:\nconsole.log(sortNumbers('three one five')); // Output: 'one three five'"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two elements.\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    if (min === max) {\n        throw new Error(\"All numbers in the list are the same.\");\n    }\n\n    return numbers.map(num => (num - min) / (max - min));\n}\n\n// Example usage:\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n    let flippedString = '';\n\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        if (char === char.toUpperCase()) {\n            flippedString += char.toLowerCase();\n        } else {\n            flippedString += char.toUpperCase();\n        }\n    }\n\n    return flippedString;\n}\n\n// Example usage:\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(num => num > 0);\n}\n\n// Example usage:\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false; // Any even number greater than 2 is not prime\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(isPrime(6)); // False\nconsole.log(isPrime(101)); // True\nconsole.log(isPrime(11)); // True\nconsole.log(isPrime(13441)); // True\nconsole.log(isPrime(61)); // True\nconsole.log(isPrime(4)); // False\nconsole.log(isPrime(1)); // False"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n    // Convert the list to a set to remove duplicates\n    let uniqueSet = new Set(l);\n\n    // Convert the set back to a list\n    let uniqueList = Array.from(uniqueSet);\n\n    // Sort the list\n    uniqueList.sort((a, b) => a - b);\n\n    return uniqueList;\n}\n\n// Example usage\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));  // [0, 2, 3, 5, 9, 123]"}
{"task_id": "javascript/11", "language": "javascript", "completion": "// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\n// Generator function for Fibonacci numbers\nfunction* fibonacci() {\n    let a = 0, b = 1;\n    while (true) {\n        [a, b] = [b, a + b];\n        yield a;\n    }\n}\n\n// Main function to find the n-th prime Fibonacci number\nfunction primeFib(n) {\n    const fibGen = fibonacci();\n    let count = 0;\n    let primeFibNum;\n\n    while (count < n) {\n        const fibNum = fibGen.next().value;\n        if (isPrime(fibNum)) {\n            count++;\n            primeFibNum = fibNum;\n        }\n    }\n\n    return primeFibNum;\n}\n\n// Testing the function\nconsole.log(primeFib(1)); // 2\nconsole.log(primeFib(2)); // 3\nconsole.log(primeFib(3)); // 5\nconsole.log(primeFib(4)); // 13\nconsole.log(primeFib(5)); // 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    // If the list has fewer than 3 elements, return False\n    if (l.length < 3) {\n        return false;\n    }\n\n    // Sort the list\n    l.sort((a, b) => a - b);\n\n    // Iterate through each element as the first element of the triplet\n    for (let i = 0; i < l.length - 2; i++) {\n        // Initialize two pointers\n        let left = i + 1;\n        let right = l.length - 1;\n\n        // Use two pointers to find the other two elements\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    // Return False if no triplet is found\n    return false;\n}\n\n// Test cases\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // False\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // True\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // False\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triplesSumToZero([1])); // False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    const seen = new Set();\n\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let a = 0; // fib4(0)\n  let b = 0; // fib4(1)\n  let c = 2; // fib4(2)\n  let d = 0; // fib4(3)\n  let result;\n\n  for (let i = 4; i <= n; i++) {\n    result = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = result;\n  }\n\n  return result;\n}\n\n// Test cases\nconsole.log(fib4(5)); // Outputs: 4\nconsole.log(fib4(6)); // Outputs: 8\nconsole.log(fib4(7)); // Outputs: 14"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    // Step 1: Sort the list\n    l.sort((a, b) => a - b);\n\n    const n = l.length;\n    const mid = Math.floor(n / 2);\n\n    // Step 2: Check if the length is odd or even\n    if (n % 2 === 1) {\n        // If odd, return the middle element\n        return l[mid];\n    } else {\n        // If even, return the average of the two middle elements\n        return (l[mid - 1] + l[mid]) / 2;\n    }\n}\n\n// Test cases\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "javascript/16", "language": "javascript", "completion": "/**\n * Checks if given string is a palindrome\n * @param {string} text\n * @returns {boolean}\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfunction isPalindrome(text) {\n    // An empty string is considered a palindrome\n    if (text === '') {\n        return true;\n    }\n    \n    // Initialize pointers for the start and end of the string\n    let start = 0;\n    let end = text.length - 1;\n    \n    // Compare characters from the start and the end\n    while (start < end) {\n        if (text[start] !== text[end]) {\n            return false; // If mismatch found, it's not a palindrome\n        }\n        start++;\n        end--;\n    }\n    \n    return true; // If no mismatches found, it's a palindrome\n}\n\n// Example usage:\nconsole.log(isPalindrome(''));       // True\nconsole.log(isPalindrome('aba'));    // True\nconsole.log(isPalindrome('aaaaa'));  // True\nconsole.log(isPalindrome('zbcd'));   // False"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n    // Define a regular expression to match all vowels (both lowercase and uppercase)\n    const vowelsRegex = /[aeiouAEIOU]/g;\n    \n    // Replace all matched vowels with an empty string\n    return text.replace(vowelsRegex, '');\n}\n\n// Example usage:\nconsole.log(removeVowels('')); // ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // 'bcdf'\nconsole.log(removeVowels('aaaaa')); // ''\nconsole.log(removeVowels('aaBAA')); // 'B'\nconsole.log(removeVowels('zbcd')); // 'zbcd'"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\nconsole.log(belowThreshold([1, 20, 4, 10], 5));  // False"}
{"task_id": "javascript/19", "language": "javascript", "completion": "/**\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\nfunction add(x, y) {\n    return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  // Helper function to build a frequency map of characters in a string\n  function buildCharFrequencyMap(str) {\n    const freqMap = new Map();\n    for (let char of str) {\n      freqMap.set(char, (freqMap.get(char) || 0) + 1);\n    }\n    return freqMap;\n  }\n\n  // Build frequency maps for both strings\n  const freqMap0 = buildCharFrequencyMap(s0);\n  const freqMap1 = buildCharFrequencyMap(s1);\n\n  // Compare the frequency maps\n  if (freqMap0.size !== freqMap1.size) {\n    return false;\n  }\n\n  for (let [char, count] of freqMap0) {\n    if (freqMap1.get(char) !== count) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        let temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Example Usage:\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    // Step 1: Convert lists to sets to remove duplicates\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Step 2: Find the intersection of the two sets\n    const commonSet = new Set([...set1].filter(item => set2.has(item)));\n\n    // Step 3: Convert the set of common elements back to a list\n    const commonList = [...commonSet];\n\n    // Step 4: Sort the list\n    commonList.sort((a, b) => a - b);\n\n    return commonList;\n}\n\n// Test examples\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    // Step 1: Handle the factor of 2\n    let largestFactor = 1;\n    while (n % 2 === 0) {\n        largestFactor = 2;\n        n /= 2;\n    }\n\n    // Step 2: Check for odd factors from 3 onwards\n    let factor = 3;\n    while (n !== 1 && factor * factor <= n) {\n        while (n % factor === 0) {\n            largestFactor = factor;\n            n /= factor;\n        }\n        factor += 2;\n    }\n\n    // If n is still greater than 1, then it is a prime number and the largest factor.\n    if (n > 1) {\n        largestFactor = n;\n    }\n\n    return largestFactor;\n}\n\n// Example usage:\nconsole.log(largestPrimeFactor(13195)); // Output: 29\nconsole.log(largestPrimeFactor(2048));  // Output: 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n    return n * (n + 1) / 2;\n}\n\n// Example usage:\nconsole.log(sumToN(30));  // Output: 465\nconsole.log(sumToN(100)); // Output: 5050\nconsole.log(sumToN(5));   // Output: 15\nconsole.log(sumToN(10));  // Output: 55\nconsole.log(sumToN(1));   // Output: 1"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    // Initialize an empty array to store the derivative coefficients\n    let derivativeCoefficients = [];\n    \n    // Start from index 1 because the derivative of the constant term (index 0) is zero\n    for (let i = 1; i < xs.length; i++) {\n        // Compute the derivative coefficient for the current term\n        derivativeCoefficients.push(xs[i] * i);\n    }\n    \n    return derivativeCoefficients;\n}\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // Expected output: [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // Expected output: [2, 6]"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Initialize an array to store the computed values\n    let fibfibSeq = [0, 0, 1];\n\n    // Compute the FibFib number for each index from 3 to n\n    for (let i = 3; i <= n; i++) {\n        fibfibSeq[i] = fibfibSeq[i - 1] + fibfibSeq[i - 2] + fibfibSeq[i - 3];\n    }\n\n    // Return the n-th FibFib number\n    return fibfibSeq[n];\n}\n\n// Example usage\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n  // Convert the string to lowercase to handle case insensitivity\n  s = s.toLowerCase();\n  \n  // Define a set of vowels\n  const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n  \n  // Initialize a counter for vowels\n  let count = 0;\n  \n  // Iterate through the string\n  for (let i = 0; i < s.length; i++) {\n    // Check if the current character is a vowel\n    if (vowels.has(s[i])) {\n      count++;\n    }\n    // Check if 'y' is at the end of the word\n    else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n// Test cases\nconsole.log(vowelsCount(\"abcde\"));  // Output: 2\nconsole.log(vowelsCount(\"ACEDY\"));  // Output: 3\nconsole.log(vowelsCount(\"rhythm\")); // Output: 1\nconsole.log(vowelsCount(\"sky\"));    // Output: 1\nconsole.log(vowelsCount(\"bcdfg\"));  // Output: 0"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    // Create a frequency map using an object\n    const frequencyMap = {};\n    \n    // Populate the frequency map\n    for (let num of lst) {\n        if (frequencyMap[num]) {\n            frequencyMap[num]++;\n        } else {\n            frequencyMap[num] = 1;\n        }\n    }\n    \n    // Initialize the result as -1 (indicating no valid integer found yet)\n    let result = -1;\n    \n    // Iterate through the frequency map entries\n    for (let num in frequencyMap) {\n        num = parseInt(num);\n        if (frequencyMap[num] >= num && num > 0) {\n            result = Math.max(result, num);\n        }\n    }\n    \n    return result;\n}\n\n// Test the function with given examples\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1; // Invalid triangle\n    }\n\n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Round the area to 2 decimal points\n    return Math.round(area * 100) / 100;\n}\n\n// Example usage:\nconsole.log(triangleArea(3, 4, 5)); // Output: 6.00\nconsole.log(triangleArea(1, 2, 10)); // Output: -1"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if the list is palindromic\n    const isPalindromic = q.join('') === q.slice().reverse().join('');\n    \n    // Calculate the sum of the elements\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Check both conditions\n    return isPalindromic && (sum <= w);\n}\n\n// Example usage:\nconsole.log(willItFly([1, 2], 5)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 1)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 9)); // \u279e True\nconsole.log(willItFly([3], 5)); // \u279e True"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    // Helper function to check if a number is prime\n    function isPrime(n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 === 0 || n % 3 === 0) return false;\n        for (let i = 5; i * i <= n; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    // Generate all prime numbers less than 100\n    const primes = [];\n    for (let i = 2; i < 100; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    // Check all combinations of 3 primes\n    const len = primes.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            for (let k = j + 1; k < len; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(isMultiplyPrime(30)); // True (2 * 3 * 5)\nconsole.log(isMultiplyPrime(60)); // True (2 * 3 * 10)\nconsole.log(isMultiplyPrime(100)); // False\nconsole.log(isMultiplyPrime(105)); // True (3 * 5 * 7)\nconsole.log(isMultiplyPrime(2310)); // True (2 * 3 * 5 * 7 * 11)"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    // Convert the decimal number to binary string\n    let binaryString = decimal.toString(2);\n    \n    // Add the prefix and suffix \"db\"\n    let formattedBinaryString = `db${binaryString}db`;\n    \n    return formattedBinaryString;\n}\n\n// Examples\nconsole.log(decimalToBinary(15));  // Output: \"db1111db\"\nconsole.log(decimalToBinary(32));  // Output: \"db100000db\""}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    // Early return if the string length is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n    \n    // Loop through the string and check each substring of length 3\n    for (let i = 0; i <= s.length - 3; i++) {\n        let substring = s.substring(i, i + 3);\n        // Check if all characters in the substring are distinct\n        if (substring[0] === substring[1] || substring[0] === substring[2] || substring[1] === substring[2]) {\n            return false;\n        }\n    }\n    \n    // If all substrings of length 3 are distinct, return true\n    return true;\n}\n\n// Testing the function with the given examples\nconsole.log(isHappy(\"a\"));      // False\nconsole.log(isHappy(\"aa\"));     // False\nconsole.log(isHappy(\"abcd\"));   // True\nconsole.log(isHappy(\"aabb\"));   // False\nconsole.log(isHappy(\"adb\"));    // True\nconsole.log(isHappy(\"xyy\"));    // False"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    return grades.map(gpa => {\n        if (gpa === 4.0) {\n            return 'A+';\n        } else if (gpa > 3.7) {\n            return 'A';\n        } else if (gpa > 3.3) {\n            return 'A-';\n        } else if (gpa > 3.0) {\n            return 'B+';\n        } else if (gpa > 2.7) {\n            return 'B';\n        } else if (gpa > 2.3) {\n            return 'B-';\n        } else if (gpa > 2.0) {\n            return 'C+';\n        } else if (gpa > 1.7) {\n            return 'C';\n        } else if (gpa > 1.3) {\n            return 'C-';\n        } else if (gpa > 1.0) {\n            return 'D+';\n        } else if (gpa > 0.7) {\n            return 'D';\n        } else if (gpa > 0.0) {\n            return 'D-';\n        } else { // gpa === 0.0\n            return 'E';\n        }\n    });\n}\n\n// Example usage:\nconst grades = [4.0, 3.0, 1.7, 2.0, 3.5];\nconsole.log(numericalLetterGrade(grades)); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    // Calculate the length of the string\n    const length = string.length;\n\n    // Return whether the length is a prime number\n    return isPrime(length);\n}\n\n// Test cases\nconsole.log(primeLength('Hello')); // True\nconsole.log(primeLength('abcdcba')); // True\nconsole.log(primeLength('kittens')); // True\nconsole.log(primeLength('orange')); // False"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    // Convert the number to a string to iterate over each digit\n    const strN = n.toString();\n    \n    // Initialize sum to 0\n    let sum = 0;\n    \n    // Iterate over each character in the string representation of N\n    for (let char of strN) {\n        // Convert the character back to an integer and add it to sum\n        sum += parseInt(char, 10);\n    }\n    \n    // Convert the sum to a binary string\n    const binarySum = sum.toString(2);\n    \n    // Return the binary string\n    return binarySum;\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n    // Initialize an empty array to store the coordinates\n    let coordinates = [];\n\n    // Iterate through each row in the list\n    for (let row = 0; row < lst.length; row++) {\n        // Iterate through each element in the row\n        for (let col = 0; col < lst[row].length; col++) {\n            // If the element matches x, push the coordinate (row, col) to the list\n            if (lst[row][col] === x) {\n                coordinates.push([row, col]);\n            }\n        }\n    }\n\n    // Sort the coordinates list\n    coordinates.sort((a, b) => {\n        // First, compare the rows (a[0] and b[0])\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        }\n        // If the rows are the same, compare the columns in descending order\n        return b[1] - a[1];\n    });\n\n    return coordinates;\n}\n\n// Example usage:\nconsole.log(getRow([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1));  // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(getRow([], 1));  // []\n\nconsole.log(getRow([[], [1], [1, 2, 3]], 3));  // [(2, 2)]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    // Convert the list to a set to remove duplicates\n    let uniqueElements = Array.from(new Set(lst));\n    \n    // If there are fewer than 2 unique elements, return None\n    if (uniqueElements.length < 2) {\n        return \"None\";\n    }\n    \n    // Sort the list of unique elements\n    uniqueElements.sort((a, b) => a - b);\n    \n    // Return the second smallest element\n    return uniqueElements[1];\n}\n\n// Test cases\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // Output: 2\nconsole.log(nextSmallest([])); // Output: None\nconsole.log(nextSmallest([1, 1])); // Output: None"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n    // Split the string by delimiters '.', '?', '!'\n    let sentences = s.split(/(?<=[.?!])/);\n    \n    // Initialize boredom counter\n    let boredomCount = 0;\n    \n    // Iterate through each sentence\n    for (let sentence of sentences) {\n        // Trim the sentence to remove leading and trailing whitespace\n        let trimmedSentence = sentence.trim();\n        \n        // Check if the trimmed sentence starts with \"I\"\n        if (trimmedSentence.startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n    \n    return boredomCount;\n}\n\n// Example usage\nconsole.log(isBored(\"Hello world\")); // Output: 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\nconsole.log(isBored(\"I am happy. Are you happy? Yes, I am happy!\")); // Output: 2\nconsole.log(isBored(\"I am bored. I am tired. I am sleepy.\")); // Output: 3"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction sumOfDigits(num) {\n    return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n}\n\nfunction skjkasdkd(lst) {\n    let largestPrime = -1;\n    for (const num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    return largestPrime === -1 ? 0 : sumOfDigits(largestPrime);\n}\n\n// Test cases\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])); // Output: 10\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])); // Output: 25\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])); // Output: 13\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])); // Output: 11\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21])); // Output: 3\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7])); // Output: 7"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Step 1: Check if the dictionary is empty\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    // Step 2: Initialize variables to track the case of keys\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    // Step 3: Iterate over the keys of the dictionary\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key !== key.toLowerCase()) {\n            allLowerCase = false;\n        }\n        if (key !== key.toUpperCase()) {\n            allUpperCase = false;\n        }\n    }\n\n    // Step 4: Return True if all keys are either all lower case or all upper case, else return False\n    return allLowerCase || allUpperCase;\n}\n\n// Test cases\nconsole.log(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // should return True\nconsole.log(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // should return False\nconsole.log(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // should return False\nconsole.log(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // should return False\nconsole.log(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\"})); // should return True\nconsole.log(checkDictCase({})); // should return False"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    // Parse the string to a float\n    let num = parseFloat(value);\n    \n    // Check if the number is positive or negative\n    let isPositive = num >= 0;\n    \n    // Calculate the floor and ceil values\n    let floorValue = Math.floor(num);\n    let ceilValue = Math.ceil(num);\n    \n    // Calculate the difference from the floor value\n    let diff = num - floorValue;\n    \n    // If the difference is exactly 0.5, round away from zero\n    if (diff === 0.5) {\n        return isPositive ? ceilValue : floorValue;\n    }\n    \n    // Otherwise, use the standard rounding\n    return Math.round(num);\n}\n\n// Examples\nconsole.log(closestInteger(\"10\"));    // 10\nconsole.log(closestInteger(\"15.3\"));  // 15\nconsole.log(closestInteger(\"14.5\"));  // 15\nconsole.log(closestInteger(\"-14.5\")); // -15"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let pile = [n]; // Initialize the list with the first level having 'n' stones\n    let currentStones = n; // Start with 'n' stones\n    \n    for (let i = 1; i < n; i++) { // We need 'n' levels, and the first level is already added\n        if (currentStones % 2 === 0) {\n            // If current number of stones is even, add 2 to get the next even number\n            currentStones += 2;\n        } else {\n            // If current number of stones is odd, add 2 to get the next odd number\n            currentStones += 2;\n        }\n        pile.push(currentStones); // Add the calculated number of stones to the list\n    }\n    \n    return pile;\n}\n\n// Example Usage\nconsole.log(makeAPile(3)); // Output: [3, 5, 7]\nconsole.log(makeAPile(4)); // Output: [4, 6, 8, 10]\nconsole.log(makeAPile(5)); // Output: [5, 7, 9, 11, 13]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    // Split the string based on commas or spaces\n    return s.split(/[,\\s]+/);\n}\n\n// Example usage:\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start checking from y and move downwards\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n\n    // If no even number was found\n    return -1;\n}\n\n// Example usage:\nconsole.log(chooseNum(12, 15)); // Output: 14\nconsole.log(chooseNum(13, 12)); // Output: -1\nconsole.log(chooseNum(8, 10));  // Output: 10\nconsole.log(chooseNum(5, 5));   // Output: -1 (since 5 is odd)\nconsole.log(chooseNum(2, 2));   // Output: 2 (since 2 is even)"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return -1;\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m using the arithmetic series sum formula\n    let sum = ((m - n + 1) * (n + m)) / 2;\n\n    // Step 3: Calculate the count of integers from n to m\n    let count = m - n + 1;\n\n    // Step 4: Compute the average\n    let average = sum / count;\n    \n    // Step 5: Round the average to the nearest integer\n    let roundedAverage = Math.round(average);\n    \n    // Step 6: Convert the rounded average to a binary string\n    let binaryString = \"0b\" + roundedAverage.toString(2);\n    \n    // Step 7: Return the binary string\n    return binaryString;\n}\n\n// Example Test Cases\nconsole.log(roundedAvg(1, 5));   // \"0b11\"\nconsole.log(roundedAvg(7, 5));   // -1\nconsole.log(roundedAvg(10, 20)); // \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\""}
{"task_id": "javascript/47", "language": "javascript", "completion": "function factorial(num) {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    let result = 1;\n    for (let i = 2; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nfunction sumUpTo(num) {\n    return num * (num + 1) / 2;\n}\n\nfunction f(n) {\n    const result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {  // i is even\n            result.push(factorial(i));\n        } else {            // i is odd\n            result.push(sumUpTo(i));\n        }\n    }\n    return result;\n}\n\n// Example usage:\nconsole.log(f(5));  // Output: [1, 2, 6, 24, 15]"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    function isPalindrome(num) {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\n// Example usage:\nconsole.log(evenOddPalindrome(3)); // Output: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Output: [4, 6]"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length === 0) {\n        return true;\n    }\n    \n    let n = arr.length;\n    let count = 0;\n    \n    // Count the number of points where the array transitions from higher to lower value\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n    \n    // If the array transitions from higher to lower value more than once, it's not possible to sort by shifts\n    return count <= 1;\n}\n\n// Test cases\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // True\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // False\nconsole.log(moveOneBall([])); // True\nconsole.log(moveOneBall([1, 2, 3, 4, 5])); // True\nconsole.log(moveOneBall([2, 3, 4, 5, 1])); // True"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // Count the number of odd elements in lst1\n    const oddCountInLst1 = lst1.filter(num => num % 2 !== 0).length;\n    \n    // Count the number of even elements in lst2\n    const evenCountInLst2 = lst2.filter(num => num % 2 === 0).length;\n    \n    // If the number of even elements in lst2 is greater than or equal to \n    // the number of odd elements in lst1, return \"YES\"\n    if (evenCountInLst2 >= oddCountInLst1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage:\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // Step 1: Remove all characters in c from s\n    let regex = new RegExp(`[${c}]`, 'g');\n    let resultString = s.replace(regex, '');\n\n    // Step 2: Check if the resulting string is a palindrome\n    function isPalindrome(str) {\n        let len = str.length;\n        for (let i = 0; i < len / 2; i++) {\n            if (str[i] !== str[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Step 3: Return the result string and the palindrome check result\n    return [resultString, isPalindrome(resultString)];\n}\n\n// Examples\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\")); // Output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let totalWaterUnits = 0;\n\n    // Traverse the grid and count the total number of water units (1s)\n    for (let row of grid) {\n        for (let cell of row) {\n            if (cell === 1) {\n                totalWaterUnits++;\n            }\n        }\n    }\n\n    // Calculate the number of bucket operations needed\n    // Math.ceil is used to round up to the nearest integer\n    const bucketOperations = Math.ceil(totalWaterUnits / capacity);\n\n    return bucketOperations;\n}\n\n// Example Test Cases\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    // Define a helper function to count consonants in a word\n    function countConsonants(word) {\n        const vowels = \"aeiouAEIOU\";\n        let consonantCount = 0;\n\n        for (let char of word) {\n            if (!vowels.includes(char) && /[a-zA-Z]/.test(char)) {\n                consonantCount++;\n            }\n        }\n        return consonantCount;\n    }\n\n    // Split the input string into words\n    let words = s.split(' ');\n\n    // Filter words that have exactly n consonants\n    let result = words.filter(word => countConsonants(word) === n);\n\n    return result;\n}\n\n// Examples\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Check if k is 0, return an empty array in that case\n    if (k === 0) return [];\n    \n    // Sort the array in ascending order\n    arr.sort((a, b) => a - b);\n    \n    // Extract the last k elements from the sorted array\n    const result = arr.slice(-k);\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2));  // Output: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(addElements(arr, k));  // Output: 24 (21 + 3)"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    // Get the start and end of the intersection interval\n    const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    // If there is no intersection\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    const length = end - start + 1;\n\n    // Check if the length is a prime number\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\n\n// Example usage:\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    // Initialize an array to store the sequence up to n\n    const tribonacciSequence = [];\n    \n    // Function to compute the tribonacci value for index i\n    function computeTri(i) {\n        if (i === 1) return 3;\n        if (i % 2 === 0) return 1 + i / 2;\n        \n        // For odd indices where i > 1\n        if (i - 1 >= 0 && i - 2 >= 0 && (i + 1) <= n) {\n            return tribonacciSequence[i - 1] + tribonacciSequence[i - 2] + computeTri(i + 1);\n        }\n        \n        return 0; // Default case, should not reach here\n    }\n    \n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            tribonacciSequence.push(1);\n        } else {\n            tribonacciSequence.push(computeTri(i));\n        }\n    }\n    \n    return tribonacciSequence;\n}\n\n// Example usage\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]\nconsole.log(tri(4)); // Output: [1, 3, 2, 8, 3]"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    let product = 1;\n    let hasOddDigit = false;\n\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return hasOddDigit ? product : 0;\n}\n\n// Test cases\nconsole.log(digits(1));     // Output: 1\nconsole.log(digits(4));     // Output: 0\nconsole.log(digits(235));   // Output: 15\nconsole.log(digits(2468));  // Output: 0\nconsole.log(digits(13579)); // Output: 945"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n    let stack = [];\n    let hasNested = false;\n\n    for (let char of string) {\n        if (char === '[') {\n            stack.push(char);\n        } else if (char === ']') {\n            if (stack.length > 0) {\n                stack.pop();\n                if (stack.length > 0) {\n                    hasNested = true;\n                }\n            } else {\n                // More closing brackets than opening brackets\n                return false;\n            }\n        }\n    }\n\n    // If stack is not empty, there are unmatched opening brackets\n    return hasNested && stack.length === 0;\n}\n\n// Test cases\nconsole.log(isNested('[[]]')); // \u279e True\nconsole.log(isNested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(isNested('[][]')); // \u279e False\nconsole.log(isNested('[]')); // \u279e False\nconsole.log(isNested('[[][]]')); // \u279e True\nconsole.log(isNested('[[]][[')); // \u279e True"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Step 1: Round each element to the nearest upper integer using Math.ceil\n    const roundedList = lst.map(Math.ceil);\n\n    // Step 2: Square each rounded number\n    const squaredList = roundedList.map(num => num * num);\n\n    // Step 3: Sum all the squared numbers\n    const sum = squaredList.reduce((acc, num) => acc + num, 0);\n\n    // Step 4: Return the resulting sum\n    return sum;\n}\n\n// Example usage:\nconsole.log(sumSquares([1, 2, 3]));         // Output: 14\nconsole.log(sumSquares([1, 4, 9]));         // Output: 98\nconsole.log(sumSquares([1, 3, 5, 7]));      // Output: 84\nconsole.log(sumSquares([1.4, 4.2, 0]));     // Output: 29\nconsole.log(sumSquares([-2.4, 1, 1]));      // Output: 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Trim any whitespace from the end of the string\n    txt = txt.trim();\n\n    // Check if the string is empty after trimming\n    if (txt === \"\") {\n        return false;\n    }\n\n    // Get the last character of the string\n    let lastChar = txt[txt.length - 1];\n\n    // Check if the last character is an alphabetical letter\n    if (/[a-zA-Z]/.test(lastChar)) {\n        // Split the string by spaces\n        let words = txt.split(\" \");\n\n        // If the last word length is 1, then the last character is not part of a word\n        if (words[words.length - 1].length === 1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"\")); // \u279e False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    // Iterate through the array from the start to the second last element\n    for (let i = arr.length - 1; i > 0; i--) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Return the current index if the condition is met\n            return i;\n        }\n    }\n    // If no such element is found, return -1\n    return -1;\n}\n\n// Examples\nconsole.log(canArrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(canArrange([1, 2, 3])); // Output: -1\nconsole.log(canArrange([5, 4, 3, 2, 1])); // Output: 4\nconsole.log(canArrange([10, 20, 30, 25, 35])); // Output: 3\nconsole.log(canArrange([1])); // Output: -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    // Initialize the variables for the largest negative and smallest positive integers\n    let largestNegative = null;\n    let smallestPositive = null;\n\n    // Iterate through the list\n    for (let num of lst) {\n        if (num < 0) {\n            // Update the largestNegative if the current number is more negative\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            // Update the smallestPositive if the current number is less positive\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    // Return the tuple with the results\n    return [largestNegative, smallestPositive];\n}\n\n// Test cases\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));  // Output: [None, 1]\nconsole.log(largestSmallestIntegers([]));                  // Output: [None, None]\nconsole.log(largestSmallestIntegers([0]));                 // Output: [None, None]\nconsole.log(largestSmallestIntegers([-3, -2, -1, 0, 1, 2, 3]));  // Output: [-1, 1]\nconsole.log(largestSmallestIntegers([-5, -10, -3, 2, 8, 0, 5]));  // Output: [-3, 2]"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function factorial(num) {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    let result = 1;\n    for (let i = num; i > 1; i--) {\n        result *= i;\n    }\n    return result;\n}\n\nfunction specialFactorial(n) {\n    if (n <= 0) {\n        throw new Error(\"Input must be a positive integer.\");\n    }\n    \n    let specialFact = 1;\n    for (let i = 1; i <= n; i++) {\n        specialFact *= factorial(i);\n    }\n    \n    return specialFact;\n}\n\n// Example usage:\nconsole.log(specialFactorial(4)); // Output: 288"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    // Split the sentence into words\n    const words = sentence.split(' ');\n\n    // Filter words whose length is a prime number\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n\n    // Join the filtered words back into a string\n    return primeLengthWords.join(' ');\n}\n\n// Test cases\nconsole.log(wordsInSentence(\"This is a test\")); // Expected output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Expected output: \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    // Helper function to parse the fraction string and return numerator and denominator as integers\n    function parseFraction(fraction) {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return { numerator, denominator };\n    }\n\n    // Parse the fractions\n    let { numerator: xNum, denominator: xDen } = parseFraction(x);\n    let { numerator: nNum, denominator: nDen } = parseFraction(n);\n\n    // Compute the product of the fractions\n    let productNumerator = xNum * nNum;\n    let productDenominator = xDen * nDen;\n\n    // Check if the result is a whole number\n    return productNumerator % productDenominator === 0;\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    // Helper function to calculate the sum of the digits of a number\n    function sumOfDigits(num) {\n        // Convert number to string, replace '-' sign if any, and split into individual characters\n        return Math.abs(num).toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    }\n\n    // Use the Array.prototype.sort method with a custom comparator\n    return nums\n        .map((num, index) => ({ num, index })) // Create an array of objects with number and its original index\n        .sort((a, b) => {\n            // Compare sum of digits first\n            const sumA = sumOfDigits(a.num);\n            const sumB = sumOfDigits(b.num);\n            if (sumA !== sumB) {\n                return sumA - sumB;\n            }\n            // If sum of digits is equal, maintain the original order\n            return a.index - b.index;\n        })\n        .map(item => item.num); // Extract the sorted numbers\n}\n\n// Example usage:\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // Output: []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    // Helper function to check if a digit is odd\n    function isOdd(digit) {\n        return digit % 2 !== 0;\n    }\n\n    // Helper function to get the first and last digit of a number\n    function getFirstAndLastDigits(num) {\n        let str = Math.abs(num).toString();\n        let firstDigit = parseInt(str[0]);\n        let lastDigit = parseInt(str[str.length - 1]);\n        return [firstDigit, lastDigit];\n    }\n\n    let count = 0;\n\n    for (let num of nums) {\n        if (num > 10) {\n            let [firstDigit, lastDigit] = getFirstAndLastDigits(num);\n            if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                count += 1;\n            }\n        }\n    }\n\n    return count;\n}\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    if (n < 3) {\n        // If n is less than 3, there can't be any valid triples.\n        return 0;\n    }\n\n    const a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    let count0 = 0, count1 = 0, count2 = 0;\n\n    // Count the remainder of each element when divided by 3\n    for (let i = 0; i < n; i++) {\n        const remainder = a[i] % 3;\n        if (remainder === 0) {\n            count0++;\n        } else if (remainder === 1) {\n            count1++;\n        } else {\n            count2++;\n        }\n    }\n\n    // Calculate the number of valid triples\n    let validTriples = 0;\n\n    // Case 1: All three elements have remainder 0\n    if (count0 >= 3) {\n        validTriples += count0 * (count0 - 1) * (count0 - 2) / 6;\n    }\n\n    // Case 2: All three elements have remainder 1\n    if (count1 >= 3) {\n        validTriples += count1 * (count1 - 1) * (count1 - 2) / 6;\n    }\n\n    // Case 3: All three elements have remainder 2\n    if (count2 >= 3) {\n        validTriples += count2 * (count2 - 1) * (count2 - 2) / 6;\n    }\n\n    // Case 4: One element with remainder 0, one with remainder 1, one with remainder 2\n    validTriples += count0 * count1 * count2;\n\n    return validTriples;\n}\n\n// Example\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Get the indices of the planets\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // Return an empty tuple if either planet name is incorrect\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Get the range between the indices\n    const startIndex = Math.min(index1, index2);\n    const endIndex = Math.max(index1, index2);\n    \n    // Slice the array to get the planets in between\n    const result = planets.slice(startIndex + 1, endIndex);\n    \n    return result;\n}\n\n// Test cases\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf(\"Pluto\", \"Earth\")); // ==> []"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(n) {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    if (n <= 3) return true;  // 2 and 3 are prime numbers\n\n    // Eliminate even numbers and multiples of 3\n    if (n % 2 === 0 || n % 3 === 0) return false;\n\n    // Check for factors from 5 to sqrt(n)\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Examples:\nconsole.log(xOrY(7, 34, 12)); // Output: 34\nconsole.log(xOrY(15, 8, 5));  // Output: 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    // Filter out non-integer or negative numbers\n    const validNumbers = lst.filter(num => Number.isInteger(num) && num >= 0);\n    \n    // Filter out even numbers\n    const oddNumbers = validNumbers.filter(num => num % 2 !== 0);\n    \n    // Compute the sum of squares of odd numbers\n    const sumOfSquares = oddNumbers.reduce((sum, num) => sum + num ** 2, 0);\n    \n    return sumOfSquares;\n}\n\n// Test cases\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([9, -2])); // 81\nconsole.log(doubleTheDifference([0])); // 0"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let maxStrength = -Infinity;\n    let strongestExtension = '';\n    \n    for (let ext of extensions) {\n        let capCount = 0;\n        let smCount = 0;\n        \n        for (let char of ext) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n        \n        let strength = capCount - smCount;\n        \n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = ext;\n        }\n    }\n    \n    return `${classname}.${strongestExtension}`;\n}\n\n// Example usage\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: 'Slices.SErviNGSliCes'\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: 'my_class.AA'"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Helper function to generate all rotations of the string\n    function getRotations(str) {\n        let rotations = [];\n        for (let i = 0; i < str.length; i++) {\n            let rotation = str.slice(i) + str.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    }\n\n    // Generate all rotations of the second word\n    let rotations = getRotations(b);\n\n    // Check if any rotation is a substring of the first word\n    for (let rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n    \n    // If no rotation is found, return false\n    return false;\n}\n\n// Test cases\nconsole.log(cycpatternCheck(\"abcd\", \"abd\")); // False\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); // True\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); // False\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); // True\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); // False\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); // True"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    // Define the Roman numeral mappings\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n\n    // Initialize the result string\n    let result = '';\n\n    // Loop through each value and numeral\n    for (let i = 0; i < values.length; i++) {\n        // While the number is greater than or equal to the value\n        while (number >= values[i]) {\n            // Append the corresponding numeral to the result\n            result += numerals[i];\n            // Subtract the value from the number\n            number -= values[i];\n        }\n    }\n\n    // Return the result in lowercase\n    return result.toLowerCase();\n}\n\n// Example usage:\nconsole.log(intToMiniRoman(19));  // Outputs: 'xix'\nconsole.log(intToMiniRoman(152)); // Outputs: 'clii'\nconsole.log(intToMiniRoman(426)); // Outputs: 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // Sort the sides so that the largest side comes last\n    let sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Apply the Pythagorean Theorem to check for a right-angled triangle\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\n// Example usage:\nconsole.log(rightAngleTriangle(3, 4, 5)); // true\nconsole.log(rightAngleTriangle(1, 2, 3)); // false"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    // Regular expression to check if the string contains any letters\n    const containsLetters = /[a-zA-Z]/.test(s);\n    \n    if (containsLetters) {\n        // Reverse the case of each letter\n        let result = '';\n        for (let i = 0; i < s.length; i++) {\n            let char = s[i];\n            if (char >= 'a' && char <= 'z') {\n                result += char.toUpperCase();\n            } else if (char >= 'A' && char <= 'Z') {\n                result += char.toLowerCase();\n            } else {\n                result += char;\n            }\n        }\n        return result;\n    } else {\n        // Reverse the entire string\n        return s.split('').reverse().join('');\n    }\n}\n\n// Test cases\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n    if (text === '') {\n        return \"none\";\n    }\n    \n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\n// Example usage:\nconsole.log(stringToMd5('Hello world')); // Output: 3e25960a79dbc69b674cd4ec67a72c62\nconsole.log(stringToMd5('')); // Output: none"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Ensure a is the minimum and b is the maximum\n    const start = Math.min(a, b);\n    const end = Math.max(a, b);\n    \n    // Array to hold the even digits\n    const evenDigits = [];\n    \n    // Iterate through the range from start to end\n    for (let i = start; i <= end; i++) {\n        // Check if the number is a single digit and even\n        if (i < 10 && i % 2 === 0) {\n            evenDigits.push(i);\n        }\n    }\n    \n    return evenDigits;\n}\n\n// Test cases\nconsole.log(generateIntegers(2, 8)); // Output: [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // Output: [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // Output: []"}

{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(below_zero([1, 2, 3]))  # Output: False\n    print(below_zero([1, 2, -4, 5]))  # Output: True"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    Args:\n    numbers (List[int]): List of integers.\n    \n    Returns:\n    Tuple[int, int]: A tuple containing the sum and the product of the integers.\n    \n    Examples:\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    \n    return (total_sum, total_product)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure the input strings are of the same length\n    assert len(a) == len(b), \"Input strings must be of the same length\"\n    \n    # Initialize the result string\n    result = []\n    \n    # Iterate through each pair of characters\n    for bit_a, bit_b in zip(a, b):\n        # Perform XOR operation and append the result to the result list\n        result.append(str(int(bit_a) ^ int(bit_b)))\n        \n    # Join the result list into a single string and return it\n    return ''.join(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    \n    for s in strings[1:]:\n        if len(s) > len(longest_string):\n            longest_string = s\n    \n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Mapping from string representations to integer values\n    num_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping from integer values to string representations\n    value_to_num = {v: k for k, v in num_to_value.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert words to their corresponding integer values\n    values = [num_to_value[word] for word in words]\n    \n    # Sort the integer values\n    sorted_values = sorted(values)\n    \n    # Convert sorted integer values back to their string representations\n    sorted_words = [value_to_num[value] for value in sorted_values]\n    \n    # Join the sorted string representations into a single space-delimited string\n    return ' '.join(sorted_words)\n\n# Example usage:\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        raise ValueError(\"All elements in the list are the same. Cannot rescale.\")\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n# Example usage:\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n# Example usage\nprint(flip_case('Hello'))  # Output will be 'hELLO'"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True  # 2 is the only even prime number\n    if n % 2 == 0:\n        return False  # exclude other even numbers\n\n    # Check odd factors from 3 to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # Initialize the first two Fibonacci numbers\n    a, b = 1, 1\n    \n    # Counter for how many prime Fibonacci numbers we've found\n    count = 0\n    \n    while True:\n        # Generate the next Fibonacci number\n        a, b = b, a + b\n        \n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n\n# For testing purposes\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Length of the list\n    n = len(l)\n    \n    # If there are less than 3 elements, return False\n    if n < 3:\n        return False\n    \n    # Sort the list to use two-pointer technique\n    l.sort()\n    \n    # Iterate over the list\n    for i in range(n - 2):\n        # Check for the current element and use two pointers for the rest of the list\n        target = -l[i]\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = l[left] + l[right]\n            \n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Test examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # Initialize the first four values of the sequence\n    fib4_values = [0, 0, 2, 0]\n\n    # Compute the sequence iteratively from 4 to n\n    for i in range(4, n + 1):\n        next_value = sum(fib4_values)  # Sum of the last four values\n        # Update the list with the new value, dropping the oldest one\n        fib4_values = fib4_values[1:] + [next_value]\n\n    return fib4_values[-1]\n\n# Testing the function with the given examples\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return None  # Handle empty list case\n    \n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Even number of elements\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0\n    else:\n        # Odd number of elements\n        return l_sorted[mid]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to remove duplicates and find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set to a sorted list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Step 1: Remove all factors of 2\n    while n % 2 == 0:\n        n //= 2\n        largest = 2\n    \n    # Step 2: Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n            largest = factor\n        factor += 2\n    \n    # Step 3: If n is still greater than 1, it is a prime number\n    if n > 1:\n        largest = n\n    \n    return largest\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests\n    print(largest_prime_factor(13195))  # Output should be 29\n    print(largest_prime_factor(2048))   # Output should be 2"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\n# Test cases\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100)) # Output: 5050\nprint(sum_to_n(5))   # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))   # Output: 1"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The derivative of a constant (first term) is zero, so we skip the first term\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Testing the function with the given examples\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # [2, 6]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize base cases\n    fibfib_values = [0, 0, 1]\n\n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        next_value = fibfib_values[-1] + fibfib_values[-2] + fibfib_values[-3]\n        fibfib_values.append(next_value)\n\n    return fibfib_values[n]\n\n# Example cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n\n    # Normalize the string to lower case\n    s = s.lower()\n\n    for idx, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and idx == len(s) - 1:\n            count += 1\n\n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    print(vowels_count(\"abcde\"))          # Expected output: 2\n    print(vowels_count(\"ACEDY\"))          # Expected output: 3\n    print(vowels_count(\"crypt\"))          # Expected output: 1\n    print(vowels_count(\"brrr\"))           # Expected output: 0\n    print(vowels_count(\"sky\"))            # Expected output: 1\n    print(vowels_count(\"rhythm\"))         # Expected output: 0\n    print(vowels_count(\"syzygy\"))         # Expected output: 1\n    print(vowels_count(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))  # Expected output: 6\n    print(vowels_count(\"abcdefghijklmnopqrstuvwxyz\"))  # Expected output: 6\n    print(vowels_count(\"AEIOUY\"))         # Expected output: 6\n    print(vowels_count(\"aeiouy\"))         # Expected output: 6\n    print(vowels_count(\"AeIoUy\"))         # Expected output: 6\n    print(vowels_count(\"\"))               # Expected output: 0"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    from collections import Counter\n\n    # Step 1: Count the frequencies of each number in the list\n    frequency = Counter(lst)\n    \n    # Step 2: Initialize the result as -1 (in case no number satisfies the condition)\n    result = -1\n    \n    # Step 3: Iterate through the frequency dictionary\n    for num, freq in frequency.items():\n        if freq >= num:\n            result = max(result, num)\n    \n    # Step 4: Return the result\n    return result\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Expected output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Expected output: 3\nprint(search([5, 5, 4, 4, 4]))  # Expected output: -1"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # If the sides do not form a valid triangle, return -1\n        return -1\n\n# Example usage:\nprint(triangle_area(3, 4, 5))  # Output should be 6.00\nprint(triangle_area(1, 2, 10)) # Output should be -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    is_palindromic = (q == q[::-1])\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    weight_ok = (total_weight <= w)\n    \n    # The object will fly if both conditions are met\n    return is_palindromic and weight_ok\n\n# Test cases\nprint(will_it_fly([1, 2], 5))  # False\nprint(will_it_fly([3, 2, 3], 1))  # False\nprint(will_it_fly([3, 2, 3], 9))  # True\nprint(will_it_fly([3], 5))  # True"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    # List of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True (2 * 3 * 5)\nprint(is_multiply_prime(60))  # True (2 * 3 * 5)\nprint(is_multiply_prime(100)) # False (100 is not less than 100)\nprint(is_multiply_prime(105)) # True (3 * 5 * 7)\nprint(is_multiply_prime(50))  # False (50 is not a product of exactly three primes)"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    # Format the binary string with 'db' at the beginning and end\n    formatted_binary_str = f\"db{binary_str}db\"\n    return formatted_binary_str\n\n# Examples\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string with a window of 3 characters\n    for i in range(len(s) - 2):\n        # Extract three consecutive characters\n        triplet = s[i:i+3]\n        \n        # Check if all three characters are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If all sets of three consecutive characters are distinct, the string is happy\n    return True\n\n# Test cases\nprint(is_happy('a'))      # False\nprint(is_happy('aa'))     # False\nprint(is_happy('abcd'))   # True\nprint(is_happy('aabb'))   # False\nprint(is_happy('adb'))    # True\nprint(is_happy('xyy'))    # False"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    def gpa_to_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    return [gpa_to_letter_grade(gpa) for gpa in grades]\n\n# Example usage:\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to determine if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    \"\"\"Function to determine if the length of the string is a prime number.\"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Examples\nprint(prime_length('Hello'))     # Output: True\nprint(prime_length('abcdcba'))   # Output: True\nprint(prime_length('kittens'))   # Output: True\nprint(prime_length('orange'))    # Output: False"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Step 1: Convert N to string and extract each digit\n    digits = [int(digit) for digit in str(N)]\n    \n    # Step 2: Sum the digits\n    total_sum = sum(digits)\n    \n    # Step 3: Convert the sum to binary\n    binary_representation = bin(total_sum)[2:]  # bin() returns a string starting with '0b'\n    \n    # Step 4: Return the binary string\n    return binary_representation\n\n# Example usage:\nprint(solve(1000))  # Output should be \"1\"\nprint(solve(150))   # Output should be \"110\"\nprint(solve(147))   # Output should be \"1100\""}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    \n    # Traverse the 2D list\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    \n    # Sort the results first by rows in ascending order, then by columns in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result\n\n# Example usage:\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted_lst = sorted(set(lst))\n    \n    # Check if we have at least two distinct elements\n    if len(unique_sorted_lst) < 2:\n        return None\n    \n    # Return the 2nd smallest element\n    return unique_sorted_lst[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))               # Output: None\nprint(next_smallest([1, 1]))           # Output: None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    \n    # Split the string based on the delimiters '.' '?' '!'\n    sentences = re.split(r'[.?!]', S)\n    \n    # Trim and count sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n    \n    return boredom_count\n\n# Example usages\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    p = 3\n    while p * p <= n:\n        if n % p == 0:\n            return False\n        p += 2\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    # Find all prime numbers in the list\n    primes = [x for x in lst if is_prime(x)]\n    \n    if not primes:\n        return 0\n    \n    # Find the largest prime number\n    largest_prime = max(primes)\n    \n    # Return the sum of the digits of the largest prime number\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    # If the dictionary is empty, return False\n    if not dictionary:\n        return False\n\n    # Separate keys into those that are strings and those that aren't\n    string_keys = [key for key in dictionary if isinstance(key, str)]\n\n    # If there are any non-string keys, return False\n    if len(string_keys) != len(dictionary):\n        return False\n\n    # Check if all keys are in lower case\n    all_lower = all(key.islower() for key in string_keys)\n\n    # Check if all keys are in upper case\n    all_upper = all(key.isupper() for key in string_keys)\n\n    # Return True if either all are lower case or all are upper case\n    return all_lower or all_upper\n\n# Examples\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))       # Should return True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # Should return False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))     # Should return False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # Should return False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))     # Should return True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    # Convert the string to a float\n    num = float(value)\n    \n    # Determine the integer part and the fractional part\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    \n    # Check if the number is exactly halfway between two integers\n    if abs(fractional_part) == 0.5:\n        # Round away from zero\n        if num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n    else:\n        # Standard rounding\n        return round(num)\n\n# Examples\nprint(closest_integer(\"10\"))    # 10\nprint(closest_integer(\"15.3\"))  # 15\nprint(closest_integer(\"14.5\"))  # 15\nprint(closest_integer(\"-14.5\")) # -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    levels = [n]\n    current_stones = n\n    \n    for _ in range(n - 1):\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n        levels.append(current_stones)\n    \n    return levels\n\n# Testing the example cases\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "python/44", "language": "python", "completion": "import re\n\ndef words_string(s):\n    # Define a regular expression pattern that matches commas or spaces\n    pattern = r'[,\\s]+'\n    # Split the string based on the pattern\n    words = re.split(pattern, s)\n    # Filter out any empty strings that might result from consecutive separators\n    return [word for word in words if word]\n\n# Examples:\nprint(words_string(\"Hi, my name is John\"))        # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    # Check if the range is valid\n    if x > y:\n        return -1\n    \n    # Iterate from y to x (inclusive)\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:  # Check if the number is even\n            return num\n    \n    # If no even number is found, return -1\n    return -1\n\n# Test cases\nprint(choose_num(12, 15))  # Should print 14\nprint(choose_num(13, 12))  # Should print -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of integers from n to m\n    count = m - n + 1\n    \n    # Calculate the average and round it to the nearest integer\n    avg = round(total_sum / count)\n    \n    # Convert the rounded average to binary\n    binary_avg = bin(avg)\n    \n    return binary_avg\n\n# Example test cases\nprint(rounded_avg(1, 5))    # Output: \"0b11\"\nprint(rounded_avg(7, 5))    # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "import math\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # i is even\n            result.append(math.factorial(i))\n        else:  # i is odd\n            result.append(i * (i + 1) // 2)\n    return result\n\n# Example usage\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def is_sorted(arr):\n    \"\"\"Helper function to check if array is sorted in non-decreasing order.\"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\ndef move_one_ball(arr):\n    \"\"\"Function to determine if the array can be sorted by performing right shift operations.\"\"\"\n    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n):\n        # Perform right shift i times\n        shifted_arr = arr[-i:] + arr[:-i]\n        if is_sorted(shifted_arr):\n            return True\n        \n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False\nprint(move_one_ball([]))               # True"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Step 1: Find the count of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Step 2: Find the count of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # Step 3: If the number of even numbers in lst2 is at least the number of odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Expected output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Expected output: \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Step 1: Remove characters from `s` that are in `c`\n    result = ''.join(char for char in s if char not in c)\n\n    # Step 2: Check if the resulting string is a palindrome\n    is_palindrome = (result == result[::-1])\n\n    # Step 3: Return the result\n    return (result, is_palindrome)\n\n# Example usage:\nprint(reverse_delete(\"abcde\", \"ae\"))      # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))      # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "python/52", "language": "python", "completion": "import math\n\ndef max_fill(grid, capacity):\n    # Calculate the total amount of water in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times the bucket needs to be lowered\n    bucket_uses = math.ceil(total_water / capacity)\n    \n    return bucket_uses\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    # Define a set of vowels\n    vowels = set('aeiouAEIOU')\n    \n    # Split the string into words\n    words = s.split()\n    \n    # List to hold words with exactly n consonants\n    result = []\n    \n    # Process each word\n    for word in words:\n        consonant_count = 0\n        \n        # Count consonants in the word\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # Check if the word has exactly n consonants\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n# Example usage\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # ==> []\nprint(select_words(\"Hello world\", 4))             # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # ==> [\"Uncle\"]"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr_sorted_desc = sorted(arr, reverse=True)\n    \n    # Take the first k elements\n    top_k_elements = arr_sorted_desc[:k]\n    \n    # Sort the k elements in ascending order\n    top_k_elements_sorted = sorted(top_k_elements)\n    \n    return top_k_elements_sorted\n\n# Example usage:\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Initialize the sum to 0\n    result = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if -99 <= arr[i] <= 99:\n            result += arr[i]\n    \n    return result\n\n# Example usage:\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24 (21 + 3)"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find intersection\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n    \n    # Check if there is an intersection\n    if start_intersection > end_intersection:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end_intersection - start_intersection + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    # Initialize a list to store the Tribonacci sequence\n    tribonacci_sequence = [0] * (n + 1)\n    \n    # Define the base cases\n    if n >= 1:\n        tribonacci_sequence[1] = 3\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:  # i is even\n            tribonacci_sequence[i] = 1 + i / 2\n        else:  # i is odd\n            tribonacci_sequence[i] = (tribonacci_sequence[i - 1] \n                                      + tribonacci_sequence[i - 2] \n                                      + tribonacci_sequence[i + 1] if i + 1 <= n else 0)\n\n    return tribonacci_sequence\n\n# Test the function with an example\nprint(tri(3))  # Output: [0, 3, 2, 8]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    has_odd = False  # Flag to check if there is at least one odd digit\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Move to the next digit\n    \n    return product if has_odd else 0\n\n# Test cases\nprint(digits(1))    # Output: 1\nprint(digits(4))    # Output: 0\nprint(digits(235))  # Output: 15"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    depth = 0\n    max_depth = 0\n    \n    for char in string:\n        if char == '[':\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        elif char == ']':\n            depth -= 1\n        # If depth goes negative, it's invalid but we are not asked to validate the entire sequence.\n    \n    return max_depth > 1\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        # Round up the number to the nearest integer\n        rounded_num = math.ceil(num)\n        # Square the rounded number\n        squared_num = rounded_num ** 2\n        # Add the squared number to the total sum\n        total += squared_num\n    return total\n\n# Examples\nprint(sum_squares([1, 2, 3]))       # Output: 14\nprint(sum_squares([1, 4, 9]))       # Output: 98\nprint(sum_squares([1, 3, 5, 7]))    # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))   # Output: 29\nprint(sum_squares([-2.4, 1, 1]))    # Output: 6"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Strip trailing whitespace from the input string\n    stripped_txt = txt.rstrip()\n    \n    # Check if the stripped string is empty\n    if not stripped_txt:\n        return False\n    \n    # Check if the last character is an alphabetical character\n    if stripped_txt[-1].isalpha():\n        # If the last character is the only character or preceded by a space, return True\n        if len(stripped_txt) == 1 or stripped_txt[-2] == ' ':\n            return True\n    \n    return False\n\n# Examples\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Should return 3\nprint(can_arrange([1, 2, 3]))        # Should return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n\n# Examples\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))                  # (None, None)\nprint(largest_smallest_integers([0]))                 # (None, None)\nprint(largest_smallest_integers([-3, -1, -4, 2, 4, 1, 3]))  # (-1, 1)"}
{"task_id": "python/64", "language": "python", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a given integer n.\"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n\n# Example usage:\nprint(special_factorial(4))  # Output should be 288"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"Function to return words with prime lengths from the sentence.\"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n\n# Example usage:\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Helper function to parse a fraction string \"numerator/denominator\"\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n    \n    # Parse both fractions\n    num1, denom1 = parse_fraction(x)\n    num2, denom2 = parse_fraction(n)\n    \n    # Multiply the fractions: (num1/denom1) * (num2/denom2) = (num1 * num2) / (denom1 * denom2)\n    result_num = num1 * num2\n    result_denom = denom1 * denom2\n    \n    # Check if the result is a whole number\n    return result_num % result_denom == 0\n\n# Test the function with the given examples\nprint(simplify(\"1/5\", \"5/1\"))  # Expected output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Expected output: False\nprint(simplify(\"7/10\", \"10/2\"))  # Expected output: False"}
{"task_id": "python/67", "language": "python", "completion": "def digit_sum(n):\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: digit_sum(x))\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []\nprint(order_by_points([123, 45, 6, 789]))  # Output: [6, 123, 45, 789]\nprint(order_by_points([0, 5, -5, 10, -10]))  # Output: [0, 10, -10, 5, -5]"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            if is_odd_digit(num_str[0]) and is_odd_digit(num_str[-1]):\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize the count of valid triples\n    count = 0\n    \n    # Iterate over all possible triples (i, j, k) where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of a[i], a[j], and a[k] is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\n# Example usage:\nprint(get_max_triples(5))  # Output: 1"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # List of planets in order from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Validate the input planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of the input planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for proper slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Return the planets between the two indices\n    return tuple(planets[index1 + 1:index2])\n\n# Examples\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "python/71", "language": "python", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True  # 2 and 3 are prime numbers\n    if n % 2 == 0 or n % 3 == 0:\n        return False  # Eliminate multiples of 2 and 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Example usage:\nprint(x_or_y(7, 34, 12))  # Should return 34\nprint(x_or_y(15, 8, 5))   # Should return 5"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2\n    \n    return result"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n    \n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        strength = get_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    # Generate all rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be in the range 1 to 1000\")\n\n    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n\n    return ''.join(result).lower()\n\n# Test cases\nprint(int_to_mini_roman(19))  # Expected 'xix'\nprint(int_to_mini_roman(152))  # Expected 'clii'\nprint(int_to_mini_roman(426))  # Expected 'cdxxvi'"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Identify the hypotenuse (the longest side)\n    hypotenuse = max(a, b, c)\n    \n    # Identify the other two sides\n    if hypotenuse == a:\n        side1, side2 = b, c\n    elif hypotenuse == b:\n        side1, side2 = a, c\n    else:\n        side1, side2 = a, b\n    \n    # Check the Pythagorean theorem\n    return hypotenuse**2 == side1**2 + side2**2\n\n# Example Usage\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    # Check if there are any letters in the string\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # If the string contains letters, reverse the case of each letter\n        result = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # If the string contains no letters, reverse the entire string\n        result = s[::-1]\n    \n    return result\n\n# Test cases\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Determine the smaller and larger value\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Generate the list of even numbers within the range [start, end]\n    even_numbers = [num for num in range(start, end + 1) if num % 2 == 0]\n    \n    return even_numbers\n\n# Examples\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []"}

{"task_id": "java/0", "language": "java", "completion": "import java.util.List;\n\nclass BelowZero {\n    /**\n     * Determines if the account balance falls below zero at any point given\n     * a list of deposit and withdrawal operations.\n     * \n     * @param operations List of deposit and withdrawal operations\n     * @return True if the balance falls below zero, otherwise False\n     */\n    public static Boolean belowZero(List<Integer> operations) {\n        int balance = 0; // Initial balance\n        \n        // Iterate through each operation\n        for (Integer operation : operations) {\n            balance += operation; // Update balance\n            \n            // Check if balance falls below zero\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        // If the loop completes without balance falling below zero, return False\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Example test cases\n        System.out.println(belowZero(Arrays.asList(1, 2, 3))); // Expected output: False\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5))); // Expected output: True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\n     * Eine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        // Initialize sum and product\n        int sum = 0;\n        int product = 1;\n\n        // Iterate through the list of numbers\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int num = (Integer) number;\n                sum += num;\n                product *= num;\n            }\n        }\n\n        // Return the sum and product as a list\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sumProduct(Arrays.asList())); // Output: [0, 1]\n        System.out.println(sumProduct(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n    /**\n     * Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\n     * F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n        // Ensure both strings have the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Both strings must have the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Perform XOR operation on each pair of characters\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            // XOR operation: if both characters are the same, result is '0'; otherwise, result is '1'\n            if (charA == charB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test the stringXor method\n        System.out.println(stringXor(\"010\", \"110\")); // Output: 100\n        System.out.println(stringXor(\"1111\", \"0000\")); // Output: 1111\n        System.out.println(stringXor(\"101010\", \"010101\")); // Output: 111111\n        // Uncomment the line below to see the exception\n        // System.out.println(stringXor(\"101\", \"01010\")); // Throws IllegalArgumentException\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.List;\n\nclass Longest {\n    /**\n     * Aus einer Liste von Zeichenketten soll die l\u00e4ngste zur\u00fcckgegeben werden. Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zur\u00fcckgegeben werden. Falls die Eingabeliste leer ist, soll null zur\u00fcckgegeben werden.\n     * @param strings Liste von Zeichenketten\n     * @return Die l\u00e4ngste Zeichenkette oder null, wenn die Liste leer ist\n     */\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        String longestString = strings.get(0);\n        \n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return longestString;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(longest(Arrays.asList())); // Output: null\n        System.out.println(longest(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: 'a'\n        System.out.println(longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Output: 'ccc'\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "class GreatestCommonDivisor {\n    /**\n     * \n     * Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n        // Ensure the numbers are non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        // Implementing the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        \n        return a;\n    }\n\n    public static void main(String[] args) {\n        // Test cases to demonstrate the function\n        System.out.println(greatestCommonDivisor(3, 5));  // Output: 1\n        System.out.println(greatestCommonDivisor(25, 15)); // Output: 5\n        System.out.println(greatestCommonDivisor(100, 25)); // Output: 25\n        System.out.println(greatestCommonDivisor(27, 18)); // Output: 9\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    /**\n     * Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n     * G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n     * Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n     * >>> sort_numbers('drei eins f\u00fcnf')\n     * 'eins drei f\u00fcnf'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n        // Mapping from German number words to their corresponding integer values.\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"null\", 0);\n        numberMap.put(\"eins\", 1);\n        numberMap.put(\"zwei\", 2);\n        numberMap.put(\"drei\", 3);\n        numberMap.put(\"vier\", 4);\n        numberMap.put(\"f\u00fcnf\", 5);\n        numberMap.put(\"sechs\", 6);\n        numberMap.put(\"sieben\", 7);\n        numberMap.put(\"acht\", 8);\n        numberMap.put(\"neun\", 9);\n\n        // Split the input string into individual number words.\n        String[] numberWords = numbers.split(\"\\\\s+\");\n\n        // Sort the number words based on their integer values.\n        Arrays.sort(numberWords, Comparator.comparingInt(numberMap::get));\n\n        // Join the sorted number words back into a single string.\n        return String.join(\" \", numberWords);\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        String input = \"drei eins f\u00fcnf\";\n        String result = sortNumbers(input);\n        System.out.println(result);  // Output: \"eins drei f\u00fcnf\"\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.*;\n\npublic class RescaleToUnit {\n\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledValue);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaled = rescaleToUnit(numbers);\n        System.out.println(rescaled);  // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "class FlipCase {\n    /**\n     * F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder flippedString = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n\n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test the flipCase method\n        System.out.println(flipCase(\"Hello\")); // Output: hELLO\n        System.out.println(flipCase(\"World\")); // Output: wORLD\n        System.out.println(flipCase(\"Java123\")); // Output: jAVA123\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.*;\n\nclass GetPositive {\n    /**\n     * Gib nur positive Zahlen in der Liste zur\u00fcck.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     */\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> result = new ArrayList<>();\n        \n        for (Object o : l) {\n            if (o instanceof Integer) {\n                int number = (Integer) o;\n                if (number > 0) {\n                    result.add(number);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(getPositive(Arrays.asList(-1, 2, -4, 5, 6))); // [2, 5, 6]\n        System.out.println(getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "class IsPrime {\n    /**\n     * Returns \"true\" if a given number is a prime number, otherwise returns \"false\".\n     * \n     * @param n the number to check for primality\n     * @return true if the number is prime, false otherwise\n     */\n    public static Boolean isPrime(int n) {\n        // Handle edge cases\n        if (n <= 1) {\n            return false;\n        }\n\n        // Check divisibility from 2 to square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        // If no divisors found, n is prime\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isPrime(6));    // False\n        System.out.println(isPrime(101));  // True\n        System.out.println(isPrime(11));   // True\n        System.out.println(isPrime(13441));// True\n        System.out.println(isPrime(61));   // True\n        System.out.println(isPrime(4));    // False\n        System.out.println(isPrime(1));    // False\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    /**\n     * Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        // Create a Set to eliminate duplicate elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Convert the Set back to a List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n\n        // Sort the List\n        Collections.sort(uniqueList);\n\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result = unique(input);\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "class PrimeFib {\n\n    // Method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2 || num == 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    // Method to generate the nth prime Fibonacci number\n    public static int primeFib(int n) {\n        // Initialize the first two Fibonacci numbers\n        int a = 0, b = 1;\n        int count = 0;\n        while (true) {\n            // Generate the next Fibonacci number\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n\n            // Check if the Fibonacci number is prime\n            if (isPrime(nextFib)) {\n                count++;\n                // If we have found the nth prime Fibonacci number, return it\n                if (count == n) {\n                    return nextFib;\n                }\n            }\n        }\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(primeFib(1)); // Should print 2\n        System.out.println(primeFib(2)); // Should print 3\n        System.out.println(primeFib(3)); // Should print 5\n        System.out.println(primeFib(4)); // Should print 13\n        System.out.println(primeFib(5)); // Should print 89\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "// We need at least 3 numbers to form a triplet\n        if (l.size() < 3) {\n            return false;\n        }\n\n        // Sort the list to use two-pointer technique\n        Collections.sort(l);\n\n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Use two-pointer technique to find the other two numbers\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        // If no triplet found\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n\n    /**\n     * pairsSumToZero nimmt eine Liste von ganzen Zahlen als Eingabe.\n     * Es gibt True zur\u00fcck, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls gibt es False zur\u00fcck.\n     * @param l die Liste der ganzen Zahlen\n     * @return True, wenn es zwei unterschiedliche Elemente gibt, die sich zu Null addieren, andernfalls False\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seenNumbers = new HashSet<>();\n\n        for (Integer number : l) {\n            // Pr\u00fcfen, ob das negative Gegenst\u00fcck bereits im Set vorhanden ist\n            if (seenNumbers.contains(-number)) {\n                return true;\n            }\n            // F\u00fcgen Sie die aktuelle Zahl zum Set hinzu\n            seenNumbers.add(number);\n        }\n\n        // Wenn keine Paare gefunden wurden, die sich zu Null addieren, geben Sie False zur\u00fcck\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Beispieltests\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "public class Fib4 {\n    public static int fib4(int n) {\n        // Handle base cases directly\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        \n        // Initialize the first four values of the sequence\n        int a = 0; // fib4(0)\n        int b = 0; // fib4(1)\n        int c = 2; // fib4(2)\n        int d = 0; // fib4(3)\n        \n        // Variable to store the current value\n        int current = 0;\n        \n        // Compute the sequence iteratively from 4 to n\n        for (int i = 4; i <= n; i++) {\n            current = a + b + c + d;\n            // Update the previous values\n            a = b;\n            b = c;\n            c = d;\n            d = current;\n        }\n        \n        return current;\n    }\n    \n    // Main method to run some test cases\n    public static void main(String[] args) {\n        System.out.println(fib4(5));  // Output: 4\n        System.out.println(fib4(6));  // Output: 8\n        System.out.println(fib4(7));  // Output: 14\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\npublic class Median {\n    /**\n     * \n     * Gib den Median der Elemente in der Liste l zur\u00fcck.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        // Determine the size of the list\n        int n = l.size();\n        \n        // If the size is odd, return the middle element\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            // If the size is even, return the average of the two middle elements\n            int mid1 = l.get(n / 2 - 1);\n            int mid2 = l.get(n / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(list1));  // Output: 3\n        \n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(list2));  // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        // Null or empty string is considered a palindrome\n        if (text == null || text.isEmpty()) {\n            return true;\n        }\n\n        // Initialize pointers for the start and end of the string\n        int start = 0;\n        int end = text.length() - 1;\n\n        // Compare characters from the start and end\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n        System.out.println(isPalindrome(\"racecar\")); // True\n        System.out.println(isPalindrome(\"palindrome\")); // False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "class RemoveVowels {\n    /**\n     * removeVowels is a method that takes a string and returns a string without vowels.\n     * \n     * @param text The input string from which vowels need to be removed.\n     * @return A string with all vowels removed.\n     */\n    public static String removeVowels(String text) {\n        // Define a set of vowels for quick lookup\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        // Use StringBuilder for efficient string manipulation\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Convert StringBuilder to string and return\n        return result.toString();\n    }\n    \n    // Main method for testing the removeVowels function\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(removeVowels(\"\"));                // Output: ''\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\n        System.out.println(removeVowels(\"abcdef\"));          // Output: 'bcdf'\n        System.out.println(removeVowels(\"aaaaa\"));           // Output: ''\n        System.out.println(removeVowels(\"aaBAA\"));           // Output: 'B'\n        System.out.println(removeVowels(\"zbcd\"));            // Output: 'zbcd'\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.util.List;\n\nclass BelowThreshold {\n    /**\n     * Returns true if all the numbers in the list l are below the threshold t.\n     * @param l the list of integers\n     * @param t the threshold value\n     * @return true if all numbers in the list are below the threshold, false otherwise\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int number : l) {\n            if (number >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // should print true\n        System.out.println(belowThreshold(Arrays.asList(1, 20, 4, 10), 5));  // should print false\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "class Add {\n    /**\n     * \n     * Addiere zwei Zahlen x und y.\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        System.out.println(add(2, 3)); // should print 5\n        System.out.println(add(5, 7)); // should print 12\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.util.HashMap;\nimport java.util.Map;\n\nclass SameChars {\n    /**\n     * Check if two words contain the same characters.\n     * \n     * @param s0 First string\n     * @param s1 Second string\n     * @return True if both strings contain the same characters, otherwise False\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        // Create frequency maps for both strings\n        Map<Character, Integer> freqMap1 = buildFrequencyMap(s0);\n        Map<Character, Integer> freqMap2 = buildFrequencyMap(s1);\n\n        // Compare the two frequency maps\n        return freqMap1.equals(freqMap2);\n    }\n\n    /**\n     * Build a frequency map for a given string.\n     * \n     * @param s Input string\n     * @return Frequency map of characters\n     */\n    private static Map<Character, Integer> buildFrequencyMap(String s) {\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n        return freqMap;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "class Fib {\n    /**\n     * Gib die n-te Fibonacci-Zahl zur\u00fcck.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return b;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fib(10)); // Outputs 55\n        System.out.println(fib(1));  // Outputs 1\n        System.out.println(fib(8));  // Outputs 21\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\n\nclass Common {\n    /**\n     * Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n     */\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates and find intersection\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Retain only the elements that are common to both sets\n        set1.retainAll(set2);\n        \n        // Convert the set back to a list\n        List<Integer> result = new ArrayList<>(set1);\n        \n        // Sort the list\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        \n        List<Integer> result = common(l1, l2);\n        System.out.println(result); // Output: [1, 5, 653]\n\n        l1 = Arrays.asList(5, 3, 2, 8);\n        l2 = Arrays.asList(3, 2);\n        \n        result = common(l1, l2);\n        System.out.println(result); // Output: [2, 3]\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n    /**\n     * \n     * Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n        int largestPrime = -1;\n        \n        // Divide n by 2 until it becomes odd\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so a skip of 2 (i.e., i = i + 2) is used\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, divide n by i and update largestPrime\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n    \n    public static void main(String[] args) {\n        // Example usage:\n        System.out.println(largestPrimeFactor(13195)); // 29\n        System.out.println(largestPrimeFactor(2048));  // 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "class SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sumToN(30)\n     * 465\n     * >>> sumToN(100)\n     * 5050\n     * >>> sumToN(5)\n     * 15\n     * >>> sumToN(10)\n     * 55\n     * >>> sumToN(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    // Main method to test the sumToN function\n    public static void main(String[] args) {\n        System.out.println(sumToN(30));  // Output: 465\n        System.out.println(sumToN(100)); // Output: 5050\n        System.out.println(sumToN(5));   // Output: 15\n        System.out.println(sumToN(10));  // Output: 55\n        System.out.println(sumToN(1));   // Output: 1\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\n\npublic class Derivative {\n    /**\n     * \n     * xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n     *     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *     Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Object> result = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> coefficients1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> coefficients2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(derivative(coefficients1));  // Output: [1, 4, 12, 20]\n        System.out.println(derivative(coefficients2));  // Output: [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "class Fibfib {\n    public static int fibfib(int n) {\n        // Base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        // Array to store the sequence values\n        int[] fibfibSequence = new int[n + 1];\n        fibfibSequence[0] = 0;\n        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n\n        // Compute the sequence iteratively\n        for (int i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n        }\n\n        return fibfibSequence[n];\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "import java.io.*;\nimport java.util.*;\n\nclass VowelsCount {\n    /**\n     * Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt\n     * und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'.\n     * Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n     *\n     * Beispiel:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public static int vowelsCount(String s) {\n        // Definieren der Vokale\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Initialisieren des Z\u00e4hlers\n        int count = 0;\n        \n        // Iterieren durch jeden Charakter im String\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (vowels.contains(c)) {\n                count++;\n            }\n        }\n        \n        // \u00dcberpr\u00fcfen, ob der letzte Charakter ein 'y' oder 'Y' ist\n        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {\n            count++;\n        }\n        \n        return count;\n    }\n\n    // Hauptmethode zum Testen der Funktion\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // 2\n        System.out.println(vowelsCount(\"ACEDY\")); // 3\n        System.out.println(vowelsCount(\"Hello\")); // 2\n        System.out.println(vowelsCount(\"xyzzy\")); // 1\n        System.out.println(vowelsCount(\"bcd\"));   // 0\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        // Step 1: Count frequencies of each integer in the list\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Find the largest integer with frequency >= integer value\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (frequency >= num && num > result) {\n                result = num;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "class TriangleArea {\n    public static Number triangleArea(int a, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to two decimal places\n        double roundedArea = Math.round(area * 100.0) / 100.0;\n\n        return roundedArea;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(triangleArea(3, 4, 5)); // Output: 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Output: -1\n        System.out.println(triangleArea(6, 8, 10)); // Output: 24.00\n        System.out.println(triangleArea(7, 10, 5)); // Output: 16.25\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.*;\n\npublic class WillItFly {\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - 1 - i))) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        if (sum > w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(willItFly(Arrays.asList(1, 2), 5)); // \u279e False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 1)); // \u279e False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 9)); // \u279e True\n        System.out.println(willItFly(Arrays.asList(3), 5)); // \u279e True\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "class IsMultiplyPrime {\n    /**\n     * Pr\u00fcft, ob die gegebene Zahl das Produkt von genau drei Primzahlen ist.\n     * \n     * @param a Die zu \u00fcberpr\u00fcfende Zahl\n     * @return true, wenn die Zahl das Produkt von genau drei Primzahlen ist, false sonst\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        \n        List<Integer> primes = generatePrimes(100);\n        \n        // Pr\u00fcfen, ob die Zahl das Produkt von genau drei Primzahlen ist\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Generiert eine Liste von Primzahlen bis zu einer gegebenen Obergrenze.\n     * \n     * @param max Die Obergrenze\n     * @return Eine Liste von Primzahlen bis zur Obergrenze\n     */\n    private static List<Integer> generatePrimes(int max) {\n        boolean[] isPrime = new boolean[max + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        \n        for (int i = 2; i * i <= max; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= max; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= max; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    public static void main(String[] args) {\n        // Tests\n        System.out.println(isMultiplyPrime(30)); // True, 30 = 2 * 3 * 5\n        System.out.println(isMultiplyPrime(60)); // True, 60 = 2 * 3 * 5\n        System.out.println(isMultiplyPrime(31)); // False, 31 ist eine Primzahl\n        System.out.println(isMultiplyPrime(8));  // False, 8 = 2 * 2 * 2\n        System.out.println(isMultiplyPrime(105)); // True, 105 = 3 * 5 * 7\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "class DecimalToBinary {\n    /**\n     * Konvertiert eine Dezimalzahl in das Bin\u00e4rformat und gibt sie als String zur\u00fcck,\n     * der mit 'db' am Anfang und am Ende formatiert ist.\n     *\n     * @param decimal Die Dezimalzahl, die umgewandelt werden soll.\n     * @return Ein String, der die Bin\u00e4rdarstellung der Zahl enth\u00e4lt, umgeben von 'db'.\n     */\n    public static String decimalToBinary(int decimal) {\n        // Konvertiert die Dezimalzahl in eine Bin\u00e4rdarstellung\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Formatiert die Bin\u00e4rdarstellung mit 'db' am Anfang und Ende\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        // Beispielaufrufe der Funktion\n        System.out.println(decimalToBinary(15)); // soll \"db1111db\" ausgeben\n        System.out.println(decimalToBinary(32)); // soll \"db100000db\" ausgeben\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "public class IsHappy {\n    public static Boolean isHappy(String s) {\n        // Check if the string length is less than 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check each group of 3 consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // If all three characters are the same, return false\n            if (first == second && second == third) {\n                return false;\n            }\n        }\n\n        // If no invalid trio is found, return true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isHappy(\"a\")); // False\n        System.out.println(isHappy(\"aa\")); // False\n        System.out.println(isHappy(\"abcd\")); // True\n        System.out.println(isHappy(\"aabb\")); // False\n        System.out.println(isHappy(\"adb\")); // True\n        System.out.println(isHappy(\"xyy\")); // False\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass NumericalLetterGrade {\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else if (gpa == 0.0) {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> gpas = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        List<String> letterGrades = numericalLetterGrade(gpas);\n        System.out.println(letterGrades);  // Output: [A+, B, C-, C, A-]\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "class PrimeLength {\n    // Helper function to check if a number is prime\n    public static boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num == 2) return true;  // 2 is the only even prime number\n        if (num % 2 == 0) return false; // Other even numbers are not prime\n\n        // Check divisors from 3 to the square root of num\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Main function to check if the length of a string is prime\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\"));      // True\n        System.out.println(primeLength(\"abcdcba\"));    // True\n        System.out.println(primeLength(\"kittens\"));    // True\n        System.out.println(primeLength(\"orange\"));     // False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public class Solve {\n    /**\n     * Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n     * \n     * @param n Ganzzahl\n     *          Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n     * @return eine Zeichenkette mit der bin\u00e4ren Zahl.\n     */\n    public static String solve(int n) {\n        // Step 1: Calculate the sum of the digits\n        int sumOfDigits = 0;\n        String numberString = Integer.toString(n);\n        \n        for (char digitChar : numberString.toCharArray()) {\n            sumOfDigits += Character.getNumericValue(digitChar);\n        }\n        \n        // Step 2: Convert the sum to binary\n        String binaryString = Integer.toBinaryString(sumOfDigits);\n        \n        return binaryString;\n    }\n    \n    public static void main(String[] args) {\n        // Test the function with some examples\n        System.out.println(solve(1000)); // Output should be \"1\"\n        System.out.println(solve(150));  // Output should be \"110\"\n        System.out.println(solve(147));  // Output should be \"1100\"\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    public static List<int[]> getRow(List<List<Integer>> lst, int x) {\n        List<int[]> coordinates = new ArrayList<>();\n\n        // Iterate through the nested list to find occurrences of x\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    coordinates.add(new int[]{i, j});\n                }\n            }\n        }\n\n        // Sort the coordinates first by row in ascending order,\n        // then by column in descending order within each row\n        coordinates.sort((a, b) -> {\n            if (a[0] != b[0]) {\n                return Integer.compare(a[0], b[0]);\n            } else {\n                return Integer.compare(b[1], a[1]);\n            }\n        });\n\n        return coordinates;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = Collections.emptyList();\n        System.out.println(getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            Collections.emptyList(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        // Check if the list has fewer than 2 elements\n        if (lst.size() < 2) {\n            return null;\n        }\n\n        // Initialize the smallest and second smallest variables\n        Integer smallest = Integer.MAX_VALUE;\n        Integer secondSmallest = Integer.MAX_VALUE;\n\n        // Use a set to track distinct elements\n        Set<Integer> distinctElements = new HashSet<>();\n\n        // Traverse the list to find the smallest and second smallest distinct elements\n        for (Integer num : lst) {\n            distinctElements.add(num);\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num < secondSmallest && num != smallest) {\n                secondSmallest = num;\n            }\n        }\n\n        // If there aren't at least two distinct elements, return null\n        if (distinctElements.size() < 2) {\n            return null;\n        }\n\n        return secondSmallest;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // 2\n        System.out.println(nextSmallest(Collections.emptyList())); // null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // null\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 2, 3))); // 2\n        System.out.println(nextSmallest(Arrays.asList(1, 1, 2, 2, 3, 3))); // 2\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass IsBored {\n\n    public static int isBored(String s) {\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        // Split the string into sentences using ., ?, !\n        String[] sentences = s.split(\"[.?!]\");\n        int count = 0;\n\n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"Ich\")) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isBored(\"Hello world\")); // 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n        System.out.println(isBored(\"Ich bin m\u00fcde. Ich gehe schlafen. Was machst du?\")); // 2\n        System.out.println(isBored(\"Heute ist ein sch\u00f6ner Tag! Ich freue mich auf das Wochenende.\")); // 1\n        System.out.println(isBored(\"\")); // 0\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "class Skjkasdkd {\n    /**\n     * This method checks if a given number is prime.\n     * @param number The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(number); i += 2) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    /**\n     * This method calculates the sum of the digits of a given number.\n     * @param number The number whose digits to sum.\n     * @return The sum of the digits.\n     */\n    private static int sumOfDigits(int number) {\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n\n    /**\n     * This method finds the largest prime number in a list and returns the sum of its digits.\n     * @param lst The list of integers.\n     * @return The sum of the digits of the largest prime number.\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Find the largest prime number in the list.\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime number is found, return 0.\n        if (largestPrime == -1) {\n            return 0;\n        }\n        \n        // Return the sum of the digits of the largest prime number.\n        return sumOfDigits(largestPrime);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(skjkasdkd(lst1)); // Expected output: 10\n\n        List<Integer> lst2 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        System.out.println(skjkasdkd(lst2)); // Expected output: 25\n\n        List<Integer> lst3 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        System.out.println(skjkasdkd(lst3)); // Expected output: 13\n\n        List<Integer> lst4 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        System.out.println(skjkasdkd(lst4)); // Expected output: 11\n\n        List<Integer> lst5 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        System.out.println(skjkasdkd(lst5)); // Expected output: 3\n\n        List<Integer> lst6 = Arrays.asList(0, 8, 1, 2, 1, 7);\n        System.out.println(skjkasdkd(lst6)); // Expected output: 7\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.HashMap;\nimport java.util.Map;\n\nclass CheckDictCase {\n    public static Boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;  // Return false if the dictionary is empty\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;  // Return false if any key is not a String\n            }\n\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(checkDictCase(dict1));  // Should return True\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(checkDictCase(dict2));  // Should return False\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(checkDictCase(dict3));  // Should return False\n\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(checkDictCase(dict4));  // Should return False\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(checkDictCase(dict5));  // Should return True\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "public class ClosestInteger {\n    public static int closestInteger(String value) {\n        // Convert the string to a BigDecimal for precise decimal handling\n        BigDecimal number = new BigDecimal(value);\n\n        // Get the integer value of the number\n        int integerValue = number.intValue();\n\n        // Find the fraction part to determine rounding\n        BigDecimal fractionalPart = number.subtract(new BigDecimal(integerValue));\n\n        // Check if the fractional part is exactly 0.5 or -0.5\n        if (fractionalPart.abs().compareTo(new BigDecimal(\"0.5\")) == 0) {\n            // Round away from zero\n            if (number.signum() > 0) {\n                return integerValue + 1;\n            } else {\n                return integerValue - 1;\n            }\n        } else {\n            // Use BigDecimal's rounding method to round to the nearest integer\n            return number.setScale(0, RoundingMode.HALF_UP).intValue();\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(closestInteger(\"10\"));     // Output: 10\n        System.out.println(closestInteger(\"15.3\"));   // Output: 15\n        System.out.println(closestInteger(\"14.5\"));   // Output: 15\n        System.out.println(closestInteger(\"-14.5\"));  // Output: -15\n        System.out.println(closestInteger(\"0.5\"));    // Output: 1\n        System.out.println(closestInteger(\"-0.5\"));   // Output: -1\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.*;\n\nclass MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        int increment = (n % 2 == 0) ? 2 : 2;  // Increment is always 2, it just alternates between odd and even values\n\n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            currentStones += increment;\n        }\n\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n        System.out.println(makeAPile(4)); // Output: [4, 6, 8, 10]\n        System.out.println(makeAPile(1)); // Output: [1]\n        System.out.println(makeAPile(2)); // Output: [2, 4]\n        System.out.println(makeAPile(5)); // Output: [5, 7, 9, 11, 13]\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass WordsString {\n    /**\n     * You receive a string of words separated by commas or spaces.\n     * Your task is to split the string into words and return an array of the words.\n     * \n     * For example:\n     * \n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<String> wordsString(String s) {\n        // Split the string using a regular expression that matches commas or spaces\n        String[] words = s.split(\"[, ]+\");\n        \n        // Convert the array to a List and filter out any empty strings\n        List<String> result = Arrays.stream(words)\n                                    .filter(word -> !word.isEmpty())\n                                    .collect(Collectors.toList());\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "// Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n\n        // Start searching from the highest number, y\n        for (int i = y; i >= x; i--) {\n            // Check if the current number is even\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n\n        // If no even number was found in the range, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(chooseNum(12, 15)); // Output: 14\n        System.out.println(chooseNum(13, 12)); // Output: -1\n        System.out.println(chooseNum(10, 20)); // Output: 20\n        System.out.println(chooseNum(7, 7));   // Output: -1\n        System.out.println(chooseNum(8, 8));   // Output: 8\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "class RoundedAvg {\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        // Calculate the sum of the range from n to m inclusive\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Calculate the number of elements in the range\n        int count = m - n + 1;\n\n        // Calculate the average and round to the nearest whole number\n        double avg = (double) sum / count;\n        int roundedAvg = (int) Math.round(avg);\n\n        // Convert the rounded average to binary and return the result\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5));  // Output: \"0b11\"\n        System.out.println(roundedAvg(7, 5));  // Output: -1\n        System.out.println(roundedAvg(10, 20)); // Output: \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // Output: \"0b11010\"\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // i is even, compute factorial\n                result.add(factorial(i));\n            } else {\n                // i is odd, compute sum from 1 to i\n                result.add(sumTo(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private static int factorial(int num) {\n        int result = 1;\n        for (int i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private static int sumTo(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Test the function\n        System.out.println(f(5));  // Output: [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\npublic class EvenOddPalindrome {\n    // Main method to test the function\n    public static void main(String[] args) {\n        int n = 12; // Example input\n        List<Integer> result = evenOddPalindrome(n);\n        System.out.println(result); // Should print [4, 6]\n    }\n\n    // Function to determine if a number is a palindrome\n    private static boolean isPalindrome(int number) {\n        String str = Integer.toString(number);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main function to count even and odd palindromes\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.util.List;\n\nclass MoveOneBall {\n    /**\n     * \n     * Wir haben ein Array 'arr' mit N ganzen Zahlen arr[1], arr[2], ..., arr[N]. Die Zahlen im Array werden zuf\u00e4llig angeordnet sein. Deine Aufgabe besteht darin zu bestimmen, ob es m\u00f6glich ist, ein Array in nicht abnehmender Reihenfolge zu sortieren, indem du die folgende Operation auf das gegebene Array anwendest:\n     * Du darfst beliebig oft eine Rechtsschiebeoperation durchf\u00fchren.\n     * Eine Rechtsschiebeoperation bedeutet, dass alle Elemente des Arrays um eine Position in Richtung rechts verschoben werden. Das letzte Element des Arrays wird an die Startposition im Array verschoben, d.h. an den Index 0.\n     * \n     * Wenn es m\u00f6glich ist, das sortierte Array durch Ausf\u00fchren der oben genannten Operation zu erhalten, gib True zur\u00fcck, sonst gib False zur\u00fcck.\n     * Wenn das gegebene Array leer ist, gib True zur\u00fcck.\n     * \n     * Hinweis: Die gegebene Liste hat garantiert eindeutige Elemente.\n     * \n     * Zum Beispiel:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Erkl\u00e4rung: Durch Ausf\u00fchren von 2 Rechtsschiebeoperationen kann die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array erreicht werden.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Erkl\u00e4rung: Es ist nicht m\u00f6glich, die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array durch Ausf\u00fchren beliebiger Anzahl von Rechtsschiebeoperationen zu erhalten.\n     * \n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int breakPoint = -1;\n\n        // Find the break point where the order breaks\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                if (breakPoint != -1) {\n                    // If we found more than one break point, it's not possible\n                    return false;\n                }\n                breakPoint = i;\n            }\n        }\n\n        // If no break point is found, the array is already sorted\n        if (breakPoint == -1) {\n            return true;\n        }\n\n        // Check if the array is sorted from break point\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get((breakPoint + 1 + i) % n) > arr.get((breakPoint + 2 + i) % n)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(3, 4, 5, 1, 2);\n        System.out.println(moveOneBall(arr1)); // True\n\n        List<Integer> arr2 = Arrays.asList(3, 5, 4, 1, 2);\n        System.out.println(moveOneBall(arr2)); // False\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd numbers in lst1\n        int oddCountLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountLst1++;\n            }\n        }\n\n        // Count the number of even numbers in lst2\n        int evenCountLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountLst2++;\n            }\n        }\n\n        // If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n        if (oddCountLst1 <= evenCountLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Should return \"YES\"\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Should return \"NO\"\n        System.out.println(exchange(Arrays.asList(1, 3, 5), Arrays.asList(2, 4, 6))); // Should return \"YES\"\n        System.out.println(exchange(Arrays.asList(2, 4, 6), Arrays.asList(1, 1, 1))); // Should return \"YES\"\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        // Set to store characters to be deleted\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n\n        // StringBuilder to construct the resulting string\n        StringBuilder resultBuilder = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                resultBuilder.append(ch);\n            }\n        }\n\n        // Resulting string after deletions\n        String result = resultBuilder.toString();\n\n        // Check if the resulting string is a palindrome\n        boolean isPalindrome = isPalindrome(result);\n\n        // Prepare the result as a list\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n\n    private static boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // Output: [bcd, false]\n        System.out.println(reverseDelete(\"abcdef\", \"b\")); // Output: [acdef, false]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // Output: [cdedc, true]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int totalWaterUnits = 0;\n        \n        // Count the total number of water units in the grid\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    totalWaterUnits++;\n                }\n            }\n        }\n        \n        // Calculate the number of times we need to lower the bucket\n        int bucketUses = totalWaterUnits / capacity;\n        if (totalWaterUnits % capacity != 0) {\n            bucketUses++;\n        }\n        \n        return bucketUses;\n    }\n\n    public static void main(String[] args) {\n        // Define some test cases\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(maxFill(grid1, capacity1)); // Output: 6\n\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(maxFill(grid2, capacity2)); // Output: 5\n\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\nclass SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        // List to store the result\n        List<String> result = new ArrayList<>();\n        \n        // Check if the input string is empty\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n        \n        // Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        \n        // Iterate through each word\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            // Check if the word has exactly n consonants\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    // Helper function to check if a character is a consonant\n    private static boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return (c >= 'a' && c <= 'z') && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2)); // []\n        System.out.println(selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\n\nclass Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) return new ArrayList<>();\n        \n        // Min-Heap to keep track of the k largest elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);\n        \n        for (int num : arr) {\n            minHeap.add(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();  // Remove the smallest element\n            }\n        }\n        \n        // Convert the heap to a list and sort it\n        List<Integer> result = new ArrayList<>(minHeap);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(maximum(arr1, k1));  // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(maximum(arr2, k2));  // Output: [4, 4]\n\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(maximum(arr3, k3));  // Output: [2]\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.util.*;\n\nclass AddElements {\n    /**\n     * Gegeben sei ein nicht-leeres Array von ganzen Zahlen arr und eine ganze Zahl k.\n     * Gib die Summe der Elemente mit h\u00f6chstens zwei Ziffern aus den ersten k Elementen von arr zur\u00fcck.\n     *\n     * @param arr List of integers\n     * @param k Number of elements to consider from the start of the list\n     * @return Sum of elements with at most two digits from the first k elements\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (Math.abs(num) < 100) {\n                sum += num;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        \n        int result = addElements(arr, k);\n        System.out.println(result); // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        // Determine the intersection interval\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        // Calculate the length of the intersection\n        int length = intersectionEnd - intersectionStart + 1;\n        \n        // If the length is less than 1, there is no intersection\n        if (length < 1) {\n            return \"NO\";\n        }\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num <= 3) {\n            return true;\n        }\n        if (num % 2 == 0 || num % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // Output: \"NO\"\n        System.out.println(intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // Output: \"NO\"\n        System.out.println(intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // Output: \"YES\"\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    // Method to get the first n+1 numbers of the Tribonacci sequence\n    public static List<Number> tri(int n) {\n        // Result list to store the Tribonacci sequence\n        List<Number> result = new ArrayList<>();\n        \n        // If n is less than 1, return an empty list\n        if (n < 0) return result;\n        \n        // Initialize base cases\n        result.add(3); // tri(1)\n        \n        // Compute the sequence up to n\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                result.add(3); // tri(1) = 3\n            } else if (i % 2 == 0) {\n                result.add(1 + i / 2); // tri(n) = 1 + n / 2 for even n\n            } else {\n                // For odd n, we need to use previous values in the sequence\n                // Since tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                // We need to ensure tri(n + 1) is already computed\n                // Let's add a temporary placeholder for tri(n + 1)\n                result.add(0); // Placeholder for tri(n + 1)\n                int tri_n_minus_1 = result.get(i - 1).intValue();\n                int tri_n_minus_2 = result.get(i - 2).intValue();\n                int tri_n_plus_1 = 1 + (i + 1) / 2; // tri(n + 1) since n + 1 will be even\n                result.set(i, tri_n_minus_1 + tri_n_minus_2 + tri_n_plus_1); // tri(n)\n            }\n        }\n        \n        return result;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(tri(0)); // [3]\n        System.out.println(tri(1)); // [3, 3]\n        System.out.println(tri(2)); // [3, 3, 2]\n        System.out.println(tri(3)); // [3, 3, 2, 8]\n        System.out.println(tri(4)); // [3, 3, 2, 8, 3]\n        System.out.println(tri(5)); // [3, 3, 2, 8, 3, 16]\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public static int digits(int n) {\n        // Initialize the product of odd digits to 1\n        int productOfOddDigits = 1;\n        boolean hasOddDigit = false;\n\n        // Loop through each digit of the number\n        while (n > 0) {\n            int digit = n % 10; // Extract the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                productOfOddDigits *= digit; // Multiply if the digit is odd\n                hasOddDigit = true; // Mark that we have found at least one odd digit\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        // If no odd digits were found, return 0\n        if (!hasOddDigit) {\n            return 0;\n        }\n\n        // Return the product of odd digits\n        return productOfOddDigits;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digits(1));    // Output: 1\n        System.out.println(digits(4));    // Output: 0\n        System.out.println(digits(235));  // Output: 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "public class IsNested {\n    public static Boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean foundNested = false;\n        \n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        foundNested = true;\n                    }\n                } else {\n                    // Unmatched closing bracket\n                    return false;\n                }\n            }\n        }\n        \n        // After processing all characters, stack should be empty for a valid sequence\n        return foundNested && stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // \u279e True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // \u279e False\n        System.out.println(isNested(\"[][]\")); // \u279e False\n        System.out.println(isNested(\"[]\")); // \u279e False\n        System.out.println(isNested(\"[[][]]\")); // \u279e True\n        System.out.println(isNested(\"[[]][[\")); // \u279e True\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.util.List;\n\npublic class SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            int ceilValue = (int) Math.ceil(num.doubleValue());\n            sum += ceilValue * ceilValue;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Number> lst1 = Arrays.asList(1, 2, 3);\n        List<Number> lst2 = Arrays.asList(1, 4, 9);\n        List<Number> lst3 = Arrays.asList(1, 3, 5, 7);\n        List<Number> lst4 = Arrays.asList(1.4, 4.2, 0);\n        List<Number> lst5 = Arrays.asList(-2.4, 1, 1);\n\n        System.out.println(sumSquares(lst1)); // Output: 14\n        System.out.println(sumSquares(lst2)); // Output: 98\n        System.out.println(sumSquares(lst3)); // Output: 84\n        System.out.println(sumSquares(lst4)); // Output: 29\n        System.out.println(sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public class CheckIfLastCharIsALetter {\n    /**\n     * Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\n     * Hinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n     * \n     * Beispiele:\n     * \n     * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n     * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n     * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n     * check_if_last_char_is_a_letter(\"\") \u279e False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        // Check if the string is empty\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        // Trim any trailing whitespace\n        txt = txt.trim();\n\n        // Check if the trimmed string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the trimmed string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is an alphabet letter\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is the first character of the string\n            // or if the character before it is a space\n            if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // \u279e False \n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.List;\n\nclass CanArrange {\n    /**\n     * Returns the largest index of an element that is not greater than or equal to the immediately preceding element.\n     * If no such element exists, returns -1.\n     * \n     * @param arr the input list of integers\n     * @return the index of the first element that is not in increasing order compared to its predecessor, or -1 if all are in increasing order\n     */\n    public static int canArrange(List<Integer> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> example1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> example2 = Arrays.asList(1, 2, 3);\n        \n        System.out.println(canArrange(example1)); // Output: 3\n        System.out.println(canArrange(example2)); // Output: -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.*;\n\nclass LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num < 0) {\n                    if (largestNegative == null || num > largestNegative) {\n                        largestNegative = num;\n                    }\n                } else if (num > 0) {\n                    if (smallestPositive == null || num < smallestPositive) {\n                        smallestPositive = num;\n                    }\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // Output: [null, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(-5, -10, 3, 0, 2))); // Output: [-5, 2]\n        System.out.println(largestSmallestIntegers(Arrays.asList(-1, -2, -3, -4))); // Output: [-1, null]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "class SpecialFactorial {\n\n    public static long specialFactorial(int n) {\n        // Initialize the result to 1 because multiplying by 1 has no effect.\n        long result = 1;\n\n        // We will keep a running factorial value.\n        long currentFactorial = 1;\n\n        // Loop from 1 to n to calculate the factorials and multiply them together.\n        for (int i = 1; i <= n; i++) {\n            // Calculate i! by multiplying the current factorial value by i.\n            currentFactorial *= i;\n            // Multiply the result by the current factorial value.\n            result *= currentFactorial;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test the specialFactorial function with a sample input.\n        int n = 4;\n        System.out.println(\"The special factorial of \" + n + \" is \" + specialFactorial(n));\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "class WordsInSentence {\n\n    // Helper method to check if a number is a prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String wordsInSentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // List to collect words with prime lengths\n        List<String> primeWords = new ArrayList<>();\n        \n        // Iterate through each word\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n\n        // Join collected words into a single string\n        return String.join(\" \", primeWords);\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Split the input strings to get numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Multiply numerators and denominators\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result numerator is divisible by the result denominator\n        return resultNumerator % resultDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(simplify(\"1/5\", \"5/1\")); // True\n        System.out.println(simplify(\"1/6\", \"2/1\")); // False\n        System.out.println(simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\n\nclass OrderByPoints {\n    /**\n     * Helper function to calculate the sum of digits of a number.\n     */\n    private static int digitSum(int number) {\n        number = Math.abs(number);  // Make sure to handle negative numbers correctly\n        int sum = 0;\n        while (number != 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n\n    /**\n     * Function to order the list by the sum of their digits.\n     */\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        // Create a list of pairs (digit sum, index, number)\n        List<int[]> pairedList = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            pairedList.add(new int[]{digitSum(nums.get(i)), i, nums.get(i)});\n        }\n\n        // Sort based on the digit sum and then by the original index\n        pairedList.sort((a, b) -> {\n            if (a[0] != b[0]) {\n                return Integer.compare(a[0], b[0]);\n            } else {\n                return Integer.compare(a[1], b[1]);\n            }\n        });\n\n        // Extract the sorted numbers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (int[] pair : pairedList) {\n            sortedNums.add(pair[2]);\n        }\n\n        return sortedNums;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(orderByPoints(nums1)); // Output: [-1, -11, 1, -12, 11]\n\n        List<Integer> nums2 = Arrays.asList();\n        System.out.println(orderByPoints(nums2)); // Output: []\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.List;\n\nclass Specialfilter {\n\n    // Helper method to check if a digit is odd\n    private static boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n\n    // Helper method to get the first digit of a number\n    private static int getFirstDigit(int num) {\n        num = Math.abs(num); // Work with positive numbers for simplicity\n        while (num >= 10) {\n            num /= 10;\n        }\n        return num;\n    }\n\n    // Helper method to get the last digit of a number\n    private static int getLastDigit(int num) {\n        num = Math.abs(num); // Work with positive numbers for simplicity\n        return num % 10;\n    }\n\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        \n        for (Object obj : nums) {\n            if (obj instanceof Number) {\n                int num = ((Number) obj).intValue();\n                \n                if (num > 10) {\n                    int firstDigit = getFirstDigit(num);\n                    int lastDigit = getLastDigit(num);\n                    \n                    if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    // Test the method\n    public static void main(String[] args) {\n        List<Object> nums1 = Arrays.asList(15, -73, 14, -15);\n        List<Object> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        \n        System.out.println(specialfilter(nums1)); // Output: 1\n        System.out.println(specialfilter(nums2)); // Output: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.util.*;\n\nclass GetMaxTriples {\n\n    public static int getMaxTriples(int n) {\n        // Step 1: Generate the array 'a' according to the given formula\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        // Step 2: Find valid triples\n        int count = 0;\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(getMaxTriples(n));  // Output: 1\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    public static List<Object> bf(String planet1, String planet2) {\n        // Liste der Planeten in der Reihenfolge ihrer N\u00e4he zur Sonne\n        List<String> planets = Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        );\n\n        // \u00dcberpr\u00fcfen, ob die Eingabeplanetennamen g\u00fcltig sind\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>(); // Leeres Tupel zur\u00fcckgeben\n        }\n\n        // Indizes der beiden Planeten finden\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        // Bestimmen, welcher Index kleiner ist\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        // Liste der Planeten zwischen den beiden Indizes erzeugen\n        List<Object> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Testf\u00e4lle\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // ==> [\"Saturn\", \"Uranus\"]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // ==> [\"Venus\"]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(bf(\"Pluto\", \"Earth\")); // ==> []\n        System.out.println(bf(\"Mars\", \"Venus\")); // ==> [\"Earth\"]\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public class XOrY {\n    public static int xOrY(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12)); // should print 34\n        System.out.println(xOrY(15, 8, 5)); // should print 5\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.*;\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Object> test1 = Arrays.asList(1, 3, 2, 0);\n        List<Object> test2 = Arrays.asList(-1, -2, 0);\n        List<Object> test3 = Arrays.asList(9, -2);\n        List<Object> test4 = Arrays.asList(0);\n        List<Object> test5 = Arrays.asList();\n\n        System.out.println(doubleTheDifference(test1)); // Output: 10\n        System.out.println(doubleTheDifference(test2)); // Output: 0\n        System.out.println(doubleTheDifference(test3)); // Output: 81\n        System.out.println(doubleTheDifference(test4)); // Output: 0\n        System.out.println(doubleTheDifference(test5)); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.List;\n\nclass StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        String strongestExtension = null;\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            \n            // Calculate CAP and SM\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            // Update the strongest extension if this one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return className + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions)); // Slices.SErviNGSliCes\n\n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(strongestExtension(\"my_class\", extensions2)); // my_class.AA\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        // Concatenate b with itself\n        String concatenatedB = b + b;\n        \n        // Check if any rotation of b (which is a substring of concatenatedB) exists in a\n        return a.contains(b) || concatenatedB.contains(a);\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\"));    // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\"));   // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\"));// False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\"));    // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\"));   // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\"));// True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "class IntToMiniRoman {\n\n    public static String intToMiniRoman(int number) {\n        // Arrays of Roman numerals and their corresponding integer values.\n        String[] romanSymbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\n        // StringBuilder to construct the Roman numeral.\n        StringBuilder roman = new StringBuilder();\n\n        // Iterate over the values array.\n        for (int i = 0; i < values.length; i++) {\n            // While the number is greater than or equal to the current value,\n            // append the corresponding Roman symbol and reduce the number.\n            while (number >= values[i]) {\n                roman.append(romanSymbols[i]);\n                number -= values[i];\n            }\n        }\n\n        // Convert the Roman numeral to lowercase.\n        return roman.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(intToMiniRoman(19));   // Output: xix\n        System.out.println(intToMiniRoman(152));  // Output: clii\n        System.out.println(intToMiniRoman(426));  // Output: cdxxvi\n        System.out.println(intToMiniRoman(1000)); // Output: m\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "class RightAngleTriangle {\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // Bestimmen Sie die l\u00e4ngste Seite\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        int x = sides[0];\n        int y = sides[1];\n        int z = sides[2];\n        \n        // \u00dcberpr\u00fcfen Sie, ob das Quadrat der l\u00e4ngsten Seite gleich der Summe der Quadrate der anderen beiden Seiten ist\n        return (x * x + y * y == z * z);\n    }\n\n    public static void main(String[] args) {\n        // Testf\u00e4lle\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n        System.out.println(rightAngleTriangle(5, 12, 13)); // True\n        System.out.println(rightAngleTriangle(8, 15, 17)); // True\n        System.out.println(rightAngleTriangle(7, 24, 25)); // True\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "class Solve {\n    public static String solve(String s) {\n        boolean containsLetter = false;\n        \n        // \u00dcberpr\u00fcfen, ob der String Buchstaben enth\u00e4lt\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                break;\n            }\n        }\n        \n        // Fall 1: Der String enth\u00e4lt keinen Buchstaben, also kehren wir ihn um\n        if (!containsLetter) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        \n        // Fall 2: Der String enth\u00e4lt Buchstaben, also kehren wir die Gro\u00df- und Kleinschreibung um\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        // Testf\u00e4lle\n        System.out.println(solve(\"1234\"));  // Erwartet: \"4321\"\n        System.out.println(solve(\"ab\"));    // Erwartet: \"AB\"\n        System.out.println(solve(\"#a@C\"));  // Erwartet: \"#A@c\"\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n    /**\n     * Given a string 'text', returns its MD5 hash equivalent string.\n     * If 'text' is an empty string, returns null.\n     * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            // Create a MessageDigest instance for MD5\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n            // Update the digest using the input text\n            md.update(text.getBytes());\n\n            // Complete the hash computation\n            byte[] digest = md.digest();\n\n            // Convert the byte array to a hexadecimal string\n            StringBuilder sb = new StringBuilder();\n            for (byte b : digest) {\n                sb.append(String.format(\"%02x\", b));\n            }\n\n            return sb.toString();\n        } catch (NoSuchAlgorithmException e) {\n            // This exception should never occur with \"MD5\"\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(stringToMd5(\"Hello world\")); // Expected: 3e25960a79dbc69b674cd4ec67a72c62\n        System.out.println(stringToMd5(\"\"));            // Expected: null\n        System.out.println(stringToMd5(null));          // Expected: null\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    /**\n     * Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n     * \n     * Zum Beispiel:\n     * \n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     */\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Ensure a is the smaller number and b is the larger number\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        // Iterate from start to end\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {  // Check if the number is even\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(generateIntegers(2, 8));  // [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2));  // [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // [10, 12, 14]\n        System.out.println(generateIntegers(15, 20)); // [16, 18, 20]\n        System.out.println(generateIntegers(21, 23)); // []\n    }\n}"}

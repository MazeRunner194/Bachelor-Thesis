{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// Testf\u00e4lle\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n    // Berechnung der Summe der Elemente in der Liste\n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    \n    // Berechnung des Produkts der Elemente in der Liste\n    const product = numbers.reduce((acc, num) => acc * num, 1);\n    \n    // R\u00fcckgabe des Tupels (Array) mit der Summe und dem Produkt\n    return [sum, product];\n};\n\n// Testf\u00e4lle\nconsole.log(sum_product([]));          // Erwartet: [0, 1]\nconsole.log(sum_product([1, 2, 3, 4])); // Erwartet: [10, 24]"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n    if (a.length !== b.length) {\n        throw new Error(\"Die Eingabezeichenketten m\u00fcssen die gleiche L\u00e4nge haben.\");\n    }\n\n    let result = '';\n\n    for (let i = 0; i < a.length; i++) {\n        const bitA = a[i];\n        const bitB = b[i];\n\n        // XOR Operation: 1 if bits are different, 0 if they are the same\n        if (bitA === bitB) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}\n\n// Beispieltest\nconsole.log(string_xor('010', '110')); // Ausgabe: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (const str of strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    return longestString;\n};\n\n// Test cases\nconsole.log(longest([])); // null\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    // Der euklidische Algorithmus\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n};\n\n// Testf\u00e4lle\nconsole.log(greatest_common_divisor(3, 5));  // 1\nconsole.log(greatest_common_divisor(25, 15)); // 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n    const numberMap: { [key: string]: number } = {\n        'null': 0,\n        'eins': 1,\n        'zwei': 2,\n        'drei': 3,\n        'vier': 4,\n        'f\u00fcnf': 5,\n        'sechs': 6,\n        'sieben': 7,\n        'acht': 8,\n        'neun': 9\n    };\n\n    const words = numbers.split(' ');\n\n    words.sort((a, b) => {\n        return numberMap[a] - numberMap[b];\n    });\n\n    return words.join(' ');\n};\n\n// Beispielaufruf:\nconsole.log(sort_numbers('drei eins f\u00fcnf')); // 'eins drei f\u00fcnf'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error('Die Liste muss mindestens zwei Elemente enthalten.');\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n\n    if (range === 0) {\n        throw new Error('Die Liste darf nicht alle identischen Elemente enthalten.');\n    }\n\n    return numbers.map(num => (num - min) / range);\n};\n\n// Beispielaufruf\nconst result = rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]);\nconsole.log(result); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n    return string0\n        .split('')\n        .map(char => {\n            if (char === char.toUpperCase()) {\n                return char.toLowerCase();\n            } else {\n                return char.toUpperCase();\n            }\n        })\n        .join('');\n};\n\n// Testbeispiel\nconsole.log(flip_case('Hello')); // Ausgabe: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(num => num > 0);\n};\n\n// Beispieltests\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n    if (n <= 1) return false; // 1 and numbers less than 1 are not prime\n    if (n <= 3) return true;  // 2 and 3 are prime numbers\n\n    if (n % 2 === 0 || n % 3 === 0) return false; // eliminate multiples of 2 and 3\n\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(is_prime(6));    // False\nconsole.log(is_prime(101));  // True\nconsole.log(is_prime(11));   // True\nconsole.log(is_prime(13441));// True\nconsole.log(is_prime(61));   // True\nconsole.log(is_prime(4));    // False\nconsole.log(is_prime(1));    // False"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n    // Erstellen eines Sets, um Duplikate zu entfernen\n    const uniqueSet = new Set(l);\n    \n    // Konvertieren des Sets zur\u00fcck zu einem Array\n    const uniqueArray = Array.from(uniqueSet);\n    \n    // Sortieren des Arrays\n    uniqueArray.sort((a, b) => a - b);\n    \n    return uniqueArray;\n}\n\n// Beispielaufruf\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import * as math from 'mathjs';\n\n// Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist.\nconst isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\n// Funktion zur Berechnung der Fibonacci-Zahlen.\nconst fibonacci = (num: number): number => {\n    if (num <= 1) return num;\n    let a = 0, b = 1, temp;\n    for (let i = 2; i <= num; i++) {\n        temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n};\n\n// Hauptfunktion zur Ermittlung der n-ten Fibonacci-Zahl, die auch eine Primzahl ist.\nconst prime_fib = function (n: number): number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n        const fibNum = fibonacci(index);\n        if (isPrime(fibNum)) {\n            count++;\n            if (count === n) {\n                return fibNum;\n            }\n        }\n        index++;\n    }\n};\n\n// Beispiele:\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    if (l.length < 3) {\n        return false;\n    }\n\n    // Sortiere die Liste\n    l.sort((a, b) => a - b);\n\n    // Durchlaufe die Liste und benutze zwei Zeiger, um Triples zu finden\n    for (let i = 0; i < l.length - 2; i++) {\n        // Vermeide Duplikate f\u00fcr das erste Element\n        if (i > 0 && l[i] === l[i - 1]) {\n            continue;\n        }\n\n        let left = i + 1;\n        let right = l.length - 1;\n\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    return false;\n};\n\n// Testf\u00e4lle\nconsole.log(triples_sum_to_zero([1, 3, 5, 0]));           // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1]));          // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7]));           // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7]));    // True\nconsole.log(triples_sum_to_zero([1]));                    // False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    const seenNumbers = new Set<number>();\n\n    for (let num of l) {\n        if (seenNumbers.has(-num)) {\n            return true;\n        }\n        seenNumbers.add(num);\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // False\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n < 0) {\n        throw new Error(\"Input must be a non-negative integer\");\n    }\n    \n    // Base cases\n    const baseCases = [0, 0, 2, 0];\n    if (n < 4) {\n        return baseCases[n];\n    }\n\n    // Initialize the first four values\n    let fib4Minus4 = 0; // fib4(0)\n    let fib4Minus3 = 0; // fib4(1)\n    let fib4Minus2 = 2; // fib4(2)\n    let fib4Minus1 = 0; // fib4(3)\n    let currentFib4 = 0; // Placeholder for the current fib4 value\n\n    for (let i = 4; i <= n; i++) {\n        currentFib4 = fib4Minus1 + fib4Minus2 + fib4Minus3 + fib4Minus4;\n        // Update the values for the next iteration\n        fib4Minus4 = fib4Minus3;\n        fib4Minus3 = fib4Minus2;\n        fib4Minus2 = fib4Minus1;\n        fib4Minus1 = currentFib4;\n    }\n\n    return currentFib4;\n};\n\n// Test cases\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>) : number  {\n    // Liste sortieren\n    const sortedList = l.slice().sort((a, b) => a - b);\n    const len = sortedList.length;\n\n    // Pr\u00fcfen, ob die Anzahl der Elemente gerade oder ungerade ist\n    if (len % 2 === 1) {\n        // Ungerade Anzahl von Elementen\n        return sortedList[Math.floor(len / 2)];\n    } else {\n        // Gerade Anzahl von Elementen\n        const mid1 = sortedList[len / 2 - 1];\n        const mid2 = sortedList[len / 2];\n        return (mid1 + mid2) / 2;\n    }\n};\n\n// Beispiele\nconsole.log(median([3, 1, 2, 4, 5])); // 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // 15.0"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n    const len = text.length;\n    for (let i = 0; i < len / 2; i++) {\n        if (text[i] !== text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// Testf\u00e4lle\nconsole.log(is_palindrome(''));        // True\nconsole.log(is_palindrome('aba'));     // True\nconsole.log(is_palindrome('aaaaa'));   // True\nconsole.log(is_palindrome('zbcd'));    // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n    const vowels = /[aeiouAEIOU]/g;\n    return text.replace(vowels, '');\n};\n\n// Test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n    for (const number of l) {\n        if (number >= t) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// Test cases\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // True\nconsole.log(below_threshold([1, 20, 4, 10], 5));  // False"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};\n\n// Beispielaufrufe\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n    // Convert both strings to sets of characters\n    const set0 = new Set(s0);\n    const set1 = new Set(s1);\n\n    // Check if both sets have the same size\n    if (set0.size !== set1.size) {\n        return false;\n    }\n\n    // Check if every character in set0 is also in set1\n    for (let char of set0) {\n        if (!set1.has(char)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    let a = 0;\n    let b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Test cases\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function(l1: Array<number>, l2: Array<number>): Array<number> {\n    // Convert both lists to sets to remove duplicates and for faster lookups\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Find the intersection of both sets\n    const intersection = [...set1].filter(item => set2.has(item));\n\n    // Sort the intersection list\n    intersection.sort((a, b) => a - b);\n\n    return intersection;\n}\n\n// Examples\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    let factor = 2;\n    while (factor <= n) {\n        if (n % factor === 0) {\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n\n// Testf\u00e4lle\nconsole.log(largest_prime_factor(13195));  // 29\nconsole.log(largest_prime_factor(2048));   // 2"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    return (n * (n + 1)) / 2;\n}\n\n// Testf\u00e4lle\nconsole.log(sum_to_n(30)); // 465\nconsole.log(sum_to_n(100)); // 5050\nconsole.log(sum_to_n(5)); // 15\nconsole.log(sum_to_n(10)); // 55\nconsole.log(sum_to_n(1)); // 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    // Die Ableitung eines konstanten Terms (xs[0]) ist 0, also \u00fcberspringen wir ihn\n    return xs.slice(1).map((coeff, index) => coeff * (index + 1));\n};\n\n// Testf\u00e4lle\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function(n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    let a = 0, b = 0, c = 1;\n\n    for (let i = 3; i <= n; i++) {\n        const next = a + b + c;\n        a = b;\n        b = c;\n        c = next;\n    }\n\n    return c;\n}\n\n// Tests\nconsole.log(fibfib(1));  // 0\nconsole.log(fibfib(5));  // 4\nconsole.log(fibfib(8));  // 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    // Definiere die Vokale\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    \n    // Z\u00e4hle die Vokale im String\n    let count = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.has(s[i])) {\n            count++;\n        }\n        // \u00dcberpr\u00fcfe ob 'y' am Ende des Wortes steht\n        if (s[i].toLowerCase() === 'y' && i === s.length - 1) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Beispielaufrufe\nconsole.log(vowels_count(\"abcde\")); // 2\nconsole.log(vowels_count(\"ACEDY\")); // 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n    // Step 1: Create a frequency map\n    const frequencyMap: { [key: number]: number } = {};\n\n    for (const num of lst) {\n        if (frequencyMap[num]) {\n            frequencyMap[num]++;\n        } else {\n            frequencyMap[num] = 1;\n        }\n    }\n\n    // Step 2: Find the largest number whose frequency is greater than or equal to the number itself\n    let result = -1;\n\n    for (const num in frequencyMap) {\n        const number = parseInt(num);\n        const frequency = frequencyMap[number];\n\n        if (frequency >= number && number > result) {\n            result = number;\n        }\n    }\n\n    // Step 3: Return the result\n    return result;\n};\n\n// Test cases\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Should return 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Should return 3\nconsole.log(search([5, 5, 4, 4, 4])); // Should return -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal places\n    return Math.round(area * 100) / 100;\n}\n\n// Example usage:\nconsole.log(triangle_area(3, 4, 5));  // 6.00\nconsole.log(triangle_area(1, 2, 10)); // -1"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n    // Funktion, um zu pr\u00fcfen, ob eine Liste palindromisch ist\n    const isPalindrome = (arr: Array<number>): boolean => {\n        const len = arr.length;\n        for (let i = 0; i < len / 2; i++) {\n            if (arr[i] !== arr[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Berechne die Summe der Elemente in q\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Pr\u00fcfe, ob q palindromisch ist und die Summe der Elemente <= w ist\n    return isPalindrome(q) && sum <= w;\n};\n\n// Testf\u00e4lle\nconsole.log(will_it_fly([1, 2], 5)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 1)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 9)); // \u279e True\nconsole.log(will_it_fly([3], 5)); // \u279e True"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function(a: number): boolean {\n    if (a >= 100) return false;\n\n    // Funktion, um zu pr\u00fcfen, ob eine Zahl eine Primzahl ist\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    // Liste der Primzahlen kleiner als 100\n    const primes: number[] = [];\n    for (let i = 2; i < 100; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    // Alle Kombinationen von drei verschiedenen Primzahlen pr\u00fcfen\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i + 1; j < primes.length; j++) {\n            for (let k = j + 1; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n};\n\n// Testbeispiel\nconsole.log(is_multiply_prime(30)); // True\nconsole.log(is_multiply_prime(60)); // False (60 = 2 * 2 * 3 * 5, nicht genau 3 Primzahlen)\nconsole.log(is_multiply_prime(105)); // True (105 = 3 * 5 * 7)\nconsole.log(is_multiply_prime(29)); // False (29 ist eine Primzahl, kein Produkt von 3 Primzahlen)"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function(decimal: number): string {\n    // Umwandlung der Dezimalzahl in einen Bin\u00e4rstring\n    const binaryString = decimal.toString(2);\n    // R\u00fcckgabe des formatierten Strings\n    return `db${binaryString}db`;\n};\n\n// Beispiele f\u00fcr die Verwendung der Funktion\nconsole.log(decimal_to_binary(15));  // Ausgabe: \"db1111db\"\nconsole.log(decimal_to_binary(32));  // Ausgabe: \"db100000db\""}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n    // If the string length is less than 3, it cannot be \"happy\"\n    if (s.length < 3) {\n        return false;\n    }\n    \n    // Iterate through the string, checking each group of 3 consecutive characters\n    for (let i = 0; i <= s.length - 3; i++) {\n        const char1 = s[i];\n        const char2 = s[i + 1];\n        const char3 = s[i + 2];\n        \n        // Check if all three characters in the group are different\n        if (char1 === char2 || char1 === char3 || char2 === char3) {\n            return false;\n        }\n    }\n    \n    // If all groups of 3 characters are different, the string is \"happy\"\n    return true;\n};\n\n// Test cases\nconsole.log(is_happy(\"a\"));       // False\nconsole.log(is_happy(\"aa\"));      // False\nconsole.log(is_happy(\"abcd\"));    // True\nconsole.log(is_happy(\"aabb\"));    // False\nconsole.log(is_happy(\"adb\"));     // True\nconsole.log(is_happy(\"xyy\"));     // False"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    return grades.map((gpa) => {\n        if (gpa === 4.0) return 'A+';\n        if (gpa > 3.7) return 'A';\n        if (gpa > 3.3) return 'A-';\n        if (gpa > 3.0) return 'B+';\n        if (gpa > 2.7) return 'B';\n        if (gpa > 2.3) return 'B-';\n        if (gpa > 2.0) return 'C+';\n        if (gpa > 1.7) return 'C';\n        if (gpa > 1.3) return 'C-';\n        if (gpa > 1.0) return 'D+';\n        if (gpa > 0.7) return 'D';\n        if (gpa > 0.0) return 'D-';\n        return 'E';\n    });\n};\n\n// Beispiel:\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const prime_length = function (string0: string): boolean {\n    const length = string0.length;\n\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true;  // 2 and 3 are prime numbers\n\n        // Eliminate even numbers and multiples of 3\n        if (num % 2 === 0 || num % 3 === 0) return false;\n\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n\n        return true;\n    };\n\n    return isPrime(length);\n};\n\n// Test cases\nconsole.log(prime_length('Hello'));    // True (Length is 5)\nconsole.log(prime_length('abcdcba'));  // True (Length is 7)\nconsole.log(prime_length('kittens'));  // True (Length is 7)\nconsole.log(prime_length('orange'));   // False (Length is 6)"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    // Schritt 1: Ziffern extrahieren und summieren\n    let sum = 0;\n    let numStr = N.toString();\n    \n    for (let i = 0; i < numStr.length; i++) {\n        sum += parseInt(numStr[i], 10);\n    }\n    \n    // Schritt 2: Summe in bin\u00e4re Darstellung umwandeln\n    let binarySum = sum.toString(2);\n    \n    return binarySum;\n};\n\n// Testf\u00e4lle\nconsole.log(solve(1000)); // Ausgabe: \"1\"\nconsole.log(solve(150));  // Ausgabe: \"110\"\nconsole.log(solve(147));  // Ausgabe: \"1100\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<[number, number]> {\n    // Sammeln der Positionen von 'x' in der Liste\n    const positions: Array<[number, number]> = [];\n    \n    for (let row = 0; row < lst.length; row++) {\n        for (let col = 0; col < lst[row].length; col++) {\n            if (lst[row][col] === x) {\n                positions.push([row, col]);\n            }\n        }\n    }\n\n    // Sortieren der Positionen: zuerst nach Zeilen in aufsteigender Reihenfolge,\n    // dann nach Spalten in absteigender Reihenfolge\n    positions.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];  // zuerst nach Zeilen sortieren\n        } else {\n            return b[1] - a[1];  // dann nach Spalten sortieren (absteigend)\n        }\n    });\n\n    return positions;\n};\n\n// Testbeispiele\nconsole.log(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1));  // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(get_row([], 1));  // Output: []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));  // Output: [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n    if (lst.length < 2) {\n        return null;\n    }\n\n    const sortedList = [...lst].sort((a, b) => a - b);\n    let smallest = sortedList[0];\n    for (let i = 1; i < sortedList.length; i++) {\n        if (sortedList[i] > smallest) {\n            return sortedList[i];\n        }\n    }\n\n    return null;\n}\n\n// Testf\u00e4lle\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // 2\nconsole.log(next_smallest([])); // null\nconsole.log(next_smallest([1, 1])); // null"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n    // Zuerst teilen wir den String in S\u00e4tze auf, indem wir nach '.', '!' oder '?' splitten\n    const sentences = S.split(/[.!?]/);\n    \n    // Z\u00e4hlen der S\u00e4tze, die mit \"Ich\" beginnen\n    let count = 0;\n    sentences.forEach(sentence => {\n        // Trim leading and trailing whitespace and check if it starts with \"Ich\"\n        const trimmedSentence = sentence.trim();\n        if (trimmedSentence.startsWith(\"Ich\")) {\n            count++;\n        }\n    });\n    \n    return count;\n};\n\n// Beispielaufrufe\nconsole.log(is_bored(\"Hello world\")); // 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. Ich liebe dieses Wetter\")); // 1\nconsole.log(is_bored(\"Ich bin m\u00fcde. Wie geht es dir? Ich habe Hunger!\")); // 2"}
{"task_id": "typescript/40", "language": "typescript", "completion": "/**\n * Pr\u00fcft, ob eine Zahl eine Primzahl ist.\n * @param num - Die zu pr\u00fcfende Zahl.\n * @returns True, wenn die Zahl eine Primzahl ist; andernfalls false.\n */\nfunction isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\n/**\n * Berechnet die Summe der Ziffern einer Zahl.\n * @param num - Die Zahl, deren Ziffernsumme berechnet werden soll.\n * @returns Die Summe der Ziffern.\n */\nfunction sumOfDigits(num: number): number {\n    return num\n        .toString()\n        .split('')\n        .reduce((sum, digit) => sum + parseInt(digit), 0);\n}\n\n/**\n * Findet die gr\u00f6\u00dfte Primzahl in einer Liste und gibt die Summe ihrer Ziffern zur\u00fcck.\n * @param lst - Die Liste der ganzen Zahlen.\n * @returns Die Summe der Ziffern der gr\u00f6\u00dften Primzahl in der Liste.\n */\nconst findLargestPrimeDigitSum = function (lst: Array<number>): number {\n    let largestPrime = -1;\n    for (const num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    return largestPrime !== -1 ? sumOfDigits(largestPrime) : 0;\n};\n\n// Testf\u00e4lle\nconsole.log(findLargestPrimeDigitSum([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])); // Output: 10\nconsole.log(findLargestPrimeDigitSum([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])); // Output: 25\nconsole.log(findLargestPrimeDigitSum([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])); // Output: 13\nconsole.log(findLargestPrimeDigitSum([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])); // Output: 11\nconsole.log(findLargestPrimeDigitSum([0, 81, 12, 3, 1, 21])); // Output: 3\nconsole.log(findLargestPrimeDigitSum([0, 8, 1, 2, 1, 7])); // Output: 7"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: { [key: string]: string }): boolean {\n    const keys = Object.keys(dict);\n\n    // R\u00fcckgabe False, wenn das W\u00f6rterbuch leer ist.\n    if (keys.length === 0) {\n        return false;\n    }\n\n    // \u00dcberpr\u00fcfen, ob alle Schl\u00fcssel Strings sind und ob sie alle Gro\u00dfbuchstaben oder alle Kleinbuchstaben sind.\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (const key of keys) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key !== key.toLowerCase()) {\n            allLowerCase = false;\n        }\n        if (key !== key.toUpperCase()) {\n            allUpperCase = false;\n        }\n    }\n\n    // R\u00fcckgabe True, wenn alle Schl\u00fcssel entweder in Kleinbuchstaben oder in Gro\u00dfbuchstaben sind.\n    return allLowerCase || allUpperCase;\n};\n\n// Testf\u00e4lle\nconsole.log(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})); // sollte True zur\u00fcckgeben\nconsole.log(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // sollte False zur\u00fcckgeben\nconsole.log(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // sollte False zur\u00fcckgeben\nconsole.log(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // sollte False zur\u00fcckgeben\nconsole.log(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"})); // sollte True zur\u00fcckgeben"}
{"task_id": "typescript/42", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst closest_integer = function (value: string): number {\n    // Parse the string to a number\n    const num = math.number(value);\n    \n    // Check if the number is equidistant to two integers (i.e., has a fractional part of 0.5)\n    if (Math.abs(num % 1) === 0.5) {\n        // Round away from zero\n        return num > 0 ? Math.ceil(num) : Math.floor(num);\n    } else {\n        // Use regular rounding\n        return Math.round(num);\n    }\n};\n\n// Beispiele\nconsole.log(closest_integer(\"10\"));   // 10\nconsole.log(closest_integer(\"15.3\")); // 15\nconsole.log(closest_integer(\"14.5\")); // 15\nconsole.log(closest_integer(\"-14.5\"));// -15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    let pile: Array<number> = [];\n    let current = n;\n\n    // Add the initial number of stones to the pile\n    pile.push(current);\n\n    // Determine the parity (odd or even) of the initial number\n    let isOdd = current % 2 !== 0;\n\n    // Loop to create the remaining levels of the pile\n    for (let i = 1; i < n; i++) {\n        // If the current number is odd, find the next odd number\n        // If the current number is even, find the next even number\n        if (isOdd) {\n            current += 2;  // next odd number\n        } else {\n            current += 2;  // next even number\n        }\n\n        // Add the current number of stones to the pile\n        pile.push(current);\n    }\n\n    return pile;\n};\n\n// Beispielaufrufe\nconsole.log(make_a_pile(3));  // Output: [3, 5, 7]\nconsole.log(make_a_pile(4));  // Output: [4, 6, 8, 10]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n    // Split the string by either commas or spaces (or both)\n    return s.split(/[, ]+/).filter(word => word.length > 0);\n};\n\n// Test cases\nconsole.log(words_string(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nconsole.log(words_string(\" Spaces  and, commas , mixed \")); // [\"Spaces\", \"and\", \"commas\", \"mixed\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Wenn x gr\u00f6\u00dfer als y ist, ist der Bereich ung\u00fcltig\n    if (x > y) {\n        return -1;\n    }\n\n    // Wir beginnen mit der gr\u00f6\u00dften Zahl im Bereich y\n    let largestEven = y;\n\n    // Wenn y ungerade ist, reduzieren wir es um 1, um die n\u00e4chste gerade Zahl zu finden\n    if (largestEven % 2 !== 0) {\n        largestEven -= 1;\n    }\n\n    // \u00dcberpr\u00fcfen, ob die gefundene gerade Zahl im Bereich liegt\n    if (largestEven >= x) {\n        return largestEven;\n    } else {\n        return -1;\n    }\n};\n\n// Beispieltests\nconsole.log(choose_num(12, 15)); // Ausgabe: 14\nconsole.log(choose_num(13, 12)); // Ausgabe: -1\nconsole.log(choose_num(8, 10));  // Ausgabe: 10\nconsole.log(choose_num(7, 7));   // Ausgabe: -1"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number) : any {\n    // Wenn n gr\u00f6\u00dfer als m ist, geben wir -1 zur\u00fcck\n    if (n > m) {\n        return -1;\n    }\n\n    // Berechne die Anzahl der Zahlen von n bis m (einschlie\u00dflich)\n    const count = m - n + 1;\n\n    // Berechne die Summe der Zahlen von n bis m (einschlie\u00dflich)\n    const sum = ((n + m) * count) / 2;\n\n    // Berechne den Durchschnitt und runde auf die n\u00e4chste Ganzzahl\n    const average = Math.round(sum / count);\n\n    // Konvertiere die gerundete Durchschnittszahl in bin\u00e4r\n    const binaryAverage = \"0b\" + average.toString(2);\n\n    return binaryAverage;\n}\n\n// Testf\u00e4lle\nconsole.log(rounded_avg(1, 5));    // \"0b11\"\nconsole.log(rounded_avg(7, 5));    // -1\nconsole.log(rounded_avg(10, 20));  // \"0b1111\"\nconsole.log(rounded_avg(20, 33));  // \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    const result: Array<number> = [];\n    \n    // Hilfsfunktion zur Berechnung der Fakult\u00e4t\n    const factorial = (num: number): number => {\n        if (num === 0 || num === 1) return 1;\n        let product = 1;\n        for (let i = 1; i <= num; i++) {\n            product *= i;\n        }\n        return product;\n    };\n\n    // Hilfsfunktion zur Berechnung der Summe der Zahlen von 1 bis num\n    const sumUpTo = (num: number): number => {\n        let sum = 0;\n        for (let i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    };\n\n    // Iteriere von 1 bis n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // i ist gerade, berechne die Fakult\u00e4t von i\n            result.push(factorial(i));\n        } else {\n            // i ist ungerade, berechne die Summe der Zahlen von 1 bis i\n            result.push(sumUpTo(i));\n        }\n    }\n\n    return result;\n};\n\n// Beispielaufruf\nconsole.log(f(5)); // [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const isPalindrome = (num: number): boolean => {\n    const str = num.toString();\n    return str === str.split('').reverse().join('');\n};\n\nconst even_odd_palindrome = function (n: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\n// Beispiel 1:\nconsole.log(even_odd_palindrome(3));  // Ausgabe: [1, 2]\n\n// Beispiel 2:\nconsole.log(even_odd_palindrome(12)); // Ausgabe: [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>): boolean {\n    const n = arr.length;\n    if (n === 0) return true;\n    \n    let breakPoints = 0;\n    \n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            breakPoints++;\n        }\n    }\n    \n    if (breakPoints == 0) return true;\n    if (breakPoints == 1) return arr[n - 1] <= arr[0];\n    \n    return false;\n}\n\n// Testf\u00e4lle\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False\nconsole.log(move_one_ball([])); // True\nconsole.log(move_one_ball([1, 2, 3, 4, 5])); // True\nconsole.log(move_one_ball([2, 3, 4, 5, 1])); // True\nconsole.log(move_one_ball([1, 3, 2])); // False"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: number[], lst2: number[]): string {\n    // Check if lst1 already contains only even numbers\n    const allEvenInLst1 = lst1.every(num => num % 2 === 0);\n    if (allEvenInLst1) return \"YES\";\n    \n    // Check if lst2 contains at least one even number\n    const hasEvenInLst2 = lst2.some(num => num % 2 === 0);\n    if (!hasEvenInLst2) return \"NO\";\n    \n    // If lst1 has odd numbers and lst2 has at least one even number, return \"YES\"\n    return \"YES\";\n};\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\"\nconsole.log(exchange([2, 4, 6], [1, 3, 5])); // \"YES\"\nconsole.log(exchange([1, 3, 5], [7, 9, 11])); // \"NO\""}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): [string, boolean] {\n    // Schritt 1: Entferne alle Zeichen aus `s`, die in `c` vorkommen\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    \n    // Schritt 2: \u00dcberpr\u00fcfe, ob die resultierende Zeichenkette ein Palindrom ist\n    let isPalindrome = result === result.split('').reverse().join('');\n    \n    // Schritt 3: Gib das Tupel zur\u00fcck\n    return [result, isPalindrome];\n};\n\n// Beispiele\nconsole.log(reverse_delete(\"abcde\", \"ae\"));       // ('bcd', false)\nconsole.log(reverse_delete(\"abcdef\", \"b\"));       // ('acdef', false)\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));   // ('cdedc', true)"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n    let totalWaterUnits = 0;\n\n    // Berechne die Gesamtanzahl der Wasser-Einheiten im Gitter\n    for (let row of grid) {\n        for (let cell of row) {\n            totalWaterUnits += cell;\n        }\n    }\n\n    // Berechne die Anzahl der ben\u00f6tigten Eimersenkungen\n    // Math.ceil wird verwendet, um sicherzustellen, dass wir auf die n\u00e4chste ganze Zahl aufrunden\n    return Math.ceil(totalWaterUnits / capacity);\n};\n\n// Testf\u00e4lle\nconsole.log(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Ausgabe: 6\nconsole.log(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Ausgabe: 5\nconsole.log(max_fill([[0,0,0], [0,0,0]], 5)); // Ausgabe: 0"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function (s: string, n: number): Array<string> {\n    // Funktion, um die Anzahl der Konsonanten in einem Wort zu z\u00e4hlen\n    const countConsonants = (word: string): number => {\n        const vowels = 'aeiouAEIOU';\n        let count = 0;\n        for (let char of word) {\n            if (!vowels.includes(char)) {\n                count++;\n            }\n        }\n        return count;\n    };\n\n    // Aufteilen der Zeichenkette in W\u00f6rter\n    const words = s.split(' ');\n\n    // Filtern der W\u00f6rter, die genau n Konsonanten enthalten\n    const result = words.filter(word => countConsonants(word) === n);\n\n    return result;\n};\n\n// Beispiele zur Veranschaulichung\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Sortiere das Array in aufsteigender Reihenfolge\n    arr.sort((a, b) => a - b);\n    \n    // Nimm die letzten k Elemente des sortierten Arrays, da diese die gr\u00f6\u00dften sind\n    const result = arr.slice(-k);\n    \n    // R\u00fcckgabe des resultierenden Arrays\n    return result;\n}\n\n// Beispielaufrufe:\nconsole.log(maximum([-3, -4, 5], 3)); // Ausgabe: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // Ausgabe: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Ausgabe: [2]"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n};\n\n// Beispiel-Test\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(add_elements(arr, k)); // Ausgabe: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nconst intersection = function(interval1: [number, number], interval2: [number, number]): string {\n    const start1 = interval1[0];\n    const end1 = interval1[1];\n    const start2 = interval2[0];\n    const end2 = interval2[1];\n\n    // Bestimmen des Start- und Endpunkts der Schnittmenge\n    const intersectStart = Math.max(start1, start2);\n    const intersectEnd = Math.min(end1, end2);\n\n    // \u00dcberpr\u00fcfen, ob die Intervalle sich \u00fcberschneiden\n    if (intersectStart > intersectEnd) {\n        return \"NO\";\n    }\n\n    const intersectionLength = intersectEnd - intersectStart + 1;\n\n    // \u00dcberpr\u00fcfen, ob die L\u00e4nge der Schnittmenge eine Primzahl ist\n    return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n}\n\n// Beispieleingaben\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n    const triNumbers: Array<number> = [];\n\n    // Helper function to compute the tri(n) value recursively\n    const computeTri = (num: number): number => {\n        if (num === 0) return 1; // Define tri(0) = 1 as a base case\n        if (num === 1) return 3;\n        if (num % 2 === 0) {\n            return 1 + num / 2;\n        } else {\n            return computeTri(num - 1) + computeTri(num - 2) + computeTri(num + 1);\n        }\n    };\n\n    // Generate the first n + 1 numbers in the Tribonacci sequence\n    for (let i = 0; i <= n; i++) {\n        triNumbers.push(computeTri(i));\n    }\n\n    return triNumbers;\n};\n\n// Example usage:\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n    // Konvertiere die Zahl in eine Zeichenkette, um jede Ziffer einzeln zu durchlaufen\n    const strNum = n.toString();\n    // Array, um alle ungeraden Ziffern zu speichern\n    const oddDigits: number[] = [];\n    \n    // Durchlaufe jede Ziffer der Zeichenkette\n    for (const char of strNum) {\n        const digit = Number(char);\n        // Pr\u00fcfe, ob die Ziffer ungerade ist\n        if (digit % 2 !== 0) {\n            oddDigits.push(digit);\n        }\n    }\n    \n    // Wenn keine ungeraden Ziffern gefunden wurden, gib 0 zur\u00fcck\n    if (oddDigits.length === 0) {\n        return 0;\n    }\n    \n    // Berechne das Produkt der ungeraden Ziffern\n    return oddDigits.reduce((product, digit) => product * digit, 1);\n};\n\n// Testf\u00e4lle\nconsole.log(digits(1));   // 1\nconsole.log(digits(4));   // 0\nconsole.log(digits(235)); // 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n    let stack: string[] = [];\n    let nested: boolean = false;\n    \n    for (let char of string0) {\n        if (char === '[') {\n            stack.push(char);\n        } else if (char === ']') {\n            if (stack.length === 0) {\n                return false; // Unmatched closing bracket\n            }\n            stack.pop();\n            if (stack.length > 0) {\n                nested = true; // There is at least one nesting\n            }\n        }\n    }\n    \n    return stack.length === 0 && nested;\n};\n\n// Test cases\nconsole.log(is_nested('[[]]')); // \u279e True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(is_nested('[][]')); // \u279e False\nconsole.log(is_nested('[]')); // \u279e False\nconsole.log(is_nested('[[][]]')); // \u279e True\nconsole.log(is_nested('[[]][[')); // \u279e True"}
{"task_id": "typescript/60", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst sum_squares = function (lst: Array<number>): number {\n    // Runde jedes Element auf die n\u00e4chste Ganzzahl (Ceiling) und quadriere es\n    const squaredElements = lst.map(num => {\n        const ceiledNum = math.ceil(num);\n        return ceiledNum * ceiledNum;\n    });\n\n    // Berechne die Summe der quadrierten Elemente\n    const sum = squaredElements.reduce((acc, curr) => acc + curr, 0);\n\n    return sum;\n}\n\n// Testbeispiele\nconsole.log(sum_squares([1, 2, 3])); // Ausgabe: 14\nconsole.log(sum_squares([1, 4, 9])); // Ausgabe: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Ausgabe: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Ausgabe: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Ausgabe: 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n    // Trim any trailing whitespace from the input string\n    txt = txt.trim();\n    \n    // If the string is empty after trimming, return false\n    if (txt.length === 0) return false;\n\n    // Get the last character of the trimmed string\n    const lastChar = txt[txt.length - 1];\n\n    // Check if the last character is an alphabetic character\n    const isAlphabetic = /^[a-zA-Z]$/.test(lastChar);\n\n    // Split the string into words\n    const words = txt.split(' ');\n\n    // Get the last word in the string\n    const lastWord = words[words.length - 1];\n\n    // Check if the last character is part of the last word\n    const isPartOfWord = lastWord.includes(lastChar);\n\n    // Return true if the last character is alphabetic and not part of the last word\n    return isAlphabetic && !isPartOfWord;\n}\n\n// Test cases\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n// Test cases\nconsole.log(can_arrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(can_arrange([1, 2, 3]));       // Output: -1\nconsole.log(can_arrange([5, 4, 3, 2, 1])); // Output: 1\nconsole.log(can_arrange([1, 3, 2, 4, 5])); // Output: 2\nconsole.log(can_arrange([10, 20, 30, 25])); // Output: 3"}
{"task_id": "typescript/63", "language": "typescript", "completion": "function largest_smallest_integers(lst: Array<number>): [number | null, number | null] {\n    let largestNegative: number | null = null;\n    let smallestPositive: number | null = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n\n// Test cases\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largest_smallest_integers([])); // Output: [null, null]\nconsole.log(largest_smallest_integers([0])); // Output: [null, null]\nconsole.log(largest_smallest_integers([-3, -1, -7, 2, 0, 5])); // Output: [-1, 2]\nconsole.log(largest_smallest_integers([-5, -2, -1, 1, 2, 3])); // Output: [-1, 1]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const factorial = (num: number): number => {\n    if (num <= 1) return 1;\n    return num * factorial(num - 1);\n};\n\nconst special_factorial = function (n: number): number {\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n};\n\n// Beispielaufruf\nconsole.log(special_factorial(4));  // Ausgabe: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "// Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist\nconst isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n};\n\n// Hauptfunktion, die die W\u00f6rter filtert\nconst words_in_sentence = (sentence: string): string => {\n    // Aufteilen des Satzes in W\u00f6rter\n    const words = sentence.split(' ');\n\n    // Filtern der W\u00f6rter, deren L\u00e4ngen Primzahlen sind\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n\n    // Zusammenf\u00fcgen der gefilterten W\u00f6rter in einen String\n    return primeLengthWords.join(' ');\n};\n\n// Beispiel 1\nconsole.log(words_in_sentence(\"This is a test\")); // Ausgabe: \"is\"\n\n// Beispiel 2\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Ausgabe: \"go for\""}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string): boolean {\n    // Split the fractions into numerator and denominator\n    const [xNumerator, xDenominator] = x.split('/').map(Number);\n    const [nNumerator, nDenominator] = n.split('/').map(Number);\n\n    // Multiply the numerators and denominators\n    const resultNumerator = xNumerator * nNumerator;\n    const resultDenominator = xDenominator * nDenominator;\n\n    // Check if the result is an integer\n    return resultNumerator % resultDenominator === 0;\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    // Funktion zur Berechnung der Ziffernsumme einer Zahl\n    const digitSum = (num: number): number => {\n        return Math.abs(num).toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    };\n\n    // Erstellen eines Arrays von Objekten, die die Zahl und ihre Ziffernsumme enthalten\n    const withSums = nums.map((num, index) => ({\n        num,\n        sum: digitSum(num),\n        index\n    }));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dem urspr\u00fcnglichen Index\n    withSums.sort((a, b) => {\n        if (a.sum === b.sum) {\n            return a.index - b.index;\n        }\n        return a.sum - b.sum;\n    });\n\n    // Extrahieren der sortierten Zahlen\n    return withSums.map(item => item.num);\n};\n\n// Beispielaufrufe\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: number[]): number {\n    // Hilfsfunktion, um die erste und die letzte Ziffer einer Zahl zu ermitteln\n    const getDigits = (num: number): [number, number] => {\n        const str = Math.abs(num).toString();\n        const firstDigit = Number(str[0]);\n        const lastDigit = Number(str[str.length - 1]);\n        return [firstDigit, lastDigit];\n    };\n\n    let count = 0;\n\n    for (const num of nums) {\n        if (num > 10) {\n            const [firstDigit, lastDigit] = getDigits(num);\n            const isFirstOdd = firstDigit % 2 !== 0;\n            const isLastOdd = lastDigit % 2 !== 0;\n\n            if (isFirstOdd && isLastOdd) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};\n\n// Testf\u00e4lle\nconsole.log(specialFilter([15, -73, 14, -15])); // => 1 \nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // => 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n    // Schritt 1: Erstellen des Arrays a\n    const a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    let count = 0;\n\n    // Schritt 2: Durchlaufen aller m\u00f6glichen Tripel (i, j, k)\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                // Schritt 3: Pr\u00fcfen, ob die Summe ein Vielfaches von 3 ist\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};\n\n// Beispiel\nconst n = 5;\nconsole.log(get_max_triples(n));  // Ausgabe: 1"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // Wenn einer der Planeten nicht gefunden wird, geben wir ein leeres Array zur\u00fcck.\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Bestimme die Start- und Endindexe, um die Planeten dazwischen zu extrahieren.\n    const startIndex = Math.min(index1, index2) + 1;\n    const endIndex = Math.max(index1, index2);\n    \n    return planets.slice(startIndex, endIndex);\n};\n\n// Beispiele\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\"));  // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf(\"Pluto\", \"Earth\"));    // [] (ung\u00fcltiger Planet)"}
{"task_id": "typescript/71", "language": "typescript", "completion": "// Hilfsfunktion, um zu \u00fcberpr\u00fcfen, ob eine Zahl eine Primzahl ist\nfunction isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\n// Hauptfunktion, die den Wert von x oder y basierend auf der Primzahl\u00fcberpr\u00fcfung zur\u00fcckgibt\nconst x_or_y = function (n: number, x: number, y: number): number {\n    return isPrime(n) ? x : y;\n};\n\n// Testbeispiele\nconsole.log(x_or_y(7, 34, 12)); // sollte 34 zur\u00fcckgeben\nconsole.log(x_or_y(15, 8, 5));  // sollte 5 zur\u00fcckgeben"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    return lst\n        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0) // Filtert ungerade, positive, ganze Zahlen\n        .reduce((sum, num) => sum + Math.pow(num, 2), 0); // Quadriert die gefilterten Zahlen und summiert sie\n};\n\n// Testf\u00e4lle\nconsole.log(double_the_difference([1, 3, 2, 0])); // Output: 10\nconsole.log(double_the_difference([-1, -2, 0])); // Output: 0\nconsole.log(double_the_difference([9, -2])); // Output: 81\nconsole.log(double_the_difference([0])); // Output: 0\nconsole.log(double_the_difference([])); // Output: 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        let capCount = 0;\n        let smCount = 0;\n\n        for (let char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n\n        const strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    });\n\n    return `${class_name}.${strongestExtension}`;\n}\n\n// Beispielaufruf\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']));  // Ausgabe: 'Slices.SErviNGSliCes'\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC']));  // Ausgabe: 'my_class.AA'"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n    // Funktion, um alle Rotationen eines Strings zu erzeugen\n    const getAllRotations = (str: string): string[] => {\n        const rotations: string[] = [];\n        for (let i = 0; i < str.length; i++) {\n            const rotation = str.slice(i) + str.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    }\n\n    // Alle Rotationen des zweiten Wortes erzeugen\n    const rotations = getAllRotations(b);\n\n    // \u00dcberpr\u00fcfen, ob eine der Rotationen ein Teilstring des ersten Wortes ist\n    for (const rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Testf\u00e4lle\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number0: number): string {\n    // Definieren Sie die r\u00f6mischen Symbole und ihre Werte\n    const romanSymbols: { [key: number]: string } = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    };\n\n    let result = '';\n    let num = number0;\n\n    // Gehe durch die r\u00f6mischen Symbole und Werte\n    for (let value in romanSymbols) {\n        const intValue = parseInt(value);\n        while (num >= intValue) {\n            result += romanSymbols[intValue];\n            num -= intValue;\n        }\n    }\n\n    return result;\n}\n\n// Beispiele zur \u00dcberpr\u00fcfung\nconsole.log(int_to_mini_roman(19));   // 'xix'\nconsole.log(int_to_mini_roman(152));  // 'clii'\nconsole.log(int_to_mini_roman(426));  // 'cdxxvi'\nconsole.log(int_to_mini_roman(1000)); // 'm'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // Sortiere die Seiten so, dass a <= b <= c\n    const sides = [a, b, c].sort((x, y) => x - y);\n\n    // \u00dcberpr\u00fcfe den Satz des Pythagoras\n    return sides[0]**2 + sides[1]**2 === sides[2]**2;\n};\n\n// Beispielaufrufe zur \u00dcberpr\u00fcfung\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n    const hasLetters = /[a-zA-Z]/.test(s);\n\n    if (hasLetters) {\n        return Array.from(s).map(char => {\n            if (char >= 'a' && char <= 'z') {\n                return char.toUpperCase();\n            } else if (char >= 'A' && char <= 'Z') {\n                return char.toLowerCase();\n            } else {\n                return char;\n            }\n        }).join('');\n    } else {\n        return s.split('').reverse().join('');\n    }\n};\n\n// Testf\u00e4lle\nconsole.log(solve(\"1234\")); // Output: \"4321\"\nconsole.log(solve(\"ab\")); // Output: \"AB\"\nconsole.log(solve(\"#a@C\")); // Output: \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import * as crypto from 'crypto';\n\nconst string_to_md5 = function (text: string): string | null {\n    if (text === '') {\n        return null;\n    }\n    const hash = crypto.createHash('md5').update(text).digest('hex');\n    return hash;\n}\n\n// Beispielaufruf\nconsole.log(string_to_md5('Hello world')); // Gibt '3e25960a79dbc69b674cd4ec67a72c62' zur\u00fcck"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n    // Determine the lower and upper bounds\n    const lower = Math.min(a, b);\n    const upper = Math.max(a, b);\n  \n    // Initialize an empty array to hold the result\n    const result: Array<number> = [];\n  \n    // Iterate through the range from lower to upper\n    for (let i = lower; i <= upper; i++) {\n        // Check if the current number is even and a single digit\n        if (i % 2 === 0 && i >= 0 && i <= 9) {\n            result.push(i);\n        }\n    }\n  \n    // Return the result array\n    return result;\n}\n\n// Example usages\nconsole.log(generate_integers(2, 8));  // [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2));  // [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14));  // []"}

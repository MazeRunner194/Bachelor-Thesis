{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    \n    for (operation in operations) {\n        balance += operation\n        if (balance < 0) {\n            return true\n        }\n    }\n    \n    return false\n}\n\nfun main() {\n    println(belowZero(listOf(1, 2, 3))) // False\n    println(belowZero(listOf(1, 2, -4, 5))) // True\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): Pair<Int, Int> {\n    val sum = numbers.sum()\n    val product = if (numbers.isEmpty()) 1 else numbers.reduce { acc, i -> acc * i }\n    return Pair(sum, product)\n}\n\n// Test cases\nfun main() {\n    println(sumProduct(emptyList())) // Output: (0, 1)\n    println(sumProduct(listOf(1, 2, 3, 4))) // Output: (10, 24)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    // Ensure the strings are of the same length\n    if (a.length != b.length) {\n        throw IllegalArgumentException(\"Input strings must be of the same length\")\n    }\n\n    val result = StringBuilder()\n\n    for (i in a.indices) {\n        val charA = a[i]\n        val charB = b[i]\n        \n        // XOR operation between characters\n        result.append(if (charA == charB) '0' else '1')\n    }\n\n    return result.toString()\n}\n\n// Example usage:\nfun main() {\n    val a = \"010\"\n    val b = \"110\"\n    println(stringXor(a, b))  // Output: \"100\"\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<String>): String? {\n    if (strings.isEmpty()) return null\n    return strings.maxByOrNull { it.length }\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var num1 = a\n    var num2 = b\n\n    while (num2 != 0) {\n        val temp = num2\n        num2 = num1 % num2\n        num1 = temp\n    }\n\n    return num1\n}\n\n// Test cases\nfun main() {\n    println(greatestCommonDivisor(3, 5)) // Output: 1\n    println(greatestCommonDivisor(25, 15)) // Output: 5\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    // Mapping of number words to their respective values\n    val numberMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n\n    // Reverse map to convert number values back to words\n    val reverseNumberMap = numberMap.entries.associate { (k, v) -> v to k }\n\n    // Split the input string by spaces to get the list of number words\n    val numberWords = numbers.split(\" \")\n    \n    // Convert the number words to their numeric values, sort them, and convert them back to words\n    val sortedNumberWords = numberWords.map { numberMap[it]!! }\n        .sorted()\n        .map { reverseNumberMap[it]!! }\n\n    // Join the sorted words back into a single string and return\n    return sortedNumberWords.joinToString(\" \")\n}\n\n// Example usage\nfun main() {\n    println(sortNumbers(\"three one five\"))  // Output: \"one three five\"\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val min = numbers.minOrNull() ?: return emptyList()\n    val max = numbers.maxOrNull() ?: return emptyList()\n    \n    if (min == max) {\n        // If all numbers are the same, return a list of zeros\n        return List(numbers.size) { 0.0 }\n    }\n\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    val result = StringBuilder()\n    \n    for (char in string) {\n        if (char.isUpperCase()) {\n            result.append(char.toLowerCase())\n        } else if (char.isLowerCase()) {\n            result.append(char.toUpperCase())\n        } else {\n            result.append(char)\n        }\n    }\n    \n    return result.toString()\n}\n\n// Example usage\nfun main() {\n    println(flipCase(\"Hello\"))  // Output: hELLO\n    println(flipCase(\"hELLO\"))  // Output: Hello\n    println(flipCase(\"123ABCabc\"))  // Output: 123abcABC\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n\nfun main() {\n    println(getPositive(listOf(-1, 2, -4, 5, 6))) // Output: [2, 5, 6]\n    println(getPositive(listOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) // Output: [5, 3, 2, 3, 9, 123, 1]\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false // 0 and 1 are not prime numbers\n    if (n <= 3) return true // 2 and 3 are prime numbers\n    \n    // Eliminate even numbers and multiples of 3\n    if (n % 2 == 0 || n % 3 == 0) return false\n    \n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    \n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.toSet().toList().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun primeFib(n: Int): Int {\n    // Helper function to check if a number is prime\n    fun isPrime(num: Int): Boolean {\n        if (num <= 1) return false\n        if (num == 2) return true\n        if (num % 2 == 0) return false\n        for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n\n    // Helper function to generate the next Fibonacci number\n    fun fibonacciSequence(): Sequence<Int> = sequence {\n        var a = 0\n        var b = 1\n        while (true) {\n            val temp = a\n            a = b\n            b += temp\n            yield(a)\n        }\n    }\n\n    var count = 0\n    val fibSeq = fibonacciSequence().iterator()\n\n    while (fibSeq.hasNext()) {\n        val fibNum = fibSeq.next()\n        if (isPrime(fibNum)) {\n            count++\n            if (count == n) {\n                return fibNum\n            }\n        }\n    }\n\n    throw IllegalArgumentException(\"There should always be an n-th prime Fibonacci number\")\n}\n\n// Test cases\nfun main() {\n    println(primeFib(1)) // Output: 2\n    println(primeFib(2)) // Output: 3\n    println(primeFib(3)) // Output: 5\n    println(primeFib(4)) // Output: 13\n    println(primeFib(5)) // Output: 89\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    // If the list has fewer than 3 elements, it's not possible to find three distinct elements that sum to zero\n    if (l.size < 3) return false\n\n    // Sort the list first\n    val sortedList = l.sorted()\n\n    // Iterate through the list and use two-pointer technique for the remaining part of the list\n    for (i in 0 until sortedList.size - 2) {\n        var left = i + 1\n        var right = sortedList.size - 1\n\n        while (left < right) {\n            val sum = sortedList[i] + sortedList[left] + sortedList[right]\n            when {\n                sum == 0 -> return true\n                sum < 0 -> left++\n                else -> right--\n            }\n        }\n    }\n    return false\n}\n\n// Test cases\nfun main() {\n    println(triplesSumToZero(listOf(1, 3, 5, 0))) // False\n    println(triplesSumToZero(listOf(1, 3, -2, 1))) // True\n    println(triplesSumToZero(listOf(1, 2, 3, 7))) // False\n    println(triplesSumToZero(listOf(2, 4, -5, 3, 9, 7))) // True\n    println(triplesSumToZero(listOf(1))) // False\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seenNumbers = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seenNumbers) {\n            return true\n        }\n        seenNumbers.add(num)\n    }\n    return false\n}\n\n// Testing the function\nfun main() {\n    println(pairsSumToZero(listOf(1, 3, 5, 0))) // False\n    println(pairsSumToZero(listOf(1, 3, -2, 1))) // False\n    println(pairsSumToZero(listOf(1, 2, 3, 7))) // False\n    println(pairsSumToZero(listOf(2, 4, -5, 3, 5, 7))) // True\n    println(pairsSumToZero(listOf(1))) // False\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    // Base cases for n = 0, 1, 2, 3\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    // Initialize the first four elements of the sequence\n    val fib4Numbers = mutableListOf(0, 0, 2, 0)\n\n    // Compute the nth element iteratively\n    for (i in 4..n) {\n        val nextFib4 = fib4Numbers[3] + fib4Numbers[2] + fib4Numbers[1] + fib4Numbers[0]\n        // Update the list to hold the last four elements\n        fib4Numbers[0] = fib4Numbers[1]\n        fib4Numbers[1] = fib4Numbers[2]\n        fib4Numbers[2] = fib4Numbers[3]\n        fib4Numbers[3] = nextFib4\n    }\n\n    // The nth element is the last element in the updated list\n    return fib4Numbers[3]\n}\n\n// Test cases\nfun main() {\n    println(fib4(5))  // Output: 4\n    println(fib4(6))  // Output: 8\n    println(fib4(7))  // Output: 14\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    if (l.isEmpty()) throw IllegalArgumentException(\"List cannot be empty\")\n    \n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 1) {\n        // Odd number of elements\n        sortedList[size / 2]\n    } else {\n        // Even number of elements\n        val middle1 = sortedList[size / 2 - 1]\n        val middle2 = sortedList[size / 2]\n        (middle1 + middle2) / 2.0\n    }\n}\n\nfun main() {\n    // Test cases\n    println(median(listOf(3, 1, 2, 4, 5)))  // Output: 3\n    println(median(listOf(-10, 4, 6, 1000, 10, 20)))  // Output: 15.0\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}\n\n// Testing the function\nfun main() {\n    println(isPalindrome(\"\"))         // True\n    println(isPalindrome(\"aba\"))      // True\n    println(isPalindrome(\"aaaaa\"))    // True\n    println(isPalindrome(\"zbcd\"))     // False\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    // Define a set of vowels for quick lookup\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    // Use the filter function to remove vowels\n    return text.filter { it !in vowels }\n}\n\n// Test cases\nfun main() {\n    println(removeVowels(\"\")) // Output: ''\n    println(removeVowels(\"abcdef\\nghijklm\")) // Output: 'bcdf\\nghjklm'\n    println(removeVowels(\"abcdef\")) // Output: 'bcdf'\n    println(removeVowels(\"aaaaa\")) // Output: ''\n    println(removeVowels(\"aaBAA\")) // Output: 'B'\n    println(removeVowels(\"zbcd\")) // Output: 'zbcd'\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    // Using the all function to check if all elements satisfy the condition\n    return l.all { it < t }\n}\n\nfun main() {\n    // Test cases\n    println(belowThreshold(listOf(1, 2, 4, 10), 100)) // Expected: True\n    println(belowThreshold(listOf(1, 20, 4, 10), 5))  // Expected: False\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n\n// Example usage\nfun main() {\n    println(add(2, 3))  // Output: 5\n    println(add(5, 7))  // Output: 12\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n\n// Testing the function with the provided examples\nfun main() {\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")) // True\n    println(sameChars(\"abcd\", \"dddddddabc\")) // True\n    println(sameChars(\"dddddddabc\", \"abcd\")) // True\n    println(sameChars(\"eabcd\", \"dddddddabc\")) // False\n    println(sameChars(\"abcd\", \"dddddddabce\")) // False\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")) // False\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 0) return 0\n    if (n == 1) return 1\n\n    var a = 0\n    var b = 1\n    var c = 1\n\n    for (i in 2..n) {\n        c = a + b\n        a = b\n        b = c\n    }\n\n    return c\n}\n\n// Test cases\nfun main() {\n    println(fib(10)) // Output: 55\n    println(fib(1))  // Output: 1\n    println(fib(8))  // Output: 21\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    // Convert lists to sets to remove duplicates and find the intersection\n    val set1 = l1.toSet()\n    val set2 = l2.toSet()\n    \n    // Find common elements\n    val commonElements = set1.intersect(set2)\n    \n    // Convert to list and sort\n    return commonElements.toList().sorted()\n}\n\n// Example usage\nfun main() {\n    println(common(listOf(1, 4, 3, 34, 653, 2, 5), listOf(5, 7, 1, 5, 9, 653, 121)))\n    println(common(listOf(5, 3, 2, 8), listOf(3, 2)))\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var largestFactor = 1\n\n    // Divide n by 2 until it becomes odd\n    while (num % 2 == 0) {\n        largestFactor = 2\n        num /= 2\n    }\n\n    // Now n is odd, so we can check odd numbers from 3 onwards\n    var factor = 3\n    while (factor * factor <= num) {\n        while (num % factor == 0) {\n            largestFactor = factor\n            num /= factor\n        }\n        factor += 2\n    }\n\n    // If num is still greater than 2, then it is prime\n    if (num > 2) {\n        largestFactor = num\n    }\n\n    return largestFactor\n}\n\nfun main() {\n    println(largestPrimeFactor(13195)) // Output: 29\n    println(largestPrimeFactor(2048))  // Output: 2\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    // Create a new list to store the derivative coefficients\n    val derivativeCoefficients = mutableListOf<Int>()\n    \n    // Loop through the list starting from the second element (index 1)\n    for (i in 1 until xs.size) {\n        // Each coefficient is multiplied by its index\n        derivativeCoefficients.add(xs[i] * i)\n    }\n    \n    return derivativeCoefficients\n}\n\n// Test cases\nfun main() {\n    println(derivative(listOf(3, 1, 2, 4, 5))) // Should print [1, 4, 12, 20]\n    println(derivative(listOf(1, 2, 3))) // Should print [2, 6]\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    // Base cases\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 1\n    \n    // Create an array to store the computed values\n    val fibfibArray = IntArray(n + 1)\n    \n    // Initialize the base cases\n    fibfibArray[0] = 0\n    fibfibArray[1] = 0\n    fibfibArray[2] = 1\n    \n    // Compute the values from the bottom up\n    for (i in 3..n) {\n        fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3]\n    }\n    \n    // Return the n-th element of the sequence\n    return fibfibArray[n]\n}\n\n// Test cases\nfun main() {\n    println(fibfib(1))  // Output: 0\n    println(fibfib(5))  // Output: 4\n    println(fibfib(8))  // Output: 24\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    // Define the set of vowels\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    var count = 0\n\n    // Iterate through the characters of the string\n    for (i in s.indices) {\n        val char = s[i].lowercaseChar()\n        if (char in vowels) {\n            count++\n        } else if (char == 'y' && i == s.lastIndex) {\n            count++\n        }\n    }\n\n    return count\n}\n\n// Test cases\nfun main() {\n    println(vowelsCount(\"abcde\"))  // Output: 2\n    println(vowelsCount(\"ACEDY\"))  // Output: 3\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    // Step 1: Count the frequency of each integer\n    val frequencyMap = mutableMapOf<Int, Int>()\n    for (num in lst) {\n        frequencyMap[num] = frequencyMap.getOrDefault(num, 0) + 1\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    var result = -1\n    for ((num, freq) in frequencyMap) {\n        if (freq >= num && num > result) {\n            result = num\n        }\n    }\n\n    return result\n}\n\n// Test cases\nfun main() {\n    println(search(listOf(4, 1, 2, 2, 3, 1))) // Output: 2\n    println(search(listOf(1, 2, 2, 3, 3, 3, 4, 4, 4))) // Output: 3\n    println(search(listOf(5, 5, 4, 4, 4))) // Output: -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "import kotlin.math.sqrt\n\nfun triangleArea(a: Int, b: Int, c: Int): Any {\n    // Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        val s = (a + b + c) / 2.0\n        \n        // Calculate the area using Heron's formula\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        // Return the area rounded to 2 decimal points\n        return String.format(\"%.2f\", area).toDouble()\n    } else {\n        // The sides do not form a valid triangle\n        return -1\n    }\n}\n\n// Example usage\nfun main() {\n    println(triangleArea(3, 4, 5))  // Output: 6.00\n    println(triangleArea(1, 2, 10)) // Output: -1\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list is a palindrome\n    fun isPalindrome(list: List<Int>): Boolean {\n        return list == list.reversed()\n    }\n\n    // Check if the sum of the elements is within the maximum weight\n    fun isWithinWeightLimit(list: List<Int>, weightLimit: Int): Boolean {\n        return list.sum() <= weightLimit\n    }\n\n    // Return true if both conditions are met\n    return isPalindrome(q) && isWithinWeightLimit(q, w)\n}\n\n// Test cases\nfun main() {\n    println(willItFly(listOf(1, 2), 5)) // False\n    println(willItFly(listOf(3, 2, 3), 1)) // False\n    println(willItFly(listOf(3, 2, 3), 9)) // True\n    println(willItFly(listOf(3), 5)) // True\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    // Function to generate a list of prime numbers less than 100\n    fun generatePrimes(limit: Int): List<Int> {\n        val isPrime = BooleanArray(limit) { true }\n        isPrime[0] = false\n        isPrime[1] = false\n        for (i in 2 until limit) {\n            if (isPrime[i]) {\n                for (j in i * 2 until limit step i) {\n                    isPrime[j] = false\n                }\n            }\n        }\n        return isPrime.indices.filter { isPrime[it] }\n    }\n\n    // Generate primes less than 100\n    val primes = generatePrimes(100)\n\n    // Check all combinations of three primes\n    for (i in primes.indices) {\n        for (j in i until primes.size) {\n            for (k in j until primes.size) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n// Example usage:\nfun main() {\n    println(isMultiplyPrime(30))  // True, because 30 = 2 * 3 * 5\n    println(isMultiplyPrime(60))  // True, because 60 = 2 * 3 * 5\n    println(isMultiplyPrime(100)) // False, because no three primes multiply to 100\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    // Convert the decimal number to binary string\n    val binaryString = decimal.toString(2)\n    \n    // Add \"db\" at the beginning and end of the binary string\n    return \"db${binaryString}db\"\n}\n\n// Test cases\nfun main() {\n    println(decimalToBinary(15))  // Expected output: \"db1111db\"\n    println(decimalToBinary(32))  // Expected output: \"db100000db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    // If the string length is less than 3, it can't be happy\n    if (s.length < 3) return false\n\n    // Iterate through the string and check every set of 3 consecutive characters\n    for (i in 0 until s.length - 2) {\n        val a = s[i]\n        val b = s[i + 1]\n        val c = s[i + 2]\n        if (a == b || b == c || a == c) {\n            // If any of the three consecutive characters are the same, return false\n            return false\n        }\n    }\n\n    // If no set of 3 consecutive characters are the same, return true\n    return true\n}\n\n// Test cases\nfun main() {\n    println(isHappy(\"a\"))      // False\n    println(isHappy(\"aa\"))     // False\n    println(isHappy(\"abcd\"))   // True\n    println(isHappy(\"aabb\"))   // False\n    println(isHappy(\"adb\"))    // True\n    println(isHappy(\"xyy\"))    // False\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    return grades.map { gpa ->\n        when {\n            gpa == 4.0 -> \"A+\"\n            gpa > 3.7 -> \"A\"\n            gpa > 3.3 -> \"A-\"\n            gpa > 3.0 -> \"B+\"\n            gpa > 2.7 -> \"B\"\n            gpa > 2.3 -> \"B-\"\n            gpa > 2.0 -> \"C+\"\n            gpa > 1.7 -> \"C\"\n            gpa > 1.3 -> \"C-\"\n            gpa > 1.0 -> \"D+\"\n            gpa > 0.7 -> \"D\"\n            gpa > 0.0 -> \"D-\"\n            gpa == 0.0 -> \"E\"\n            else -> \"Invalid GPA\"\n        }\n    }\n}\n\n// Example usage\nfun main() {\n    val gpas = listOf(4.0, 3.0, 1.7, 2.0, 3.5)\n    val grades = numericalLetterGrade(gpas)\n    println(grades)  // Output: [A+, B, C-, C, A-]\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    \n    if (length <= 1) {\n        return false\n    }\n\n    for (i in 2..Math.sqrt(length.toDouble()).toInt()) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n\nfun main() {\n    println(primeLength(\"Hello\"))       // True\n    println(primeLength(\"abcdcba\"))     // True\n    println(primeLength(\"kittens\"))     // True\n    println(primeLength(\"orange\"))      // False\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    // Sum the digits of the number\n    val sumOfDigits = n.toString().map { it - '0' }.sum()\n    \n    // Convert the sum to a binary string\n    return Integer.toBinaryString(sumOfDigits)\n}\n\n// Testing the function\nfun main() {\n    println(solve(1000))  // Expected output: \"1\"\n    println(solve(150))   // Expected output: \"110\"\n    println(solve(147))   // Expected output: \"1100\"\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst: List<List<Int>>, x: Int): List<Pair<Int, Int>> {\n    val result = mutableListOf<Pair<Int, Int>>()\n\n    // Iterate through each row and each element within the row\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                result.add(Pair(i, j))\n            }\n        }\n    }\n\n    // Sort by row in ascending order and by column in descending order\n    return result.sortedWith(compareBy({ it.first }, { -it.second }))\n}\n\n// Example usage\nfun main() {\n    val list1 = listOf(\n        listOf(1, 2, 3, 4, 5, 6),\n        listOf(1, 2, 3, 4, 1, 6),\n        listOf(1, 2, 3, 4, 5, 1)\n    )\n    val list2 = listOf<List<Int>>()\n    val list3 = listOf(\n        listOf(),\n        listOf(1),\n        listOf(1, 2, 3)\n    )\n\n    println(getRow(list1, 1)) // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    println(getRow(list2, 1)) // []\n    println(getRow(list3, 3)) // [(2, 2)]\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Int>): Int? {\n    // Convert the list to a set to remove duplicates\n    val uniqueElements = lst.toSet()\n    \n    // Check if there are at least two distinct elements\n    if (uniqueElements.size < 2) {\n        return null\n    }\n    \n    // Convert the set back to a list and sort it\n    val sortedElements = uniqueElements.sorted()\n    \n    // Return the second smallest element\n    return sortedElements[1]\n}\n\n// Test cases\nfun main() {\n    println(nextSmallest(listOf(1, 2, 3, 4, 5))) // Should print 2\n    println(nextSmallest(listOf(5, 1, 4, 3, 2))) // Should print 2\n    println(nextSmallest(emptyList())) // Should print null\n    println(nextSmallest(listOf(1, 1))) // Should print null\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    // Splitting the string by '.', '?' and '!' to get individual sentences\n    val sentences = s.split('.', '?', '!')\n    \n    // Counting the number of sentences that start with \"I\"\n    var boredomCount = 0\n    for (sentence in sentences) {\n        // Trim leading and trailing whitespace and check if it starts with \"I\"\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++\n        }\n    }\n    \n    return boredomCount\n}\n\n// Example usage\nfun main() {\n    println(isBored(\"Hello world\")) // Output: 0\n    println(isBored(\"The sky is blue. The sun is shining. I love this weather\")) // Output: 1\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun skjkasdkd(lst: List<Int>): Int {\n    // Function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n        for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    // Find the largest prime number in the list\n    val largestPrime = lst.filter { isPrime(it) }.maxOrNull() ?: 0\n\n    // Calculate the sum of digits of the largest prime number\n    return largestPrime.toString().map { it.toString().toInt() }.sum()\n}\n\n// Test cases\nfun main() {\n    val lst1 = listOf(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)\n    println(skjkasdkd(lst1)) // Output: 10\n\n    val lst2 = listOf(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)\n    println(skjkasdkd(lst2)) // Output: 25\n\n    val lst3 = listOf(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)\n    println(skjkasdkd(lst3)) // Output: 13\n\n    val lst4 = listOf(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)\n    println(skjkasdkd(lst4)) // Output: 11\n\n    val lst5 = listOf(0, 81, 12, 3, 1, 21)\n    println(skjkasdkd(lst5)) // Output: 3\n\n    val lst6 = listOf(0, 8, 1, 2, 1, 7)\n    println(skjkasdkd(lst6)) // Output: 7\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    // Check if the dictionary is empty\n    if (dict.isEmpty()) return false\n\n    // Filter the keys to only keep the ones that are strings\n    val stringKeys = dict.keys.filterIsInstance<String>()\n\n    // If not all keys are strings, return false\n    if (stringKeys.size != dict.keys.size) return false\n\n    // Check if all keys are in lower case\n    val allLowerCase = stringKeys.all { it == it.toLowerCase() }\n\n    // Check if all keys are in upper case\n    val allUpperCase = stringKeys.all { it == it.toUpperCase() }\n\n    // Return true if either all keys are in lower case or all keys are in upper case\n    return allLowerCase || allUpperCase\n}\n\n// Test cases\nfun main() {\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"b\" to \"banana\"))) // True\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"A\" to \"banana\", \"B\" to \"banana\"))) // False\n    println(checkDictCase(mapOf(\"a\" to \"apple\", 8 to \"banana\", \"a\" to \"apple\"))) // False\n    println(checkDictCase(mapOf(\"Name\" to \"John\", \"Age\" to \"36\", \"City\" to \"Houston\"))) // False\n    println(checkDictCase(mapOf(\"STATE\" to \"NC\", \"ZIP\" to \"12345\"))) // True\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "import kotlin.math.round\nimport kotlin.math.sign\n\nfun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    val rounded = round(number)\n    \n    // Check if the number is equidistant from two integers\n    if (rounded - number == 0.5 || rounded - number == -0.5) {\n        return if (number > 0) rounded.toInt() else rounded.toInt() - 1\n    }\n    \n    return rounded.toInt()\n}\n\nfun main() {\n    // Test cases\n    println(closestInteger(\"10\"))     // Output: 10\n    println(closestInteger(\"15.3\"))   // Output: 15\n    println(closestInteger(\"14.5\"))   // Output: 15\n    println(closestInteger(\"-14.5\"))  // Output: -15\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf<Int>()\n    var currentStones = n\n    val increment = 2  // Since the next number pattern is always either odd or even\n    \n    for (i in 1..n) {\n        pile.add(currentStones)\n        currentStones += increment\n    }\n    \n    return pile\n}\n\n// Example usage\nfun main() {\n    println(makeAPile(3))  // Output: [3, 5, 7]\n    println(makeAPile(4))  // Output: [4, 6, 8, 10]\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    // Split the string by commas or spaces and filter out any empty results\n    return s.split(Regex(\"[,\\\\s]+\")).filter { it.isNotEmpty() }\n}\n\n// Test cases\nfun main() {\n    println(wordsString(\"Hi, my name is John\")) // Output: [Hi, my, name, is, John]\n    println(wordsString(\"One, two, three, four, five, six\")) // Output: [One, two, three, four, five, six]\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    val start = maxOf(x, y)\n    val end = minOf(x, y)\n\n    for (num in start downTo end) {\n        if (num % 2 == 0) {\n            return num\n        }\n    }\n\n    return -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) {\n        return -1\n    }\n    \n    // Calculate the sum of integers from n to m\n    val sum = (n..m).sum()\n    \n    // Calculate the number of integers from n to m\n    val count = m - n + 1\n    \n    // Calculate the average and round it to the nearest integer\n    val average = Math.round(sum.toDouble() / count).toInt()\n    \n    // Convert the rounded average to binary string\n    val binaryString = \"0b\" + Integer.toBinaryString(average)\n    \n    return binaryString\n}\n\n// Test cases\nfun main() {\n    println(roundedAvg(1, 5))   // Output: \"0b11\"\n    println(roundedAvg(7, 5))   // Output: -1\n    println(roundedAvg(10, 20)) // Output: \"0b1111\"\n    println(roundedAvg(20, 33)) // Output: \"0b11010\"\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun factorial(num: Int): Int {\n    return if (num == 0 || num == 1) 1 else num * factorial(num - 1)\n}\n\nfun sumUpTo(num: Int): Int {\n    return num * (num + 1) / 2\n}\n\nfun f(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(factorial(i))\n        } else {\n            result.add(sumUpTo(i))\n        }\n    }\n    return result\n}\n\n// Example usage:\n// f(5) should return [1, 2, 6, 24, 15]\nprintln(f(5))  // Output: [1, 2, 6, 24, 15]"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n    \n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    \n    return listOf(evenCount, oddCount)\n}\n\nfun isPalindrome(num: Int): Boolean {\n    val str = num.toString()\n    return str == str.reversed()\n}\n\n// Example usage:\nfun main() {\n    println(evenOddPalindrome(3))  // Output: [1, 2]\n    println(evenOddPalindrome(12)) // Output: [4, 6]\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true // An empty array is considered sorted\n    \n    val n = arr.size\n    val doubled = arr + arr // Concatenate the array with itself\n    \n    // Check each subarray of length `n` in the doubled array\n    for (i in 0 until n) {\n        var sorted = true\n        for (j in 0 until n - 1) {\n            if (doubled[i + j] > doubled[i + j + 1]) {\n                sorted = false\n                break\n            }\n        }\n        if (sorted) return true\n    }\n    \n    return false\n}\n\n// Example usage:\nfun main() {\n    println(moveOneBall(listOf(3, 4, 5, 1, 2))) // True\n    println(moveOneBall(listOf(3, 5, 4, 1, 2))) // False\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    // Count the number of even numbers in lst1\n    val evenCountInLst1 = lst1.count { it % 2 == 0 }\n    // Count the number of odd numbers in lst1\n    val oddCountInLst1 = lst1.size - evenCountInLst1\n\n    // Count the number of even numbers in lst2\n    val evenCountInLst2 = lst2.count { it % 2 == 0 }\n\n    // If the number of even numbers in lst2 is greater than or equal to the number of odd numbers in lst1,\n    // then it is possible to make all elements in lst1 even\n    return if (evenCountInLst2 >= oddCountInLst1) \"YES\" else \"NO\"\n}\n\n// Test cases\nfun main() {\n    println(exchange(listOf(1, 2, 3, 4), listOf(1, 2, 3, 4)))  // Output: \"YES\"\n    println(exchange(listOf(1, 2, 3, 4), listOf(1, 5, 3, 4)))  // Output: \"NO\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    // Step 1: Remove all characters from `s` that are present in `c`\n    val filteredString = s.filterNot { it in c }\n    \n    // Step 2: Check if the resulting string is a palindrome\n    val isPalindrome = filteredString == filteredString.reversed()\n    \n    // Step 3: Return the result as a tuple (List in Kotlin)\n    return listOf(filteredString, isPalindrome)\n}\n\n// Example usage:\nfun main() {\n    println(reverseDelete(\"abcde\", \"ae\"))    // Output: [bcd, false]\n    println(reverseDelete(\"abcdef\", \"b\"))    // Output: [acdef, false]\n    println(reverseDelete(\"abcdedcba\", \"ab\")) // Output: [cdedc, true]\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    // Step 1: Count the total units of water\n    var totalUnitsOfWater = 0\n    for (row in grid) {\n        for (cell in row) {\n            if (cell == 1) {\n                totalUnitsOfWater++\n            }\n        }\n    }\n\n    // Step 2: Calculate the number of bucket uses\n    // We use Math.ceil to round up the division because we can't use a fraction of a bucket\n    val numberOfBuckets = Math.ceil(totalUnitsOfWater.toDouble() / capacity).toInt()\n\n    return numberOfBuckets\n}\n\n// Example usage:\nfun main() {\n    val grid1 = listOf(\n        listOf(0, 0, 1, 0),\n        listOf(0, 1, 0, 0),\n        listOf(1, 1, 1, 1)\n    )\n    val bucketCapacity1 = 1\n    println(maxFill(grid1, bucketCapacity1))  // Output: 6\n\n    val grid2 = listOf(\n        listOf(0, 0, 1, 1),\n        listOf(0, 0, 0, 0),\n        listOf(1, 1, 1, 1),\n        listOf(0, 1, 1, 1)\n    )\n    val bucketCapacity2 = 2\n    println(maxFill(grid2, bucketCapacity2))  // Output: 5\n\n    val grid3 = listOf(\n        listOf(0, 0, 0),\n        listOf(0, 0, 0)\n    )\n    val bucketCapacity3 = 5\n    println(maxFill(grid3, bucketCapacity3))  // Output: 0\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    if (s.isEmpty()) return emptyList()\n\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\n    fun countConsonants(word: String): Int {\n        return word.count { it.isLetter() && it !in vowels }\n    }\n\n    return s.split(\" \")\n        .filter { countConsonants(it) == n }\n}\n\nfun main() {\n    // Test cases\n    println(selectWords(\"Mary had a little lamb\", 4)) // ==> [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3)) // ==> [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2)) // ==> []\n    println(selectWords(\"Hello world\", 4)) // ==> [\"world\"]\n    println(selectWords(\"Uncle sam\", 3)) // ==> [\"Uncle\"]\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    // Handle the edge case where k is 0\n    if (k == 0) return emptyList()\n    \n    // Sort the array in descending order and take the first k elements\n    val topKElements = arr.sortedDescending().take(k)\n    \n    // Return the top k elements sorted in ascending order\n    return topKElements.sorted()\n}\n\n// Test cases\nfun main() {\n    println(maximum(listOf(-3, -4, 5), 3)) // Output: [-4, -3, 5]\n    println(maximum(listOf(4, -4, 4), 2)) // Output: [4, 4]\n    println(maximum(listOf(-3, 2, 1, 2, -1, -2, 1), 1)) // Output: [2]\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    var sum = 0\n    for (i in 0 until k) {\n        if (arr[i] in -99..99) {  // Check if the number has at most two digits\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n// Example usage\nfun main() {\n    val arr = listOf(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    val k = 4\n    println(addElements(arr, k))  // Output: 24\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "// Function to check if a number is prime\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\n// Main function to determine if the length of the intersection is prime\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val (start1, end1) = interval1\n    val (start2, end2) = interval2\n\n    // Find the intersection of the two intervals\n    val startIntersection = maxOf(start1, start2)\n    val endIntersection = minOf(end1, end2)\n\n    // Calculate the length of the intersection\n    val length = endIntersection - startIntersection\n\n    // Check if the intervals intersect and if the length is prime\n    return if (length >= 0 && isPrime(length + 1)) \"YES\" else \"NO\"\n}\n\n// Test cases\nfun main() {\n    println(intersection(listOf(1, 2), listOf(2, 3))) // \"NO\"\n    println(intersection(listOf(-1, 1), listOf(0, 4))) // \"NO\"\n    println(intersection(listOf(-3, -1), listOf(-5, 5))) // \"YES\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): List<Int> {\n    val memo = mutableMapOf<Int, Int>()\n    \n    fun triHelper(k: Int): Int {\n        if (memo.containsKey(k)) return memo[k]!!\n        val result = when {\n            k == 1 -> 3\n            k % 2 == 0 -> 1 + k / 2\n            else -> triHelper(k - 1) + triHelper(k - 2) + triHelper(k + 1)\n        }\n        memo[k] = result\n        return result\n    }\n    \n    return (1..n + 1).map { triHelper(it) }\n}\n\n// Example usage:\nfun main() {\n    println(tri(3)) // Output: [3, 2, 8, 5]\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var hasOddDigit = false\n    var number = n\n\n    while (number > 0) {\n        val digit = number % 10\n        if (digit % 2 != 0) {\n            product *= digit\n            hasOddDigit = true\n        }\n        number /= 10\n    }\n\n    return if (hasOddDigit) product else 0\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    // Stack to keep track of opening brackets\n    val stack = mutableListOf<Char>()\n    var hasNested = false\n\n    for (char in string) {\n        if (char == '[') {\n            // Push opening bracket onto the stack\n            stack.add(char)\n        } else if (char == ']') {\n            // Check if there is a corresponding opening bracket\n            if (stack.isNotEmpty()) {\n                // Pop the opening bracket\n                stack.removeAt(stack.size - 1)\n                // If the stack still has elements, it means we have a nested structure\n                if (stack.isNotEmpty()) {\n                    hasNested = true\n                }\n            } else {\n                // If there's no corresponding opening bracket, it's invalid\n                return false\n            }\n        }\n    }\n\n    // If there are unmatched opening brackets left, it's invalid\n    return hasNested && stack.isEmpty()\n}\n\n// Test cases\nfun main() {\n    println(isNested(\"[[]]\")) // \u279e True\n    println(isNested(\"[]]]]]]][[[[[]\")) // \u279e False\n    println(isNested(\"[][]\")) // \u279e False\n    println(isNested(\"[]\")) // \u279e False\n    println(isNested(\"[[][]]\")) // \u279e True\n    println(isNested(\"[[]][[\")) // \u279e True\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "import kotlin.math.ceil\n\nfun sumSquares(lst: List<Any>): Int {\n    return lst.mapNotNull { \n        when (it) {\n            is Number -> ceil(it.toDouble()).toInt()\n            else -> null\n        }\n    }.sumOf { it * it }\n}\n\n// Test cases\nfun main() {\n    println(sumSquares(listOf(1, 2, 3))) // Output: 14\n    println(sumSquares(listOf(1, 4, 9))) // Output: 98\n    println(sumSquares(listOf(1, 3, 5, 7))) // Output: 84\n    println(sumSquares(listOf(1.4, 4.2, 0))) // Output: 29\n    println(sumSquares(listOf(-2.4, 1, 1))) // Output: 6\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    // Trim any trailing spaces from the input string\n    val trimmedTxt = txt.trimEnd()\n    \n    // Check if the trimmed string is empty\n    if (trimmedTxt.isEmpty()) {\n        return false\n    }\n\n    // Get the last character of the trimmed string\n    val lastChar = trimmedTxt.last()\n    \n    // Check if the last character is a letter\n    if (!lastChar.isLetter()) {\n        return false\n    }\n\n    // Check if the last character is the only character or is preceded by a space\n    val secondLastChar = if (trimmedTxt.length > 1) trimmedTxt[trimmedTxt.length - 2] else ' '\n    return secondLastChar == ' '\n}\n\n// Test cases\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\"))  // \u279e False\n    println(checkIfLastCharIsALetter(\"apple pi e\"))  // \u279e True\n    println(checkIfLastCharIsALetter(\"apple pi e \"))  // \u279e False\n    println(checkIfLastCharIsALetter(\"\"))  // \u279e False \n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Int>): Int {\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            return i\n        }\n    }\n    return -1\n}\n\nfun main() {\n    // Test cases\n    println(canArrange(listOf(1, 2, 4, 3, 5))) // Output: 3\n    println(canArrange(listOf(1, 2, 3)))       // Output: -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Int>): Pair<Int?, Int?> {\n    var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n\n    for (num in lst) {\n        if (num < 0) {\n            if (largestNegative == null || num > largestNegative) {\n                largestNegative = num\n            }\n        } else if (num > 0) {\n            if (smallestPositive == null || num < smallestPositive) {\n                smallestPositive = num\n            }\n        }\n    }\n\n    return Pair(largestNegative, smallestPositive)\n}\n\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // Output: (null, 1)\n    println(largestSmallestIntegers(listOf())) // Output: (null, null)\n    println(largestSmallestIntegers(listOf(0))) // Output: (null, null)\n    println(largestSmallestIntegers(listOf(-3, -1, -7, 2, 4, 6))) // Output: (-1, 2)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    // Helper function to calculate the factorial of a number\n    fun factorial(num: Int): Int {\n        var result = 1\n        for (i in 1..num) {\n            result *= i\n        }\n        return result\n    }\n\n    // Calculate the Brazilian factorial\n    var specialFact = 1\n    for (i in 1..n) {\n        specialFact *= factorial(i)\n    }\n\n    return specialFact\n}\n\n// Example usage\nfun main() {\n    println(specialFactorial(4))  // Output: 288\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun wordsInSentence(sentence: String): String {\n    return sentence.split(\" \")\n                   .filter { isPrime(it.length) }\n                   .joinToString(\" \")\n}\n\n// Example usage:\nfun main() {\n    val sentence1 = \"This is a test\"\n    val result1 = wordsInSentence(sentence1)\n    println(result1) // Output: \"is\"\n    \n    val sentence2 = \"lets go for swimming\"\n    val result2 = wordsInSentence(sentence2)\n    println(result2) // Output: \"go for\"\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    // Helper function to parse a fraction string and return a Pair of numerator and denominator\n    fun parseFraction(fraction: String): Pair<Int, Int> {\n        val parts = fraction.split(\"/\")\n        val numerator = parts[0].toInt()\n        val denominator = parts[1].toInt()\n        return Pair(numerator, denominator)\n    }\n\n    // Parse the fractions\n    val (xNumerator, xDenominator) = parseFraction(x)\n    val (nNumerator, nDenominator) = parseFraction(n)\n\n    // Calculate the product of the fractions\n    val productNumerator = xNumerator * nNumerator\n    val productDenominator = xDenominator * nDenominator\n\n    // Check if the product is a whole number\n    return productNumerator % productDenominator == 0\n}\n\n// Test cases\nfun main() {\n    println(simplify(\"1/5\", \"5/1\"))  // True\n    println(simplify(\"1/6\", \"2/1\"))  // False\n    println(simplify(\"7/10\", \"10/2\")) // False\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Int>): List<Int> {\n    // Helper function to calculate the sum of digits of an integer\n    fun sumOfDigits(num: Int): Int {\n        return num.toString().filter { it.isDigit() }.map { it.toString().toInt() }.sum()\n    }\n\n    return nums.sortedWith(compareBy({ sumOfDigits(it) }, { nums.indexOf(it) }))\n}\n\n// Test cases\nfun main() {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12)))  // Output: [-1, -11, 1, -12, 11]\n    println(orderByPoints(emptyList()))  // Output: []\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Int>): Int {\n    return nums.filter { it > 10 && hasOddFirstAndLastDigit(it) }.count()\n}\n\nfun hasOddFirstAndLastDigit(number: Int): Boolean {\n    val str = number.toString()\n    val firstDigit = str.first().toString().toInt()\n    val lastDigit = str.last().toString().toInt()\n    return isOdd(firstDigit) && isOdd(lastDigit)\n}\n\nfun isOdd(digit: Int): Boolean {\n    return digit % 2 != 0\n}\n\n// Test cases\nfun main() {\n    println(specialFilter(listOf(15, -73, 14, -15))) // Output: 1\n    println(specialFilter(listOf(33, -2, -3, 45, 21, 109))) // Output: 2\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    // Step 1: Generate the array based on given formula\n    val a = IntArray(n) { i -> (i + 1) * (i + 1) - (i + 1) + 1 }\n\n    // Step 2: Count the occurrences of numbers with remainders 0, 1, and 2 when divided by 3\n    val counts = IntArray(3)\n    for (num in a) {\n        counts[num % 3]++\n    }\n\n    // Step 3: Calculate the number of valid triples\n    var numTriples = 0\n\n    // Case 1: All three numbers have remainder 0\n    if (counts[0] >= 3) {\n        numTriples += counts[0] * (counts[0] - 1) * (counts[0] - 2) / 6\n    }\n\n    // Case 2: All three numbers have remainder 1\n    if (counts[1] >= 3) {\n        numTriples += counts[1] * (counts[1] - 1) * (counts[1] - 2) / 6\n    }\n\n    // Case 3: All three numbers have remainder 2\n    if (counts[2] >= 3) {\n        numTriples += counts[2] * (counts[2] - 1) * (counts[2] - 2) / 6\n    }\n\n    // Case 4: One number from each remainder group (0, 1, 2)\n    numTriples += counts[0] * counts[1] * counts[2]\n\n    return numTriples\n}\n\n// Example usage\nfun main() {\n    val n = 5\n    println(getMaxTriples(n))  // Output: 1\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    )\n\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    // Check if both planets exist in the list\n    if (index1 == -1 || index2 == -1) {\n        return emptyList()\n    }\n\n    // Determine the start and end indices for sublist extraction\n    val start = minOf(index1, index2) + 1\n    val end = maxOf(index1, index2)\n\n    // If start equals end, it means the planets are adjacent or the same\n    if (start == end) {\n        return emptyList()\n    }\n\n    // Return the sublist of planets between the two indices\n    return planets.subList(start, end)\n}\n\n// Example usage\nfun main() {\n    println(bf(\"Jupiter\", \"Neptune\")) // Output: [Saturn, Uranus]\n    println(bf(\"Earth\", \"Mercury\")) // Output: [Venus]\n    println(bf(\"Mercury\", \"Uranus\")) // Output: [Venus, Earth, Mars, Jupiter, Saturn]\n    println(bf(\"Pluto\", \"Earth\")) // Output: []\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun xOrY(n: Int, x: Int, y: Int): Int {\n    // Helper function to check if a number is prime\n    fun isPrime(num: Int): Boolean {\n        if (num <= 1) return false\n        if (num == 2) return true // 2 is the only even prime number\n        if (num % 2 == 0) return false // Other even numbers are not primes\n        for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n\n    // Check if n is prime and return the appropriate value\n    return if (isPrime(n)) x else y\n}\n\n// Test cases\nfun main() {\n    println(xOrY(7, 34, 12))  // Output: 34\n    println(xOrY(15, 8, 5))  // Output: 5\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filterIsInstance<Int>()  // Filter out only integers\n              .filter { it >= 0 }       // Remove negative numbers\n              .filter { it % 2 != 0 }   // Keep only odd numbers\n              .sumOf { it * it }        // Square each remaining number and sum them up\n}\n\n// Testing the function with the provided test cases\nfun main() {\n    println(doubleTheDifference(listOf(1, 3, 2, 0))) // Output: 10\n    println(doubleTheDifference(listOf(-1, -2, 0))) // Output: 0\n    println(doubleTheDifference(listOf(9, -2))) // Output: 81\n    println(doubleTheDifference(listOf(0))) // Output: 0\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    // Helper function to calculate the strength of an extension\n    fun calculateStrength(extension: String): Int {\n        val capCount = extension.count { it.isUpperCase() }\n        val smCount = extension.count { it.isLowerCase() }\n        return capCount - smCount\n    }\n\n    // Initialize variables to track the strongest extension\n    var strongestExtension = \"\"\n    var maxStrength = Int.MIN_VALUE\n\n    // Iterate through each extension to find the strongest one\n    for (extension in extensions) {\n        val strength = calculateStrength(extension)\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    // Return the result in the required format\n    return \"$className.$strongestExtension\"\n}\n\n// Example usage:\nfun main() {\n    val className = \"Slices\"\n    val extensions = listOf(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")\n    println(strongestExtension(className, extensions)) // Output: Slices.SErviNGSliCes\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    // Function to generate all rotations of a string\n    fun generateRotations(s: String): List<String> {\n        val rotations = mutableListOf<String>()\n        val len = s.length\n        for (i in 0 until len) {\n            val rotation = s.substring(i) + s.substring(0, i)\n            rotations.add(rotation)\n        }\n        return rotations\n    }\n\n    // Generate all rotations of string b\n    val rotations = generateRotations(b)\n\n    // Check if any rotation is a substring of a\n    return rotations.any { a.contains(it) }\n}\n\n// Test cases\nfun main() {\n    println(cycpatternCheck(\"abcd\", \"abd\")) // False\n    println(cycpatternCheck(\"hello\", \"ell\")) // True\n    println(cycpatternCheck(\"whassup\", \"psus\")) // False\n    println(cycpatternCheck(\"abab\", \"baa\")) // True\n    println(cycpatternCheck(\"efef\", \"eeff\")) // False\n    println(cycpatternCheck(\"himenss\", \"simen\")) // True\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    // Define the Roman numeral representations\n    val romanNumerals = listOf(\n        1000 to \"M\", 900 to \"CM\", 500 to \"D\", 400 to \"CD\",\n        100 to \"C\", 90 to \"XC\", 50 to \"L\", 40 to \"XL\",\n        10 to \"X\", 9 to \"IX\", 5 to \"V\", 4 to \"IV\",\n        1 to \"I\"\n    )\n    \n    var num = number\n    val result = StringBuilder()\n    \n    // Iterate through the numeral values\n    for ((value, numeral) in romanNumerals) {\n        while (num >= value) {\n            result.append(numeral)\n            num -= value\n        }\n    }\n    \n    // Convert result to lowercase\n    return result.toString().lowercase()\n}\n\n// Examples\nfun main() {\n    println(intToMiniRoman(19))   // Output: xix\n    println(intToMiniRoman(152))  // Output: clii\n    println(intToMiniRoman(426))  // Output: cdxxvi\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    // Find the square of each side\n    val aSquared = a * a\n    val bSquared = b * b\n    val cSquared = c * c\n\n    // Check the Pythagorean theorem\n    return (aSquared + bSquared == cSquared) ||\n           (aSquared + cSquared == bSquared) ||\n           (bSquared + cSquared == aSquared)\n}\n\n// Test cases\nfun main() {\n    println(rightAngleTriangle(3, 4, 5)) // True\n    println(rightAngleTriangle(1, 2, 3)) // False\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    // Check if the string contains any letters\n    val containsLetters = s.any { it.isLetter() }\n\n    return if (containsLetters) {\n        // Reverse the case of each letter\n        s.map {\n            if (it.isLetter()) {\n                if (it.isUpperCase()) it.toLowerCase() else it.toUpperCase()\n            } else {\n                it\n            }\n        }.joinToString(\"\")\n    } else {\n        // Reverse the string\n        s.reversed()\n    }\n}\n\n// Test cases\nfun main() {\n    println(solve(\"1234\"))   // Output: \"4321\"\n    println(solve(\"ab\"))     // Output: \"AB\"\n    println(solve(\"#a@C\"))   // Output: \"#A@c\"\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.security.MessageDigest\n\nfun stringToMd5(text: String): String? {\n    return if (text.isEmpty()) {\n        null\n    } else {\n        val md = MessageDigest.getInstance(\"MD5\")\n        val digest = md.digest(text.toByteArray())\n        val hexString = StringBuilder()\n        for (byte in digest) {\n            val hex = Integer.toHexString(0xff and byte.toInt())\n            if (hex.length == 1) hexString.append('0')\n            hexString.append(hex)\n        }\n        hexString.toString()\n    }\n}\n\n// Example usage\nfun main() {\n    println(stringToMd5(\"Hello world\")) // Output: 3e25960a79dbc69b674cd4ec67a72c62\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    // Find the minimum and maximum of a and b\n    val min = minOf(a, b)\n    val max = maxOf(a, b)\n\n    // Initialize a list to store even digits\n    val evenDigits = mutableListOf<Int>()\n\n    // Iterate through the range and collect even digits\n    for (i in min..max) {\n        if (i in 0..9 && i % 2 == 0) {\n            evenDigits.add(i)\n        }\n    }\n\n    return evenDigits\n}\n\n// Test cases\nfun main() {\n    println(generateIntegers(2, 8))   // Output: [2, 4, 6, 8]\n    println(generateIntegers(8, 2))   // Output: [2, 4, 6, 8]\n    println(generateIntegers(10, 14)) // Output: []\n}"}

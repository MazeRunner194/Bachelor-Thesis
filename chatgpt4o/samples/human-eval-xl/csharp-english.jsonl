{"task_id": "csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You're given a list of deposit and withdrawal operations on a bank account that starts with\n        /// zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n        /// at that point function should return True. Otherwise it should return False.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero(List<int> operations)\n        {\n            int balance = 0;\n\n            foreach (var operation in operations)\n            {\n                balance += operation;\n                if (balance < 0)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            List<int> operations1 = new List<int> { 1, 2, 3 };\n            List<int> operations2 = new List<int> { 1, 2, -4, 5 };\n\n            Console.WriteLine(BelowZero(operations1)); // Output: False\n            Console.WriteLine(BelowZero(operations2)); // Output: True\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        /// Empty sum should be equal to 0 and empty product should be equal to 1.\n        /// </summary>\n        public static (int, int) SumProduct (List<int> numbers) \n        {\n            // Handle the case where the list is empty\n            if (numbers == null || numbers.Count == 0)\n            {\n                return (0, 1);\n            }\n\n            // Calculate the sum of the integers in the list\n            int sum = numbers.Sum();\n\n            // Calculate the product of the integers in the list\n            int product = numbers.Aggregate(1, (acc, num) => acc * num);\n\n            return (sum, product);\n        }\n\n        // Main method for testing the function\n        public static void Main(string[] args)\n        {\n            var testCases = new List<List<int>>\n            {\n                new List<int> { }, // Empty list\n                new List<int> { 1, 2, 3, 4 }, // Regular list\n                new List<int> { 5 }, // Single element list\n                new List<int> { -1, 2, -3, 4 } // List with negative numbers\n            };\n\n            foreach (var testCase in testCases)\n            {\n                var result = SumProduct(testCase);\n                Console.WriteLine($\"Input: {string.Join(\", \", testCase)} => Sum: {result.Item1}, Product: {result.Item2}\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Perform a binary XOR operation on two binary strings and return the result as a binary string.\n        /// </summary>\n        /// <param name=\"a\">First binary string</param>\n        /// <param name=\"b\">Second binary string</param>\n        /// <returns>The result of the XOR operation as a binary string</returns>\n        /// <exception cref=\"ArgumentException\">Thrown when the input strings are not of the same length or contain characters other than '0' or '1'</exception>\n        public static string StringXor(string a, string b)\n        {\n            // Validate the input strings\n            if (a.Length != b.Length)\n            {\n                throw new ArgumentException(\"Input strings must be of the same length.\");\n            }\n\n            if (!Regex.IsMatch(a, \"^[01]+$\") || !Regex.IsMatch(b, \"^[01]+$\"))\n            {\n                throw new ArgumentException(\"Input strings must contain only '0' and '1'.\");\n            }\n\n            // Perform the XOR operation\n            char[] result = new char[a.Length];\n            for (int i = 0; i < a.Length; i++)\n            {\n                result[i] = a[i] == b[i] ? '0' : '1';\n            }\n\n            return new string(result);\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            Console.WriteLine(StringXor(\"010\", \"110\")); // Output: \"100\"\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// </summary>\n        public static object Longest(List<string> strings)\n        {\n            if (strings == null || strings.Count == 0)\n            {\n                return \"None\";\n            }\n\n            string longestString = strings[0];\n            foreach (var str in strings)\n            {\n                if (str.Length > longestString.Length)\n                {\n                    longestString = str;\n                }\n            }\n\n            return longestString;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Longest(new List<string>())); // Output: None\n            Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" })); // Output: a\n            Console.WriteLine(Longest(new List<string> { \"a\", \"bb\", \"ccc\" })); // Output: ccc\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return the greatest common divisor of two integers a and b\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor(int a, int b)\n        {\n            while (b != 0)\n            {\n                int temp = b;\n                b = a % b;\n                a = temp;\n            }\n            return a;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(GreatestCommonDivisor(3, 5));   // Output: 1\n            Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n        }\n    }\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        private static readonly Dictionary<string, int> NumberWords = new Dictionary<string, int>\n        {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 }\n        };\n\n        public static string SortNumbers(string numbers)\n        {\n            // Split the input string into individual words\n            var words = numbers.Split(' ', StringSplitOptions.RemoveEmptyEntries);\n\n            // Convert words to their corresponding numerical values\n            var numList = words.Select(word => NumberWords[word]).ToList();\n\n            // Sort the numerical values\n            numList.Sort();\n\n            // Convert sorted numerical values back to words\n            var sortedWords = numList.Select(num => NumberWords.FirstOrDefault(x => x.Value == num).Key).ToList();\n\n            // Join the sorted words back into a single string\n            return string.Join(' ', sortedWords);\n        }\n\n        static void Main(string[] args)\n        {\n            string input = \"three one five\";\n            string result = SortNumbers(input);\n            Console.WriteLine(result); // Output: \"one three five\"\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit (List<double> numbers) \n        {\n            if (numbers == null || numbers.Count < 2)\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n\n            return numbers.Select(x => (x - min) / (max - min)).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage:\n            List<double> input = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n            List<double> result = RescaleToUnit(input);\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Flips lowercase characters to uppercase and uppercase to lowercase.\n        /// </summary>\n        /// <param name=\"string0\">The input string</param>\n        /// <returns>A new string with each character's case flipped</returns>\n        public static string FlipCase(string string0)\n        {\n            char[] charArray = string0.ToCharArray();\n            for (int i = 0; i < charArray.Length; i++)\n            {\n                if (char.IsUpper(charArray[i]))\n                {\n                    charArray[i] = char.ToLower(charArray[i]);\n                }\n                else if (char.IsLower(charArray[i]))\n                {\n                    charArray[i] = char.ToUpper(charArray[i]);\n                }\n            }\n            return new string(charArray);\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test the FlipCase method\n            Console.WriteLine(FlipCase(\"Hello\")); // Output: hELLO\n            Console.WriteLine(FlipCase(\"WORLD\")); // Output: world\n            Console.WriteLine(FlipCase(\"123abcABC\")); // Output: 123ABCabc\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive (List<int> l) \n        {\n            return l.Where(number => number > 0).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { -1, 2, -4, 5, 6 };\n            List<int> test2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n\n            Console.WriteLine(string.Join(\", \", GetPositive(test1))); // Output: 2, 5, 6\n            Console.WriteLine(string.Join(\", \", GetPositive(test2))); // Output: 5, 3, 2, 3, 9, 123, 1\n        }\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines if a given number is prime.\n        /// </summary>\n        /// <param name=\"n\">The number to check for primality.</param>\n        /// <returns>True if the number is prime, false otherwise.</returns>\n        public static bool IsPrime(int n)\n        {\n            // Prime numbers are greater than 1\n            if (n <= 1)\n                return false;\n\n            // Check from 2 to the square root of n\n            for (int i = 2; i * i <= n; i++)\n            {\n                if (n % i == 0)\n                    return false;\n            }\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsPrime(6));    // False\n            Console.WriteLine(IsPrime(101));  // True\n            Console.WriteLine(IsPrime(11));   // True\n            Console.WriteLine(IsPrime(13441));// True\n            Console.WriteLine(IsPrime(61));   // True\n            Console.WriteLine(IsPrime(4));    // False\n            Console.WriteLine(IsPrime(1));    // False\n        }\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique(List<int> l)\n        {\n            // Use a HashSet to get unique elements\n            HashSet<int> uniqueElements = new HashSet<int>(l);\n            \n            // Convert to list and sort the elements\n            List<int> sortedUniqueElements = uniqueElements.OrderBy(x => x).ToList();\n            \n            return sortedUniqueElements;\n        }\n\n        static void Main(string[] args)\n        {\n            // Sample test case\n            List<int> input = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> result = Unique(input);\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // Function to check if a number is prime\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            for (int i = 3; i <= Math.Sqrt(number); i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Function to generate Fibonacci numbers\n        private static IEnumerable<int> Fibonacci()\n        {\n            int a = 0;\n            int b = 1;\n\n            while (true)\n            {\n                int temp = a;\n                a = b;\n                b = temp + b;\n                yield return a;\n            }\n        }\n\n        public static int PrimeFib(int n)\n        {\n            var fibonacciNumbers = Fibonacci();\n            var primeFibs = new List<int>();\n\n            foreach (var fib in fibonacciNumbers)\n            {\n                if (IsPrime(fib))\n                {\n                    primeFibs.Add(fib);\n                }\n                if (primeFibs.Count == n)\n                {\n                    break;\n                }\n            }\n\n            return primeFibs[n - 1];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n        }\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool TriplesSumToZero(List<int> l)\n        {\n            // Sort the list to use the two-pointer technique\n            l.Sort();\n            \n            // Loop through each element in the list\n            for (int i = 0; i < l.Count - 2; i++)\n            {\n                // Set up two pointers\n                int left = i + 1;\n                int right = l.Count - 1;\n                \n                // While left pointer is less than right pointer\n                while (left < right)\n                {\n                    int sum = l[i] + l[left] + l[right];\n                    \n                    // Check if the sum of the three numbers is zero\n                    if (sum == 0)\n                    {\n                        return true;\n                    }\n                    else if (sum < 0)\n                    {\n                        // Move the left pointer to the right to increase the sum\n                        left++;\n                    }\n                    else\n                    {\n                        // Move the right pointer to the left to decrease the sum\n                        right--;\n                    }\n                }\n            }\n            \n            // If no triplet was found that sums to zero, return false\n            return false;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// PairsSumToZero takes a list of integers as an input.\n        /// it returns True if there are two distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// False\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool PairsSumToZero(List<int> l)\n        {\n            HashSet<int> seenNumbers = new HashSet<int>();\n            \n            foreach (int num in l)\n            {\n                // Check if the negative of the current number has already been seen\n                if (seenNumbers.Contains(-num))\n                {\n                    return true;\n                }\n                // Add the current number to the set of seen numbers\n                seenNumbers.Add(num);\n            }\n            \n            // If no pairs sum to zero, return false\n            return false;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Sample test cases\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, -2, 1 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 2, 4, -5, 3, 5, 7 })); // True\n            Console.WriteLine(PairsSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Computes the n-th element of the Fib4 number sequence.\n        /// </summary>\n        public static int Fib4(int n)\n        {\n            if (n == 0 || n == 1 || n == 3)\n            {\n                return 0;\n            }\n            else if (n == 2)\n            {\n                return 2;\n            }\n\n            // Use an array to store the last four computed values\n            int[] fib4Numbers = new int[4];\n            fib4Numbers[2] = 2;\n\n            for (int i = 4; i <= n; i++)\n            {\n                int nextFib4 = fib4Numbers[0] + fib4Numbers[1] + fib4Numbers[2] + fib4Numbers[3];\n                fib4Numbers[0] = fib4Numbers[1];\n                fib4Numbers[1] = fib4Numbers[2];\n                fib4Numbers[2] = fib4Numbers[3];\n                fib4Numbers[3] = nextFib4;\n            }\n\n            return fib4Numbers[3];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fib4(5)); // Output: 4\n            Console.WriteLine(Fib4(6)); // Output: 8\n            Console.WriteLine(Fib4(7)); // Output: 14\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return Median of elements in the list l.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median(List<int> l)\n        {\n            if (l == null || l.Count == 0)\n            {\n                throw new ArgumentException(\"The list must contain at least one element.\");\n            }\n            \n            l.Sort();\n            int n = l.Count;\n            if (n % 2 == 1)\n            {\n                // If the number of elements is odd, return the middle element\n                return l[n / 2];\n            }\n            else\n            {\n                // If the number of elements is even, return the average of the two middle elements\n                double mid1 = l[(n / 2) - 1];\n                double mid2 = l[n / 2];\n                return (mid1 + mid2) / 2.0;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> list1 = new List<int> { 3, 1, 2, 4, 5 };\n            List<int> list2 = new List<int> { -10, 4, 6, 1000, 10, 20 };\n\n            Console.WriteLine(Median(list1));  // Output: 3\n            Console.WriteLine(Median(list2));  // Output: 15.0\n        }\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if given string is a palindrome\n        /// </summary>\n        public static bool IsPalindrome(string text)\n        {\n            // An empty string is considered a palindrome\n            if (string.IsNullOrEmpty(text)) \n                return true;\n\n            // Compare the string with its reverse\n            int length = text.Length;\n            for (int i = 0; i < length / 2; i++)\n            {\n                if (text[i] != text[length - 1 - i])\n                    return false;\n            }\n            return true;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(IsPalindrome(\"\")); // Expected: True\n            Console.WriteLine(IsPalindrome(\"aba\")); // Expected: True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // Expected: True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // Expected: False\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// RemoveVowels is a function that takes a string and returns a string without vowels.\n        /// </summary>\n        public static string RemoveVowels(string text)\n        {\n            // Define the vowels\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n\n            // Use LINQ to filter out the vowels from the text\n            string result = new string(text.Where(c => !vowels.Contains(c)).ToArray());\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(RemoveVowels(\"\")); // Output: ''\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\n            Console.WriteLine(RemoveVowels(\"abcdef\")); // Output: 'bcdf'\n            Console.WriteLine(RemoveVowels(\"aaaaa\")); // Output: ''\n            Console.WriteLine(RemoveVowels(\"aaBAA\")); // Output: 'B'\n            Console.WriteLine(RemoveVowels(\"zbcd\")); // Output: 'zbcd'\n        }\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if all numbers in the list l are below threshold t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold(List<int> l, int t)\n        {\n            return l.All(number => number < t);\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Add two numbers x and y\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// \n        /// </summary>\n        public static int Add(int x, int y)\n        {\n            return x + y;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Add(2, 3)); // Output: 5\n            Console.WriteLine(Add(5, 7)); // Output: 12\n        }\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Check if two words have the same characters.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// \n        /// </summary>\n        public static bool SameChars(string s0, string s1)\n        {\n            // Get distinct characters from both strings\n            var distinctCharsS0 = s0.ToHashSet();\n            var distinctCharsS1 = s1.ToHashSet();\n            \n            // Compare sets for equality\n            return distinctCharsS0.SetEquals(distinctCharsS1);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n            Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n            Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Returns the n-th Fibonacci number.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// \n        /// </summary>\n        public static int Fib(int n)\n        {\n            if (n <= 0)\n            {\n                throw new ArgumentOutOfRangeException(nameof(n), \"Input should be a positive integer.\");\n            }\n            if (n == 1 || n == 2)\n            {\n                return 1;\n            }\n\n            int a = 1, b = 1;\n            for (int i = 3; i <= n; i++)\n            {\n                int temp = a + b;\n                a = b;\n                b = temp;\n            }\n\n            return b;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fib(10)); // 55\n            Console.WriteLine(Fib(1));  // 1\n            Console.WriteLine(Fib(8));  // 21\n        }\n    }\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Return sorted unique common elements for two lists.\n        /// </summary>\n        /// <param name=\"l1\">First list of integers</param>\n        /// <param name=\"l2\">Second list of integers</param>\n        /// <returns>List of sorted unique common elements</returns>\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Find common elements and sort them\n            var commonElements = l1.Intersect(l2).OrderBy(x => x).ToList();\n            return commonElements;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = Common(new List<int> { 1, 4, 3, 34, 653, 2, 5 }, new List<int> { 5, 7, 1, 5, 9, 653, 121 });\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 5, 653\n\n            var result2 = Common(new List<int> { 5, 3, 2, 8 }, new List<int> { 3, 2 });\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 3\n        }\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int LargestPrimeFactor(int n)\n        {\n            int largestPrime = -1;\n\n            // Step 1: Divide by 2\n            while (n % 2 == 0)\n            {\n                largestPrime = 2;\n                n /= 2;\n            }\n\n            // Step 2: Check for odd factors starting from 3\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            {\n                while (n % i == 0)\n                {\n                    largestPrime = i;\n                    n /= i;\n                }\n            }\n\n            // Step 3: If n is still greater than 2, then it is prime\n            if (n > 2)\n            {\n                largestPrime = n;\n            }\n\n            return largestPrime;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n            Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// SumToN is a function that sums numbers from 1 to n.\n        /// </summary>\n        /// <param name=\"n\">The number up to which the sum is calculated.</param>\n        /// <returns>The sum of numbers from 1 to n.</returns>\n        public static int SumToN(int n)\n        {\n            // Using the formula for the sum of the first n natural numbers.\n            return n * (n + 1) / 2;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(SumToN(30)); // 465\n            Console.WriteLine(SumToN(100)); // 5050\n            Console.WriteLine(SumToN(5)); // 15\n            Console.WriteLine(SumToN(10)); // 55\n            Console.WriteLine(SumToN(1)); // 1\n        }\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// xs represent coefficients of a polynomial.\n        /// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        /// Return Derivative of this polynomial in the same form.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// </summary>\n        public static List<int> Derivative(List<int> xs)\n        {\n            List<int> result = new List<int>();\n\n            for (int i = 1; i < xs.Count; i++)\n            {\n                result.Add(i * xs[i]);\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            var test1 = new List<int> { 3, 1, 2, 4, 5 };\n            var result1 = Derivative(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 4, 12, 20\n\n            var test2 = new List<int> { 1, 2, 3 };\n            var result2 = Derivative(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 6\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n        /// Fibfib(0) == 0\n        /// Fibfib(1) == 0\n        /// Fibfib(2) == 1\n        /// Fibfib(n) == Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3).\n        /// Please write a function to efficiently compute the n-th element of the Fibfib number sequence.\n        /// >>> Fibfib(1)\n        /// 0\n        /// >>> Fibfib(5)\n        /// 4\n        /// >>> Fibfib(8)\n        /// 24\n        /// \n        /// </summary>\n        public static int Fibfib(int n)\n        {\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 1;\n\n            int[] dp = new int[n + 1];\n            dp[0] = 0;\n            dp[1] = 0;\n            dp[2] = 1;\n\n            for (int i = 3; i <= n; i++)\n            {\n                dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n            }\n\n            return dp[n];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fibfib(1)); // Output: 0\n            Console.WriteLine(Fibfib(5)); // Output: 4\n            Console.WriteLine(Fibfib(8)); // Output: 24\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function VowelsCount which takes a string representing\n        /// a word as input and returns the number of vowels in the string.\n        /// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        /// vowel, but only when it is at the end of the given word.\n        /// \n        /// Example:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount(string s)\n        {\n            if (string.IsNullOrEmpty(s))\n            {\n                return 0;\n            }\n\n            s = s.ToLower();\n            int count = 0;\n            string vowels = \"aeiou\";\n\n            for (int i = 0; i < s.Length; i++)\n            {\n                if (vowels.Contains(s[i]) || (s[i] == 'y' && i == s.Length - 1))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n            Console.WriteLine(VowelsCount(\"example\")); // Output: 3\n            Console.WriteLine(VowelsCount(\"bcd\")); // Output: 0\n            Console.WriteLine(VowelsCount(\"sky\")); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Search(List<int> lst)\n        {\n            // Step 1: Count the frequency of each integer in the list\n            Dictionary<int, int> frequencyDict = new Dictionary<int, int>();\n            foreach (int num in lst)\n            {\n                if (frequencyDict.ContainsKey(num))\n                {\n                    frequencyDict[num]++;\n                }\n                else\n                {\n                    frequencyDict[num] = 1;\n                }\n            }\n\n            // Step 2: Find the greatest integer that satisfies the condition\n            int result = -1;\n            foreach (var kvp in frequencyDict)\n            {\n                int num = kvp.Key;\n                int frequency = kvp.Value;\n                if (frequency >= num)\n                {\n                    result = Math.Max(result, num);\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // Output: 2\n            Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Output: 3\n            Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given the lengths of the three sides of a triangle, return the area of\n        /// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n        /// Otherwise return -1.\n        /// </summary>\n        public static double TriangleArea(int a, int b, int c)\n        {\n            // Check if the sides form a valid triangle\n            if (a + b <= c || a + c <= b || b + c <= a)\n            {\n                return -1;\n            }\n            \n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2.0;\n            \n            // Calculate the area using Heron's formula\n            double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n            \n            // Round the area to 2 decimal places\n            return Math.Round(area, 2);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            Console.WriteLine(TriangleArea(3, 4, 5)); // Output: 6.00\n            Console.WriteLine(TriangleArea(1, 2, 10)); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // Check if the list is a palindrome\n            bool isPalindrome = q.SequenceEqual(q.AsEnumerable().Reverse());\n            \n            // Check if the sum is within the weight limit\n            int sum = q.Sum();\n            bool isWithinWeight = sum <= w;\n\n            // Return true if both conditions are met\n            return isPalindrome && isWithinWeight;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // \u279e False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // \u279e False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // \u279e True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // \u279e True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsMultiplyPrime(int a)\n        {\n            if (a >= 100)\n                throw new ArgumentException(\"Input must be less than 100.\");\n\n            // List of prime numbers less than 100\n            List<int> primes = GeneratePrimes(100);\n\n            // Check all combinations of three primes\n            for (int i = 0; i < primes.Count; i++)\n            {\n                for (int j = i + 1; j < primes.Count; j++)\n                {\n                    for (int k = j + 1; k < primes.Count; k++)\n                    {\n                        if (primes[i] * primes[j] * primes[k] == a)\n                        {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private static List<int> GeneratePrimes(int max)\n        {\n            List<int> primes = new List<int>();\n            for (int i = 2; i < max; i++)\n            {\n                if (IsPrime(i))\n                {\n                    primes.Add(i);\n                }\n            }\n            return primes;\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number < 2) return false;\n            for (int i = 2; i <= Math.Sqrt(number); i++)\n            {\n                if (number % i == 0)\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\n            Console.WriteLine(IsMultiplyPrime(60)); // False, because 60 is not the product of exactly three primes\n            Console.WriteLine(IsMultiplyPrime(105)); // True, because 105 = 3 * 5 * 7\n        }\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Converts a decimal number to a binary string with 'db' at the beginning and end.\n        /// </summary>\n        /// <param name=\"decimalNumber\">The decimal number to convert.</param>\n        /// <returns>A string in the format \"db{binaryNumber}db\".</returns>\n        public static string DecimalToBinary(int decimalNumber)\n        {\n            // Convert the decimal number to binary string\n            string binaryString = Convert.ToString(decimalNumber, 2);\n\n            // Add 'db' at the beginning and end\n            return $\"db{binaryString}db\";\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(DecimalToBinary(15));   // Output: db1111db\n            Console.WriteLine(DecimalToBinary(32));   // Output: db100000db\n        }\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// Your task is to check if the string is happy or not.\n        /// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n        /// For example:\n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy(string s)\n        {\n            if (s.Length < 3)\n            {\n                return false;\n            }\n\n            for (int i = 0; i <= s.Length - 3; i++)\n            {\n                if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsHappy(\"a\"));    // False\n            Console.WriteLine(IsHappy(\"aa\"));   // False\n            Console.WriteLine(IsHappy(\"abcd\")); // True\n            Console.WriteLine(IsHappy(\"aabb\")); // False\n            Console.WriteLine(IsHappy(\"adb\"));  // True\n            Console.WriteLine(IsHappy(\"xyy\"));  // False\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Converts a list of GPAs to their corresponding letter grades based on a predefined table.\n        /// </summary>\n        /// <param name=\"grades\">List of GPAs as doubles</param>\n        /// <returns>List of letter grades as strings</returns>\n        public static List<string> NumericalLetterGrade(List<double> grades) \n        {\n            List<string> letterGrades = new List<string>();\n\n            foreach (double gpa in grades)\n            {\n                if (gpa == 4.0)\n                {\n                    letterGrades.Add(\"A+\");\n                }\n                else if (gpa > 3.7)\n                {\n                    letterGrades.Add(\"A\");\n                }\n                else if (gpa > 3.3)\n                {\n                    letterGrades.Add(\"A-\");\n                }\n                else if (gpa > 3.0)\n                {\n                    letterGrades.Add(\"B+\");\n                }\n                else if (gpa > 2.7)\n                {\n                    letterGrades.Add(\"B\");\n                }\n                else if (gpa > 2.3)\n                {\n                    letterGrades.Add(\"B-\");\n                }\n                else if (gpa > 2.0)\n                {\n                    letterGrades.Add(\"C+\");\n                }\n                else if (gpa > 1.7)\n                {\n                    letterGrades.Add(\"C\");\n                }\n                else if (gpa > 1.3)\n                {\n                    letterGrades.Add(\"C-\");\n                }\n                else if (gpa > 1.0)\n                {\n                    letterGrades.Add(\"D+\");\n                }\n                else if (gpa > 0.7)\n                {\n                    letterGrades.Add(\"D\");\n                }\n                else if (gpa > 0.0)\n                {\n                    letterGrades.Add(\"D-\");\n                }\n                else // gpa == 0.0\n                {\n                    letterGrades.Add(\"E\");\n                }\n            }\n\n            return letterGrades;\n        }\n\n        public static void Main(string[] args)\n        {\n            var grades = new List<double> { 4.0, 3.0, 1.7, 2.0, 3.5 };\n            var letterGrades = NumericalLetterGrade(grades);\n            Console.WriteLine(string.Join(\", \", letterGrades)); // Output: A+, B, C-, C, A-\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Determines if the length of the given string is a prime number.\n        /// </summary>\n        /// <param name=\"string0\">The input string.</param>\n        /// <returns>True if the length of the string is a prime number, otherwise False.</returns>\n        public static bool PrimeLength(string string0)\n        {\n            int length = string0.Length;\n            return IsPrime(length);\n        }\n\n        /// <summary>\n        /// Checks if a given number is a prime number.\n        /// </summary>\n        /// <param name=\"number\">The number to check.</param>\n        /// <returns>True if the number is prime, otherwise False.</returns>\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1)\n                return false;\n\n            for (int i = 2; i <= Math.Sqrt(number); i++)\n            {\n                if (number % i == 0)\n                    return false;\n            }\n\n            return true;\n        }\n\n        // Example usage for testing\n        public static void Main()\n        {\n            Console.WriteLine(PrimeLength(\"Hello\")); // Should print True\n            Console.WriteLine(PrimeLength(\"abcdcba\")); // Should print True\n            Console.WriteLine(PrimeLength(\"kittens\")); // Should print True\n            Console.WriteLine(PrimeLength(\"orange\")); // Should print False\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer N, return the total sum of its digits in binary.\n        /// \n        /// Example\n        /// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        /// For N = 150, the sum of digits will be 6 the output should be \"110\".\n        /// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        /// \n        /// Variables:\n        /// @N integer\n        /// Constraints: 0 \u2264 N \u2264 10000.\n        /// Output:\n        /// a string of binary number\n        /// \n        /// </summary>\n        public static string Solve(int N) \n        {\n            // Sum the digits of N\n            int sumOfDigits = N.ToString().Sum(c => c - '0');\n\n            // Convert the sum of digits to a binary string\n            return Convert.ToString(sumOfDigits, 2);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Solve(1000)); // Output: \"1\"\n            Console.WriteLine(Solve(150));  // Output: \"110\"\n            Console.WriteLine(Solve(147));  // Output: \"1100\"\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<(int, int)> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<(int, int)>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if (lst[i][j] == x)\n                    {\n                        result.Add((i, j));\n                    }\n                }\n            }\n\n            // Sort by row in ascending order, then by column in descending order\n            result = result\n                .OrderBy(tuple => tuple.Item1)\n                .ThenByDescending(tuple => tuple.Item2)\n                .ToList();\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            var lst1 = new List<List<int>> {\n                new List<int> {1, 2, 3, 4, 5, 6},\n                new List<int> {1, 2, 3, 4, 1, 6},\n                new List<int> {1, 2, 3, 4, 5, 1}\n            };\n            var lst2 = new List<List<int>> { };\n            var lst3 = new List<List<int>> {\n                new List<int> { },\n                new List<int> {1},\n                new List<int> {1, 2, 3}\n            };\n\n            Console.WriteLine(string.Join(\", \", GetRow(lst1, 1))); // Output: (0, 0), (1, 4), (1, 0), (2, 5), (2, 0)\n            Console.WriteLine(string.Join(\", \", GetRow(lst2, 1))); // Output: \n            Console.WriteLine(string.Join(\", \", GetRow(lst3, 3))); // Output: (2, 2)\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a list of integers.\n        /// Write a function NextSmallest() that returns the 2nd smallest element of the list.\n        /// Return null if there is no such element.\n        /// \n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == null\n        /// NextSmallest([1, 1]) == null\n        /// \n        /// </summary>\n        public static object NextSmallest(List<int> lst)\n        {\n            // Check if the list has fewer than 2 distinct elements\n            if (lst == null || lst.Count < 2)\n            {\n                return null;\n            }\n\n            // Sort the list and find distinct elements\n            var distinctSortedList = lst.Distinct().OrderBy(x => x).ToList();\n\n            // Check if there are fewer than 2 distinct elements\n            if (distinctSortedList.Count < 2)\n            {\n                return null;\n            }\n\n            // Return the second smallest element\n            return distinctSortedList[1];\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { })); // Output: null\n            Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: null\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You'll be given a string of words, and your task is to count the number\n        /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n        /// Sentences are delimited by '.', '?' or '!'.\n        /// \n        /// For example:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored(string S)\n        {\n            // Split the string by sentence delimiters\n            var sentences = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n            \n            // Count the sentences that start with \"I\"\n            int boredomCount = sentences.Count(sentence => sentence.Trim().StartsWith(\"I\", StringComparison.OrdinalIgnoreCase));\n            \n            return boredomCount;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n            Console.WriteLine(IsBored(\"I am happy. We are going to the park. Isn't it nice?\")); // Output: 1\n            Console.WriteLine(IsBored(\"I am happy! I am excited? I am thrilled.\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of integers.\n        /// You need to find the largest prime value and return the sum of its digits.\n        /// \n        /// Examples:\n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int SumOfDigitsOfLargestPrime(List<int> lst)\n        {\n            int largestPrime = lst.Where(IsPrime).DefaultIfEmpty().Max();\n            return SumOfDigits(largestPrime);\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            int boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        private static int SumOfDigits(int number)\n        {\n            int sum = 0;\n            while (number > 0)\n            {\n                sum += number % 10;\n                number /= 10;\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> lst1 = new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 };\n            Console.WriteLine(SumOfDigitsOfLargestPrime(lst1)); // Output: 10\n\n            List<int> lst2 = new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 };\n            Console.WriteLine(SumOfDigitsOfLargestPrime(lst2)); // Output: 25\n\n            List<int> lst3 = new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 };\n            Console.WriteLine(SumOfDigitsOfLargestPrime(lst3)); // Output: 13\n\n            List<int> lst4 = new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 };\n            Console.WriteLine(SumOfDigitsOfLargestPrime(lst4)); // Output: 11\n\n            List<int> lst5 = new List<int> { 0, 81, 12, 3, 1, 21 };\n            Console.WriteLine(SumOfDigitsOfLargestPrime(lst5)); // Output: 3\n\n            List<int> lst6 = new List<int> { 0, 8, 1, 2, 1, 7 };\n            Console.WriteLine(SumOfDigitsOfLargestPrime(lst6)); // Output: 7\n        }\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a dictionary, return True if all keys are strings in lower \n        /// case or all keys are strings in upper case, else return False.\n        /// The function should return False if the given dictionary is empty.\n        /// Examples:\n        /// CheckDictCase(new Dictionary<object, string>{{\"a\",\"apple\"},{\"b\",\"banana\"}}) should return True.\n        /// CheckDictCase(new Dictionary<object, string>{{\"a\",\"apple\"},{\"A\",\"banana\"},{\"B\",\"banana\"}}) should return False.\n        /// CheckDictCase(new Dictionary<object, string>{{\"a\",\"apple\"},{8,\"banana\"},{\"a\",\"apple\"}}) should return False.\n        /// CheckDictCase(new Dictionary<object, string>{{\"Name\",\"John\"},{\"Age\",\"36\"},{\"City\",\"Houston\"}}) should return False.\n        /// CheckDictCase(new Dictionary<object, string>{{\"STATE\",\"NC\"},{\"ZIP\",\"12345\"}}) should return True.\n        /// </summary>\n        public static bool CheckDictCase(Dictionary<object, string> dict)\n        {\n            // Check if dictionary is empty\n            if (dict.Count == 0)\n            {\n                return false;\n            }\n\n            // Check if all keys are strings\n            if (!dict.Keys.All(key => key is string))\n            {\n                return false;\n            }\n\n            // Extract keys as strings\n            var stringKeys = dict.Keys.Cast<string>().ToList();\n\n            // Check if all keys are in lower case or all are in upper case\n            bool allLower = stringKeys.All(key => key.All(char.IsLower));\n            bool allUpper = stringKeys.All(key => key.All(char.IsUpper));\n\n            return allLower || allUpper;\n        }\n\n        public static void Main()\n        {\n            var dict1 = new Dictionary<object, string> { {\"a\", \"apple\"}, {\"b\", \"banana\"} };\n            var dict2 = new Dictionary<object, string> { {\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"} };\n            var dict3 = new Dictionary<object, string> { {\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"} };\n            var dict4 = new Dictionary<object, string> { {\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"} };\n            var dict5 = new Dictionary<object, string> { {\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"} };\n\n            Console.WriteLine(CheckDictCase(dict1)); // True\n            Console.WriteLine(CheckDictCase(dict2)); // False\n            Console.WriteLine(CheckDictCase(dict3)); // False\n            Console.WriteLine(CheckDictCase(dict4)); // False\n            Console.WriteLine(CheckDictCase(dict5)); // True\n        }\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger(string value)\n        {\n            // Parse the string into a double\n            double number;\n            if (!double.TryParse(value, out number))\n            {\n                throw new ArgumentException(\"Invalid number format\");\n            }\n\n            // Use Math.Round with MidpointRounding.AwayFromZero to round correctly\n            return (int)Math.Round(number, MidpointRounding.AwayFromZero);\n        }\n\n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ClosestInteger(\"10\"));       // Output: 10\n            Console.WriteLine(ClosestInteger(\"15.3\"));     // Output: 15\n            Console.WriteLine(ClosestInteger(\"14.5\"));     // Output: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\"));    // Output: -15\n        }\n    }\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer n, you have to make a pile of n levels of stones.\n        /// The first level has n stones.\n        /// The number of stones in the next level is:\n        /// - the next odd number if n is odd.\n        /// - the next even number if n is even.\n        /// Return the number of stones in each level in a list, where element at index\n        /// i represents the number of stones in the level (i+1).\n        /// \n        /// Examples:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> MakeAPile(int n)\n        {\n            List<int> pile = new List<int>();\n            int currentStones = n;\n\n            for (int i = 0; i < n; i++)\n            {\n                pile.Add(currentStones);\n                \n                if (currentStones % 2 == 0)\n                {\n                    currentStones += 2; // Next even number\n                }\n                else\n                {\n                    currentStones += 2; // Next odd number (odd + 2 is still the next odd number)\n                }\n            }\n\n            return pile;\n        }\n\n        static void Main(string[] args)\n        {\n            int n = 3;\n            List<int> result = MakeAPile(n);\n\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Splits a string into words separated by commas or spaces and returns a list of words.\n        /// </summary>\n        /// <param name=\"s\">The input string containing words separated by commas or spaces.</param>\n        /// <returns>A list of words from the input string.</returns>\n        public static List<string> WordsString(string s)\n        {\n            // Use a regex to split the string by either commas or spaces\n            var words = Regex.Split(s, @\"[\\s,]+\").Where(word => !string.IsNullOrEmpty(word)).ToList();\n            return words;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var result1 = WordsString(\"Hi, my name is John\");\n            var result2 = WordsString(\"One, two, three, four, five, six\");\n\n            // Output results\n            Console.WriteLine(string.Join(\", \", result1)); // Output: Hi, my, name, is, John\n            Console.WriteLine(string.Join(\", \", result2)); // Output: One, two, three, four, five, six\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "public static int ChooseNum(int x, int y)\n{\n    // Ensure x is less than or equal to y\n    if (x > y)\n    {\n        return -1;\n    }\n    \n    // Find the largest even number in the range [x, y]\n    // Start from y and check downwards\n    for (int i = y; i >= x; i--)\n    {\n        if (i % 2 == 0)\n        {\n            return i;\n        }\n    }\n    \n    // If no even number is found, return -1\n    return -1;\n}\n\n// Test the function with some examples\npublic static void Main()\n{\n    Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n    Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n    Console.WriteLine(ChooseNum(5, 10));  // Output: 10\n    Console.WriteLine(ChooseNum(6, 6));   // Output: 6\n    Console.WriteLine(ChooseNum(7, 7));   // Output: -1\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two positive integers n and m, and your task is to compute the\n        /// average of the integers from n through m (including n and m). \n        /// Round the answer to the nearest integer and convert that to binary.\n        /// If n is greater than m, return -1.\n        /// Example:\n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg(int n, int m)\n        {\n            if (n > m)\n            {\n                return -1;\n            }\n\n            // Calculate the sum of integers from n to m\n            int sum = 0;\n            for (int i = n; i <= m; i++)\n            {\n                sum += i;\n            }\n\n            // Calculate the number of integers\n            int count = m - n + 1;\n\n            // Calculate the average and round it\n            double avg = (double)sum / count;\n            int roundedAvg = (int)Math.Round(avg);\n\n            // Convert to binary string\n            string binaryString = Convert.ToString(roundedAvg, 2);\n\n            // Format the binary string\n            return \"0b\" + binaryString;\n        }\n\n        // Example usage:\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5));  // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5));  // Output: -1\n            Console.WriteLine(RoundedAvg(10, 20));  // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33));  // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Implement the Function F that takes n as a parameter,\n        /// and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n        /// or the sum oF numbers From 1 to i otherwise.\n        /// i starts From 1.\n        /// the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n        /// Example:\n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F(int n)\n        {\n            List<int> result = new List<int>();\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    result.Add(Factorial(i));\n                }\n                else\n                {\n                    result.Add(SumTo(i));\n                }\n            }\n\n            return result;\n        }\n\n        private static int Factorial(int num)\n        {\n            int factorial = 1;\n            for (int i = 1; i <= num; i++)\n            {\n                factorial *= i;\n            }\n            return factorial;\n        }\n\n        private static int SumTo(int num)\n        {\n            int sum = 0;\n            for (int i = 1; i <= num; i++)\n            {\n                sum += i;\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage\n            List<int> result = F(5);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 2, 6, 24, 15\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static (int, int) EvenOddPalindrome(int n)\n        {\n            int evenCount = 0;\n            int oddCount = 0;\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (IsPalindrome(i))\n                {\n                    if (i % 2 == 0)\n                    {\n                        evenCount++;\n                    }\n                    else\n                    {\n                        oddCount++;\n                    }\n                }\n            }\n\n            return (evenCount, oddCount);\n        }\n\n        private static bool IsPalindrome(int number)\n        {\n            string str = number.ToString();\n            int len = str.Length;\n\n            for (int i = 0; i < len / 2; i++)\n            {\n                if (str[i] != str[len - i - 1])\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(EvenOddPalindrome(3));  // Output: (1, 2)\n            Console.WriteLine(EvenOddPalindrome(12)); // Output: (4, 6)\n        }\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n        /// numbers in the array will be randomly ordered. Your task is to determine if\n        /// it is possible to get an array sorted in non-decreasing order by performing \n        /// the following operation on the given array:\n        /// You are allowed to perform right shift operation any number of times.\n        /// \n        /// One right shift operation means shifting all elements of the array by one\n        /// position in the right direction. The last element of the array will be moved to\n        /// the starting position in the array i.e. 0th index. \n        /// \n        /// If it is possible to obtain the sorted array by performing the above operation\n        /// then return True else return False.\n        /// If the given array is empty then return True.\n        /// \n        /// Note: The given list is guaranteed to have unique elements.\n        /// \n        /// For Example:\n        /// \n        /// MoveOneBall([3, 4, 5, 1, 2])==>True\n        /// Explanation: By performin 2 right shift operations, non-decreasing order can\n        /// be achieved for the given array.\n        /// MoveOneBall([3, 5, 4, 1, 2])==>False\n        /// Explanation:It is not possible to get non-decreasing order for the given\n        /// array by performing any number of right shift operations.\n        /// \n        /// \n        /// </summary>\n        public static bool MoveOneBall(List<int> arr)\n        {\n            if (arr.Count == 0) return true;\n\n            // Find the minimum element in the array\n            int minValue = arr.Min();\n            int minIndex = arr.IndexOf(minValue);\n\n            // Check if the array can be split into two sorted subarrays\n            for (int i = 0; i < arr.Count; i++)\n            {\n                bool isSorted = true;\n                for (int j = 1; j < arr.Count; j++)\n                {\n                    if (arr[(minIndex + j) % arr.Count] < arr[(minIndex + j - 1) % arr.Count])\n                    {\n                        isSorted = false;\n                        break;\n                    }\n                }\n                if (isSorted) return true;\n                minIndex = (minIndex + 1) % arr.Count;\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(MoveOneBall(new List<int> { 3, 4, 5, 1, 2 })); // True\n            Console.WriteLine(MoveOneBall(new List<int> { 3, 5, 4, 1, 2 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Determines whether it is possible to perform an Exchange of elements\n        /// between lst1 and lst2 to make lst1 a list of only even numbers.\n        /// </summary>\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Count the number of odd numbers in lst1\n            int oddCountInLst1 = lst1.Count(x => x % 2 != 0);\n            \n            // Count the number of even numbers in lst2\n            int evenCountInLst2 = lst2.Count(x => x % 2 == 0);\n            \n            // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n            if (evenCountInLst2 >= oddCountInLst1)\n            {\n                return \"YES\";\n            }\n            // Otherwise, return \"NO\"\n            else\n            {\n                return \"NO\";\n            }\n        }\n\n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            List<int> lst1 = new List<int> { 1, 2, 3, 4 };\n            List<int> lst2 = new List<int> { 1, 2, 3, 4 };\n            Console.WriteLine(Exchange(lst1, lst2)); // Output: \"YES\"\n\n            lst1 = new List<int> { 1, 2, 3, 4 };\n            lst2 = new List<int> { 1, 5, 3, 4 };\n            Console.WriteLine(Exchange(lst1, lst2)); // Output: \"NO\"\n        }\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task:\n        /// We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n        /// then check if the result string is palindrome.\n        /// A string is called palindrome if it reads the same backward as forward.\n        /// You should return a tuple containing the result string and True/False for the check.\n        /// Example:\n        /// For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n        /// For s = \"abcdef\", c = \"b\"  the result should be ('acdef', False)\n        /// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n        /// </summary>\n        public static List<object> ReverseDelete(string s, string c)\n        {\n            // Step 1: Remove characters in s that are present in c\n            string resultString = RemoveCharacters(s, c);\n\n            // Step 2: Check if the resulting string is a palindrome\n            bool isPalindrome = IsPalindrome(resultString);\n\n            // Step 3: Return the tuple containing the result string and the palindrome check\n            return new List<object> { resultString, isPalindrome };\n        }\n\n        private static string RemoveCharacters(string s, string c)\n        {\n            HashSet<char> charactersToRemove = new HashSet<char>(c);\n            char[] resultArray = s.ToCharArray();\n            string resultString = string.Empty;\n\n            foreach (char ch in resultArray)\n            {\n                if (!charactersToRemove.Contains(ch))\n                {\n                    resultString += ch;\n                }\n            }\n\n            return resultString;\n        }\n\n        private static bool IsPalindrome(string s)\n        {\n            int left = 0, right = s.Length - 1;\n            while (left < right)\n            {\n                if (s[left] != s[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            var result1 = ReverseDelete(\"abcde\", \"ae\");\n            var result2 = ReverseDelete(\"abcdef\", \"b\");\n            var result3 = ReverseDelete(\"abcdedcba\", \"ab\");\n\n            Console.WriteLine($\"Result 1: ({result1[0]}, {result1[1]})\");\n            Console.WriteLine($\"Result 2: ({result2[0]}, {result2[1]})\");\n            Console.WriteLine($\"Result 3: ({result3[0]}, {result3[1]})\");\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a rectangular grid of wells. Each row represents a single well,\n        /// and each 1 in a row represents a single unit of water.\n        /// Each well has a corresponding bucket that can be used to extract water from it, \n        /// and all buckets have the same capacity.\n        /// Your task is to use the buckets to empty the wells.\n        /// Output the number of times you need to lower the buckets.\n        /// \n        /// Example 1:\n        /// Input: \n        /// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        /// bucket_capacity : 1\n        /// Output: 6\n        /// \n        /// Example 2:\n        /// Input: \n        /// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        /// bucket_capacity : 2\n        /// Output: 5\n        /// \n        /// Example 3:\n        /// Input: \n        /// grid : [[0,0,0], [0,0,0]]\n        /// bucket_capacity : 5\n        /// Output: 0\n        /// \n        /// Constraints:\n        /// * all wells have the same length\n        /// * 1 <= grid.length <= 10^2\n        /// * 1 <= grid[:,1].length <= 10^2\n        /// * grid[i][j] -> 0 | 1\n        /// * 1 <= capacity <= 10\n        /// \n        /// </summary>\n        public static int MaxFill(List<List<int>> grid, int capacity)\n        {\n            int totalWater = 0;\n            \n            // Iterate through each well (row) in the grid\n            foreach (var row in grid)\n            {\n                // Count the number of 1's in the current row\n                totalWater += row.Count(cell => cell == 1);\n            }\n            \n            // Calculate the number of bucket lowering operations required\n            int bucketOperations = (int)Math.Ceiling((double)totalWater / capacity);\n            \n            return bucketOperations;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example 1\n            List<List<int>> grid1 = new List<List<int>> {\n                new List<int> { 0, 0, 1, 0 },\n                new List<int> { 0, 1, 0, 0 },\n                new List<int> { 1, 1, 1, 1 }\n            };\n            int capacity1 = 1;\n            Console.WriteLine(MaxFill(grid1, capacity1)); // Output: 6\n\n            // Example 2\n            List<List<int>> grid2 = new List<List<int>> {\n                new List<int> { 0, 0, 1, 1 },\n                new List<int> { 0, 0, 0, 0 },\n                new List<int> { 1, 1, 1, 1 },\n                new List<int> { 0, 1, 1, 1 }\n            };\n            int capacity2 = 2;\n            Console.WriteLine(MaxFill(grid2, capacity2)); // Output: 5\n\n            // Example 3\n            List<List<int>> grid3 = new List<List<int>> {\n                new List<int> { 0, 0, 0 },\n                new List<int> { 0, 0, 0 }\n            };\n            int capacity3 = 5;\n            Console.WriteLine(MaxFill(grid3, capacity3)); // Output: 0\n        }\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            // List to store the result\n            List<string> result = new List<string>();\n\n            // If the input string is empty, return an empty list\n            if (string.IsNullOrEmpty(s))\n            {\n                return result;\n            }\n\n            // Split the string into words\n            string[] words = s.Split(' ');\n\n            // Define a set of vowels\n            HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n\n            // Iterate through each word\n            foreach (string word in words)\n            {\n                // Count the consonants in the word\n                int consonantCount = word.Count(c => char.IsLetter(c) && !vowels.Contains(c));\n\n                // If the consonant count is exactly n, add the word to the result\n                if (consonantCount == n)\n                {\n                    result.Add(word);\n                }\n            }\n\n            // Return the list of words that meet the criteria\n            return result;\n        }\n\n        // Test cases to validate the implementation\n        public static void Main(string[] args)\n        {\n            List<string> result1 = SelectWords(\"Mary had a little lamb\", 4);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: little\n\n            List<string> result2 = SelectWords(\"Mary had a little lamb\", 3);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: Mary, lamb\n\n            List<string> result3 = SelectWords(\"simple white space\", 2);\n            Console.WriteLine(string.Join(\", \", result3)); // Output: \n\n            List<string> result4 = SelectWords(\"Hello world\", 4);\n            Console.WriteLine(string.Join(\", \", result4)); // Output: world\n\n            List<string> result5 = SelectWords(\"Uncle sam\", 3);\n            Console.WriteLine(string.Join(\", \", result5)); // Output: Uncle\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given an array arr of integers and a positive integer k, return a sorted list \n        /// of length k with the Maximum k numbers in arr.\n        /// </summary>\n        public static List<int> Maximum(List<int> arr, int k) \n        {\n            // Handle edge case where k is 0\n            if (k == 0)\n            {\n                return new List<int>();\n            }\n\n            // Sort the array in descending order\n            List<int> sortedDesc = arr.OrderByDescending(x => x).ToList();\n            \n            // Get the first k elements\n            List<int> topKElements = sortedDesc.Take(k).ToList();\n\n            // Sort these k elements in ascending order\n            topKElements.Sort();\n\n            return topKElements;\n        }\n        \n        // Example usage\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> example1 = Maximum(new List<int> {-3, -4, 5}, 3);\n            Console.WriteLine(string.Join(\", \", example1)); // Output: [-4, -3, 5]\n\n            List<int> example2 = Maximum(new List<int> {4, -4, 4}, 2);\n            Console.WriteLine(string.Join(\", \", example2)); // Output: [4, 4]\n\n            List<int> example3 = Maximum(new List<int> {-3, 2, 1, 2, -1, -2, 1}, 1);\n            Console.WriteLine(string.Join(\", \", example3)); // Output: [2]\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Given a non-empty array of integers arr and an integer k, return\n        /// the sum of the elements with at most two digits from the first k elements of arr.\n        /// </summary>\n        /// <param name=\"arr\">List of integers</param>\n        /// <param name=\"k\">Number of first elements to consider</param>\n        /// <returns>Sum of elements with at most two digits from the first k elements</returns>\n        public static int AddElements(List<int> arr, int k)\n        {\n            int sum = 0;\n            for (int i = 0; i < k; i++)\n            {\n                if (Math.Abs(arr[i]) < 100)\n                {\n                    sum += arr[i];\n                }\n            }\n            return sum;\n        }\n        \n        public static void Main(string[] args)\n        {\n            List<int> arr = new List<int> { 111, 21, 3, 4000, 5, 6, 7, 8, 9 };\n            int k = 4;\n            int result = AddElements(arr, k);\n            Console.WriteLine(result);  // Output: 24\n        }\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Intersection(List<int> interval1, List<int> interval2)\n        {\n            int start1 = interval1[0];\n            int end1 = interval1[1];\n            int start2 = interval2[0];\n            int end2 = interval2[1];\n\n            int intersectionStart = Math.Max(start1, start2);\n            int intersectionEnd = Math.Min(end1, end2);\n\n            if (intersectionStart <= intersectionEnd)\n            {\n                int length = intersectionEnd - intersectionStart + 1;\n                if (IsPrime(length))\n                {\n                    return \"YES\";\n                }\n            }\n\n            return \"NO\";\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            int boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Intersection(new List<int> { 1, 2 }, new List<int> { 2, 3 })); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> { -1, 1 }, new List<int> { 0, 4 })); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> { -3, -1 }, new List<int> { -5, 5 })); // \"YES\"\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<object> Tri(int n)\n        {\n            Dictionary<int, int> memo = new Dictionary<int, int>();\n\n            // Function to calculate the Tribonacci value for a given index\n            int Tribonacci(int index)\n            {\n                // Base case\n                if (index == 1)\n                {\n                    return 3;\n                }\n                // Check if already calculated\n                if (memo.ContainsKey(index))\n                {\n                    return memo[index];\n                }\n\n                int result;\n                if (index % 2 == 0)\n                {\n                    result = 1 + index / 2;\n                }\n                else\n                {\n                    // Ensure that we handle out of bounds for n + 1\n                    result = Tribonacci(index - 1) + Tribonacci(index - 2) + Tribonacci(index + 1);\n                }\n\n                // Memoize the result\n                memo[index] = result;\n                return result;\n            }\n\n            // Prepare the result list with n + 1 elements\n            List<object> resultList = new List<object>();\n            for (int i = 1; i <= n + 1; i++)\n            {\n                resultList.Add(Tribonacci(i));\n            }\n\n            return resultList;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Examples\n            Console.WriteLine(string.Join(\", \", Tri(3))); // Output: 1, 3, 2, 8\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer n, return the product of the odd digits.\n        /// Return 0 if all digits are even.\n        /// For example:\n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits(int n)\n        {\n            // Convert the integer to a string to easily iterate through each digit\n            string numberString = n.ToString();\n            int product = 1;\n            bool hasOdd = false;\n\n            // Iterate through each character in the string representation of the number\n            foreach (char c in numberString)\n            {\n                int digit = c - '0'; // Convert character to integer\n\n                // Check if the digit is odd\n                if (digit % 2 != 0)\n                {\n                    product *= digit;\n                    hasOdd = true;\n                }\n            }\n\n            // If no odd digits were found, return 0\n            return hasOdd ? product : 0;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Testing the Digits method\n            Console.WriteLine(Digits(1));   // Output: 1\n            Console.WriteLine(Digits(4));   // Output: 0\n            Console.WriteLine(Digits(235)); // Output: 15\n            Console.WriteLine(Digits(123456)); // Output: 15\n            Console.WriteLine(Digits(2468)); // Output: 0\n        }\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool IsNested(string input)\n        {\n            int openBrackets = 0;\n            int nestedDepth = 0;\n            \n            foreach (char c in input)\n            {\n                if (c == '[')\n                {\n                    openBrackets++;\n                }\n                else if (c == ']')\n                {\n                    if (openBrackets > 1)\n                    {\n                        return true;\n                    }\n                    openBrackets--;\n                }\n            }\n            \n            return false;\n        }\n\n        public static void Main()\n        {\n            Console.WriteLine(IsNested(\"[[]]\")); // \u279e True\n            Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // \u279e False\n            Console.WriteLine(IsNested(\"[][]\")); // \u279e False\n            Console.WriteLine(IsNested(\"[]\")); // \u279e False\n            Console.WriteLine(IsNested(\"[[][]]\")); // \u279e True\n            Console.WriteLine(IsNested(\"[[]][[\")); // \u279e True\n        }\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// </summary>\n        public static int SumSquares(List<object> lst)\n        {\n            // Convert each element to a double, round up using Math.Ceiling, then square it\n            var squaredSums = lst.Select(x => Math.Ceiling(Convert.ToDouble(x)))\n                                 .Select(y => y * y)\n                                 .Sum();\n            \n            // Return the sum as an integer\n            return (int)squaredSums;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            List<object> lst1 = new List<object> { 1, 2, 3 };\n            List<object> lst2 = new List<object> { 1, 4, 9 };\n            List<object> lst3 = new List<object> { 1, 3, 5, 7 };\n            List<object> lst4 = new List<object> { 1.4, 4.2, 0 };\n            List<object> lst5 = new List<object> { -2.4, 1, 1 };\n\n            Console.WriteLine(SumSquares(lst1));  // Output: 14\n            Console.WriteLine(SumSquares(lst2));  // Output: 98\n            Console.WriteLine(SumSquares(lst3));  // Output: 84\n            Console.WriteLine(SumSquares(lst4));  // Output: 29\n            Console.WriteLine(SumSquares(lst5));  // Output: 6\n        }\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            // Trim trailing spaces from the input string\n            txt = txt.TrimEnd();\n\n            // Check if the string is empty after trimming\n            if (string.IsNullOrEmpty(txt))\n            {\n                return false;\n            }\n\n            // Get the last character of the trimmed string\n            char lastChar = txt.Last();\n\n            // Check if the last character is an alphabetical letter\n            if (!char.IsLetter(lastChar))\n            {\n                return false;\n            }\n\n            // Check if the last character is not part of a word\n            // It must either be preceded by a space or be the only character in the string\n            if (txt.Length == 1 || txt[txt.Length - 2] == ' ')\n            {\n                return true;\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // \u279e False\n        }\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Create a function which returns the largest index of an element which\n        /// is not greater than or equal to the element immediately preceding it. If\n        /// no such element exists then return -1. The given array will not contain\n        /// duplicate values.\n        /// \n        /// Examples:\n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange(List<int> arr)\n        {\n            // Initialize the index to -1 to indicate no such element found initially\n            int index = -1;\n\n            // Iterate through the list starting from the second element\n            for (int i = 1; i < arr.Count; i++)\n            {\n                // Check if the current element is less than or equal to the previous element\n                if (arr[i] <= arr[i - 1])\n                {\n                    // Update the index to the current position\n                    index = i;\n                }\n            }\n\n            // Return the index found, or -1 if no such element exists\n            return index;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Should print 3\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 })); // Should print -1\n        }\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns a tuple (a, b), where 'a' is\n        /// the largest of negative integers, and 'b' is the smallest\n        /// of positive integers in a list.\n        /// If there is no negative or positive integers, return them as None.\n        /// \n        /// Examples:\n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static (int?, int?) LargestSmallestIntegers(List<int> lst)\n        {\n            int? largestNegative = null;\n            int? smallestPositive = null;\n\n            foreach (int num in lst)\n            {\n                if (num < 0)\n                {\n                    if (largestNegative == null || num > largestNegative)\n                    {\n                        largestNegative = num;\n                    }\n                }\n                else if (num > 0)\n                {\n                    if (smallestPositive == null || num < smallestPositive)\n                    {\n                        smallestPositive = num;\n                    }\n                }\n            }\n\n            return (largestNegative, smallestPositive);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 2, 4, 1, 3, 5, 7 };\n            var result1 = LargestSmallestIntegers(test1);\n            Console.WriteLine(result1); // Output: (null, 1)\n\n            List<int> test2 = new List<int> { };\n            var result2 = LargestSmallestIntegers(test2);\n            Console.WriteLine(result2); // Output: (null, null)\n\n            List<int> test3 = new List<int> { 0 };\n            var result3 = LargestSmallestIntegers(test3);\n            Console.WriteLine(result3); // Output: (null, null)\n\n            List<int> test4 = new List<int> { -2, -4, -1, -3, 5, 7 };\n            var result4 = LargestSmallestIntegers(test4);\n            Console.WriteLine(result4); // Output: (-1, 5)\n\n            List<int> test5 = new List<int> { -2, -4, -1, -3 };\n            var result5 = LargestSmallestIntegers(test5);\n            Console.WriteLine(result5); // Output: (-1, null)\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// The Brazilian factorial is defined as:\n        /// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        /// where n > 0\n        /// \n        /// For example:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial(int n)\n        {\n            // Function to compute factorial of a given number\n            int Factorial(int x)\n            {\n                int result = 1;\n                for (int i = 1; i <= x; i++)\n                {\n                    result *= i;\n                }\n                return result;\n            }\n\n            int specialFactorial = 1;\n            for (int i = 1; i <= n; i++)\n            {\n                specialFactorial *= Factorial(i);\n            }\n\n            return specialFactorial;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFactorial(4)); // Output: 288\n            Console.WriteLine(SpecialFactorial(5)); // Output: 34560\n        }\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a string representing a sentence,\n        /// the sentence contains some words separated by a space,\n        /// and you have to return a string that contains the words from the original sentence,\n        /// whose lengths are prime numbers,\n        /// the order of the words in the new string should be the same as the original one.\n        /// \n        /// Example 1:\n        /// Input: sentence = \"This is a test\"\n        /// Output: \"is\"\n        /// \n        /// Example 2:\n        /// Input: sentence = \"lets go for swimming\"\n        /// Output: \"go for\"\n        /// \n        /// Constraints:\n        /// * 1 <= len(sentence) <= 100\n        /// * sentence contains only letters\n        /// \n        /// </summary>\n        public static string WordsInSentence (string sentence) \n        {\n            // Helper function to check if a number is prime\n            bool IsPrime(int n)\n            {\n                if (n <= 1) return false;\n                if (n == 2) return true;\n                if (n % 2 == 0) return false;\n                for (int i = 3; i * i <= n; i += 2)\n                {\n                    if (n % i == 0) return false;\n                }\n                return true;\n            }\n\n            // Split the sentence into words\n            var words = sentence.Split(' ');\n\n            // Filter words whose lengths are prime numbers\n            var primeLengthWords = words.Where(word => IsPrime(word.Length)).ToList();\n\n            // Join the filtered words back into a string\n            return string.Join(\" \", primeLengthWords);\n        }\n\n        // Test the implementation\n        public static void Main()\n        {\n            string sentence1 = \"This is a test\";\n            string sentence2 = \"lets go for swimming\";\n            Console.WriteLine(WordsInSentence(sentence1)); // Output: \"is\"\n            Console.WriteLine(WordsInSentence(sentence2)); // Output: \"go for\"\n        }\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool Simplify(string x, string n)\n        {\n            // Parse the fractions\n            var xParts = x.Split('/');\n            var nParts = n.Split('/');\n\n            int xNumerator = int.Parse(xParts[0]);\n            int xDenominator = int.Parse(xParts[1]);\n            \n            int nNumerator = int.Parse(nParts[0]);\n            int nDenominator = int.Parse(nParts[1]);\n\n            // Multiply the numerators and denominators\n            int resultantNumerator = xNumerator * nNumerator;\n            int resultantDenominator = xDenominator * nDenominator;\n\n            // Check if the resultant fraction is a whole number\n            return resultantNumerator % resultantDenominator == 0;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function which sorts the given list of integers\n        /// in ascending order according to the sum of their digits.\n        /// Note: if there are several items with similar sum of their digits,\n        /// order them based on their index in original list.\n        /// \n        /// For example:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            // Helper function to compute the sum of digits of an integer\n            int DigitSum(int num)\n            {\n                return Math.Abs(num).ToString().Sum(c => c - '0');\n            }\n\n            // Sorting by the sum of digits, and maintaining the original order for ties\n            return nums\n                .Select((num, index) => new { num, index, digitSum = DigitSum(num) })\n                .OrderBy(x => x.digitSum)\n                .ThenBy(x => x.index)\n                .Select(x => x.num)\n                .ToList();\n        }\n\n        // Test cases\n        public static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { 1, 11, -1, -11, -12 };\n            List<int> test2 = new List<int> { };\n\n            Console.WriteLine(string.Join(\", \", OrderByPoints(test1))); // Output: [-1, -11, 1, -12, 11]\n            Console.WriteLine(string.Join(\", \", OrderByPoints(test2))); // Output: []\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes an array of numbers as input and returns \n        /// the number of elements in the array that are greater than 10 and both \n        /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n        /// For example:\n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter(List<int> nums)\n        {\n            // Helper function to determine if a digit is odd\n            bool IsOdd(int digit)\n            {\n                return digit % 2 != 0;\n            }\n\n            // Helper function to extract the first digit of a number\n            int GetFirstDigit(int num)\n            {\n                num = Math.Abs(num); // Ensure the number is positive\n                while (num >= 10)\n                {\n                    num /= 10;\n                }\n                return num;\n            }\n\n            // Helper function to extract the last digit of a number\n            int GetLastDigit(int num)\n            {\n                return Math.Abs(num) % 10;\n            }\n\n            // Filter the list based on the criteria\n            return nums.Count(num =>\n            {\n                if (num <= 10) return false;\n\n                int firstDigit = GetFirstDigit(num);\n                int lastDigit = GetLastDigit(num);\n\n                return IsOdd(firstDigit) && IsOdd(lastDigit);\n            });\n        }\n\n        static void Main(string[] args)\n        {\n            var nums1 = new List<int> { 15, -73, 14, -15 };\n            var nums2 = new List<int> { 33, -2, -3, 45, 21, 109 };\n\n            Console.WriteLine(SpecialFilter(nums1)); // Output: 1\n            Console.WriteLine(SpecialFilter(nums2)); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "int[] a = new int[n];\n   for (int i = 0; i < n; i++)\n   {\n       a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n   }"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// There are eight planets in our solar system: the closest to the Sun \n        /// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n        /// Uranus, Neptune.\n        /// Write a function that takes two planet names as strings planet1 and planet2. \n        /// The function should return a tuple containing all planets whose orbits are \n        /// located between the orbit of planet1 and the orbit of planet2, sorted by \n        /// the proximity to the sun. \n        /// The function should return an empty tuple if planet1 or planet2\n        /// are not correct planet names. \n        /// Examples\n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static (string[], string[]) Bf(string planet1, string planet2)\n        {\n            // List of planets in order of their distance from the Sun\n            List<string> planets = new List<string>\n            {\n                \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n            };\n\n            // Check if both planet1 and planet2 are valid planets\n            if (!planets.Contains(planet1) || !planets.Contains(planet2))\n            {\n                return (Array.Empty<string>(), Array.Empty<string>());\n            }\n\n            // Get the indices of planet1 and planet2\n            int index1 = planets.IndexOf(planet1);\n            int index2 = planets.IndexOf(planet2);\n\n            // Ensure index1 is less than index2 for simplicity\n            if (index1 > index2)\n            {\n                (index1, index2) = (index2, index1);\n            }\n\n            // Get the planets between the two indices, excluding planet1 and planet2\n            var betweenPlanets = planets.Skip(index1 + 1).Take(index2 - index1 - 1).ToArray();\n\n            return (betweenPlanets, planets.ToArray());\n        }\n\n        static void Main(string[] args)\n        {\n            var result1 = Bf(\"Jupiter\", \"Neptune\");\n            Console.WriteLine($\"Between Jupiter and Neptune: {string.Join(\", \", result1.Item1)}\");\n\n            var result2 = Bf(\"Earth\", \"Mercury\");\n            Console.WriteLine($\"Between Earth and Mercury: {string.Join(\", \", result2.Item1)}\");\n\n            var result3 = Bf(\"Mercury\", \"Uranus\");\n            Console.WriteLine($\"Between Mercury and Uranus: {string.Join(\", \", result3.Item1)}\");\n\n            var result4 = Bf(\"Pluto\", \"Earth\");\n            Console.WriteLine($\"Between Pluto and Earth: {string.Join(\", \", result4.Item1)}\");\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Determines if the given number is prime.\n        /// </summary>\n        /// <param name=\"n\">The number to check.</param>\n        /// <returns>True if the number is prime, otherwise false.</returns>\n        public static bool IsPrime(int n)\n        {\n            if (n <= 1)\n                return false;\n            if (n == 2)\n                return true;\n            if (n % 2 == 0)\n                return false;\n\n            for (int i = 3; i * i <= n; i += 2)\n            {\n                if (n % i == 0)\n                    return false;\n            }\n\n            return true;\n        }\n\n        /// <summary>\n        /// Returns the value of x if n is a prime number, otherwise returns the value of y.\n        /// </summary>\n        /// <param name=\"n\">The number to check for primality.</param>\n        /// <param name=\"x\">The value to return if n is prime.</param>\n        /// <param name=\"y\">The value to return if n is not prime.</param>\n        /// <returns>The value of x if n is prime, otherwise the value of y.</returns>\n        public static int XOrY(int n, int x, int y)\n        {\n            if (IsPrime(n))\n            {\n                return x;\n            }\n            else\n            {\n                return y;\n            }\n        }\n\n        // Example usage\n        public static void Main()\n        {\n            Console.WriteLine(XOrY(7, 34, 12));  // Output: 34\n            Console.WriteLine(XOrY(15, 8, 5));  // Output: 5\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a list of numbers, return the sum of squares of the numbers\n        /// in the list that are odd. Ignore numbers that are negative or not integers.\n        /// \n        /// DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        /// DoubleTheDifference([-1, -2, 0]) == 0\n        /// DoubleTheDifference([9, -2]) == 81\n        /// DoubleTheDifference([0]) == 0  \n        /// \n        /// If the input list is empty, return 0.\n        /// \n        /// </summary>\n        public static int DoubleTheDifference(List<object> lst)\n        {\n            int sum = 0;\n\n            foreach (var item in lst)\n            {\n                if (item is int number && number > 0 && number % 2 != 0)\n                {\n                    sum += number * number;\n                }\n            }\n\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(DoubleTheDifference(new List<object> { 1, 3, 2, 0 })); // 10\n            Console.WriteLine(DoubleTheDifference(new List<object> { -1, -2, 0 })); // 0\n            Console.WriteLine(DoubleTheDifference(new List<object> { 9, -2 })); // 81\n            Console.WriteLine(DoubleTheDifference(new List<object> { 0 })); // 0\n        }\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StrongestExtension(string class_name, List<string> extensions)\n        {\n            if (extensions == null || extensions.Count == 0)\n            {\n                throw new ArgumentException(\"The list of extensions cannot be null or empty.\");\n            }\n\n            string strongestExtension = null;\n            int maxStrength = int.MinValue;\n\n            foreach (var extension in extensions)\n            {\n                int capCount = extension.Count(char.IsUpper);\n                int smCount = extension.Count(char.IsLower);\n                int strength = capCount - smCount;\n\n                if (strength > maxStrength)\n                {\n                    maxStrength = strength;\n                    strongestExtension = extension;\n                }\n            }\n\n            return $\"{class_name}.{strongestExtension}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Example usage:\n            string className = \"Slices\";\n            List<string> extensions = new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" };\n            string result = StrongestExtension(className, extensions);\n            Console.WriteLine(result); // Output: \"Slices.SErviNGSliCes\"\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool CycpatternCheck(string a, string b)\n        {\n            // Function to generate all rotations of a string\n            List<string> GenerateRotations(string str)\n            {\n                List<string> rotations = new List<string>();\n                int len = str.Length;\n                for (int i = 0; i < len; i++)\n                {\n                    string rotation = str.Substring(i) + str.Substring(0, i);\n                    rotations.Add(rotation);\n                }\n                return rotations;\n            }\n\n            // Generate all rotations of string b\n            List<string> rotations = GenerateRotations(b);\n\n            // Check if any rotation is a substring of string a\n            foreach (string rotation in rotations)\n            {\n                if (a.Contains(rotation))\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n        }\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a positive integer, obtain its roman numeral equivalent as a string,\n        /// and return it in lowercase.\n        /// Restrictions: 1 <= num <= 1000\n        /// </summary>\n        public static string IntToMiniRoman(int number)\n        {\n            // Define the Roman numeral mappings\n            var romanNumerals = new Dictionary<int, string>\n            {\n                {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n                {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n                {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"},\n                {1, \"I\"}\n            };\n\n            // Initialize the result string\n            string result = \"\";\n\n            // Iterate through the mappings, constructing the Roman numeral string\n            foreach (var item in romanNumerals)\n            {\n                while (number >= item.Key)\n                {\n                    result += item.Value;\n                    number -= item.Key;\n                }\n            }\n\n            // Convert the result to lowercase\n            return result.ToLower();\n        }\n\n        // Example usage\n        public static void Main()\n        {\n            Console.WriteLine(IntToMiniRoman(19));  // Output: xix\n            Console.WriteLine(IntToMiniRoman(152)); // Output: clii\n            Console.WriteLine(IntToMiniRoman(426)); // Output: cdxxvi\n        }\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given the lengths of the three sides of a triangle. Return True if the three\n        /// sides form a right-angled triangle, False otherwise.\n        /// A right-angled triangle is a triangle in which one angle is right angle or \n        /// 90 degree.\n        /// Example:\n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// \n        /// </summary>\n        public static bool RightAngleTriangle(int a, int b, int c)\n        {\n            // Sort the sides to easily identify the hypotenuse\n            int[] sides = new int[] { a, b, c };\n            Array.Sort(sides);\n            \n            // Assign the sorted sides to variables for clarity\n            int side1 = sides[0];\n            int side2 = sides[1];\n            int hypotenuse = sides[2];\n\n            // Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n            return hypotenuse * hypotenuse == side1 * side1 + side2 * side2;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(RightAngleTriangle(3, 4, 5)); // Expected output: True\n            Console.WriteLine(RightAngleTriangle(1, 2, 3)); // Expected output: False\n        }\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Solve(string s)\n        {\n            // Check if the string contains any letters\n            bool containsLetter = s.Any(char.IsLetter);\n\n            if (containsLetter)\n            {\n                // Process each character to reverse the case if it's a letter\n                return new string(s.Select(c =>\n                {\n                    if (char.IsLetter(c))\n                    {\n                        return char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n                    }\n                    return c;\n                }).ToArray());\n            }\n            else\n            {\n                // Reverse the string if no letters are found\n                return new string(s.Reverse().ToArray());\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Solve(\"1234\")); // Expected output: \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Expected output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Expected output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given a string 'text', return its md5 hash equivalent string.\n        /// If 'text' is an empty string, return null.\n        /// \n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static object StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.UTF8.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                // Convert the byte array to hexadecimal string\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                return sb.ToString();\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StringToMd5(\"Hello world\")); // Output: 3e25960a79dbc69b674cd4ec67a72c62\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers(int a, int b)\n        {\n            List<int> evenNumbers = new List<int>();\n\n            // Determine the range bounds\n            int min = Math.Min(a, b);\n            int max = Math.Max(a, b);\n\n            // Iterate through the range\n            for (int i = min; i <= max; i++)\n            {\n                // Check if the number is even\n                if (i % 2 == 0)\n                {\n                    evenNumbers.Add(i);\n                }\n            }\n\n            return evenNumbers;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> result1 = GenerateIntegers(2, 8);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 2, 4, 6, 8\n\n            List<int> result2 = GenerateIntegers(8, 2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 4, 6, 8\n\n            List<int> result3 = GenerateIntegers(10, 14);\n            Console.WriteLine(string.Join(\", \", result3)); // Output: 10, 12, 14\n\n            List<int> result4 = GenerateIntegers(10, 10);\n            Console.WriteLine(string.Join(\", \", result4)); // Output: 10\n        }\n    }\n}"}

{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\n    Eine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Initialisiere die Summe zu 0 und das Produkt zu 1\n    total_sum = 0\n    total_product = 1\n    \n    # Iteriere \u00fcber die Liste und berechne Summe und Produkt\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return total_sum, total_product"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\n    F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"The input strings must have the same length.\")\n    \n    result = []\n    for bit_a, bit_b in zip(a, b):\n        # XOR operation: '1' if bits are different, '0' if they are the same\n        xor_result = '1' if bit_a != bit_b else '0'\n        result.append(xor_result)\n    \n    return ''.join(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \n    Aus einer Liste von Zeichenketten soll die l\u00e4ngste zur\u00fcckgegeben werden. \n    Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zur\u00fcckgegeben werden. \n    Falls die Eingabeliste leer ist, soll null zur\u00fcckgegeben werden.\n    \n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n# Test cases\nassert longest([]) is None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    # Create a mapping of German words to their numeric values\n    german_to_number = {\n        'null': 0,\n        'eins': 1,\n        'zwei': 2,\n        'drei': 3,\n        'vier': 4,\n        'f\u00fcnf': 5,\n        'sechs': 6,\n        'sieben': 7,\n        'acht': 8,\n        'neun': 9\n    }\n    \n    # Create the reverse mapping from numeric values to German words\n    number_to_german = {v: k for k, v in german_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert the words to their numeric values\n    numeric_values = [german_to_number[word] for word in words]\n    \n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n    \n    # Convert the sorted numeric values back to their German words\n    sorted_words = [number_to_german[num] for num in sorted_numeric_values]\n    \n    # Join the sorted words back into a single string separated by spaces\n    return ' '.join(sorted_words)\n\n# Example usage\nprint(sort_numbers('drei eins f\u00fcnf'))  # Output: 'eins drei f\u00fcnf'"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" \n    F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Gib nur positive Zahlen in der Liste zur\u00fcck.\n    \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\n# Beispielaufrufe der Funktion:\nprint(get_positive([-1, 2, -4, 5, 6]))  # Ausgabe: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Ausgabe: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "python/9", "language": "python", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zur\u00fcck.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    \n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n        \n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n# Test der Funktion mit dem gegebenen Beispiel\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num):\n    \"\"\"\u00dcberpr\u00fcft, ob eine Zahl eine Primzahl ist.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True  # 2 ist eine Primzahl\n    if num % 2 == 0:\n        return False  # alle geraden Zahlen au\u00dfer 2 sind keine Primzahlen\n    p = 3\n    while p * p <= num:\n        if num % p == 0:\n            return False\n        p += 2\n    return True\n\ndef fibonacci_generator():\n    \"\"\"Generator f\u00fcr Fibonacci-Zahlen\"\"\"\n    a, b = 0, 1\n    while True:\n        yield b\n        a, b = b, a + b\n\ndef prime_fib(n):\n    \"\"\"\n    prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n    \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    prime_fibs = []\n    fib_gen = fibonacci_generator()\n    \n    while len(prime_fibs) < n:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            prime_fibs.append(fib_num)\n    \n    return prime_fibs[-1]\n\n# Testbeispiele\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    n = len(l)\n    # Dreifache Schleife, um alle m\u00f6glichen Tripel zu pr\u00fcfen\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    \"\"\"Berechnet das n-te Element der Fib4-Zahlenfolge.\"\"\"\n    # Basisf\u00e4lle\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialisierung der ersten vier Elemente\n    a, b, c, d = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        # Berechnung des n\u00e4chsten Elementes der Folge\n        next_val = a + b + c + d\n        # Verschieben der Werte\n        a, b, c, d = b, c, d, next_val\n    \n    return d\n\n# Testen der Funktion mit Beispielen\nprint(fib4(5))  # Erwartet: 4\nprint(fib4(6))  # Erwartet: 8\nprint(fib4(7))  # Erwartet: 14"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        # L\u00e4nge der Liste ist ungerade\n        return l_sorted[mid]\n    else:\n        # L\u00e4nge der Liste ist gerade\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2\n\n# Testf\u00e4lle\nprint(median([3, 1, 2, 4, 5]))  # 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # 15.0"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)\n\n# Beispielaufruf\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Addiere zwei Zahlen x und y.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "from collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return Counter(s0) == Counter(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))  # True\nprint(same_chars('dddddddabc', 'abcd'))  # True\nprint(same_chars('eabcd', 'dddddddabc'))  # False\nprint(same_chars('abcd', 'dddddddabce'))  # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n# Test cases to verify the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Konvertieren Sie die Listen in Sets\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Finden Sie die gemeinsamen Elemente\n    common_elements = set1 & set2\n    \n    # Konvertieren Sie die Menge in eine Liste und sortieren Sie sie\n    result = sorted(common_elements)\n    \n    return result"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int) -> int:\n    # Start with the smallest prime factor\n    factor = 2\n    # Divide n by 2 until it's odd\n    while n % factor == 0:\n        n //= factor\n    \n    # Check odd factors from 3 upwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 1, then it is a prime factor\n    if n > 1:\n        return n\n    return factor - 2\n\n# Test cases\nprint(largest_prime_factor(13195)) # Expected output: 29\nprint(largest_prime_factor(2048))  # Expected output: 2"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n ist eine Funktion, die Zahlen von 1 bis n summiert.\n    \n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\n# Testen der Funktion mit den Beispielen aus der Docstring\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100))  # Output: 5050\nprint(sum_to_n(5))  # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))  # Output: 1"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Testf\u00e4lle\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # [2, 6]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize the first three values\n    a, b, c = 0, 0, 1\n    \n    for i in range(3, n + 1):\n        next_value = a + b + c\n        a, b, c = b, c, next_value\n    \n    return c\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"sky\"))  # 1\nprint(vowels_count(\"fly\"))  # 1\nprint(vowels_count(\"AEIOUY\"))  # 6\nprint(vowels_count(\"bcdfgh\"))  # 0\nprint(vowels_count(\"Y\"))  # 1\nprint(vowels_count(\"\"))  # 0\nprint(vowels_count(\"abcdefghijklmnopqrstuvwxyz\"))  # 5\nprint(vowels_count(\"AEIOU\"))  # 5\nprint(vowels_count(\"aeioubcdfgh\"))  # 5\nprint(vowels_count(\"yYyY\"))  # 1"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    from collections import Counter\n\n    # Z\u00e4hle die H\u00e4ufigkeit jeder Zahl in der Liste\n    freq = Counter(lst)\n    \n    # Initialisieren Sie die Variable f\u00fcr das Ergebnis\n    result = -1\n    \n    # \u00dcberpr\u00fcfen Sie jede Zahl und deren H\u00e4ufigkeit\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n    \n    return result\n\n# Beispiele\nprint(search([4, 1, 2, 2, 3, 1]))  # Ausgabe: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Ausgabe: 3\nprint(search([5, 5, 4, 4, 4]))  # Ausgabe: -1"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # \u00dcberpr\u00fcfen, ob die Seiten ein g\u00fcltiges Dreieck bilden\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Halbperimeter berechnen\n    s = (a + b + c) / 2\n    \n    # Heronsche Formel f\u00fcr die Fl\u00e4che\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Fl\u00e4che auf 2 Dezimalstellen runden\n    return round(area, 2)\n\n# Beispiele\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Pr\u00fcfe, ob die Liste q ein Palindrom ist\n    if q != q[::-1]:\n        return False\n    \n    # Pr\u00fcfe, ob die Summe der Elemente von q kleiner oder gleich w ist\n    if sum(q) > w:\n        return False\n    \n    return True\n\n# Testf\u00e4lle\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    \"\"\"Gibt True zur\u00fcck, wenn die gegebene Zahl das Produkt von genau 3 Primzahlen ist, sonst False.\"\"\"\n    \n    # Liste aller Primzahlen kleiner als 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # \u00dcberpr\u00fcfe alle Kombinationen von drei Primzahlen\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    return False\n\n# Beispielaufrufe\nprint(is_multiply_prime(30))  # True, da 30 = 2 * 3 * 5\nprint(is_multiply_prime(60))  # False, da 60 = 2 * 2 * 3 * 5 (mehr als 3 Primzahlen)\nprint(is_multiply_prime(105)) # True, da 105 = 3 * 5 * 7\nprint(is_multiply_prime(97))  # False, da 97 eine Primzahl ist und kein Produkt von drei Primzahlen"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    # Wandelt die Dezimalzahl in einen Bin\u00e4rstring um und entfernt das '0b' Pr\u00e4fix\n    binary_string = bin(decimal)[2:]\n    # F\u00fcgt die 'db' Formatierung hinzu\n    formatted_binary_string = f\"db{binary_string}db\"\n    return formatted_binary_string\n\n# Beispiele:\nprint(decimal_to_binary(15))  # sollte \"db1111db\" zur\u00fcckgeben\nprint(decimal_to_binary(32))  # sollte \"db100000db\" zur\u00fcckgeben"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    # \u00dcberpr\u00fcfen, ob die L\u00e4nge des Strings mindestens 3 betr\u00e4gt\n    if len(s) < 3:\n        return False\n\n    # \u00dcberpr\u00fcfen, ob alle Gruppen von 3 aufeinanderfolgenden Buchstaben unterschiedlich sind\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Wandelt eine Liste von GPAs in eine Liste von Buchstabennoten um.\n    \n    Parameter:\n    grades (Liste von Float): Liste der GPAs.\n    \n    R\u00fcckgabe:\n    Liste von Strings: Liste der Buchstabennoten.\n    \"\"\"\n    def gpa_to_letter(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    return [gpa_to_letter(gpa) for gpa in grades]\n\n# Beispiel:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Ausgabe: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Hilfsfunktion, um zu \u00fcberpr\u00fcfen, ob eine Zahl eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    \"\"\"\u00dcberpr\u00fcft, ob die L\u00e4nge des Strings eine Primzahl ist.\"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Beispiele\nprint(prime_length('Hello'))    # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))   # False"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Berechne die Summe der Ziffern von N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Wandle die Summe in eine bin\u00e4re Zeichenkette um\n    binary_representation = bin(digit_sum)[2:]\n    \n    # Gib die bin\u00e4re Zeichenkette zur\u00fcck\n    return binary_representation\n\n# Beispiele\nprint(solve(1000))  # Ausgabe: \"1\"\nprint(solve(150))   # Ausgabe: \"110\"\nprint(solve(147))   # Ausgabe: \"1100\""}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    \n    # Durchlaufen der zweidimensionalen Liste\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    \n    # Sortieren der Koordinaten: zuerst nach Zeilen aufsteigend, dann nach Spalten absteigend\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result\n\n# Testf\u00e4lle\nprint(get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1))  # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_elements = list(set(lst))\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    unique_elements.sort()\n    return unique_elements[1]\n\n\n# Testf\u00e4lle\nprint(next_smallest([1, 2, 3, 4, 5]))  # Erwartet: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Erwartet: 2\nprint(next_smallest([]))               # Erwartet: None\nprint(next_smallest([1, 1]))           # Erwartet: None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    # Split the string into sentences based on delimiters '.', '?' and '!'\n    import re\n    sentences = re.split(r'[.?!]', S)\n    \n    # Initialize a counter for sentences starting with \"Ich\"\n    boredom_count = 0\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Strip leading and trailing whitespace\n        sentence = sentence.strip()\n        \n        # Check if the sentence starts with \"Ich\"\n        if sentence.startswith(\"Ich\"):\n            boredom_count += 1\n    \n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1\nprint(is_bored(\"Ich bin m\u00fcde. Was machen wir jetzt? Ich wei\u00df nicht!\"))  # Output: 2"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime number in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    if largest_prime is None:\n        return 0  # If no prime number is found, return 0\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(d):\n    # \u00dcberpr\u00fcfen, ob das W\u00f6rterbuch leer ist\n    if not d:\n        return False\n    \n    # \u00dcberpr\u00fcfen, ob alle Schl\u00fcssel Strings sind\n    if not all(isinstance(k, str) for k in d):\n        return False\n    \n    # \u00dcberpr\u00fcfen, ob alle Schl\u00fcssel Kleinbuchstaben oder alle Gro\u00dfbuchstaben sind\n    all_lower = all(k.islower() for k in d)\n    all_upper = all(k.isupper() for k in d)\n    \n    return all_lower or all_upper\n\n# Testf\u00e4lle\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # should return True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # should return False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # should return False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # should return True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    \n    # Wenn der Bruchteil genau 0,5 betr\u00e4gt, runden wir weg von Null\n    if num - int(num) == 0.5:\n        if num > 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1\n    elif num - int(num) == -0.5:\n        if num > 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1\n    else:\n        return round(num)\n\n# Testf\u00e4lle\nprint(closest_integer(\"10\"))      # 10\nprint(closest_integer(\"15.3\"))    # 15\nprint(closest_integer(\"14.5\"))    # 15\nprint(closest_integer(\"-14.5\"))   # -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    \n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 0:  # current_stones is even\n            current_stones += 2\n        else:  # current_stones is odd\n            current_stones += 2\n    \n    return pile\n\n# Test Cases\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "python/44", "language": "python", "completion": "import re\n\ndef words_string(s):\n    # Die regul\u00e4re Ausdrucksmuster \",\\s*|\\s+\" bedeutet:\n    # - \",\" gefolgt von beliebig vielen Leerzeichen (\\s*)\n    # - oder (|) einem oder mehreren Leerzeichen (\\s+)\n    words = re.split(r',\\s*|\\s+', s)\n    return words\n\n# Beispiele\nprint(words_string(\"Hi, my name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    \"\"\"Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Sicherstellen, dass x und y in aufsteigender Reihenfolge sind\n    if x > y:\n        return -1\n    \n    # Starten von der gr\u00f6\u00dften Zahl im Bereich und nach der gr\u00f6\u00dften geraden Zahl suchen\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # Wenn keine gerade Zahl gefunden wurde, -1 zur\u00fcckgeben\n    return -1\n\n# Testf\u00e4lle\nprint(choose_num(12, 15))  # Ausgabe: 14\nprint(choose_num(13, 12))  # Ausgabe: -1\nprint(choose_num(7, 20))   # Ausgabe: 20\nprint(choose_num(8, 8))    # Ausgabe: 8\nprint(choose_num(9, 9))    # Ausgabe: -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    # Schritt 1: \u00dcberpr\u00fcfen, ob n gr\u00f6\u00dfer als m ist\n    if n > m:\n        return -1\n    \n    # Schritt 2: Den Durchschnitt der Ganzzahlen von n bis m berechnen\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total_sum / count\n    \n    # Schritt 3: Das Ergebnis auf die n\u00e4chste Ganzzahl runden\n    rounded_average = round(average)\n    \n    # Schritt 4: Die gerundete Ganzzahl in eine bin\u00e4re Zeichenkette konvertieren\n    binary_result = bin(rounded_average)\n    \n    # Schritt 5: Die bin\u00e4re Zeichenkette zur\u00fcckgeben\n    return binary_result\n\n# Beispiele zur Pr\u00fcfung der Funktion\nprint(rounded_avg(1, 5))  # => \"0b11\"\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20))  # => \"0b1111\"\nprint(rounded_avg(20, 33))  # => \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "def factorial(x):\n    \"\"\"Hilfsfunktion zur Berechnung der Fakult\u00e4t von x.\"\"\"\n    if x == 0 or x == 1:\n        return 1\n    result = 1\n    for i in range(2, x + 1):\n        result *= i\n    return result\n\ndef sum_to_x(x):\n    \"\"\"Hilfsfunktion zur Berechnung der Summe der Zahlen von 1 bis x.\"\"\"\n    return x * (1 + x) // 2\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # i ist gerade\n            result.append(factorial(i))\n        else:  # i ist ungerade\n            result.append(sum_to_x(i))\n    return result\n\n# Beispielaufruf\nprint(f(5))  # [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(num):\n    \"\"\"\u00dcberpr\u00fcft, ob eine Zahl ein Palindrom ist.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"Gibt die Anzahl der geraden und ungeraden ganzen Palindrome im Bereich (1, n) einschlie\u00dflich zur\u00fcck.\"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Beispielaufrufe\nprint(even_odd_palindrome(3))  # Ausgabe: (1, 2)\nprint(even_odd_palindrome(12)) # Ausgabe: (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    N = len(arr)\n    \n    # Find the number of inversions (places where the order is broken)\n    count_breaks = 0\n    for i in range(1, N):\n        if arr[i-1] > arr[i]:\n            count_breaks += 1\n    \n    # Check the last element with the first element\n    if arr[-1] > arr[0]:\n        count_breaks += 1\n    \n    # If we have at most one break, it can be sorted by rotations\n    return count_breaks <= 1\n\n# Beispiele\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Z\u00e4hlen der ungeraden Zahlen in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Z\u00e4hlen der geraden Zahlen in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # \u00dcberpr\u00fcfung, ob gen\u00fcgend gerade Zahlen in lst2 vorhanden sind, um alle ungeraden Zahlen in lst1 zu ersetzen\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Beispielaufrufe\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Ausgabe: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Ausgabe: \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Entferne alle Zeichen in s, die in c enthalten sind\n    result = ''.join([char for char in s if char not in c])\n    \n    # \u00dcberpr\u00fcfe, ob die resultierende Zeichenkette ein Palindrom ist\n    is_palindrome = result == result[::-1]\n    \n    # Gib das Ergebnis als Tupel zur\u00fcck\n    return (result, is_palindrome)\n\n# Beispiele\nprint(reverse_delete(\"abcde\", \"ae\"))      # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))      # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)  # Summe aller 1s im Gitter\n    # Berechnen Sie die Anzahl der vollst\u00e4ndigen Eimerf\u00fcllungen\n    num_buckets = math.ceil(total_water_units / capacity)\n    return num_buckets\n\n# Beispielaufrufe\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Ausgabe: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Ausgabe: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Ausgabe: 0"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter words that have exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    # Sortiere das Array in absteigender Reihenfolge\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Nimm die ersten k Elemente\n    k_largest = sorted_arr[:k]\n    \n    # Sortiere die k gr\u00f6\u00dften Elemente in aufsteigender Reihenfolge\n    k_largest_sorted = sorted(k_largest)\n    \n    return k_largest_sorted\n\n# Testf\u00e4lle\nprint(maximum([-3, -4, 5], 3))  # Ausgabe: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Ausgabe: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Ausgabe: [2]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Initialisiere die Summe als 0\n    total_sum = 0\n    \n    # Iteriere durch die ersten k Elemente des Arrays\n    for i in range(k):\n        # \u00dcberpr\u00fcfe, ob das Element h\u00f6chstens zwei Ziffern hat\n        if -99 <= arr[i] <= 99:\n            # F\u00fcge das Element zur Summe hinzu\n            total_sum += arr[i]\n    \n    return total_sum\n\n# Beispieltest\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Ausgabe: 24"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Hilfsfunktion, um zu pr\u00fcfen, ob eine Zahl eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Bestimmt, ob die L\u00e4nge des Schnitts zweier Intervalle eine Primzahl ist.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Berechnung des Schnitts\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    # Wenn es keinen Schnitt gibt, ist die L\u00e4nge negativ oder null\n    if start > end:\n        return \"NO\"\n    \n    # L\u00e4nge des Schnitts\n    length = end - start\n    \n    # Pr\u00fcfen, ob die L\u00e4nge eine Primzahl ist\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Testf\u00e4lle\nprint(intersection((1, 2), (2, 3)))  # ==> \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # ==> \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # ==> \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    def tribonacci_recursive(k, memo):\n        if k in memo:\n            return memo[k]\n        if k == 0:\n            result = 1\n        elif k == 1:\n            result = 3\n        elif k % 2 == 0:\n            result = 1 + k / 2\n        else:\n            result = tribonacci_recursive(k - 1, memo) + tribonacci_recursive(k - 2, memo) + tribonacci_recursive(k + 1, memo)\n        memo[k] = result\n        return result\n\n    memo = {}\n    result = [tribonacci_recursive(i, memo) for i in range(n + 1)]\n    return result\n\n# Beispielaufruf\nprint(tri(3))  # Ausgabe: [1, 3, 2, 8]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    found_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            found_odd = True\n        n //= 10\n    \n    return product if found_odd else 0\n\n# Testf\u00e4lle\nprint(digits(1))   # Erwartet: 1\nprint(digits(4))   # Erwartet: 0\nprint(digits(235)) # Erwartet: 15"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False  # Ung\u00fcltige Klammerung\n            stack.pop()\n            if stack:\n                return True  # Verschachtelte Klammer gefunden\n    return False\n\n# Testf\u00e4lle\nprint(is_nested('[[]]'))         # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]'))         # \u279e False\nprint(is_nested('[]'))           # \u279e False\nprint(is_nested('[[][]]'))       # \u279e True\nprint(is_nested('[[]][['))       # \u279e True"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    # Liste der quadrierten Zahlen nach dem Aufrunden\n    squared_sum = sum(math.ceil(x) ** 2 for x in lst)\n    return squared_sum\n\n# Testf\u00e4lle\nprint(sum_squares([1, 2, 3]))        # Ausgabe: 14\nprint(sum_squares([1, 4, 9]))        # Ausgabe: 98\nprint(sum_squares([1, 3, 5, 7]))     # Ausgabe: 84\nprint(sum_squares([1.4, 4.2, 0]))    # Ausgabe: 29\nprint(sum_squares([-2.4, 1, 1]))     # Ausgabe: 6"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Entfernen von Leerzeichen am Ende des Strings\n    txt = txt.rstrip()\n    \n    # \u00dcberpr\u00fcfen, ob der String leer ist\n    if not txt:\n        return False\n    \n    # Das letzte Zeichen des Strings speichern\n    last_char = txt[-1]\n    \n    # \u00dcberpr\u00fcfen, ob das letzte Zeichen ein alphabetisches Zeichen ist\n    if not last_char.isalpha():\n        return False\n    \n    # \u00dcberpr\u00fcfen, ob das letzte Zeichen nicht Teil eines Wortes ist\n    # Dies ist der Fall, wenn das Zeichen am Anfang des Strings steht\n    # oder wenn das Zeichen direkt nach einem Leerzeichen steht\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    else:\n        return False\n\n# Testf\u00e4lle\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    # Gehen Sie r\u00fcckw\u00e4rts durch das Array, beginnend beim zweitletzten Element\n    for i in range(len(arr) - 2, -1, -1):\n        # Vergleichen Sie das aktuelle Element mit dem nachfolgenden Element\n        if arr[i] >= arr[i + 1]:\n            return i\n    # Wenn kein Element gefunden wird, geben Sie -1 zur\u00fcck\n    return -1\n\n# Beispiele\nprint(can_arrange([1, 2, 4, 3, 5]))  # Ausgabe: 3\nprint(can_arrange([1, 2, 3]))        # Ausgabe: -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    '''\n    Erstellen Sie eine Funktion, die ein Tupel (a, b) zur\u00fcckgibt, wobei 'a' die gr\u00f6\u00dfte negative Ganzzahl und 'b' die kleinste positive Ganzzahl in einer Liste ist. Wenn es keine negativen oder positiven Ganzzahlen gibt, geben Sie sie als None zur\u00fcck.\n\n    Beispiele:\n    \n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    # Initial set to None for both variables\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Expected output: (None, 1)\nprint(largest_smallest_integers([]))  # Expected output: (None, None)\nprint(largest_smallest_integers([0]))  # Expected output: (None, None)\nprint(largest_smallest_integers([-1, -2, -3, 0, 3, 5, 1]))  # Expected output: (-1, 1)\nprint(largest_smallest_integers([-5, -3, -1, 2, 4, 6]))  # Expected output: (-1, 2)\nprint(largest_smallest_integers([-7, -6, -5]))  # Expected output: (-5, None)\nprint(largest_smallest_integers([8, 9, 10]))  # Expected output: (None, 8)"}
{"task_id": "python/64", "language": "python", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"Calculates the Brazilian factorial of a given integer n.\"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n\n# Test the function with an example\nprint(special_factorial(4))  # Output should be 288"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        \"\"\"Hilfsfunktion, um eine Bruchzahl als Zeichenkette in Z\u00e4hler und Nenner zu zerlegen.\"\"\"\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    # Zerlegen der Bruchzahlen in Z\u00e4hler und Nenner\n    numerator_x, denominator_x = parse_fraction(x)\n    numerator_n, denominator_n = parse_fraction(n)\n\n    # Multiplizieren der Bruchzahlen\n    result_numerator = numerator_x * numerator_n\n    result_denominator = denominator_x * denominator_n\n\n    # \u00dcberpr\u00fcfen, ob das Ergebnis eine ganze Zahl ist\n    return result_numerator % result_denominator == 0\n\n# Beispiele zum Testen\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\")) # False"}
{"task_id": "python/67", "language": "python", "completion": "def sum_of_digits(n):\n    \"\"\"\n    Hilfsfunktion zur Berechnung der Summe der Ziffern einer Zahl.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    \"\"\"\n    Sortiert die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern.\n    Bei gleichen Summen wird die urspr\u00fcngliche Reihenfolge beibehalten.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n# Testf\u00e4lle\nprint(order_by_points([1, 11, -1, -11, -12]))  # Erwartet: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Erwartet: []"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    def is_odd_digit(digit):\n        \"\"\"\u00dcberpr\u00fcft, ob eine Ziffer ungerade ist.\"\"\"\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if abs(num) > 10:  # \u00dcberpr\u00fcfen, ob die Zahl gr\u00f6\u00dfer als 10 ist\n            str_num = str(abs(num))  # Konvertiere die Zahl in einen String und ignoriere das Vorzeichen\n            if is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n                count += 1\n    \n    return count\n\n# Beispielaufrufe\nprint(specialFilter([15, -73, 14, -15]))  # Ausgabe: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Ausgabe: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Erstellen des Arrays a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    # \u00dcberpr\u00fcfen aller m\u00f6glichen Tripel (i, j, k)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # \u00dcberpr\u00fcfen, ob die Summe ein Vielfaches von 3 ist\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\n# Beispiel\nprint(get_max_triples(5))  # Ausgabe: 1"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # Liste der Planeten in der Reihenfolge ihrer N\u00e4he zur Sonne\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # \u00dcberpr\u00fcfen, ob planet1 und planet2 g\u00fcltige Planetennamen sind\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Indizes der Planeten in der Liste finden\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Sicherstellen, dass index1 kleiner ist als index2\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Planeten zwischen den beiden Indizes (exklusiv) extrahieren\n    result = planets[index1 + 1:index2]\n    \n    # Resultierendes Tupel zur\u00fcckgeben\n    return tuple(result)\n\n# Beispiele\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(num):\n    \"\"\"Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Gibt x zur\u00fcck, wenn n eine Primzahl ist, sonst y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Beispiele\nprint(x_or_y(7, 34, 12))  # sollte 34 zur\u00fcckgeben\nprint(x_or_y(15, 8, 5))   # sollte 5 zur\u00fcckgeben"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # Initialisiere die Summe auf 0\n    sum_of_squares = 0\n    \n    # Durchlaufe jedes Element in der Liste\n    for num in lst:\n        # \u00dcberpr\u00fcfe, ob das Element eine positive, ungerade ganze Zahl ist\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            # F\u00fcge das Quadrat des Elements zur Summe hinzu\n            sum_of_squares += num * num\n    \n    # Gib die berechnete Summe zur\u00fcck\n    return sum_of_squares\n\n# Testf\u00e4lle\nprint(double_the_difference([1, 3, 2, 0])) # Erwartet: 10\nprint(double_the_difference([-1, -2, 0])) # Erwartet: 0\nprint(double_the_difference([9, -2])) # Erwartet: 81\nprint(double_the_difference([0])) # Erwartet: 0  \nprint(double_the_difference([])) # Erwartet: 0"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n\n# Beispiele\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    # Helper function to generate all rotations of a string\n    def rotations(s):\n        return [s[i:] + s[:i] for i in range(len(s))]\n    \n    # Generate all rotations of b\n    b_rotations = rotations(b)\n    \n    # Check if any rotation of b is a substring of a\n    for rotation in b_rotations:\n        if rotation in a:\n            return True\n    \n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\"))     # => False\nprint(cycpattern_check(\"hello\",\"ell\"))    # => True\nprint(cycpattern_check(\"whassup\",\"psus\")) # => False\nprint(cycpattern_check(\"abab\",\"baa\"))     # => True\nprint(cycpattern_check(\"efef\",\"eeff\"))    # => False\nprint(cycpattern_check(\"himenss\",\"simen\"))# => True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Gegeben eine positive Ganzzahl, erhalte ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gib sie in Kleinbuchstaben zur\u00fcck.\n    Einschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n    \n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # R\u00f6mische Ziffern und ihre Werte in absteigender Reihenfolge\n    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    # Variable zur Speicherung der r\u00f6mischen Zahl\n    roman_string = \"\"\n    \n    # Iteriere \u00fcber die r\u00f6mischen Ziffern\n    for value, numeral in roman_numerals:\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    \n    # Gebe die r\u00f6mische Zahl als Kleinbuchstaben zur\u00fcck\n    return roman_string.lower()"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides so that the largest side is c\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if the sides satisfy the Pythagorean theorem\n    return a**2 + b**2 == c**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # Expected output: True\nprint(right_angle_triangle(1, 2, 3))  # Expected output: False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if not has_letters:\n        return s[::-1]\n    else:\n        return ''.join([char.swapcase() if char.isalpha() else char for char in s])\n\n# Testf\u00e4lle\nprint(solve(\"1234\"))  # Ausgabe: \"4321\"\nprint(solve(\"ab\"))    # Ausgabe: \"AB\"\nprint(solve(\"#a@C\"))  # Ausgabe: \"#A@c\""}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    # MD5-Hash berechnen\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n\n# Beispielaufruf\nif __name__ == \"__main__\":\n    print(string_to_md5('Hello world'))  # Ausgabe: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n    \n    :param a: Erste positive ganze Zahl\n    :param b: Zweite positive ganze Zahl\n    :return: Liste der geraden Zahlen zwischen a und b in aufsteigender Reihenfolge\n    \"\"\"\n    # Feststellen, welches die kleinere und welches die gr\u00f6\u00dfere Zahl ist\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Erstellen einer Liste der geraden Zahlen zwischen start und end\n    evens = [num for num in range(start, end + 1) if num % 2 == 0]\n    \n    return evens\n\n# Beispiele\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []"}

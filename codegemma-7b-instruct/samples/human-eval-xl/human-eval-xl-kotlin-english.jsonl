{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0\n    for (operation in operations) {\n        when (operation) {\n            is Int -> balance += operation\n            else -> balance -= 1\n        }\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): List<Int> {\n    var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        sum += number\n        product *= number\n    }\n\n    return listOf(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    val sb = StringBuilder()\n    for (i in a.indices) {\n        sb.append(if (a[i] == b[i]) '0' else '1')\n    }\n    return sb.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<String>): String? {\n    if (strings.isEmpty()) {\n        return null\n    }\n\n    var longestString = strings[0]\n    var maxLength = longestString.length\n\n    for (i in 1 until strings.size) {\n        val currentString = strings[i]\n        val currentLength = currentString.length\n\n        if (currentLength > maxLength) {\n            longestString = currentString\n            maxLength = currentLength\n        }\n    }\n\n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var temp: Int\n    var divisor = if (a > b) b else a\n\n    while (divisor > 0) {\n        temp = a % divisor\n        if (temp == 0 && b % divisor == 0) {\n            return divisor\n        }\n        divisor--\n    }\n\n    return 1\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numList = numbers.split(\" \").sortedBy { it }\n    return numList.joinToString(\" \")\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    if (numbers.size < 2) {\n        throw IllegalArgumentException(\"List must have at least two elements.\")\n    }\n\n    val min = numbers.minOrNull()!!\n    val max = numbers.maxOrNull()!!\n\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map {\n        if (it.isLowerCase()) it.uppercase() else it.lowercase()\n    }.joinToString(\"\")\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Any> {\n    return l.filter { it is Int && it > 0 } as List<Any>\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n : Int) : Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.distinct().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2 until num) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun primeFib(n: Int): Int {\n    var num = 2\n    var count = 0\n    while (true) {\n        if (isPrime(num) && isPrime(fib(num))) {\n            count++\n            if (count == n) {\n                return fib(num)\n            }\n        }\n        num++\n    }\n}\n\nfun fib(num: Int): Int {\n    if (num <= 1) return num\n    return fib(num - 1) + fib(num - 2)\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    if (l.size < 3) return false\n\n    for (i in 0 until l.size - 2) {\n        val target = -l[i]\n        var j = i + 1\n        var k = l.size - 1\n\n        while (j < k) {\n            val sum = l[j] + l[k]\n\n            when {\n                sum == target -> return true\n                sum < target -> j++\n                else -> k--\n            }\n        }\n    }\n\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val set = HashSet<Int>()\n    for (num in l) {\n        if (set.contains(-num)) {\n            return true\n        }\n        set.add(num)\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n <= 3) return n % 4\n    val arr = IntArray(n + 1)\n    arr[0] = 0\n    arr[1] = 0\n    arr[2] = 2\n    arr[3] = 0\n    for (i in 4 until n + 1) {\n        arr[i] = (arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]) % 4\n    }\n    return arr[n]\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0) {\n        (sortedList[size / 2] + sortedList[size / 2 - 1]) / 2.0\n    } else {\n        sortedList[size / 2]\n    }\n}\n</end_of_turn>"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val normalizedText = text.lowercase().replace(\"[^a-zA-Z0-9]\".toRegex(), \"\")\n    return normalizedText == normalizedText.reversed()\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    return text.filter { it !in vowels }\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "fun add(x : Int, y : Int) : Int {\n    return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    val charCounts = mutableMapOf<Char, Int>()\n\n    // Count characters in the first string\n    for (c in s0) {\n        charCounts[c] = charCounts.getOrDefault(c, 0) + 1\n    }\n\n    // Check if the second string has the same characters and counts\n    for (c in s1) {\n        if (!charCounts.containsKey(c) || charCounts[c] == 0) {\n            return false\n        }\n        charCounts[c] = charCounts[c]!! - 1\n    }\n\n    return true\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    return when (n) {\n        1 -> 1\n        2 -> 1\n        else -> fib(n - 1) + fib(n - 2)\n    }\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return l1.intersect(l2).sorted().toList()\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var number = n\n    var factor = 2\n    while (factor * factor <= number) {\n        while (number % factor == 0) {\n            number /= factor\n        }\n        factor++\n    }\n    return if (number > 1) number else factor - 1\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs : List<Int>) : List<Int> {\n    return xs.drop(1).mapIndexed { index, element -> index * element }\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    val sequence = mutableListOf(0, 0, 1)\n\n    for (i in 3..n) {\n        sequence.add(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    }\n\n    return sequence[n]\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    var count = 0\n\n    for (i in s.indices) {\n        if (vowels.contains(s[i].toLowerCase())) {\n            count++\n        }\n    }\n\n    if (s.endsWith('y')) {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst : List<Int>) : Int {\n    val map = mutableMapOf<Int, Int>()\n    for (num in lst) {\n        map[num] = map.getOrDefault(num, 0) + 1\n    }\n    for (entry in map) {\n        if (entry.key > 0 && entry.value >= entry.key) {\n            return entry.key\n        }\n    }\n    return -1\n}\n</start_of_turn>"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "fun triangleArea(a: Int, b: Int, c: Int): Any {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return String.format(\"%.2f\", Math.sqrt(s * (s - a) * (s - b) * (s - c)))\n    }\n    return -1\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q : List<Int>, w : Int) : Boolean {\n    val sum = q.sum()\n    if (sum > w) return false\n    val reversed = q.reversed()\n    return q == reversed\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    if (a <= 1) return false\n\n    var factors = 0\n    var i = 2\n    while (i * i <= a) {\n        while (a % i == 0) {\n            factors++\n            a /= i\n        }\n        i++\n    }\n\n    return factors == 3\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    var num = decimal\n    var binary = \"\"\n\n    while (num > 0) {\n        binary = (num % 2).toString() + binary\n        num /= 2\n    }\n\n    return \"db\" + binary + \"db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) return false\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Any>): List<String> {\n    val letterGrades = mutableListOf<String>()\n\n    for (grade in grades) {\n        when (grade) {\n            is Double -> {\n                when {\n                    grade >= 4.0 -> letterGrades.add(\"A+\")\n                    grade >= 3.7 -> letterGrades.add(\"A\")\n                    grade >= 3.3 -> letterGrades.add(\"A-\")\n                    grade >= 3.0 -> letterGrades.add(\"B+\")\n                    grade >= 2.7 -> letterGrades.add(\"B\")\n                    grade >= 2.3 -> letterGrades.add(\"B-\")\n                    grade >= 2.0 -> letterGrades.add(\"C+\")\n                    grade >= 1.7 -> letterGrades.add(\"C\")\n                    grade >= 1.3 -> letterGrades.add(\"C-\")\n                    grade >= 1.0 -> letterGrades.add(\"D+\")\n                    grade >= 0.7 -> letterGrades.add(\"D\")\n                    grade >= 0.0 -> letterGrades.add(\"D-\")\n                    else -> letterGrades.add(\"E\")\n                }\n            }\n            else -> throw IllegalArgumentException(\"Invalid grade input\")\n        }\n    }\n\n    return letterGrades\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    if (length <= 1) return false\n    for (i in 2 until length) {\n        if (length % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    var num = n\n    var sum = 0\n\n    while (num > 0) {\n        sum += num % 2\n        num /= 2\n    }\n\n    return sum.toString(2)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst: List<List<Int>>, x: Int): List<Pair<Int, Int>> {\n    val result = mutableListOf<Pair<Int, Int>>()\n\n    for ((rowIndex, row) in lst.withIndex()) {\n        val columns = row.filterIsInstance<Int>()\n        for (columnIndex in columns.indices.reversed()) {\n            if (columns[columnIndex] == x) {\n                result.add(Pair(rowIndex, columnIndex))\n            }\n        }\n    }\n\n    result.sortBy { it.first }\n    return result\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Any>): Int? {\n    if (lst.size < 2) return null\n    val set = lst.filterIsInstance<Int>().toSortedSet()\n    return set.elementAtOrNull(1)\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(s : String) : Int {\n    val sentences = s.split(\"[.?!]\".toRegex())\n    var boredomCount = 0\n    for (sentence in sentences) {\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++\n        }\n    }\n    return boredomCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun skjkasdkd(lst : List<Int>) : Int {\n    val primeNumbers = lst.filter { isPrime(it) }\n    val largestPrime = primeNumbers.maxOrNull() ?: 0\n    return largestPrime.toString().sumOf { it.digitToInt() }\n}\n\nfun isPrime(num: Int): Boolean {\n    if (num < 2) return false\n    for (i in 2 until num) {\n        if (num % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    if (dict.isEmpty()) {\n        return false\n    }\n\n    val isLowerCase = dict.keys.all { it is String && it.toLowerCase() == it }\n    val isUpperCase = dict.keys.all { it is String && it.toUpperCase() == it }\n\n    return isLowerCase || isUpperCase\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    val floor = number.toInt()\n    val ceil = floor + 1\n    return if (number - floor <= ceil - number) floor else ceil\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf(n)\n    var stones = n\n    while (true) {\n        stones = if (stones % 2 == 0) stones + 1 else stones - 1\n        result.add(stones)\n        if (stones == 1) break\n    }\n    return result.reversed()\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    return s.split(Regex(\"[,\\\\s]\"))\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x : Int, y : Int) : Int {\n    var answer = -1\n    for (i in x..y) {\n        if (i % 2 == 0) {\n            answer = i\n        }\n    }\n    return answer\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) {\n        return -1\n    }\n    val sum = (n..m).sum()\n    val average = Math.round(sum.toDouble() / (m - n + 1)).toInt()\n    return Integer.toBinaryString(average)\n}\n</start_of_turn>"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    val result = MutableList(n) { 0 }\n\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            var factorial = 1\n            for (j in 1..i) {\n                factorial *= j\n            }\n            result[i - 1] = factorial\n        } else {\n            result[i - 1] = (1..i).sum()\n        }\n    }\n\n    return result\n}\n</end_of_turn>"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    for (num in 1..n) {\n        val reversedNum = num.toString().reversed().toInt()\n\n        if (num == reversedNum) {\n            if (num % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Any>): Boolean {\n    if (arr.isEmpty()) return true\n\n    val sortedArr = arr.sorted()\n\n    var count = 0\n    val n = arr.size\n\n    while (count < n) {\n        if (arr[count] == sortedArr[count]) {\n            count++\n        } else {\n            val temp = arr[n - 1]\n            for (i in n - 1 downTo 1) {\n                arr[i] = arr[i - 1]\n            }\n            arr[0] = temp\n        }\n    }\n\n    return arr == sortedArr\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    var oddCount = 0\n    for (num in lst1) {\n        if (num % 2 != 0) {\n            oddCount++\n        }\n    }\n\n    if (oddCount > lst2.size) {\n        return \"NO\"\n    }\n\n    return \"YES\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    val sb = StringBuilder(s)\n    for (ch in c.toCharArray()) {\n        while (sb.isNotEmpty() && sb[0] == ch) {\n            sb.deleteCharAt(0)\n        }\n    }\n    val result = sb.toString()\n    return listOf(result, result == result.reversed())\n}\n</end_of_turn>"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    val rows = grid.size\n    val cols = grid[0].size\n\n    var filledWater = 0\n    var times = 0\n\n    while (filledWater < rows * cols) {\n        for (row in 0 until rows) {\n            for (col in 0 until cols) {\n                if (grid[row][col] == 1 && filledWater < capacity) {\n                    filledWater++\n                    grid[row][col] = 0\n                }\n            }\n        }\n        times++\n    }\n\n    return times - 1\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    if (s.isEmpty()) {\n        return emptyList()\n    }\n\n    val words = s.split(\" \")\n    val result = mutableListOf<String>()\n\n    for (word in words) {\n        var consonants = 0\n        for (char in word) {\n            if (char.toLowerCase() in \"bcdfghjklmnpqrstvwxyz\") {\n                consonants++\n            }\n        }\n        if (consonants == n) {\n            result.add(word)\n        }\n    }\n\n    return result\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    val sortedArray = arr.sortedDescending()\n    return sortedArray.take(k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.slice(0 until k).filter { it in 10..99 }.sum()\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n\n    if (start > end) {\n        return \"NO\"\n    }\n\n    val length = end - start + 1\n    return if (isPrime(length)) \"YES\" else \"NO\"\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): List<Any> {\n    val result = mutableListOf<Any>()\n    for (i in 0..n) {\n        result.add(when {\n            i < 3 -> i + 1\n            i % 2 == 0 -> 1 + i / 2\n            else -> result[i - 1] + result[i - 2] + result[i - 3]\n        })\n    }\n    return result\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var num = n\n    var product = 1\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) {\n            product *= digit\n        }\n        num /= 10\n    }\n    return product\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var count = 0\n    for (c in string) {\n        if (c == '[') {\n            count++\n        } else if (c == ']') {\n            count--\n        }\n        if (count < 0) {\n            return false\n        }\n    }\n    return count == 0\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    return lst.map {\n        val num = when (it) {\n            is Int -> it\n            is Double -> kotlin.math.ceil(it).toInt()\n            else -> throw IllegalArgumentException(\"Unsupported type: ${it::class}\")\n        }\n        num * num\n    }.sum()\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    val lastChar = txt.lastOrNull()\n    return lastChar != null && lastChar.isLetter() && (txt.lastIndexOf(\" \") + 1) >= txt.length\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Any>): Int {\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            return i - 1\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n\n    for (item in lst) {\n        when (item) {\n            is Int -> {\n                if (item < 0 && (largestNegative == null || item > largestNegative)) {\n                    largestNegative = item\n                }\n                if (item > 0 && (smallestPositive == null || item < smallestPositive)) {\n                    smallestPositive = item\n                }\n            }\n        }\n    }\n\n    return listOf(largestNegative, smallestPositive)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    if (n <= 0) {\n        return 1\n    }\n\n    var result = n\n    var multiplier = n - 1\n\n    while (multiplier > 0) {\n        result *= multiplier\n        multiplier--\n    }\n\n    return result\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2 until num) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    val result = mutableListOf<String>()\n    for (word in words) {\n        if (isPrime(word.length)) {\n            result.add(word)\n        }\n    }\n    return result.joinToString(\" \")\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    val numeratorX = x.split(\"/\")[0].toInt()\n    val denominatorX = x.split(\"/\")[1].toInt()\n    val numeratorN = n.split(\"/\")[0].toInt()\n    val denominatorN = n.split(\"/\")[1].toInt()\n\n    val simplifiedX = numeratorX * denominatorN\n    val simplifiedN = denominatorX * numeratorN\n\n    return simplifiedX % simplifiedN == 0\n}\n</end_of_turn>"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    val result = nums.sortedWith(compareBy(\n        { sumOfDigits(it) },\n        { nums.indexOf(it) }\n    ))\n    return result\n}\n\nfun sumOfDigits(num: Any): Int {\n    return when (num) {\n        is Int -> num.toString().sumOf { it.digitToInt() }\n        is Double -> num.toString().drop(1).sumOf { it.digitToInt() }\n        else -> 0\n    }\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    return nums.count { num ->\n        num is Int && num > 10 &&\n                num.toString().first().isDigit() && num.toString().last().isDigit() &&\n                listOf('1', '3', '5', '7', '9').contains(num.toString().first()) &&\n                listOf('1', '3', '5', '7', '9').contains(num.toString().last())\n    }\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n : Int) : Int {\n    val a = IntArray(n) { i -> i * i - i + 1 }\n    var count = 0\n    for (i in 0 until n) {\n        for (j in i + 1 until n) {\n            for (k in j + 1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\nfun bf(planet1: String, planet2: String): List<String> {\n    if (planet1 !in planets || planet2 !in planets) {\n        return emptyList()\n    }\n\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    return planets.subList(Math.min(index1, index2) + 1, Math.max(index1, index2)).sortedBy { planets.indexOf(it) }\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun xOrY(n : Int, x : Int, y : Int) : Int {\n    var flag = true\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            flag = false\n            break\n        }\n    }\n    return if (flag) x else y\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filter { it is Int && it > 0 && it % 2 != 0 }.sumOf { (it as Int).toDouble().pow(2).toInt() }\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    val extensionStrengths = extensions.map { extension ->\n        val uppercaseCount = extension.count { it.isUpperCase() }\n        val lowercaseCount = extension.count { it.isLowerCase() }\n        uppercaseCount - lowercaseCount to extension\n    }\n\n    val strongestExtension = extensionStrengths.maxByOrNull { it.first }?.second\n    return \"$className.$strongestExtension\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    val rotations = mutableListOf<String>()\n    for (i in 0 until a.length) {\n        rotations.add(a.substring(i) + a.substring(0, i))\n    }\n    return rotations.any { it.contains(b) }\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val values = arrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val romanSymbols = arrayOf(\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\")\n\n    var result = \"\"\n    var num = number\n\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            result += romanSymbols[i]\n            num -= values[i]\n        }\n    }\n\n    return result.lowercase()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a : Int, b : Int, c : Int) : Boolean {\n    val maxSide = maxOf(a, b, c)\n    val pythagoras = maxSide * maxSide == (a * a + b * b + c * c - maxSide * maxSide)\n    return pythagoras\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s : String) : String {\n    val sb = StringBuilder()\n    for (c in s) {\n        if (c.isLetter()) {\n            sb.append(if (c.isLowerCase()) c.toUpperCase() else c.toLowerCase())\n        } else {\n            sb.append(c)\n        }\n    }\n    return sb.reverse().toString()\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.math.BigInteger\nimport java.security.MessageDigest\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return \".\"\n\n    val messageDigest = MessageDigest.getInstance(\"MD5\")\n    messageDigest.update(text.toByteArray())\n\n    val digest = messageDigest.digest()\n    val bigInteger = BigInteger(1, digest)\n    val md5Hash = bigInteger.toString(16)\n\n    return md5Hash\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in Math.min(a, b)..Math.max(a, b)) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result.reversed()\n}"}

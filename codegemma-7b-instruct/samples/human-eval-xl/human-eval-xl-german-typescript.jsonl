{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>) : boolean  {\n  let balance = 0;\n\n  for (const operation of operations) {\n    balance += operation;\n\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\n</end_of_turn>"}
{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n  let balance = 0;\n\n  for (const operation of operations) {\n    balance += operation;\n\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\n</start_of_turn>"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): Array<number> {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): Array<number> {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n  return a.split('').map((c, i) => c ^ b[i]).join('');\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n  const result = [];\n\n  for (let i = 0; i < a.length; i++) {\n    result.push((a[i] === b[i]) ? '0' : '1');\n  }\n\n  return result.join('');\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n  let maxLength = longestString.length;\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      longestString = strings[i];\n      maxLength = strings[i].length;\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n  let longestLength = longestString.length;\n\n  for (const string of strings) {\n    if (string.length > longestLength) {\n      longestString = string;\n      longestLength = string.length;\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n  while (a !== b) {\n    if (a > b) {\n      a -= b;\n    } else {\n      b -= a;\n    }\n  }\n  return a;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function(a: number, b: number): number {\n  let temp: number;\n\n  while (b !== 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n\n  return a;\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n  const numberMap = {\n    null: 0,\n    eins: 1,\n    zwei: 2,\n    drei: 3,\n    vier: 4,\n    f\u00fcnf: 5,\n    sechs: 6,\n    sieben: 7,\n    acht: 8,\n    neun: 9,\n  };\n\n  const numberArray = numbers.split(' ').map((number) => numberMap[number]);\n  numberArray.sort((a, b) => a - b);\n\n  return numberArray.map((number) => Object.keys(numberMap).find((key) => numberMap[key] === number)).join(' ');\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n  const numArr = numbers.split(' ').map(num => {\n    switch (num) {\n      case 'null': return 0;\n      case 'eins': return 1;\n      case 'zwei': return 2;\n      case 'drei': return 3;\n      case 'vier': return 4;\n      case 'f\u00fcnf': return 5;\n      case 'sechs': return 6;\n      case 'sieben': return 7;\n      case 'acht': return 8;\n      case 'neun': return 9;\n      default: return null;\n    }\n  });\n  numArr.sort((a, b) => a - b);\n  return numArr.map(num => {\n    switch (num) {\n      case 0: return 'null';\n      case 1: return 'eins';\n      case 2: return 'zwei';\n      case 3: return 'drei';\n      case 4: return 'vier';\n      case 5: return 'f\u00fcnf';\n      case 6: return 'sechs';\n      case 7: return 'sieben';\n      case 8: return 'acht';\n      case 9: return 'neun';\n      default: return null;\n    }\n  }).join(' ');\n};"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n  return string0\n    .split('')\n    .map((char) => {\n      return char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    })\n    .join('');\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n  return string0.split('').map(char => {\n    return char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n  }).join('');\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>) : Array<number> {\n  return l.filter(n => n > 0);\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>) : Array<number>  {\n  return l.filter(x => x > 0);\n}"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number>  {\n    return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "typescript/11", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n};\n\nconst fibonacci = (n: number): number => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst prime_fib = (n: number): number => {\n  let num = fibonacci(0);\n  let count = 0;\n\n  while (count < n) {\n    if (isPrime(num)) {\n      count++;\n    }\n    num = fibonacci(++num);\n  }\n\n  return num - 1;\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "const isPrime = (num: number) => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst fibonacci = (n: number) => {\n  let a = 0, b = 1, c;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\nconst prime_fib = (n: number) => {\n  let num = 1;\n  while (true) {\n    num++;\n    if (isPrime(num) && fibonacci(num) === n) {\n      return num;\n    }\n  }\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>) : boolean  {\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n  const set = new Set(l);\n\n  for (const num of set) {\n    const target = -num;\n\n    for (const num2 of set) {\n      if (num === num2) continue;\n\n      if (set.has(target - num2)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>) : boolean  {\n  const set = new Set<number>();\n  for (const num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n  const seen = new Set<number>();\n\n  for (const num of l) {\n    const complement = -num;\n\n    if (seen.has(complement)) {\n      return true;\n    }\n\n    seen.add(num);\n  }\n\n  return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n  if (n <= 1) return 0;\n  if (n <= 3) return 2;\n\n  let a = 0;\n  let b = 2;\n  let c = 0;\n  let d = 0;\n\n  for (let i = 4; i <= n; i++) {\n    d = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n  }\n\n  return d;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function(n: number): number {\n  const arr = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]);\n  }\n  return arr[n];\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>) : number {\n  l.sort((a, b) => a - b);\n\n  const middle = Math.floor(l.length / 2);\n\n  if (l.length % 2 === 0) {\n    return (l[middle] + l[middle - 1]) / 2;\n  } else {\n    return l[middle];\n  }\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>) : number  {\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function(text: string): boolean {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n  const reversed = text.split('').reverse().join('');\n  return reversed === text;\n}"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string) : string {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number) : boolean  {\n  return l.every(num => num < t);\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n  return l.every(num => num < t);\n};\n</start_of_turn>"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n  return x + y;\n};\n\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12\n</end_of_turn>"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number) : number  {\n  return x + y;\n}\n\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n  const set = new Set([...s0]);\n  return [...s1].every(char => set.has(char));\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n  const map = new Map();\n\n  for (const char of s0) {\n    map.set(char, (map.get(char) || 0) + 1);\n  }\n\n  for (const char of s1) {\n    if (!map.has(char) || map.get(char) === 0) {\n      return false;\n    }\n    map.set(char, map.get(char) - 1);\n  }\n\n  return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n  let a = 0;\n  let b = 1;\n  let c = 0;\n\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n\n  return c;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function(n: number): number {\n  if (n <= 1) return n;\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>) : Array<number>  {\n  return [...new Set([...l1, ...l2])].filter(item => l1.includes(item) && l2.includes(item));\n}"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>) : Array<number>  {\n  return l1.filter(item => l2.includes(item));\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      n /= factor;\n    }\n    factor++;\n  }\n  return n > 1 ? n : factor - 1;\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let divisor = 2;\n  let largestFactor = 1;\n\n  while (divisor * divisor <= n) {\n    while (n % divisor === 0) {\n      largestFactor = divisor;\n      n /= divisor;\n    }\n    divisor++;\n  }\n\n  if (n > 1) {\n    largestFactor = n;\n  }\n\n  return largestFactor;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n  return (n * (n + 1)) / 2;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n  return (n * (n + 1)) / 2;\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number>  {\n  return xs.slice(1).map((x, i) => x * (i + 1));\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number>  {\n  return xs.map((x, i) => i > 0 ? xs[i] * i : 0);\n}"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n  if (n <= 2) {\n    return 0;\n  } else if (n === 3) {\n    return 1;\n  }\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\n  for (let i = 4; i <= n; i++) {\n    const next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n  }\n\n  return c;\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n  if (n <= 2) return 0;\n  if (n === 3) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\n  for (let i = 4; i <= n; i++) {\n    const next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n  }\n\n  return c;\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n\n  for (const char of s.toLowerCase()) {\n    if (vowels.includes(char)) {\n      if (char === 'y' && s.charAt(s.length - 1) !== char) {\n        continue;\n      }\n      count++;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n\n  for (const char of s.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n\n  if (s.endsWith('y')) {\n    count++;\n  }\n\n  return count;\n};\n</end_of_turn>"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n  const frequencies = new Map<number, number>();\n\n  // Calculate frequencies of each number\n  for (const num of lst) {\n    frequencies.set(num, (frequencies.get(num) || 0) + 1);\n  }\n\n  // Find maximum number with frequency >= itself\n  let result = -1;\n  for (const [num, frequency] of frequencies.entries()) {\n    if (frequency >= num && num > result) {\n      result = num;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>) : number  {\n  const freqMap = new Map<number, number>();\n\n  // Calculate frequencies\n  for (const num of lst) {\n    freqMap.set(num, (freqMap.get(num) || 0) + 1);\n  }\n\n  // Find the largest number with frequency >= itself\n  let result = -1;\n  for (const [num, freq] of freqMap.entries()) {\n    if (freq >= num && num > result) {\n      result = num;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function(a: number, b: number, c: number): number {\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2;\n        return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n    } else {\n        return -1;\n    }\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number) : boolean {\n  // \u00dcberpr\u00fcfen, ob die Liste ausbalanciert ist\n  const isPalindrome = (list: Array<number>) => {\n    const reversedList = [...list].reverse();\n    return JSON.stringify(list) === JSON.stringify(reversedList);\n  };\n\n  // \u00dcberpr\u00fcfen, ob die Liste ausbalanciert ist und die Summe der Elemente kleiner oder gleich dem maximalen Gewicht ist\n  return isPalindrome(q) && q.reduce((acc, num) => acc + num, 0) <= w;\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n  // Palindromische Liste \u00fcberpr\u00fcfen\n  const isPalindrome = (list: Array<number>): boolean => {\n    const reversed = [...list].reverse();\n    return JSON.stringify(list) === JSON.stringify(reversed);\n  };\n\n  // Elementen summieren\n  const sum = q.reduce((acc, num) => acc + num, 0);\n\n  // Bedingungen \u00fcberpr\u00fcfen\n  return isPalindrome(q) && sum <= w;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n  if (a < 2) return false;\n\n  let divisor = 2;\n  let factors = 0;\n\n  while (divisor <= Math.sqrt(a)) {\n    while (a % divisor === 0) {\n      factors++;\n      a /= divisor;\n    }\n    divisor++;\n  }\n\n  return factors === 3;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n  if (a < 2) return false;\n  let i = 3;\n  let count = 0;\n\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      count++;\n      if (count > 2) return false;\n    }\n    i += 2;\n  }\n\n  return count === 2;\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n  const binary = [];\n\n  while (decimal > 0) {\n    binary.unshift(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return 'db' + binary.join('') + 'db';\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n  const binary = [];\n\n  while (decimal > 0) {\n    binary.unshift(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return 'db' + binary.join('') + 'db';\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i < s.length - 2; i += 3) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n  if (s.length < 3) return false;\n\n  for (let i = 0; i <= s.length - 3; i++) {\n    if (s.charAt(i) === s.charAt(i + 1) && s.charAt(i) === s.charAt(i + 2)) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string> {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else {\n            return 'D-';\n        }\n    });\n}"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string>  {\n  const letter_grades = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else {\n      return 'D-';\n    }\n  });\n  return letter_grades;\n}"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const prime_length = function (string0: string): boolean {\n  const length = string0.length;\n\n  if (length <= 1) {\n    return false;\n  }\n\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst prime_length = (string0: string): boolean => {\n  return isPrime(string0.length);\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function(N: number): string {\n  let sum = 0;\n  let num = N;\n\n  while (num > 0) {\n    sum += num % 2;\n    num = Math.floor(num / 2);\n  }\n\n  return sum.toString(2);\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number): Array<[number, number]> {\n  const result: Array<[number, number]> = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number): Array<[number, number]> {\n  const result: Array<[number, number]> = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): any {\n  if (lst.length < 2) {\n    return null;\n  }\n\n  let min = Infinity;\n  let secondMin = Infinity;\n\n  for (const num of lst) {\n    if (num < min) {\n      secondMin = min;\n      min = num;\n    } else if (num < secondMin && num !== min) {\n      secondMin = num;\n    }\n  }\n\n  return secondMin;\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>) : any  {\n  if (lst.length < 2) {\n    return null;\n  }\n  \n  let min = Infinity;\n  let second_min = Infinity;\n  \n  for (const num of lst) {\n    if (num < min) {\n      second_min = min;\n      min = num;\n    } else if (num < second_min && num !== min) {\n      second_min = num;\n    }\n  }\n  \n  return second_min;\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n  const sentences = S.split(/[!.?]/);\n  let count = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"I \")) {\n      count++;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n  const sentences = S.split(/[!.?]/);\n  let count = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"Ich\")) {\n      count++;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst sumOfDigits = (num: number): number => {\n  return num.toString().split('').map(Number).reduce((a, b) => a + b);\n};\n\nconst findLargestPrime = (lst: Array<number>): number => {\n  let largestPrime = 0;\n  for (const num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n  return largestPrime;\n};\n\nconst calculateResult = (lst: Array<number>): number => {\n  const largestPrime = findLargestPrime(lst);\n  return sumOfDigits(largestPrime);\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const skjkasdkd = function(lst: Array<number>): number {\n  const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  let maxPrime = 0;\n  for (const num of lst) {\n    if (isPrime(num) && num > maxPrime) {\n      maxPrime = num;\n    }\n  }\n\n  let sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime = Math.floor(maxPrime / 10);\n  }\n\n  return sum;\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>) : boolean  {\n  if (dict.size === 0) {\n    return false;\n  }\n\n  const firstKey = Object.keys(dict)[0].toUpperCase();\n  const isAllLowerCase = firstKey === Object.keys(dict)[0].toLowerCase();\n\n  return Object.keys(dict).every(key => key.toUpperCase() === firstKey);\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>) : boolean  {\n  if (dict.size === 0) {\n    return false;\n  }\n\n  const firstKeyCase = dict.keys().next().value.toUpperCase();\n\n  for (const key of dict.keys()) {\n    if (key.toUpperCase() !== firstKeyCase) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function (value: string): number {\n  const number = parseFloat(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n\n  if (Math.abs(number - floor) === Math.abs(number - ceil)) {\n    return number > 0 ? ceil : floor;\n  }\n\n  return number > 0 ? floor : ceil;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = (value: string): number => {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  if (Math.abs(num - floor) === Math.abs(num - ceil)) {\n    return num > 0 ? ceil : floor;\n  }\n\n  return num >= 0 ? ceil : floor;\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n  const stones: Array<number> = [];\n  let currentStones = n;\n\n  while (true) {\n    stones.push(currentStones);\n\n    if (currentStones === 1) {\n      break;\n    }\n\n    currentStones = n % 2 === 0 ? currentStones + 2 : currentStones + 1;\n    n = Math.floor(n / 2);\n  }\n\n  return stones.reverse();\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n  const result: Array<number> = [];\n\n  for (let i = 0; i < n; i++) {\n    const stones = n + 2 * i + (n % 2 === 0 ? 1 : 0);\n    result.push(stones);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n  return s.split(/[ ,]/);\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n  return s.split(/[ ,]/);\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n  let maxEven = -1;\n\n  for (let i = Math.min(x, y); i <= Math.max(x, y); i++) {\n    if (i % 2 === 0) {\n      maxEven = Math.max(maxEven, i);\n    }\n  }\n\n  return maxEven;\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number) : number  {\n  let biggestEven = -1;\n\n  for (let i = Math.max(x, 2); i <= y; i += 2) {\n    biggestEven = i;\n  }\n\n  return biggestEven;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): string | number {\n  if (n > m) {\n    return -1;\n  }\n\n  const sum = Array.from({ length: m - n + 1 }, (_, i) => n + i).reduce((acc, curr) => acc + curr, 0);\n  const avg = Math.round(sum / (m - n + 1));\n  return (\"0b\" + avg.toString(2));\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number) : string | number  {\n  if (n > m) {\n    return -1;\n  }\n  const sum = Array.from({ length: m - n + 1 }, (_, i) => i + n).reduce((a, b) => a + b, 0);\n  const avg = Math.round(sum / (m - n + 1));\n  return ('0b' + avg.toString(2));\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n  const result = new Array(n);\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result[i - 1] = factorial(i);\n    } else {\n      result[i - 1] = sum(i);\n    }\n  }\n\n  return result;\n};\n\nfunction factorial(n: number): number {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n}\n\nfunction sum(n: number): number {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n}"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number) : Array<number>  {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n\n  return result;\n};\n\nfunction factorial(n: number) : number {\n  if (n === 0) {\n    return 1;\n  }\n\n  return n * factorial(n - 1);\n}\n\nfunction sum(n: number) : number {\n  let result = 0;\n\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n\n  return result;\n}"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): Array<number> {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let reversed = parseInt(i.toString().split('').reverse().join(''));\n\n    if (i === reversed) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const isPalindrome = (num: number): boolean => {\n  const reversed = parseInt([...num.toString()].reverse().join(''));\n  return num === reversed;\n};\n\nconst even_odd_palindrome = function (n: number): Array<number> {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean  {\n  if (!arr.length) return true;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) return false;\n    max = arr[i];\n  }\n  return true;\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean  {\n    if (!arr.length) return true;\n    \n    let max = arr[0];\n    let count = 0;\n    \n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            count++;\n            max = arr[i];\n        }\n    }\n    \n    return count <= arr.length - 1;\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>) : string  {\n  let oddCount = 0;\n\n  // count odd numbers in lst1\n  lst1.forEach(num => {\n    if (num % 2 !== 0) {\n      oddCount++;\n    }\n  });\n\n  // check if all odd numbers can be moved to lst2\n  if (oddCount > lst2.length) {\n    return \"NO\";\n  }\n\n  // exchange elements between lst1 and lst2 until all odd numbers are in lst2\n  while (oddCount > 0) {\n    let even = lst2.shift();\n    let odd = lst1.pop();\n    lst2.push(odd);\n    lst1.unshift(even);\n    oddCount--;\n  }\n\n  return \"YES\";\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function(lst1: Array<number>, lst2: Array<number>): string {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (const num of lst1) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  if (evenCount === lst1.length) {\n    return \"YES\";\n  }\n\n  for (const num of lst2) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  if (oddCount <= evenCount) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string) : Array<any> {\n    let result = s.split('').filter(x => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function(s: string, c: string): Array<any> {\n  let result = s.split('').filter(x => !c.includes(x)).join('');\n  return [result, result === result.split('').reverse().join('')];\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    let filled = 0;\n    let moves = 0;\n\n    while (filled < rows * cols) {\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n                if (grid[i][j] === 1 && filled < capacity) {\n                    filled++;\n                    grid[i][j] = 0;\n                }\n            }\n        }\n        moves++;\n    }\n\n    return moves - 1;\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let filled = 0;\n  let moves = 0;\n\n  while (filled < rows * cols) {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1 && filled < capacity) {\n          filled++;\n          grid[i][j] = 0;\n        }\n      }\n    }\n    moves++;\n  }\n\n  return moves - 1;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const isConsonant = (char: string): boolean => {\n  return [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"].includes(char.toLowerCase());\n};\n\nconst select_words = function (s: string, n: number): Array<string> {\n  if (!s) {\n    return [];\n  }\n\n  const words = s.split(\" \");\n  const result = [];\n\n  for (const word of words) {\n    let count = 0;\n\n    for (const char of word) {\n      if (isConsonant(char)) {\n        count++;\n      }\n    }\n\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const isConsonant = (c: string): boolean => {\n  return ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'].includes(c.toLowerCase());\n};\n\nconst select_words = (s: string, n: number): Array<string> => {\n  if (!s) return [];\n\n  const words = s.split(' ');\n  const result: Array<string> = [];\n\n  for (const word of words) {\n    let count = 0;\n    for (const c of word) {\n      if (isConsonant(c)) count++;\n    }\n    if (count === n) result.push(word);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number) : Array<number> {\n  return arr.sort((a, b) => b - a).slice(0, k);\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function(arr: Array<number>, k: number) : Array<number> {\n  return arr\n    .sort((a, b) => b - a) // Sortieren Sie das Array in absteigender Reihenfolge\n    .slice(0, k); // Extrahieren Sie die ersten k Elemente\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number) : number {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number) : number {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n\n    const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n    const isPrime = (num: number) => {\n        if (num <= 1) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    return isPrime(length) ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n  function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    let i = 5;\n    while (i * i <= num) {\n      if (num % i === 0 || num % (i + 2) === 0) return false;\n      i += 6;\n    }\n\n    return true;\n  }\n\n  return isPrime(length) ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n  const result: Array<number> = [];\n\n  for (let i = 0; i <= n; i++) {\n    result.push(tribonacci(i));\n  }\n\n  return result;\n};\n\nfunction tribonacci(n: number): number {\n  if (n <= 2) {\n    return 3;\n  } else if (n % 2 === 0) {\n    return 1 + n / 2;\n  } else {\n    return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1);\n  }\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n  const result: Array<number> = [];\n\n  for (let i = 0; i <= n; i++) {\n    result.push(tribonacci(i));\n  }\n\n  return result;\n};\n\nfunction tribonacci(n: number): number {\n  if (n <= 2) {\n    return 3;\n  } else if (n % 2 === 0) {\n    return 1 + n / 2;\n  } else {\n    return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1);\n  }\n}"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product === 1 ? 0 : product;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function(n: number): number {\n    let product = 1;\n\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n\n    return product;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n  let count = 0;\n\n  for (const char of string0) {\n    if (char === '[') {\n      count++;\n    } else if (char === ']') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string) : boolean  {\n  let count = 0;\n  for (const char of string0) {\n    if (char === '[') {\n      count++;\n    } else if (char === ']') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};\n</end_of_turn>"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>) : number  {\n  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n  return lst.map(num => Math.ceil(num)).map(num => num * num).reduce((acc, num) => acc + num, 0);\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n  const lastChar = txt[txt.length - 1];\n  return /[a-zA-Z]/.test(lastChar) && !/\\s/.test(lastChar);\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n  const lastChar = txt[txt.length - 1];\n  if (!lastChar) return false;\n  return /[a-zA-Z]/.test(lastChar) && !/\\s/.test(lastChar);\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>) : number  {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>) : number  {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>) : Array<any>  {\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    }\n\n    if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function(lst: Array<number>): Array<any> {\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    }\n\n    if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function(n: number): number {\n  if (n <= 1) {\n    return 1;\n  }\n\n  let result = n;\n\n  for (let i = n - 1; i >= 1; i--) {\n    result *= i;\n  }\n\n  return result;\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  let result = 1;\n\n  for (let i = n; i > 1; i--) {\n    result *= i * special_factorial(i - 1);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst words_in_sentence = function (sentence: string): string {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst words_in_sentence = (sentence: string): string => {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function(x: string, n: string): boolean {\n  const [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n  const [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n\n  const multipliedNumerator = xNumerator * nNumerator;\n  const multipliedDenominator = xDenominator * nDenominator;\n\n  return Number.isInteger(multipliedNumerator / multipliedDenominator);\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string) : boolean {\n  const [xNum, xDen] = x.split(\"/\").map(Number);\n  const [nNum, nDen] = n.split(\"/\").map(Number);\n\n  const result = (xNum * nDen) / (xDen * nNum);\n\n  return Number.isInteger(result);\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').map(Number).reduce((acc, num) => acc + num, 0);\n        const sumB = b.toString().split('').map(Number).reduce((acc, num) => acc + num, 0);\n\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n\n        return sumA - sumB;\n    });\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').map(Number).reduce((acc, curr) => acc + curr, 0);\n    const sumB = b.toString().split('').map(Number).reduce((acc, curr) => acc + curr, 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>) : number  {\n  return nums.filter(num => num > 10 && (num.toString()[0] % 2 === 1) && (num.toString()[num.toString().length - 1] % 2 === 1)).length;\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n  return nums.filter(num => num > 10 && num % 2 !== 0 && num % 10 !== 0).length;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number) : number  {\n    const a = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n    let count = 0;\n\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n  const a: number[] = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n\n  let count = 0;\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction bf(planet1: string, planet2: string): string[] {\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n\n  return planets.slice(Math.min(planet1Index, planet2Index), Math.max(planet1Index, planet2Index) + 1).sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n}"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n\n  return planets.slice(Math.min(planet1Index, planet2Index), Math.max(planet1Index, planet2Index) + 1).sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number): number {\n  let isPrime = true;\n\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  return isPrime ? x : y;\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number): number {\n  let isPrime = true;\n\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  return isPrime ? x : y;\n};"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n  return lst.reduce((acc, num) => {\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      return acc + Math.pow(num, 2);\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n  return lst.reduce((acc, num) => {\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      acc += Math.pow(num, 2);\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>) : string  {\n  let strongestExtension = \"\";\n  let strongestStrength = -Infinity;\n\n  extensions.forEach(extension => {\n    const cap = extension.replace(/[a-z]/g, \"\").length;\n    const sm = extension.replace(/[A-Z]/g, \"\").length;\n    const strength = cap - sm;\n\n    if (strength > strongestStrength) {\n      strongestStrength = strength;\n      strongestExtension = extension;\n    } else if (strength === strongestStrength && extension < strongestExtension) {\n      strongestExtension = extension;\n    }\n  });\n\n  return class_name + \".\" + strongestExtension;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>) : string {\n  let strongestExtension = '';\n  let strongestStrength = -Infinity;\n\n  for (const extension of extensions) {\n    const cap = extension.match(/[A-Z]/g)?.length || 0;\n    const sm = extension.match(/[a-z]/g)?.length || 0;\n    const strength = cap - sm;\n\n    if (strength > strongestStrength) {\n      strongestExtension = extension;\n      strongestStrength = strength;\n    } else if (strength === strongestStrength && extension < strongestExtension) {\n      strongestExtension = extension;\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n};"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n  const rotations = [b, b.slice(1) + b.charAt(0), b.slice(2) + b.charAt(0) + b.charAt(1), b.slice(3) + b.charAt(0) + b.charAt(1) + b.charAt(2)];\n  return rotations.some(rotation => a.includes(rotation));\n};"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string) : boolean  {\n  return a.includes(b) || Array.from(a).map((_, i) => a.slice(i)).some(rot => rot.includes(b));\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number: number): string {\n    const romanNumerals: { [key: number]: string } = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I',\n    };\n\n    let result = '';\n\n    for (const [value, numeral] of Object.entries(romanNumerals).sort((a, b) => parseInt(b[0]) - parseInt(a[0]))) {\n        while (number >= parseInt(value)) {\n            result += numeral;\n            number -= parseInt(value);\n        }\n    }\n\n    return result.toLowerCase();\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (num: number): string {\n  const map: [number, string][] = [\n    [1000, 'M'],\n    [900, 'CM'],\n    [500, 'D'],\n    [400, 'CD'],\n    [100, 'C'],\n    [90, 'XC'],\n    [50, 'L'],\n    [40, 'XL'],\n    [10, 'X'],\n    [9, 'IX'],\n    [5, 'V'],\n    [4, 'IV'],\n    [1, 'I'],\n  ];\n\n  let result = '';\n\n  for (const [value, numeral] of map) {\n    while (num >= value) {\n      result += numeral;\n      num -= value;\n    }\n  }\n\n  return result.toLowerCase();\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number) : boolean  {\n  const maxSide = Math.max(a, b, c);\n  const otherSides = a === maxSide ? [b, c] : b === maxSide ? [a, c] : [a, b];\n  return Math.pow(maxSide, 2) === Math.pow(otherSides[0], 2) + Math.pow(otherSides[1], 2);\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n  return s.split('').map(c => {\n    if (/[a-zA-Z]/.test(c)) {\n      return c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n    } else {\n      return c;\n    }\n  }).reverse().join('');\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string) : string  {\n    return s.split('').map(c => c.match(/[a-zA-Z]/) ? (c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()) : c).join('')\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function (text: string): string | null {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function (text: string): string | null {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number) : Array<number>  {\n  const result: Array<number> = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number) : Array<number>  {\n  const result: Array<number> = [];\n  const start = Math.min(a, b);\n  const end = Math.max(a, b);\n\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};"}

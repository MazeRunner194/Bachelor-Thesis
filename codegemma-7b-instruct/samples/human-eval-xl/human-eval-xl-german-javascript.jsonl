{"task_id": "javascript/0", "language": "javascript", "completion": "def belowZero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n\n  for (const operation of operations) {\n    balance += operation;\n\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "def sum_product(numbers):\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product"}
{"task_id": "javascript/1", "language": "javascript", "completion": "def sum_product(numbers):\n    \"\"\"\n    Returns a tuple containing the sum and product of all numbers in a list.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        A tuple containing the sum and product.\n    \"\"\"\n\n    sum_ = 0\n    product = 1\n\n    for number in numbers:\n        sum_ += number\n        product *= number\n\n    return sum_, product"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n  const result = [];\n\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] !== b[i] ? '1' : '0');\n  }\n\n  return result.join('');\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n  let result = \"\";\n\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n\n  return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n  let maxLength = strings[0].length;\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      longestString = strings[i];\n      maxLength = strings[i].length;\n    }\n  }\n\n  return longestString;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n  let maxLength = longestString.length;\n\n  for (const string of strings) {\n    if (string.length > maxLength) {\n      longestString = string;\n      maxLength = string.length;\n    }\n  }\n\n  return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (b !== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (b) {\n    const t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  // Ersetze die Zahlen durch ihre Positionen im Alphabet\n  const numberPositions = {\n    null: 0,\n    eins: 1,\n    zwei: 2,\n    drei: 3,\n    vier: 4,\n    f\u00fcnf: 5,\n    sechs: 6,\n    sieben: 7,\n    acht: 8,\n    neun: 9,\n  };\n\n  // Sortiere die Zahlen nach ihren Positionen im Alphabet\n  const sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return numberPositions[a] - numberPositions[b];\n  });\n\n  // Gib den sortierten String zur\u00fcck\n  return sortedNumbers.join(' ');\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numberMap = {\n    null: 0,\n    eins: 1,\n    zwei: 2,\n    drei: 3,\n    vier: 4,\n    f\u00fcnf: 5,\n    sechs: 6,\n    sieben: 7,\n    acht: 8,\n    neun: 9,\n  };\n\n  const numberArr = numbers.split(' ');\n  numberArr.sort((a, b) => numberMap[a] - numberMap[b]);\n\n  return numberArr.join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(char => {\n    return char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase();\n  }).join('');\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(char => {\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(x => x > 0);\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(x => x > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n\ndef prime_fib(n):\n    fib_index = 0\n    fib_num = fibonacci(fib_index)\n    while fib_num <= n:\n        if isPrime(fib_num):\n            return fib_num\n        fib_index += 1\n        fib_num = fibonacci(fib_index)"}
{"task_id": "javascript/11", "language": "javascript", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return fib_sequence[n-1]\n\ndef prime_fib(n):\n    fib_index = 0\n    fib_number = fibonacci(fib_index)\n    while fib_index < n:\n        if is_prime(fib_number):\n            fib_index += 1\n        else:\n            fib_number = fibonacci(fib_index)\n    return fib_number"}
{"task_id": "javascript/12", "language": "javascript", "completion": "def triplesSumToZero(l):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n    Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    \"\"\"\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[i])\n            seen.add(l[j])\n    return False"}
{"task_id": "javascript/12", "language": "javascript", "completion": "def triplesSumToZero(l):\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if -(l[i] + l[j]) in seen:\n                return True\n            seen.add(l[i])\n            seen.add(l[j])\n    return False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "def pairsSumToZero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  if (n <= 3) {\n    return n;\n  }\n\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n\n  for (let i = 4; i <= n; i++) {\n    d = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n  }\n\n  return d;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  const len = 4;\n  const arr = new Array(n + 1).fill(0);\n  arr[2] = 2;\n  for (let i = 3; i <= n; i++) {\n    for (let j = i - len; j <= i - 1; j++) {\n      arr[i] += arr[j];\n    }\n  }\n  return arr[n];\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    // Sortiere die Liste in aufsteigender Reihenfolge.\n    l.sort((a, b) => a - b);\n\n    // Gib die meadiane zur\u00fcck.\n    const len = l.length;\n    if (len % 2 === 0) {\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else {\n        return l[Math.floor(len / 2)];\n    }\n}\n</end_of_turn>"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[middle] + l[middle - 1]) / 2;\n  } else {\n    return l[middle];\n  }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "def is_palindrome(text):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()  # Umwandlung in Kleinbuchstaben\n    return text == text[::-1]  # R\u00fcckwarts-Vergleich mit Slicing"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  return l.every(num => num < t);\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  return l.every(num => num < t);\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "return x + y;"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  return new Set([...s0].sort()).toString() === new Set([...s1].sort()).toString();\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  return new Set([...s0].sort()).size === new Set([...s1].sort()).size;\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) return n;\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  return l1.filter(x => l2.includes(x));\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  // Sortiere die Listen aufsteigend\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n\n  // Finde die gemeinsamen Elemente\n  const commonElements = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      commonElements.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return commonElements;\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let divisor = 2;\n  let largestFactor = 1;\n\n  while (divisor * divisor <= n) {\n    while (n % divisor === 0) {\n      largestFactor = divisor;\n      n /= divisor;\n    }\n    divisor++;\n  }\n\n  if (n > 1) {\n    largestFactor = n;\n  }\n\n  return largestFactor;\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let i = 2;\n  let largestFactor = 1;\n\n  while (i * i <= n) {\n    while (n % i === 0) {\n      largestFactor = i;\n      n /= i;\n    }\n    i++;\n  }\n\n  if (n > largestFactor) {\n    largestFactor = n;\n  }\n\n  return largestFactor;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "def sum_to_n(n):\n    \"\"\"\n    Summe von Zahlen von 1 bis n.\n\n    Args:\n        n (int): Die oberste Zahl der Summe.\n\n    Returns:\n        int: Die Summe der Zahlen von 1 bis n.\n    \"\"\"\n\n    return (n * (n + 1)) // 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  return (n * (n + 1)) / 2;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "return xs.slice(1).map((x, i) => x * xs[i + 1]);"}
{"task_id": "javascript/25", "language": "javascript", "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  const fib = [0, 0, 1];\n\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n\n  return fib[n];\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  const fib = [0, 0, 1];\n\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n\n  return fib[n];\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "def vowelsCount(s):\n    vowels = set('aeiou')\n    count = 0\n    for char in s:\n        if char in vowels or (char == 'y' and s.endswith(char)):\n            count += 1\n    return count"}
{"task_id": "javascript/27", "language": "javascript", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "javascript/28", "language": "javascript", "completion": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n\n    for num in counts:\n        if counts[num] >= num:\n            return num\n\n    return -1"}
{"task_id": "javascript/28", "language": "javascript", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            return num\n    return -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        s = (a + b + c) / 2\n        return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c))) * 100) / 100\n    } else {\n        return -1\n    }\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "def willItFly(q, w):\n    # \u00dcberpr\u00fcfen Sie, ob die Liste q ausbalanciert ist.\n    def isPalindrome(q):\n        return q == q[::-1]\n\n    # \u00dcberpr\u00fcfen Sie, ob die Summe der Elemente in q kleiner oder gleich w ist.\n    def sumOfElements(q):\n        return sum(q)\n\n    # Wenn die Liste ausbalanciert ist und die Summe der Elemente kleiner oder gleich w ist, wird q fliegen.\n    return isPalindrome(q) and sumOfElements(q) <= w"}
{"task_id": "javascript/30", "language": "javascript", "completion": "def willItFly(q, w):\n    def isPalindrome(q):\n        return q == q[::-1]\n\n    return isPalindrome(q) and sum(q) <= w"}
{"task_id": "javascript/31", "language": "javascript", "completion": "def isMultiplyPrime(a):\n    if a <= 1:\n        return False\n    if a % 2 == 0 and a % 3 == 0 and a % 5 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "javascript/31", "language": "javascript", "completion": "import math\n\ndef isMultiplyPrime(a):\n    if a <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    \n    while a % 2 == 0:\n        a /= 2\n    \n    while a % 3 == 0:\n        a /= 3\n    \n    while a % 5 == 0:\n        a /= 5\n    \n    return a == 1"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  let binary = '';\n  let quotient = decimal;\n\n  while (quotient > 0) {\n    let remainder = quotient % 2;\n    binary = remainder + binary;\n    quotient = Math.floor(quotient / 2);\n  }\n\n  return 'db' + binary + 'db';\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "javascript/33", "language": "javascript", "completion": "def isHappy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n\n    return True"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i <= s.length - 3; i += 3) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n\n  return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "def numericalLetterGrade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n\n    Args:\n        grades: A list of GPAs.\n\n    Returns:\n        A list of letter grades.\n    \"\"\"\n\n    grade_map = {\n        (4.0, 4.3): 'A+',\n        (3.7, 3.9): 'A',\n        (3.3, 3.6): 'A-',\n        (3.0, 3.2): 'B+',\n        (2.7, 2.9): 'B',\n        (2.3, 2.6): 'B-',\n        (2.0, 2.2): 'C+',\n        (1.7, 1.9): 'C',\n        (1.3, 1.6): 'C-',\n        (1.0, 1.2): 'D+',\n        (0.7, 0.9): 'D',\n        (0.0, 0.6): 'D-',\n        (0.0, 0.0): 'E'\n    }\n\n    letter_grades = []\n\n    for grade in grades:\n        for (min_grade, max_grade), letter_grade in grade_map.items():\n            if min_grade <= grade < max_grade:\n                letter_grades.append(letter_grade)\n                break\n\n    return letter_grades"}
{"task_id": "javascript/34", "language": "javascript", "completion": "def numericalLetterGrade(grades):\n    \"\"\"\n    :type grades: list[float]\n    :rtype: list[str]\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "javascript/35", "language": "javascript", "completion": "def prime_length(string):\n    \"\"\"\n    Checks if the length of a string is a prime number.\n\n    Args:\n        string: The string to check.\n\n    Returns:\n        True if the length is prime, False otherwise.\n    \"\"\"\n\n    length = len(string)\n\n    if length <= 1:\n        return False\n\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n\n    return True"}
{"task_id": "javascript/35", "language": "javascript", "completion": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "javascript/36", "language": "javascript", "completion": "def solve(n):\n    sum = 0\n    while n > 0:\n        sum += n % 2\n        n //= 2\n    return bin(sum)[2:]"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n  let sum = 0;\n\n  while (n > 0) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n\n  return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "def getRow(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"task_id": "javascript/37", "language": "javascript", "completion": "def get_row(lst, x):\n    \"\"\"\n    Finds all the coordinates of a given number in a nested list.\n\n    Args:\n        lst: A nested list.\n        x: The number to find.\n\n    Returns:\n        A list of tuples, representing the coordinates of the number.\n    \"\"\"\n\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append((i, j))\n\n    # Sort the coordinates by row in ascending order.\n    coords.sort(key=lambda coord: coord[0])\n\n    # Sort the coordinates of each row in descending order.\n    coords.sort(key=lambda coord: coord[1], reverse=True)\n\n    return coords"}
{"task_id": "javascript/38", "language": "javascript", "completion": "def next_smallest(lst):\n    if not lst or len(lst) <= 1:\n        return None\n    min_val = min(lst)\n    min_idx = lst.index(min_val)\n    if min_idx == 0:\n        return lst[1]\n    return lst[min_idx - 1]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "def next_smallest(lst):\n    if not lst or len(lst) <= 1:\n        return None\n\n    min_val = min(lst)\n    sorted_lst = sorted(lst)\n\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] > min_val:\n            return sorted_lst[i]\n\n    return None"}
{"task_id": "javascript/39", "language": "javascript", "completion": "def is_bored(s):\n    sentences = s.split('. ') + s.split('? ') + s.split('! ')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            return 1\n    return 0"}
{"task_id": "javascript/39", "language": "javascript", "completion": "def is_bored(s):\n    sentences = s.split('. ') + s.split('? ') + s.split('! ')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "javascript/40", "language": "javascript", "completion": "import math\n\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(number):\n    sum = 0\n    while number > 0:\n        sum += number % 10\n        number //= 10\n    return sum\n\ndef find_largest_prime(lst):\n    largest_prime = 0\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n    return sum_of_digits(largest_prime)"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    // Find the largest prime number in the list\n    let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n    }\n\n    // Calculate the sum of the digits of the largest prime number\n    let sum = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime / 10);\n    }\n\n    return sum;\n}\n\n// Function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n\n    return true;\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "def checkDictCase(dict):\n    if not dict:\n        return False\n\n    first_key_case = dict[next(iter(dict))].islower()\n\n    for key in dict:\n        if key.islower() != first_key_case:\n            return False\n\n    return True"}
{"task_id": "javascript/41", "language": "javascript", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    first_key_case = dict[next(iter(dict))].islower()\n\n    for key in dict:\n        if key.islower() != first_key_case:\n            return False\n\n    return True"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n  const number = parseFloat(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n\n  if (Math.abs(number - floor) === Math.abs(number - ceil)) {\n    return number > 0 ? ceil : floor;\n  } else {\n    return number > 0 ? floor : ceil;\n  }\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  if (Math.abs(num - floor) === Math.abs(num - ceil)) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return num > 0 ? floor : ceil;\n  }\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, create a pile of n levels of stones.\n    \"\"\"\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n + 2\n        pile.append(n)\n    return pile[::-1]"}
{"task_id": "javascript/43", "language": "javascript", "completion": "def make_a_pile(n):\n    pile = [n]\n    while True:\n        if n % 2 == 0:\n            n = n + 1\n        else:\n            n = n + 2\n        pile.append(n)\n        if n >= len(pile) * 2:\n            break\n    return pile"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  return s.split(/[ ,]/);\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  return s.match(/[^\\s,]+/g);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  let result = -1;\n\n  for (let i = Math.max(x, 2); i <= y; i += 2) {\n    result = i;\n  }\n\n  return result;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) {\n    return -1;\n  }\n  const sum = Array.from({ length: m - n + 1 }, (_, i) => i + n).reduce((acc, num) => acc + num, 0);\n  const average = Math.round(sum / (m - n + 1));\n  return (\"0b\" + average.toString(2));\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) {\n    return -1;\n  }\n\n  const sum = Array.from({ length: m - n + 1 }, (_, i) => i + n).reduce((a, b) => a + b, 0);\n  const average = Math.round(sum / (m - n + 1));\n  return (\"0b\" + average.toString(2));\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n\n  return result;\n}\n\nfunction factorial(n) {\n  let product = 1;\n\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n\n  return product;\n}\n\nfunction sum(n) {\n  let total = 0;\n\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n\n  return total;\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"}
{"task_id": "javascript/48", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n + 1):\n        str_i = str(i)\n        str_i_rev = str_i[::-1]\n\n        if str_i == str_i_rev:\n            if int(str_i) % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd"}
{"task_id": "javascript/48", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n\n    Args:\n        n: Positive ganze Zahl.\n\n    Returns:\n        Tupel mit der Anzahl der geraden und ungeraden ganzen Palindrome.\n    \"\"\"\n\n    def isPalindrome(number):\n        return str(number) == str(number)[::-1]\n\n    odd = 0\n    even = 0\n\n    for i in range(1, n + 1):\n        if isPalindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)"}
{"task_id": "javascript/49", "language": "javascript", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    max_val = max(arr)\n    min_val = min(arr)\n\n    if max_val - min_val + 1 == len(arr):\n        return True\n\n    return False"}
{"task_id": "javascript/49", "language": "javascript", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n\n    if min_index == 0:\n        return True\n\n    for i in range(min_index):\n        arr.append(arr.pop(0))\n\n    return arr[0] <= arr[1]"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  let countOdd = 0;\n\n  // Z\u00e4hle die ungeraden Elemente in lst1\n  for (let num of lst1) {\n    if (num % 2 !== 0) {\n      countOdd++;\n    }\n  }\n\n  // Es ist nicht m\u00f6glich, lst1 zu einer Liste nur mit geraden Zahlen zu machen, wenn die Anzahl der ungeraden Elemente in lst1 gr\u00f6\u00dfer als die L\u00e4nge von lst2 ist.\n  if (countOdd > lst2.length) {\n    return \"NO\";\n  }\n\n  // Tausche Elemente zwischen lst1 und lst2, bis alle Elemente von lst1 gerade sind.\n  while (countOdd > 0) {\n    let oddNum = lst1.shift();\n    let evenNum = lst2.shift();\n    lst1.push(evenNum);\n    lst2.push(oddNum);\n    countOdd--;\n  }\n\n  return \"YES\";\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  let result = s.split('').filter(x => !c.includes(x)).join('');\n\n  return [result, result === result.split('').reverse().join('')];\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  // L\u00f6schen Sie alle Zeichen in s, die einem Zeichen in c entsprechen.\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n\n  // \u00dcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n  let reversed = result.split('').reverse().join('');\n  let isPalindrome = result === reversed;\n\n  return [result, isPalindrome];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let filled = 0;\n  let moves = 0;\n\n  while (filled < rows * cols) {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1 && filled < capacity) {\n          grid[i][j] = 0;\n          filled++;\n        }\n      }\n    }\n    moves++;\n  }\n\n  return moves - 1;\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let filled = 0;\n  let moves = 0;\n\n  while (filled < rows * cols) {\n    // Find a bucket with water\n    let waterFound = false;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1) {\n          waterFound = true;\n          break;\n        }\n      }\n      if (waterFound) break;\n    }\n\n    if (!waterFound) break;\n\n    // Fill the bucket\n    let filledThisMove = Math.min(capacity, rows * cols - filled);\n    filled += filledThisMove;\n\n    // Mark the bucket as empty\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1) {\n          grid[i][j] = 0;\n          break;\n        }\n      }\n    }\n\n    moves++;\n  }\n\n  return moves;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n  if (!s) return [];\n\n  const words = s.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    let count = 0;\n\n    for (const char of word) {\n      if (char.match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n        count++;\n      }\n    }\n\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n  const words = s.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    let consonants = 0;\n\n    for (const char of word) {\n      if (char.match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n        consonants++;\n      }\n    }\n\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "def addElements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n  return isPrime(length) ? \"YES\" : \"NO\";\n}\n\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n\n    const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n    if (length <= 1) {\n        return \"NO\";\n    }\n\n    if (Number.isInteger(Math.sqrt(length))) {\n        return \"NO\";\n    }\n\n    return \"YES\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    const result = [1];\n\n    for (let i = 1; i <= n; i++) {\n        if (i <= 2) {\n            result.push(3);\n        } else {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n            }\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n  const result = [1];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n  let num = n;\n\n  while (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n\n  return product;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n\n  return product;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n  let count = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Trimme den String von Leerzeichen am Ende ab.\n    txt = txt.rstrip()\n\n    # \u00dcberpr\u00fcfe, ob das letzte Zeichen ein alphabetisches Zeichen ist.\n    if txt and txt[-1].isalpha() and txt[-1] not in \" \":\n        return True\n\n    # Keines der Bedingungen ist erf\u00fcllt, also gib False zur\u00fcck.\n    return False"}
{"task_id": "javascript/61", "language": "javascript", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist.\n    False sonst.\n    \"\"\"\n\n    # Leere Zeichenfolge \u00fcberpr\u00fcfen\n    if not txt:\n        return False\n\n    # Letztes Zeichen aus dem String extrahieren\n    last_char = txt[-1]\n\n    # \u00dcberpr\u00fcfen, ob das letztes Zeichen ein alphabetisches Zeichen ist\n    if last_char.isalpha() and last_char not in txt.split():\n        return True\n\n    return False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "def largestSmallestIntegers(lst):\n    \"\"\"\n    Returns a tuple with the largest negative and smallest positive integer in a list.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        A tuple with the largest negative and smallest positive integer, or (None, None) if there are no such integers.\n    \"\"\"\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "javascript/63", "language": "javascript", "completion": "def largestSmallestIntegers(lst):\n    \"\"\"\n    Returns a tuple containing the largest negative and smallest positive integers in a list.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        A tuple containing the largest negative and smallest positive integers, or (None, None) if there are no negative or positive integers in the list.\n    \"\"\"\n\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return largest_neg, smallest_pos"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  }\n\n  let result = 1;\n\n  for (let i = n; i >= 1; i--) {\n    result *= i;\n  }\n\n  return result;\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  let result = n;\n  for (let i = n - 1; i >= 1; i--) {\n    result *= i;\n  }\n  return result;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n\n  return result.join(' ');\n}\n\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n\n  return result.join(' ');\n}\n\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"\n    Vereinfacht den Ausdruck x * n.\n\n    Args:\n        x: Die erste Br\u00fcche.\n        n: Die zweite Br\u00fcche.\n\n    Returns:\n        True, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False.\n    \"\"\"\n\n    a = Fraction(x)\n    b = Fraction(n)\n\n    result = a * b\n\n    return result.numerator % result.denominator == 0"}
{"task_id": "javascript/66", "language": "javascript", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"\n    Vereinfacht den Ausdruck x * n.\n\n    Args:\n        x: Die erste Zahl als Zeichenkette im Format <Z\u00e4hler>/<Nenner>.\n        n: Die zweite Zahl als Zeichenkette im Format <Z\u00e4hler>/<Nenner>.\n\n    Returns:\n        True, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False.\n    \"\"\"\n\n    # Konvertiere die Zeichenketten in Br\u00fcche.\n    a = Fraction(int(x.split(\"/\")[0]), int(x.split(\"/\")[1]))\n    b = Fraction(int(n.split(\"/\")[0]), int(n.split(\"/\")[1]))\n\n    # Multipliziere die Br\u00fcche.\n    c = a * b\n\n    # \u00dcberpr\u00fcfe, ob das Ergebnis eine ganze Zahl ist.\n    return c.numerator % c.denominator == 0"}
{"task_id": "javascript/67", "language": "javascript", "completion": "def orderByPoints(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    sorted_nums = sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n    return sorted_nums"}
{"task_id": "javascript/67", "language": "javascript", "completion": "def orderByPoints(nums):\n    def sum_of_digits(num):\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    sorted_nums = sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n    return sorted_nums"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n  return nums.filter(num => num > 10 && num % 2 !== 0 && num % 10 !== 0).length;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n  return nums.filter(num => num > 10 && (num % 2 !== 0) && (num % 10 !== 0)).length;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "public class TriplesWithSumMultipleOfThree {\n\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "public class Main {\n\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        int count = getMaxTriples(n);\n        System.out.println(count); // Output: 1\n    }\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "def bf(planet1, planet2):\n    \"\"\"\n    Returns a tuple of planets between planet1 and planet2, sorted by distance from the Sun.\n\n    Args:\n        planet1: The first planet name.\n        planet2: The second planet name.\n\n    Returns:\n        A tuple of planets between planet1 and planet2, sorted by distance from the Sun.\n    \"\"\"\n\n    # Check if planet1 and planet2 are valid planets\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Get the indices of planet1 and planet2\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    # Get the planets between planet1 and planet2\n    result = planets[index1:index2 + 1]\n\n    # Sort the planets by distance from the Sun\n    result.sort()\n\n    return tuple(result)"}
{"task_id": "javascript/70", "language": "javascript", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # \u00dcberpr\u00fcfen Sie, ob die Planetennamen korrekt sind\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Stellen Sie sicher, dass planet1 kleiner als planet2 ist\n    if planets.index(planet1) > planets.index(planet2):\n        planet1, planet2 = planet2, planet1\n\n    # finden Sie die Positionen der Planeten in der Liste\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2) + 1\n\n    # Erstellen Sie ein Tupel mit den Planeten zwischen planet1 und planet2\n    result = tuple(planets[start_index:end_index])\n\n    return result"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n  let isPrime = true;\n\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return x;\n  } else {\n    return y;\n  }\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n  let isPrime = true;\n\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return x;\n  } else {\n    return y;\n  }\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "def doubleTheDifference(lst):\n    \"\"\"\n    Gebe die Summe der Quadrate der ungeraden Zahlen in der Liste zur\u00fcck.\n\n    Args:\n        lst: Die Liste der Zahlen.\n\n    Returns:\n        Die Summe der Quadrate der ungeraden Zahlen in der Liste.\n    \"\"\"\n\n    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum += num ** 2\n\n    return sum"}
{"task_id": "javascript/72", "language": "javascript", "completion": "def double_the_difference(lst):\n    sum_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_squares += num ** 2\n    return sum_squares"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n  let strongest = { name: '', strength: Infinity };\n\n  for (const extension of extensions) {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    const strength = cap - sm;\n\n    if (strength < strongest.strength || (strength === strongest.strength && extension < strongest.name)) {\n      strongest = { name: extension, strength: strength };\n    }\n  }\n\n  return `${classname}.${strongest.name}`;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n  let strongestExtension = '';\n  let strongestStrength = Infinity;\n\n  for (const extension of extensions) {\n    const strength = extension.replace(/[A-Z]/g, '').length - extension.replace(/[a-z]/g, '').length;\n\n    if (strength < strongestStrength) {\n      strongestExtension = extension;\n      strongestStrength = strength;\n    }\n  }\n\n  return classname + '.' + strongestExtension;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  const rotations = [b];\n  for (let i = b.length - 1; i > 0; i--) {\n    rotations.push(b.slice(i) + b.slice(0, i));\n  }\n  return rotations.some(rotation => a.includes(rotation));\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  const rotations = new Set();\n  let rotated = b;\n  for (let i = 0; i < b.length; i++) {\n    rotations.add(rotated);\n    rotated = rotated.slice(1) + rotated[0];\n  }\n  return rotations.has(a);\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(num) {\n  const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  const symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n  \n  let result = \"\";\n  \n  for (let i = 0; i < values.length; i++) {\n    while (num >= values[i]) {\n      result += symbols[i];\n      num -= values[i];\n    }\n  }\n  \n  return result.toLowerCase();\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(num) {\n  const romanNumerals = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n\n  let result = \"\";\n\n  for (const numeral in romanNumerals) {\n    while (num >= romanNumerals[numeral]) {\n      result += numeral;\n      num -= romanNumerals[numeral];\n    }\n  }\n\n  return result.toLowerCase();\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    * \n    * Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib True zur\u00fcck, wenn die drei Seiten ein rechtwinkliges Dreieck bilden, ansonsten False. Ein rechtwinkliges Dreieck ist ein Dreieck, bei dem ein Winkel ein rechter Winkel oder 90 Grad ist. Beispiel:\n    * \n    * right_angle_triangle(3, 4, 5) == True\n    * right_angle_triangle(1, 2, 3) == False\n    *\n    \"\"\"\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "javascript/76", "language": "javascript", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    let res = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/)) {\n            res += s[i].toUpperCase() === s[i] ? s[i].toLowerCase() : s[i].toUpperCase();\n        } else {\n            res += s[i];\n        }\n    }\n    if (!res.match(/[a-zA-Z]/)) {\n        return s.split('').reverse().join('');\n    }\n    return res;\n}\n</end_of_turn>"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  const result = s.split('').map(c => {\n    if (c.match(/[a-zA-Z]/)) {\n      return c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n    } else {\n      return c;\n    }\n  });\n  return result.reverse().join('');\n}\n</end_of_turn>"}
{"task_id": "javascript/78", "language": "javascript", "completion": "function stringToMd5(text) {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  const result = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.reverse();\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  const result = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.reverse();\n}"}

{"task_id": "java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class BelowZero {\n\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (int) operation;\n            }\n\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "java/0", "language": "java", "completion": "public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (int) operation;\n                if (balance < 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n</end_of_turn>"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SumProduct {\n\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int num = (Integer) number;\n                sum += num;\n                product *= num;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int num = (int) number;\n                sum += num;\n                product *= num;\n            }\n        }\n\n        return Arrays.asList(sum, product);\n    }\n</start_of_turn>"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n    public static String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append((a.charAt(i) ^ b.charAt(i)) == '1' ? '1' : '0');\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n    public static String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append((a.charAt(i) ^ b.charAt(i)) - '0');\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "public static String longest(List<Object> strings) {\n    if (strings.isEmpty()) {\n        return null;\n    }\n\n    String longest = (String) strings.get(0);\n    int maxLength = longest.length();\n\n    for (int i = 1; i < strings.size(); i++) {\n        String str = (String) strings.get(i);\n        if (str.length() > maxLength) {\n            longest = str;\n            maxLength = str.length();\n        }\n    }\n\n    return longest;\n}"}
{"task_id": "java/3", "language": "java", "completion": "public static String longest(List<Object> strings) {\n        if (strings.size() == 0) {\n            return null;\n        }\n\n        String longestString = (String) strings.get(0);\n\n        for (int i = 1; i < strings.size(); i++) {\n            String currentString = (String) strings.get(i);\n            if (currentString.length() > longestString.length()) {\n                longestString = currentString;\n            }\n        }\n\n        return longestString;\n    }\n</end_of_turn>"}
{"task_id": "java/4", "language": "java", "completion": "while (a != b) {\n            if (a > b) {\n                a -= b;\n            } else {\n                b -= a;\n            }\n        }\n        return a;\n    }"}
{"task_id": "java/4", "language": "java", "completion": "public static int greatestCommonDivisor(int a, int b) {\n        while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class SortNumbers {\n    public static String sortNumbers(String numbers) {\n        String[] numArr = numbers.split(\" \");\n        Arrays.sort(numArr, Comparator.naturalOrder());\n        StringBuilder sb = new StringBuilder();\n        for (String num : numArr) {\n            sb.append(num).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.stream.Collectors;\n\npublic class SortNumbers {\n\n    public static String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\" \");\n        Arrays.sort(arr, Comparator.naturalOrder());\n        return Arrays.stream(arr).collect(Collectors.joining(\" \"));\n    }\n\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.List;\nimport java.util.Collections;\n\npublic class RescaleToUnit {\n\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must have at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        return numbers.stream()\n                .map(x -> (x - min) / (max - min))\n                .toList();\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class RescaleToUnit {\n\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (double number : numbers) {\n            min = Math.min(min, number);\n            max = Math.max(max, number);\n        }\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n\n        for (double number : numbers) {\n            rescaledNumbers.add((number - min) / (max - min));\n        }\n\n        return rescaledNumbers;\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "class FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "class FlipCase {\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class GetPositive {\n\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positiveNumbers = new ArrayList<>();\n\n        for (Object number : l) {\n            if (number instanceof Integer && ((Integer) number) > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n\n        return positiveNumbers;\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GetPositive {\n\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positiveNumbers = new ArrayList<>();\n\n        for (Object number : l) {\n            if (number instanceof Integer && ((Integer) number) > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n\n        return positiveNumbers;\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    int i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i += 6;\n    }\n    return true;\n}"}
{"task_id": "java/9", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    int i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i += 6;\n    }\n    return true;\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Unique {\n\n    public static List<Integer> unique(List<Integer> l) {\n        HashSet<Integer> set = new HashSet<>();\n        List<Integer> uniqueList = new ArrayList<>();\n\n        for (int num : l) {\n            if (set.add(num)) {\n                uniqueList.add(num);\n            }\n        }\n\n        uniqueList.sort(Integer::compare);\n        return uniqueList;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueElements = new HashSet<>();\n        List<Integer> sortedUniqueElements = new ArrayList<>();\n\n        for (Integer element : l) {\n            uniqueElements.add(element);\n        }\n\n        sortedUniqueElements.addAll(uniqueElements);\n        Collections.sort(sortedUniqueElements);\n\n        return sortedUniqueElements;\n    }\n</end_of_turn>"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class PrimeFib {\n\n    public static int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        int count = 0;\n\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n\n        return c;\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    static int fib(int n) {\n        if (n <= 1) return n;\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n\n    public static int primeFib(int n) {\n        int count = 0;\n        int fibNum = 0;\n        while (count < n) {\n            fibNum = fib(count);\n            if (isPrime(fibNum)) {\n                count++;\n            }\n        }\n        return fibNum;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "class TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int sum = l.get(i) + l.get(j);\n                int third = -sum;\n\n                if (seen.contains(third)) {\n                    return true;\n                }\n\n                seen.add(l.get(i));\n                seen.add(l.get(j));\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class TriplesSumToZero {\n\n    public static boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int target = -l.get(i) - l.get(j);\n                if (seen.contains(target)) {\n                    return true;\n                }\n                seen.add(l.get(i));\n                seen.add(l.get(j));\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n        HashSet<Integer> set = new HashSet<>();\n        for (Integer num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n</end_of_turn>"}
{"task_id": "java/13", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n    Set<Integer> seen = new HashSet<>();\n    for (int num : l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}"}
{"task_id": "java/14", "language": "java", "completion": "int[] arr = new int[n + 1];\n        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 2;\n        arr[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4];\n        }\n\n        return arr[n];\n    }"}
{"task_id": "java/14", "language": "java", "completion": "public static int fib4(int n) {\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n</end_of_turn>"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.Collections;\nimport java.util.List;\n\npublic class Median {\n\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 1) {\n            return (Number) l.get(n / 2);\n        } else {\n            int mid1 = l.get(n / 2 - 1);\n            int mid2 = l.get(n / 2);\n            return (Number) (mid1 + mid2) / 2.0;\n        }\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "public static Number median(List<Integer> l) {\n    Collections.sort(l);\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l.get(n / 2);\n    } else {\n        return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    public static Boolean isPalindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "public static String removeVowels(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"}
{"task_id": "java/18", "language": "java", "completion": "public static Boolean belowThreshold(List<Integer> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/18", "language": "java", "completion": "public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n</start_of_turn>"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n    }"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n    }"}
{"task_id": "java/20", "language": "java", "completion": "public static Boolean sameChars(String s0, String s1) {\n    Map<Character, Integer> map = new HashMap<>();\n\n    for (int i = 0; i < s0.length(); i++) {\n        map.put(s0.charAt(i), map.getOrDefault(s0.charAt(i), 0) + 1);\n    }\n\n    for (int i = 0; i < s1.length(); i++) {\n        if (!map.containsKey(s1.charAt(i)) || map.get(s1.charAt(i)) == 0) {\n            return false;\n        } else {\n            map.put(s1.charAt(i), map.get(s1.charAt(i)) - 1);\n        }\n    }\n\n    return true;\n}"}
{"task_id": "java/20", "language": "java", "completion": "```java\npublic static Boolean sameChars(String s0, String s1) {\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        return Arrays.equals(c0, c1);\n    }"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 1) return n;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }"}
{"task_id": "java/21", "language": "java", "completion": "int a = 0, b = 1, c;\n        if (n == 1) {\n            return b;\n        }\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Common {\n\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        HashSet<Integer> set = new HashSet<>(l1);\n        List<Object> result = new ArrayList<>();\n\n        for (Object element : l2) {\n            if (set.contains((Integer) element)) {\n                result.add(element);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Common {\n\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        HashSet<Integer> set = new HashSet<>(l1);\n        List<Object> common = new ArrayList<>();\n\n        for (Object o : l2) {\n            if (set.contains((Integer) o)) {\n                common.add(o);\n            }\n        }\n\n        return common;\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "```java\npublic static int largestPrimeFactor(int n) {\n        int largestFactor = 0;\n        int factor = 2;\n\n        while (n > 1) {\n            while (n % factor == 0) {\n                largestFactor = factor;\n                n /= factor;\n            }\n            factor++;\n        }\n\n        return largestFactor;\n    }"}
{"task_id": "java/23", "language": "java", "completion": "int factor = 2;\n        while (factor * factor <= n) {\n            while (n % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n        }\n        return n;\n    }"}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }"}
{"task_id": "java/24", "language": "java", "completion": "public class SumToN {\n\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n}"}
{"task_id": "java/25", "language": "java", "completion": "List<Integer> ans = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            ans.add(i * xs.get(i));\n        }\n        return ans;\n    }"}
{"task_id": "java/25", "language": "java", "completion": "public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ys = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * i);\n        }\n        return ys;\n    }\n</start_of_turn>"}
{"task_id": "java/26", "language": "java", "completion": "public static int fibfib(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }\n</end_of_turn>"}
{"task_id": "java/26", "language": "java", "completion": "public static int fibfib(int n) {\n        int[] fibfibArr = new int[n + 1];\n        fibfibArr[0] = 0;\n        fibfibArr[1] = 0;\n        fibfibArr[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfibArr[i] = fibfibArr[i - 1] + fibfibArr[i - 2] + fibfibArr[i - 3];\n        }\n\n        return fibfibArr[n];\n    }\n</end_of_turn>"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n    for (int i = 0; i < s.length(); i++) {\n        String letter = s.toLowerCase().charAt(i) + \"\";\n        if (Arrays.asList(vowels).contains(letter)) {\n            count++;\n        }\n    }\n    if (s.endsWith(\"y\")) {\n        count++;\n    }\n    return count;\n}"}
{"task_id": "java/27", "language": "java", "completion": "class VowelsCount {\n    public static int vowelsCount(String s) {\n        int count = 0;\n        s = s.toLowerCase();\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n\n        return count;\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "public static int search(List<Integer> lst) {\n    Map<Integer, Integer> map = new HashMap<>();\n\n    // Calculate the frequency of each integer\n    for (int num : lst) {\n        map.put(num, map.getOrDefault(num, 0) + 1);\n    }\n\n    // Find the maximum frequency\n    int maxFreq = 0;\n    for (int freq : map.values()) {\n        maxFreq = Math.max(maxFreq, freq);\n    }\n\n    // Find the first integer with frequency greater than or equal to itself\n    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        if (entry.getValue() >= entry.getKey()) {\n            return entry.getKey();\n        }\n    }\n\n    return -1;\n}"}
{"task_id": "java/28", "language": "java", "completion": "HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        for (int i : map.keySet()) {\n            if (map.get(i) >= i) {\n                return i;\n            }\n        }\n        return -1;\n    }"}
{"task_id": "java/29", "language": "java", "completion": "public static Number triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }"}
{"task_id": "java/29", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n    int sum = 0;\n    for (int i : q) {\n        sum += i;\n    }\n    if (sum > w) {\n        return false;\n    }\n    int start = 0;\n    int end = q.size() - 1;\n    while (start < end) {\n        if (q.get(start) != q.get(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n</end_of_turn>"}
{"task_id": "java/30", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is balanced\n        if (!isPalindrome(q)) {\n            return false;\n        }\n\n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n\n        // Return True if the sum is less than or equal to the maximum possible weight\n        return sum <= w;\n    }\n\n    // Helper function to check if a list is palindrome\n    private static boolean isPalindrome(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n        while (start < end) {\n            if (q.get(start) != q.get(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }"}
{"task_id": "java/31", "language": "java", "completion": "```java\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsMultiplyPrime {\n\n    public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0) {\n                count++;\n                a /= i;\n            }\n        }\n        if (a > 1) {\n            count++;\n        }\n        return count == 3;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "public static Boolean isMultiplyPrime(int a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        while (a % i == 0) {\n            a /= i;\n            count++;\n        }\n    }\n    return count == 3;\n}"}
{"task_id": "java/32", "language": "java", "completion": "class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder(\"db\");\n\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(1, remainder);\n            decimal /= 2;\n        }\n\n        while (binary.length() <= 7) {\n            binary.insert(1, 0);\n        }\n\n        binary.append(\"db\");\n        return binary.toString();\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder(\"db\");\n\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(1, remainder);\n            decimal /= 2;\n        }\n\n        return binary.append(\"db\").toString();\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "public static Boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n</end_of_turn>"}
{"task_id": "java/33", "language": "java", "completion": "class IsHappy {\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n</end_of_turn>"}
{"task_id": "java/35", "language": "java", "completion": "```java\n    public static Boolean primeLength(String string) {\n        int len = string.length();\n        if (len <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= len / 2; i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }"}
{"task_id": "java/36", "language": "java", "completion": "class Solve {\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "class Solve {\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n >>= 1;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (sum > 0) {\n            sb.insert(0, sum % 2);\n            sum /= 2;\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class GetRow {\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> res = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return res;\n        }\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n            if (row.contains(x)) {\n                for (int j = row.size() - 1; j >= 0; j--) {\n                    if (row.get(j) == x) {\n                        res.add(new Object[]{i, j});\n                    }\n                }\n            }\n        }\n\n        Collections.sort(res, Comparator.comparing(o -> (int[]) o)[0]);\n        Collections.sort(res, Comparator.comparing(o -> (int[]) o)[1].reversed());\n        return res;\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class GetRow {\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<>();\n\n        if (lst.isEmpty()) {\n            return result;\n        }\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Object> row = (List<Object>) lst.get(i);\n\n            if (row.contains(x)) {\n                for (int j = row.size() - 1; j >= 0; j--) {\n                    if (row.get(j) == x) {\n                        result.add(new Object[]{i, j});\n                    }\n                }\n            }\n        }\n\n        Collections.sort(result, Comparator.comparing(o -> (int[]) o)[0]);\n        Collections.sort(result, Comparator.comparing(o -> (int[]) o)[1].reversed());\n\n        return result;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "public static Integer nextSmallest(List<Object> lst) {\n    if (lst.size() <= 1) {\n        return null;\n    }\n\n    Integer smallest = Integer.MAX_VALUE;\n    Integer secondSmallest = Integer.MAX_VALUE;\n\n    for (Object num : lst) {\n        Integer value = (Integer) num;\n        if (value < smallest) {\n            secondSmallest = smallest;\n            smallest = value;\n        } else if (value < secondSmallest && value != smallest) {\n            secondSmallest = value;\n        }\n    }\n\n    return secondSmallest;\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.Collections;\nimport java.util.List;\n\npublic class NextSmallest {\n\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() < 2) {\n            return null;\n        }\n\n        List<Integer> sortedList = new ArrayList<>(lst.size());\n        for (Object o : lst) {\n            sortedList.add((Integer) o);\n        }\n\n        Collections.sort(sortedList);\n\n        return sortedList.get(1);\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "public static int isBored(String s) {\n    String[] sentences = s.split(\"[.?!]\");\n    int boredomCount = 0;\n\n    for (String sentence : sentences) {\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n\n    return boredomCount;\n}"}
{"task_id": "java/39", "language": "java", "completion": "public static int isBored(String s) {\n    String[] sentences = s.split(\"[.?!]\");\n    int boredoms = 0;\n\n    for (String sentence : sentences) {\n        if (sentence.startsWith(\"I \")) {\n            boredoms++;\n        }\n    }\n\n    return boredoms;\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class Skjkasdkd {\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class Skjkasdkd {\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        int sumOfDigits = 0;\n        while (largestPrime != 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "class CheckDictCase {\n    public static Boolean checkDictCase(Object dict) {\n        if (dict instanceof HashMap) {\n            HashMap<?, ?> map = (HashMap<?, ?>) dict;\n            if (map.isEmpty()) {\n                return false;\n            }\n\n            boolean isLowercase = true;\n            boolean isUppercase = true;\n\n            for (Object key : map.keySet()) {\n                if (!(key instanceof String)) {\n                    return false;\n                }\n\n                String keyStr = (String) key;\n\n                if (!keyStr.toLowerCase().equals(keyStr)) {\n                    isLowercase = false;\n                }\n\n                if (!keyStr.toUpperCase().equals(keyStr)) {\n                    isUppercase = false;\n                }\n            }\n\n            return isLowercase || isUppercase;\n        }\n\n        return false;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "public static Boolean checkDictCase(Object dict) {\n    if (dict == null || ((Map<?, ?>) dict).isEmpty()) {\n        return false;\n    }\n\n    boolean isLowerCase = true;\n    boolean isUpperCase = true;\n\n    for (Object key : ((Map<?, ?>) dict).keySet()) {\n        if (key instanceof String) {\n            if (!((String) key).toLowerCase().equals(key)) {\n                isLowerCase = false;\n            }\n            if (!((String) key).toUpperCase().equals(key)) {\n                isUpperCase = false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    return isLowerCase || isUpperCase;\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double number = Double.parseDouble(value);\n        double floor = Math.floor(number);\n        double ceiling = Math.ceil(number);\n\n        if (Math.abs(number - floor) < Math.abs(number - ceiling)) {\n            return (int) floor;\n        } else {\n            return (int) ceiling;\n        }\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        int rounded = (int) Math.round(num);\n\n        if (Math.abs(num - rounded) <= 0.5) {\n            return rounded;\n        } else {\n            return num > 0 ? rounded + 1 : rounded - 1;\n        }\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "public static List<Integer> makeAPile(int n) {\n        List<Integer> ans = new ArrayList<>();\n        while (n > 0) {\n            ans.add(n);\n            n = n % 2 == 0 ? n + 1 : n - 1;\n        }\n        return ans;\n    }"}
{"task_id": "java/43", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class MakeAPile {\n\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n = n + 1;\n            } else {\n                n = n - 1;\n            }\n        }\n        return pile;\n    }\n\n}"}
{"task_id": "java/44", "language": "java", "completion": "public static List<Object> wordsString(String s) {\n    List<Object> words = new ArrayList<>();\n    String[] tokens = s.split(\"[, ]+\");\n    for (String token : tokens) {\n        words.add(token);\n    }\n    return words;\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class WordsString {\n\n    public static List<Object> wordsString(String s) {\n        List<Object> words = new ArrayList<>();\n        String[] tokens = s.split(\"[, ]+\");\n        for (String token : tokens) {\n            words.add(token);\n        }\n        return words;\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "class ChooseNum {\n    public static int chooseNum(int x, int y) {\n        int ans = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "class ChooseNum {\n    public static int chooseNum(int x, int y) {\n        if (x % 2 != 0) {\n            x++;\n        }\n        if (y % 2 != 0) {\n            y--;\n        }\n        if (x > y) {\n            return -1;\n        } else {\n            return y;\n        }\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "if (n > m) {\n            return -1;\n        }\n\n        double sum = 0.0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        int average = (int) Math.round(sum / (m - n + 1));\n\n        StringBuilder binary = new StringBuilder();\n        while (average > 0) {\n            binary.insert(0, average % 2);\n            average /= 2;\n        }\n\n        return \"0b\" + binary;\n    }"}
{"task_id": "java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        } else {\n            int sum = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n            }\n            int average = (int) Math.round((double) sum / (m - n + 1));\n            return Integer.toBinaryString(average);\n        }\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "public static List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(factorial(i));\n            } else {\n                list.add(sum(i));\n            }\n        }\n        return list;\n    }\n\n    private static int factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private static int sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class F {\n    public static List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                res.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            String number = \"\" + i;\n            String reversedNumber = new StringBuilder(number).reverse().toString();\n\n            if (number.equals(reversedNumber)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenOddPalindrome {\n\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            int reversed = reverse(i);\n            if (i == reversed) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private static int reverse(int n) {\n        int reversed = 0;\n        while (n > 0) {\n            reversed = reversed * 10 + n % 10;\n            n /= 10;\n        }\n        return reversed;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.util.Collections;\nimport java.util.List;\n\npublic class MoveOneBall {\n\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Object> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int shifts = 0;\n        while (!sortedArr.equals(arr)) {\n            Object lastElement = arr.remove(arr.size() - 1);\n            arr.add(0, lastElement);\n            shifts++;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n\n        int min = (int) arr.get(0);\n        int count = 0;\n\n        for (Object num : arr) {\n            int x = (int) num;\n            if (x < min) {\n                min = x;\n                count++;\n            }\n        }\n\n        return count % 2 == 0;\n    }\n</start_of_turn>"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int evenCount = 0;\n    int oddCount = 0;\n\n    for (int num : lst1) {\n        if (num % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    if (oddCount <= lst2.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int oddCount = 0;\n\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    if (oddCount <= lst2.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ReverseDelete {\n\n    public static List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < sb.length(); i++) {\n            if (c.contains(sb.charAt(i) + \"\")) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n\n        String result = sb.toString();\n        boolean palindrome = result.equals(new StringBuilder(result).reverse().toString());\n\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(palindrome);\n\n        return output;\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < sb.length(); i++) {\n            if (c.contains(sb.charAt(i) + \"\")) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        String str = sb.toString();\n        String reverse = new StringBuilder(str).reverse().toString();\n        return Arrays.asList(str, str.equals(reverse));\n    }"}
{"task_id": "java/52", "language": "java", "completion": "public static int maxFill(List<List<Integer>> grid, int capacity) {\n    int rows = grid.size();\n    int cols = grid.get(0).size();\n    int totalWater = 0;\n    for (List<Integer> row : grid) {\n        totalWater += row.stream().reduce(0, (acc, curr) -> acc + curr);\n    }\n\n    int fullBuckets = totalWater / capacity;\n    int partialBuckets = (totalWater % capacity > 0) ? 1 : 0;\n\n    return fullBuckets + partialBuckets;\n}"}
{"task_id": "java/52", "language": "java", "completion": "public class MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int filled = 0;\n        int times = 0;\n\n        while (filled < rows * cols) {\n            boolean filledRow = false;\n\n            for (int i = 0; i < rows; i++) {\n                int water = 0;\n\n                for (int j = 0; j < cols; j++) {\n                    if (grid.get(i).get(j) == 1) {\n                        water++;\n                    }\n                }\n\n                if (water == capacity) {\n                    filledRow = true;\n                    filled += capacity;\n                } else if (water > 0) {\n                    filled += water;\n                }\n            }\n\n            if (!filledRow) {\n                times++;\n            }\n        }\n\n        return times;\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n\n}"}
{"task_id": "java/53", "language": "java", "completion": "public static List<String> selectWords(String s, int n) {\n    List<String> words = new ArrayList<>();\n    String[] tokens = s.split(\" \");\n    for (String token : tokens) {\n        int consonants = 0;\n        for (char c : token.toCharArray()) {\n            if (Character.isLetter(c) && !Character.isLowerCase(c)) {\n                consonants++;\n            }\n        }\n        if (consonants == n) {\n            words.add(token);\n        }\n    }\n    return words;\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Maximum {\n\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        List<Object> result = new ArrayList<>();\n        for (int i = sortedArr.size() - 1; i >= sortedArr.size() - k; i--) {\n            result.add(sortedArr.get(i));\n        }\n        return result;\n    }\n\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Maximum {\n\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        List<Object> result = new ArrayList<>(k);\n        Collections.sort(arr);\n\n        for (int i = arr.size() - k; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr.get(i) < 100) {\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/55", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr.get(i) < 100) {\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\npublic class Intersection {\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start <= end) {\n            int length = end - start + 1;\n            return isPrime(length) ? \"YES\" : \"NO\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Intersection {\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        // Check if the two intervals intersect\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        // Get the intersection of the two intervals\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n\n        // Calculate the length of the intersection\n        int length = end - start + 1;\n\n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Tribonacci {\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        result.add(3);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                int tri1 = (int) result.get(i - 1);\n                int tri2 = (int) result.get(i - 2);\n                int tri3 = (int) result.get(i - 3);\n                result.add(tri1 + tri2 + tri3);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Tribonacci {\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        result.add(3);\n        int prev = 3;\n        int prevprev = 3;\n        for (int i = 2; i <= n; i++) {\n            int current = (i % 2 == 0) ? (int) (1 + i / 2) : (prevprev + prev + i);\n            result.add(current);\n            prevprev = prev;\n            prev = current;\n        }\n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }"}
{"task_id": "java/58", "language": "java", "completion": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;"}
{"task_id": "java/59", "language": "java", "completion": "```java\npublic static Boolean isNested(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                count++;\n            } else if (string.charAt(i) == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }"}
{"task_id": "java/59", "language": "java", "completion": "```java\npublic static Boolean isNested(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                count++;\n            } else if (string.charAt(i) == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }"}
{"task_id": "java/60", "language": "java", "completion": "public static int sumSquares(List<Number> lst) {\n    int sum = 0;\n    for (Number num : lst) {\n        int n = (int) Math.ceil(num.doubleValue());\n        sum += n * n;\n    }\n    return sum;\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class SumSquares {\n\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n\n        for (Number num : lst) {\n            int roundedNum = (int) Math.ceil(num.doubleValue());\n            sum += roundedNum * roundedNum;\n        }\n\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty()) {\n        return false;\n    }\n    String lastChar = txt.substring(txt.length() - 1);\n    return Character.isAlphabetic(lastChar.charAt(0)) && !txt.contains(\" \");\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty()) {\n        return false;\n    }\n    int lastCharIndex = txt.length() - 1;\n    char lastChar = txt.charAt(lastCharIndex);\n    return Character.isAlphabetic(lastChar) && (lastCharIndex == 0 || txt.charAt(lastCharIndex - 1) == ' ');\n}"}
{"task_id": "java/62", "language": "java", "completion": "public static int canArrange(List<Object> arr) {\n    int i = 1;\n    while (i < arr.size()) {\n        if ((int) arr.get(i) <= (int) arr.get(i - 1)) {\n            return i - 1;\n        }\n        i++;\n    }\n    return -1;\n}"}
{"task_id": "java/62", "language": "java", "completion": "public static int canArrange(List<Object> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n        return -1;\n    }"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        int largestNegative = Integer.MIN_VALUE;\n        int smallestPositive = Integer.MAX_VALUE;\n\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n < 0 && n > largestNegative) {\n                    largestNegative = n;\n                } else if (n > 0 && n < smallestPositive) {\n                    smallestPositive = n;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        if (largestNegative != Integer.MIN_VALUE) {\n            result.add(largestNegative);\n        }\n        if (smallestPositive != Integer.MAX_VALUE) {\n            result.add(smallestPositive);\n        }\n\n        return result.isEmpty() ? null : result;\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        int largestNegative = Integer.MIN_VALUE;\n        int smallestPositive = Integer.MAX_VALUE;\n\n        for (Object element : lst) {\n            if (element instanceof Integer) {\n                int num = (int) element;\n\n                if (num < 0 && num > largestNegative) {\n                    largestNegative = num;\n                } else if (num > 0 && num < smallestPositive) {\n                    smallestPositive = num;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "public static long specialFactorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;\n    }"}
{"task_id": "java/64", "language": "java", "completion": "```java\n    public static long specialFactorial(int n) {\n        long result = 1;\n        for (int i = n; i >= 1; i--) {\n            result *= i;\n        }\n        return result;\n    }"}
{"task_id": "java/65", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class WordsInSentence {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class WordsInSentence {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n\n        return sb.toString().trim();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n    String[] xArr = x.split(\"/\");\n    String[] nArr = n.split(\"/\");\n\n    int xNum = Integer.parseInt(xArr[0]);\n    int xDen = Integer.parseInt(xArr[1]);\n\n    int nNum = Integer.parseInt(nArr[0]);\n    int nDen = Integer.parseInt(nArr[1]);\n\n    int lcm = xDen * nDen;\n    int simplifiedNum = (xNum * nDen) + (nNum * xDen);\n\n    return simplifiedNum % lcm == 0;\n}"}
{"task_id": "java/66", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        long xNumerator = Long.parseLong(xParts[0]);\n        long xDenominator = Long.parseLong(xParts[1]);\n        long nNumerator = Long.parseLong(nParts[0]);\n        long nDenominator = Long.parseLong(nParts[1]);\n\n        long lcm = xDenominator * nDenominator;\n        long simplifiedNumerator = (xNumerator * nDenominator) + (nNumerator * xDenominator);\n\n        return simplifiedNumerator % lcm == 0;\n    }\n</end_of_turn>"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        List<Object> result = new ArrayList<>(nums);\n        result.sort(new Comparator<Object>() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                int sum1 = 0;\n                int sum2 = 0;\n\n                if (o1 instanceof Integer) {\n                    sum1 = getSumOfDigits((Integer) o1);\n                }\n\n                if (o2 instanceof Integer) {\n                    sum2 = getSumOfDigits((Integer) o2);\n                }\n\n                if (sum1 == sum2) {\n                    return nums.indexOf(o1) - nums.indexOf(o2);\n                }\n\n                return sum1 - sum2;\n            }\n        });\n\n        return result;\n    }\n\n    private static int getSumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.Comparator;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        List<Object> result = new ArrayList<>(nums);\n        result.sort(Comparator.comparing(OrderByPoints::sumOfDigits).thenComparing(nums::indexOf));\n        return result;\n    }\n\n    private static int sumOfDigits(Object num) {\n        int sum = 0;\n        String str = num.toString();\n        for (char c : str.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "public static int specialfilter(List<Object> nums) {\n    int count = 0;\n    for (Object num : nums) {\n        int n = (int) num;\n        if (n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.List;\n\npublic class Specialfilter {\n\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object num : nums) {\n            int n = (int) num;\n            if (n > 10 && n % 2 != 0 && n % 5 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class PlanetOrbits {\n\n    public static List<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n        int index1 = -1;\n        int index2 = -1;\n\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            } else if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n        }\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        List<String> result = new ArrayList<>();\n\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets[i]);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Planets {\n\n    public static List<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n        int index1 = Arrays.asList(planets).indexOf(planet1);\n        int index2 = Arrays.asList(planets).indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        List<String> betweenPlanets = new ArrayList<>();\n        for (int i = Math.min(index1, index2) + 1; i < Math.max(index1, index2); i++) {\n            betweenPlanets.add(planets[i]);\n        }\n\n        return betweenPlanets;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        return isPrime ? x : y;\n    }"}
{"task_id": "java/71", "language": "java", "completion": "class XOrY {\n    public static int xOrY(int n, int x, int y) {\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        return isPrime ? x : y;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "public static int doubleTheDifference(List<Object> lst) {\n    int sum = 0;\n    for (Object num : lst) {\n        if (num instanceof Integer) {\n            int n = (int) num;\n            if (n > 0 && n % 2 != 0) {\n                sum += n * n;\n            }\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.List;\n\npublic class DoubleTheDifference {\n\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int number = (int) num;\n                if (number > 0 && number % 2 != 0) {\n                    sum += number * number;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        Comparator<String> comparator = (s1, s2) -> {\n            double strength1 = calculateStrength(s1);\n            double strength2 = calculateStrength(s2);\n            if (strength1 == strength2) {\n                return s1.compareTo(s2);\n            }\n            return Double.compare(strength2, strength1);\n        };\n        Collections.sort(extensions, comparator);\n        return className + \".\" + extensions.get(0);\n    }\n\n    private static double calculateStrength(String extension) {\n        int cap = 0;\n        int sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return (double) cap - sm;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.Collections;\nimport java.util.Comparator;\n\npublic class StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        extensions.sort(Comparator.comparing(StrongestExtension::strength));\n        return className + \".\" + extensions.get(extensions.size() - 1);\n    }\n\n    private static double strength(String extension) {\n        int cap = 0;\n        int sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return (double) cap - sm;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        int n = b.length();\n        for (int i = 0; i < n; i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "```java\npublic static Boolean cycpatternCheck(String a, String b) {\n        String temp = b;\n        for(int i=0; i<b.length(); i++) {\n            temp = b.charAt(b.length()-1) + temp.substring(0,b.length()-1);\n            if(a.contains(temp)) {\n                return true;\n            }\n        }\n        return false;\n    }"}
{"task_id": "java/75", "language": "java", "completion": "public static String intToMiniRoman(int number) {\n        String[] romanSymbols = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n        int[] arabicValues = {1, 5, 10, 50, 100, 500, 1000};\n\n        StringBuilder result = new StringBuilder();\n        int i = 6;\n\n        while (number > 0) {\n            int digit = number % 10;\n\n            if (digit == 9) {\n                result.append(romanSymbols[i]).append(romanSymbols[i - 2]);\n                number -= 9 * arabicValues[i];\n            } else if (digit == 4) {\n                result.append(romanSymbols[i]).append(romanSymbols[i - 1]);\n                number -= 4 * arabicValues[i];\n            } else if (digit >= 5) {\n                result.append(romanSymbols[i]);\n                number -= 5 * arabicValues[i];\n            }\n\n            while (digit > 0 && digit != 4 && digit != 9) {\n                result.append(romanSymbols[i - 1]);\n                number -= arabicValues[i - 1];\n                digit--;\n            }\n\n            i -= 2;\n        }\n\n        return result.toString().toLowerCase();\n    }\n</end_of_turn>"}
{"task_id": "java/75", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IntToMiniRoman {\n    public static String intToMiniRoman(int number) {\n        String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] thousands = {\"\", \"m\", \"mm\", \"mmm\"};\n\n        StringBuilder sb = new StringBuilder();\n\n        sb.append(thousands[number / 1000]);\n        number %= 1000;\n\n        sb.append(hundreds[number / 100]);\n        number %= 100;\n\n        sb.append(tens[number / 10]);\n        number %= 10;\n\n        sb.append(ones[number]);\n\n        return sb.toString().toLowerCase();\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "class RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        int maxSide = Math.max(a, Math.max(b, c));\n        if (maxSide == a) {\n            return b * b + c * c == a * a;\n        } else if (maxSide == b) {\n            return a * a + c * c == b * b;\n        } else {\n            return a * a + b * b == c * c;\n        }\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "if (a*a + b*b == c*c) {\n            return true;\n        } else if (b*b + c*c == a*a) {\n            return true;\n        } else if (c*c + a*a == b*b) {\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"task_id": "java/77", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.length() == 0) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return sb.toString();\n    }"}
{"task_id": "java/77", "language": "java", "completion": "class Solve {\n    public static String solve(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.length() == 0) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes());\n\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hash) {\n                hexString.append(String.format(\"%02x\", b));\n            }\n\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.*;\n\npublic class StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hash) {\n                hexString.append(String.format(\"%02x\", b));\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GenerateIntegers {\n\n    public static List<Object> generateIntegers(int a, int b) {\n        List<Object> evenDigits = new ArrayList<>();\n\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n\n        return evenDigits;\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GenerateIntegers {\n    public static List<Object> generateIntegers(int a, int b) {\n        List<Object> result = new ArrayList<>();\n\n        // Ensure a is smaller than b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        // Iterate through the integers between a and b\n        for (int i = a; i <= b; i++) {\n            // Check if the integer is even\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}"}

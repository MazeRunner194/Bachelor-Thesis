{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False"}
{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Summe und Produkt einer Liste von ganzen Zahlen.\n\n    Args:\n        numbers: Liste von ganzen Zahlen.\n\n    Returns:\n        Tupel aus der Summe und dem Produkt.\n    \"\"\"\n\n    sum_numbers = 0\n    product_numbers = 1\n\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n\n    return sum_numbers, product_numbers"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple containing the sum and product of all numbers in the list.\n    If the list is empty, the sum should be 0 and the product should be 1.\n\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    sum_ = 0\n    product = 1\n\n    for number in numbers:\n        sum_ += number\n        product *= number\n\n    return sum_, product"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\n    F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # \u00dcberpr\u00fcfen, ob die Eingaben gleich lang sind\n    if len(a) != len(b):\n        raise ValueError(\"Die Eingaben m\u00fcssen gleich lang sein.\")\n\n    # Bin\u00e4re XOR-Operation auf jeder Position der Eingaben ausf\u00fchren\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n\n    # Das Ergebnis als Zeichenkette zur\u00fcckgeben\n    return ''.join(result)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Performs a binary XOR operation on two binary strings.\n\n    Args:\n        a: The first binary string.\n        b: The second binary string.\n\n    Returns:\n        The result of the XOR operation as a binary string.\n    \"\"\"\n\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n\n    return ''.join(result)"}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Finds the longest string in a list of strings.\n\n    Args:\n        strings: A list of strings.\n\n    Returns:\n        The longest string in the list, or None if the list is empty.\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n    G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n    Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Erstelle eine Liste mit den Zahlen aus dem String\n    number_list = numbers.split()\n\n    # Sortiere die Liste nach der Position der Zahlen imalphabet\n    number_list.sort(key=lambda x: ['null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht', 'neun'].index(x))\n\n    # Gib den sortierten String zur\u00fcck\n    return ' '.join(number_list)"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numbers from small to large.\n\n    Args:\n        numbers: A string of numbers separated by spaces.\n\n    Returns:\n        A string of numbers sorted from small to large.\n    \"\"\"\n\n    # Convert the string of numbers into a list of numbers.\n    number_list = numbers.split()\n\n    # Sort the list of numbers.\n    number_list.sort()\n\n    # Convert the list of numbers back into a string.\n    return ' '.join(number_list)"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Rescales a list of numbers to the range [0, 1].\n\n    Args:\n        numbers: A list of numbers with at least two elements.\n\n    Returns:\n        A list of numbers rescaled to the range [0, 1].\n    \"\"\"\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    return scaled_numbers"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    return scaled_numbers"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n\n    Args:\n        string: Der zu umwandle String.\n\n    Returns:\n        Der umgewandelte String.\n    \"\"\"\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, toggle lowercase letters to uppercase and uppercase letters to lowercase.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Gib nur positive Zahlen in der Liste zur\u00fcck.\n\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Gib nur positive Zahlen in der Liste zur\u00fcck.\n    \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zur\u00fcck.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"\n    Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zur\u00fcck.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "python/10", "language": "python", "completion": ">>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]"}
{"task_id": "python/10", "language": "python", "completion": ">>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime testet ob eine Zahl eine Primzahl ist.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    fibonacci berechnet die n-te Fibonacci-Zahl.\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n    \"\"\"\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            if i == n - 1:\n                return fib_num\n            i += 1"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime pr\u00fcft, ob eine Zahl eine Primzahl ist.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"\n    is_fibonacci pr\u00fcft, ob eine Zahl eine Fibonacci-Zahl ist.\n    \"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n    \"\"\"\n    i = 1\n    while True:\n        if is_prime(i) and is_fibonacci(i):\n            if i == n:\n                return i\n        i += 1"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if -(l[i] + l[j]) in seen:\n                return True\n            seen.add(l[i])\n            seen.add(l[j])\n    return False"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\nEs gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n    \n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            target = -l[i] - l[j]\n            if target in seen:\n                return True\n            seen.add(l[i])\n            seen.add(l[j])\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\nEs gibt True zur\u00fcck, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls gibt es False zur\u00fcck.\n\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    fib4_seq = [0] * (n + 1)\n    fib4_seq[0] = 0\n    fib4_seq[1] = 0\n    fib4_seq[2] = 2\n    fib4_seq[3] = 0\n\n    for i in range(4, n + 1):\n        fib4_seq[i] = fib4_seq[i - 1] + fib4_seq[i - 2] + fib4_seq[i - 3] + fib4_seq[i - 4]\n\n    return fib4_seq[n]"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    fib_list = [0] * (n + 1)\n    fib_list[0] = 0\n    fib_list[1] = 0\n    fib_list[2] = 2\n    fib_list[3] = 0\n\n    for i in range(4, n + 1):\n        fib_list[i] = fib_list[i - 1] + fib_list[i - 2] + fib_list[i - 3] + fib_list[i - 4]\n\n    return fib_list[n]"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"\n    Gib den Median der Elemente in der Liste l zur\u00fcck.\n\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    l.sort()\n    n = len(l)\n\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()  # Liste sortieren\n    n = len(l)\n    if n % 2 == 1:  # ungerade Anzahl Elemente\n        return l[n // 2]\n    else:  # gerade Anzahl Elemente\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if the given string is a palindrome.\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n\n    Args:\n        text: Der zu \u00fcberpr\u00fcfende String.\n\n    Returns:\n        True, wenn der String ein Palindrom ist, False sonst.\n    \"\"\"\n\n    # Text in Kleinbuchstaben umwandeln\n    text = text.lower()\n\n    # Text umkehren\n    reversed_text = text[::-1]\n\n    # Text auf PalindromChecker \u00fcberpr\u00fcfen\n    return text == reversed_text"}
{"task_id": "python/17", "language": "python", "completion": "print(remove_vowels('hello world'))  # Output: hll wrld\nprint(remove_vowels('aeiou'))  # Output: ''\nprint(remove_vowels('Mississippi'))  # Output: Mssppss"}
{"task_id": "python/17", "language": "python", "completion": "print(remove_vowels('abcdef'))  # Output: bcdf\nprint(remove_vowels('aaaaa'))  # Output: ''\nprint(remove_vowels('zbcd'))  # Output: zbcd"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Returns True if all numbers in the list l are below the threshold t.\n\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Give True back if all numbers in the list l are below the threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": ">>> add(2, 3)\n5\n>>> add(5, 7)\n12"}
{"task_id": "python/19", "language": "python", "completion": ">>> add(2, 3)\n5\n>>> add(5, 7)\n12"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter titulado Zeichen enthalten.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Returns sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Returns sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n    return n"}
{"task_id": "python/23", "language": "python", "completion": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Entfern alle Primfaktoren bis zum Quadratwurzel von n.\n    factor = 2\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n\n    # Wenn n nicht auf 1 teilbar ist, ist es selbst ein Primzahlfaktor.\n    if n > 1:\n        return n\n    else:\n        return factor - 1"}
{"task_id": "python/24", "language": "python", "completion": "n * (n + 1) / 2"}
{"task_id": "python/24", "language": "python", "completion": ">>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    fibfib_nums = [0] * (n + 1)\n    fibfib_nums[0] = 0\n    fibfib_nums[1] = 0\n    fibfib_nums[2] = 1\n\n    for i in range(3, n + 1):\n        fibfib_nums[i] = fibfib_nums[i - 1] + fibfib_nums[i - 2] + fibfib_nums[i - 3]\n\n    return fibfib_nums[n]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    fib_fib_seq = [0] * (n + 1)\n    fib_fib_seq[0] = 0\n    fib_fib_seq[1] = 0\n    fib_fib_seq[2] = 1\n    for i in range(3, n + 1):\n        fib_fib_seq[i] = fib_fib_seq[i - 1] + fib_fib_seq[i - 2] + fib_fib_seq[i - 3]\n    return fib_fib_seq[n]"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for char in s:\n        if char in vowels or (char == 'y' and char == s[-1]):\n            count += 1\n\n    return count\n\n# Testf\u00e4lle\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"yellow\"))  # 3\nprint(vowels_count(\"yummy\"))  # 2\nprint(vowels_count(\"adieu\"))  # 3"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Testf\u00e4lle\ntest_cases = [\n    (\"abcde\", 2),\n    (\"ACEDY\", 3),\n    (\"y\", 1),\n    (\"yyyy\", 4),\n    (\"\", 0),\n    (\"UPPERCASE\", 3),\n    (\"MixedCase\", 3),\n    (\"NONVowels\", 0)\n]\n\nfor input, expected_output in test_cases:\n    result = vowels_count(input)\n    assert result == expected_output, f\"Test f\u00fcr '{input}' fehlgeschlagen. Erwartetes Ergebnis: {expected_output}, tatsgebnis: {result}\"\n\nprint(\"Alle Testf\u00e4lle erfolgreich abgeschlossen.\")"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    for num, count in counts.items():\n        if num > 0 and count >= num:\n            return num\n    return -1"}
{"task_id": "python/28", "language": "python", "completion": "from collections import Counter\n\ndef search(lst):\n    counts = Counter(lst)\n    for num, count in counts.items():\n        if num > 0 and count >= num:\n            return num\n    return -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    \"\"\"\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite.\n\n    Args:\n        a: L\u00e4nge der ersten Seite\n        b: L\u00e4nge der zweiten Seite\n        c: L\u00e4nge der dritten Seite\n\n    Returns:\n        Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet oder -1 wenn die drei Seiten kein g\u00fcltiges Dreieck bilden\n    \"\"\"\n\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    \"\"\"\n\n    # Check if the object is balanced.\n    if q != q[::-1]:\n        return False\n\n    # Check if the sum of the object's elements is less than or equal to the maximum weight.\n    if sum(q) > w:\n        return False\n\n    # If both conditions are met, the object will fly.\n    return True"}
{"task_id": "python/30", "language": "python", "completion": "def is_palindrome(q):\n    return q == q[::-1]\n\ndef will_it_fly(q, w):\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "import math\n\ndef is_multiply_prime(a):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n    \n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    divisor = 2\n    while a > 1:\n        if is_prime(divisor) and a % divisor == 0:\n            count += 1\n            a //= divisor\n        divisor += 1\n\n    return count == 3"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist,\n    und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist.\n    \"\"\"\n\n    # Initialisierung der Primzahlfaktoren\n    prime_factors = []\n\n    # Test auf Primzahlen bis a\n    for i in range(2, a + 1):\n        while a % i == 0:\n            prime_factors.append(i)\n            a //= i\n\n    # \u00dcberpr\u00fcfen, ob die Zahl das Produkt von 3 Primzahlen ist\n    return len(prime_factors) == 3"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Sie erhalten eine Zahl in Dezimalform und Ihre Aufgabe besteht darin, sie in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    binary = []\n    while decimal > 0:\n        remainder = decimal % 2\n        binary.append(str(remainder))\n        decimal = decimal // 2\n\n    binary.reverse()\n    return \"db\" + \"\".join(binary) + \"db\""}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        remainder = decimal % 2\n        binary.append(str(remainder))\n        decimal = decimal // 2\n    binary.reverse()\n    return \"db\" + \"\".join(binary) + \"db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der String gl\u00fccklich ist oder nicht.\nEin String ist gl\u00fccklich, wenn seine L\u00e4nge mindestens 3 betr\u00e4gt und jede Gruppe von 3 aufeinanderfolgenden Buchstaben unterschiedlich ist.\nZum Beispiel:\n    \n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n\n    return True"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    \"\"\"Du erh\u00e4ltst einen String s.\nDeine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der String gl\u00fccklich ist oder nicht.\nEin String ist gl\u00fccklich, wenn seine L\u00e4nge mindestens 3 betr\u00e4gt und jede Gruppe von 3 aufeinanderfolgenden Buchstaben unterschiedlich ist.\nZum Beispiel:\n    \n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Buchstabennoten gem\u00e4\u00df der folgenden Tabelle ausgeben kann:\n\n                 GPA       |    Buchstaben Note\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n        Beispiel:\n    \n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grade_to_letter = {\n        (4.0, float('inf')): 'A+',\n        (3.7, 4.0): 'A',\n        (3.3, 3.7): 'A-',\n        (3.0, 3.3): 'B+',\n        (2.7, 3.0): 'B',\n        (2.3, 2.7): 'B-',\n        (2.0, 2.3): 'C+',\n        (1.7, 2.0): 'C',\n        (1.3, 1.7): 'C-',\n        (1.0, 1.3): 'D+',\n        (0.7, 1.0): 'D',\n        (0.0, 0.7): 'D-',\n        (float('-inf'), 0.0): 'E'\n    }\n\n    letter_grades = []\n    for grade in grades:\n        for (min_grade, max_grade), letter in grade_to_letter.items():\n            if min_grade <= grade < max_grade:\n                letter_grades.append(letter)\n                break\n\n    return letter_grades"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Buchstabennoten gem\u00e4\u00df der folgenden Tabelle ausgeben kann:\n\n                 GPA       |    Buchstaben Note\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n        Beispiel:\n    \n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    binary_N = bin(N)[2:]  # Umwandlung in bin\u00e4re Zahl ohne f\u00fchrenden '0b'\n    digit_sum = 0\n    for digit in binary_N:\n        digit_sum += int(digit)  # Umwandlung in Integer und Addition\n    return binary(digit_sum)  # Umwandlung in bin\u00e4re Zahl"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n\n    Beispiele:\n\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n\n    # Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge\n    result.sort()\n\n    # Sortieren Sie die koordinaten der Zeile nach Spalten in absteigender Reihenfolge\n    result.sort(key=lambda x: x[1], reverse=True)\n\n    return result"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    \"\"\"\n    Finds all coordinates of a given number in a nested list.\n\n    Args:\n        lst: A nested list.\n        x: The number to find.\n\n    Returns:\n        A list of tuples representing the coordinates of the number.\n    \"\"\"\n\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n\n    # Sort the coordinates by row and then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\nSchreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\nGeben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n    \n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst or len(lst) <= 1:\n        return None\n\n    min_val = min(lst)\n    lst.remove(min_val)\n    return min(lst)"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n\n    min_val = min(lst)\n    min_index = lst.index(min_val)\n\n    if min_index == 0:\n        return lst[1]\n\n    return lst[min_index - 1]"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    bored_sentences = [sentence for sentence in sentences if sentence.startswith('I')]\n    return len(bored_sentences)"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\" and (words[i+1] in [\".\", \"?\" , \"!\"]):\n            count += 1\n    return count"}
{"task_id": "python/40", "language": "python", "completion": "import math\n\ndef sum_of_prime_digits(lst):\n    \"\"\"\n    Sie erhalten eine Liste von ganzen Zahlen.\n    Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n\n        Beispiele:\n    \n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = max(lst, key=is_prime)\n    sum_of_digits = 0\n    while max_prime > 0:\n        digit = max_prime % 10\n        sum_of_digits += digit\n        max_prime //= 10\n\n    return sum_of_digits"}
{"task_id": "python/40", "language": "python", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\ndef find_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum_of_digits(largest_prime)"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    first_key_case = dict[next(iter(dict))].islower()\n\n    for key in dict:\n        if first_key_case != dict[key].islower():\n            return False\n\n    return True"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    first_case = None\n    for key in dict:\n        if first_case is None:\n            first_case = key.islower()\n        elif key.islower() != first_case:\n            return False\n    \n    return True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value.\n\n    Args:\n        value (str): The value to find the closest integer for.\n\n    Returns:\n        int: The closest integer to the given value.\n    \"\"\"\n\n    # Convert the value to a float.\n    value = float(value)\n\n    # Calculate the nearest integers.\n    lower_int = int(value)\n    upper_int = int(value + 1)\n\n    # Calculate the difference between the value and each integer.\n    lower_diff = abs(value - lower_int)\n    upper_diff = abs(value - upper_int)\n\n    # Return the integer with the smaller difference, or the one farthest from zero.\n    if lower_diff <= upper_diff:\n        return lower_int\n    else:\n        return upper_int"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    value = float(value)\n    integer = int(value)\n\n    if value - integer >= 0.5:\n        return integer + 1\n    elif value - integer <= -0.5:\n        return integer - 1\n    else:\n        return integer"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = [n]\n    while True:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n -= 1\n        pile.append(n)\n        if n == 1:\n            break\n    return pile[::-1]"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n + 1\n        pile.append(n)\n    return pile[::-1]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    \"\"\"\n    Sie erhalten einen String von W\u00f6rtern, die durch Kommas oder Leerzeichen getrennt sind. Ihre Aufgabe ist es, den String in W\u00f6rter aufzuteilen und ein Array der W\u00f6rter zur\u00fcckzugeben.\n\n    Zum Beispiel:\n    \n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    \"\"\"Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # \u00dcberpr\u00fcfen Sie, ob x gerade ist.\n    if x % 2 == 0:\n        # Wenn x gerade ist, beginnen Sie Ihre Suche mit x.\n        for i in range(x, y + 1, 2):\n            if i % 2 == 0:\n                return i\n    else:\n        # Wenn x nicht gerade ist, beginnen Sie Ihre Suche mit x + 1.\n        for i in range(x + 1, y + 1, 2):\n            if i % 2 == 0:\n                return i\n\n    # Wenn keine gerade Zahl im Bereich [x, y] gefunden wurde, geben Sie -1 zur\u00fcck.\n    return -1"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    \"\"\"Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    binary = bin(average)[2:]\n    return binary"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m + 1):\n            sum += i\n            count += 1\n        average = sum / count\n        rounded_average = int(round(average))\n        binary_average = bin(rounded_average)[2:]\n        return binary_average"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_integers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\ndef sum_of_integers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n\n        Beispiel 1:\n\n            Eingabe: 3\n        Ausgabe: (1, 2)\n        Erkl\u00e4rung:\n        Ganze Palindrome sind 1, 2, 3. Eines davon ist gerade und zwei davon sind ungerade.\n\n        Beispiel 2:\n\n            Eingabe: 12\n        Ausgabe: (4, 6)\n        Erkl\u00e4rung:\n        Ganze Palindrome sind 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier davon sind gerade und sechs davon sind ungerade.\n\n        Hinweis:\n        1. 1 <= n <= 10^3\n        2. Das zur\u00fcckgegebene Tupel enth\u00e4lt die Anzahl der geraden und ungeraden ganzen Palindrome.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    max_element = max(arr)\n    sorted_arr = sorted(arr)\n\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            if arr.count(max_element) > 1:\n                return True\n            return False\n\n    return True"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    current_arr = arr[:]\n\n    while current_arr != sorted_arr:\n        for i in range(len(current_arr)):\n            current_arr.append(current_arr.pop(0))\n            if current_arr == sorted_arr:\n                return True\n\n    return False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make lst1 a list of only even numbers.\n\n    Args:\n        lst1: The first list of numbers.\n        lst2: The second list of numbers.\n\n    Returns:\n        \"YES\" if it is possible to make lst1 a list of only even numbers, \"NO\" otherwise.\n    \"\"\"\n\n    # Check if lst1 can be made a list of only even numbers without exchanging any elements.\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # Check if lst2 contains odd numbers.\n    if not any(num % 2 == 1 for num in lst2):\n        return \"NO\"\n\n    # Exchange elements until lst1 contains only even numbers.\n    while any(num % 2 == 1 for num in lst1):\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 1:\n                lst1[i] = lst2.pop()\n\n    # Check if lst1 is now a list of only even numbers.\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # If lst1 is not a list of only even numbers, it is not possible to make it so.\n    return \"NO\""}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(num % 2 for num in lst1)\n    even_count = len(lst1) - odd_count\n    \n    if even_count <= len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    \"\"\"\n    Args:\n        s (str): The first string.\n        c (str): The second string.\n\n    Returns:\n        tuple: A tuple containing the reversed string and a boolean value indicating whether it is a palindrome.\n    \"\"\"\n\n    # Remove all characters in s that are in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Check if the reversed string is a palindrome\n    reversed_result = result[::-1]\n    is_palindrome = reversed_result == result\n\n    return result, is_palindrome"}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    \"\"\"\n    Reverse delete task\n    \"\"\"\n    \n    # Delete characters in s that match characters in c\n    for char in c:\n        s = s.replace(char, \"\")\n    \n    # Check if the remaining string is a palindrome\n    return s, s == s[::-1]"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(row.count(1) for row in grid)\n\n    # Calculate the maximum number of times we can fill the buckets\n    max_fills = total_water // capacity\n\n    # If we can't fill the buckets at all, return 0\n    if max_fills == 0:\n        return 0\n\n    # Return the maximum number of times we can fill the buckets\n    return max_fills"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    steps = 0\n\n    while any(cell for row in grid for cell in row):\n        # Find the leftmost non-empty cell in the grid\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    start_row, start_col = i, j\n                    break\n\n        # Extract water from the leftmost non-empty cell\n        current_row, current_col = start_row, start_col\n        water_filled = 0\n        while water_filled < capacity:\n            grid[current_row][current_col] = 0\n            water_filled += 1\n            current_col += 1\n            if current_col == cols:\n                current_row += 1\n                current_col = 0\n\n        steps += 1\n\n    return steps"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    words = s.split()  # Split the string into words\n    result = []\n\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char not in 'aeiouAEIOU':  # Check if the character is a consonant\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n\n    return result"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    words = s.split()  # Split the sentence into words\n    result = []\n\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char not in \"aeiou\":  # Check if the character is a consonant\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    \"\"\"\n    Gegeben sei ein Array arr von ganzen Zahlen und eine positive ganze Zahl k. Gib eine sortierte Liste der L\u00e4nge k zur\u00fcck, die die k gr\u00f6\u00dften Zahlen in arr enth\u00e4lt.\n    \"\"\"\n\n    # Erstelle ein Min-Heap aus dem Array\n    heapq.heapify(arr)\n\n    # Extrahiere die k gr\u00f6\u00dften Elemente aus dem Heap\n    max_elements = heapq.nlargest(k, arr)\n\n    # Sortiere die Elemente in der Liste\n    max_elements.sort()\n\n    return max_elements"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    \"\"\"\n    Gegeben sei ein Array arr von ganzen Zahlen und eine positive ganze Zahl k. Gib eine sortierte Liste der L\u00e4nge k zur\u00fcck, die die k gr\u00f6\u00dften Zahlen in arr enth\u00e4lt.\n    \"\"\"\n    return heapq.nlargest(k, arr)"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    length = intersection_end - intersection_start + 1\n\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    \"\"\"\n    Gibt die ersten n + 1 Elemente der Tribonacci-Folge zur\u00fcck.\n\n    Args:\n        n: Die Anzahl der Elemente in der Tribonacci-Folge.\n\n    Returns:\n        Eine Liste der ersten n + 1 Elemente der Tribonacci-Folge.\n    \"\"\"\n\n    fib = [1] * (n + 1)\n    fib[1] = 3\n\n    for i in range(2, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n\n    return fib"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    \"\"\"\n    Gibt die erste n + 1 Zahlen der Tribonacci-Folge zur\u00fcck.\n\n    Args:\n        n: Die Anzahl der Zahlen in der Tribonacci-Folge.\n\n    Returns:\n        Eine Liste der ersten n + 1 Zahlen der Tribonacci-Folge.\n    \"\"\"\n\n    result = [0] * (n + 1)\n    result[0] = 0\n    result[1] = 3\n    result[2] = 1\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result[i] = 1 + i / 2\n        else:\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n\n    return result"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    prod = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            prod *= digit\n        n //= 10\n    return prod"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    return sum(int(x)**2 for x in lst)"}
{"task_id": "python/60", "language": "python", "completion": "from math import ceil\n\ndef sum_squares(lst):\n    \"\"\"Sie erhalten eine Liste von Zahlen.\nSie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\nrunden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\nBeispiele:\nF\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\nF\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\nF\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\nF\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\nF\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \n    \n\n    \"\"\"\n    sum_squared = 0\n    for num in lst:\n        sum_squared += ceil(num) ** 2\n    return sum_squared"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()  # Split the string into words\n    if not words:\n        return False  # Empty string\n    last_char = words[-1][-1]  # Get the last character of the last word\n    return last_char.isalpha() and last_char not in words[-1][:-1]  # Check if it's a letter and not part of a word"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    return last_word[-1].isalpha() and last_word[-1] not in last_word[:-1]"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    \"\"\"Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n\n    Beispiele:\n    \n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    \"\"\"\n    Finds the largest index of an element that is not greater than or equal to its predecessor.\n\n    Args:\n        arr: A list of integers with no duplicates.\n\n    Returns:\n        The largest index of an element that is not greater than or equal to its predecessor, or -1 if no such element exists.\n    \"\"\"\n\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b) where 'a' is the largest negative integer and 'b' is the smallest positive integer in a list.\n    If there are no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    largest_neg = float('-inf')\n    smallest_pos = float('inf')\n\n    for num in lst:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n        if num > 0 and num < smallest_pos:\n            smallest_pos = num\n\n    return (largest_neg if largest_neg != float('-inf') else None, smallest_pos if smallest_pos != float('inf') else None)"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    max_neg = float('-inf')\n    min_pos = float('inf')\n\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n        elif num > 0 and num < min_pos:\n            min_pos = num\n\n    if max_neg == float('-inf') or min_pos == float('inf'):\n        return None, None\n    else:\n        return max_neg, min_pos"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i * factorial(i - 1)\n\n    return result\n\ndef factorial(n):\n    \"\"\"Standard factorial function\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Du erh\u00e4ltst einen String, der einen Satz repr\u00e4sentiert. Der Satz enth\u00e4lt einige W\u00f6rter, die durch ein Leerzeichen getrennt sind. Du musst einen String zur\u00fcckgeben, der die W\u00f6rter aus dem urspr\u00fcnglichen Satz enth\u00e4lt, deren L\u00e4ngen Primzahlen sind. Die Reihenfolge der W\u00f6rter im neuen String sollte dieselbe wie im Original sein.\n\n        Beispiel 1:\n        Eingabe: sentence = \"This is a test\"\n        Ausgabe: \"is\"\n\n        Beispiel 2:\n        Eingabe: sentence = \"lets go for swimming\"\n        Ausgabe: \"go for\"\n\n        Einschr\u00e4nkungen:\n        * 1 <= len(sentence) <= 100\n        * Der Satz enth\u00e4lt nur Buchstaben.\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/66", "language": "python", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"\n    Vereinfacht den Ausdruck x * n.\n\n    Args:\n        x (str): Die erste Bruchzahl.\n        n (str): Die zweite Bruchzahl.\n\n    Returns:\n        bool: True, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False.\n    \"\"\"\n\n    # Erstelle Fraction-Objekte aus den Zeichenketten\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n\n    # Multipliziere die beiden Br\u00fcche\n    result_frac = x_frac * n_frac\n\n    # \u00dcberpr\u00fcfe, ob der Ausdruck zu einer ganzen Zahl ausgewertet wird\n    return result_frac.numerator % result_frac.denominator == 0"}
{"task_id": "python/66", "language": "python", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"\n    Vereinfacht den Ausdruck x * n.\n\n    Args:\n        x: Die erste Bruchzahl als Zeichenkette.\n        n: Die zweite Bruchzahl als Zeichenkette.\n\n    Returns:\n        True, wenn x * n eine ganze Zahl ist, andernfalls False.\n    \"\"\"\n\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n\n    result = x_frac * n_frac\n\n    return result.numerator % result.denominator == 0"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    \"\"\"\n    Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n    in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n    Hinweis: Wenn es mehrere Elemente mit \u00e4hnlicher Summe ihrer Ziffern gibt,\n    ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n\n        Zum Beispiel:\n    \n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(nums, key=sum_of_digits)\n    return [num for num in sorted_nums]"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sortiert eine Liste von Ganzzahlen in aufsteigender Reihenfolge nach der\n    Summe ihrer Ziffern.\n    \"\"\"\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(nums, key=sum_of_digits)\n\n    # Bei gleicher Summe ihrer Ziffern, sortieren wir basierend auf ihrem Index in der Originalliste\n    return [num for num in sorted_nums]"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 1 and num % 10 % 2 == 1):\n            count += 1\n    return count"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0 and num % 10 % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    \"\"\"\n    Es gibt acht Planeten in unserem Sonnensystem: Der Sonne am n\u00e4chsten ist Merkur, dann folgen Venus, die Erde, Mars, Jupiter, Saturn, Uranus und Neptun. Schreiben Sie eine Funktion, die zwei Planetennamen als Zeichenketten planet1 und planet2 annimmt. Die Funktion sollte ein Tupel zur\u00fcckgeben, das alle Planeten enth\u00e4lt, deren Umlaufbahnen zwischen der Umlaufbahn von Planet1 und der Umlaufbahn von Planet2 liegen und nach N\u00e4he zur Sonne sortiert sind. Die Funktion sollte ein leeres Tupel zur\u00fcckgeben, wenn planet1 oder planet2 keine korrekten Planetennamen sind. Beispiele:\n    \n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n\n    planeten = {\"Merkur\", \"Venus\", \"Erde\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptun\"}\n\n    if planet1 not in planeten or planet2 not in planeten:\n        return ()\n\n    index1 = list(planeten).index(planet1)\n    index2 = list(planeten).index(planet2)\n\n    return tuple(sorted(list(planeten)[index1:index2 + 1], key=lambda p: list(planeten).index(p)))"}
{"task_id": "python/70", "language": "python", "completion": "PLANETS = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n\n    idx1 = PLANETS.index(planet1)\n    idx2 = PLANETS.index(planet2)\n\n    return sorted([p for p in PLANETS[idx1:idx2+1]], key=PLANETS.index)"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    \"\"\"\n    Pr\u00fcft, ob eine Zahl eine Primzahl ist.\n\n    Args:\n        n: Die zu pr\u00fcfende Zahl.\n\n    Returns:\n        True, wenn n eine Primzahl ist, False sonst.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    Gibt den Wert von x zur\u00fcck, wenn n eine Primzahl ist, und den Wert von y zur\u00fcck, wenn nicht.\n\n    Args:\n        n: Die zu \u00fcberpr\u00fcfende Zahl.\n        x: Der Wert, der zur\u00fcckgegeben werden sollte, wenn n eine Primzahl ist.\n        y: Der Wert, der zur\u00fcckgegeben werden sollte, wenn n keine Primzahl ist.\n\n    Returns:\n        x, wenn n eine Primzahl ist, y sonst.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    \"\"\"\n    Eine Funktion, die einen Wert zur\u00fcckgibt, wenn n eine Primzahl ist,\n    und einen anderen Wert zur\u00fcckgibt, wenn nicht.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    sum_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0 and num >= 0:\n            sum_squares += num ** 2\n    return sum_squares"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x % 2 and x >= 0)"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Finds the strongest extension for a given class.\n\n    Args:\n        class_name: The name of the class.\n        extensions: A list of extensions.\n\n    Returns:\n        A string in the format \"ClassName.StrongestExtensionName\".\n    \"\"\"\n\n    # Calculate the strength of each extension.\n    extension_strengths = [(extension, extension.count(extension.upper()) - extension.count(extension.lower())) for extension in extensions]\n\n    # Find the extension with the highest strength.\n    strongest_extension, strength = max(extension_strengths, key=lambda x: x[1])\n\n    # Return the class name and the strongest extension.\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Sie erhalten den Namen einer Klasse (einen String) und eine Liste von Erweiterungen.\n    Die Erweiterungen sollen verwendet werden, um zus\u00e4tzliche Klassen zur Klasse zu laden.\n    Die St\u00e4rke der Erweiterung wird wie folgt definiert: Sei CAP die Anzahl der Gro\u00dfbuchstaben im Namen der Erweiterung\n    und SM die Anzahl der Kleinbuchstaben im Namen der Erweiterung. Die St\u00e4rke wird durch den Bruch CAP - SM gegeben.\n    Sie sollten die st\u00e4rkste Erweiterung finden und einen String in diesem Format zur\u00fcckgeben:\n    ClassName.StrongestExtensionName.\n    Wenn es zwei oder mehr Erweiterungen mit der gleichen St\u00e4rke gibt, sollten Sie die w\u00e4hlen, die zuerst in der Liste steht.\n    Zum Beispiel, wenn Sie \"Slices\" als Klasse und eine Liste von Erweiterungen erhalten:\n    ['SErviNGSliCes', 'Cheese', 'StuFfed'], sollten Sie 'Slices.SErviNGSliCes' zur\u00fcckgeben, da 'SErviNGSliCes' die st\u00e4rkste Erweiterung ist (ihre St\u00e4rke ist -1).\n    Beispiel:\n    >>> Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n\n    extensions.sort(key=lambda x: (len(x) - x.lower().count(x), x))\n    strongest_extension = extensions[0]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    # Convert the first word to a list of characters\n    a_list = list(a)\n\n    # Rotate the list of characters\n    for i in range(len(a)):\n        a_list.append(a_list.pop(0))\n\n        # Check if the rotated word is a substring of the first word\n        if ''.join(a_list) in a:\n            return True\n\n    # No rotation of the first word is a substring of the first word\n    return False"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    \"\"\"Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    # Erstelle eine Liste von Rotationen des zweiten Wortes\n    rotations = [b[i:] + b[:i] for i in range(1, len(b))]\n\n    # \u00dcberpr\u00fcfe, ob ein Rotationswort ein Teilstring im ersten Wort ist\n    return any(rotation in a for rotation in rotations)"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Gegeben eine positive Ganzzahl, erhalte ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gib sie in Kleinbuchstaben zur\u00fcck.\nEinschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n    \n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    symbol_values = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_numerals = []\n    for value in sorted(symbol_values.keys(), reverse=True):\n        while number >= value:\n            roman_numerals.append(symbol_values[value])\n            number -= value\n\n    return ''.join(roman_numerals)"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Gegeben eine positive Ganzzahl, erhalte ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gib sie in Kleinbuchstaben zur\u00fcck.\nEinschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n    \n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n\n    result = []\n    i = 0\n\n    while number > 0:\n        while number >= values[i]:\n            number -= values[i]\n            result.append(symbols[i])\n        i += 1\n\n    return ''.join(result)"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib True zur\u00fcck, wenn die drei Seiten ein rechtwinkliges Dreieck bilden, ansonsten False. Ein rechtwinkliges Dreieck ist ein Dreieck, bei dem ein Winkel ein rechter Winkel oder 90 Grad ist. Beispiel:\n\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n\n    # Das Dreieck ist rechtwinklig, wenn die quadrat der l\u00e4ngsten Seite gleich der Summe der quadraten der beiden anderen Seiten ist.\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib True zur\u00fcck, wenn die drei Seiten ein rechtwinkliges Dreieck bilden, ansonsten False. Ein rechtwinkliges Dreieck ist ein Dreieck, bei dem ein Winkel ein rechter Winkel oder 90 Grad ist. Beispiel:\n\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n\n    # Sorts the lengths in descending order.\n    lengths = [a, b, c]\n    lengths.sort(reverse=True)\n\n    # Returns True if the square of the longest length is equal to the sum of the squares of the other two lengths.\n    return lengths[0]**2 == lengths[1]**2 + lengths[2]**2"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    if not any(char.isalpha() for char in s):\n        result.reverse()\n    return ''.join(result)"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    if not any(char.isalpha() for char in s):\n        result = list(reversed(s))\n    return ''.join(result)"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result[::-1]"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n\n    Zum Beispiel:\n    \n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    integers = []\n    if a > b:\n        a, b = b, a  # Swap die Werte von a und b, wenn a gr\u00f6\u00dfer ist als b\n    for i in range(a, b + 1):\n        if i % 2 == 0:  # \u00dcberpr\u00fcft, ob die Zahl gerade ist\n            integers.append(i)\n    return integers"}

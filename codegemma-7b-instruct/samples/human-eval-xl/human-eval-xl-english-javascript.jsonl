{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n\n  for (const operation of operations) {\n    balance += operation;\n\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n\n  for (const operation of operations) {\n    balance += operation;\n\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n  let result = \"\";\n\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n\n  return result;\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    const result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        result.push((a[i] === b[i]) ? '0' : '1');\n    }\n\n    return result.join('');\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return \"none\";\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return \"none\";\n  }\n\n  let longestString = strings[0];\n  let maxLength = strings[0].length;\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      longestString = strings[i];\n      maxLength = strings[i].length;\n    }\n  }\n\n  return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (a !== b) {\n    if (a > b) {\n      a -= b;\n    } else {\n      b -= a;\n    }\n  }\n  return a;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (b) {\n    const t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  const numArr = numbers.split(' ');\n  numArr.sort((a, b) => numMap[a] - numMap[b]);\n\n  return numArr.join(' ');\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numArr = numbers.split(' ');\n  numArr.sort((a, b) => {\n    return numArr.indexOf(a) - numArr.indexOf(b);\n  });\n  return numArr.join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(char => {\n    if (char.toLowerCase() === char) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(char => {\n    if (char.toLowerCase() === char) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(num => num > 0);\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(num => num > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "def unique(l):\n    return list(set(l))"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let a = 0, b = 1, count = 0;\n\n  while (count < n) {\n    let fib = a + b;\n    a = b;\n    b = fib;\n\n    if (isPrime(fib)) {\n      count++;\n    }\n  }\n\n  return fib;\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let a = 1;\n  let b = 2;\n  let count = 2;\n\n  while (count <= n) {\n    if (isPrime(b)) {\n      if (count === n) return b;\n      a = b;\n      b = a + b;\n      count++;\n    } else {\n      b = a + b;\n    }\n  }\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n  // Sort the input list in ascending order.\n  l.sort((a, b) => a - b);\n\n  // Iterate through the list using nested loops.\n  for (let i = 0; i < l.length - 2; i++) {\n    let j = i + 1;\n    let k = l.length - 1;\n\n    while (j < k) {\n      let sum = l[i] + l[j] + l[k];\n\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n  if (l.length < 3) {\n    return false;\n  }\n\n  l.sort((a, b) => a - b);\n\n  for (let i = 0; i < l.length - 2; i++) {\n    let j = i + 1;\n    let k = l.length - 1;\n\n    while (j < k) {\n      const sum = l[i] + l[j] + l[k];\n\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  const seen = new Set();\n\n  for (const num of l) {\n    if (seen.has(-num)) {\n      return true;\n    }\n    seen.add(num);\n  }\n\n  return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  const set = new Set();\n\n  for (const num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n\n  return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  const arr = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]);\n  }\n  return arr[n];\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  const arr = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]);\n  }\n  return arr[n];\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  l.sort((a, b) => a - b); // Sort the list in ascending order\n\n  const mid = Math.floor(l.length / 2); // Find the middle index\n\n  if (l.length % 2 === 0) {\n    // If the list has an even number of elements, return the average of the two middle elements\n    return (l[mid] + l[mid - 1]) / 2;\n  } else {\n    // If the list has an odd number of elements, return the middle element\n    return l[mid];\n  }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  return all(num < t for num in l);\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "def belowThreshold(l, t):\n    return all(x < t for x in l)"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  return new Set([...s0]).size === new Set([...s1]).size;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  return [...s0].sort().join('') === [...s1].sort().join('');\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) return n;\n  let a = 0, b = 1, c;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  // Create a set from the first list\n  const set1 = new Set(l1);\n\n  // Filter the second list to include only elements that are in the set\n  const commonElements = l2.filter(element => set1.has(element));\n\n  // Return the sorted unique common elements\n  return [...new Set(commonElements)].sort((a, b) => a - b);\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let factor = 2;\n  let largest = 1;\n\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      largest = factor;\n      n /= factor;\n    }\n    factor++;\n  }\n\n  if (n > largest) {\n    largest = n;\n  }\n\n  return largest;\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      n /= factor;\n    }\n    factor++;\n  }\n  return n > 1 ? n : factor - 1;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  return (n * (n + 1)) / 2;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  return (n * (n + 1)) / 2;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "javascript/25", "language": "javascript", "completion": "return xs.slice(1).map((x, i) => x * (i + 1));"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  if (n <= 2) return 0;\n  if (n === 3) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\n  for (let i = 4; i <= n; i++) {\n    let next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n  }\n\n  return c;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  const fib = new Array(n + 1).fill(0);\n  fib[1] = fib[2] = 1;\n\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n\n  return fib[n];\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n\n  for (const char of s.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n\n  // Check if 'y' is the last character and count it if it is\n  if (s.endsWith('y')) {\n    count++;\n  }\n\n  return count;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n\n  // Check for 'y' at the end of the word\n  if (s.length > 1 && s[s.length - 1] === 'y') {\n    count++;\n  }\n\n  return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "def search(lst):\n    \"\"\"\n    * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    * zero, and has a frequency greater than or equal to the value of the integer itself. \n    * The frequency of an integer is the number of times it appears in the list.\n    * If no such a value exist, return -1.\n    * Examples:\n    *     search([4, 1, 2, 2, 3, 1]) == 2\n    *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    *     search([5, 5, 4, 4, 4]) == -1\n    *\n    \"\"\"\n    from collections import Counter\n    c = Counter(lst)\n    for i in sorted(c.keys(), reverse=True):\n        if c[i] >= i:\n            return i\n    return -1"}
{"task_id": "javascript/28", "language": "javascript", "completion": "def search(lst):\n    \"\"\"\n    Finds the greatest integer with frequency greater than or equal to its value.\n\n    Args:\n        lst: A non-empty list of positive integers.\n\n    Returns:\n        The greatest integer with frequency greater than or equal to its value, or -1 if no such value exists.\n    \"\"\"\n\n    frequency_map = {}\n    for num in lst:\n        frequency_map[num] = frequency_map.get(num, 0) + 1\n\n    max_num = -1\n    for num, frequency in frequency_map.items():\n        if frequency >= num and num > max_num:\n            max_num = num\n\n    return max_num"}
{"task_id": "javascript/29", "language": "javascript", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n  if (a + b > c && a + c > b && b + c > a) {\n    s = (a + b + c) / 2;\n    area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "def is_palindrome(q):\n    return q == q[::-1]\n\ndef will_it_fly(q, w):\n    return is_palindrome(q) and sum(q) <= w"}
{"task_id": "javascript/30", "language": "javascript", "completion": "def is_palindrome(q):\n    return q == q[::-1]\n\ndef will_it_fly(q, w):\n    return is_palindrome(q) and sum(q) <= w"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    if (a <= 1) {\n        return False\n    }\n    factor = 2\n    count = 0\n    while factor * factor <= a:\n        while a % factor == 0:\n            a /= factor\n            count += 1\n            if count > 3:\n                return False\n        factor += 1\n    return count == 3\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n  let count = 0;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      count++;\n      a /= i;\n    } else {\n      i++;\n    }\n  }\n  return count === 3;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  let binary = [];\n  let num = decimal;\n\n  while (num > 0) {\n    binary.unshift(num % 2);\n    num = Math.floor(num / 2);\n  }\n\n  return \"db\" + binary.join(\"\") + \"db\";\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  const binary = [];\n  let quotient = decimal;\n\n  while (quotient > 0) {\n    const remainder = quotient % 2;\n    binary.unshift(remainder);\n    quotient = Math.floor(quotient / 2);\n  }\n\n  return 'db' + binary.join('') + 'db';\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i <= s.length - 3; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n\n  return true;\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "def numericalLetterGrade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "javascript/34", "language": "javascript", "completion": "def numericalLetterGrade(grades):\n    \"\"\"\n    Returns a list of letter grades based on the given GPAs.\n\n    Args:\n        grades (list): A list of GPAs.\n\n    Returns:\n        list: A list of letter grades.\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n\n    return letter_grades"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n  const length = string.length;\n  if (length <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n  const length = string.length;\n  if (length <= 1) return false;\n  if (length <= 3) return true;\n  if (length % 2 === 0 || length % 3 === 0) return false;\n  let i = 5;\n  while (i * i <= length) {\n    if (length % i === 0 || length % (i + 2) === 0) return false;\n    i += 6;\n  }\n  return true;\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "def solve(n):\n    sum = 0\n    while n > 0:\n        sum += n % 2\n        n //= 2\n    return bin(sum)[2:]"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n  let sum = 0;\n  let num = n;\n\n  while (num > 0) {\n    sum += num % 2;\n    num = Math.floor(num / 2);\n  }\n\n  return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "def get_row(lst, x):\n    \"\"\"\n    Returns a list of coordinates of all occurrences of x in the given list.\n\n    Args:\n        lst: A nested list of integers.\n        x: The integer to search for.\n\n    Returns:\n        A list of tuples representing the coordinates of all occurrences of x.\n    \"\"\"\n\n    if not lst:\n        return []\n\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n\n    # Sort coordinates by row in ascending order.\n    coordinates.sort(key=lambda coord: coord[0])\n\n    # Sort coordinates of the row by column in descending order.\n    for i, coord in enumerate(coordinates):\n        coordinates[i] = (coord[0], len(lst[coord[0]]) - coord[1] - 1)\n\n    return coordinates"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  if (!lst || lst.length === 0) return [];\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (!row) continue;\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) result.push([i, j]);\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "def nextSmallest(lst):\n    if len(lst) <= 1:\n        return None\n\n    min_val = min(lst)\n    sorted_lst = sorted(lst)\n\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] > min_val:\n            return sorted_lst[i]\n\n    return None"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n  if (!lst || lst.length < 2) {\n    return null;\n  }\n\n  let min = Infinity;\n  let secondMin = Infinity;\n\n  for (const num of lst) {\n    if (num < min) {\n      secondMin = min;\n      min = num;\n    } else if (num < secondMin && num !== min) {\n      secondMin = num;\n    }\n  }\n\n  return secondMin;\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n  const sentences = s.split(/[!.?]/);\n  let boredomCount = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"I\")) {\n      boredomCount++;\n    }\n  }\n\n  return boredomCount;\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n  const sentences = s.split(/[!.?]/);\n  let boredoms = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"I\")) {\n      boredoms++;\n    }\n  }\n\n  return boredoms;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function findLargestPrimeAndSumDigits(lst) {\n  // Find the largest prime value in the list\n  let largestPrime = 0;\n  for (const num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n\n  // Calculate the sum of the digits of the largest prime\n  let sum = 0;\n  while (largestPrime > 0) {\n    sum += largestPrime % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n\n  return sum;\n}\n\n// Function to check if a number is prime\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function findLargestPrimeAndDigitSum(lst) {\n  // Find the largest prime value in the list\n  let largestPrime = -1;\n  for (const num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n\n  // Calculate the sum of the digits in the largest prime\n  let digitSum = 0;\n  while (largestPrime > 0) {\n    digitSum += largestPrime % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n\n  return digitSum;\n}\n\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    first_key_case = None\n\n    for key in dict:\n        if first_key_case is None:\n            first_key_case = key.islower()\n        elif key.islower() != first_key_case:\n            return False\n\n    return True"}
{"task_id": "javascript/41", "language": "javascript", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    first_key_case = dict[next(iter(dict))].islower()\n\n    for key in dict:\n        if first_key_case ^ dict[key].islower():\n            return False\n\n    return True"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  if (Math.abs(num - floor) === Math.abs(num - ceil)) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return num > 0 ? floor : ceil;\n  }\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n  const number = parseFloat(value);\n  const lower = Math.floor(number);\n  const upper = Math.ceil(number);\n\n  if (Math.abs(number - lower) === Math.abs(number - upper)) {\n    return number > 0 ? upper : lower;\n  } else {\n    return number > 0 ? upper : lower;\n  }\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "def make_a_pile(n):\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n + 2\n        pile.append(n)\n    return pile[::-1]"}
{"task_id": "javascript/43", "language": "javascript", "completion": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * i + 1)\n    return pile"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  return s.split(/[,\\s]/);\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  let result = -1;\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) {\n    return -1;\n  }\n\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n\n  const average = Math.round(sum / (m - n + 1));\n  return \"0b\" + average.toString(2);\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n + m) * (Math.abs(n - m) + 1) / 2;\n  return parseInt(sum).toString(2);\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n  return Array.from({ length: n }, (_, i) => (i % 2 === 0 ? factorial(i) : sum(i)));\n}\n\nfunction factorial(n) {\n  return n <= 1 ? 1 : n * factorial(n - 1);\n}\n\nfunction sum(n) {\n  return (n * (n + 1)) / 2;\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n\n  return result;\n}\n\nfunction factorial(n) {\n  let product = 1;\n\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n\n  return product;\n}\n\nfunction sum(n) {\n  let total = 0;\n\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n\n  return total;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        str_i = str(i)\n        str_i_rev = str_i[::-1]\n\n        if str_i == str_i_rev:\n            if int(str_i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)"}
{"task_id": "javascript/48", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        str_i = str(i)\n        str_i_reverse = str_i[::-1]\n\n        if str_i == str_i_reverse:\n            if int(str_i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "javascript/49", "language": "javascript", "completion": "def moveOneBall(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    \n    if min_index == 0:\n        return True\n    \n    while min_index > 0:\n        arr.append(arr.pop(0))\n        min_index -= 1\n    \n    return True"}
{"task_id": "javascript/49", "language": "javascript", "completion": "def moveOneBall(arr):\n    if not arr:\n        return True\n    \n    min_element = min(arr)\n    min_element_index = arr.index(min_element)\n    \n    if min_element_index == 0:\n        return True\n    \n    operations = min_element_index\n    \n    return operations % 2 == 0"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  let evenCount = lst1.filter(num => num % 2 === 0).length;\n  let oddCount = lst1.filter(num => num % 2 !== 0).length;\n\n  while (oddCount > 0 && lst2.length > 0) {\n    let even = lst2.shift();\n    lst1.push(even);\n    evenCount++;\n    oddCount--;\n  }\n\n  return evenCount === lst1.length ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  // Count the number of even and odd elements in lst1\n  for (const num of lst1) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  // If all elements in lst1 are even, return \"YES\"\n  if (oddCount === 0) {\n    return \"YES\";\n  }\n\n  // If lst2 has enough odd elements to exchange with lst1, return \"YES\"\n  if (oddCount <= lst2.length) {\n    return \"YES\";\n  }\n\n  // Otherwise, return \"NO\"\n  return \"NO\";\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "def reverseDelete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n\n    return result, result == result[::-1]"}
{"task_id": "javascript/51", "language": "javascript", "completion": "def reverseDelete(s, c):\n    result = [i for i in s if i not in c]\n    result = ''.join(result)\n    return result, result == result[::-1]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  const totalWater = grid.flat().reduce((acc, curr) => acc + curr, 0);\n  capacity = Math.floor(capacity / totalWater) * totalWater;\n\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      while (grid[i][j] > capacity) {\n        grid[i][j] -= capacity;\n        count++;\n      }\n    }\n  }\n\n  return count;\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let lowered = 0;\n\n  for (let i = 0; i < rows; i++) {\n    let waterInWell = 0;\n\n    for (let j = 0; j < cols; j++) {\n      waterInWell += grid[i][j];\n    }\n\n    if (waterInWell > capacity) {\n      lowered += Math.ceil(waterInWell / capacity);\n    }\n  }\n\n  return lowered;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n  const words = s.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    let consonants = 0;\n\n    for (const char of word) {\n      if ('aeiou'.includes(char.toLowerCase()) === false) {\n        consonants++;\n      }\n    }\n\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n  if (s === \"\") {\n    return [];\n  }\n\n  const words = s.split(\" \");\n  const result = [];\n\n  for (const word of words) {\n    let consonantCount = 0;\n\n    for (const char of word) {\n      if (!['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase())) {\n        consonantCount++;\n      }\n    }\n\n    if (consonantCount === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  return arr.slice(0, k).reduce((acc, num) => {\n    if (num < 100) {\n      acc += num;\n    }\n    return acc;\n  }, 0);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  return arr.slice(0, k).reduce((sum, num) => {\n    if (num >= 10 && num < 100) {\n      sum += num;\n    }\n    return sum;\n  }, 0);\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // Check if the intervals intersect\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n  // Check if the length is a prime number\n  if (length <= 1 || (length % 2 === 0 && length !== 2)) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // Check if the intervals intersect\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n  // Check if the length is a prime number\n  if (length <= 1 || (length % 2 === 0 && length !== 2)) {\n    return \"NO\";\n  }\n\n  for (let i = 3; i <= Math.sqrt(length); i += 2) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n  const result = [1];\n\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      result.push(3);\n    } else if (i === 2) {\n      result.push(2);\n    } else {\n      if (i % 2 === 0) {\n        result.push(1 + i / 2);\n      } else {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n      }\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n  const result = [1];\n\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      result.push(3);\n    } else if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product === 1 ? 0 : product;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n\n  return product === 1 ? 0 : product;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n  let count = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(str) {\n  let count = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '[') {\n      count++;\n    } else if (str[i] === ']') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n  return lst.map(x => Math.ceil(x)).map(x => x * x).reduce((a, b) => a + b);\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n  return lst.map(Math.ceil).map(x => x * x).reduce((acc, curr) => acc + curr, 0);\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    \"\"\"\n\n    # Remove trailing spaces\n    txt = txt.rstrip()\n\n    # Check if the last character is alphabetical and not a part of a word\n    return txt and txt[-1].isalpha() and txt[-1] not in ' '"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n  const lastChar = txt[txt.length - 1];\n\n  // Check if the last character is alphabetical and not part of a word\n  return /[a-zA-Z]/.test(lastChar) && !/\\s/.test(txt[txt.length - 2]);\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            largest_negative = max(largest_negative, num) if largest_negative else num\n        elif num > 0:\n            smallest_positive = min(smallest_positive, num) if smallest_positive else num\n\n    return largest_negative, smallest_positive"}
{"task_id": "javascript/63", "language": "javascript", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    if not negative_integers and not positive_integers:\n        return None, None\n\n    return max(negative_integers), min(positive_integers)"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n  let result = 1;\n\n  for (let i = n; i > 0; i--) {\n    result *= i * factorial(i - 1);\n  }\n\n  return result;\n}\n\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  let result = n;\n\n  for (let i = n - 1; i >= 1; i--) {\n    result *= i;\n  }\n\n  return result;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n}\n\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n  return true;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => {\n    const length = word.length;\n    return length > 1 && !Number.isInteger(Math.sqrt(length));\n  });\n  return primeWords.join(' ');\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n  // Convert the fractions to decimal numbers.\n  const xDecimal = x.split(\"/\").map(Number)[0] / x.split(\"/\").map(Number)[1];\n  const nDecimal = n.split(\"/\").map(Number)[0] / n.split(\"/\").map(Number)[1];\n\n  // Multiply the decimal numbers.\n  const product = xDecimal * nDecimal;\n\n  // Check if the product is a whole number.\n  return Number.isInteger(product);\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n  // Convert the string fractions to fractions.\n  const [xNum, xDen] = x.split(\"/\").map(Number);\n  const [nNum, nDen] = n.split(\"/\").map(Number);\n\n  // Multiply the numerators and denominators.\n  const simplifiedNum = xNum * nNum;\n  const simplifiedDen = xDen * nDen;\n\n  // Check if the simplified expression is a whole number.\n  return Number.isInteger(simplifiedNum / simplifiedDen);\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "def orderByPoints(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n    return sorted_nums"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0);\n    const sumB = b.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n  return nums.filter(num => num > 10 && (num % 10 % 2 !== 0) && Math.floor(num / 10) % 2 !== 0).length;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n  return nums.filter(num => num > 10 && (num % 10) % 2 === 1 && Math.floor(num / 10) % 2 === 1).length;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "public class Triples {\n\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    const a = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n    let count = 0;\n\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    return planets[index1 + 1:index2]"}
{"task_id": "javascript/70", "language": "javascript", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    return planets[min(index1, index2) + 1: max(index1, index2)]"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n  let isPrime = true;\n\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return x;\n  } else {\n    return y;\n  }\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n  let isPrime = true;\n\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  return isPrime ? x : y;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  return lst.filter(n => n > 0 && Number.isInteger(n) && n % 2 === 1).reduce((acc, n) => acc + n * n, 0);\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num * num\n    return sum_of_squares"}
{"task_id": "javascript/73", "language": "javascript", "completion": "def strongestExtension(classname, extensions):\n    extensions.sort(key=lambda x: (x.count(x.upper()) - x.count(x.lower()), extensions.index(x)))\n    strongest = extensions[0]\n    return f\"{classname}.{strongest}\""}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n  let strongest = { strength: -Infinity, name: '' };\n\n  for (const extension of extensions) {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    const strength = cap - sm;\n\n    if (strength > strongest.strength || (strength === strongest.strength && extension < strongest.name)) {\n      strongest = { strength, name: extension };\n    }\n  }\n\n  return classname + '.' + strongest.name;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  const rotations = new Set();\n  for (let i = 0; i < b.length; i++) {\n    rotations.add(b.slice(i) + b.slice(0, i));\n  }\n  return rotations.some(rotation => a.includes(rotation));\n}\n</end_of_turn>"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  const rotations = new Set();\n  for (let i = 0; i < b.length; i++) {\n    rotations.add(b.slice(i) + b.slice(0, i));\n  }\n  return rotations.some(rotation => a.includes(rotation));\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const romanNumerals = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n\n  let result = \"\";\n\n  for (const numeral in romanNumerals) {\n    while (number >= romanNumerals[numeral]) {\n      result += numeral;\n      number -= romanNumerals[numeral];\n    }\n  }\n\n  return result.toLowerCase();\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  const symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n\n  let result = \"\";\n\n  for (let i = 0; i < values.length; i++) {\n    while (number >= values[i]) {\n      result += symbols[i];\n      number -= values[i];\n    }\n  }\n\n  return result.toLowerCase();\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "def rightAngleTriangle(a, b, c):\n    \"\"\"\n    Checks if the three sides form a right-angled triangle.\n\n    Args:\n        a: Length of side 1\n        b: Length of side 2\n        c: Length of side 3\n\n    Returns:\n        True if the triangle is right-angled, False otherwise\n    \"\"\"\n\n    # Sort the sides in descending order\n    sides = [a, b, c]\n    sides.sort(reverse=True)\n\n    # Check if the largest side is the hypotenuse (the side opposite the right angle)\n    hypotenuse = sides[0]\n\n    # Use the Pythagorean theorem to check if the triangle is right-angled\n    return hypotenuse ** 2 == sides[1] ** 2 + sides[2] ** 2"}
{"task_id": "javascript/76", "language": "javascript", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  return [...s].map(c => {\n    if (/[a-zA-Z]/.test(c)) {\n      return c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase();\n    } else {\n      return c;\n    }\n  }).reverse().join('');\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  const chars = s.split('');\n  const reversed = chars.map(char => {\n    if (/[a-zA-Z]/.test(char)) {\n      return char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      return char;\n    }\n  });\n  return reversed.reverse().join('');\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n  if (!text) {\n    return \"none\";\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return \"none\"\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  const result = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result.reverse();\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  const evenDigits = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      evenDigits.push(i);\n    }\n  }\n\n  return evenDigits.sort((a, b) => a - b);\n}"}

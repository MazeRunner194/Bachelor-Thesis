{"task_id": "java/0", "language": "java", "completion": "public static Boolean belowZero(List<Object> operations) {\n    int balance = 0;\n\n    for (Object operation : operations) {\n        if (operation instanceof Integer) {\n            balance += (int) operation;\n        }\n\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "java/0", "language": "java", "completion": "public static Boolean belowZero(List<Object> operations) {\n    int balance = 0;\n\n    for (Object operation : operations) {\n        if (operation instanceof Integer) {\n            balance += (int) operation;\n        } else {\n            balance -= (int) operation;\n        }\n\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "java/1", "language": "java", "completion": "public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int num = (int) number;\n                sum += num;\n                product *= num;\n            }\n        }\n\n        return Arrays.asList(sum, product);\n    }"}
{"task_id": "java/1", "language": "java", "completion": "public static List<Integer> sumProduct(List<Object> numbers) {\n    int sum = 0;\n    int product = 1;\n\n    for (Object number : numbers) {\n        if (number instanceof Integer) {\n            int num = (Integer) number;\n            sum += num;\n            product *= num;\n        }\n    }\n\n    return Arrays.asList(sum, product);\n}"}
{"task_id": "java/2", "language": "java", "completion": "public static String stringXor(String a, String b) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < a.length(); i++) {\n        sb.append((a.charAt(i) ^ b.charAt(i)) == '1' ? '1' : '0');\n    }\n    return sb.toString();\n}"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n    public static String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append((a.charAt(i) ^ b.charAt(i)) == '0' ? '0' : '1');\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "public static String longest(List<Object> strings) {\n    if (strings.isEmpty()) {\n        return null;\n    }\n\n    String longest = (String) strings.get(0);\n    for (int i = 1; i < strings.size(); i++) {\n        String current = (String) strings.get(i);\n        if (current.length() > longest.length()) {\n            longest = current;\n        }\n    }\n\n    return longest;\n}"}
{"task_id": "java/3", "language": "java", "completion": "public class Longest {\n    public static String longest(List<Object> strings) {\n        if (strings.isEmpty()) {\n            return null;\n        }\n\n        String longestString = (String) strings.get(0);\n        int longestLength = longestString.length();\n\n        for (int i = 1; i < strings.size(); i++) {\n            String currentString = (String) strings.get(i);\n            if (currentString.length() > longestLength) {\n                longestString = currentString;\n                longestLength = currentString.length();\n            }\n        }\n\n        return longestString;\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "```java\npublic static int greatestCommonDivisor(int a, int b) {\n        int divisor = 0;\n        int i = 2;\n        while (i <= Math.min(a, b)) {\n            if (a % i == 0 && b % i == 0) {\n                divisor = i;\n            }\n            i++;\n        }\n        return divisor;\n    }"}
{"task_id": "java/4", "language": "java", "completion": "while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SortNumbers {\n\n    public static String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<String> sortedNums = Arrays.stream(nums)\n                .sorted()\n                .collect(Collectors.toList());\n        return String.join(\" \", sortedNums);\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SortNumbers {\n\n    public static String sortNumbers(String numbers) {\n        String[] numbersArr = numbers.split(\" \");\n        List<String> sortedNumbers = Arrays.asList(numbersArr)\n                .stream()\n                .sorted()\n                .collect(Collectors.toList());\n        return String.join(\" \", sortedNumbers);\n    }\n\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class RescaleToUnit {\n\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        // Sorted the numbers in ascending order.\n        Collections.sort(numbers);\n\n        // Get the smallest and largest numbers in the list.\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n\n        // Calculate the scaling factor.\n        double scaleFactor = 1.0 / (max - min);\n\n        // Rescale the numbers to the range [0, 1].\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            rescaledNumbers.add((number - min) * scaleFactor);\n        }\n\n        return rescaledNumbers;\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "public static List<Double> rescaleToUnit(List<Double> numbers) {\n    if (numbers.size() < 2) {\n        throw new IllegalArgumentException(\"List must have at least two elements.\");\n    }\n\n    double min = Collections.min(numbers);\n    double max = Collections.max(numbers);\n\n    return numbers.stream()\n            .map(x -> (x - min) / (max - min))\n            .collect(Collectors.toList());\n}"}
{"task_id": "java/7", "language": "java", "completion": "```java\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }"}
{"task_id": "java/7", "language": "java", "completion": "class FlipCase {\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "public static List<Object> getPositive(List<Object> l) {\n        List<Object> positive = new ArrayList<>();\n        for (Object num : l) {\n            if (num instanceof Integer && ((Integer) num) > 0) {\n                positive.add(num);\n            }\n        }\n        return positive;\n    }\n</end_of_turn>"}
{"task_id": "java/8", "language": "java", "completion": "public static List<Object> getPositive(List<Object> l) {\n        List<Object> positiveNumbers = new ArrayList<>();\n\n        for (Object number : l) {\n            if (number instanceof Integer && ((Integer) number) > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n\n        return positiveNumbers;\n    }\n</end_of_turn>"}
{"task_id": "java/9", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    int i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i += 6;\n    }\n    return true;\n}"}
{"task_id": "java/9", "language": "java", "completion": "class IsPrime {\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Unique {\n\n    public static List<Integer> unique(List<Integer> l) {\n        HashSet<Integer> set = new HashSet<>();\n        List<Integer> uniqueList = new ArrayList<>();\n\n        for (Integer num : l) {\n            if (!set.contains(num)) {\n                uniqueList.add(num);\n                set.add(num);\n            }\n        }\n\n        return uniqueList;\n    }\n\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Unique {\n\n    public static List<Integer> unique(List<Integer> l) {\n        HashSet<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer i : l) {\n            if (set.add(i)) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    static ArrayList<Integer> fib = new ArrayList<>();\n    static ArrayList<Integer> prim = new ArrayList<>();\n\n    public static void main(String[] args) {\n        primeFib(5);\n    }\n\n    public static int primeFib(int n) {\n        fib.add(0);\n        fib.add(1);\n        int counter = 2;\n\n        while (counter <= n) {\n            fib.add(fib.get(counter - 2) + fib.get(counter - 1));\n            counter++;\n        }\n\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                prim.add(i);\n            }\n        }\n\n        int result = 0;\n        int counterPrim = 0;\n\n        for (int i = 0; i < fib.size(); i++) {\n            for (int j = 0; j < prim.size(); j++) {\n                if (fib.get(i) == prim.get(j)) {\n                    result = fib.get(i);\n                    counterPrim++;\n                    if (counterPrim == n) {\n                        return result;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    public static int primeFib(int n) {\n        int i = 2, x = 1, y = 1, z = 2;\n        while (true) {\n            if (isPrime(z) && isFibonacci(z)) {\n                if (--n == 0) {\n                    return z;\n                }\n            }\n            x = y;\n            y = z;\n            z = x + y;\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isFibonacci(int n) {\n        int a = 0, b = 1, c = 1;\n        while (c < n) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c == n;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "public static Boolean triplesSumToZero(List<Integer> l) {\n    Set<Integer> set = new HashSet<>();\n    for (int i : l) {\n        for (int j : l) {\n            if (set.contains(-i - j)) {\n                return true;\n            }\n            set.add(i);\n            set.add(j);\n        }\n    }\n    return false;\n}"}
{"task_id": "java/12", "language": "java", "completion": "public static Boolean triplesSumToZero(List<Integer> l) {\n    Collections.sort(l);\n    for (int i = 0; i < l.size() - 2; i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k) {\n            int sum = l.get(i) + l.get(j) + l.get(k);\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                j++;\n            } else {\n                k--;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "java/13", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n    HashSet<Integer> seen = new HashSet<>();\n\n    for (int num : l) {\n        int complement = -num;\n        if (seen.contains(complement)) {\n            return true;\n        }\n        seen.add(num);\n    }\n\n    return false;\n}"}
{"task_id": "java/13", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n</end_of_turn>"}
{"task_id": "java/14", "language": "java", "completion": "public static int fib4(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n</end_of_turn>"}
{"task_id": "java/14", "language": "java", "completion": "public static int fib4(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4Arr = new int[n + 1];\n        fib4Arr[0] = 0;\n        fib4Arr[1] = 0;\n        fib4Arr[2] = 2;\n        fib4Arr[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Arr[i] = fib4Arr[i - 1] + fib4Arr[i - 2] + fib4Arr[i - 3] + fib4Arr[i - 4];\n        }\n\n        return fib4Arr[n];\n    }\n</end_of_turn>"}
{"task_id": "java/15", "language": "java", "completion": "public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 1) {\n            return (Number) l.get(size / 2);\n        } else {\n            int i = size / 2;\n            return (Number) ((l.get(i) + l.get(i - 1)) / 2.0);\n        }\n    }"}
{"task_id": "java/15", "language": "java", "completion": "public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 1) {\n            return (Number) l.get(size / 2);\n        } else {\n            int left = l.get(size / 2 - 1);\n            int right = l.get(size / 2);\n            return (Number) ((left + right) / 2.0);\n        }\n    }"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * * \n     * \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        text = text.toLowerCase();\n        int start = 0;\n        int end = text.length() - 1;\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * * \n     * \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        String reversedText = new StringBuilder(text).reverse().toString();\n        return text.equals(reversedText);\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "public static String removeVowels(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "public static Boolean belowThreshold(List<Integer> l, int t) {\n    for (Integer num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/18", "language": "java", "completion": "public static Boolean belowThreshold(List<Integer> l, int t) {\n    for (int i : l) {\n        if (i >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;\n    }"}
{"task_id": "java/19", "language": "java", "completion": "return x + y;"}
{"task_id": "java/20", "language": "java", "completion": "public static Boolean sameChars(String s0, String s1) {\n    Set<Character> set = new HashSet<>();\n    for (int i = 0; i < s0.length(); i++) {\n        set.add(s0.charAt(i));\n    }\n    return set.containsAll(s1.chars().mapToObj(c -> (char) c).toList());\n}"}
{"task_id": "java/20", "language": "java", "completion": "public static Boolean sameChars(String s0, String s1) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n            map.put(s0.charAt(i), map.getOrDefault(s0.charAt(i), 0) + 1);\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            if (!map.containsKey(s1.charAt(i)) || map.get(s1.charAt(i)) == 0) {\n                return false;\n            }\n            map.put(s1.charAt(i), map.get(s1.charAt(i)) - 1);\n        }\n        return true;\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 1) {\n            return n;\n        }\n        int first = 0;\n        int second = 1;\n        int result = 0;\n        for (int i = 2; i <= n; i++) {\n            result = first + second;\n            first = second;\n            second = result;\n        }\n        return result;\n    }"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Common {\n\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        List<Object> common = new ArrayList<>();\n        for (Integer i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n            }\n        }\n        return common;\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Common {\n\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        List<Object> common = new ArrayList<>();\n\n        for (Object element : l2) {\n            if (l1.contains(element)) {\n                common.add(element);\n            }\n        }\n\n        return common;\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "```java\npublic static int largestPrimeFactor(int n) {\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n\n        return n;\n    }"}
{"task_id": "java/23", "language": "java", "completion": "public static int largestPrimeFactor(int n) {\n        int divisor = 2;\n        while (divisor * divisor <= n) {\n            while (n % divisor == 0) {\n                n /= divisor;\n            }\n            divisor++;\n        }\n        if (n > 1) {\n            return n;\n        } else {\n            return divisor - 1;\n        }\n    }\n</end_of_turn>"}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }"}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }"}
{"task_id": "java/25", "language": "java", "completion": "public static List<Object> derivative(List<Integer> xs) {\n        List<Object> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }"}
{"task_id": "java/25", "language": "java", "completion": "List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;"}
{"task_id": "java/26", "language": "java", "completion": "public static int fibfib(int n) {\n    if (n <= 2) {\n        return n;\n    }\n\n    int[] fib = new int[n + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n\n    for (int i = 3; i <= n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n\n    return fib[n];\n}"}
{"task_id": "java/26", "language": "java", "completion": "public static int fibfib(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        for (int i = 3; i <= n; i++) {\n            int next = a + b + c;\n            a = b;\n            b = c;\n            c = next;\n        }\n        return c;\n    }\n</end_of_turn>"}
{"task_id": "java/27", "language": "java", "completion": "```java\npublic static int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.length() - 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n</end_of_turn>"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "java/28", "language": "java", "completion": "public static int search(List<Integer> lst) {\n    Map<Integer, Integer> map = new HashMap<>();\n\n    for (int num : lst) {\n        map.put(num, map.getOrDefault(num, 0) + 1);\n    }\n\n    for (int num : lst) {\n        if (map.get(num) >= num) {\n            return num;\n        }\n    }\n\n    return -1;\n}"}
{"task_id": "java/28", "language": "java", "completion": "public static int search(List<Integer> lst) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int max = -1;\n\n        for (int num : lst) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n            if (map.get(num) >= num && num > max) {\n                max = num;\n            }\n        }\n\n        return max;\n    }"}
{"task_id": "java/29", "language": "java", "completion": "if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }"}
{"task_id": "java/29", "language": "java", "completion": "if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }"}
{"task_id": "java/30", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n    // \u00dcberpr\u00fcfen, ob die Liste ausbalanciert ist\n    boolean isPalindrome = true;\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q.get(i) != q.get(q.size() - i - 1)) {\n            isPalindrome = false;\n            break;\n        }\n    }\n\n    // \u00dcberpr\u00fcfen, ob die Summe der Elemente kleiner oder gleich w ist\n    int sum = 0;\n    for (int num : q) {\n        sum += num;\n    }\n\n    return isPalindrome && sum <= w;\n}"}
{"task_id": "java/30", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }"}
{"task_id": "java/31", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsMultiplyPrime {\n    /**\n     * \n     * Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n     * \n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            while (a % i == 0) {\n                count++;\n                a /= i;\n            }\n        }\n        return count == 3;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0) {\n                a /= i;\n                count++;\n            }\n        }\n        return count == 3;\n    }\n</end_of_turn>"}
{"task_id": "java/32", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder(\"db\");\n\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(1, remainder);\n            decimal /= 2;\n        }\n\n        return binary.append(\"db\").toString();\n    }\n</end_of_turn>"}
{"task_id": "java/32", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n    StringBuilder binary = new StringBuilder(\"db\");\n\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary.insert(1, remainder);\n        decimal /= 2;\n    }\n\n    while (binary.length() < 7) {\n        binary.insert(1, 0);\n    }\n\n    binary.append(\"db\");\n    return binary.toString();\n}"}
{"task_id": "java/33", "language": "java", "completion": "public static Boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "java/33", "language": "java", "completion": "public static Boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n</end_of_turn>"}
{"task_id": "java/35", "language": "java", "completion": "public static Boolean primeLength(String string) {\n    int length = string.length();\n    if (length <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n</end_of_turn>"}
{"task_id": "java/36", "language": "java", "completion": "class Solve {\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (sum > 0) {\n            sb.append(sum % 2);\n            sum /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class GetRow {\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Integer[]{i, j});\n                }\n            }\n        }\n\n        Collections.sort(result, Comparator.comparingInt(o -> ((Integer[]) o)[0]).thenComparing(o -> ((Integer[]) o)[1], Comparator.reverseOrder()));\n\n        return result;\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class GetRow {\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> res = new ArrayList<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        res.sort(Comparator.comparingInt(a -> ((List<Integer>) a).get(0)).thenComparing(a -> ((List<Integer>) a).get(1), Comparator.reverseOrder()));\n\n        return res;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return null;\n        }\n        Collections.sort(lst);\n        return (Integer) lst.get(1);\n    }"}
{"task_id": "java/38", "language": "java", "completion": "public static Integer nextSmallest(List<Object> lst) {\n    if (lst.size() < 2) {\n        return null;\n    }\n    Collections.sort(lst);\n    return (Integer) lst.get(1);\n}"}
{"task_id": "java/39", "language": "java", "completion": "```java\npublic static int isBored(String s) {\n        String[] words = s.split(\"[.?!]\");\n        int count = 0;\n        for (String word : words) {\n            if (word.startsWith(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }"}
{"task_id": "java/39", "language": "java", "completion": "public static int isBored(String s) {\n    int count = 0;\n    String[] words = s.split(\" \");\n    for (int i = 0; i < words.length; i++) {\n        if (words[i].equalsIgnoreCase(\"i\") && (words[i+1].endsWith(\".\") || words[i+1].endsWith(\"?\") || words[i+1].endsWith(\"!\"))) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.List;\n\npublic class Skjkasdkd {\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int number : lst) {\n            if (isPrime(number) && number > maxPrime) {\n                maxPrime = number;\n            }\n        }\n        int sum = 0;\n        while (maxPrime != 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.List;\n\npublic class Skjkasdkd {\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        int sum = 0;\n\n        for (int num : lst) {\n            if (isPrime(num)) {\n                if (num > maxPrime) {\n                    maxPrime = num;\n                    sum = 0;\n                }\n                sum += num;\n            }\n        }\n\n        return sum;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n\n        int i = 5;\n        while (i * i <= num) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n            i += 6;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "public static Boolean checkDictCase(Object dict) {\n    if (dict == null || ((Map<?, ?>) dict).size() == 0) {\n        return false;\n    }\n\n    boolean allLowerCase = true;\n    boolean allUpperCase = true;\n\n    for (Object key : ((Map<?, ?>) dict).keySet()) {\n        if (!Character.isLowerCase(((String) key).charAt(0))) {\n            allLowerCase = false;\n        }\n        if (!Character.isUpperCase(((String) key).charAt(0))) {\n            allUpperCase = false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n}"}
{"task_id": "java/41", "language": "java", "completion": "class CheckDictCase {\n    public static Boolean checkDictCase(Map<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (String key : dict.keySet()) {\n            if (!Character.isLowerCase(key.charAt(0))) {\n                allLowerCase = false;\n            }\n            if (!Character.isUpperCase(key.charAt(0))) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "public static int closestInteger(String value) {\n    double number = Double.parseDouble(value);\n    int floor = (int) Math.floor(number);\n    int ceil = (int) Math.ceil(number);\n\n    if (Math.abs(number - floor) <= Math.abs(number - ceil)) {\n        return (int) number;\n    } else {\n        return (number > 0) ? ceil : floor;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double number = Double.parseDouble(value);\n        int floor = (int) Math.floor(number);\n        int ceil = (int) Math.ceil(number);\n\n        if (Math.abs(number - floor) <= Math.abs(number - ceil)) {\n            return (int) number;\n        } else {\n            return number > 0 ? ceil : floor;\n        }\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n\n        while (pile.get(pile.size() - 1) > 1) {\n            int stones = pile.get(pile.size() - 1);\n            if (stones % 2 == 0) {\n                stones++;\n            } else {\n                stones -= 2;\n            }\n            pile.add(stones);\n        }\n\n        return pile;\n    }"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MakeAPile {\n\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n\n        while (true) {\n            if (n % 2 == 0) {\n                n = n + 1;\n            } else {\n                n = n - 1;\n            }\n            pile.add(n);\n\n            if (n == 1) {\n                break;\n            }\n        }\n\n        return pile;\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "public static List<Object> wordsString(String s) {\n        List<Object> words = new ArrayList<>();\n        String[] split = s.split(\"[, ]+\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n</end_of_turn>"}
{"task_id": "java/44", "language": "java", "completion": "public static List<Object> wordsString(String s) {\n        List<Object> words = new ArrayList<>();\n        String[] split = s.split(\"[ ,]\");\n        for (String word : split) {\n            words.add(word.trim());\n        }\n        return words;\n    }\n</end_of_turn>"}
{"task_id": "java/45", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n        int result = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n</start_of_turn>"}
{"task_id": "java/45", "language": "java", "completion": "class ChooseNum {\n    public static int chooseNum(int x, int y) {\n        int biggestEven = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                biggestEven = i;\n            }\n        }\n        return biggestEven;\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * \n     * Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n     * \n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * \n     * Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n     * \n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        } else {\n            int sum = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n            }\n            int avg = (int) Math.round((double) sum / (m - n + 1));\n            return Integer.toBinaryString(avg);\n        }\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FactorialOrSum {\n\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int product = 1;\n        for (int i = 1; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    private static int sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "public static List<Integer> f(int n) {\n        List<Integer> l = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                l.add(factorial(i));\n            } else {\n                l.add(sum(i));\n            }\n        }\n        return l;\n    }\n\n    public static int factorial(int n) {\n        int product = 1;\n        for (int i = 1; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    public static int sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }"}
{"task_id": "java/48", "language": "java", "completion": "public static List<Integer> evenOddPalindrome(int n) {\n    List<Integer> result = new ArrayList<>();\n    int evenCount = 0;\n    int oddCount = 0;\n\n    for (int i = 1; i <= n; i++) {\n        String num = \"\" + i;\n        String reversedNum = new StringBuilder(num).reverse().toString();\n\n        if (num.equals(reversedNum)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    result.add(evenCount);\n    result.add(oddCount);\n\n    return result;\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenOddPalindrome {\n\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            String number = \"\" + i;\n            String reversedNumber = new StringBuilder(number).reverse().toString();\n\n            if (number.equals(reversedNumber)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "public static boolean moveOneBall(List<Object> arr) {\n    if (arr.isEmpty()) {\n        return true;\n    }\n\n    int max = (int) arr.get(0);\n    int count = 0;\n\n    for (int i = 1; i < arr.size(); i++) {\n        int num = (int) arr.get(i);\n        if (num > max) {\n            count++;\n            max = num;\n        }\n    }\n\n    return count <= arr.size() - 1;\n}"}
{"task_id": "java/49", "language": "java", "completion": "public static Boolean moveOneBall(List<Object> arr) {\n    if (arr.size() == 0) {\n        return true;\n    }\n\n    int max = (int) arr.get(0);\n    int count = 0;\n\n    for (Object num : arr) {\n        int n = (int) num;\n        if (n > max) {\n            count++;\n            max = n;\n        }\n    }\n\n    return count <= arr.size() - 1;\n}"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int countOdd = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                countOdd++;\n            }\n        }\n\n        if (countOdd % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int countOdd = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            countOdd++;\n        }\n    }\n\n    if (countOdd > lst2.size()) {\n        return \"NO\";\n    }\n\n    return \"YES\";\n}"}
{"task_id": "java/51", "language": "java", "completion": "StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < sb.length(); i++) {\n            if (c.contains(sb.charAt(i) + \"\")) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        String res = sb.toString();\n        boolean palindrome = new StringBuilder(res).reverse().toString().equals(res);\n        return Arrays.asList(res, palindrome);\n    }"}
{"task_id": "java/51", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                sb.append(s.charAt(i));\n            }\n        }\n\n        String reversed = sb.reverse().toString();\n        boolean isPalindrome = reversed.equals(sb.toString());\n\n        List<Object> result = new ArrayList<>();\n        result.add(sb.toString());\n        result.add(isPalindrome);\n\n        return result;\n    }"}
{"task_id": "java/52", "language": "java", "completion": "public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int maxFill = 0;\n\n        for (int i = 0; i < rows; i++) {\n            int currentFill = 0;\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    currentFill++;\n                }\n            }\n\n            maxFill = Math.max(maxFill, currentFill / capacity);\n        }\n\n        return maxFill;\n    }\n</end_of_turn>"}
{"task_id": "java/52", "language": "java", "completion": "public static int maxFill(List<List<Integer>> grid, int capacity) {\n    int rows = grid.size();\n    int cols = grid.get(0).size();\n    int ans = 0;\n\n    for (int i = 0; i < rows; i++) {\n        int water = 0;\n        for (int j = 0; j < cols; j++) {\n            water += grid.get(i).get(j);\n        }\n        ans += water / capacity;\n        ans += water % capacity > 0 ? 1 : 0;\n    }\n\n    return ans;\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\" \");\n\n        for (String word : splitWords) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (!Character.isLetter(c) || Character.isLowerCase(c)) {\n                    continue;\n                }\n                count++;\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n\n        return words;\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\" \");\n        for (String word : split) {\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (!Character.isLetter(word.charAt(i))) {\n                    continue;\n                }\n                if (!Character.isLowerCase(word.charAt(i))) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Maximum {\n\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        Integer[] array = arr.toArray(new Integer[0]);\n        Arrays.sort(array);\n        List<Object> result = new ArrayList<>();\n\n        for (int i = array.length - k; i < array.length; i++) {\n            result.add(array[i]);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> max = new LinkedList<>();\n        Collections.sort(arr);\n        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            max.add(arr.get(i));\n        }\n        return max;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr.get(i) < 100) {\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/55", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }"}
{"task_id": "java/56", "language": "java", "completion": "public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n    int start = Math.max(interval1.get(0), interval2.get(0));\n    int end = Math.min(interval1.get(1), interval2.get(1));\n\n    if (start <= end) {\n        int length = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n</start_of_turn>"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.List;\n\npublic class Intersection {\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start <= end) {\n            int length = end - start + 1;\n            if (isPrime(length)) {\n                return \"YES\";\n            } else {\n                return \"NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(int length) {\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Tribonacci {\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        result.add(3);\n\n        for (int i = 1; i <= n; i++) {\n            int tri = 0;\n            if (i % 2 == 0) {\n                tri = 1 + i / 2;\n            } else {\n                tri = result.get(result.size() - 1) + result.get(result.size() - 2) + result.get(result.size() - 3);\n            }\n            result.add(tri);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Tribonacci {\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;"}
{"task_id": "java/58", "language": "java", "completion": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }"}
{"task_id": "java/59", "language": "java", "completion": "public class IsNested {\n    public static Boolean isNested(String string) {\n        int counter = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                counter++;\n            } else if (string.charAt(i) == ']') {\n                counter--;\n            }\n            if (counter < 0) {\n                return false;\n            }\n        }\n        return counter == 0;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "public class IsNested {\n    public static Boolean isNested(String string) {\n        int counter = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                counter++;\n            } else if (string.charAt(i) == ']') {\n                counter--;\n            }\n            if (counter < 0) {\n                return false;\n            }\n        }\n        return counter == 0;\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            sum += Math.ceil(num.doubleValue()).intValue() * Math.ceil(num.doubleValue()).intValue();\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "public static int sumSquares(List<Number> lst) {\n    int sum = 0;\n    for (Number num : lst) {\n        sum += Math.pow(Math.ceil(num), 2).intValue();\n    }\n    return sum;\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt.trim().isEmpty()) {\n        return false;\n    }\n    char lastChar = txt.trim().charAt(txt.trim().length() - 1);\n    return Character.isAlphabetic(lastChar) && !Character.isWhitespace(lastChar);\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty()) {\n        return false;\n    }\n    int lastCharIndex = txt.length() - 1;\n    char lastChar = txt.charAt(lastCharIndex);\n    return Character.isLetter(lastChar) && !txt.substring(0, lastCharIndex).contains(\" \");\n}"}
{"task_id": "java/62", "language": "java", "completion": "public static int canArrange(List<Object> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if ((int) arr.get(i) <= (int) arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "public static int canArrange(List<Object> arr) {\n    for (int i = 1; i < arr.size(); i++) {\n        if ((Comparable) arr.get(i) <= (Comparable) arr.get(i - 1)) {\n            return i - 1;\n        }\n    }\n    return -1;\n}"}
{"task_id": "java/63", "language": "java", "completion": "public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n    int largestNegative = Integer.MIN_VALUE;\n    int smallestPositive = Integer.MAX_VALUE;\n\n    for (Object num : lst) {\n        if (num instanceof Integer) {\n            int value = (int) num;\n\n            if (value < 0 && value > largestNegative) {\n                largestNegative = value;\n            }\n\n            if (value > 0 && value < smallestPositive) {\n                smallestPositive = value;\n            }\n        }\n    }\n\n    if (largestNegative == Integer.MIN_VALUE || smallestPositive == Integer.MAX_VALUE) {\n        return Arrays.asList(null, null);\n    } else {\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n    int largestNegative = Integer.MIN_VALUE;\n    int smallestPositive = Integer.MAX_VALUE;\n\n    for (Object num : lst) {\n        if (num instanceof Integer) {\n            int n = (Integer) num;\n            if (n < 0 && n > largestNegative) {\n                largestNegative = n;\n            } else if (n > 0 && n < smallestPositive) {\n                smallestPositive = n;\n            }\n        }\n    }\n\n    List<Integer> result = new ArrayList<>();\n    if (largestNegative != Integer.MIN_VALUE) {\n        result.add(largestNegative);\n    }\n    if (smallestPositive != Integer.MAX_VALUE) {\n        result.add(smallestPositive);\n    }\n\n    return result.size() == 0 ? null : result;\n}\n</end_of_turn>"}
{"task_id": "java/64", "language": "java", "completion": "public static long specialFactorial(int n) {\n    long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= i * factorial(i - 1);\n    }\n    return result;\n}\n\nprivate static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n</end_of_turn>"}
{"task_id": "java/64", "language": "java", "completion": "public static long specialFactorial(int n) {\n    long result = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n        for (int j = i - 1; j > 0; j--) {\n            result *= j;\n        }\n    }\n    return result;\n}"}
{"task_id": "java/65", "language": "java", "completion": "public static String wordsInSentence(String sentence) {\n    String[] words = sentence.split(\" \");\n    StringBuilder sb = new StringBuilder();\n\n    for (String word : words) {\n        if (isPrime(word.length())) {\n            sb.append(word).append(\" \");\n        }\n    }\n\n    return sb.toString().trim();\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "java/65", "language": "java", "completion": "public class WordsInSentence {\n\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n\n        return sb.toString().trim();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n    String[] arr1 = x.split(\"/\");\n    String[] arr2 = n.split(\"/\");\n\n    int num1 = Integer.parseInt(arr1[0]);\n    int den1 = Integer.parseInt(arr1[1]);\n\n    int num2 = Integer.parseInt(arr2[0]);\n    int den2 = Integer.parseInt(arr2[1]);\n\n    int newNum = num1 * num2;\n    int newDen = den1 * den2;\n\n    return newNum % newDen == 0;\n}"}
{"task_id": "java/66", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n    // Konvertiere die Zeichenketten in Br\u00fcche\n    Fraction a = new Fraction(x);\n    Fraction b = new Fraction(n);\n\n    // Multiplizieren Sie die beiden Br\u00fcche\n    Fraction product = a.multiply(b);\n\n    // \u00dcberpr\u00fcfen Sie, ob das Ergebnis eine ganze Zahl ist\n    return product.isInteger();\n}\n\n// Klasse zur Darstellung von Br\u00fcche\nclass Fraction {\n    private int numerator;\n    private int denominator;\n\n    public Fraction(String s) {\n        // Parsen Sie die Zeichenkette und erstellen Sie einen neuen Bruchteil\n        String[] parts = s.split(\"/\");\n        numerator = Integer.parseInt(parts[0]);\n        denominator = Integer.parseInt(parts[1]);\n    }\n\n    public Fraction multiply(Fraction b) {\n        // Multiplizieren Sie die Z\u00e4hler und Nenner\n        int newNumerator = numerator * b.numerator;\n        int newDenominator = denominator * b.denominator;\n\n        // Erstellen Sie einen neuen Bruchteil mit dem neuen Z\u00e4hler und Nenner\n        return new Fraction(newNumerator, newDenominator);\n    }\n\n    public boolean isInteger() {\n        // \u00dcberpr\u00fcfen Sie, ob der Z\u00e4hler ein Vielfaches des Nenners ist\n        return numerator % denominator == 0;\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        List<Object> sortedNums = new ArrayList<>(nums);\n        sortedNums.sort(Comparator.comparing(OrderByPoints::sumOfDigits)\n                .thenComparing(Comparator.naturalOrder()));\n        return sortedNums;\n    }\n\n    private static int sumOfDigits(Object num) {\n        int sum = 0;\n        String numStr = num.toString();\n        for (int i = 0; i < numStr.length(); i++) {\n            sum += Character.getNumericValue(numStr.charAt(i));\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        List<Object> result = new ArrayList<>(nums);\n        Collections.sort(result, Comparator.comparing(OrderByPoints::sumOfDigits).thenComparing(Comparator.naturalOrder()));\n        return result;\n    }\n\n    private static int sumOfDigits(Object num) {\n        int sum = 0;\n        String str = num.toString();\n        for (char c : str.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n > 10 && n % 2 != 0 && n % 10 % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }"}
{"task_id": "java/68", "language": "java", "completion": "public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                int n = (Integer) num;\n                if (n > 10 && n % 2 != 0 && n % 10 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n</end_of_turn>"}
{"task_id": "java/69", "language": "java", "completion": "public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }"}
{"task_id": "java/69", "language": "java", "completion": "public static int getMaxTriples(int n) {\n    int[] a = new int[n + 1];\n    for (int i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    int count = 0;\n    for (int i = 1; i <= n - 2; i++) {\n        for (int j = i + 1; j <= n - 1; j++) {\n            for (int k = j + 1; k <= n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n</end_of_turn>"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Bf {\n\n    public static List<Object> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n        int index1 = Arrays.asList(planets).indexOf(planet1);\n        int index2 = Arrays.asList(planets).indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        List<Object> result = new ArrayList<>();\n        for (int i = Math.min(index1, index2); i <= Math.max(index1, index2); i++) {\n            result.add(planets[i]);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Bf {\n\n    public static List<Object> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n        // \u00dcberpr\u00fcfen der Eingaben\n        if (!Arrays.asList(planets).contains(planet1) || !Arrays.asList(planets).contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        // Finden der Positionen der Planeten\n        int pos1 = Arrays.asList(planets).indexOf(planet1);\n        int pos2 = Arrays.asList(planets).indexOf(planet2);\n\n        // Sortieren der Planeten basierend auf ihrer Umlaufbahn\n        List<String> sortedPlanets = new ArrayList<>();\n        for (int i = pos1; i <= pos2; i++) {\n            sortedPlanets.add(planets[i]);\n        }\n\n        // Sortieren der Planeten nach N\u00e4he zur Sonne\n        sortedPlanets.sort((p1, p2) -> {\n            int pos1 = Arrays.asList(planets).indexOf(p1);\n            int pos2 = Arrays.asList(planets).indexOf(p2);\n            return pos1 - pos2;\n        });\n\n        return sortedPlanets;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }"}
{"task_id": "java/71", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    boolean isPrime = true;\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime ? x : y;\n}"}
{"task_id": "java/72", "language": "java", "completion": "public static int doubleTheDifference(List<Object> lst) {\n    int sum = 0;\n    for (Object num : lst) {\n        if (num instanceof Integer) {\n            int n = (int) num;\n            if (n > 0 && n % 2 != 0) {\n                sum += n * n;\n            }\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/72", "language": "java", "completion": "public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n % 2 != 0 && n >= 0) {\n                    sum += n * n;\n                }\n            }\n        }\n\n        return sum;\n    }\n</end_of_turn>"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.Comparator;\n\npublic class StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        extensions.sort(Comparator.comparing(StrongestExtension::strength));\n        return className + \".\" + extensions.get(extensions.size() - 1);\n    }\n\n    private static int strength(String extension) {\n        int cap = 0;\n        int sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return cap - sm;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "public static String strongestExtension(String className, List<String> extensions) {\n    int maxStrength = Integer.MIN_VALUE;\n    String strongestExtension = \"\";\n\n    for (String extension : extensions) {\n        int strength = extension.chars().filter(c -> Character.isUpperCase(c)).count() - extension.chars().filter(c -> Character.isLowerCase(c)).count();\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        } else if (strength == maxStrength && extension.compareTo(strongestExtension) < 0) {\n            strongestExtension = extension;\n        }\n    }\n\n    return className + \".\" + strongestExtension;\n}"}
{"task_id": "java/74", "language": "java", "completion": "for (int i = 0; i < a.length(); i++) {\n            String s = a.substring(i) + a.substring(0, i);\n            if (s.contains(b)) {\n                return true;\n            }\n        }\n        return false;"}
{"task_id": "java/74", "language": "java", "completion": "public static Boolean cycpatternCheck(String a, String b) {\n    for (int i = 0; i < a.length(); i++) {\n        StringBuilder sb = new StringBuilder(a);\n        sb.deleteCharAt(i);\n        if (sb.toString().contains(b)) {\n            return true;\n        }\n        sb.insert(0, a.charAt(i));\n        sb.deleteCharAt(a.length());\n    }\n    return false;\n}"}
{"task_id": "java/75", "language": "java", "completion": "public class IntToMiniRoman {\n\n    public static String intToMiniRoman(int number) {\n        String[] romanSymbols = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        int[] decimalValues = {1, 5, 10, 50, 100, 500, 1000};\n\n        StringBuilder result = new StringBuilder();\n        int i = decimalValues.length - 1;\n\n        while (number > 0 && i >= 0) {\n            int decimalValue = decimalValues[i];\n            String romanSymbol = romanSymbols[i];\n\n            while (number >= decimalValue) {\n                result.append(romanSymbol);\n                number -= decimalValue;\n            }\n\n            i--;\n        }\n\n        return result.toString();\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "public static String intToMiniRoman(int number) {\n        StringBuilder sb = new StringBuilder();\n\n        // Zehnerstelle\n        int[] tenValues = {1000, 900, 500, 400, 100};\n        String[] tenSymbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\"};\n\n        // Einerstelle\n        int[] oneValues = {10, 9, 5, 4, 1};\n        String[] oneSymbols = {\"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        for (int i = 0; i < tenValues.length; i++) {\n            while (number >= tenValues[i]) {\n                sb.append(tenSymbols[i]);\n                number -= tenValues[i];\n            }\n        }\n\n        for (int i = 0; i < oneValues.length; i++) {\n            while (number >= oneValues[i]) {\n                sb.append(oneSymbols[i]);\n                number -= oneValues[i];\n            }\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "if (a * a + b * b == c * c) {\n            return true;\n        } else if (a * a + c * c == b * b) {\n            return true;\n        } else if (b * b + c * c == a * a) {\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"task_id": "java/76", "language": "java", "completion": "if (a * a + b * b == c * c) {\n            return true;\n        } else if (b * b + c * c == a * a) {\n            return true;\n        } else if (c * c + a * a == b * b) {\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"task_id": "java/77", "language": "java", "completion": "String res = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                res += Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            } else {\n                res += c;\n            }\n        }\n        if (res.equals(\"\")) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return res;\n    }"}
{"task_id": "java/77", "language": "java", "completion": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.toString().chars().allMatch(Character::isDigit)) {\n            return new StringBuilder(sb.toString()).reverse().toString();\n        } else {\n            return sb.toString();\n        }\n    }"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytesOfText = text.getBytes(\"UTF-8\");\n            byte[] md5Bytes = md.digest(bytesOfText);\n\n            StringBuilder hexString = new StringBuilder();\n            for (byte aMd5Byte : md5Bytes) {\n                String hex = Integer.toHexString(0xFF & aMd5Byte);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            // Fehlerbehandlung\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes());\n            StringBuilder hexString = new StringBuilder();\n\n            for (byte b : hash) {\n                String hex = Integer.toHexString(0xFF & b);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GenerateIntegers {\n\n    public static List<Object> generateIntegers(int a, int b) {\n        List<Object> integers = new ArrayList<>();\n\n        // Ensure a is smaller than b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        // Iterate through the numbers between a and b\n        for (int i = a; i <= b; i++) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                integers.add(i);\n            }\n        }\n\n        return integers;\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "public static List<Integer> generateIntegers(int a, int b) {\n    List<Integer> result = new ArrayList<>();\n    int start = Math.min(a, b);\n    int end = Math.max(a, b);\n    for (int i = start; i <= end; i++) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}"}

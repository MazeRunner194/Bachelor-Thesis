{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>) : boolean  {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n};\n</end_of_turn>"}
{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>) : boolean  {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): Array<number> {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): Array<number> {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string) : string {\n  let result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string) : string  {\n  const len = a.length;\n  let result = '';\n\n  for (let i = 0; i < len; i++) {\n    result += Number(a[i]) ^ Number(b[i]);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>) : string | null {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>) : string | null {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n  for (const string of strings) {\n    if (string.length > longestString.length) {\n      longestString = string;\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n};\n</end_of_turn>"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n  let temp;\n\n  while (b !== 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n\n  return a;\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string) : string  {\n  const numberWords = numbers.split(' ');\n  numberWords.sort((a, b) => a.localeCompare(b));\n  return numberWords.join(' ');\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "function sort_numbers(numbers: string): string {\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  const numberArr = numbers.split(' ').map(number => numberMap[number]);\n  numberArr.sort((a, b) => a - b);\n\n  return numberArr.map(number => Object.keys(numberMap).find(key => numberMap[key] === number)).join(' ');\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n  if (numbers.length < 2) {\n    throw new Error('Array must have at least two elements');\n  }\n\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string) : string  {\n  return string0.split('').map(char => {\n    if (char.toLowerCase() === char) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n  return string0\n    .split('')\n    .map((char) => {\n      return /[a-z]/.test(char) ? char.toUpperCase() : char.toLowerCase();\n    })\n    .join('');\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n  return l.filter((num) => num > 0);\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>) : Array<number> {\n  return l.filter(num => num > 0);\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number) : boolean  {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number>  {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>) : Array<number> {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst fib = (n: number): number => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst prime_fib = (n: number): number => {\n  let num = fib(0);\n  let count = 0;\n\n  while (count < n) {\n    num = fib(++count);\n    if (isPrime(num)) return num;\n  }\n\n  return -1; // in case n is out of range\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst fibonacci = (n: number): number => {\n  let a = 0;\n  let b = 1;\n  let c = a + b;\n  for (let i = 3; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst prime_fib = (n: number): number => {\n  let i = 1;\n  while (true) {\n    const num = fibonacci(i);\n    if (isPrime(num)) {\n      if (i === n) return num;\n      i++;\n    } else {\n      i++;\n    }\n  }\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n  const set = new Set(l);\n  const len = set.size;\n  if (len < 3) return false;\n  for (const num of set) {\n    const target = -num;\n    let count = 0;\n    for (const n of set) {\n      if (n === num) continue;\n      if (set.has(target - n)) count++;\n    }\n    if (count >= 2) return true;\n  }\n  return false;\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>) : boolean  {\n  const seen = new Set();\n  const complements = new Set();\n\n  for (const num of l) {\n    for (const complement of complements) {\n      if (seen.has(-num - complement)) {\n        return true;\n      }\n    }\n\n    seen.add(num);\n    complements.add(-num);\n  }\n\n  return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>) : boolean {\n  const seen = new Set();\n\n  for (const num of l) {\n    const complement = -num;\n\n    if (seen.has(complement)) {\n      return true;\n    }\n\n    seen.add(num);\n  }\n\n  return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n  const seen = new Set<number>();\n\n  for (const num of l) {\n    const complement = -num;\n\n    if (seen.has(complement)) {\n      return true;\n    }\n\n    seen.add(num);\n  }\n\n  return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number) : number  {\n  if (n <= 1) return 0;\n  if (n <= 3) return 2;\n\n  let a = 2;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n\n  for (let i = 4; i <= n; i++) {\n    d = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n  }\n\n  return d;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function(n: number): number {\n  const fibs = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2] + fibs[i - 3] + fibs[i - 4]);\n  }\n  return fibs[n];\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>) : number  {\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid] + l[mid - 1]) / 2;\n  } else {\n    return l[mid];\n  }\n}\n</end_of_turn>"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid] + l[mid - 1]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n  const reversed = text.split('').reverse().join('');\n  return reversed === text;\n};"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = (text: string): string => {\n  return text\n    .split('')\n    .filter((char) => !['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'].includes(char))\n    .join('');\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n  return l.every(num => num < t);\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n  return l.every(num => num < t);\n};"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n  return x + y;\n};"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number) : number  {\n  return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string) : boolean  {\n    return [...s0].sort().join('') === [...s1].sort().join('');\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n  const charCount: Record<string, number> = {};\n\n  // Count the characters in the first string\n  for (const char of s0) {\n    charCount[char] = (charCount[char] || 0) + 1;\n  }\n\n  // Check if the second string contains the same characters\n  for (const char of s1) {\n    if (!(char in charCount) || charCount[char] === 0) {\n      return false;\n    }\n    charCount[char]--;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n  if (n <= 1) {\n    return n;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function(n: number): number {\n    if (n <= 1) return n;\n    let a = 0, b = 1, c;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>) : Array<number>  {\n  return [...new Set(l1.filter(x => l2.includes(x)))]\n}"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>): Array<number> {\n  return [...new Set(l1.filter(x => l2.includes(x)))];\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      n /= i;\n    }\n    i++;\n  }\n  return n > 1 ? n : i - 1;\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let divisor = 2;\n  let largest = 1;\n\n  while (divisor * divisor <= n) {\n    while (n % divisor === 0) {\n      largest = divisor;\n      n /= divisor;\n    }\n    divisor++;\n  }\n\n  if (n > 1) {\n    largest = n;\n  }\n\n  return largest;\n};\n</end_of_turn>"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n  return (n * (n + 1)) / 2;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n  return (n * (n + 1)) / 2;\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number> {\n    return xs.slice(1).map((x, i) => x * (i + 1));\n}"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number>  {\n    const len = xs.length;\n    const result = new Array(len - 1);\n    for (let i = 1; i < len; i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n}"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n  const arr = [0, 0, 1];\n\n  for (let i = 3; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n\n  return arr[n];\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number) : number  {\n  if (n <= 2) return 0;\n  if (n === 3) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\n  for (let i = 4; i <= n; i++) {\n    const next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n  }\n\n  return c;\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    let count = 0;\n\n    for (const char of s.toLowerCase()) {\n        if (vowels.has(char)) {\n            count++;\n        }\n    }\n\n    // Check for 'y' at the end of the word\n    if (s.endsWith('y')) {\n        count++;\n    }\n\n    return count;\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n\n  for (const char of s.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n\n  if (s.endsWith('y')) {\n    count++;\n  }\n\n  return count;\n};\n</end_of_turn>"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>) : number {\n  const freqMap = new Map<number, number>();\n  for (const num of lst) {\n    freqMap.set(num, (freqMap.get(num) || 0) + 1);\n  }\n\n  for (const [num, freq] of freqMap.entries()) {\n    if (freq >= num) {\n      return num;\n    }\n  }\n\n  return -1;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>) : number  {\n  const freqMap = new Map<number, number>();\n\n  // Calculate frequencies\n  for (const num of lst) {\n    freqMap.set(num, (freqMap.get(num) || 0) + 1);\n  }\n\n  // Find maximum value with frequency >= itself\n  let result = -1;\n  for (const [num, freq] of freqMap.entries()) {\n    if (freq >= num && num > result) {\n      result = num;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    return parseFloat((Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n  }\n  return -1;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number) : number  {\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "function isPalindrome(list: number[]): boolean {\n  const reversed = [...list].reverse();\n  return JSON.stringify(list) === JSON.stringify(reversed);\n}\n\nfunction will_it_fly(q: number[], w: number): boolean {\n  const sum = q.reduce((acc, curr) => acc + curr, 0);\n\n  if (sum > w) {\n    return false;\n  }\n\n  return isPalindrome(q);\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n  // Check if the object is balanced\n  const isBalanced = (q.length === 0 || q.slice(0, q.length / 2).reverse().join('') === q.slice(q.length / 2).join(''));\n\n  // Check if the sum of the elements is less than or equal to the maximum possible weight\n  const sum = q.reduce((acc, curr) => acc + curr, 0);\n  const willFly = sum <= w;\n\n  // Return True if the object is balanced and the sum is less than or equal to the maximum possible weight\n  return isBalanced && willFly;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n  if (a < 2) return false;\n\n  let divisor = 2;\n  let count = 0;\n\n  while (divisor <= a) {\n    if (a % divisor === 0) {\n      count++;\n      a /= divisor;\n    } else {\n      divisor++;\n    }\n  }\n\n  return count === 3;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n  if (a < 2) return false;\n\n  let count = 0;\n  let divisor = 2;\n\n  while (divisor <= Math.sqrt(a)) {\n    while (a % divisor === 0) {\n      count++;\n      a /= divisor;\n    }\n    divisor++;\n  }\n\n  if (a > 1) count++;\n\n  return count === 3;\n};\n</end_of_turn>"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n  let binary = '';\n\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return 'db' + binary + 'db';\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n  let binary = '';\n\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return 'db' + binary.padStart(8, '0') + 'db';\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string) : boolean  {\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i <= s.length - 3; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string>  {\n  const letter_grades = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else {\n      return 'D-';\n    }\n  });\n  return letter_grades;\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string>  {\n  return grades.map((gpa) => {\n    if (gpa >= 4.0) {\n      return 'A+';\n    } else if (gpa >= 3.7) {\n      return 'A';\n    } else if (gpa >= 3.3) {\n      return 'A-';\n    } else if (gpa >= 3.0) {\n      return 'B+';\n    } else if (gpa >= 2.7) {\n      return 'B';\n    } else if (gpa >= 2.3) {\n      return 'B-';\n    } else if (gpa >= 2.0) {\n      return 'C+';\n    } else if (gpa >= 1.7) {\n      return 'C';\n    } else if (gpa >= 1.3) {\n      return 'C-';\n    } else if (gpa >= 1.0) {\n      return 'D+';\n    } else if (gpa >= 0.7) {\n      return 'D';\n    } else {\n      return 'D-';\n    }\n  });\n};"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst prime_length = (string0: string): boolean => {\n  const length = string0.length;\n  return isPrime(length);\n};"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const prime_length = function (string0: string): boolean {\n  const length = string0.length;\n\n  if (length <= 1) {\n    return false;\n  }\n\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function(N: number): string {\n  let sum = 0;\n  let num = N;\n\n  while (num > 0) {\n    sum += num % 2;\n    num = Math.floor(num / 2);\n  }\n\n  return sum.toString(2);\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number): Array<Array<number>> {\n  const result: Array<Array<number>> = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<Array<number>>  {\n  const result: Array<Array<number>> = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  // Sort coordinates by row in ascending order\n  result.sort((a, b) => a[0] - b[0]);\n\n  // Sort coordinates of the row by columns in descending order\n  result.forEach(row => row.sort((a, b) => b[1] - a[1]));\n\n  return result;\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>) : any  {\n  if (lst.length <= 1) return null;\n\n  let min = Infinity;\n  let secondMin = Infinity;\n\n  for (const num of lst) {\n    if (num < min) {\n      secondMin = min;\n      min = num;\n    } else if (num < secondMin && num !== min) {\n      secondMin = num;\n    }\n  }\n\n  return secondMin === Infinity ? null : secondMin;\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>) : any  {\n  if (!lst || lst.length < 2) {\n    return null;\n  }\n  let min = Infinity;\n  let second_min = Infinity;\n  for (const num of lst) {\n    if (num < min) {\n      second_min = min;\n      min = num;\n    } else if (num < second_min && num !== min) {\n      second_min = num;\n    }\n  }\n  return second_min;\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n  const sentences = S.split(/[!.?]/).filter(sentence => sentence.trim() !== \"\");\n  let boredomCount = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"I\")) {\n      boredomCount++;\n    }\n  }\n\n  return boredomCount;\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n  const sentences = S.split(/[?.!]/);\n  let boredoms = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith('I')) {\n      boredoms++;\n    }\n  }\n\n  return boredoms;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (num: number) => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst sumOfDigits = (num: number) => {\n  return num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0);\n};\n\nconst largestPrimeInList = (lst: Array<number>) => {\n  let largestPrime = 0;\n  for (const num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n  return largestPrime;\n};\n\nconst findSumOfDigitsOfLargestPrime = (lst: Array<number>) => {\n  const largestPrime = largestPrimeInList(lst);\n  return sumOfDigits(largestPrime);\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst sumOfDigits = (num: number): number => {\n  return num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0);\n};\n\nconst findLargestPrimeAndSumDigits = (lst: Array<number>): number => {\n  let largestPrime = 0;\n  for (const num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n  return sumOfDigits(largestPrime);\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function(dict: { [key: string]: string }): boolean {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  const firstKeyCase = dict[Object.keys(dict)[0]].toUpperCase();\n\n  for (const key in dict) {\n    if (dict[key].toUpperCase() !== firstKeyCase && dict[key].toLowerCase() !== firstKeyCase) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n  if (dict.size === 0) {\n    return false;\n  }\n\n  const firstKey = Object.keys(dict)[0];\n  const isLowercase = firstKey === firstKey.toLowerCase();\n\n  return Array.from(dict.keys()).every(key => isLowercase ? key === key.toLowerCase() : key === key.toUpperCase());\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function (value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  if (Math.abs(num - floor) === Math.abs(num - ceil)) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return num > 0 ? floor : ceil;\n  }\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = (value: string): number => {\n  const number = parseFloat(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n\n  if (Math.abs(number - floor) === Math.abs(number - ceil)) {\n    return number > 0 ? ceil : floor;\n  } else {\n    return Math.round(number);\n  }\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n  const result = [n];\n\n  while (n > 1) {\n    n = n % 2 === 0 ? n - 1 : n + 1;\n    result.push(n);\n  }\n\n  return result.reverse();\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n  const result: Array<number> = [];\n  let stones = n;\n\n  while (stones > 0) {\n    result.push(stones);\n    stones = stones % 2 === 0 ? stones + 1 : stones - 1;\n  }\n\n  return result.reverse();\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n  // Remove extra spaces and split the string into words\n  const words = s.trim().split(/[\\s,]+/);\n\n  return words;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n  return s.split(/[ ,]/);\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n  let evenNum = y;\n\n  while (evenNum >= x) {\n    if (evenNum % 2 === 0) {\n      return evenNum;\n    }\n    evenNum -= 1;\n  }\n\n  return -1;\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number) : number  {\n  let biggestEven = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      biggestEven = Math.max(biggestEven, i);\n    }\n  }\n  return biggestEven;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number) : any {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const average = Math.round(sum / (m - n + 1));\n  return \"0b\" + average.toString(2);\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): string | number {\n  if (n > m) {\n    return -1;\n  }\n\n  const sum = (m - n + 1) * (n + m) / 2;\n  const average = Math.round(sum / (m - n + 1));\n  return \"0b\" + average.toString(2);\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n  const result = new Array(n);\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result[i - 1] = factorial(i);\n    } else {\n      result[i - 1] = sum(i);\n    }\n  }\n\n  return result;\n};\n\nfunction factorial(n: number): number {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n}\n\nfunction sum(n: number): number {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n}"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function(n: number): Array<number> {\n    return Array.from({ length: n }, (_, i) => i % 2 === 0 ? factorial(i) : sum(i));\n};\n\nfunction factorial(n: number): number {\n    return n <= 1 ? 1 : n * factorial(n - 1);\n}\n\nfunction sum(n: number): number {\n    return (n * (n + 1)) / 2;\n}\n</end_of_turn>"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): Array<number> {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let reversed = parseInt(i.toString().split(\"\").reverse().join(\"\"));\n\n    if (i === reversed) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): Array<number> {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const reversed = parseInt(i.toString().split('').reverse().join(''));\n\n    if (i === reversed) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean  {\n  if (arr.length === 0) return true;\n\n  let min = arr[0];\n  let count = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      count++;\n    }\n  }\n\n  return count <= arr.length - 1;\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean  {\n    if (!arr.length) return true;\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) return false;\n        max = Math.max(max, arr[i]);\n    }\n    return true;\n}"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>) : string  {\n  let evenCount = lst1.filter(num => num % 2 === 0).length;\n  let oddCount = lst1.filter(num => num % 2 !== 0).length;\n\n  while (oddCount > 0 && lst2.length > 0) {\n    const odd = lst1.shift();\n    const even = lst2.shift();\n\n    lst1.push(even);\n    lst2.push(odd);\n\n    evenCount++;\n    oddCount--;\n  }\n\n  return evenCount === lst1.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>) : string  {\n  let countEven = 0;\n\n  for (const num of lst1) {\n    if (num % 2 === 0) {\n      countEven++;\n    }\n  }\n\n  if (countEven === lst1.length) {\n    return \"YES\";\n  }\n\n  for (const num of lst2) {\n    if (num % 2 === 0) {\n      lst1.push(num);\n      lst2.splice(lst2.indexOf(num), 1);\n      countEven++;\n    }\n  }\n\n  if (countEven === lst1.length) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): Array<any> {\n  // Delete all characters in s that are equal to any character in c\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n\n  // Check if the result string is palindrome\n  let isPalindrome = result === result.split('').reverse().join('');\n\n  return [result, isPalindrome];\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): Array<any> {\n  let result = \"\";\n  for (const char of s.split(\"\")) {\n    if (!c.includes(char)) {\n      result += char;\n    }\n  }\n  return [result, result === result.split(\"\").reverse().join(\"\")];\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let totalWater = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      totalWater += grid[i][j];\n    }\n  }\n\n  const fullBuckets = Math.floor(totalWater / capacity);\n\n  return fullBuckets;\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number) : number {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let filled = 0;\n  let lowered = 0;\n\n  while (filled < rows * cols) {\n    // Fill as many wells as possible with the current capacity\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1 && filled < capacity) {\n          grid[i][j] = 0;\n          filled++;\n        }\n      }\n    }\n\n    // Lower the bucket if all wells are filled\n    if (filled === rows * cols) {\n      break;\n    }\n\n    lowered++;\n  }\n\n  return lowered;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const isConsonant = (c: string): boolean => {\n  return !['a', 'e', 'i', 'o', 'u'].includes(c.toLowerCase());\n};\n\nconst select_words = function (s: string, n: number): Array<string> {\n  const words = s.split(' ');\n  const result: Array<string> = [];\n\n  for (const word of words) {\n    let consonantCount = 0;\n\n    for (const char of word) {\n      if (isConsonant(char)) {\n        consonantCount++;\n      }\n    }\n\n    if (consonantCount === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const isConsonant = (c: string): boolean => {\n  return ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'].includes(c.toLowerCase());\n};\n\nconst select_words = function (s: string, n: number): Array<string> {\n  if (!s) {\n    return [];\n  }\n\n  const words = s.split(' ');\n  const result: Array<string> = [];\n\n  for (const word of words) {\n    let consonantCount = 0;\n\n    for (const char of word) {\n      if (isConsonant(char)) {\n        consonantCount++;\n      }\n    }\n\n    if (consonantCount === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "function maximum(arr: number[], k: number): number[] {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n  return arr\n    .sort((a, b) => b - a) // Sort in descending order\n    .slice(0, k); // Extract the first k elements\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function(arr: Array<number>, k: number) : number {\n  return arr.slice(0, k).reduce((sum, num) => {\n    if (num < 100) {\n      sum += num;\n    }\n    return sum;\n  }, 0);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number) : number {\n  return arr.slice(0, k).reduce((sum, num) => {\n    if (num < 100) {\n      sum += num;\n    }\n    return sum;\n  }, 0);\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  const left = Math.max(start1, start2);\n  const right = Math.min(end1, end2);\n\n  const length = right - left + 1;\n\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nfunction isPrime(num: number): boolean {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}\n</end_of_turn>"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  const left = Math.max(start1, start2);\n  const right = Math.min(end1, end2);\n\n  const length = right - left + 1;\n\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nfunction isPrime(num: number): boolean {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n  const result: Array<number> = [1];\n\n  if (n === 0) {\n    return result;\n  }\n\n  result.push(3);\n\n  if (n === 1) {\n    return result;\n  }\n\n  result.push(2);\n\n  if (n === 2) {\n    return result;\n  }\n\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n  const result: Array<number> = [1];\n\n  for (let i = 1; i <= n; i++) {\n    if (i <= 2) {\n      result.push(3);\n    } else if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n  let product = 1;\n\n  while (n > 0) {\n    const digit = n % 10;\n\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n\n    n = Math.floor(n / 10);\n  }\n\n  return product === 1 ? 0 : product;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function(n: number): number {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product === 1 ? 0 : product;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n  let count = 0;\n\n  for (const char of string0) {\n    if (char === '[') {\n      count++;\n    } else if (char === ']') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n  let count = 0;\n  for (const char of string0) {\n    if (char === '[') {\n      count++;\n    } else if (char === ']') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>) : number  {\n  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n  if (!txt.trim()) return false;\n\n  const lastChar = txt.trim().split(\" \").pop()![txt.trim().split(\" \").pop()!.length - 1];\n\n  return /[a-zA-Z]/.test(lastChar) && !/\\w/.test(lastChar);\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n  // Remove trailing spaces\n  const trimmedTxt = txt.trimEnd();\n\n  // Check if the last character is alphabetical and not part of a word\n  return /^[a-zA-Z]$/.test(trimmedTxt[trimmedTxt.length - 1]);\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>) : number  {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): Array<any> {\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    } else if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): Array<any> {\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    }\n    if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n  if (n <= 0) {\n    return 1;\n  }\n\n  let result = n;\n\n  while (n > 1) {\n    n--;\n    result *= n;\n  }\n\n  return result;\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n  if (n <= 1) {\n    return 1;\n  }\n\n  let result = n;\n\n  for (let i = n - 1; i >= 1; i--) {\n    result *= i;\n  }\n\n  return result;\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst words_in_sentence = function (sentence: string): string {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst words_in_sentence = (sentence: string): string => {\n  const words = sentence.split(' ');\n  const result = words.filter(word => isPrime(word.length));\n  return result.join(' ');\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string): boolean {\n  const [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n  const [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n\n  const product = (xNumerator * nDenominator) / (xDenominator * nNumerator);\n\n  return Number.isInteger(product);\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string) : boolean  {\n  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\n  const result = (xNumerator * nDenominator) === (nNumerator * xDenominator);\n\n  return result;\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function(nums: Array<number>): Array<number> {\n    return nums.sort((a, b) => {\n        const sumA = nums.reduce((acc, num) => acc + num, 0);\n        const sumB = nums.reduce((acc, num) => acc + num, 0);\n\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n\n        return sumA - sumB;\n    });\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n  return nums.sort((a, b) => {\n    const sumA = nums.slice(0, nums.indexOf(a)).reduce((acc, num) => acc + num, 0);\n    const sumB = nums.slice(0, nums.indexOf(b)).reduce((acc, num) => acc + num, 0);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n  return nums.filter(num => num > 10 && (num % 10 % 2 !== 0 && Math.floor(num / 10) % 2 !== 0)).length;\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n  return nums.filter(num => num > 10 && /[13579]$/.test(num.toString()) && /^[13579]/.test(num.toString())).length;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n  const a = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n  let count = 0;\n\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n  const a = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n  let count = 0;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction bf(planet1: string, planet2: string): string[] {\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n\n  if (planet1Index === -1 || planet2Index === -1) {\n    return [];\n  }\n\n  return planets.slice(Math.min(planet1Index, planet2Index) + 1, Math.max(planet1Index, planet2Index));\n}"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nconst bf = function (planet1: string, planet2: string): Array<string> {\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n\n  return planets.slice(Math.min(planet1Index, planet2Index) + 1, Math.max(planet1Index, planet2Index));\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number) : number  {\n  let isPrime = true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    return x;\n  } else {\n    return y;\n  }\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number) : number  {\n  let isPrime = true;\n  for (let i = 2; i <= n / 2; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime ? x : y;\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n  return lst.reduce((acc, num) => {\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>) : number  {\n    return lst.reduce((acc, num) => {\n        if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n            return acc + Math.pow(num, 2);\n        }\n        return acc;\n    }, 0);\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>) : string  {\n  let strongestExtension = '';\n  let strongestStrength = -Infinity;\n\n  extensions.forEach(extension => {\n    const cap = extension.match(/[A-Z]/g)?.length || 0;\n    const sm = extension.match(/[a-z]/g)?.length || 0;\n    const strength = cap - sm;\n\n    if (strength > strongestStrength) {\n      strongestExtension = extension;\n      strongestStrength = strength;\n    } else if (strength === strongestStrength && extension < strongestExtension) {\n      strongestExtension = extension;\n    }\n  });\n\n  return `${class_name}.${strongestExtension}`;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n  let strongestExtension = '';\n  let strongestStrength = -Infinity;\n\n  for (const extension of extensions) {\n    const cap = extension.replace(/[a-z]/g, '').length;\n    const sm = extension.replace(/[A-Z]/g, '').length;\n    const strength = cap - sm;\n\n    if (strength > strongestStrength) {\n      strongestStrength = strength;\n      strongestExtension = extension;\n    } else if (strength === strongestStrength && extension < strongestExtension) {\n      strongestExtension = extension;\n    }\n  }\n\n  return class_name + '.' + strongestExtension;\n};"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string) : boolean {\n  const rotations = new Set<string>();\n\n  for (let i = 0; i < b.length; i++) {\n    let current = b;\n    for (let j = 0; j < b.length; j++) {\n      rotations.add(current);\n      current = current.slice(1) + current[0];\n    }\n  }\n\n  return rotations.has(a);\n};"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string) : boolean  {\n  const rotations = [b];\n  for (let i = 1; i < b.length; i++) {\n    rotations.push(b.slice(i) + b.slice(0, i));\n  }\n\n  return rotations.some(rotation => a.includes(rotation));\n}"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number0: number): string {\n    const num = Math.floor(number0);\n    const roman_numerals: string[] = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\n    const roman_values: number[] = [1, 5, 10, 50, 100, 500, 1000];\n\n    let result = '';\n\n    for (let i = roman_values.length - 1; i >= 0; i--) {\n        while (num >= roman_values[i]) {\n            result += roman_numerals[i];\n            num -= roman_values[i];\n        }\n    }\n\n    return result.toLowerCase();\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = (number: number): string => {\n  const numerals = [\n    { value: 1000, symbol: 'm' },\n    { value: 900, symbol: 'cm' },\n    { value: 500, symbol: 'd' },\n    { value: 400, symbol: 'cd' },\n    { value: 100, symbol: 'c' },\n    { value: 90, symbol: 'xc' },\n    { value: 50, symbol: 'l' },\n    { value: 40, symbol: 'xl' },\n    { value: 10, symbol: 'x' },\n    { value: 9, symbol: 'ix' },\n    { value: 5, symbol: 'v' },\n    { value: 4, symbol: 'iv' },\n    { value: 1, symbol: 'i' },\n  ];\n  let result = '';\n\n  for (const { value, symbol } of numerals) {\n    while (number >= value) {\n      result += symbol;\n      number -= value;\n    }\n  }\n\n  return result.toLowerCase();\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number) : boolean  {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n           Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n           Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2)\n}"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function(s: string): string {\n  const arr = s.split(\"\");\n  const reversed = arr.map(char => {\n    if(/[a-zA-Z]/.test(char)) {\n      return char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      return char;\n    }\n  });\n  if(/[a-zA-Z]/.test(s)) {\n    return reversed.join(\"\");\n  } else {\n    return reversed.reverse().join(\"\");\n  }\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n  return [...s].map(c => {\n    if(/[a-zA-Z]/.test(c)) {\n      return c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n    } else {\n      return c;\n    }\n  }).reverse().join('');\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function (text: string) : any {\n  if (text === '') {\n    return null;\n  } else {\n    return crypto.createHash('md5').update(text).digest('hex');\n  }\n}"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function (text: string) : any {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n  const evenDigits: Array<number> = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      evenDigits.push(i);\n    }\n  }\n\n  return evenDigits.sort((a, b) => a - b);\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function(a: number, b: number): Array<number> {\n  const result: Array<number> = [];\n  const min = Math.min(a, b);\n  const max = Math.max(a, b);\n\n  for (let i = min; i <= max; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result.reverse();\n};"}

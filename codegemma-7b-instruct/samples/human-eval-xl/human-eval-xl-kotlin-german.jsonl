{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0\n    for (operation in operations) {\n        when (operation) {\n            is Int -> {\n                balance += operation\n                if (balance < 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Any>): List<Int> {\n    var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        when (number) {\n            is Int -> {\n                sum += number\n                product *= number\n            }\n        }\n    }\n\n    return listOf(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    val result = StringBuilder()\n    for (i in 0 until a.length) {\n        result.append(if (a[i] == b[i]) '0' else '1')\n    }\n    return result.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<Any>): String? {\n    if (strings.isEmpty()) {\n        return null\n    }\n\n    var longest = \"\"\n    var maxLength = 0\n\n    for (str in strings) {\n        if (str is String && str.length > maxLength) {\n            longest = str\n            maxLength = str.length\n        }\n    }\n\n    return longest\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a : Int, b : Int) : Int {\n    var remainder = 1\n    var divisor = 2\n    while (remainder != 0) {\n        remainder = a % divisor\n        if (remainder == 0 && b % divisor == 0) {\n            return divisor\n        }\n        divisor++\n    }\n    return 1\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numberMap = mapOf(\n        \"null\" to 0,\n        \"eins\" to 1,\n        \"zwei\" to 2,\n        \"drei\" to 3,\n        \"vier\" to 4,\n        \"f\u00fcnf\" to 5,\n        \"sechs\" to 6,\n        \"sieben\" to 7,\n        \"acht\" to 8,\n        \"neun\" to 9\n    )\n\n    val numberList = numbers.split(\" \").map { numberMap[it]!! }.sorted()\n    return numberList.joinToString(\" \") { numberMap.entries.find { it.value == it }!!.key }\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val min = numbers.minOrNull()!!\n    val max = numbers.maxOrNull()!!\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map {\n        if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase()\n    }.joinToString(\"\")\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Any> {\n    return l.filter { it is Int && it > 0 }\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.distinct().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2 until n) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun isFibonacci(n: Int): Boolean {\n    var a = 0\n    var b = 1\n    while (b < n) {\n        val c = a + b\n        a = b\n        b = c\n        if (b == n) return true\n    }\n    return false\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var i = 2\n    while (count < n) {\n        if (isPrime(i) && isFibonacci(i)) {\n            count++\n            if (count == n) return i\n        }\n        i++\n    }\n    return -1\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    val set = HashSet<Int>()\n\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            val sum = l[i] + l[j]\n            if (set.contains(-sum)) {\n                return true\n            }\n            set.add(sum)\n        }\n    }\n\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val set = HashSet<Int>()\n    for (num in l) {\n        if (set.contains(-num)) {\n            return true\n        }\n        set.add(num)\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    val fibs = IntArray(n + 1)\n    fibs[0] = 0\n    fibs[1] = 0\n    fibs[2] = 2\n    fibs[3] = 0\n\n    for (i in 4 until n + 1) {\n        fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i - 3] + fibs[i - 4]\n    }\n\n    return fibs[n]\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0) {\n        (sortedList[size / 2] + sortedList[size / 2 - 1]) / 2.0\n    } else {\n        sortedList[size / 2]\n    }\n}\n</end_of_turn>"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    return text.filter { it !in vowels }\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l : List<Int>, t : Int) : Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "fun add(x : Int, y : Int) : Int {\n    return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0 : String, s1 : String) : Boolean {\n    val map = mutableMapOf<Char, Int>()\n\n    for (c in s0) {\n        map[c] = map.getOrDefault(c, 0) + 1\n    }\n\n    for (c in s1) {\n        if (map.containsKey(c)) {\n            map[c] = map[c]!! - 1\n        } else {\n            return false\n        }\n    }\n\n    for (count in map.values) {\n        if (count != 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for (i in 2..n) {\n        c = a + b\n        a = b\n        b = c\n    }\n    return c\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Any>): List<Any> {\n    return l1.intersect(l2.filterIsInstance<Int>()).sorted()\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n : Int) : Int {\n    var factor = 2\n    var maxFactor = 0\n\n    while (factor * factor <= n) {\n        while (n % factor == 0) {\n            maxFactor = factor\n            n /= factor\n        }\n        factor++\n    }\n\n    if (n > maxFactor) {\n        maxFactor = n\n    }\n\n    return maxFactor\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs : List<Int>) : List<Any> {\n    return xs.mapIndexed { index, x ->\n        if (index == 0) {\n            0\n        } else {\n            x * xs[index - 1]\n        }\n    }.drop(1)\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n <= 2) return n\n    var a = 0\n    var b = 0\n    var c = 1\n    for (i in 3..n) {\n        val next = a + b + c\n        a = b\n        b = c\n        c = next\n    }\n    return c\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    val yPosition = s.length - 1\n    return s.count { it in vowels || (it == 'y' && it == s[yPosition]) }\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst : List<Int>) : Int {\n    val map = mutableMapOf<Int, Int>()\n    for (num in lst) {\n        map[num] = map.getOrDefault(num, 0) + 1\n    }\n    for (entry in map) {\n        if (entry.key > 0 && entry.value >= entry.key) {\n            return entry.key\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "fun triangleArea(a: Int, b: Int, c: Int): Any {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2\n        return String.format(\"%.2f\", Math.sqrt(s * (s - a) * (s - b) * (s - c)))\n    } else {\n        return -1\n    }\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q : List<Int>, w : Int) : Boolean {\n    return isPalindrome(q) && q.sum() <= w\n}\n\nfun isPalindrome(q : List<Int>) : Boolean {\n    val size = q.size\n    for (i in 0 until size / 2) {\n        if (q[i] != q[size - i - 1]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    if (a < 2) return false\n\n    var divisor = 2\n    var product = 1\n\n    while (divisor <= a) {\n        if (a % divisor == 0) {\n            product *= divisor\n\n            if (product > a) return false\n        }\n\n        divisor++\n    }\n\n    return product == a\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    val binary = StringBuilder()\n\n    var number = decimal\n    while (number > 0) {\n        binary.insert(0, number % 2)\n        number /= 2\n    }\n\n    return \"db${binary}db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Any>): List<String> {\n    val letterGrades = mutableListOf<String>()\n\n    for (grade in grades) {\n        when (grade) {\n            in 4.0..5.0 -> letterGrades.add(\"A+\")\n            in 3.7..3.9 -> letterGrades.add(\"A\")\n            in 3.3..3.6 -> letterGrades.add(\"A-\")\n            in 3.0..3.2 -> letterGrades.add(\"B+\")\n            in 2.7..2.9 -> letterGrades.add(\"B\")\n            in 2.3..2.6 -> letterGrades.add(\"B-\")\n            in 2.0..2.2 -> letterGrades.add(\"C+\")\n            in 1.7..1.9 -> letterGrades.add(\"C\")\n            in 1.3..1.6 -> letterGrades.add(\"C-\")\n            in 1.0..1.2 -> letterGrades.add(\"D+\")\n            in 0.7..0.9 -> letterGrades.add(\"D\")\n            in 0.0..0.6 -> letterGrades.add(\"D-\")\n            else -> letterGrades.add(\"E\")\n        }\n    }\n\n    return letterGrades\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n\n    if (length <= 1) {\n        return false\n    }\n\n    for (i in 2 until length) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    var sum = 0\n    var num = n\n\n    while (num > 0) {\n        sum += num % 2\n        num /= 2\n    }\n\n    return sum.toString(2)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst : List<Any>, x : Int) : List<Any> {\n    val result = mutableListOf<Any>()\n    for ((i, row) in lst.withIndex()) {\n        if (row is List<*>) {\n            for ((j, element) in row.withIndex()) {\n                if (element == x) {\n                    result.add(Pair(i, j))\n                }\n            }\n        }\n    }\n    result.sortBy { it.first }\n    result.sortByDescending { it.second }\n    return result\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst : List<Any>) : Int? {\n    if (lst.size < 2) return null\n\n    var min = lst.minOrNull()!!\n    var min2 = Int.MAX_VALUE\n\n    for (num in lst) {\n        if (num > min && num < min2) {\n            min2 = num as Int\n        }\n    }\n\n    return if (min2 == Int.MAX_VALUE) null else min2\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    val sentences = s.split(Regex(\"[.!?]\"))\n    return sentences.count { it.startsWith(\"Ich\") }\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun skjkasdkd(lst : List<Int>) : Int {\n    val primes = lst.filter { isPrime(it) }\n    val maxPrime = primes.maxOrNull() ?: 0\n    return sumOfDigits(maxPrime)\n}\n\nfun isPrime(number: Int): Boolean {\n    if (number < 2) return false\n    for (i in 2 until number) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun sumOfDigits(number: Int): Int {\n    var sum = 0\n    var n = number\n    while (n > 0) {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    if (dict.isEmpty()) return false\n\n    val firstKeyCase = dict.keys.first().toString().uppercase()\n    return dict.keys.all { it.toString().uppercase() == firstKeyCase }\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    val floor = number.toInt()\n    val ceiling = floor + 1\n\n    return if (number - floor >= ceiling - number) ceiling else floor\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf(n)\n    var current = n\n    while (true) {\n        current = if (current % 2 == 0) current + 1 else current - 1\n        result.add(current)\n        if (current == 1) break\n    }\n    return result\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    return s.split(Regex(\" *, *\"))\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    var i = y\n    while (i >= x) {\n        if (i % 2 == 0) {\n            return i\n        }\n        i--\n    }\n    return -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) {\n        return -1\n    }\n\n    val sum = (n..m).sum()\n    val average = (sum.toFloat() / (m - n + 1)).roundToInt()\n    return average.toString(2)\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    return (1..n).map { i ->\n        if (i % 2 == 0) {\n            factorial(i)\n        } else {\n            sum(i)\n        }\n    }\n}\n\nprivate fun factorial(n: Int): Int {\n    return (1..n).reduce { acc, i -> acc * i }\n}\n\nprivate fun sum(n: Int): Int {\n    return (1..n).sum()\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    for (num in 1..n) {\n        val reversed = num.toString().reversed().toInt()\n\n        if (num == reversed) {\n            if (num % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return listOf(evenCount, oddCount)\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Any>): Boolean {\n    if (arr.isEmpty()) return true\n\n    val n = arr.size\n    val sortedArray = arr.sorted()\n\n    var count = 0\n    var current = arr[0]\n\n    for (i in 1 until n) {\n        if (arr[i] < current) {\n            count++\n            current = arr[i]\n        }\n    }\n\n    return count <= n - 1 - sortedArray[n - 1]\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    var countOdd = 0\n    for (num in lst1) {\n        if (num % 2 != 0) {\n            countOdd++\n        }\n    }\n\n    if (countOdd > lst2.size) {\n        return \"NO\"\n    }\n\n    return \"YES\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    var result = s.filterNot { it in c }\n    val isPalindrome = result == result.reversed()\n    return listOf(result, isPalindrome)\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    val rows = grid.size\n    val cols = grid[0].size\n    var filled = 0\n    var turns = 0\n\n    while (filled < rows * cols) {\n        for (i in 0 until rows) {\n            for (j in 0 until cols) {\n                if (grid[i][j] == 1 && filled < capacity) {\n                    filled++\n                    grid[i][j] = 0\n                }\n            }\n        }\n        turns++\n    }\n\n    return turns\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    if (s.isEmpty()) return emptyList()\n\n    val words = s.split(\" \")\n    val result = mutableListOf<String>()\n\n    for (word in words) {\n        var consonants = 0\n        for (c in word) {\n            if (c.toLowerCase() in listOf('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')) {\n                consonants++\n            }\n        }\n        if (consonants == n) {\n            result.add(word)\n        }\n    }\n\n    return result\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr : List<Int>, k : Int) : List<Int> {\n    val sortedArr = arr.sortedDescending()\n    return sortedArr.subList(0, k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr : List<Int>, k : Int) : Int {\n    return arr.subList(0, k).sumOf { if (it in 10..99) it else 0 }\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val (start1, end1) = interval1\n    val (start2, end2) = interval2\n\n    // \u00dcberpr\u00fcfen, ob sich die Intervalle \u00fcberschneiden\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\"\n    }\n\n    // Berechnen Sie die L\u00e4nge des Schnitts\n    val length = Math.min(end1, end2) - Math.max(start1, start2) + 1\n\n    // \u00dcberpr\u00fcfen Sie, ob die L\u00e4nge eine Primzahl ist\n    if (isPrime(length)) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) {\n        return false\n    }\n    for (i in 2 until number) {\n        if (number % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): List<Any> {\n    val result = mutableListOf<Any>()\n    for (i in 0..n) {\n        result.add(calculateTribonacci(i))\n    }\n    return result\n}\n\nprivate fun calculateTribonacci(n: Int): Any {\n    return when (n) {\n        0 -> 0\n        1 -> 3\n        2 -> 1\n        else -> {\n            if (n % 2 == 0) {\n                1 + n / 2\n            } else {\n                val tri1 = calculateTribonacci(n - 1)\n                val tri2 = calculateTribonacci(n - 2)\n                val tri3 = calculateTribonacci(n + 1)\n                tri1 + tri2 + tri3\n            }\n        }\n    }\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var num = n\n\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) {\n            product *= digit\n        }\n        num /= 10\n    }\n\n    return product\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var count = 0\n\n    for (char in string) {\n        if (char == '[') {\n            count++\n        } else if (char == ']') {\n            count--\n        }\n\n        if (count < 0) {\n            return false\n        }\n    }\n\n    return count == 0\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst : List<Any>) : Int {\n    return lst.map { Math.ceil(it as Double).toInt() }\n            .map { it * it }\n            .sum().toInt()\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt : String) : Boolean {\n    val lastChar = txt.last()\n    val isLetter = lastChar.isLetter()\n    val isNotPartOfWord = txt.trimEnd().length != txt.length\n    return isLetter && isNotPartOfWord\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr : List<Any>) : Int {\n    for (i in 1 until arr.size) {\n        if (arr[i] <= arr[i - 1]) {\n            return i - 1\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n\n    for (item in lst) {\n        when (item) {\n            is Int -> {\n                if (item < 0) {\n                    largestNegative = maxOf(largestNegative ?: item, item)\n                } else if (item > 0) {\n                    smallestPositive = minOf(smallestPositive ?: item, item)\n                }\n            }\n        }\n    }\n\n    return listOf(largestNegative, smallestPositive)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n : Int) : Int {\n    if (n <= 0) {\n        return 1\n    } else {\n        return n * specialFactorial(n - 1)\n    }\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    val result = mutableListOf<String>()\n\n    for (word in words) {\n        if (isPrim(word.length)) {\n            result.add(word)\n        }\n    }\n\n    return result.joinToString(\" \")\n}\n\nfun isPrim(number: Int): Boolean {\n    if (number < 2) {\n        return false\n    }\n\n    for (i in 2 until number) {\n        if (number % i == 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    val numX = x.split(\"/\").map { it.toInt() }\n    val numN = n.split(\"/\").map { it.toInt() }\n\n    val result = numX[0] * numN[0] / numX[1] * numN[1]\n\n    return result % 1 == 0.0\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.sortedWith(compareBy({ it.toString().sumOf { it.digitToInt() } }, { nums.indexOf(it) }))\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    return nums.count { num ->\n        num is Int && num > 10 && num.toString().first().isDigit() && num.toString().last().isDigit() &&\n                listOf('1', '3', '5', '7', '9').contains(num.toString().first()) &&\n                listOf('1', '3', '5', '7', '9').contains(num.toString().last())\n    }\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n : Int) : Int {\n    val a = IntArray(n) { i -> i * i - i + 1 }\n    var count = 0\n\n    for (i in 0 until n) {\n        for (j in i + 1 until n) {\n            for (k in j + 1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if (!planets.contains(planet1) || !planets.contains(planet2)) {\n        return emptyList()\n    }\n\n    val planet1Index = planets.indexOf(planet1)\n    val planet2Index = planets.indexOf(planet2)\n\n    return planets.subList(Math.min(planet1Index, planet2Index), Math.max(planet1Index, planet2Index) + 1)\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun xOrY(n : Int, x : Int, y : Int) : Int {\n    var isPrime = true\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            isPrime = false\n            break\n        }\n    }\n    return if (isPrime) x else y\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filterIsInstance<Int>()\n        .filter { it % 2 != 0 && it > 0 }\n        .map { it * it }\n        .sum()\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className : String, extensions : List<String>) : String {\n    val extensionStrengths = extensions.map { extension ->\n        val capCount = extension.count { it.isUpperCase() }\n        val smCount = extension.count { it.isLowerCase() }\n        capCount - smCount to extension\n    }\n    val strongestExtension = extensionStrengths.maxByOrNull { it.first }?.second\n    return \"$className.$strongestExtension\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    val rotatedA = StringBuilder(a).reverse().toString()\n    return b in a || b in rotatedA\n}\n</end_of_turn>"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val romanNumerals = arrayOf(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\")\n    val arabicValues = arrayOf(1, 5, 10, 50, 100, 500, 1000)\n\n    val sb = StringBuilder()\n    var num = number\n\n    for (i in arabicValues.lastIndex downTo 0) {\n        while (num >= arabicValues[i]) {\n            sb.append(romanNumerals[i])\n            num -= arabicValues[i]\n        }\n    }\n\n    return sb.toString().lowercase()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a : Int, b : Int, c : Int) : Boolean {\n    return (a*a + b*b == c*c) || (b*b + c*c == a*a) || (c*c + a*a == b*b)\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    val sb = StringBuilder()\n    for (c in s) {\n        if (c.isLetter()) {\n            sb.append(if (c.isLowerCase()) c.toUpperCase() else c.toLowerCase())\n        } else {\n            sb.append(c)\n        }\n    }\n    return sb.reverse().toString()\n}\n</end_of_turn>"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.security.MessageDigest\n\nfun stringToMd5(text: String): String? {\n    return if (text.isEmpty()) {\n        null\n    } else {\n        val bytesOfText = text.toByteArray()\n        val md = MessageDigest.getInstance(\"MD5\")\n        val digest = md.digest(bytesOfText)\n        digest.joinToString(\"\") { \"%02x\".format(it) }\n    }\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    val start = Math.min(a, b)\n    val end = Math.max(a, b)\n\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n\n    return result\n}"}

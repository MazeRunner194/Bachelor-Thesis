{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n\n    open_parens = 0\n    for char in paren_string:\n        if char == '(':\n            open_parens += 1\n            current_group.append(char)\n        elif char == ')':\n            open_parens -= 1\n            current_group.append(char)\n            if open_parens == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "import statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculates the Mean Absolute Deviation (MAD) of a list of numbers.\n\n    Args:\n        numbers: A list of numbers.\n\n    Returns:\n        The Mean Absolute Deviation.\n    \"\"\"\n\n    # Calculate the mean of the numbers\n    mean = statistics.mean(numbers)\n\n    # Calculate the absolute difference between each number and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n\n    # Calculate the mean of the absolute differences\n    mad = statistics.mean(abs_diff)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    levels = []\n    current_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            levels.append(current_level)\n        elif char == ')':\n            current_level -= 1\n\n    return levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n\n    Args:\n        strings: A list of strings.\n        substring: The substring to filter by.\n\n    Returns:\n        A list of strings containing the given substring.\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    product = 1\n\n    for number in numbers:\n        total_sum += number\n        product *= number\n\n    return total_sum, product"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n    max_num = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        result.append(max_num)\n\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n\n    def find_palindrome_postfix(string):\n        for i in range(len(string) // 2, 0, -1):\n            if string[:i] == string[i - 1::-1]:\n                return string[:i]\n\n    palindrome_postfix = find_palindrome_postfix(string)\n    prefix = string[:string.index(palindrome_postfix)]\n    return string + prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    longest_len = len(longest_str)\n\n    for string in strings[1:]:\n        if len(string) > longest_len:\n            longest_str = string\n            longest_len = len(string)\n\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(i) for i in range(n + 1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string of musical notes in a special ASCII format and returns a list of integers\n    representing the number of beats each note lasts.\n    \"\"\"\n    beat_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    for note in music_string.split():\n        beats.extend([beat_duration[note]] * beat_duration[note])\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                   'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [number_dict[num] for num in numbers.split()]\n    num_list.sort()\n    return ' '.join([key for key, value in number_dict.items() if value in num_list])"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()  # Sort the numbers in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference\n    closest_pair = None\n\n    # Iterate over pairs of adjacent numbers\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    largest = n // 2\n    while largest > 0:\n        if n % largest == 0:\n            return largest\n        largest -= 1\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n\n    if n > 1:\n        factors.append(n)\n\n    factor_counts = [factors.count(factor) for factor in set(factors)]\n    return factor_counts"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/28", "completion": "strings = [\"a\", \"b\", \"c\"]\nresult = concatenate(strings)\nprint(result)  # Output: abc"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "The function is correctly written and works as intended. It correctly identifies prime numbers within the given test cases.\n\nHere's a breakdown of what the function does:\n\n- The function takes a single argument, `n`, which is the number to be tested for primality.\n\n- It returns `True` if `n` is prime and `False` if it is not.\n\n- The function works by iterating from 2 up to the square root of `n`. If `n` is divisible by any number in this range, it is not prime. Otherwise, it is prime.\n\n- The complexity of the function is O(sqrt(n)), which makes it efficient for testing primality.\n\nOverall, the function is well-written and functional. It is ready to use for checking primality in various contexts."}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    assert len(xs) % 2 == 0, \"Number of coefficients must be even.\"\n    largest_index = len(xs) // 2\n    a = xs[largest_index]\n    b = xs[largest_index - 1]\n    c = xs[largest_index - 2]\n    return round((-b + math.sqrt(b**2 - 4*a*c))/(2*a), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Create a new list with the values of l at the indicies that are not divisible by three\n    l_prime = [l[i] for i in range(len(l)) if i % 3 != 0]\n\n    # Sort the new list\n    l_prime.sort()\n\n    # Create a new list l' with the same values as l, but with the values at the indicies that are divisible by three replaced with the values of l_prime\n    l_prime_index = [i for i in range(len(l)) if i % 3 == 0]\n    l_prime_values = [l_prime[i] for i in range(len(l_prime))]\n    l_prime = [l_prime_values[i] if i in l_prime_index else l[i] for i in range(len(l))]\n\n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\nunique_l = unique(l)\nprint(unique_l)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_sorted = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [x if i % 2 else even_sorted.pop(0) for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "s = \"abcdefghijklmnopqrstuvwxyz\"\nencoded_s = encode_cyclic(s)\nprint(encoded_s)  # Output: efghijklmnopqrstuvwxzyabc"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    fib_nums = [0, 1]\n    while len(fib_nums) <= n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    for num in fib_nums[2:]:\n        if is_prime(num):\n            return num"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            complement = -l[i] - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[i])\n            seen.add(l[j])\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n    return ''.join(reversed(result))"}
{"task_id": "HumanEval/45", "completion": "area = (1/2) * base * height"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 4):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2"}
{"task_id": "HumanEval/48", "completion": "The provided code correctly checks if a given string is a palindrome. Here's a breakdown of how it works:\n\n**Function Definition:**\n\n* The function `is_palindrome` takes a single argument, `text`, which is the string to be checked.\n\n**Palindrome Check:**\n\n* Inside the function, the code iterates through the string from the beginning to the end and simultaneously iterates in reverse order from the end to the beginning.\n* If the characters at the two ends of the string are not equal, the function returns `False`, indicating that the string is not a palindrome.\n* If the loop completes without finding any mismatches, the function returns `True`, indicating that the string is a palindrome.\n\n**Test Cases:**\n\n* The provided test cases demonstrate how the function works correctly for various input scenarios, including empty strings, palindromes with odd and even lengths, and non-palindromes.\n\n**Additional Notes:**\n\n* The code correctly handles empty strings, which are considered palindromes.\n* The time complexity of the algorithm is O(n), where n is the length of the string.\n* The code is well-structured and easy to understand.\n\n**Suggestions:**\n\n* The code could be further optimized by using built-in functions like `reversed()` or slicing to simplify the palindrome check.\n* Consider adding more comprehensive test cases to cover various edge cases and scenarios."}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([ch for ch in text if ch not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')  # True\nsame_chars('abcd', 'dddddddabc')  # True\nsame_chars('dddddddabc', 'abcd')  # True\nsame_chars('eabcd', 'dddddddabc')  # False\nsame_chars('abcd', 'dddddddabce')  # False\nsame_chars('eabcdzzzz', 'dddzzzzzzzddddabc')  # False"}
{"task_id": "HumanEval/55", "completion": "if n <= 1:\n    return n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    increasing = l[1] > l[0]\n    for i in range(2, len(l)):\n        if increasing and l[i] < l[i - 1]:\n            return False\n        if not increasing and l[i] > l[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    limit = int(math.sqrt(n)) + 1\n    factor = 2\n\n    while factor <= limit:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n\n    return n"}
{"task_id": "HumanEval/60", "completion": "S = n(a + l) / 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n</end_of_turn>"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    fib_nums = [0] * (n + 1)\n    fib_nums[0] = 0\n    fib_nums[1] = 0\n    fib_nums[2] = 1\n    for i in range(3, n + 1):\n        fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2] + fib_nums[i - 3]\n    return fib_nums[n]"}
{"task_id": "HumanEval/64", "completion": "Add more test cases to cover edge cases, such as:\n- Empty string\n- String with all vowels\n- String with 'y' at the end\n- String with uppercase vowels"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    str_x = str(x)\n    shift %= len(str_x)\n    return str_x[len(str_x) - shift:] + str_x[:len(str_x) - shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apple_count = int(s.split(\" apples\")[0])\n    orange_count = int(s.split(\" oranges\")[0].split(\" and\")[1])\n    mango_count = n - apple_count - orange_count\n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = float('inf')\n    min_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_index = i\n\n    if min_index == -1:\n        return []\n    else:\n        return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    sorted_list = []\n    min_val = min(lst)\n    max_val = max(lst)\n\n    while lst:\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n\n        if lst:\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n\n    return sorted_list"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    return is_palindrome(q) and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case: single element\n    for i in range(n):\n        dp[i][i] = 0\n\n    # Fill the table diagonally\n    for i in range(n - 1):\n        dp[i][i + 1] = 1 if arr[i] != arr[i + 1] else 0\n\n    # Fill the remaining cells\n    for i in range(n - 3, -1, -1):\n        for j in range(i + 2, n):\n            dp[i][j] = min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (1 if arr[i] != arr[j] else 0))\n\n    return dp[0][-1]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    if total1 == total2:\n        return lst1\n    elif total1 < total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factor = 2\n    count = 0\n\n    while factor <= a:\n        if is_prime(factor):\n            if a % factor == 0:\n                count += 1\n                a /= factor\n        factor += 1\n\n    return count == 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Checks if x is a simple power of n.\n\n    Args:\n      x: The number to check.\n      n: The base of the potential power.\n\n    Returns:\n      True if x is a simple power of n, False otherwise.\n    \"\"\"\n    return x == n ** int(x / n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**1/3 == int(a**1/3)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes.\n\n    Args:\n        num (str): A hexadecimal number as a string.\n\n    Returns:\n        int: The number of hexadecimal digits that are primes.\n    \"\"\"\n\n    # Create a set of prime numbers up to 13.\n    primes = set([2, 3, 5, 7, 11, 13])\n\n    # Convert the hexadecimal number to a list of digits.\n    digits = [digit for digit in num.upper()]\n\n    # Count the number of hexadecimal digits that are primes.\n    count = 0\n    for digit in digits:\n        if digit in 'ABDE':\n            value = 10 + ord(digit) - ord('A')\n        else:\n            value = int(digit)\n\n        if value in primes:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        remainder = decimal % 2\n        binary.append(str(remainder))\n        decimal = decimal // 2\n    binary.reverse()\n    return \"db\" + \"\".join(binary) + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Count numbers that start with 1\n    starts_with_one = 9 * (10**(n - 1))\n\n    # Count numbers that end with 1\n    ends_with_one = (10**n) - 1\n\n    # Return the sum of both counts\n    return starts_with_one + ends_with_one"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_str = bin(N)[2:]  # Convert N to binary string without the leading '0b'\n    total_sum = 0\n    for digit in binary_str:\n        total_sum += int(digit)  # Calculate the sum of digits\n    return binary_str if total_sum == 1 else solve(total_sum)  # Recursively call solve if sum is not 1"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 and x % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst or not any(lst):\n        return []\n\n    coordinates = []\n    for i, row in enumerate(lst):\n        indices = [j for j, num in enumerate(row) if num == x]\n        coordinates.extend([(i, j) for j in indices])\n\n    coordinates.sort(key=lambda c: (c[0], -c[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += chr(((ord(char) - ord('a') + (2*2)) % 26) + ord('a'))\n            else:\n                encrypted += chr(((ord(char) - ord('A') + (2*2)) % 26) + ord('A'))\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string.\n    \"\"\"\n    sentences = S.split('.|?|!')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (int(x) == int(y) + int(z) or int(y) == int(x) + int(z) or int(z) == int(x) + int(y))"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    vowels = set(\"aeiouAEIOU\")\n\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n\n            if char in vowels:\n                index = \"aeiouAEIOU\".index(char)\n                encoded_message += \"aeiouAEIOU\"[(index + 2) % 10]\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\ndef largest_prime_sum(lst):\n    largest_prime = max(lst, key=is_prime)\n    if is_prime(largest_prime):\n        return sum_of_digits(largest_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    first_key_case = dict[next(iter(dict))].islower()\n    for key in dict:\n        if first_key_case != dict[key].islower():\n            return False\n\n    return True"}
{"task_id": "HumanEval/96", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value > 0:\n        return int(round(value))\n    else:\n        return -int(round(-value))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n - 1\n        levels.append(n)\n    levels.reverse()\n    return levels\n</start_of_turn>"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(',') + s.split(' ')\n    return [word.strip() for word in words]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = [num for num in range(x, y + 1) if num % 2 == 0]\n    return even_nums[-1] if even_nums else -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m + 1):\n            total += i\n            count += 1\n        average = total / count\n        rounded_average = round(average)\n        binary_average = bin(rounded_average)[2:]\n        return binary_average"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digit = True\n                break\n        if not even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Sort the integers between 1 and 9 inclusive\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    valid_nums.sort()\n\n    # Reverse the array\n    valid_nums.reverse()\n\n    # Replace each digit by its corresponding name\n    result = [num_to_word(num) for num in valid_nums]\n\n    return result\n\n# Helper function to convert a digit to its corresponding name\ndef num_to_word(num):\n    words = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    return words[num]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        str_i = str(i)\n        if str_i == str_i[::-1]:\n            if int(str_i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        total_sum = 0\n        is_negative = False\n        if num < 0:\n            is_negative = True\n            num = abs(num)\n        while num > 0:\n            digit = num % 10\n            total_sum += digit\n            num //= 10\n        if total_sum > 0 and not is_negative:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_num = min(arr)\n    min_index = arr.index(min_num)\n\n    # Check if the minimum element is already at the beginning of the array\n    if min_index == 0:\n        return True\n\n    # Perform right shift operations until the minimum element is at the beginning\n    for i in range(min_index):\n        arr.append(arr.pop(0))\n\n    # Check if the array is now sorted in non-decreasing order\n    return arr == sorted(arr)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make lst1 a list of only even numbers.\n\n    Args:\n        lst1: The first list of numbers.\n        lst2: The second list of numbers.\n\n    Returns:\n        \"YES\" if it is possible to exchange elements, \"NO\" otherwise.\n    \"\"\"\n\n    # Calculate the number of odd elements in lst1.\n    odd_count = sum(num % 2 for num in lst1)\n\n    # If all elements in lst1 are even, return \"YES\".\n    if odd_count == 0:\n        return \"YES\"\n\n    # If there are more odd elements in lst1 than lst2, return \"NO\".\n    if odd_count > len(lst2):\n        return \"NO\"\n\n    # Exchange elements between lst1 and lst2 until lst1 contains only even numbers.\n    while odd_count > 0:\n        # Find the first odd element in lst1.\n        odd_index = next((i for i, num in enumerate(lst1) if num % 2), None)\n\n        # Find the first even element in lst2.\n        even_index = next((i for i, num in enumerate(lst2) if num % 2 == 0), None)\n\n        # If there are no even elements in lst2, return \"NO\".\n        if even_index is None:\n            return \"NO\"\n\n        # Exchange the odd element in lst1 with the even element in lst2.\n        lst1[odd_index], lst2[even_index] = lst2[even_index], lst1[odd_index]\n\n        # Decrement the odd count.\n        odd_count -= 1\n\n    # All elements in lst1 are even, return \"YES\".\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n\n    counter = Counter(test.split())\n    max_count = max(counter.values())\n    return {key: count for key, count in counter.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    return [f\"the number of odd elements {sum(int(digit) % 2 for digit in string)}n the str{len(string)}ng {string} of the {len(lst)}nput.\" for string in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(row.count(1) for row in grid)\n\n    # Calculate the maximum number of times we can lower the bucket\n    max_fills = total_water // capacity\n\n    # Return the maximum number of times we can lower the bucket\n    return max_fills"}
{"task_id": "HumanEval/116", "completion": "def count_ones(num):\n    return bin(num).count(\"1\")\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda num: (count_ones(num), num))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s\n    that contain exactly n consonants, in order these words appear in the string s.\n    \"\"\"\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in consonants and word[i + 1] in consonants and word[i + 2] in vowels:\n            return word[i + 2]\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    heapq.heapify(arr)\n    return heapq.nlargest(k, arr)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] < 100:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_seq = [n]\n    odd_nums = []\n\n    while collatz_seq[-1] != 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(collatz_seq[-1] // 2)\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n\n    for num in collatz_seq:\n        if num % 2 != 0:\n            odd_nums.append(num)\n\n    return sorted(odd_nums)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    \"\"\"\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date string is in the correct format\n    if not re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date):\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if day < 1 or day > 31 if month in [1, 3, 5, 7, 8, 10, 12] else (day < 1 or day > 30 if month in [4, 6, 9, 11] else (day < 1 or day > 29)):\n        return False\n\n    # The date is valid\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if txt[i].islower() and i % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    seen = set()\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i - 1])\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Find the intersection interval\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # Calculate the length of the intersection interval\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the intersection length is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    prod = 1\n    signs = []\n\n    for num in arr:\n        signs.append(1 if num > 0 else -1 if num < 0 else 0)\n        prod *= num\n\n    return sum(abs(num) * sign for num, sign in zip(arr, signs))"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    visited = set()\n    min_heap = [(0, 0, 0)]  # Value, row, col\n\n    while min_heap:\n        val, row, col = heappop(min_heap)\n\n        if (row, col) in visited:\n            continue\n\n        visited.add((row, col))\n\n        if len(visited) == k:\n            return [val for _, _, val in visited]\n\n        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_row, new_col = row + dr, col + dc\n\n            if 0 <= new_row < N and 0 <= new_col < N:\n                heappush(min_heap, (grid[new_row][new_col], new_row, new_col))"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Returns a list of the first n + 1 numbers of the Tribonacci sequence.\n\n    Args:\n        n: The number of terms to generate.\n\n    Returns:\n        A list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n\n    if n <= 0:\n        return []\n\n    tri_sequence = [1] * (n + 1)\n\n    if n >= 2:\n        tri_sequence[2] = 3\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tri_sequence[i] = 1 + i / 2\n        else:\n            tri_sequence[i] = tri_sequence[i - 1] + tri_sequence[i - 2] + tri_sequence[i - 3]\n\n    return tri_sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth > 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    return sum([int(x)**2 for x in map(ceil, lst)])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n\n    words = txt.split()\n    last_word = words[-1]\n    return last_word[-1].isalpha() and last_word[-1] not in \" \""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Finds the largest index of an element that is not greater than or equal to\n    the element immediately preceding it.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The largest index of an element that is not greater than or equal to\n        the element immediately preceding it, or -1 if no such element exists.\n    \"\"\"\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n\n    if not negative_nums:\n        a = None\n    else:\n        a = max(negative_nums)\n\n    if not positive_nums:\n        b = None\n    else:\n        b = min(positive_nums)\n\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings to numbers if necessary\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    # Compare the values and return the larger one\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "from itertools import combinations\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n\n    def sum_even(nums):\n        return sum(nums) % 2 == 0 and len(nums) == 4\n\n    return any(sum_even(comb) for comb in combinations(range(2, n + 2, 2), 4))"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    dot_index = file_name.find('.')\n    if dot_index == -1:\n        return 'No'\n\n    prefix = file_name[:dot_index]\n    suffix = file_name[dot_index + 1:]\n\n    if len(file_name) > 3 and file_name.isdigit():\n        return 'No'\n\n    if len(prefix) == 0 or not prefix.isalpha():\n        return 'No'\n\n    if suffix not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    result = 0\n\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n\n    return result"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n.\n\n    Args:\n        x: The first fraction as a string in the format <numerator>/<denominator>.\n        n: The second fraction as a string in the format <numerator>/<denominator>.\n\n    Returns:\n        True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n\n    x_fraction = Fraction(int(x.split(\"/\")[0]), int(x.split(\"/\")[1]))\n    n_fraction = Fraction(int(n.split(\"/\")[0]), int(n.split(\"/\")[1]))\n\n    result = x_fraction * n_fraction\n\n    return result.numerator % result.denominator == 0"}
{"task_id": "HumanEval/145", "completion": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(abs(num)))\n\ndef order_by_points(nums):\n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return planets[index1+1:index2]"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the remaining strings by length and alphabetically\n    even_length_strings.sort(key=lambda s: (len(s), s))\n\n    return even_length_strings"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    Returns the value of x if n is prime, and y otherwise.\n\n    Args:\n        n (int): The number to check.\n        x (int): The value to return if n is prime.\n        y (int): The value to return if n is not prime.\n\n    Returns:\n        int: x if n is prime, y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    \"\"\"\n    Compares a person's guesses to the actual scores in a set of matches.\n\n    Args:\n        scores: An array of actual scores.\n        guesses: An array of the person's guesses.\n\n    Returns:\n        An array of the same length as scores and guesses, where each element\n        represents the difference between the score and the guess.\n    \"\"\"\n\n    return [abs(score - guess) for score, guess in zip(scores, guesses)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: (x.count('A') - x.count('a'), extensions.index(x)), reverse=True)\n    strongest_extension = extensions[0]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_values = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n\n    result = []\n    for value, symbol in roman_values:\n        while number >= value:\n            result.append(symbol)\n            number -= value\n\n    return ''.join(result).lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n\n    # Check if the triangle is valid\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_count = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count or (len(unique_chars) == max_count and word < max_word):\n            max_count = len(unique_chars)\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if total_eaten < need:\n        eaten = remaining\n        left = 0\n    else:\n        eaten = need\n        left = total_eaten - need\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    expression = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += operand[i+1]\n        elif operator[i] == '-':\n            expression -= operand[i+1]\n        elif operator[i] == '*':\n            expression *= operand[i+1]\n        elif operator[i] == '//':\n            expression //= operand[i+1]\n        elif operator[i] == '**':\n            expression **= operand[i+1]\n\n    return expression"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    even_digits = []\n\n    # Ensure a and b are in ascending order\n    if b < a:\n        a, b = b, a\n\n    # Iterate through the numbers between a and b\n    for i in range(a, b + 1):\n        # Check if the number is even\n        if i % 2 == 0:\n            even_digits.append(i)\n\n    return even_digits"}

{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "function separateParenGroups(parenstring) {\n  let result = [];\n  let currentGroup = '';\n  let balance = 0;\n\n  for (let char of parenstring) {\n    if (char === '(') {\n      balance++;\n      currentGroup += char;\n    } else if (char === ')') {\n      balance--;\n      currentGroup += char;\n      if (balance === 0) {\n        result.push(currentGroup);\n        currentGroup = '';\n      }\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n  return number % 1;\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n\n  for (const operation of operations) {\n    balance += operation;\n\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n  // Calculate the mean of the dataset\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n\n  // Calculate the absolute difference between each number and the mean\n  const absoluteDifferences = numbers.map(num => Math.abs(num - mean));\n\n  // Calculate the mean of the absolute differences\n  const mad = absoluteDifferences.reduce((sum, diff) => sum + diff, 0) / absoluteDifferences.length;\n\n  return mad;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimeter) {\n  const result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenstring) {\n  const levels = parenstring.match(/\\([^()]*\\)/g).map(str => {\n    return str.replace(/[()]/g, '').length;\n  });\n\n  return levels;\n}"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "function filterBySubstring(strings, substring) {\n  return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n  const result = [];\n  let currentMax = -Infinity;\n\n  for (const number of numbers) {\n    currentMax = Math.max(currentMax, number);\n    result.push(currentMax);\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(string) {\n  // Find the longest palindrome postfix of the supplied string\n  let palindromeEnd = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    let j = i;\n    let k = i;\n    while (j >= 0 && k < string.length && string[j] === string[k]) {\n      palindromeEnd = i;\n      j--;\n      k++;\n    }\n  }\n\n  // Append to the end of the string the reverse of the prefix that comes before the palindrome suffix\n  let prefix = string.substring(0, palindromeEnd + 1);\n  return prefix + prefix.split('').reverse().join('');\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "function stringXor(a, b) {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] === b[i] ? '0' : '1');\n  }\n  return result.join('');\n}"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return \"none\";\n  }\n\n  let longestString = strings[0];\n  let maxLength = longestString.length;\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      longestString = strings[i];\n      maxLength = longestString.length;\n    }\n  }\n\n  return longestString;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (b) {\n    const t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "function allPrefixes(string) {\n  const prefixes = [];\n  for (let i = 0; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n  return [...new Set(string.toLowerCase())].length;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicstring) {\n  const notes = musicstring.split(' ');\n  const beats = [];\n\n  for (const note of notes) {\n    switch (note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n    }\n  }\n\n  return beats;\n}"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(string, substring) {\n  let count = 0;\n  let index = 0;\n\n  while ((index = string.indexOf(substring, index)) !== -1) {\n    count++;\n    index += substring.length;\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  const numberArray = numbers.split(' ');\n  numberArray.sort((a, b) => numberMap[a] - numberMap[b]);\n\n  return numberArray.join(' ');\n}"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n  numbers.sort((a, b) => a - b); // Sort the numbers in ascending order\n\n  let closestElements = [numbers[0], numbers[1]]; // Initialize the closest elements\n\n  for (let i = 2; i < numbers.length; i++) {\n    const currentDifference = Math.abs(numbers[i] - numbers[i - 1]);\n    const closestDifference = Math.abs(closestElements[1] - closestElements[0]);\n\n    if (currentDifference < closestDifference) {\n      closestElements = [numbers[i - 1], numbers[i]];\n    }\n  }\n\n  return closestElements;\n}"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values) {\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "function strlen(string) {\n  return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n  const factors = [];\n  let divisor = 2;\n\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n\n  return factors;\n}"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n  const seen = new Set();\n  const result = [];\n\n  for (const number of numbers) {\n    if (!seen.has(number)) {\n      seen.add(number);\n      result.push(number);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(char => {\n    if (char.toLowerCase() === char) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n}"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "function concatenate(strings) {\n  return strings.join('');\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n  return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(num => num > 0);\n}\n</end_of_turn>"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n  const notDivisibleByThree = l.filter((_, i) => i % 3 !== 0);\n  const divisibleByThree = l.filter((_, i) => i % 3 === 0).sort();\n\n  return [...notDivisibleByThree, ...divisibleByThree];\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "def unique(l):\n    return list(set(l))"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n  return Math.max(...l);\n}"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n  let count = 0;\n\n  for (let i = 7; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      while (i > 0) {\n        if (i % 10 === 7) {\n          count++;\n        }\n        i = Math.floor(i / 10);\n      }\n    }\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n  const evenSorted = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  const oddElements = l.filter((_, i) => i % 2 !== 0);\n  return [...evenSorted, ...oddElements];\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let fib = [0, 1];\n  let count = 2;\n\n  while (count <= n) {\n    fib[count] = fib[count - 1] + fib[count - 2];\n    if (isPrime(fib[count])) {\n      if (count === n) {\n        return fib[count];\n      }\n      count++;\n    }\n  }\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum = l[i] + l[left] + l[right]\n            if sum == 0:\n                return True\n            elif sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n  // Initialize the number of collisions to 0.\n  let collisions = 0;\n\n  // Iterate over each pair of cars.\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      // If the cars are moving in opposite directions, they will collide.\n      if (i % 2 !== j % 2) {\n        collisions++;\n      }\n    }\n  }\n\n  // Return the number of collisions.\n  return collisions;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n  return l.map(x => x + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  const set = new Set();\n\n  for (const num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n\n  return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base) {\n  let result = \"\";\n  while (x > 0) {\n    const remainder = x % base;\n    result = (remainder + result);\n    x = Math.floor(x / base);\n  }\n  return result || \"0\";\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(a, h) {\n  return (a * h) / 2;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n  const arr = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]);\n  }\n  return arr[n];\n}"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "def median(l):\n    l.sort()  # Sort the list in ascending order\n    n = len(l)  # Get the length of the list\n    if n % 2 == 1:  # If the list has odd length\n        return l[n // 2]  # Return the middle element\n    else:  # If the list has even length\n        return (l[n // 2] + l[n // 2 - 1]) / 2  # Return the average of the two middle elements"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "function isPalindrome(text) {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n    let result = 1;\n    let base = n;\n\n    while (p > 0) {\n        if (p % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        p = Math.floor(p / 2);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "def belowThreshold(l, t):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  return new Set([...s0].sort()).join('') === new Set([...s1].sort()).join('');\n}"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) return n;\n  let a = 0, b = 1, c;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n  let count = 0;\n\n  for (let char of brackets) {\n    if (char === '<') {\n      count++;\n    } else if (char === '>') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "function monotonic(l) {\n  const isIncreasing = l.every((v, i) => i === 0 || v >= l[i - 1]);\n  const isDecreasing = l.every((v, i) => i === 0 || v <= l[i - 1]);\n\n  return isIncreasing || isDecreasing;\n}"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "function common(l1, l2) {\n  return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let divisor = 2;\n  let largestFactor = 1;\n\n  while (n > 1) {\n    while (n % divisor === 0) {\n      largestFactor = divisor;\n      n /= divisor;\n    }\n    divisor++;\n  }\n\n  return largestFactor;\n}"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n  return (n * (n + 1)) / 2;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n  let count = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i] === \")\") {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n}"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "function fibfib(n) {\n  const fib = [0, 0, 1];\n\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n\n  return fib[n];\n}"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n\n  // Check if the last letter is 'y'\n  if (s.endsWith('y')) {\n    count++;\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n  const str = x.toString();\n  const n = str.length;\n  shift %= n;\n  const reversed = str.split('').reverse().join('');\n  return shift === 0 ? str : reversed.slice(shift) + reversed.slice(0, shift);\n}"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitsum(s) {\n  let sum = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    const charCode = s.charCodeAt(i);\n\n    if (charCode >= 65 && charCode <= 90) {\n      sum += charCode;\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n  const [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n\n  let minEven = Infinity;\n  let minIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minIndex = i;\n    } else if (arr[i] % 2 === 0 && arr[i] === minEven && i < minIndex) {\n      minIndex = i;\n    }\n  }\n\n  return [minEven, minIndex];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "def search(lst):\n    \"\"\"\n    Finds the greatest integer in a list with a frequency greater than or equal to itself.\n\n    Args:\n        lst: A non-empty list of positive integers.\n\n    Returns:\n        The greatest integer with a frequency greater than or equal to itself, or -1 if no such integer exists.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each integer.\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Find the greatest integer with a frequency greater than or equal to itself.\n    result = -1\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n\n    return result"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  lst.sort((a, b) => a - b); // Sort the list in ascending order\n  const result = [];\n\n  while (lst.length > 0) {\n    result.push(lst.shift()); // Push the first element (minimum)\n    result.push(lst.pop()); // Push the last element (maximum)\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "def willItFly(q, w):\n    # Check if the list is balanced\n    is_balanced = q[:] == q[::-1]\n\n    # Check if the sum of the elements is less than or equal to the maximum weight\n    total_weight = sum(q)\n\n    # Return True if both conditions are met, False otherwise\n    return is_balanced and total_weight <= w"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n  const n = arr.length;\n  const dp = new Array(n).fill(0);\n\n  for (let i = 1; i < n; i++) {\n    if (arr[i] === arr[i - 1]) {\n      continue;\n    }\n\n    dp[i] = dp[i - 1] + 1;\n  }\n\n  return dp[n - 1] / 2;\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n  const totalChars1 = lst1.reduce((acc, str) => acc + str.length, 0);\n  const totalChars2 = lst2.reduce((acc, str) => acc + str.length, 0);\n\n  if (totalChars1 < totalChars2) {\n    return lst1;\n  } else if (totalChars2 < totalChars1) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n  if (a < 2) {\n    return false;\n  }\n\n  let count = 0;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    while (a % i === 0) {\n      count++;\n      a /= i;\n    }\n  }\n\n  if (a > 1) {\n    count++;\n  }\n\n  return count === 3;\n}"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function isSimplePower(x, n) {\n  return Math.pow(n, parseInt(x)) === x;\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "def iscube(a):\n    \"\"\"\n    Checks if an integer is a cube of some integer number.\n\n    Args:\n      a (int): The integer to check.\n\n    Returns:\n      bool: True if a is a cube of some integer number, False otherwise.\n    \"\"\"\n    for i in range(int(a**(1/3)) + 1):\n        if i**3 == a:\n            return True\n    return False"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n  const primes = [2, 3, 5, 7, 11, 13, 17];\n  let count = 0;\n\n  for (let i = 0; i < num.length; i++) {\n    let digit = num.charAt(i);\n\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      digit = parseInt(digit, 16);\n    }\n\n    if (primes.includes(digit)) {\n      count++;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  let binary = '';\n  let divisor = 2;\n  let remainder;\n\n  while (decimal > 0) {\n    remainder = decimal % divisor;\n    binary = (remainder === 1 ? '1' : '0') + binary;\n    decimal = Math.floor(decimal / divisor);\n  }\n\n  return 'db' + binary + 'db';\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "def isHappy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "def numericalLetterGrade(grades):\n    \"\"\"\n    Converts numerical grades to letter grades.\n\n    Args:\n        grades (list): A list of GPAs.\n\n    Returns:\n        list: A list of letter grades.\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function primeLength(str) {\n  const len = str.length;\n\n  // Check if the string length is prime\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  return isPrime(len);\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n) {\n  if (n === 1) return 10;\n\n  const first = Math.pow(10, n - 1);\n  const last = Math.pow(10, n) - 1;\n\n  const count = last - first + 1;\n\n  const startsWithOne = count - (Math.floor(last / 100) - Math.floor(first / 100) + 1);\n  const endsWithOne = count - (Math.floor(last / 10) - Math.floor(first / 10) + 1);\n\n  return count - startsWithOne - endsWithOne + 1;\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "function solve(n) {\n  let sum = 0;\n\n  while (n > 0) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n\n  return sum.toString(2);\n}"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n  return s\n    .split(' ') // Split the string into words\n    .map(word => {\n      return word\n        .split('') // Split each word into characters\n        .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)) // Sort characters by ASCII value\n        .join(''); // Join the sorted characters into a new word\n    })\n    .join(' '); // Join the sorted words into a new string\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "def getRow(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row[::-1]):\n            if num == x:\n                result.append((i, j))\n    result.sort()\n    return result"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "function sortArray(array) {\n  const sum = array[0] + array[array.length - 1];\n\n  const sortedArray = [...array].sort((a, b) => {\n    if (sum % 2 === 1) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n\n  return sortedArray;\n}"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n  const shiftedAlphabet = 'cdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'.split('');\n  const encryptedChars = s.split('').map(char => {\n    const index = shiftedAlphabet.indexOf(char);\n    return index !== -1 ? shiftedAlphabet[index + 4] : char;\n  });\n  return encryptedChars.join('');\n}"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst) {\n  if (lst.length < 2) {\n    return null;\n  }\n\n  let min = Infinity;\n  let secondMin = Infinity;\n\n  for (const num of lst) {\n    if (num < min) {\n      secondMin = min;\n      min = num;\n    } else if (num < secondMin && num !== min) {\n      secondMin = num;\n    }\n  }\n\n  return secondMin;\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function isBored(s) {\n  const sentences = s.split(/[!.?]/);\n  let boredoms = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"I\")) {\n      boredoms++;\n    }\n  }\n\n  return boredoms;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function anyInt(x, y, z) {\n  return (x === y + z || y === x + z || z === x + y) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const encodedMessage = message.split('').map(char => {\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      return vowels[(index + 2) % vowels.length];\n    } else {\n      return char.toUpperCase();\n    }\n  });\n  return encodedMessage.join('');\n}"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "def largest_prime_sum(lst):\n    largest_prime = max(lst, key=is_prime)\n    sum_of_digits = 0\n    while largest_prime:\n        sum_of_digits += largest_prime % 10\n        largest_prime //= 10\n    return sum_of_digits\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  const firstKeyCase = dict[Object.keys(dict)[0]].toLowerCase();\n\n  for (const key in dict) {\n    if (dict[key].toLowerCase() !== firstKeyCase) {\n      return false;\n    }\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function countUpTo(n) {\n  const primes = [];\n\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n\n  return primes;\n}"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(a, b) {\n  return (a % 10) * (b % 10);\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  let count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  if (Math.abs(num - floor) === Math.abs(num - ceil)) {\n    return num > 0 ? ceil : floor;\n  }\n\n  return num >= 0 ? ceil : floor;\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "def make_a_pile(n):\n    result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n -= 1\n        else:\n            n += 1\n        result.append(n)\n    return result[::-1]"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function wordsString(s) {\n  return s.split(/[, ]+/);\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n  let result = -1;\n\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n + m) * (Math.abs(n - m) + 1) / 2;\n  const average = Math.round(sum);\n  return (\"0b\" + average.toString(2));\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n  return x.filter(num => !num.toString().includes('2')).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function sortAndName(arr) {\n  // Filter and sort valid numbers\n  const validNums = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n\n  // Reverse the array\n  validNums.reverse();\n\n  // Map each number to its name\n  const namedNums = validNums.map(num => {\n    switch (num) {\n      case 1: return \"One\";\n      case 2: return \"Two\";\n      case 3: return \"Three\";\n      case 4: return \"Four\";\n      case 5: return \"Five\";\n      case 6: return \"Six\";\n      case 7: return \"Seven\";\n      case 8: return \"Eight\";\n      case 9: return \"Nine\";\n    }\n  });\n\n  return namedNums;\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n  return Array.from({ length: n }, (_, i) => (i % 2 === 0 ? factorial(i) : sum(i)));\n}\n\nfunction factorial(n) {\n  return n <= 1 ? 1 : n * factorial(n - 1);\n}\n\nfunction sum(n) {\n  return (n * (n + 1)) / 2;\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        str_i = str(i)\n        str_i_rev = str_i[::-1]\n\n        if str_i == str_i_rev:\n            if int(str_i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function countNums(arr) {\n  return arr.filter(num => {\n    let sum = 0;\n    let n = num;\n\n    while (n) {\n      sum += Math.abs(n % 10);\n      n = Math.floor(n / 10);\n    }\n\n    return sum > 0;\n  }).length;\n}"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "def moveOneBall(arr):\n    if not arr:\n        return True\n\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n\n    if min_index == 0:\n        return True\n\n    shifts = min_index\n    return shifts % 2 == 0"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  let evenCount = lst1.filter(num => num % 2 === 0).length;\n  let oddCount = lst2.filter(num => num % 2 !== 0).length;\n\n  if (evenCount === lst1.length) {\n    return \"YES\";\n  } else if (oddCount === lst2.length) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n}"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(test) {\n  if (!test) return {};\n\n  const letters = test.split(' ');\n  const letterCount = {};\n\n  for (const letter of letters) {\n    if (letterCount[letter]) {\n      letterCount[letter]++;\n    } else {\n      letterCount[letter] = 1;\n    }\n  }\n\n  const maxCount = Math.max(...Object.values(letterCount));\n  const result = {};\n\n  for (const letter in letterCount) {\n    if (letterCount[letter] === maxCount) {\n      result[letter] = letterCount[letter];\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "def reverseDelete(s, c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "function oddCount(lst) {\n  return lst.map(str => {\n    let oddCount = 0;\n    for (const char of str) {\n      if (Number(char) % 2 === 1) {\n        oddCount++;\n      }\n    }\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "function minSubArraySum(nums) {\n  let minSum = Infinity;\n  let currentSum = 0;\n\n  for (const num of nums) {\n    currentSum += num;\n    minSum = Math.min(minSum, currentSum);\n\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\n  return minSum;\n}"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let filled = 0;\n  let times = 0;\n\n  while (filled < rows * cols) {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1 && filled < capacity) {\n          filled++;\n          grid[i][j] = 0;\n        }\n      }\n    }\n    times++;\n  }\n\n  return times;\n}"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function sortArray(arr) {\n  return arr.sort((a, b) => {\n    const onesA = a.toString(2).replace(/0/g, '').length;\n    const onesB = b.toString(2).replace(/0/g, '').length;\n\n    if (onesA === onesB) {\n      return a - b;\n    }\n\n    return onesA - onesB;\n  });\n}"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(s, n) {\n  const words = s.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    let consonants = 0;\n\n    for (const char of word) {\n      if ('aeiou'.indexOf(char) === -1) {\n        consonants++;\n      }\n    }\n\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const letters = word.split('');\n\n  let lastConsonantIndex = -1;\n  let secondLastConsonantIndex = -1;\n\n  for (let i = letters.length - 1; i >= 0; i--) {\n    if (vowels.includes(letters[i])) {\n      continue;\n    }\n\n    if (lastConsonantIndex === -1) {\n      if (letters[i].match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n        lastConsonantIndex = i;\n      }\n    } else if (secondLastConsonantIndex === -1) {\n      if (letters[i].match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n        secondLastConsonantIndex = i;\n        break;\n      }\n    }\n  }\n\n  return lastConsonantIndex !== -1 && secondLastConsonantIndex !== -1 ? letters[lastConsonantIndex] : '';\n}"}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "def match_parens(lst):\n    count = 0\n    for char in lst:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 1)"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "def getOddCollatz(n):\n    odd_numbers = []\n    current_number = n\n\n    while current_number != 1:\n        if current_number % 2 == 1:\n            odd_numbers.append(current_number)\n        current_number = current_number // 2 if current_number % 2 == 0 else 3 * current_number + 1\n\n    odd_numbers.append(1)\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n  const regex = /^\\d{2}-\\d{2}-\\d{4}$/;\n  if (!regex.test(date)) {\n    return false;\n  }\n\n  const [month, day, year] = date.split('-');\n  const monthNumber = parseInt(month);\n  const dayNumber = parseInt(day);\n\n  if (monthNumber < 1 || monthNumber > 12) {\n    return false;\n  }\n\n  if (dayNumber < 1 || dayNumber > new Date(year, monthNumber, 0).getDate()) {\n    return false;\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "function splitWords(txt) {\n  if (txt.trim() === \"\") {\n    return [];\n  }\n\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    return txt.split(\"\")\n      .filter(char => char.toLowerCase() >= 'a' && char.toLowerCase() <= 'z')\n      .filter((char, i) => i % 2 !== 0)\n      .length;\n  }\n}"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function isSorted(lst) {\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n    if (lst.indexOf(lst[i]) !== lst.lastIndexOf(lst[i])) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // Check if the intervals intersect\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n  // Check if the length is a prime number\n  if (length <= 1 || (length % 2 === 0 && length !== 2)) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "function prodSigns(arr) {\n  if (arr.length === 0) return null;\n\n  let product = 1;\n  let sum = 0;\n\n  for (const num of arr) {\n    const sign = num > 0 ? 1 : num < 0 ? -1 : 0;\n    product *= sign;\n    sum += Math.abs(num);\n  }\n\n  return product * sum;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "function minpath(grid, k) {\n  const n = grid.length;\n  const visited = new Array(n).fill(false).map(() => new Array(n).fill(false));\n  const minPath = new Array(k);\n\n  const dfs = (row, col, path) => {\n    if (path.length === k) {\n      minPath.sort((a, b) => a.localeCompare(b));\n      return;\n    }\n\n    visited[row][col] = true;\n    path.push(grid[row][col]);\n\n    for (const [dr, dc] of [[1, 0], [-1, 0], [0, 1], [0, -1]]) {\n      const nextRow = row + dr;\n      const nextCol = col + dc;\n\n      if (nextRow >= 0 && nextRow < n && nextCol >= 0 && nextCol < n && !visited[nextRow][nextCol]) {\n        dfs(nextRow, nextCol, path);\n      }\n    }\n\n    path.pop();\n    visited[row][col] = false;\n  };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dfs(i, j, []);\n    }\n  }\n\n  return minPath;\n}"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tri(n) {\n  const result = [1];\n\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      result.push(3);\n    } else if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n\n  return product;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function isNested(string) {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n  // Remove trailing spaces\n  txt = txt.trimEnd();\n\n  // Check if the last character is alphabetical and not a part of a word\n  return /[a-zA-Z]/.test(txt[txt.length - 1]) && !/\\s/.test(txt[txt.length - 2]);\n}"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    \"\"\"\n\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    if not negatives:\n        a = None\n    else:\n        a = max(negatives)\n\n    if not positives:\n        b = None\n    else:\n        b = min(positives)\n\n    return (a, b)"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(a, b) {\n  // Convert strings to numbers\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(/,/g, ''));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(/,/g, ''));\n  }\n\n  // Compare and return the larger value\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return null;\n  }\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "def isEqualToSumEven(n):\n    for i in range(2, n, 2):\n        for j in range(i + 2, n, 2):\n            for k in range(j + 2, n, 2):\n                if i + j + k + n == n:\n                    return True\n    return False"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  let result = n;\n\n  for (let i = n - 1; i >= 1; i--) {\n    result *= i;\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "def fixSpaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "def fileNameCheck(filename):\n    count = 0\n    dot_index = filename.find('.')\n    substring_before_dot = filename[:dot_index]\n    substring_after_dot = filename[dot_index + 1:]\n    if substring_after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    for char in substring_before_dot:\n        if char.isdigit():\n            count += 1\n    if count > 3 or substring_before_dot == '':\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n  return true;\n}\n\nfunction wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n\n  return result.join(' ');\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "function simplify(x, n) {\n  const [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n  const [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n\n  const denominator = xDenominator * nDenominator;\n  const numerator = xNumerator * nDenominator + nNumerator * xDenominator;\n\n  return Number.isInteger(numerator / denominator);\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function orderByPoints(nums) {\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n}\n\nfunction getDigitSum(num) {\n  let sum = 0;\n  let n = Math.abs(num);\n\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n  return nums.filter(num => num > 10 && /[13579]$/.test(num) && /^[13579]/.test(num)).length;\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "function getMaxTriples(n) {\n    const a = new Array(n);\n\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    let count = 0;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    return planets[index1+1:index2]"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function list_sort(lst) {\n  return lst.filter(word => word.length % 2 === 0)\n    .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    });\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "def xOrY(n, x, y):\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  return lst.filter(x => Number.isInteger(x) && x > 0 && x % 2 === 1).reduce((acc, x) => acc + x * x, 0);\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n  const result = [];\n\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "def strongestExtension(classname, extensions):\n    extension_strengths = [(extension, (extension.upper().count('A') - extension.lower().count('e'))) for extension in extensions]\n    strongest_extension = max(extension_strengths, key=lambda x: x[1])[0]\n    return f\"{classname}.{strongest_extension}\""}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  // Create an array of all rotations of b\n  const rotations = [];\n  for (let i = 0; i < b.length; i++) {\n    rotations.push(b.slice(i) + b.slice(0, i));\n  }\n\n  // Check if any rotation of b is a substring of a\n  return rotations.some(rotation => a.includes(rotation));\n}"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "def evenOddCount(num):\n    even_count = 0\n    odd_count = 0\n\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return even_count, odd_count"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  const symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n\n  let result = \"\";\n\n  for (let i = 0; i < values.length; i++) {\n    while (number >= values[i]) {\n      result += symbols[i];\n      number -= values[i];\n    }\n  }\n\n  return result.toLowerCase();\n}"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n\n    # Sort the sides in descending order\n    sides = [a, b, c]\n    sides.sort(reverse=True)\n\n    # Check if the largest side is the hypotenuse (the side opposite the right angle)\n    hypotenuse = sides[0]\n\n    # Calculate the squared lengths of the other two sides\n    other_side1_squared = sides[1] ** 2\n    other_side2_squared = sides[2] ** 2\n\n    # Check if the squared length of the largest side is equal to the sum of the squared lengths of the other two sides\n    return hypotenuse ** 2 == other_side1_squared + other_side2_squared"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n  let maxUniqueChars = 0;\n  let maxWord = '';\n\n  for (const word of words) {\n    const uniqueChars = new Set(word).size;\n\n    if (uniqueChars > maxUniqueChars || (uniqueChars === maxUniqueChars && word < maxWord)) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "function eat(number, need, remaining) {\n  if (remaining < need) {\n    return [number + remaining, 0];\n  } else {\n    return [number + need, remaining - need];\n  }\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "function doAlgebra(operator, operand) {\n  let result = operand[0];\n\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const num = operand[i + 1];\n\n    switch (op) {\n      case '+':\n        result += num;\n        break;\n      case '-':\n        result -= num;\n        break;\n      case '*':\n        result *= num;\n        break;\n      case '//':\n        result = Math.floor(result / num);\n        break;\n      case '**':\n        result = Math.pow(result, num);\n        break;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n  return s.split('').map(c => {\n    if(/[a-zA-Z]/.test(c)) {\n      return c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n    } else {\n      return c;\n    }\n  }).join('');\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return \"none\"\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  const result = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result.reverse();\n}"}
